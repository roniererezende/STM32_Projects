
MTE-100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018520  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ca8  08018720  08018720  00019720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3c8  0801c3c8  0001e348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c3c8  0801c3c8  0001d3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3d0  0801c3d0  0001e348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c3d0  0801c3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c3d4  0801c3d4  0001d3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0801c3d8  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000208  0801c5e0  0001e208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a8  0801c680  0001e2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008088  20000348  0801c720  0001e348  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200083d0  0801c720  0001e3d0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001e348  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a50e  00000000  00000000  0001e376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007114  00000000  00000000  00048884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002000  00000000  00000000  0004f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001987  00000000  00000000  00051998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039336  00000000  00000000  0005331f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000368d2  00000000  00000000  0008c655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001193e7  00000000  00000000  000c2f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dc30e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009620  00000000  00000000  001dc354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  001e5974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000348 	.word	0x20000348
 800021c:	00000000 	.word	0x00000000
 8000220:	08018708 	.word	0x08018708

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000034c 	.word	0x2000034c
 800023c:	08018708 	.word	0x08018708

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <MX_CAN1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a10:	2206      	movs	r2, #6
 8000a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a2a:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a56:	f001 f9a5 	bl	8001da4 <HAL_CAN_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 fb10 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000364 	.word	0x20000364
 8000a6c:	40006400 	.word	0x40006400

08000a70 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_CAN_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000ac2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_CAN_MspInit+0x84>)
 8000ae0:	f002 fdaa 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40006400 	.word	0x40006400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <can_init>:
  }
}

/* USER CODE BEGIN 1 */
void can_init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <can_reception>:
void can_reception(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	mte100.data.altura       = ((payload_id_can_0x100[0] << 8) | payload_id_can_0x100[1]);
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <can_reception+0x94>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <can_reception+0x94>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <can_reception+0x98>)
 8000b26:	809a      	strh	r2, [r3, #4]
	mte100.data.peso		  = ((payload_id_can_0x100[2] << 8) | payload_id_can_0x100[3]);
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <can_reception+0x94>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <can_reception+0x94>)
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <can_reception+0x98>)
 8000b40:	80da      	strh	r2, [r3, #6]
	mte100.data.status_flags = payload_id_can_0x100[4];
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <can_reception+0x94>)
 8000b44:	791a      	ldrb	r2, [r3, #4]
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <can_reception+0x98>)
 8000b48:	721a      	strb	r2, [r3, #8]

	mte100.data.tensao       = (uint8_t) (payload_id_can_0x200[0] * 0.5);
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <can_reception+0x9c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b56:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b62:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b66:	793b      	ldrb	r3, [r7, #4]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <can_reception+0x98>)
 8000b6c:	725a      	strb	r2, [r3, #9]
	mte100.data.horimetro	  = ((payload_id_can_0x200[4] << 24) | (payload_id_can_0x200[5] << 16) |(payload_id_can_0x200[6] << 8) | payload_id_can_0x200[7]);
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <can_reception+0x9c>)
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	061a      	lsls	r2, r3, #24
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <can_reception+0x9c>)
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <can_reception+0x9c>)
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <can_reception+0x9c>)
 8000b86:	79d2      	ldrb	r2, [r2, #7]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <can_reception+0x98>)
 8000b8e:	60da      	str	r2, [r3, #12]

}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000394 	.word	0x20000394
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <can_simulation_transmition>:

void can_simulation_transmition(uint8_t packet_num)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	switch (packet_num)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	f200 80cf 	bhi.w	8000d58 <can_simulation_transmition+0x1b0>
 8000bba:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc0 <can_simulation_transmition+0x18>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000c95 	.word	0x08000c95
 8000bcc:	08000cf7 	.word	0x08000cf7
	{
		case 0:
			payload_id_can_0x100[0] = 0x16; // altura_msb
 8000bd0:	4b64      	ldr	r3, [pc, #400]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd2:	2216      	movs	r2, #22
 8000bd4:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x03; // altura_lsb
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x04; // peso_msb
 8000bdc:	4b61      	ldr	r3, [pc, #388]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xE9; // peso_lsb
 8000be2:	4b60      	ldr	r3, [pc, #384]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000be4:	22e9      	movs	r2, #233	@ 0xe9
 8000be6:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x07; // status_flags
 8000be8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000bee:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x60; // tensao
 8000c00:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c02:	2260      	movs	r2, #96	@ 0x60
 8000c04:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c0c:	4b56      	ldr	r3, [pc, #344]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c12:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c18:	4b53      	ldr	r3, [pc, #332]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2A; // horimetro 1
 8000c24:	4b50      	ldr	r3, [pc, #320]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c26:	222a      	movs	r2, #42	@ 0x2a
 8000c28:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x62; // horimetro 0 lsb
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c2c:	2262      	movs	r2, #98	@ 0x62
 8000c2e:	721a      	strb	r2, [r3, #8]
		break;
 8000c30:	e092      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 1:
			payload_id_can_0x100[0] = 0x17; // altura_msb
 8000c32:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c34:	2217      	movs	r2, #23
 8000c36:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x04; // altura_lsb
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x05; // peso_msb
 8000c3e:	4b49      	ldr	r3, [pc, #292]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c40:	2205      	movs	r2, #5
 8000c42:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEA; // peso_lsb
 8000c44:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c46:	22ea      	movs	r2, #234	@ 0xea
 8000c48:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x06; // status_flags
 8000c4a:	4b46      	ldr	r3, [pc, #280]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000c50:	4b44      	ldr	r3, [pc, #272]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000c56:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000c5c:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x62; // tensao
 8000c62:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c64:	2262      	movs	r2, #98	@ 0x62
 8000c66:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c68:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2B; // horimetro 1
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c88:	222b      	movs	r2, #43	@ 0x2b
 8000c8a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x63; // horimetro 0 lsb
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	721a      	strb	r2, [r3, #8]
		break;
 8000c92:	e061      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 2:
			payload_id_can_0x100[0] = 0x18; // altura_msb
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c96:	2218      	movs	r2, #24
 8000c98:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x05; // altura_lsb
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x06; // peso_msb
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEB; // peso_lsb
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca8:	22eb      	movs	r2, #235	@ 0xeb
 8000caa:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x05; // status_flags
 8000cac:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cae:	2205      	movs	r2, #5
 8000cb0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x64; // tensao
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cc6:	2264      	movs	r2, #100	@ 0x64
 8000cc8:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2C; // horimetro 1
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cea:	222c      	movs	r2, #44	@ 0x2c
 8000cec:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x64; // horimetro 0 lsb
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cf0:	2264      	movs	r2, #100	@ 0x64
 8000cf2:	721a      	strb	r2, [r3, #8]
		break;
 8000cf4:	e030      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 3:
			payload_id_can_0x100[0] = 0x19; // altura_msb
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cf8:	2219      	movs	r2, #25
 8000cfa:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x06; // altura_lsb
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x07; // peso_msb
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEC; // peso_lsb
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d0a:	22ec      	movs	r2, #236	@ 0xec
 8000d0c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x04; // status_flags
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x66; // tensao
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d28:	2266      	movs	r2, #102	@ 0x66
 8000d2a:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2D; // horimetro 1
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d4c:	222d      	movs	r2, #45	@ 0x2d
 8000d4e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x65; // horimetro 0 lsb
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d52:	2265      	movs	r2, #101	@ 0x65
 8000d54:	721a      	strb	r2, [r3, #8]
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a22      	ldr	r2, [pc, #136]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_TERM_N_GPIO_Port, CAN_TERM_N_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dd2:	f002 fddd 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000dde:	f002 fdd7 	bl	8003990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_TERM_N_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_N_Pin;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_TERM_N_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dfc:	f002 fc1c 	bl	8003638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000e1a:	f002 fc0d 	bl	8003638 <HAL_GPIO_Init>

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_TIM_PeriodElapsedCallback>:
//uint16_t count_second_tim3 = 0;
//uint16_t count_minute_tim3 = 0;

// Função de Callback da Interrupção
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
//					mte100.led.state = led_transmit_data_mqtt;
//				}
//			}
//		}
//	}
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <led_init>:
/* INCLUDE */
#include <mte100.h>

/*  FUNCTIONS */
void led_init(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	mte100.led.toggle  = false;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <led_init+0x14>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	709a      	strb	r2, [r3, #2]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000394 	.word	0x20000394

08000e60 <led_idle_>:

void led_idle_(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	LED_STATUS_LOW();
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6a:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <led_idle_+0x1c>)
 8000e6c:	f002 fd90 	bl	8003990 <HAL_GPIO_WritePin>
	mte100.led.toggle = false;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <led_idle_+0x20>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	709a      	strb	r2, [r3, #2]
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	20000394 	.word	0x20000394

08000e84 <led_rx_data_can>:

void led_rx_data_can(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <led_rx_data_can+0x20>)
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <led_rx_data_can+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000e90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e94:	4804      	ldr	r0, [pc, #16]	@ (8000ea8 <led_rx_data_can+0x24>)
 8000e96:	f002 fd94 	bl	80039c2 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000e9a:	4b02      	ldr	r3, [pc, #8]	@ (8000ea4 <led_rx_data_can+0x20>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	709a      	strb	r2, [r3, #2]
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000394 	.word	0x20000394
 8000ea8:	40020800 	.word	0x40020800

08000eac <led_tx_transmit_data_mqtt>:

void led_tx_transmit_data_mqtt(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <led_tx_transmit_data_mqtt+0x20>)
 8000eb2:	789b      	ldrb	r3, [r3, #2]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <led_tx_transmit_data_mqtt+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000eb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <led_tx_transmit_data_mqtt+0x24>)
 8000ebe:	f002 fd80 	bl	80039c2 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000ec2:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <led_tx_transmit_data_mqtt+0x20>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	709a      	strb	r2, [r3, #2]
	}

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000394 	.word	0x20000394
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <led_handle>:

void led_handle(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	switch (mte100.led.state)
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <led_handle+0x40>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d817      	bhi.n	8000f10 <led_handle+0x3c>
 8000ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <led_handle+0x14>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000eff 	.word	0x08000eff
 8000ef0:	08000f05 	.word	0x08000f05
 8000ef4:	08000f0b 	.word	0x08000f0b
	{
		case led_initialization:
			led_init();
 8000ef8:	f7ff ffa6 	bl	8000e48 <led_init>
		break;
 8000efc:	e008      	b.n	8000f10 <led_handle+0x3c>

		case led_idle:
			led_idle_();
 8000efe:	f7ff ffaf 	bl	8000e60 <led_idle_>
			break;
 8000f02:	e005      	b.n	8000f10 <led_handle+0x3c>

		case led_receive_data_can:
			led_rx_data_can();
 8000f04:	f7ff ffbe 	bl	8000e84 <led_rx_data_can>
			break;
 8000f08:	e002      	b.n	8000f10 <led_handle+0x3c>

		case led_transmit_data_mqtt:
			led_tx_transmit_data_mqtt();
 8000f0a:	f7ff ffcf 	bl	8000eac <led_tx_transmit_data_mqtt>
			break;
 8000f0e:	bf00      	nop
	}
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000394 	.word	0x20000394

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f1c:	f000 f886 	bl	800102c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 febf 	bl	8001ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f814 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff ff20 	bl	8000d6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f2c:	f7ff fd6a 	bl	8000a04 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000f30:	f000 fbd4 	bl	80016dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f34:	f000 fc26 	bl	8001784 <MX_TIM3_Init>
  MX_LWIP_Init();
 8000f38:	f005 fc50 	bl	80067dc <MX_LWIP_Init>
  MX_UART4_Init();
 8000f3c:	f000 fcb2 	bl	80018a4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  printf("Initialing LwIP...\n");
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <main+0x34>)
 8000f42:	f014 f8c7 	bl	80150d4 <puts>
  while (true)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mte100_main();
 8000f46:	f000 f9c9 	bl	80012dc <mte100_main>
 8000f4a:	e7fc      	b.n	8000f46 <main+0x2e>
 8000f4c:	08018720 	.word	0x08018720

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2234      	movs	r2, #52	@ 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f014 f9e4 	bl	801532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f78:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <SystemClock_Config+0xd4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a25      	ldr	r2, [pc, #148]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <SystemClock_Config+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fac:	2310      	movs	r3, #16
 8000fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fbc:	23d8      	movs	r3, #216	@ 0xd8
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fd61 	bl	8003a98 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fdc:	f000 f852 	bl	8001084 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe0:	f002 fd0a 	bl	80039f8 <HAL_PWREx_EnableOverDrive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fea:	f000 f84b 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2107      	movs	r1, #7
 800100c:	4618      	mov	r0, r3
 800100e:	f002 fff1 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001018:	f000 f834 	bl	8001084 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	@ 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800103e:	f001 f8bf 	bl	80021c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001042:	2301      	movs	r3, #1
 8001044:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001046:	2300      	movs	r3, #0
 8001048:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800104e:	231f      	movs	r3, #31
 8001050:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001052:	2387      	movs	r3, #135	@ 0x87
 8001054:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001056:	2300      	movs	r3, #0
 8001058:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800105a:	2300      	movs	r3, #0
 800105c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800105e:	2301      	movs	r3, #1
 8001060:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001062:	2301      	movs	r3, #1
 8001064:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f001 f8dd 	bl	8002230 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001076:	2004      	movs	r0, #4
 8001078:	f001 f8ba 	bl	80021f0 <HAL_MPU_Enable>

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <mqtt_publish_data>:
{

}

void mqtt_publish_data(void)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af04      	add	r7, sp, #16
	mqtt_create_json_protocol();
 8001096:	f000 f833 	bl	8001100 <mqtt_create_json_protocol>

	err_t result = mqtt_publish(client, MQTT_TOPIC, mte100.mqtt.payload, strlen((char *)mte100.mqtt.payload), 0, 0, NULL, NULL);
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <mqtt_publish_data+0x5c>)
 800109c:	681c      	ldr	r4, [r3, #0]
 800109e:	4814      	ldr	r0, [pc, #80]	@ (80010f0 <mqtt_publish_data+0x60>)
 80010a0:	f7ff f91e 	bl	80002e0 <strlen>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	9202      	str	r2, [sp, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <mqtt_publish_data+0x60>)
 80010ba:	490e      	ldr	r1, [pc, #56]	@ (80010f4 <mqtt_publish_data+0x64>)
 80010bc:	4620      	mov	r0, r4
 80010be:	f006 fa8d 	bl	80075dc <mqtt_publish>
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]

	if(result == ERR_OK)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d104      	bne.n	80010d8 <mqtt_publish_data+0x48>
	{
		printf("MQTT Published: %s\n", mte100.mqtt.payload);
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <mqtt_publish_data+0x60>)
 80010d0:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <mqtt_publish_data+0x68>)
 80010d2:	f013 ff97 	bl	8015004 <iprintf>
	}
	else
	{
		printf("MQTT Published error (%d)\n", result);
	}
}
 80010d6:	e005      	b.n	80010e4 <mqtt_publish_data+0x54>
		printf("MQTT Published error (%d)\n", result);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <mqtt_publish_data+0x6c>)
 80010e0:	f013 ff90 	bl	8015004 <iprintf>
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	2000038c 	.word	0x2000038c
 80010f0:	200003a5 	.word	0x200003a5
 80010f4:	08018734 	.word	0x08018734
 80010f8:	08018764 	.word	0x08018764
 80010fc:	08018778 	.word	0x08018778

08001100 <mqtt_create_json_protocol>:
	}
}


void mqtt_create_json_protocol(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	@ 0x48
 8001104:	af08      	add	r7, sp, #32
    char motor_ligado[6]   = {};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	809a      	strh	r2, [r3, #4]
    char cesto_nivelado[6] = {};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	809a      	strh	r2, [r3, #4]
    char sobrecarga[6]     = {};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	809a      	strh	r2, [r3, #4]

    float altura  = mte100.data.altura / 1000;
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <mqtt_create_json_protocol+0x114>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <mqtt_create_json_protocol+0x118>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	099b      	lsrs	r3, r3, #6
 800112e:	b29b      	uxth	r3, r3
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    uint16_t peso = mte100.data.peso;
 800113c:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <mqtt_create_json_protocol+0x114>)
 800113e:	88db      	ldrh	r3, [r3, #6]
 8001140:	847b      	strh	r3, [r7, #34]	@ 0x22
    float tensao = (float)mte100.data.tensao;
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <mqtt_create_json_protocol+0x114>)
 8001144:	7a5b      	ldrb	r3, [r3, #9]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114e:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t horimetro = mte100.data.horimetro;
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <mqtt_create_json_protocol+0x114>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	61bb      	str	r3, [r7, #24]


    // Motor ligado
    if(payload_id_can_0x100[4] == true)
 8001158:	4b30      	ldr	r3, [pc, #192]	@ (800121c <mqtt_create_json_protocol+0x11c>)
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <mqtt_create_json_protocol+0x72>
    {
         strcpy(motor_ligado,"true");
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <mqtt_create_json_protocol+0x120>)
 8001166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116a:	6018      	str	r0, [r3, #0]
 800116c:	3304      	adds	r3, #4
 800116e:	7019      	strb	r1, [r3, #0]
 8001170:	e007      	b.n	8001182 <mqtt_create_json_protocol+0x82>
    }
    else
    {
        strcpy(motor_ligado,"false");
 8001172:	4a2c      	ldr	r2, [pc, #176]	@ (8001224 <mqtt_create_json_protocol+0x124>)
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117c:	6018      	str	r0, [r3, #0]
 800117e:	3304      	adds	r3, #4
 8001180:	8019      	strh	r1, [r3, #0]
    }

    // Cesto Nivelado
    if(payload_id_can_0x100[4] == true)
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <mqtt_create_json_protocol+0x11c>)
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <mqtt_create_json_protocol+0x9c>
    {
         strcpy(cesto_nivelado,"true");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <mqtt_create_json_protocol+0x120>)
 8001190:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001194:	6018      	str	r0, [r3, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	7019      	strb	r1, [r3, #0]
 800119a:	e007      	b.n	80011ac <mqtt_create_json_protocol+0xac>
    }
    else
    {
        strcpy(cesto_nivelado,"false");
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <mqtt_create_json_protocol+0x124>)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a6:	6018      	str	r0, [r3, #0]
 80011a8:	3304      	adds	r3, #4
 80011aa:	8019      	strh	r1, [r3, #0]
    }

    // Sobrecarga
    if(payload_id_can_0x100[4] == true)
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <mqtt_create_json_protocol+0x11c>)
 80011ae:	791b      	ldrb	r3, [r3, #4]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d107      	bne.n	80011c4 <mqtt_create_json_protocol+0xc4>
    {
         strcpy(sobrecarga,"true");
 80011b4:	463b      	mov	r3, r7
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <mqtt_create_json_protocol+0x120>)
 80011b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011bc:	6018      	str	r0, [r3, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	7019      	strb	r1, [r3, #0]
 80011c2:	e006      	b.n	80011d2 <mqtt_create_json_protocol+0xd2>
    }
    else
    {
        strcpy(sobrecarga,"false");
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <mqtt_create_json_protocol+0x124>)
 80011c6:	463b      	mov	r3, r7
 80011c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011cc:	6018      	str	r0, [r3, #0]
 80011ce:	3304      	adds	r3, #4
 80011d0:	8019      	strh	r1, [r3, #0]
    }


    sprintf((char *)mte100.mqtt.payload,
 80011d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011d6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80011dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	463a      	mov	r2, r7
 80011e6:	9207      	str	r2, [sp, #28]
 80011e8:	f107 0208 	add.w	r2, r7, #8
 80011ec:	9206      	str	r2, [sp, #24]
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	9205      	str	r2, [sp, #20]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	9204      	str	r2, [sp, #16]
 80011f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	ec53 2b16 	vmov	r2, r3, d6
 8001202:	4909      	ldr	r1, [pc, #36]	@ (8001228 <mqtt_create_json_protocol+0x128>)
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <mqtt_create_json_protocol+0x12c>)
 8001206:	f013 ff6d 	bl	80150e4 <siprintf>
        "\"motor_ligado\":%s,"
        "\"cesto_nivelado\":%s,"
        "\"sobrecarga\":%s"
        "}",
        altura, peso, tensao, horimetro, motor_ligado, cesto_nivelado, sobrecarga);
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000394 	.word	0x20000394
 8001218:	10624dd3 	.word	0x10624dd3
 800121c:	20000000 	.word	0x20000000
 8001220:	080187d4 	.word	0x080187d4
 8001224:	080187dc 	.word	0x080187dc
 8001228:	080187e4 	.word	0x080187e4
 800122c:	200003a5 	.word	0x200003a5

08001230 <mqtt_transmission>:

void mqtt_transmission(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	MX_LWIP_Process();
 8001234:	f005 fb24 	bl	8006880 <MX_LWIP_Process>

	if(mte100.mqtt.transmit == true)
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <mqtt_transmission+0x20>)
 800123a:	7c1b      	ldrb	r3, [r3, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <mqtt_transmission+0x1a>
	{
		mqtt_publish_data();
 8001240:	f7ff ff26 	bl	8001090 <mqtt_publish_data>
		mte100.mqtt.transmit = false;
 8001244:	4b02      	ldr	r3, [pc, #8]	@ (8001250 <mqtt_transmission+0x20>)
 8001246:	2200      	movs	r2, #0
 8001248:	741a      	strb	r2, [r3, #16]
	}
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000394 	.word	0x20000394

08001254 <mte100_init>:
mte100_s mte100;


/* FUNCTION DECLARATION */
void mte100_init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

	// Habilita a contador do timer 1 realiza a interrupção a 1ms. A cada 2 segundos ele habilitará uma flag que permitirá o recebimento das mensagem da CAN
	HAL_TIM_Base_Start(&htim1);
 8001258:	480a      	ldr	r0, [pc, #40]	@ (8001284 <mte100_init+0x30>)
 800125a:	f003 fd31 	bl	8004cc0 <HAL_TIM_Base_Start>

	// Habilita a contador do timer 1 realiza a interrupção a 1ms. A cada 5 minutos ele habilitará uma flag que permitirá o transmissão do pacote json
	HAL_TIM_Base_Start(&htim3);
 800125e:	480a      	ldr	r0, [pc, #40]	@ (8001288 <mte100_init+0x34>)
 8001260:	f003 fd2e 	bl	8004cc0 <HAL_TIM_Base_Start>

	// Habilita a interrupção do Timer 1
	HAL_TIM_Base_Start_IT(&htim1);
 8001264:	4807      	ldr	r0, [pc, #28]	@ (8001284 <mte100_init+0x30>)
 8001266:	f003 fd9b 	bl	8004da0 <HAL_TIM_Base_Start_IT>

	// Habilita a interrupção do Timer 3
	HAL_TIM_Base_Start_IT(&htim3);
 800126a:	4807      	ldr	r0, [pc, #28]	@ (8001288 <mte100_init+0x34>)
 800126c:	f003 fd98 	bl	8004da0 <HAL_TIM_Base_Start_IT>

	//Inicializa o protocolo CAN
	can_init();
 8001270:	f7ff fc42 	bl	8000af8 <can_init>

	mte100.led.state  = led_initialization;
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <mte100_init+0x38>)
 8001276:	2200      	movs	r2, #0
 8001278:	705a      	strb	r2, [r3, #1]

	// Inicializa a variável que habilita a transmissão com "false"
	mte100.mqtt.transmit = false;
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <mte100_init+0x38>)
 800127c:	2200      	movs	r2, #0
 800127e:	741a      	strb	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200004b8 	.word	0x200004b8
 8001288:	20000504 	.word	0x20000504
 800128c:	20000394 	.word	0x20000394

08001290 <mte100_set_broker>:

void mte100_set_broker(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	// Configura IP do broker
	ipaddr_aton(MQTT_BROKER_IP, &mqtt_server_ip);
 8001294:	4909      	ldr	r1, [pc, #36]	@ (80012bc <mte100_set_broker+0x2c>)
 8001296:	480a      	ldr	r0, [pc, #40]	@ (80012c0 <mte100_set_broker+0x30>)
 8001298:	f011 fec0 	bl	801301c <ip4addr_aton>

	client = mqtt_client_new();
 800129c:	f006 fa72 	bl	8007784 <mqtt_client_new>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <mte100_set_broker+0x34>)
 80012a4:	6013      	str	r3, [r2, #0]

	if(client == NULL)
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <mte100_set_broker+0x34>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d104      	bne.n	80012b8 <mte100_set_broker+0x28>
	{
		printf("Error to create MQTT client!\n");
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <mte100_set_broker+0x38>)
 80012b0:	f013 ff10 	bl	80150d4 <puts>
		Error_Handler();
 80012b4:	f7ff fee6 	bl	8001084 <Error_Handler>
	}
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000390 	.word	0x20000390
 80012c0:	0801885c 	.word	0x0801885c
 80012c4:	2000038c 	.word	0x2000038c
 80012c8:	08018870 	.word	0x08018870

080012cc <mte100_idle_>:

void mte100_idle_(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <mte100_main>:

void mte100_main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	switch (mte100.state)
 80012e0:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <mte100_main+0x5c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d822      	bhi.n	800132e <mte100_main+0x52>
 80012e8:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <mte100_main+0x14>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001305 	.word	0x08001305
 80012f4:	08001311 	.word	0x08001311
 80012f8:	0800131d 	.word	0x0800131d
 80012fc:	08001323 	.word	0x08001323
 8001300:	08001329 	.word	0x08001329
	{
		case mte100_initialization:
			mte100_init();
 8001304:	f7ff ffa6 	bl	8001254 <mte100_init>
			mte100.state = mte100_set_broker_IP;
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <mte100_main+0x5c>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
		break;
 800130e:	e00e      	b.n	800132e <mte100_main+0x52>

		case mte100_set_broker_IP:
			mte100_set_broker();
 8001310:	f7ff ffbe 	bl	8001290 <mte100_set_broker>
			mte100.state = mte100_idle;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <mte100_main+0x5c>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
		break;
 800131a:	e008      	b.n	800132e <mte100_main+0x52>

		case mte100_idle:
			mte100_idle_();
 800131c:	f7ff ffd6 	bl	80012cc <mte100_idle_>
		break;
 8001320:	e005      	b.n	800132e <mte100_main+0x52>

		case mte100_reception_can:
			can_reception();
 8001322:	f7ff fbf1 	bl	8000b08 <can_reception>
		break;
 8001326:	e002      	b.n	800132e <mte100_main+0x52>

		case mte100_transmission_json:
			mqtt_transmission();
 8001328:	f7ff ff82 	bl	8001230 <mqtt_transmission>
		break;
 800132c:	bf00      	nop
	}

	led_handle();
 800132e:	f7ff fdd1 	bl	8000ed4 <led_handle>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000394 	.word	0x20000394

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_MspInit+0x44>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a0e      	ldr	r2, [pc, #56]	@ (8001380 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_MspInit+0x44>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_MspInit+0x44>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <HAL_MspInit+0x44>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_MspInit+0x44>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t packet_num = 0;
	static uint8_t led_counter = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 fc9e 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // Verifica se a interrupção é do TIM1
  	count_millissecond_can++;
 80013e0:	4b47      	ldr	r3, [pc, #284]	@ (8001500 <SysTick_Handler+0x128>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <SysTick_Handler+0x128>)
 80013ea:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_receive_data_can)
 80013ec:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <SysTick_Handler+0x12c>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d11f      	bne.n	8001434 <SysTick_Handler+0x5c>
	{
		if(count_millissecond_can % 100 == 0)
 80013f4:	4b42      	ldr	r3, [pc, #264]	@ (8001500 <SysTick_Handler+0x128>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	4a43      	ldr	r2, [pc, #268]	@ (8001508 <SysTick_Handler+0x130>)
 80013fa:	fba2 1203 	umull	r1, r2, r2, r3
 80013fe:	0952      	lsrs	r2, r2, #5
 8001400:	2164      	movs	r1, #100	@ 0x64
 8001402:	fb01 f202 	mul.w	r2, r1, r2
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <SysTick_Handler+0x48>
		{
			mte100.led.toggle = true;
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <SysTick_Handler+0x12c>)
 8001410:	2201      	movs	r2, #1
 8001412:	709a      	strb	r2, [r3, #2]
			led_counter++;
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <SysTick_Handler+0x134>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <SysTick_Handler+0x134>)
 800141e:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 1)
 8001420:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <SysTick_Handler+0x134>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d905      	bls.n	8001434 <SysTick_Handler+0x5c>
		{
			mte100.led.state = led_idle;
 8001428:	4b36      	ldr	r3, [pc, #216]	@ (8001504 <SysTick_Handler+0x12c>)
 800142a:	2201      	movs	r2, #1
 800142c:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 800142e:	4b37      	ldr	r3, [pc, #220]	@ (800150c <SysTick_Handler+0x134>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
		}
	}

	// A cada 2 segundos é habilitado o estado "run" para que se seja realizado a transmissão dos dados via CAN
	if (count_millissecond_can > 1999)
 8001434:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <SysTick_Handler+0x128>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800143c:	d311      	bcc.n	8001462 <SysTick_Handler+0x8a>
	{
		can_simulation_transmition(packet_num);
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <SysTick_Handler+0x138>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fbb0 	bl	8000ba8 <can_simulation_transmition>

		mte100.state = mte100_reception_can;
 8001448:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <SysTick_Handler+0x12c>)
 800144a:	2203      	movs	r2, #3
 800144c:	701a      	strb	r2, [r3, #0]
		count_millissecond_can = 0;
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <SysTick_Handler+0x128>)
 8001450:	2200      	movs	r2, #0
 8001452:	801a      	strh	r2, [r3, #0]

		if(packet_num)
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <SysTick_Handler+0x138>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <SysTick_Handler+0x8a>
		{
			packet_num = 0;
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <SysTick_Handler+0x138>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
		}

	}

	/* Utilizado para controlar o tempo de transmissão do pacote MQTT a cada 5 minutos */
	count_millissecond_mqtt++;
 8001462:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <SysTick_Handler+0x13c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <SysTick_Handler+0x13c>)
 800146c:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_transmit_data_mqtt)
 800146e:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <SysTick_Handler+0x12c>)
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d11f      	bne.n	80014b6 <SysTick_Handler+0xde>
	{
		if(count_millissecond_mqtt % 100 == 0)
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <SysTick_Handler+0x13c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <SysTick_Handler+0x130>)
 800147c:	fba2 1203 	umull	r1, r2, r2, r3
 8001480:	0952      	lsrs	r2, r2, #5
 8001482:	2164      	movs	r1, #100	@ 0x64
 8001484:	fb01 f202 	mul.w	r2, r1, r2
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d108      	bne.n	80014a2 <SysTick_Handler+0xca>
		{
			mte100.led.toggle = true;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <SysTick_Handler+0x12c>)
 8001492:	2201      	movs	r2, #1
 8001494:	709a      	strb	r2, [r3, #2]
			led_counter++;
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <SysTick_Handler+0x134>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <SysTick_Handler+0x134>)
 80014a0:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 3)
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <SysTick_Handler+0x134>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d905      	bls.n	80014b6 <SysTick_Handler+0xde>
		{
			mte100.led.state = led_idle;
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <SysTick_Handler+0x12c>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <SysTick_Handler+0x134>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(count_millissecond_mqtt > 999)
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <SysTick_Handler+0x13c>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014be:	d31c      	bcc.n	80014fa <SysTick_Handler+0x122>
	{
		count_second_mqtt++;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <SysTick_Handler+0x140>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <SysTick_Handler+0x140>)
 80014ca:	801a      	strh	r2, [r3, #0]
		count_millissecond_mqtt = 0;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <SysTick_Handler+0x13c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	801a      	strh	r2, [r3, #0]

		if(count_second_mqtt > 59)
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <SysTick_Handler+0x140>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80014d8:	d90f      	bls.n	80014fa <SysTick_Handler+0x122>
		{
			count_minute_mqtt++;
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <SysTick_Handler+0x144>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <SysTick_Handler+0x144>)
 80014e4:	801a      	strh	r2, [r3, #0]

			if(count_minute_mqtt > 5)
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <SysTick_Handler+0x144>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d905      	bls.n	80014fa <SysTick_Handler+0x122>
			{
				mte100.mqtt.transmit = true;
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Handler+0x12c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	741a      	strb	r2, [r3, #16]
				mte100.led.state = led_transmit_data_mqtt;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <SysTick_Handler+0x12c>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	705a      	strb	r2, [r3, #1]
			}
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200004a8 	.word	0x200004a8
 8001504:	20000394 	.word	0x20000394
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	200004b0 	.word	0x200004b0
 8001510:	200004b1 	.word	0x200004b1
 8001514:	200004aa 	.word	0x200004aa
 8001518:	200004ac 	.word	0x200004ac
 800151c:	200004ae 	.word	0x200004ae

08001520 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001526:	f003 fcb3 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200004b8 	.word	0x200004b8

08001534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <TIM3_IRQHandler+0x10>)
 800153a:	f003 fca9 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000504 	.word	0x20000504

08001548 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <UART4_IRQHandler+0x10>)
 800154e:	f004 f95d 	bl	800580c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000550 	.word	0x20000550

0800155c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_kill>:

int _kill(int pid, int sig)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <_kill+0x20>)
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	200083c0 	.word	0x200083c0

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe5 	bl	800156c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a2:	bf00      	nop
 80015a4:	e7fd      	b.n	80015a2 <_exit+0x12>

080015a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	60f8      	str	r0, [r7, #12]
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e00a      	b.n	80015ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b8:	f3af 8000 	nop.w
 80015bc:	4601      	mov	r1, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbf0      	blt.n	80015b8 <_read+0x12>
  }

  return len;
 80015d6:	687b      	ldr	r3, [r7, #4]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001608:	605a      	str	r2, [r3, #4]
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_isatty>:

int _isatty(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d205      	bcs.n	8001684 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001678:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <_sbrk+0x6c>)
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20080000 	.word	0x20080000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	200004b4 	.word	0x200004b4
 80016b0:	200083d0 	.word	0x200083d0
 80016b4:	200083c0 	.word	0x200083c0

080016b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016fa:	4b20      	ldr	r3, [pc, #128]	@ (800177c <MX_TIM1_Init+0xa0>)
 80016fc:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <MX_TIM1_Init+0xa4>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8001700:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001702:	22d7      	movs	r2, #215	@ 0xd7
 8001704:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <MX_TIM1_Init+0xa0>)
 800170e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001712:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <MX_TIM1_Init+0xa0>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001720:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001726:	4815      	ldr	r0, [pc, #84]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001728:	f003 fa72 	bl	8004c10 <HAL_TIM_Base_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001732:	f7ff fca7 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4619      	mov	r1, r3
 8001742:	480e      	ldr	r0, [pc, #56]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001744:	f003 fcac 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800174e:	f7ff fc99 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <MX_TIM1_Init+0xa0>)
 8001764:	f003 fece 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800176e:	f7ff fc89 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200004b8 	.word	0x200004b8
 8001780:	40010000 	.word	0x40010000

08001784 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017a4:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <MX_TIM3_Init+0x98>)
 80017a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017aa:	22d7      	movs	r2, #215	@ 0xd7
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c8:	4813      	ldr	r0, [pc, #76]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017ca:	f003 fa21 	bl	8004c10 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017d4:	f7ff fc56 	bl	8001084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <MX_TIM3_Init+0x94>)
 80017e6:	f003 fc5b 	bl	80050a0 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017f0:	f7ff fc48 	bl	8001084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_TIM3_Init+0x94>)
 8001802:	f003 fe7f 	bl	8005504 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800180c:	f7ff fc3a 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000504 	.word	0x20000504
 800181c:	40000400 	.word	0x40000400

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_TIM_Base_MspInit+0x78>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d114      	bne.n	800185c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001832:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	4a19      	ldr	r2, [pc, #100]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6453      	str	r3, [r2, #68]	@ 0x44
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201a      	movs	r0, #26
 8001850:	f000 fc7f 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001854:	201a      	movs	r0, #26
 8001856:	f000 fc98 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800185a:	e018      	b.n	800188e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <HAL_TIM_Base_MspInit+0x80>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d113      	bne.n	800188e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_TIM_Base_MspInit+0x7c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	201d      	movs	r0, #29
 8001884:	f000 fc65 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001888:	201d      	movs	r0, #29
 800188a:	f000 fc7e 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40000400 	.word	0x40000400

080018a4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_UART4_Init+0x58>)
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <MX_UART4_Init+0x5c>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <MX_UART4_Init+0x58>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_UART4_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_UART4_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_UART4_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_UART4_Init+0x58>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_UART4_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_UART4_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_UART4_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_UART4_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_UART4_Init+0x58>)
 80018e8:	f003 feb8 	bl	800565c <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80018f2:	f7ff fbc7 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000550 	.word	0x20000550
 8001900:	40004c00 	.word	0x40004c00

08001904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0ae      	sub	sp, #184	@ 0xb8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2290      	movs	r2, #144	@ 0x90
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f013 fd01 	bl	801532c <memset>
  if(uartHandle->Instance==UART4)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a36      	ldr	r2, [pc, #216]	@ (8001a08 <HAL_UART_MspInit+0x104>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d165      	bne.n	8001a00 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001934:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001938:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800193a:	2300      	movs	r3, #0
 800193c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fd3c 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800194e:	f7ff fb99 	bl	8001084 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001952:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	4a2d      	ldr	r2, [pc, #180]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800195c:	6413      	str	r3, [r2, #64]	@ 0x40
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b25      	ldr	r3, [pc, #148]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_UART_MspInit+0x108>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199a:	2301      	movs	r3, #1
 800199c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b2:	2308      	movs	r3, #8
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019bc:	4619      	mov	r1, r3
 80019be:	4814      	ldr	r0, [pc, #80]	@ (8001a10 <HAL_UART_MspInit+0x10c>)
 80019c0:	f001 fe3a 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019de:	2308      	movs	r3, #8
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019e8:	4619      	mov	r1, r3
 80019ea:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <HAL_UART_MspInit+0x110>)
 80019ec:	f001 fe24 	bl	8003638 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2034      	movs	r0, #52	@ 0x34
 80019f6:	f000 fbac 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019fa:	2034      	movs	r0, #52	@ 0x34
 80019fc:	f000 fbc5 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a00:	bf00      	nop
 8001a02:	37b8      	adds	r7, #184	@ 0xb8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40004c00 	.word	0x40004c00
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020800 	.word	0x40020800

08001a18 <_write>:
  * @param  ptr:  ponteiro para o buffer de dados
  * @param  len:  número de bytes a transmitir
  * @retval número de bytes transmitidos
  */
int _write(int file, char *ptr, int len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <_write+0x28>)
 8001a30:	f003 fe62 	bl	80056f8 <HAL_UART_Transmit>
    return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000550 	.word	0x20000550

08001a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a48:	f7ff fe36 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a72:	f013 fcc5 	bl	8015400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a76:	f7ff fa4f 	bl	8000f18 <main>
  bx  lr    
 8001a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001a88:	0801c3d8 	.word	0x0801c3d8
  ldr r2, =_sbss
 8001a8c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001a90:	200083d0 	.word	0x200083d0

08001a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC_IRQHandler>

08001a96 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <LAN8742_RegisterBusIO+0x28>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <LAN8742_RegisterBusIO+0x28>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <LAN8742_RegisterBusIO+0x28>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e014      	b.n	8001aee <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d139      	bne.n	8001b8a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e01c      	b.n	8001b6a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f107 020c 	add.w	r2, r7, #12
 8001b38:	2112      	movs	r1, #18
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	4798      	blx	r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da03      	bge.n	8001b4c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001b44:	f06f 0304 	mvn.w	r3, #4
 8001b48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001b4a:	e00b      	b.n	8001b64 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d105      	bne.n	8001b64 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
         break;
 8001b62:	e005      	b.n	8001b70 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b1f      	cmp	r3, #31
 8001b6e:	d9df      	bls.n	8001b30 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b1f      	cmp	r3, #31
 8001b76:	d902      	bls.n	8001b7e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001b78:	f06f 0302 	mvn.w	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 }
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6810      	ldr	r0, [r2, #0]
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	2101      	movs	r1, #1
 8001bae:	4798      	blx	r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da02      	bge.n	8001bbc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bb6:	f06f 0304 	mvn.w	r3, #4
 8001bba:	e06e      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6810      	ldr	r0, [r2, #0]
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4798      	blx	r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da02      	bge.n	8001bd8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bd2:	f06f 0304 	mvn.w	r3, #4
 8001bd6:	e060      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e059      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6810      	ldr	r0, [r2, #0]
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4798      	blx	r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da02      	bge.n	8001c02 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001bfc:	f06f 0304 	mvn.w	r3, #4
 8001c00:	e04b      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11b      	bne.n	8001c44 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <LAN8742_GetLinkState+0x90>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c20:	2302      	movs	r3, #2
 8001c22:	e03a      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e033      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	e02c      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c40:	2305      	movs	r3, #5
 8001c42:	e02a      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6810      	ldr	r0, [r2, #0]
 8001c4c:	f107 020c 	add.w	r2, r7, #12
 8001c50:	211f      	movs	r1, #31
 8001c52:	4798      	blx	r3
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	da02      	bge.n	8001c60 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001c5a:	f06f 0304 	mvn.w	r3, #4
 8001c5e:	e01c      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e015      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 031c 	and.w	r3, r3, #28
 8001c74:	2b18      	cmp	r3, #24
 8001c76:	d101      	bne.n	8001c7c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00e      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 031c 	and.w	r3, r3, #28
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d101      	bne.n	8001c8a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e007      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 031c 	and.w	r3, r3, #28
 8001c90:	2b14      	cmp	r3, #20
 8001c92:	d101      	bne.n	8001c98 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001c94:	2304      	movs	r3, #4
 8001c96:	e000      	b.n	8001c9a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001c98:	2305      	movs	r3, #5
    }
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 fa48 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cac:	200f      	movs	r0, #15
 8001cae:	f000 f805 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb2:	f7ff fb43 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fa63 	bl	80021a6 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 fa2b 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000010 	.word	0x20000010
 8001d14:	20000018 	.word	0x20000018
 8001d18:	20000014 	.word	0x20000014

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	200005d8 	.word	0x200005d8

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	200005d8 	.word	0x200005d8

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000018 	.word	0x20000018

08001da4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0ed      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fe54 	bl	8000a70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd8:	f7ff ffb4 	bl	8001d44 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dde:	e012      	b.n	8001e06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001de0:	f7ff ffb0 	bl	8001d44 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d90b      	bls.n	8001e06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2205      	movs	r2, #5
 8001dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0c5      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0e5      	beq.n	8001de0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0202 	bic.w	r2, r2, #2
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e24:	f7ff ff8e 	bl	8001d44 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e2a:	e012      	b.n	8001e52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e2c:	f7ff ff8a 	bl	8001d44 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d90b      	bls.n	8001e52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2205      	movs	r2, #5
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e09f      	b.n	8001f92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e5      	bne.n	8001e2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d108      	bne.n	8001e7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e007      	b.n	8001e8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7e5b      	ldrb	r3, [r3, #25]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e007      	b.n	8001eb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7e9b      	ldrb	r3, [r3, #26]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e007      	b.n	8001ede <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0220 	bic.w	r2, r2, #32
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7edb      	ldrb	r3, [r3, #27]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0210 	bic.w	r2, r2, #16
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e007      	b.n	8001f08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0210 	orr.w	r2, r2, #16
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7f1b      	ldrb	r3, [r3, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0208 	bic.w	r2, r2, #8
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7f5b      	ldrb	r3, [r3, #29]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0204 	orr.w	r2, r2, #4
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	ea42 0103 	orr.w	r1, r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	@ (8001fdc <__NVIC_SetPriorityGrouping+0x40>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00
 8001fe0:	05fa0000 	.word	0x05fa0000

08001fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	@ (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	@ (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021c4:	f3bf 8f5f 	dmb	sy
}
 80021c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021ca:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <HAL_MPU_Disable+0x28>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	4a06      	ldr	r2, [pc, #24]	@ (80021e8 <HAL_MPU_Disable+0x28>)
 80021d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_MPU_Disable+0x2c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00
 80021ec:	e000ed90 	.word	0xe000ed90

080021f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_MPU_Enable+0x38>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <HAL_MPU_Enable+0x3c>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <HAL_MPU_Enable+0x3c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800220e:	f3bf 8f4f 	dsb	sy
}
 8002212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002214:	f3bf 8f6f 	isb	sy
}
 8002218:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed90 	.word	0xe000ed90
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	785a      	ldrb	r2, [r3, #1]
 800223c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_MPU_ConfigRegion+0x7c>)
 800223e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_MPU_ConfigRegion+0x7c>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <HAL_MPU_ConfigRegion+0x7c>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800224c:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_MPU_ConfigRegion+0x7c>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7b1b      	ldrb	r3, [r3, #12]
 8002258:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7adb      	ldrb	r3, [r3, #11]
 800225e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7a9b      	ldrb	r3, [r3, #10]
 8002266:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b5b      	ldrb	r3, [r3, #13]
 800226e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7b9b      	ldrb	r3, [r3, #14]
 8002276:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7bdb      	ldrb	r3, [r3, #15]
 800227e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a5b      	ldrb	r3, [r3, #9]
 8002286:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7a1b      	ldrb	r3, [r3, #8]
 800228e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002290:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002298:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800229a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800229c:	6113      	str	r3, [r2, #16]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed90 	.word	0xe000ed90

080022b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022be:	f7ff fd41 	bl	8001d44 <HAL_GetTick>
 80022c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d008      	beq.n	80022e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e052      	b.n	8002388 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0216 	bic.w	r2, r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002300:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_DMA_Abort+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0208 	bic.w	r2, r2, #8
 8002320:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	e013      	b.n	800235c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002334:	f7ff fd06 	bl	8001d44 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b05      	cmp	r3, #5
 8002340:	d90c      	bls.n	800235c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e015      	b.n	8002388 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e4      	bne.n	8002334 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	223f      	movs	r2, #63	@ 0x3f
 8002370:	409a      	lsls	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d004      	beq.n	80023ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00c      	b.n	80023c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e086      	b.n	80024f4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f004 fc31 	bl	8006c60 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <HAL_ETH_Init+0x128>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a3e      	ldr	r2, [pc, #248]	@ (80024fc <HAL_ETH_Init+0x128>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b3c      	ldr	r3, [pc, #240]	@ (80024fc <HAL_ETH_Init+0x128>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_ETH_Init+0x12c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a39      	ldr	r2, [pc, #228]	@ (8002500 <HAL_ETH_Init+0x12c>)
 800241c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002420:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_ETH_Init+0x12c>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4935      	ldr	r1, [pc, #212]	@ (8002500 <HAL_ETH_Init+0x12c>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002430:	4b33      	ldr	r3, [pc, #204]	@ (8002500 <HAL_ETH_Init+0x12c>)
 8002432:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800244a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800244c:	f7ff fc7a 	bl	8001d44 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002452:	e011      	b.n	8002478 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002454:	f7ff fc76 	bl	8001d44 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002462:	d909      	bls.n	8002478 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	22e0      	movs	r2, #224	@ 0xe0
 8002470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e03d      	b.n	80024f4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e4      	bne.n	8002454 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fe18 	bl	80030c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fec3 	bl	800321c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 ff19 	bl	80032ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fe81 	bl	80031ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80024b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_ETH_Init+0x130>)
 80024c8:	430b      	orrs	r3, r1
 80024ca:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80024de:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2210      	movs	r2, #16
 80024ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	40013800 	.word	0x40013800
 8002504:	00020060 	.word	0x00020060

08002508 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002516:	2b10      	cmp	r3, #16
 8002518:	d150      	bne.n	80025bc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2204      	movs	r2, #4
 8002526:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9f9 	bl	8002920 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002546:	2001      	movs	r0, #1
 8002548:	f7ff fc08 	bl	8001d5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0204 	orr.w	r2, r2, #4
 8002562:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff fbf5 	bl	8001d5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fc3c 	bl	8002df8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002592:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002596:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ae:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e000      	b.n	80025be <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025d4:	2b40      	cmp	r3, #64	@ 0x40
 80025d6:	d14a      	bne.n	800266e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	f023 0302 	bic.w	r3, r3, #2
 800260a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800260e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fb97 	bl	8001d5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fbde 	bl	8002df8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0208 	bic.w	r2, r2, #8
 800264a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff fb81 	bl	8001d5c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2210      	movs	r2, #16
 8002666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
  }
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07c      	b.n	8002798 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d176      	bne.n	8002796 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80026a8:	2200      	movs	r2, #0
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fe7d 	bl	80033ac <ETH_Prepare_Tx_Descriptors>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e065      	b.n	8002798 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80026cc:	f3bf 8f4f 	dsb	sy
}
 80026d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3206      	adds	r2, #6
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d904      	bls.n	80026fc <HAL_ETH_Transmit+0x84>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	1f1a      	subs	r2, r3, #4
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3106      	adds	r1, #6
 8002708:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800270c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002710:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002712:	f7ff fb17 	bl	8001d44 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002718:	e037      	b.n	800278a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d011      	beq.n	8002750 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f043 0208 	orr.w	r2, r3, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e023      	b.n	8002798 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d018      	beq.n	800278a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002758:	f7ff faf4 	bl	8001d44 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d302      	bcc.n	800276e <HAL_ETH_Transmit+0xf6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f043 0204 	orr.w	r2, r3, #4
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002784:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e006      	b.n	8002798 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	dbc3      	blt.n	800271a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0a4      	b.n	8002916 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d001      	beq.n	80027da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e09d      	b.n	8002916 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	3212      	adds	r2, #18
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f0:	f1c3 0304 	rsb	r3, r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027f6:	e066      	b.n	80028c6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_ETH_ReadData+0x88>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03c      	beq.n	80028a2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0c1b      	lsrs	r3, r3, #16
 8002846:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800284a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002860:	2301      	movs	r3, #1
 8002862:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f004 fb8f 	bl	8006fa4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d902      	bls.n	80028b4 <HAL_ETH_ReadData+0x114>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b04      	subs	r3, #4
 80028b2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	3212      	adds	r2, #18
 80028ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3301      	adds	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db06      	blt.n	80028dc <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d202      	bcs.n	80028dc <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d08d      	beq.n	80027f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	441a      	add	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f815 	bl	8002920 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800292c:	2301      	movs	r3, #1
 800292e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002934:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	3212      	adds	r2, #18
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002946:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002948:	e042      	b.n	80029d0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d112      	bne.n	8002978 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	4618      	mov	r0, r3
 8002958:	f004 faf4 	bl	8006f44 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	74fb      	strb	r3, [r7, #19]
 8002966:	e007      	b.n	8002978 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	461a      	mov	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461a      	mov	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <ETH_UpdateDescriptor+0x104>)
 800298c:	4313      	orrs	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	6053      	str	r3, [r2, #4]
 8002992:	e005      	b.n	80029a0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d902      	bls.n	80029be <ETH_UpdateDescriptor+0x9e>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3b04      	subs	r3, #4
 80029bc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	3212      	adds	r2, #18
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	617b      	str	r3, [r7, #20]
      desccount--;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <ETH_UpdateDescriptor+0xbc>
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1b6      	bne.n	800294a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d01a      	beq.n	8002a1c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3303      	adds	r3, #3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029f0:	f3bf 8f5f 	dmb	sy
}
 80029f4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	18ca      	adds	r2, r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a0e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	80004000 	.word	0x80004000

08002a28 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f003 031c 	and.w	r3, r3, #28
 8002a44:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	02db      	lsls	r3, r3, #11
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0302 	bic.w	r3, r3, #2
 8002a66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a78:	f7ff f964 	bl	8001d44 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a7e:	e00d      	b.n	8002a9c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a80:	f7ff f960 	bl	8001d44 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8e:	d301      	bcc.n	8002a94 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e010      	b.n	8002ab6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ec      	bne.n	8002a80 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 031c 	and.w	r3, r3, #28
 8002ada:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	02db      	lsls	r3, r3, #11
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b18:	f7ff f914 	bl	8001d44 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b1e:	e00d      	b.n	8002b3c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b20:	f7ff f910 	bl	8001d44 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2e:	d301      	bcc.n	8002b34 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e009      	b.n	8002b48 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ec      	bne.n	8002b20 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0e6      	b.n	8002d32 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00b      	b.n	8002d6a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d105      	bne.n	8002d68 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f870 	bl	8002e44 <ETH_SetMACConfig>

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 031c 	bic.w	r3, r3, #28
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d8c:	f001 fae4 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8002d90:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a14      	ldr	r2, [pc, #80]	@ (8002de8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d804      	bhi.n	8002da4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f043 0308 	orr.w	r3, r3, #8
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e019      	b.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a11      	ldr	r2, [pc, #68]	@ (8002dec <HAL_ETH_SetMDIOClockRange+0x78>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d204      	bcs.n	8002db6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f043 030c 	orr.w	r3, r3, #12
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e010      	b.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d90c      	bls.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002df4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d804      	bhi.n	8002dd0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	e003      	b.n	8002dd8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	611a      	str	r2, [r3, #16]
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	02160ebf 	.word	0x02160ebf
 8002dec:	03938700 	.word	0x03938700
 8002df0:	05f5e0ff 	.word	0x05f5e0ff
 8002df4:	08f0d17f 	.word	0x08f0d17f

08002df8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e1a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7fe ff97 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e38:	6193      	str	r3, [r2, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4b53      	ldr	r3, [pc, #332]	@ (8002fa8 <ETH_SetMACConfig+0x164>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7b9b      	ldrb	r3, [r3, #14]
 8002e62:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	7c12      	ldrb	r2, [r2, #16]
 8002e68:	2a00      	cmp	r2, #0
 8002e6a:	d102      	bne.n	8002e72 <ETH_SetMACConfig+0x2e>
 8002e6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e70:	e000      	b.n	8002e74 <ETH_SetMACConfig+0x30>
 8002e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	7c52      	ldrb	r2, [r2, #17]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d102      	bne.n	8002e84 <ETH_SetMACConfig+0x40>
 8002e7e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e82:	e000      	b.n	8002e86 <ETH_SetMACConfig+0x42>
 8002e84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7fdb      	ldrb	r3, [r3, #31]
 8002e92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	7f92      	ldrb	r2, [r2, #30]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d102      	bne.n	8002eaa <ETH_SetMACConfig+0x66>
 8002ea4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ea8:	e000      	b.n	8002eac <ETH_SetMACConfig+0x68>
 8002eaa:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7f1b      	ldrb	r3, [r3, #28]
 8002eb2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002eb4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	791b      	ldrb	r3, [r3, #4]
 8002ec0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ec2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002eca:	2a00      	cmp	r2, #0
 8002ecc:	d102      	bne.n	8002ed4 <ETH_SetMACConfig+0x90>
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	e000      	b.n	8002ed6 <ETH_SetMACConfig+0x92>
 8002ed4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ed6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	7bdb      	ldrb	r3, [r3, #15]
 8002edc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ede:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ee4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002eec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7fe ff28 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f22:	4013      	ands	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d101      	bne.n	8002f3a <ETH_SetMACConfig+0xf6>
 8002f36:	2280      	movs	r2, #128	@ 0x80
 8002f38:	e000      	b.n	8002f3c <ETH_SetMACConfig+0xf8>
 8002f3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f4a:	2a01      	cmp	r2, #1
 8002f4c:	d101      	bne.n	8002f52 <ETH_SetMACConfig+0x10e>
 8002f4e:	2208      	movs	r2, #8
 8002f50:	e000      	b.n	8002f54 <ETH_SetMACConfig+0x110>
 8002f52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f5c:	2a01      	cmp	r2, #1
 8002f5e:	d101      	bne.n	8002f64 <ETH_SetMACConfig+0x120>
 8002f60:	2204      	movs	r2, #4
 8002f62:	e000      	b.n	8002f66 <ETH_SetMACConfig+0x122>
 8002f64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f6e:	2a01      	cmp	r2, #1
 8002f70:	d101      	bne.n	8002f76 <ETH_SetMACConfig+0x132>
 8002f72:	2202      	movs	r2, #2
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x134>
 8002f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7fe fee3 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	fd20810f 	.word	0xfd20810f

08002fac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <ETH_SetDMAConfig+0x110>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	7b1b      	ldrb	r3, [r3, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <ETH_SetDMAConfig+0x2c>
 8002fd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fd6:	e000      	b.n	8002fda <ETH_SetDMAConfig+0x2e>
 8002fd8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7b5b      	ldrb	r3, [r3, #13]
 8002fde:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	7f52      	ldrb	r2, [r2, #29]
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d102      	bne.n	8002ff0 <ETH_SetDMAConfig+0x44>
 8002fea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fee:	e000      	b.n	8002ff2 <ETH_SetDMAConfig+0x46>
 8002ff0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ff2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	7b9b      	ldrb	r3, [r3, #14]
 8002ff8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ffa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003000:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	7f1b      	ldrb	r3, [r3, #28]
 8003006:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f9b      	ldrb	r3, [r3, #30]
 800300e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003010:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003016:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800301e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003020:	4313      	orrs	r3, r2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003030:	461a      	mov	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003042:	2001      	movs	r0, #1
 8003044:	f7fe fe8a 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003050:	461a      	mov	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	791b      	ldrb	r3, [r3, #4]
 800305a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003060:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003066:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800306c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003074:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003076:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800307e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003084:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800308e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003092:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7fe fe5b 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f8de3f23 	.word	0xf8de3f23

080030c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0a6      	sub	sp, #152	@ 0x98
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003102:	2300      	movs	r3, #0
 8003104:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800310c:	2300      	movs	r3, #0
 800310e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003128:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800312e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800313a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fe7f 	bl	8002e44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003146:	2301      	movs	r3, #1
 8003148:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800314a:	2301      	movs	r3, #1
 800314c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003154:	2301      	movs	r3, #1
 8003156:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800317a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800317c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003180:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003182:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003186:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff05 	bl	8002fac <ETH_SetDMAConfig>
}
 80031a2:	bf00      	nop
 80031a4:	3798      	adds	r7, #152	@ 0x98
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3305      	adds	r3, #5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	3204      	adds	r2, #4
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <ETH_MACAddressConfig+0x68>)
 80031ce:	4413      	add	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3303      	adds	r3, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	061a      	lsls	r2, r3, #24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3302      	adds	r3, #2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <ETH_MACAddressConfig+0x6c>)
 80031fe:	4413      	add	r3, r2
 8003200:	461a      	mov	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40028040 	.word	0x40028040
 8003218:	40028044 	.word	0x40028044

0800321c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e03e      	b.n	80032a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	3206      	adds	r2, #6
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d80c      	bhi.n	800328c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68d9      	ldr	r1, [r3, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e004      	b.n	8003296 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d9bd      	bls.n	800322a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c0:	611a      	str	r2, [r3, #16]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e048      	b.n	800336e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003318:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	3212      	adds	r2, #18
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d80c      	bhi.n	800335e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6919      	ldr	r1, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e004      	b.n	8003368 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d9b3      	bls.n	80032dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b091      	sub	sp, #68	@ 0x44
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3318      	adds	r3, #24
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033ee:	d007      	beq.n	8003400 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	3304      	adds	r3, #4
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003400:	2302      	movs	r3, #2
 8003402:	e111      	b.n	8003628 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003406:	3301      	adds	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b86      	ldr	r3, [pc, #536]	@ (8003634 <ETH_Prepare_Tx_Descriptors+0x288>)
 800341a:	4013      	ands	r3, r2
 800341c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341e:	6852      	ldr	r2, [r2, #4]
 8003420:	431a      	orrs	r2, r3
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800346e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003486:	e082      	b.n	800358e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e005      	b.n	80034b4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034b6:	3301      	adds	r3, #1
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d902      	bls.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80034c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034c2:	3b04      	subs	r3, #4
 80034c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034dc:	d007      	beq.n	80034ee <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034e2:	3304      	adds	r3, #4
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d029      	beq.n	8003542 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003500:	e019      	b.n	8003536 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003502:	f3bf 8f5f 	dmb	sy
}
 8003506:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003516:	3301      	adds	r3, #1
 8003518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800351a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800351c:	2b03      	cmp	r3, #3
 800351e:	d902      	bls.n	8003526 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003522:	3b04      	subs	r3, #4
 8003524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800352a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003532:	3301      	adds	r3, #1
 8003534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	429a      	cmp	r2, r3
 800353c:	d3e1      	bcc.n	8003502 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	e072      	b.n	8003628 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	3301      	adds	r3, #1
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	4b32      	ldr	r3, [pc, #200]	@ (8003634 <ETH_Prepare_Tx_Descriptors+0x288>)
 800356a:	4013      	ands	r3, r2
 800356c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	3301      	adds	r3, #1
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800357c:	f3bf 8f5f 	dmb	sy
}
 8003580:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f47f af78 	bne.w	8003488 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e005      	b.n	80035b8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035cc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80035ce:	f3bf 8f5f 	dmb	sy
}
 80035d2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	3304      	adds	r3, #4
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035f4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f6:	f3ef 8310 	mrs	r3, PRIMASK
 80035fa:	613b      	str	r3, [r7, #16]
  return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	4413      	add	r3, r2
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3744      	adds	r7, #68	@ 0x44
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	ffffe000 	.word	0xffffe000

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	@ 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e175      	b.n	8003944 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003658:	2201      	movs	r2, #1
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	429a      	cmp	r2, r3
 8003672:	f040 8164 	bne.w	800393e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d005      	beq.n	800368e <HAL_GPIO_Init+0x56>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d130      	bne.n	80036f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036c4:	2201      	movs	r2, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 0201 	and.w	r2, r3, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d017      	beq.n	800372c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d123      	bne.n	8003780 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	08da      	lsrs	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3208      	adds	r2, #8
 8003740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	220f      	movs	r2, #15
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	08da      	lsrs	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3208      	adds	r2, #8
 800377a:	69b9      	ldr	r1, [r7, #24]
 800377c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0203 	and.w	r2, r3, #3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80be 	beq.w	800393e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	4b66      	ldr	r3, [pc, #408]	@ (800395c <HAL_GPIO_Init+0x324>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	4a65      	ldr	r2, [pc, #404]	@ (800395c <HAL_GPIO_Init+0x324>)
 80037c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ce:	4b63      	ldr	r3, [pc, #396]	@ (800395c <HAL_GPIO_Init+0x324>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037da:	4a61      	ldr	r2, [pc, #388]	@ (8003960 <HAL_GPIO_Init+0x328>)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	089b      	lsrs	r3, r3, #2
 80037e0:	3302      	adds	r3, #2
 80037e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	220f      	movs	r2, #15
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <HAL_GPIO_Init+0x32c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d037      	beq.n	8003876 <HAL_GPIO_Init+0x23e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_GPIO_Init+0x330>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_GPIO_Init+0x23a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a56      	ldr	r2, [pc, #344]	@ (800396c <HAL_GPIO_Init+0x334>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d02b      	beq.n	800386e <HAL_GPIO_Init+0x236>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a55      	ldr	r2, [pc, #340]	@ (8003970 <HAL_GPIO_Init+0x338>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d025      	beq.n	800386a <HAL_GPIO_Init+0x232>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a54      	ldr	r2, [pc, #336]	@ (8003974 <HAL_GPIO_Init+0x33c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <HAL_GPIO_Init+0x22e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a53      	ldr	r2, [pc, #332]	@ (8003978 <HAL_GPIO_Init+0x340>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x22a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a52      	ldr	r2, [pc, #328]	@ (800397c <HAL_GPIO_Init+0x344>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x226>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a51      	ldr	r2, [pc, #324]	@ (8003980 <HAL_GPIO_Init+0x348>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x222>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a50      	ldr	r2, [pc, #320]	@ (8003984 <HAL_GPIO_Init+0x34c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x21e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a4f      	ldr	r2, [pc, #316]	@ (8003988 <HAL_GPIO_Init+0x350>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x21a>
 800384e:	2309      	movs	r3, #9
 8003850:	e012      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003852:	230a      	movs	r3, #10
 8003854:	e010      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003856:	2308      	movs	r3, #8
 8003858:	e00e      	b.n	8003878 <HAL_GPIO_Init+0x240>
 800385a:	2307      	movs	r3, #7
 800385c:	e00c      	b.n	8003878 <HAL_GPIO_Init+0x240>
 800385e:	2306      	movs	r3, #6
 8003860:	e00a      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003862:	2305      	movs	r3, #5
 8003864:	e008      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003866:	2304      	movs	r3, #4
 8003868:	e006      	b.n	8003878 <HAL_GPIO_Init+0x240>
 800386a:	2303      	movs	r3, #3
 800386c:	e004      	b.n	8003878 <HAL_GPIO_Init+0x240>
 800386e:	2302      	movs	r3, #2
 8003870:	e002      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_GPIO_Init+0x240>
 8003876:	2300      	movs	r3, #0
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f002 0203 	and.w	r2, r2, #3
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	4093      	lsls	r3, r2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003888:	4935      	ldr	r1, [pc, #212]	@ (8003960 <HAL_GPIO_Init+0x328>)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003896:	4b3d      	ldr	r3, [pc, #244]	@ (800398c <HAL_GPIO_Init+0x354>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ba:	4a34      	ldr	r2, [pc, #208]	@ (800398c <HAL_GPIO_Init+0x354>)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c0:	4b32      	ldr	r3, [pc, #200]	@ (800398c <HAL_GPIO_Init+0x354>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038e4:	4a29      	ldr	r2, [pc, #164]	@ (800398c <HAL_GPIO_Init+0x354>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ea:	4b28      	ldr	r3, [pc, #160]	@ (800398c <HAL_GPIO_Init+0x354>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800390e:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <HAL_GPIO_Init+0x354>)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003914:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_GPIO_Init+0x354>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <HAL_GPIO_Init+0x354>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	f67f ae86 	bls.w	8003658 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3724      	adds	r7, #36	@ 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40013800 	.word	0x40013800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40020800 	.word	0x40020800
 8003970:	40020c00 	.word	0x40020c00
 8003974:	40021000 	.word	0x40021000
 8003978:	40021400 	.word	0x40021400
 800397c:	40021800 	.word	0x40021800
 8003980:	40021c00 	.word	0x40021c00
 8003984:	40022000 	.word	0x40022000
 8003988:	40022400 	.word	0x40022400
 800398c:	40013c00 	.word	0x40013c00

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	041a      	lsls	r2, r3, #16
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43d9      	mvns	r1, r3
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	400b      	ands	r3, r1
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a26:	f7fe f98d 	bl	8001d44 <HAL_GetTick>
 8003a2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a2c:	e009      	b.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a2e:	f7fe f989 	bl	8001d44 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a3c:	d901      	bls.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e022      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a42:	4b14      	ldr	r3, [pc, #80]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a50:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5c:	f7fe f972 	bl	8001d44 <HAL_GetTick>
 8003a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a62:	e009      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a64:	f7fe f96e 	bl	8001d44 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a72:	d901      	bls.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a84:	d1ee      	bne.n	8003a64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e29b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003abc:	4b96      	ldr	r3, [pc, #600]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac8:	4b93      	ldr	r3, [pc, #588]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d112      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
 8003ad4:	4b90      	ldr	r3, [pc, #576]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ae0:	d10b      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x130>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d168      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e275      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x7a>
 8003b04:	4b84      	ldr	r3, [pc, #528]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a83      	ldr	r2, [pc, #524]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e02e      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x9c>
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b7c      	ldr	r3, [pc, #496]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e01d      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b3e:	4b76      	ldr	r3, [pc, #472]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a75      	ldr	r2, [pc, #468]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b73      	ldr	r3, [pc, #460]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a72      	ldr	r2, [pc, #456]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b6c      	ldr	r3, [pc, #432]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6b      	ldr	r2, [pc, #428]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe f8e4 	bl	8001d44 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe f8e0 	bl	8001d44 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e229      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe f8d0 	bl	8001d44 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe f8cc 	bl	8001d44 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e215      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	4b57      	ldr	r3, [pc, #348]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x110>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d069      	beq.n	8003caa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd6:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
 8003bee:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	4b47      	ldr	r3, [pc, #284]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1e9      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	493d      	ldr	r1, [pc, #244]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	e040      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c30:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe f882 	bl	8001d44 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fe f87e 	bl	8001d44 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1c7      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4929      	ldr	r1, [pc, #164]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
 8003c76:	e018      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe f85e 	bl	8001d44 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fe f85a 	bl	8001d44 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1a3      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d038      	beq.n	8003d28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b16      	ldr	r3, [pc, #88]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc2:	4a15      	ldr	r2, [pc, #84]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe f83b 	bl	8001d44 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f837 	bl	8001d44 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e180      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x23a>
 8003cf0:	e01a      	b.n	8003d28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf6:	4a08      	ldr	r2, [pc, #32]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe f821 	bl	8001d44 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe f81d 	bl	8001d44 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d903      	bls.n	8003d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e166      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
 8003d18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b92      	ldr	r3, [pc, #584]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a4 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b8c      	ldr	r3, [pc, #560]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b89      	ldr	r3, [pc, #548]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	4a88      	ldr	r2, [pc, #544]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d4e:	4b86      	ldr	r3, [pc, #536]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b83      	ldr	r3, [pc, #524]	@ (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d6a:	4b80      	ldr	r3, [pc, #512]	@ (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7f      	ldr	r2, [pc, #508]	@ (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fd ffe5 	bl	8001d44 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fd ffe1 	bl	8001d44 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	@ 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e12a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b76      	ldr	r3, [pc, #472]	@ (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x31a>
 8003da4:	4b70      	ldr	r3, [pc, #448]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a6f      	ldr	r2, [pc, #444]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	e02d      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x33c>
 8003dba:	4b6b      	ldr	r3, [pc, #428]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	4a6a      	ldr	r2, [pc, #424]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc6:	4b68      	ldr	r3, [pc, #416]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	4a67      	ldr	r2, [pc, #412]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x35e>
 8003ddc:	4b62      	ldr	r3, [pc, #392]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a61      	ldr	r2, [pc, #388]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a5e      	ldr	r2, [pc, #376]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003df6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e02:	4b59      	ldr	r3, [pc, #356]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a58      	ldr	r2, [pc, #352]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fd ff95 	bl	8001d44 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd ff91 	bl	8001d44 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0d8      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b4c      	ldr	r3, [pc, #304]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCC_OscConfig+0x386>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd ff7f 	bl	8001d44 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fd ff7b 	bl	8001d44 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0c2      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	4b41      	ldr	r3, [pc, #260]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	4a3c      	ldr	r2, [pc, #240]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80ae 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e88:	4b37      	ldr	r3, [pc, #220]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d06d      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d14b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b32      	ldr	r3, [pc, #200]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd ff4c 	bl	8001d44 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd ff48 	bl	8001d44 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e091      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491b      	ldr	r1, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd ff1a 	bl	8001d44 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd ff16 	bl	8001d44 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e05f      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x47c>
 8003f32:	e057      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fd ff00 	bl	8001d44 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fd fefc 	bl	8001d44 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e045      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4b0>
 8003f66:	e03d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <HAL_RCC_OscConfig+0x558>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d030      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d129      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d122      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d119      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d0      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d910      	bls.n	800403c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	4965      	ldr	r1, [pc, #404]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e073      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b39      	ldr	r3, [pc, #228]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4936      	ldr	r1, [pc, #216]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd fe2c 	bl	8001d44 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fd fe28 	bl	8001d44 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e053      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2d      	ldr	r3, [pc, #180]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b27      	ldr	r3, [pc, #156]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d210      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	4922      	ldr	r1, [pc, #136]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004172:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	@ (80041c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <HAL_RCC_ClockConfig+0x1d0>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <HAL_RCC_ClockConfig+0x1d4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd fd88 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	0801be30 	.word	0x0801be30
 80041c4:	20000010 	.word	0x20000010
 80041c8:	20000014 	.word	0x20000014

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b090      	sub	sp, #64	@ 0x40
 80041d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d8:	2300      	movs	r3, #0
 80041da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041dc:	2300      	movs	r3, #0
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e4:	4b59      	ldr	r3, [pc, #356]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d00d      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x40>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	f200 80a1 	bhi.w	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x34>
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x3a>
 80041fe:	e09b      	b.n	8004338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 8004202:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004204:	e09b      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004206:	4b53      	ldr	r3, [pc, #332]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004208:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800420a:	e098      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420c:	4b4f      	ldr	r3, [pc, #316]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004216:	4b4d      	ldr	r3, [pc, #308]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b4a      	ldr	r3, [pc, #296]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	2200      	movs	r2, #0
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	627a      	str	r2, [r7, #36]	@ 0x24
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004234:	2100      	movs	r1, #0
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004238:	fb03 f201 	mul.w	r2, r3, r1
 800423c:	2300      	movs	r3, #0
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	4413      	add	r3, r2
 8004244:	4a43      	ldr	r2, [pc, #268]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x188>)
 8004246:	fba0 1202 	umull	r1, r2, r0, r2
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800424c:	460a      	mov	r2, r1
 800424e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	4413      	add	r3, r2
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	2200      	movs	r2, #0
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	61fa      	str	r2, [r7, #28]
 800425e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004266:	f7fc f9ff 	bl	8000668 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4613      	mov	r3, r2
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004272:	e053      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004274:	4b35      	ldr	r3, [pc, #212]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	2200      	movs	r2, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	617a      	str	r2, [r7, #20]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004286:	f04f 0b00 	mov.w	fp, #0
 800428a:	4652      	mov	r2, sl
 800428c:	465b      	mov	r3, fp
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429c:	0150      	lsls	r0, r2, #5
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	ebb2 080a 	subs.w	r8, r2, sl
 80042a6:	eb63 090b 	sbc.w	r9, r3, fp
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042be:	ebb2 0408 	subs.w	r4, r2, r8
 80042c2:	eb63 0509 	sbc.w	r5, r3, r9
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	00eb      	lsls	r3, r5, #3
 80042d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042d4:	00e2      	lsls	r2, r4, #3
 80042d6:	4614      	mov	r4, r2
 80042d8:	461d      	mov	r5, r3
 80042da:	eb14 030a 	adds.w	r3, r4, sl
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	eb45 030b 	adc.w	r3, r5, fp
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042f2:	4629      	mov	r1, r5
 80042f4:	028b      	lsls	r3, r1, #10
 80042f6:	4621      	mov	r1, r4
 80042f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042fc:	4621      	mov	r1, r4
 80042fe:	028a      	lsls	r2, r1, #10
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	2200      	movs	r2, #0
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	60fa      	str	r2, [r7, #12]
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	f7fc f9aa 	bl	8000668 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4613      	mov	r3, r2
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <HAL_RCC_GetSysClockFreq+0x180>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800432c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004336:	e002      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_GetSysClockFreq+0x184>)
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800433c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004340:	4618      	mov	r0, r3
 8004342:	3740      	adds	r7, #64	@ 0x40
 8004344:	46bd      	mov	sp, r7
 8004346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	00f42400 	.word	0x00f42400
 8004354:	017d7840 	.word	0x017d7840

08004358 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	@ (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000010 	.word	0x20000010

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a9b      	lsrs	r3, r3, #10
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	@ (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	0801be40 	.word	0x0801be40

08004398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800439c:	f7ff ffdc 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	0b5b      	lsrs	r3, r3, #13
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40023800 	.word	0x40023800
 80043bc:	0801be40 	.word	0x0801be40

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043e8:	4b69      	ldr	r3, [pc, #420]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a68      	ldr	r2, [pc, #416]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80043f2:	6093      	str	r3, [r2, #8]
 80043f4:	4b66      	ldr	r3, [pc, #408]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	4964      	ldr	r1, [pc, #400]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d017      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800441a:	4b5d      	ldr	r3, [pc, #372]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004420:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	4959      	ldr	r1, [pc, #356]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004438:	d101      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004446:	2301      	movs	r3, #1
 8004448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004456:	4b4e      	ldr	r3, [pc, #312]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800445c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	494a      	ldr	r1, [pc, #296]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004492:	2301      	movs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 808b 	beq.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	4a39      	ldr	r2, [pc, #228]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80044b0:	4b37      	ldr	r3, [pc, #220]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044bc:	4b35      	ldr	r3, [pc, #212]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a34      	ldr	r2, [pc, #208]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fd fc3c 	bl	8001d44 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fd fc38 	bl	8001d44 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e38f      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ee:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d035      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d02e      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800450c:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004514:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004516:	4b1e      	ldr	r3, [pc, #120]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800452e:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004534:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d114      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fc00 	bl	8001d44 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004546:	e00a      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd fbfc 	bl	8001d44 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e351      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455e:	4b0c      	ldr	r3, [pc, #48]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0ee      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004576:	d111      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004586:	400b      	ands	r3, r1
 8004588:	4901      	ldr	r1, [pc, #4]	@ (8004590 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
 800458e:	e00b      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004590:	40023800 	.word	0x40023800
 8004594:	40007000 	.word	0x40007000
 8004598:	0ffffcff 	.word	0x0ffffcff
 800459c:	4bac      	ldr	r3, [pc, #688]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	4aab      	ldr	r2, [pc, #684]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045a6:	6093      	str	r3, [r2, #8]
 80045a8:	4ba9      	ldr	r3, [pc, #676]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b4:	49a6      	ldr	r1, [pc, #664]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c6:	4ba2      	ldr	r3, [pc, #648]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	499b      	ldr	r1, [pc, #620]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f4:	4b96      	ldr	r3, [pc, #600]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004602:	4993      	ldr	r1, [pc, #588]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004616:	4b8e      	ldr	r3, [pc, #568]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004624:	498a      	ldr	r1, [pc, #552]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004638:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004646:	4982      	ldr	r1, [pc, #520]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800465a:	4b7d      	ldr	r3, [pc, #500]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004668:	4979      	ldr	r1, [pc, #484]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800467c:	4b74      	ldr	r3, [pc, #464]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	4971      	ldr	r1, [pc, #452]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800469e:	4b6c      	ldr	r3, [pc, #432]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a4:	f023 020c 	bic.w	r2, r3, #12
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	4968      	ldr	r1, [pc, #416]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046c0:	4b63      	ldr	r3, [pc, #396]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ce:	4960      	ldr	r1, [pc, #384]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f0:	4957      	ldr	r1, [pc, #348]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004704:	4b52      	ldr	r3, [pc, #328]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004712:	494f      	ldr	r1, [pc, #316]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	4946      	ldr	r1, [pc, #280]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004748:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004756:	493e      	ldr	r1, [pc, #248]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800476a:	4b39      	ldr	r3, [pc, #228]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004770:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004778:	4935      	ldr	r1, [pc, #212]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800478c:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004792:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800479a:	492d      	ldr	r1, [pc, #180]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047ae:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047bc:	4924      	ldr	r1, [pc, #144]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047cc:	d101      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fc:	4914      	ldr	r1, [pc, #80]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004810:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004820:	490b      	ldr	r1, [pc, #44]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004834:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004844:	4902      	ldr	r1, [pc, #8]	@ (8004850 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004860:	4b8a      	ldr	r3, [pc, #552]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004866:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	4986      	ldr	r1, [pc, #536]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004884:	4b81      	ldr	r3, [pc, #516]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800488a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004894:	497d      	ldr	r1, [pc, #500]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d006      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80d6 	beq.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048b0:	4b76      	ldr	r3, [pc, #472]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a75      	ldr	r2, [pc, #468]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fa42 	bl	8001d44 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c4:	f7fd fa3e 	bl	8001d44 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	@ 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e195      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048d6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d021      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048f6:	4b65      	ldr	r3, [pc, #404]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004904:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490a:	0e1b      	lsrs	r3, r3, #24
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	019a      	lsls	r2, r3, #6
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	061b      	lsls	r3, r3, #24
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	071b      	lsls	r3, r3, #28
 800492a:	4958      	ldr	r1, [pc, #352]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02e      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800495c:	d129      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800495e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800496c:	4b47      	ldr	r3, [pc, #284]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	493e      	ldr	r1, [pc, #248]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800499a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	f023 021f 	bic.w	r2, r3, #31
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	3b01      	subs	r3, #1
 80049aa:	4938      	ldr	r1, [pc, #224]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049be:	4b33      	ldr	r3, [pc, #204]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c4:	0e1b      	lsrs	r3, r3, #24
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049cc:	4b2f      	ldr	r3, [pc, #188]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d2:	0f1b      	lsrs	r3, r3, #28
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	019a      	lsls	r2, r3, #6
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	431a      	orrs	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	061b      	lsls	r3, r3, #24
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	4926      	ldr	r1, [pc, #152]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d011      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	019a      	lsls	r2, r3, #6
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	041b      	lsls	r3, r3, #16
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	491a      	ldr	r1, [pc, #104]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a2a:	4b18      	ldr	r3, [pc, #96]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a36:	f7fd f985 	bl	8001d44 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a3e:	f7fd f981 	bl	8001d44 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b64      	cmp	r3, #100	@ 0x64
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0d8      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a50:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 80ce 	bne.w	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a64:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a08      	ldr	r2, [pc, #32]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fd f968 	bl	8001d44 <HAL_GetTick>
 8004a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a76:	e00b      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a78:	f7fd f964 	bl	8001d44 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d904      	bls.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0bb      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a90:	4b5e      	ldr	r3, [pc, #376]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a9c:	d0ec      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d02e      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d12a      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ac6:	4b51      	ldr	r3, [pc, #324]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	0f1b      	lsrs	r3, r3, #28
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	019a      	lsls	r2, r3, #6
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	041b      	lsls	r3, r3, #16
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	061b      	lsls	r3, r3, #24
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	4944      	ldr	r1, [pc, #272]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b02:	4b42      	ldr	r3, [pc, #264]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	3b01      	subs	r3, #1
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	493d      	ldr	r1, [pc, #244]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d022      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b30:	d11d      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b32:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b40:	4b32      	ldr	r3, [pc, #200]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	019a      	lsls	r2, r3, #6
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	4929      	ldr	r1, [pc, #164]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d028      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b7a:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	0e1b      	lsrs	r3, r3, #24
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b88:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	019a      	lsls	r2, r3, #6
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	4917      	ldr	r1, [pc, #92]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bb6:	4b15      	ldr	r3, [pc, #84]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	4911      	ldr	r1, [pc, #68]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fd f8b4 	bl	8001d44 <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be0:	f7fd f8b0 	bl	8001d44 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	@ 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e007      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfe:	d1ef      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800

08004c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e049      	b.n	8004cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fdf2 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 fb18 	bl	8005284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04c      	b.n	8004d72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	@ (8004d80 <HAL_TIM_Base_Start+0xc0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d022      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf2:	d01d      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	@ (8004d84 <HAL_TIM_Base_Start+0xc4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a21      	ldr	r2, [pc, #132]	@ (8004d88 <HAL_TIM_Base_Start+0xc8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d8c <HAL_TIM_Base_Start+0xcc>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1e      	ldr	r2, [pc, #120]	@ (8004d90 <HAL_TIM_Base_Start+0xd0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1c      	ldr	r2, [pc, #112]	@ (8004d94 <HAL_TIM_Base_Start+0xd4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_TIM_Base_Start+0x70>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <HAL_TIM_Base_Start+0xd8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d115      	bne.n	8004d5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_TIM_Base_Start+0xdc>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b06      	cmp	r3, #6
 8004d40:	d015      	beq.n	8004d6e <HAL_TIM_Base_Start+0xae>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d011      	beq.n	8004d6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e000      	b.n	8004d70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40000400 	.word	0x40000400
 8004d88:	40000800 	.word	0x40000800
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	40010400 	.word	0x40010400
 8004d94:	40014000 	.word	0x40014000
 8004d98:	40001800 	.word	0x40001800
 8004d9c:	00010007 	.word	0x00010007

08004da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d001      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e054      	b.n	8004e62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a26      	ldr	r2, [pc, #152]	@ (8004e70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d022      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de2:	d01d      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a22      	ldr	r2, [pc, #136]	@ (8004e74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d018      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a21      	ldr	r2, [pc, #132]	@ (8004e78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00e      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1e      	ldr	r2, [pc, #120]	@ (8004e80 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d115      	bne.n	8004e4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b19      	ldr	r3, [pc, #100]	@ (8004e8c <HAL_TIM_Base_Start_IT+0xec>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d015      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0xbe>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e38:	d011      	beq.n	8004e5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	e008      	b.n	8004e5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e000      	b.n	8004e60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40000400 	.word	0x40000400
 8004e78:	40000800 	.word	0x40000800
 8004e7c:	40000c00 	.word	0x40000c00
 8004e80:	40010400 	.word	0x40010400
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40001800 	.word	0x40001800
 8004e8c:	00010007 	.word	0x00010007

08004e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d020      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0202 	mvn.w	r2, #2
 8004ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9b4 	bl	8005248 <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f9a6 	bl	8005234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f9b7 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d020      	beq.n	8004f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01b      	beq.n	8004f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0204 	mvn.w	r2, #4
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f98e 	bl	8005248 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f980 	bl	8005234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f991 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d020      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0208 	mvn.w	r2, #8
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2204      	movs	r2, #4
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f968 	bl	8005248 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f95a 	bl	8005234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f96b 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0210 	mvn.w	r2, #16
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2208      	movs	r2, #8
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f942 	bl	8005248 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f934 	bl	8005234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f945 	bl	800525c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0201 	mvn.w	r2, #1
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb ff1c 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb05 	bl	8005634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fafd 	bl	8005648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8ff 	bl	8005270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0220 	mvn.w	r2, #32
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fac5 	bl	8005620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIM_ConfigClockSource+0x1c>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0b4      	b.n	8005226 <HAL_TIM_ConfigClockSource+0x186>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	4b56      	ldr	r3, [pc, #344]	@ (8005230 <HAL_TIM_ConfigClockSource+0x190>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f4:	d03e      	beq.n	8005174 <HAL_TIM_ConfigClockSource+0xd4>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	f200 8087 	bhi.w	800520c <HAL_TIM_ConfigClockSource+0x16c>
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005102:	f000 8086 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x172>
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510a:	d87f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b70      	cmp	r3, #112	@ 0x70
 800510e:	d01a      	beq.n	8005146 <HAL_TIM_ConfigClockSource+0xa6>
 8005110:	2b70      	cmp	r3, #112	@ 0x70
 8005112:	d87b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b60      	cmp	r3, #96	@ 0x60
 8005116:	d050      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x11a>
 8005118:	2b60      	cmp	r3, #96	@ 0x60
 800511a:	d877      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b50      	cmp	r3, #80	@ 0x50
 800511e:	d03c      	beq.n	800519a <HAL_TIM_ConfigClockSource+0xfa>
 8005120:	2b50      	cmp	r3, #80	@ 0x50
 8005122:	d873      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b40      	cmp	r3, #64	@ 0x40
 8005126:	d058      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x13a>
 8005128:	2b40      	cmp	r3, #64	@ 0x40
 800512a:	d86f      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b30      	cmp	r3, #48	@ 0x30
 800512e:	d064      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b30      	cmp	r3, #48	@ 0x30
 8005132:	d86b      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d060      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d867      	bhi.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d05c      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d05a      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x15a>
 8005144:	e062      	b.n	800520c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	f000 f9b5 	bl	80054c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
      break;
 8005172:	e04f      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	f000 f99e 	bl	80054c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005196:	609a      	str	r2, [r3, #8]
      break;
 8005198:	e03c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 f912 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2150      	movs	r1, #80	@ 0x50
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f96b 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051b8:	e02c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 f931 	bl	800542e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2160      	movs	r1, #96	@ 0x60
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f95b 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051d8:	e01c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 f8f2 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2140      	movs	r1, #64	@ 0x40
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f94b 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 80051f8:	e00c      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 f942 	bl	800548e <TIM_ITRx_SetConfig>
      break;
 800520a:	e003      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e000      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	fffeff88 	.word	0xfffeff88

08005234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a43      	ldr	r2, [pc, #268]	@ (80053a4 <TIM_Base_SetConfig+0x120>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a2:	d00f      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a40      	ldr	r2, [pc, #256]	@ (80053a8 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3f      	ldr	r2, [pc, #252]	@ (80053ac <TIM_Base_SetConfig+0x128>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3e      	ldr	r2, [pc, #248]	@ (80053b0 <TIM_Base_SetConfig+0x12c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3d      	ldr	r2, [pc, #244]	@ (80053b4 <TIM_Base_SetConfig+0x130>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a32      	ldr	r2, [pc, #200]	@ (80053a4 <TIM_Base_SetConfig+0x120>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02b      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e4:	d027      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2f      	ldr	r2, [pc, #188]	@ (80053a8 <TIM_Base_SetConfig+0x124>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d023      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2e      	ldr	r2, [pc, #184]	@ (80053ac <TIM_Base_SetConfig+0x128>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01f      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2d      	ldr	r2, [pc, #180]	@ (80053b0 <TIM_Base_SetConfig+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01b      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <TIM_Base_SetConfig+0x130>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d017      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <TIM_Base_SetConfig+0x134>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <TIM_Base_SetConfig+0x138>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00f      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a29      	ldr	r2, [pc, #164]	@ (80053c0 <TIM_Base_SetConfig+0x13c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00b      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a28      	ldr	r2, [pc, #160]	@ (80053c4 <TIM_Base_SetConfig+0x140>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <TIM_Base_SetConfig+0x144>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a26      	ldr	r2, [pc, #152]	@ (80053cc <TIM_Base_SetConfig+0x148>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d108      	bne.n	8005348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a0e      	ldr	r2, [pc, #56]	@ (80053a4 <TIM_Base_SetConfig+0x120>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_Base_SetConfig+0xf2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a10      	ldr	r2, [pc, #64]	@ (80053b4 <TIM_Base_SetConfig+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d103      	bne.n	800537e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40010400 	.word	0x40010400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800
 80053c4:	40001800 	.word	0x40001800
 80053c8:	40001c00 	.word	0x40001c00
 80053cc:	40002000 	.word	0x40002000

080053d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 030a 	bic.w	r3, r3, #10
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 0210 	bic.w	r2, r3, #16
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	031b      	lsls	r3, r3, #12
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800546a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f043 0307 	orr.w	r3, r3, #7
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005518:	2302      	movs	r3, #2
 800551a:	e06d      	b.n	80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a30      	ldr	r2, [pc, #192]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2f      	ldr	r2, [pc, #188]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a20      	ldr	r2, [pc, #128]	@ (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d022      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558e:	d01d      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1d      	ldr	r2, [pc, #116]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1c      	ldr	r2, [pc, #112]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a15      	ldr	r2, [pc, #84]	@ (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a16      	ldr	r2, [pc, #88]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a15      	ldr	r2, [pc, #84]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	40010000 	.word	0x40010000
 8005608:	40010400 	.word	0x40010400
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e040      	b.n	80056f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc f940 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	@ 0x24
 8005688:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fe42 	bl	800632c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fbdb 	bl	8005e64 <UART_SetConfig>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e01b      	b.n	80056f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fec1 	bl	8006470 <UART_CheckIdleState>
 80056ee:	4603      	mov	r3, r0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	@ 0x28
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800570c:	2b20      	cmp	r3, #32
 800570e:	d177      	bne.n	8005800 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Transmit+0x24>
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e070      	b.n	8005802 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2221      	movs	r2, #33	@ 0x21
 800572c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800572e:	f7fc fb09 	bl	8001d44 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574c:	d108      	bne.n	8005760 <HAL_UART_Transmit+0x68>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	e003      	b.n	8005768 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005768:	e02f      	b.n	80057ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	2180      	movs	r1, #128	@ 0x80
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 ff23 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e03b      	b.n	8005802 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3302      	adds	r3, #2
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e007      	b.n	80057b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1c9      	bne.n	800576a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	2140      	movs	r1, #64	@ 0x40
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 feed 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e005      	b.n	8005802 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005800:	2302      	movs	r3, #2
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b0ba      	sub	sp, #232	@ 0xe8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800583a:	4013      	ands	r3, r2
 800583c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d115      	bne.n	8005874 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00f      	beq.n	8005874 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 82c6 	beq.w	8005df6 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
      }
      return;
 8005872:	e2c0      	b.n	8005df6 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8117 	beq.w	8005aac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800587e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800588a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800588e:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <HAL_UART_IRQHandler+0x298>)
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 810a 	beq.w	8005aac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <HAL_UART_IRQHandler+0xbc>
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d011      	beq.n	80058f8 <HAL_UART_IRQHandler+0xec>
 80058d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2202      	movs	r2, #2
 80058e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ee:	f043 0204 	orr.w	r2, r3, #4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d011      	beq.n	8005928 <HAL_UART_IRQHandler+0x11c>
 8005904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2204      	movs	r2, #4
 8005916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800591e:	f043 0202 	orr.w	r2, r3, #2
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d017      	beq.n	8005964 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2208      	movs	r2, #8
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800595a:	f043 0208 	orr.w	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <HAL_UART_IRQHandler+0x18a>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 822c 	beq.w	8005dfa <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b40      	cmp	r3, #64	@ 0x40
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d04f      	beq.n	8005a8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fe53 	bl	800669a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fe:	2b40      	cmp	r3, #64	@ 0x40
 8005a00:	d141      	bne.n	8005a86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3308      	adds	r3, #8
 8005a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1d9      	bne.n	8005a02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d013      	beq.n	8005a7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5a:	4a13      	ldr	r2, [pc, #76]	@ (8005aa8 <HAL_UART_IRQHandler+0x29c>)
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fc fc94 	bl	8002390 <HAL_DMA_Abort_IT>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d017      	beq.n	8005a9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00f      	b.n	8005a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9d0 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00b      	b.n	8005a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9cc 	bl	8005e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e007      	b.n	8005a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9c8 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a9c:	e1ad      	b.n	8005dfa <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9e:	bf00      	nop
    return;
 8005aa0:	e1ab      	b.n	8005dfa <HAL_UART_IRQHandler+0x5ee>
 8005aa2:	bf00      	nop
 8005aa4:	04000120 	.word	0x04000120
 8005aa8:	08006763 	.word	0x08006763

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	f040 8166 	bne.w	8005d82 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 815f 	beq.w	8005d82 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8158 	beq.w	8005d82 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2210      	movs	r2, #16
 8005ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	f040 80d0 	bne.w	8005c8a <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80ab 	beq.w	8005c56 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	f080 80a3 	bcs.w	8005c56 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b24:	f000 8086 	beq.w	8005c34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1da      	bne.n	8005b28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ba8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e1      	bne.n	8005b72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e3      	bne.n	8005bae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c04:	f023 0310 	bic.w	r3, r3, #16
 8005c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e4      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fc fb3e 	bl	80022b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8f2 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c54:	e0d3      	b.n	8005dfe <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c60:	429a      	cmp	r2, r3
 8005c62:	f040 80cc 	bne.w	8005dfe <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c70:	f040 80c5 	bne.w	8005dfe <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8d8 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
      return;
 8005c88:	e0b9      	b.n	8005dfe <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80ab 	beq.w	8005e02 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8005cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80a6 	beq.w	8005e02 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e4      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d10:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e3      	bne.n	8005cec <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0310 	bic.w	r3, r3, #16
 8005d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	617b      	str	r3, [r7, #20]
   return(result);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e4      	bne.n	8005d38 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2202      	movs	r2, #2
 8005d72:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f85c 	bl	8005e38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d80:	e03f      	b.n	8005e02 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00e      	beq.n	8005dac <HAL_UART_IRQHandler+0x5a0>
 8005d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f853 	bl	8005e50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005daa:	e02d      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01c      	beq.n	8005e06 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
    }
    return;
 8005dd4:	e017      	b.n	8005e06 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d012      	beq.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fcc9 	bl	8006786 <UART_EndTransmit_IT>
    return;
 8005df4:	e008      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005df6:	bf00      	nop
 8005df8:	e006      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
    return;
 8005dfa:	bf00      	nop
 8005dfc:	e004      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_UART_IRQHandler+0x5fc>
    return;
 8005e06:	bf00      	nop
  }

}
 8005e08:	37e8      	adds	r7, #232	@ 0xe8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop

08005e10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4ba6      	ldr	r3, [pc, #664]	@ (8006128 <UART_SetConfig+0x2c4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	6979      	ldr	r1, [r7, #20]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a94      	ldr	r2, [pc, #592]	@ (800612c <UART_SetConfig+0x2c8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d120      	bne.n	8005f22 <UART_SetConfig+0xbe>
 8005ee0:	4b93      	ldr	r3, [pc, #588]	@ (8006130 <UART_SetConfig+0x2cc>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d816      	bhi.n	8005f1c <UART_SetConfig+0xb8>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x90>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f0b 	.word	0x08005f0b
 8005f00:	08005f17 	.word	0x08005f17
 8005f04:	2301      	movs	r3, #1
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e150      	b.n	80061ac <UART_SetConfig+0x348>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e14d      	b.n	80061ac <UART_SetConfig+0x348>
 8005f10:	2304      	movs	r3, #4
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e14a      	b.n	80061ac <UART_SetConfig+0x348>
 8005f16:	2308      	movs	r3, #8
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e147      	b.n	80061ac <UART_SetConfig+0x348>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e144      	b.n	80061ac <UART_SetConfig+0x348>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a83      	ldr	r2, [pc, #524]	@ (8006134 <UART_SetConfig+0x2d0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d132      	bne.n	8005f92 <UART_SetConfig+0x12e>
 8005f2c:	4b80      	ldr	r3, [pc, #512]	@ (8006130 <UART_SetConfig+0x2cc>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f32:	f003 030c 	and.w	r3, r3, #12
 8005f36:	2b0c      	cmp	r3, #12
 8005f38:	d828      	bhi.n	8005f8c <UART_SetConfig+0x128>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <UART_SetConfig+0xdc>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f75 	.word	0x08005f75
 8005f44:	08005f8d 	.word	0x08005f8d
 8005f48:	08005f8d 	.word	0x08005f8d
 8005f4c:	08005f8d 	.word	0x08005f8d
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005f8d 	.word	0x08005f8d
 8005f58:	08005f8d 	.word	0x08005f8d
 8005f5c:	08005f8d 	.word	0x08005f8d
 8005f60:	08005f7b 	.word	0x08005f7b
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08005f87 	.word	0x08005f87
 8005f74:	2300      	movs	r3, #0
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e118      	b.n	80061ac <UART_SetConfig+0x348>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e115      	b.n	80061ac <UART_SetConfig+0x348>
 8005f80:	2304      	movs	r3, #4
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e112      	b.n	80061ac <UART_SetConfig+0x348>
 8005f86:	2308      	movs	r3, #8
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e10f      	b.n	80061ac <UART_SetConfig+0x348>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e10c      	b.n	80061ac <UART_SetConfig+0x348>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a68      	ldr	r2, [pc, #416]	@ (8006138 <UART_SetConfig+0x2d4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d120      	bne.n	8005fde <UART_SetConfig+0x17a>
 8005f9c:	4b64      	ldr	r3, [pc, #400]	@ (8006130 <UART_SetConfig+0x2cc>)
 8005f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fa6:	2b30      	cmp	r3, #48	@ 0x30
 8005fa8:	d013      	beq.n	8005fd2 <UART_SetConfig+0x16e>
 8005faa:	2b30      	cmp	r3, #48	@ 0x30
 8005fac:	d814      	bhi.n	8005fd8 <UART_SetConfig+0x174>
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d009      	beq.n	8005fc6 <UART_SetConfig+0x162>
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d810      	bhi.n	8005fd8 <UART_SetConfig+0x174>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <UART_SetConfig+0x15c>
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d006      	beq.n	8005fcc <UART_SetConfig+0x168>
 8005fbe:	e00b      	b.n	8005fd8 <UART_SetConfig+0x174>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	e0f2      	b.n	80061ac <UART_SetConfig+0x348>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	77fb      	strb	r3, [r7, #31]
 8005fca:	e0ef      	b.n	80061ac <UART_SetConfig+0x348>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e0ec      	b.n	80061ac <UART_SetConfig+0x348>
 8005fd2:	2308      	movs	r3, #8
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e0e9      	b.n	80061ac <UART_SetConfig+0x348>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e0e6      	b.n	80061ac <UART_SetConfig+0x348>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a56      	ldr	r2, [pc, #344]	@ (800613c <UART_SetConfig+0x2d8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d120      	bne.n	800602a <UART_SetConfig+0x1c6>
 8005fe8:	4b51      	ldr	r3, [pc, #324]	@ (8006130 <UART_SetConfig+0x2cc>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ff4:	d013      	beq.n	800601e <UART_SetConfig+0x1ba>
 8005ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ff8:	d814      	bhi.n	8006024 <UART_SetConfig+0x1c0>
 8005ffa:	2b80      	cmp	r3, #128	@ 0x80
 8005ffc:	d009      	beq.n	8006012 <UART_SetConfig+0x1ae>
 8005ffe:	2b80      	cmp	r3, #128	@ 0x80
 8006000:	d810      	bhi.n	8006024 <UART_SetConfig+0x1c0>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <UART_SetConfig+0x1a8>
 8006006:	2b40      	cmp	r3, #64	@ 0x40
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x1b4>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x1c0>
 800600c:	2300      	movs	r3, #0
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e0cc      	b.n	80061ac <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e0c9      	b.n	80061ac <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e0c6      	b.n	80061ac <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e0c3      	b.n	80061ac <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0c0      	b.n	80061ac <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a44      	ldr	r2, [pc, #272]	@ (8006140 <UART_SetConfig+0x2dc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d125      	bne.n	8006080 <UART_SetConfig+0x21c>
 8006034:	4b3e      	ldr	r3, [pc, #248]	@ (8006130 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006042:	d017      	beq.n	8006074 <UART_SetConfig+0x210>
 8006044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006048:	d817      	bhi.n	800607a <UART_SetConfig+0x216>
 800604a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800604e:	d00b      	beq.n	8006068 <UART_SetConfig+0x204>
 8006050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006054:	d811      	bhi.n	800607a <UART_SetConfig+0x216>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <UART_SetConfig+0x1fe>
 800605a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800605e:	d006      	beq.n	800606e <UART_SetConfig+0x20a>
 8006060:	e00b      	b.n	800607a <UART_SetConfig+0x216>
 8006062:	2300      	movs	r3, #0
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e0a1      	b.n	80061ac <UART_SetConfig+0x348>
 8006068:	2302      	movs	r3, #2
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e09e      	b.n	80061ac <UART_SetConfig+0x348>
 800606e:	2304      	movs	r3, #4
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e09b      	b.n	80061ac <UART_SetConfig+0x348>
 8006074:	2308      	movs	r3, #8
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e098      	b.n	80061ac <UART_SetConfig+0x348>
 800607a:	2310      	movs	r3, #16
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e095      	b.n	80061ac <UART_SetConfig+0x348>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2f      	ldr	r2, [pc, #188]	@ (8006144 <UART_SetConfig+0x2e0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d125      	bne.n	80060d6 <UART_SetConfig+0x272>
 800608a:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <UART_SetConfig+0x2cc>)
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006090:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006094:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006098:	d017      	beq.n	80060ca <UART_SetConfig+0x266>
 800609a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800609e:	d817      	bhi.n	80060d0 <UART_SetConfig+0x26c>
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060a4:	d00b      	beq.n	80060be <UART_SetConfig+0x25a>
 80060a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060aa:	d811      	bhi.n	80060d0 <UART_SetConfig+0x26c>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <UART_SetConfig+0x254>
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060b4:	d006      	beq.n	80060c4 <UART_SetConfig+0x260>
 80060b6:	e00b      	b.n	80060d0 <UART_SetConfig+0x26c>
 80060b8:	2301      	movs	r3, #1
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e076      	b.n	80061ac <UART_SetConfig+0x348>
 80060be:	2302      	movs	r3, #2
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e073      	b.n	80061ac <UART_SetConfig+0x348>
 80060c4:	2304      	movs	r3, #4
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e070      	b.n	80061ac <UART_SetConfig+0x348>
 80060ca:	2308      	movs	r3, #8
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e06d      	b.n	80061ac <UART_SetConfig+0x348>
 80060d0:	2310      	movs	r3, #16
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e06a      	b.n	80061ac <UART_SetConfig+0x348>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1b      	ldr	r2, [pc, #108]	@ (8006148 <UART_SetConfig+0x2e4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d138      	bne.n	8006152 <UART_SetConfig+0x2ee>
 80060e0:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <UART_SetConfig+0x2cc>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80060ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060ee:	d017      	beq.n	8006120 <UART_SetConfig+0x2bc>
 80060f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060f4:	d82a      	bhi.n	800614c <UART_SetConfig+0x2e8>
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fa:	d00b      	beq.n	8006114 <UART_SetConfig+0x2b0>
 80060fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006100:	d824      	bhi.n	800614c <UART_SetConfig+0x2e8>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <UART_SetConfig+0x2aa>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d006      	beq.n	800611a <UART_SetConfig+0x2b6>
 800610c:	e01e      	b.n	800614c <UART_SetConfig+0x2e8>
 800610e:	2300      	movs	r3, #0
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e04b      	b.n	80061ac <UART_SetConfig+0x348>
 8006114:	2302      	movs	r3, #2
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e048      	b.n	80061ac <UART_SetConfig+0x348>
 800611a:	2304      	movs	r3, #4
 800611c:	77fb      	strb	r3, [r7, #31]
 800611e:	e045      	b.n	80061ac <UART_SetConfig+0x348>
 8006120:	2308      	movs	r3, #8
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e042      	b.n	80061ac <UART_SetConfig+0x348>
 8006126:	bf00      	nop
 8006128:	efff69f3 	.word	0xefff69f3
 800612c:	40011000 	.word	0x40011000
 8006130:	40023800 	.word	0x40023800
 8006134:	40004400 	.word	0x40004400
 8006138:	40004800 	.word	0x40004800
 800613c:	40004c00 	.word	0x40004c00
 8006140:	40005000 	.word	0x40005000
 8006144:	40011400 	.word	0x40011400
 8006148:	40007800 	.word	0x40007800
 800614c:	2310      	movs	r3, #16
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e02c      	b.n	80061ac <UART_SetConfig+0x348>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a72      	ldr	r2, [pc, #456]	@ (8006320 <UART_SetConfig+0x4bc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d125      	bne.n	80061a8 <UART_SetConfig+0x344>
 800615c:	4b71      	ldr	r3, [pc, #452]	@ (8006324 <UART_SetConfig+0x4c0>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006162:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006166:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800616a:	d017      	beq.n	800619c <UART_SetConfig+0x338>
 800616c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006170:	d817      	bhi.n	80061a2 <UART_SetConfig+0x33e>
 8006172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006176:	d00b      	beq.n	8006190 <UART_SetConfig+0x32c>
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800617c:	d811      	bhi.n	80061a2 <UART_SetConfig+0x33e>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <UART_SetConfig+0x326>
 8006182:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006186:	d006      	beq.n	8006196 <UART_SetConfig+0x332>
 8006188:	e00b      	b.n	80061a2 <UART_SetConfig+0x33e>
 800618a:	2300      	movs	r3, #0
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e00d      	b.n	80061ac <UART_SetConfig+0x348>
 8006190:	2302      	movs	r3, #2
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e00a      	b.n	80061ac <UART_SetConfig+0x348>
 8006196:	2304      	movs	r3, #4
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e007      	b.n	80061ac <UART_SetConfig+0x348>
 800619c:	2308      	movs	r3, #8
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e004      	b.n	80061ac <UART_SetConfig+0x348>
 80061a2:	2310      	movs	r3, #16
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e001      	b.n	80061ac <UART_SetConfig+0x348>
 80061a8:	2310      	movs	r3, #16
 80061aa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b4:	d15b      	bne.n	800626e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d828      	bhi.n	800620e <UART_SetConfig+0x3aa>
 80061bc:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <UART_SetConfig+0x360>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061f1 	.word	0x080061f1
 80061cc:	080061f9 	.word	0x080061f9
 80061d0:	0800620f 	.word	0x0800620f
 80061d4:	080061ff 	.word	0x080061ff
 80061d8:	0800620f 	.word	0x0800620f
 80061dc:	0800620f 	.word	0x0800620f
 80061e0:	0800620f 	.word	0x0800620f
 80061e4:	08006207 	.word	0x08006207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e8:	f7fe f8c2 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 80061ec:	61b8      	str	r0, [r7, #24]
        break;
 80061ee:	e013      	b.n	8006218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f0:	f7fe f8d2 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 80061f4:	61b8      	str	r0, [r7, #24]
        break;
 80061f6:	e00f      	b.n	8006218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006328 <UART_SetConfig+0x4c4>)
 80061fa:	61bb      	str	r3, [r7, #24]
        break;
 80061fc:	e00c      	b.n	8006218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fe:	f7fd ffe5 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8006202:	61b8      	str	r0, [r7, #24]
        break;
 8006204:	e008      	b.n	8006218 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800620a:	61bb      	str	r3, [r7, #24]
        break;
 800620c:	e004      	b.n	8006218 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	77bb      	strb	r3, [r7, #30]
        break;
 8006216:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d074      	beq.n	8006308 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	005a      	lsls	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006232:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d916      	bls.n	8006268 <UART_SetConfig+0x404>
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006240:	d212      	bcs.n	8006268 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f023 030f 	bic.w	r3, r3, #15
 800624a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	b29b      	uxth	r3, r3
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	b29a      	uxth	r2, r3
 8006258:	89fb      	ldrh	r3, [r7, #14]
 800625a:	4313      	orrs	r3, r2
 800625c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	89fa      	ldrh	r2, [r7, #14]
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	e04f      	b.n	8006308 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	77bb      	strb	r3, [r7, #30]
 800626c:	e04c      	b.n	8006308 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b08      	cmp	r3, #8
 8006272:	d828      	bhi.n	80062c6 <UART_SetConfig+0x462>
 8006274:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x418>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b7 	.word	0x080062b7
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe f866 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 80062a4:	61b8      	str	r0, [r7, #24]
        break;
 80062a6:	e013      	b.n	80062d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fe f876 	bl	8004398 <HAL_RCC_GetPCLK2Freq>
 80062ac:	61b8      	str	r0, [r7, #24]
        break;
 80062ae:	e00f      	b.n	80062d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006328 <UART_SetConfig+0x4c4>)
 80062b2:	61bb      	str	r3, [r7, #24]
        break;
 80062b4:	e00c      	b.n	80062d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fd ff89 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 80062ba:	61b8      	str	r0, [r7, #24]
        break;
 80062bc:	e008      	b.n	80062d0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e004      	b.n	80062d0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	77bb      	strb	r3, [r7, #30]
        break;
 80062ce:	bf00      	nop
    }

    if (pclk != 0U)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	085a      	lsrs	r2, r3, #1
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	441a      	add	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d909      	bls.n	8006304 <UART_SetConfig+0x4a0>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f6:	d205      	bcs.n	8006304 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	e001      	b.n	8006308 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006314:	7fbb      	ldrb	r3, [r7, #30]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40007c00 	.word	0x40007c00
 8006324:	40023800 	.word	0x40023800
 8006328:	00f42400 	.word	0x00f42400

0800632c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00a      	beq.n	800639a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01a      	beq.n	8006442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800642a:	d10a      	bne.n	8006442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b098      	sub	sp, #96	@ 0x60
 8006474:	af02      	add	r7, sp, #8
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006480:	f7fb fc60 	bl	8001d44 <HAL_GetTick>
 8006484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b08      	cmp	r3, #8
 8006492:	d12e      	bne.n	80064f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649c:	2200      	movs	r2, #0
 800649e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f88c 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d021      	beq.n	80064f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e062      	b.n	80065b8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d149      	bne.n	8006594 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006508:	2200      	movs	r2, #0
 800650a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f856 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d03c      	beq.n	8006594 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	623b      	str	r3, [r7, #32]
   return(result);
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800652e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006538:	633b      	str	r3, [r7, #48]	@ 0x30
 800653a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800653e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e6      	bne.n	800651a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3308      	adds	r3, #8
 8006552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60fb      	str	r3, [r7, #12]
   return(result);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0301 	bic.w	r3, r3, #1
 8006562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800656c:	61fa      	str	r2, [r7, #28]
 800656e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e5      	bne.n	800654c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e011      	b.n	80065b8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3758      	adds	r7, #88	@ 0x58
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d0:	e04f      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d04b      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fb fbb3 	bl	8001d44 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e04e      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d037      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b80      	cmp	r3, #128	@ 0x80
 8006606:	d034      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b40      	cmp	r3, #64	@ 0x40
 800660c:	d031      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b08      	cmp	r3, #8
 800661a:	d110      	bne.n	800663e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2208      	movs	r2, #8
 8006622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f838 	bl	800669a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2208      	movs	r2, #8
 800662e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e029      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664c:	d111      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f81e 	bl	800669a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	429a      	cmp	r2, r3
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d0a0      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669a:	b480      	push	{r7}
 800669c:	b095      	sub	sp, #84	@ 0x54
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	e853 3f00 	ldrex	r3, [r3]
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e6      	bne.n	80066a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f023 0301 	bic.w	r3, r3, #1
 80066ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e5      	bne.n	80066d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800670c:	2b01      	cmp	r3, #1
 800670e:	d118      	bne.n	8006742 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	647b      	str	r3, [r7, #68]	@ 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006756:	bf00      	nop
 8006758:	3754      	adds	r7, #84	@ 0x54
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b084      	sub	sp, #16
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fb53 	bl	8005e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b088      	sub	sp, #32
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	60bb      	str	r3, [r7, #8]
   return(result);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6979      	ldr	r1, [r7, #20]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fb1f 	bl	8005e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067d2:	bf00      	nop
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80067e2:	f001 f808 	bl	80077f6 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80067e6:	4b12      	ldr	r3, [pc, #72]	@ (8006830 <MX_LWIP_Init+0x54>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80067ec:	4b11      	ldr	r3, [pc, #68]	@ (8006834 <MX_LWIP_Init+0x58>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80067f2:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <MX_LWIP_Init+0x5c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80067f8:	4b10      	ldr	r3, [pc, #64]	@ (800683c <MX_LWIP_Init+0x60>)
 80067fa:	9302      	str	r3, [sp, #8]
 80067fc:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <MX_LWIP_Init+0x64>)
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	2300      	movs	r3, #0
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <MX_LWIP_Init+0x5c>)
 8006806:	4a0b      	ldr	r2, [pc, #44]	@ (8006834 <MX_LWIP_Init+0x58>)
 8006808:	4909      	ldr	r1, [pc, #36]	@ (8006830 <MX_LWIP_Init+0x54>)
 800680a:	480e      	ldr	r0, [pc, #56]	@ (8006844 <MX_LWIP_Init+0x68>)
 800680c:	f001 fd02 	bl	8008214 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006810:	480c      	ldr	r0, [pc, #48]	@ (8006844 <MX_LWIP_Init+0x68>)
 8006812:	f001 feb9 	bl	8008588 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006816:	480b      	ldr	r0, [pc, #44]	@ (8006844 <MX_LWIP_Init+0x68>)
 8006818:	f001 fec6 	bl	80085a8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800681c:	490a      	ldr	r1, [pc, #40]	@ (8006848 <MX_LWIP_Init+0x6c>)
 800681e:	4809      	ldr	r0, [pc, #36]	@ (8006844 <MX_LWIP_Init+0x68>)
 8006820:	f001 ffc8 	bl	80087b4 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006824:	4807      	ldr	r0, [pc, #28]	@ (8006844 <MX_LWIP_Init+0x68>)
 8006826:	f009 fd15 	bl	8010254 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800682a:	bf00      	nop
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000618 	.word	0x20000618
 8006834:	2000061c 	.word	0x2000061c
 8006838:	20000620 	.word	0x20000620
 800683c:	08013eed 	.word	0x08013eed
 8006840:	08006bc1 	.word	0x08006bc1
 8006844:	200005e0 	.word	0x200005e0
 8006848:	0800689d 	.word	0x0800689d

0800684c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8006854:	f7fb fa76 	bl	8001d44 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	4b08      	ldr	r3, [pc, #32]	@ (800687c <Ethernet_Link_Periodic_Handle+0x30>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b63      	cmp	r3, #99	@ 0x63
 8006862:	d907      	bls.n	8006874 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8006864:	f7fb fa6e 	bl	8001d44 <HAL_GetTick>
 8006868:	4603      	mov	r3, r0
 800686a:	4a04      	ldr	r2, [pc, #16]	@ (800687c <Ethernet_Link_Periodic_Handle+0x30>)
 800686c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fadc 	bl	8006e2c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200005dc 	.word	0x200005dc

08006880 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006884:	4804      	ldr	r0, [pc, #16]	@ (8006898 <MX_LWIP_Process+0x18>)
 8006886:	f000 f97b 	bl	8006b80 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800688a:	f008 fc67 	bl	800f15c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800688e:	4802      	ldr	r0, [pc, #8]	@ (8006898 <MX_LWIP_Process+0x18>)
 8006890:	f7ff ffdc 	bl	800684c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006894:	bf00      	nop
 8006896:	bd80      	pop	{r7, pc}
 8006898:	200005e0 	.word	0x200005e0

0800689c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <SCB_InvalidateDCache_by_Addr>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80068c2:	2320      	movs	r3, #32
 80068c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80068c6:	f3bf 8f4f 	dsb	sy
}
 80068ca:	bf00      	nop
    while (op_size > 0) {
 80068cc:	e00b      	b.n	80068e6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80068ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006904 <SCB_InvalidateDCache_by_Addr+0x54>)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dcf0      	bgt.n	80068ce <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80068ec:	f3bf 8f4f 	dsb	sy
}
 80068f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80068f2:	f3bf 8f6f 	isb	sy
}
 80068f6:	bf00      	nop
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	e000ed00 	.word	0xe000ed00

08006908 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006914:	4b44      	ldr	r3, [pc, #272]	@ (8006a28 <low_level_init+0x120>)
 8006916:	4a45      	ldr	r2, [pc, #276]	@ (8006a2c <low_level_init+0x124>)
 8006918:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800691a:	2300      	movs	r3, #0
 800691c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800691e:	2380      	movs	r3, #128	@ 0x80
 8006920:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006922:	23e1      	movs	r3, #225	@ 0xe1
 8006924:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006926:	2300      	movs	r3, #0
 8006928:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800692a:	2300      	movs	r3, #0
 800692c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800692e:	2300      	movs	r3, #0
 8006930:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006932:	4a3d      	ldr	r2, [pc, #244]	@ (8006a28 <low_level_init+0x120>)
 8006934:	f107 0308 	add.w	r3, r7, #8
 8006938:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800693a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a28 <low_level_init+0x120>)
 800693c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006940:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006942:	4b39      	ldr	r3, [pc, #228]	@ (8006a28 <low_level_init+0x120>)
 8006944:	4a3a      	ldr	r2, [pc, #232]	@ (8006a30 <low_level_init+0x128>)
 8006946:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006948:	4b37      	ldr	r3, [pc, #220]	@ (8006a28 <low_level_init+0x120>)
 800694a:	4a3a      	ldr	r2, [pc, #232]	@ (8006a34 <low_level_init+0x12c>)
 800694c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800694e:	4b36      	ldr	r3, [pc, #216]	@ (8006a28 <low_level_init+0x120>)
 8006950:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006954:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006956:	4834      	ldr	r0, [pc, #208]	@ (8006a28 <low_level_init+0x120>)
 8006958:	f7fb fd3c 	bl	80023d4 <HAL_ETH_Init>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006960:	2238      	movs	r2, #56	@ 0x38
 8006962:	2100      	movs	r1, #0
 8006964:	4834      	ldr	r0, [pc, #208]	@ (8006a38 <low_level_init+0x130>)
 8006966:	f00e fce1 	bl	801532c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800696a:	4b33      	ldr	r3, [pc, #204]	@ (8006a38 <low_level_init+0x130>)
 800696c:	2221      	movs	r2, #33	@ 0x21
 800696e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006970:	4b31      	ldr	r3, [pc, #196]	@ (8006a38 <low_level_init+0x130>)
 8006972:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006976:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006978:	4b2f      	ldr	r3, [pc, #188]	@ (8006a38 <low_level_init+0x130>)
 800697a:	2200      	movs	r2, #0
 800697c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800697e:	482f      	ldr	r0, [pc, #188]	@ (8006a3c <low_level_init+0x134>)
 8006980:	f001 fb10 	bl	8007fa4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2206      	movs	r2, #6
 8006988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800698c:	4b26      	ldr	r3, [pc, #152]	@ (8006a28 <low_level_init+0x120>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006998:	4b23      	ldr	r3, [pc, #140]	@ (8006a28 <low_level_init+0x120>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	785a      	ldrb	r2, [r3, #1]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80069a4:	4b20      	ldr	r3, [pc, #128]	@ (8006a28 <low_level_init+0x120>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	789a      	ldrb	r2, [r3, #2]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80069b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <low_level_init+0x120>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	78da      	ldrb	r2, [r3, #3]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80069bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a28 <low_level_init+0x120>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	791a      	ldrb	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80069c8:	4b17      	ldr	r3, [pc, #92]	@ (8006a28 <low_level_init+0x120>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	795a      	ldrb	r2, [r3, #5]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80069da:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80069e2:	f043 030a 	orr.w	r3, r3, #10
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80069ee:	4914      	ldr	r1, [pc, #80]	@ (8006a40 <low_level_init+0x138>)
 80069f0:	4814      	ldr	r0, [pc, #80]	@ (8006a44 <low_level_init+0x13c>)
 80069f2:	f7fb f850 	bl	8001a96 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80069f6:	4813      	ldr	r0, [pc, #76]	@ (8006a44 <low_level_init+0x13c>)
 80069f8:	f7fb f87f 	bl	8001afa <LAN8742_Init>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d006      	beq.n	8006a10 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fea6 	bl	8008754 <netif_set_link_down>
    netif_set_down(netif);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fe39 	bl	8008680 <netif_set_down>
 8006a0e:	e008      	b.n	8006a22 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fa08 	bl	8006e2c <ethernet_link_check_state>
 8006a1c:	e001      	b.n	8006a22 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8006a1e:	f7fa fb31 	bl	8001084 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20004fb0 	.word	0x20004fb0
 8006a2c:	40028000 	.word	0x40028000
 8006a30:	200002a8 	.word	0x200002a8
 8006a34:	20000208 	.word	0x20000208
 8006a38:	20005060 	.word	0x20005060
 8006a3c:	0801be48 	.word	0x0801be48
 8006a40:	2000001c 	.word	0x2000001c
 8006a44:	20005098 	.word	0x20005098

08006a48 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b092      	sub	sp, #72	@ 0x48
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006a60:	f107 030c 	add.w	r3, r7, #12
 8006a64:	2230      	movs	r2, #48	@ 0x30
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f00e fc5f 	bl	801532c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	2230      	movs	r2, #48	@ 0x30
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f00e fc58 	bl	801532c <memset>

  for(q = p; q != NULL; q = q->next)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a80:	e045      	b.n	8006b0e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d902      	bls.n	8006a8e <low_level_output+0x46>
      return ERR_IF;
 8006a88:	f06f 030b 	mvn.w	r3, #11
 8006a8c:	e055      	b.n	8006b3a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8006a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a94:	4613      	mov	r3, r2
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	3348      	adds	r3, #72	@ 0x48
 8006a9e:	443b      	add	r3, r7
 8006aa0:	3b3c      	subs	r3, #60	@ 0x3c
 8006aa2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aac:	4613      	mov	r3, r2
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	4413      	add	r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	3348      	adds	r3, #72	@ 0x48
 8006ab6:	443b      	add	r3, r7
 8006ab8:	3b38      	subs	r3, #56	@ 0x38
 8006aba:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d011      	beq.n	8006ae6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	f107 000c 	add.w	r0, r7, #12
 8006aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006acc:	460b      	mov	r3, r1
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	440b      	add	r3, r1
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	18c1      	adds	r1, r0, r3
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	3348      	adds	r3, #72	@ 0x48
 8006ae0:	443b      	add	r3, r7
 8006ae2:	3b34      	subs	r3, #52	@ 0x34
 8006ae4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	3348      	adds	r3, #72	@ 0x48
 8006afa:	443b      	add	r3, r7
 8006afc:	3b34      	subs	r3, #52	@ 0x34
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b04:	3301      	adds	r3, #1
 8006b06:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1b6      	bne.n	8006a82 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	891b      	ldrh	r3, [r3, #8]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b44 <low_level_output+0xfc>)
 8006b1c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006b1e:	4a09      	ldr	r2, [pc, #36]	@ (8006b44 <low_level_output+0xfc>)
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006b26:	4a07      	ldr	r2, [pc, #28]	@ (8006b44 <low_level_output+0xfc>)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006b2c:	2214      	movs	r2, #20
 8006b2e:	4905      	ldr	r1, [pc, #20]	@ (8006b44 <low_level_output+0xfc>)
 8006b30:	4805      	ldr	r0, [pc, #20]	@ (8006b48 <low_level_output+0x100>)
 8006b32:	f7fb fda1 	bl	8002678 <HAL_ETH_Transmit>

  return errval;
 8006b36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3748      	adds	r7, #72	@ 0x48
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20005060 	.word	0x20005060
 8006b48:	20004fb0 	.word	0x20004fb0

08006b4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006b58:	4b07      	ldr	r3, [pc, #28]	@ (8006b78 <low_level_input+0x2c>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006b60:	f107 030c 	add.w	r3, r7, #12
 8006b64:	4619      	mov	r1, r3
 8006b66:	4805      	ldr	r0, [pc, #20]	@ (8006b7c <low_level_input+0x30>)
 8006b68:	f7fb fe1a 	bl	80027a0 <HAL_ETH_ReadData>
  }

  return p;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20004fac 	.word	0x20004fac
 8006b7c:	20004fb0 	.word	0x20004fb0

08006b80 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ffdd 	bl	8006b4c <low_level_input>
 8006b92:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	4798      	blx	r3
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f002 f982 	bl	8008eb4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ea      	bne.n	8006b8c <ethernetif_input+0xc>
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <ethernetif_init+0x1c>
 8006bce:	4b0e      	ldr	r3, [pc, #56]	@ (8006c08 <ethernetif_init+0x48>)
 8006bd0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006bd4:	490d      	ldr	r1, [pc, #52]	@ (8006c0c <ethernetif_init+0x4c>)
 8006bd6:	480e      	ldr	r0, [pc, #56]	@ (8006c10 <ethernetif_init+0x50>)
 8006bd8:	f00e fa14 	bl	8015004 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2273      	movs	r2, #115	@ 0x73
 8006be0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2274      	movs	r2, #116	@ 0x74
 8006be8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a09      	ldr	r2, [pc, #36]	@ (8006c14 <ethernetif_init+0x54>)
 8006bf0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a08      	ldr	r2, [pc, #32]	@ (8006c18 <ethernetif_init+0x58>)
 8006bf6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fe85 	bl	8006908 <low_level_init>

  return ERR_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	08018890 	.word	0x08018890
 8006c0c:	080188ac 	.word	0x080188ac
 8006c10:	080188bc 	.word	0x080188bc
 8006c14:	08012115 	.word	0x08012115
 8006c18:	08006a49 	.word	0x08006a49

08006c1c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006c28:	68f9      	ldr	r1, [r7, #12]
 8006c2a:	4807      	ldr	r0, [pc, #28]	@ (8006c48 <pbuf_free_custom+0x2c>)
 8006c2c:	f001 fa9c 	bl	8008168 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006c30:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <pbuf_free_custom+0x30>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006c38:	4b04      	ldr	r3, [pc, #16]	@ (8006c4c <pbuf_free_custom+0x30>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	0801be48 	.word	0x0801be48
 8006c4c:	20004fac 	.word	0x20004fac

08006c50 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c54:	f7fb f876 	bl	8001d44 <HAL_GetTick>
 8006c58:	4603      	mov	r3, r0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	@ 0x38
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	605a      	str	r2, [r3, #4]
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d7c <HAL_ETH_MspInit+0x11c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d178      	bne.n	8006d74 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006c82:	4b3f      	ldr	r3, [pc, #252]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c86:	4a3e      	ldr	r2, [pc, #248]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006c88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9e:	4a38      	ldr	r2, [pc, #224]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006ca0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ca6:	4b36      	ldr	r3, [pc, #216]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4b33      	ldr	r3, [pc, #204]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	4a32      	ldr	r2, [pc, #200]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cbe:	4b30      	ldr	r3, [pc, #192]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cca:	4b2d      	ldr	r3, [pc, #180]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cce:	4a2c      	ldr	r2, [pc, #176]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cd0:	f043 0304 	orr.w	r3, r3, #4
 8006cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ce2:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	4a26      	ldr	r2, [pc, #152]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cee:	4b24      	ldr	r3, [pc, #144]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cfa:	4b21      	ldr	r3, [pc, #132]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	4a20      	ldr	r2, [pc, #128]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006d00:	f043 0302 	orr.w	r3, r3, #2
 8006d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d06:	4b1e      	ldr	r3, [pc, #120]	@ (8006d80 <HAL_ETH_MspInit+0x120>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006d12:	2332      	movs	r3, #50	@ 0x32
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d16:	2302      	movs	r3, #2
 8006d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d22:	230b      	movs	r3, #11
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4815      	ldr	r0, [pc, #84]	@ (8006d84 <HAL_ETH_MspInit+0x124>)
 8006d2e:	f7fc fc83 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006d32:	2386      	movs	r3, #134	@ 0x86
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d36:	2302      	movs	r3, #2
 8006d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d42:	230b      	movs	r3, #11
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	480e      	ldr	r0, [pc, #56]	@ (8006d88 <HAL_ETH_MspInit+0x128>)
 8006d4e:	f7fc fc73 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006d52:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d60:	2303      	movs	r3, #3
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d64:	230b      	movs	r3, #11
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4807      	ldr	r0, [pc, #28]	@ (8006d8c <HAL_ETH_MspInit+0x12c>)
 8006d70:	f7fc fc62 	bl	8003638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d74:	bf00      	nop
 8006d76:	3738      	adds	r7, #56	@ 0x38
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40028000 	.word	0x40028000
 8006d80:	40023800 	.word	0x40023800
 8006d84:	40020800 	.word	0x40020800
 8006d88:	40020000 	.word	0x40020000
 8006d8c:	40020400 	.word	0x40020400

08006d90 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d94:	4802      	ldr	r0, [pc, #8]	@ (8006da0 <ETH_PHY_IO_Init+0x10>)
 8006d96:	f7fb ffed 	bl	8002d74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20004fb0 	.word	0x20004fb0

08006da4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return 0;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	4807      	ldr	r0, [pc, #28]	@ (8006de4 <ETH_PHY_IO_ReadReg+0x30>)
 8006dc8:	f7fb fe2e 	bl	8002a28 <HAL_ETH_ReadPHYRegister>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd6:	e000      	b.n	8006dda <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20004fb0 	.word	0x20004fb0

08006de8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	68f9      	ldr	r1, [r7, #12]
 8006dfa:	4807      	ldr	r0, [pc, #28]	@ (8006e18 <ETH_PHY_IO_WriteReg+0x30>)
 8006dfc:	f7fb fe5f 	bl	8002abe <HAL_ETH_WritePHYRegister>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0a:	e000      	b.n	8006e0e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20004fb0 	.word	0x20004fb0

08006e1c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e20:	f7fa ff90 	bl	8001d44 <HAL_GetTick>
 8006e24:	4603      	mov	r3, r0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b0a0      	sub	sp, #128	@ 0x80
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	2264      	movs	r2, #100	@ 0x64
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f00e fa75 	bl	801532c <memset>
  int32_t PHYLinkState = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e4e:	2300      	movs	r3, #0
 8006e50:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006e52:	483a      	ldr	r0, [pc, #232]	@ (8006f3c <ethernet_link_check_state+0x110>)
 8006e54:	f7fa fe9e 	bl	8001b94 <LAN8742_GetLinkState>
 8006e58:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e60:	089b      	lsrs	r3, r3, #2
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <ethernet_link_check_state+0x5a>
 8006e6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	dc09      	bgt.n	8006e86 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006e72:	4833      	ldr	r0, [pc, #204]	@ (8006f40 <ethernet_link_check_state+0x114>)
 8006e74:	f7fb fba7 	bl	80025c6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fc01 	bl	8008680 <netif_set_down>
    netif_set_link_down(netif);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fc68 	bl	8008754 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006e84:	e055      	b.n	8006f32 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d14e      	bne.n	8006f32 <ethernet_link_check_state+0x106>
 8006e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	dd4b      	ble.n	8006f32 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e9c:	3b02      	subs	r3, #2
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d82a      	bhi.n	8006ef8 <ethernet_link_check_state+0xcc>
 8006ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <ethernet_link_check_state+0x7c>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006ecb 	.word	0x08006ecb
 8006eb0:	08006edb 	.word	0x08006edb
 8006eb4:	08006eeb 	.word	0x08006eeb
      duplex = ETH_FULLDUPLEX_MODE;
 8006eb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ebc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006ebe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ec8:	e017      	b.n	8006efa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006ece:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ed8:	e00f      	b.n	8006efa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ede:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ee8:	e007      	b.n	8006efa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ef6:	e000      	b.n	8006efa <ethernet_link_check_state+0xce>
      break;
 8006ef8:	bf00      	nop
    if(linkchanged)
 8006efa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d018      	beq.n	8006f32 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	4619      	mov	r1, r3
 8006f06:	480e      	ldr	r0, [pc, #56]	@ (8006f40 <ethernet_link_check_state+0x114>)
 8006f08:	f7fb fe22 	bl	8002b50 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f12:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4809      	ldr	r0, [pc, #36]	@ (8006f40 <ethernet_link_check_state+0x114>)
 8006f1c:	f7fb ff0f 	bl	8002d3e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006f20:	4807      	ldr	r0, [pc, #28]	@ (8006f40 <ethernet_link_check_state+0x114>)
 8006f22:	f7fb faf1 	bl	8002508 <HAL_ETH_Start>
      netif_set_up(netif);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fb3e 	bl	80085a8 <netif_set_up>
      netif_set_link_up(netif);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fbd9 	bl	80086e4 <netif_set_link_up>
}
 8006f32:	bf00      	nop
 8006f34:	3780      	adds	r7, #128	@ 0x80
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20005098 	.word	0x20005098
 8006f40:	20004fb0 	.word	0x20004fb0

08006f44 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006f4c:	4812      	ldr	r0, [pc, #72]	@ (8006f98 <HAL_ETH_RxAllocateCallback+0x54>)
 8006f4e:	f001 f89d 	bl	800808c <memp_malloc_pool>
 8006f52:	60f8      	str	r0, [r7, #12]
  if (p)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d014      	beq.n	8006f84 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f103 0220 	add.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a0d      	ldr	r2, [pc, #52]	@ (8006f9c <HAL_ETH_RxAllocateCallback+0x58>)
 8006f68:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006f72:	9201      	str	r2, [sp, #4]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2241      	movs	r2, #65	@ 0x41
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	f001 fddf 	bl	8008b40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006f82:	e005      	b.n	8006f90 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006f84:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	0801be48 	.word	0x0801be48
 8006f9c:	08006c1d 	.word	0x08006c1d
 8006fa0:	20004fac 	.word	0x20004fac

08006fa4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3b20      	subs	r3, #32
 8006fc2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	887a      	ldrh	r2, [r7, #2]
 8006fd4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e003      	b.n	8006fee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e009      	b.n	8007010 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	891a      	ldrh	r2, [r3, #8]
 8007000:	887b      	ldrh	r3, [r7, #2]
 8007002:	4413      	add	r3, r2
 8007004:	b29a      	uxth	r2, r3
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f2      	bne.n	8006ffc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007016:	887b      	ldrh	r3, [r7, #2]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fc48 	bl	80068b0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007020:	bf00      	nop
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	88db      	ldrh	r3, [r3, #6]
 8007034:	3301      	adds	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	88db      	ldrh	r3, [r3, #6]
 8007048:	3301      	adds	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	88db      	ldrh	r3, [r3, #6]
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4413      	add	r3, r2
 8007076:	78fa      	ldrb	r2, [r7, #3]
 8007078:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	2bff      	cmp	r3, #255	@ 0xff
 800708c:	d902      	bls.n	8007094 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	801a      	strh	r2, [r3, #0]
  }
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	885b      	ldrh	r3, [r3, #2]
 80070ac:	461a      	mov	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	3304      	adds	r3, #4
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	2bff      	cmp	r3, #255	@ 0xff
 80070d0:	d905      	bls.n	80070de <mqtt_ringbuf_advance_get_idx+0x1e>
 80070d2:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <mqtt_ringbuf_advance_get_idx+0x4c>)
 80070d4:	22cb      	movs	r2, #203	@ 0xcb
 80070d6:	490e      	ldr	r1, [pc, #56]	@ (8007110 <mqtt_ringbuf_advance_get_idx+0x50>)
 80070d8:	480e      	ldr	r0, [pc, #56]	@ (8007114 <mqtt_ringbuf_advance_get_idx+0x54>)
 80070da:	f00d ff93 	bl	8015004 <iprintf>

  rb->get += len;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	885a      	ldrh	r2, [r3, #2]
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	4413      	add	r3, r2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	885b      	ldrh	r3, [r3, #2]
 80070f0:	2bff      	cmp	r3, #255	@ 0xff
 80070f2:	d906      	bls.n	8007102 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	805a      	strh	r2, [r3, #2]
  }
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	080188e4 	.word	0x080188e4
 8007110:	0801891c 	.word	0x0801891c
 8007114:	0801895c 	.word	0x0801895c

08007118 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007134:	d303      	bcc.n	800713e <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800713c:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	b29b      	uxth	r3, r3
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ffda 	bl	8007118 <mqtt_ringbuf_len>
 8007164:	4603      	mov	r3, r0
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	885b      	ldrh	r3, [r3, #2]
 800716c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007170:	429a      	cmp	r2, r3
 8007172:	da04      	bge.n	800717e <mqtt_output_send+0x2e>
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff ffcf 	bl	8007118 <mqtt_ringbuf_len>
 800717a:	4603      	mov	r3, r0
 800717c:	e004      	b.n	8007188 <mqtt_output_send+0x38>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	885b      	ldrh	r3, [r3, #2]
 8007182:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007186:	b29b      	uxth	r3, r3
 8007188:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8007190:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <mqtt_output_send+0x54>
 8007198:	4b44      	ldr	r3, [pc, #272]	@ (80072ac <mqtt_output_send+0x15c>)
 800719a:	22f0      	movs	r2, #240	@ 0xf0
 800719c:	4944      	ldr	r1, [pc, #272]	@ (80072b0 <mqtt_output_send+0x160>)
 800719e:	4845      	ldr	r0, [pc, #276]	@ (80072b4 <mqtt_output_send+0x164>)
 80071a0:	f00d ff30 	bl	8015004 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80071a4:	89bb      	ldrh	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d07c      	beq.n	80072a4 <mqtt_output_send+0x154>
 80071aa:	897b      	ldrh	r3, [r7, #10]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d079      	beq.n	80072a4 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80071b0:	89ba      	ldrh	r2, [r7, #12]
 80071b2:	897b      	ldrh	r3, [r7, #10]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d90d      	bls.n	80071d4 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80071b8:	897b      	ldrh	r3, [r7, #10]
 80071ba:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ffab 	bl	8007118 <mqtt_ringbuf_len>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461a      	mov	r2, r3
 80071c6:	897b      	ldrh	r3, [r7, #10]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf34      	ite	cc
 80071cc:	2301      	movcc	r3, #1
 80071ce:	2300      	movcs	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff63 	bl	80070a0 <mqtt_ringbuf_get_ptr>
 80071da:	4601      	mov	r1, r0
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <mqtt_output_send+0x96>
 80071e2:	2303      	movs	r3, #3
 80071e4:	e000      	b.n	80071e8 <mqtt_output_send+0x98>
 80071e6:	2301      	movs	r3, #1
 80071e8:	89ba      	ldrh	r2, [r7, #12]
 80071ea:	6838      	ldr	r0, [r7, #0]
 80071ec:	f006 f950 	bl	800d490 <tcp_write>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80071f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d146      	bne.n	800728a <mqtt_output_send+0x13a>
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d043      	beq.n	800728a <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007202:	89bb      	ldrh	r3, [r7, #12]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ff5a 	bl	80070c0 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8007212:	461c      	mov	r4, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff ff7f 	bl	8007118 <mqtt_ringbuf_len>
 800721a:	4603      	mov	r3, r0
 800721c:	461a      	mov	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	885b      	ldrh	r3, [r3, #2]
 8007222:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007226:	429a      	cmp	r2, r3
 8007228:	da04      	bge.n	8007234 <mqtt_output_send+0xe4>
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ff74 	bl	8007118 <mqtt_ringbuf_len>
 8007230:	4603      	mov	r3, r0
 8007232:	e003      	b.n	800723c <mqtt_output_send+0xec>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	885b      	ldrh	r3, [r3, #2]
 8007238:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800723c:	42a3      	cmp	r3, r4
 800723e:	dd03      	ble.n	8007248 <mqtt_output_send+0xf8>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8007246:	e014      	b.n	8007272 <mqtt_output_send+0x122>
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff65 	bl	8007118 <mqtt_ringbuf_len>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800725a:	429a      	cmp	r2, r3
 800725c:	da04      	bge.n	8007268 <mqtt_output_send+0x118>
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff ff5a 	bl	8007118 <mqtt_ringbuf_len>
 8007264:	4603      	mov	r3, r0
 8007266:	e004      	b.n	8007272 <mqtt_output_send+0x122>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007270:	b29b      	uxth	r3, r3
 8007272:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ff13 	bl	80070a0 <mqtt_ringbuf_get_ptr>
 800727a:	4601      	mov	r1, r0
 800727c:	89ba      	ldrh	r2, [r7, #12]
 800727e:	2301      	movs	r3, #1
 8007280:	6838      	ldr	r0, [r7, #0]
 8007282:	f006 f905 	bl	800d490 <tcp_write>
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800728a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8007292:	89bb      	ldrh	r3, [r7, #12]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ff12 	bl	80070c0 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 800729c:	6838      	ldr	r0, [r7, #0]
 800729e:	f006 fee1 	bl	800e064 <tcp_output>
 80072a2:	e000      	b.n	80072a6 <mqtt_output_send+0x156>
    return;
 80072a4:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd90      	pop	{r4, r7, pc}
 80072ac:	080188e4 	.word	0x080188e4
 80072b0:	08018984 	.word	0x08018984
 80072b4:	0801895c 	.word	0x0801895c

080072b8 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <mqtt_create_request+0x28>
 80072d2:	4b19      	ldr	r3, [pc, #100]	@ (8007338 <mqtt_create_request+0x80>)
 80072d4:	f240 1223 	movw	r2, #291	@ 0x123
 80072d8:	4918      	ldr	r1, [pc, #96]	@ (800733c <mqtt_create_request+0x84>)
 80072da:	4819      	ldr	r0, [pc, #100]	@ (8007340 <mqtt_create_request+0x88>)
 80072dc:	f00d fe92 	bl	8015004 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80072e0:	2300      	movs	r3, #0
 80072e2:	74fb      	strb	r3, [r7, #19]
 80072e4:	e01f      	b.n	8007326 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80072e6:	7cfb      	ldrb	r3, [r7, #19]
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	7cfb      	ldrb	r3, [r7, #19]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	68f9      	ldr	r1, [r7, #12]
 80072f6:	440b      	add	r3, r1
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d111      	bne.n	8007320 <mqtt_create_request+0x68>
      r = &r_objs[n];
 80072fc:	7cfb      	ldrb	r3, [r7, #19]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	819a      	strh	r2, [r3, #12]
      break;
 800731e:	e006      	b.n	800732e <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8007320:	7cfb      	ldrb	r3, [r7, #19]
 8007322:	3301      	adds	r3, #1
 8007324:	74fb      	strb	r3, [r7, #19]
 8007326:	7cfb      	ldrb	r3, [r7, #19]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	d8db      	bhi.n	80072e6 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800732e:	697b      	ldr	r3, [r7, #20]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	080188e4 	.word	0x080188e4
 800733c:	080189a4 	.word	0x080189a4
 8007340:	0801895c 	.word	0x0801895c

08007344 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <mqtt_append_request+0x26>
 800735c:	4b1b      	ldr	r3, [pc, #108]	@ (80073cc <mqtt_append_request+0x88>)
 800735e:	f240 123f 	movw	r2, #319	@ 0x13f
 8007362:	491b      	ldr	r1, [pc, #108]	@ (80073d0 <mqtt_append_request+0x8c>)
 8007364:	481b      	ldr	r0, [pc, #108]	@ (80073d4 <mqtt_append_request+0x90>)
 8007366:	f00d fe4d 	bl	8015004 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e00a      	b.n	8007388 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	89da      	ldrh	r2, [r3, #14]
 8007376:	8a7b      	ldrh	r3, [r7, #18]
 8007378:	4413      	add	r3, r2
 800737a:	b29b      	uxth	r3, r3
 800737c:	827b      	strh	r3, [r7, #18]
    head = iter;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f1      	bne.n	8007372 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800738e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007392:	2b1e      	cmp	r3, #30
 8007394:	dd06      	ble.n	80073a4 <mqtt_append_request+0x60>
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <mqtt_append_request+0x88>)
 8007398:	f240 1247 	movw	r2, #327	@ 0x147
 800739c:	490e      	ldr	r1, [pc, #56]	@ (80073d8 <mqtt_append_request+0x94>)
 800739e:	480d      	ldr	r0, [pc, #52]	@ (80073d4 <mqtt_append_request+0x90>)
 80073a0:	f00d fe30 	bl	8015004 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 80073a4:	8a7b      	ldrh	r3, [r7, #18]
 80073a6:	f1c3 031e 	rsb	r3, r3, #30
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <mqtt_append_request+0x7a>
    *tail = r;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 80073bc:	e002      	b.n	80073c4 <mqtt_append_request+0x80>
    head->next = r;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	601a      	str	r2, [r3, #0]
}
 80073c4:	bf00      	nop
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	080188e4 	.word	0x080188e4
 80073d0:	080189c8 	.word	0x080189c8
 80073d4:	0801895c 	.word	0x0801895c
 80073d8:	080189ec 	.word	0x080189ec

080073dc <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <mqtt_delete_request+0x14>
    r->next = r;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
  }
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff fe27 	bl	8007060 <mqtt_ringbuf_put>
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	460b      	mov	r3, r1
 8007424:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8007426:	887b      	ldrh	r3, [r7, #2]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	b2db      	uxtb	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fe15 	bl	8007060 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8007436:	887b      	ldrh	r3, [r7, #2]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fe0f 	bl	8007060 <mqtt_ringbuf_put>
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b086      	sub	sp, #24
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	4613      	mov	r3, r2
 8007456:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8007458:	2300      	movs	r3, #0
 800745a:	82fb      	strh	r3, [r7, #22]
 800745c:	e00a      	b.n	8007474 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800745e:	8afb      	ldrh	r3, [r7, #22]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	4413      	add	r3, r2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff fdf9 	bl	8007060 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800746e:	8afb      	ldrh	r3, [r7, #22]
 8007470:	3301      	adds	r3, #1
 8007472:	82fb      	strh	r3, [r7, #22]
 8007474:	8afa      	ldrh	r2, [r7, #22]
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	429a      	cmp	r2, r3
 800747a:	d3f0      	bcc.n	800745e <mqtt_output_append_buf+0x14>
  }
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	4613      	mov	r3, r2
 8007492:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f7ff fdde 	bl	8007060 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fdd8 	bl	8007060 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80074b0:	2300      	movs	r3, #0
 80074b2:	82fb      	strh	r3, [r7, #22]
 80074b4:	e00a      	b.n	80074cc <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 80074b6:	8afb      	ldrh	r3, [r7, #22]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7ff fdcd 	bl	8007060 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	3301      	adds	r3, #1
 80074ca:	82fb      	strh	r3, [r7, #22]
 80074cc:	8afa      	ldrh	r2, [r7, #22]
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d3f0      	bcc.n	80074b6 <mqtt_output_append_string+0x30>
  }
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	461a      	mov	r2, r3
 80074ec:	4603      	mov	r3, r0
 80074ee:	70fb      	strb	r3, [r7, #3]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70bb      	strb	r3, [r7, #2]
 80074f4:	4613      	mov	r3, r2
 80074f6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 80074f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	b25a      	sxtb	r2, r3
 8007500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	b25b      	sxtb	r3, r3
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	b25b      	sxtb	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b25a      	sxtb	r2, r3
 8007512:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	b25b      	sxtb	r3, r3
 800751a:	f003 0306 	and.w	r3, r3, #6
 800751e:	b25b      	sxtb	r3, r3
 8007520:	4313      	orrs	r3, r2
 8007522:	b25a      	sxtb	r2, r3
 8007524:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	b25b      	sxtb	r3, r3
 800752e:	4313      	orrs	r3, r2
 8007530:	b25b      	sxtb	r3, r3
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ff60 	bl	80073fc <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800753c:	8abb      	ldrh	r3, [r7, #20]
 800753e:	b25b      	sxtb	r3, r3
 8007540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007544:	b25b      	sxtb	r3, r3
 8007546:	8aba      	ldrh	r2, [r7, #20]
 8007548:	2a7f      	cmp	r2, #127	@ 0x7f
 800754a:	d902      	bls.n	8007552 <mqtt_output_append_fixed_header+0x74>
 800754c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007550:	e000      	b.n	8007554 <mqtt_output_append_fixed_header+0x76>
 8007552:	2200      	movs	r2, #0
 8007554:	4313      	orrs	r3, r2
 8007556:	b25b      	sxtb	r3, r3
 8007558:	b2db      	uxtb	r3, r3
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff ff4d 	bl	80073fc <mqtt_output_append_u8>
    r_length >>= 7;
 8007562:	8abb      	ldrh	r3, [r7, #20]
 8007564:	09db      	lsrs	r3, r3, #7
 8007566:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8007568:	8abb      	ldrh	r3, [r7, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <mqtt_output_append_fixed_header+0x5e>
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8007578:	b590      	push	{r4, r7, lr}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8007584:	887b      	ldrh	r3, [r7, #2]
 8007586:	3301      	adds	r3, #1
 8007588:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <mqtt_output_check_space+0x26>
 8007590:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <mqtt_output_check_space+0x58>)
 8007592:	f240 2207 	movw	r2, #519	@ 0x207
 8007596:	490f      	ldr	r1, [pc, #60]	@ (80075d4 <mqtt_output_check_space+0x5c>)
 8007598:	480f      	ldr	r0, [pc, #60]	@ (80075d8 <mqtt_output_check_space+0x60>)
 800759a:	f00d fd33 	bl	8015004 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800759e:	89fb      	ldrh	r3, [r7, #14]
 80075a0:	3301      	adds	r3, #1
 80075a2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 80075a4:	887b      	ldrh	r3, [r7, #2]
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f6      	bne.n	800759e <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 80075b0:	89fc      	ldrh	r4, [r7, #14]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff fdb0 	bl	8007118 <mqtt_ringbuf_len>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80075be:	429c      	cmp	r4, r3
 80075c0:	bfd4      	ite	le
 80075c2:	2301      	movle	r3, #1
 80075c4:	2300      	movgt	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}
 80075d0:	080188e4 	.word	0x080188e4
 80075d4:	08018ab4 	.word	0x08018ab4
 80075d8:	0801895c 	.word	0x0801895c

080075dc <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08c      	sub	sp, #48	@ 0x30
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <mqtt_publish+0x22>
 80075f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007768 <mqtt_publish+0x18c>)
 80075f2:	f240 4254 	movw	r2, #1108	@ 0x454
 80075f6:	495d      	ldr	r1, [pc, #372]	@ (800776c <mqtt_publish+0x190>)
 80075f8:	485d      	ldr	r0, [pc, #372]	@ (8007770 <mqtt_publish+0x194>)
 80075fa:	f00d fd03 	bl	8015004 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <mqtt_publish+0x36>
 8007604:	4b58      	ldr	r3, [pc, #352]	@ (8007768 <mqtt_publish+0x18c>)
 8007606:	f240 4255 	movw	r2, #1109	@ 0x455
 800760a:	495a      	ldr	r1, [pc, #360]	@ (8007774 <mqtt_publish+0x198>)
 800760c:	4858      	ldr	r0, [pc, #352]	@ (8007770 <mqtt_publish+0x194>)
 800760e:	f00d fcf9 	bl	8015004 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	7a9b      	ldrb	r3, [r3, #10]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <mqtt_publish+0x52>
 800761a:	4b53      	ldr	r3, [pc, #332]	@ (8007768 <mqtt_publish+0x18c>)
 800761c:	f240 4256 	movw	r2, #1110	@ 0x456
 8007620:	4955      	ldr	r1, [pc, #340]	@ (8007778 <mqtt_publish+0x19c>)
 8007622:	4853      	ldr	r0, [pc, #332]	@ (8007770 <mqtt_publish+0x194>)
 8007624:	f00d fcee 	bl	8015004 <iprintf>
 8007628:	f06f 030a 	mvn.w	r3, #10
 800762c:	e097      	b.n	800775e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 800762e:	68b8      	ldr	r0, [r7, #8]
 8007630:	f7f8 fe56 	bl	80002e0 <strlen>
 8007634:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800763c:	4293      	cmp	r3, r2
 800763e:	d909      	bls.n	8007654 <mqtt_publish+0x78>
 8007640:	4b49      	ldr	r3, [pc, #292]	@ (8007768 <mqtt_publish+0x18c>)
 8007642:	f240 4259 	movw	r2, #1113	@ 0x459
 8007646:	494d      	ldr	r1, [pc, #308]	@ (800777c <mqtt_publish+0x1a0>)
 8007648:	4849      	ldr	r0, [pc, #292]	@ (8007770 <mqtt_publish+0x194>)
 800764a:	f00d fcdb 	bl	8015004 <iprintf>
 800764e:	f06f 030f 	mvn.w	r3, #15
 8007652:	e084      	b.n	800775e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8007658:	8b7b      	ldrh	r3, [r7, #26]
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	887b      	ldrh	r3, [r7, #2]
 800765e:	4413      	add	r3, r2
 8007660:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8007662:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007666:	2b00      	cmp	r3, #0
 8007668:	d008      	beq.n	800767c <mqtt_publish+0xa0>
    total_len += 2;
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	3302      	adds	r3, #2
 800766e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f7ff fcd9 	bl	8007028 <msg_generate_packet_id>
 8007676:	4603      	mov	r3, r0
 8007678:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800767a:	e001      	b.n	8007680 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007686:	d309      	bcc.n	800769c <mqtt_publish+0xc0>
 8007688:	4b37      	ldr	r3, [pc, #220]	@ (8007768 <mqtt_publish+0x18c>)
 800768a:	f240 4265 	movw	r2, #1125	@ 0x465
 800768e:	493c      	ldr	r1, [pc, #240]	@ (8007780 <mqtt_publish+0x1a4>)
 8007690:	4837      	ldr	r0, [pc, #220]	@ (8007770 <mqtt_publish+0x194>)
 8007692:	f00d fcb7 	bl	8015004 <iprintf>
 8007696:	f06f 030f 	mvn.w	r3, #15
 800769a:	e060      	b.n	800775e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f103 001c 	add.w	r0, r3, #28
 80076a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80076a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	2104      	movs	r1, #4
 80076b0:	f7ff fe02 	bl	80072b8 <mqtt_create_request>
 80076b4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <mqtt_publish+0xe6>
    return ERR_MEM;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	e04d      	b.n	800775e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	33ec      	adds	r3, #236	@ 0xec
 80076c6:	8b3a      	ldrh	r2, [r7, #24]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff ff54 	bl	8007578 <mqtt_output_check_space>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d105      	bne.n	80076e2 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	f7ff fe80 	bl	80073dc <mqtt_delete_request>
    return ERR_MEM;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	e03d      	b.n	800775e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80076e8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80076ec:	8b3b      	ldrh	r3, [r7, #24]
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	2200      	movs	r2, #0
 80076fa:	2103      	movs	r1, #3
 80076fc:	f7ff feef 	bl	80074de <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	33ec      	adds	r3, #236	@ 0xec
 8007704:	8b7a      	ldrh	r2, [r7, #26]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff febc 	bl	8007486 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800770e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007712:	2b00      	cmp	r3, #0
 8007714:	d006      	beq.n	8007724 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	33ec      	adds	r3, #236	@ 0xec
 800771a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fe7b 	bl	800741a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <mqtt_publish+0x162>
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	33ec      	adds	r3, #236	@ 0xec
 8007734:	887a      	ldrh	r2, [r7, #2]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fe86 	bl	800744a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3318      	adds	r3, #24
 8007742:	6979      	ldr	r1, [r7, #20]
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fdfd 	bl	8007344 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7ff fcfa 	bl	8007150 <mqtt_output_send>
  return ERR_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3728      	adds	r7, #40	@ 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	080188e4 	.word	0x080188e4
 800776c:	08018bf0 	.word	0x08018bf0
 8007770:	0801895c 	.word	0x0801895c
 8007774:	08018c10 	.word	0x08018c10
 8007778:	08018c2c 	.word	0x08018c2c
 800777c:	08018c4c 	.word	0x08018c4c
 8007780:	08018c70 	.word	0x08018c70

08007784 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8007788:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800778c:	2001      	movs	r0, #1
 800778e:	f000 fbe1 	bl	8007f54 <mem_calloc>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}

08007798 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80077a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b21a      	sxth	r2, r3
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	b21b      	sxth	r3, r3
 80077b2:	4313      	orrs	r3, r2
 80077b4:	b21b      	sxth	r3, r3
 80077b6:	b29b      	uxth	r3, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	061a      	lsls	r2, r3, #24
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	021b      	lsls	r3, r3, #8
 80077d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	0e1b      	lsrs	r3, r3, #24
 80077e8:	4313      	orrs	r3, r2
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007800:	f000 f8d4 	bl	80079ac <mem_init>
  memp_init();
 8007804:	f000 fbfe 	bl	8008004 <memp_init>
  pbuf_init();
  netif_init();
 8007808:	f000 fcfc 	bl	8008204 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800780c:	f007 fce8 	bl	800f1e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007810:	f001 fdee 	bl	80093f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007814:	f007 fc5a 	bl	800f0cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800782a:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <ptr_to_mem+0x20>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	4413      	add	r3, r2
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	200050d0 	.word	0x200050d0

08007844 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800784c:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <mem_to_ptr+0x20>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	b29b      	uxth	r3, r3
}
 8007856:	4618      	mov	r0, r3
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	200050d0 	.word	0x200050d0

08007868 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007870:	4b45      	ldr	r3, [pc, #276]	@ (8007988 <plug_holes+0x120>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d206      	bcs.n	8007888 <plug_holes+0x20>
 800787a:	4b44      	ldr	r3, [pc, #272]	@ (800798c <plug_holes+0x124>)
 800787c:	f240 12df 	movw	r2, #479	@ 0x1df
 8007880:	4943      	ldr	r1, [pc, #268]	@ (8007990 <plug_holes+0x128>)
 8007882:	4844      	ldr	r0, [pc, #272]	@ (8007994 <plug_holes+0x12c>)
 8007884:	f00d fbbe 	bl	8015004 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007888:	4b43      	ldr	r3, [pc, #268]	@ (8007998 <plug_holes+0x130>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	429a      	cmp	r2, r3
 8007890:	d306      	bcc.n	80078a0 <plug_holes+0x38>
 8007892:	4b3e      	ldr	r3, [pc, #248]	@ (800798c <plug_holes+0x124>)
 8007894:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007898:	4940      	ldr	r1, [pc, #256]	@ (800799c <plug_holes+0x134>)
 800789a:	483e      	ldr	r0, [pc, #248]	@ (8007994 <plug_holes+0x12c>)
 800789c:	f00d fbb2 	bl	8015004 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	791b      	ldrb	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <plug_holes+0x4e>
 80078a8:	4b38      	ldr	r3, [pc, #224]	@ (800798c <plug_holes+0x124>)
 80078aa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80078ae:	493c      	ldr	r1, [pc, #240]	@ (80079a0 <plug_holes+0x138>)
 80078b0:	4838      	ldr	r0, [pc, #224]	@ (8007994 <plug_holes+0x12c>)
 80078b2:	f00d fba7 	bl	8015004 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078be:	d906      	bls.n	80078ce <plug_holes+0x66>
 80078c0:	4b32      	ldr	r3, [pc, #200]	@ (800798c <plug_holes+0x124>)
 80078c2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80078c6:	4937      	ldr	r1, [pc, #220]	@ (80079a4 <plug_holes+0x13c>)
 80078c8:	4832      	ldr	r0, [pc, #200]	@ (8007994 <plug_holes+0x12c>)
 80078ca:	f00d fb9b 	bl	8015004 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	881b      	ldrh	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff ffa4 	bl	8007820 <ptr_to_mem>
 80078d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d024      	beq.n	800792c <plug_holes+0xc4>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	791b      	ldrb	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d120      	bne.n	800792c <plug_holes+0xc4>
 80078ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007998 <plug_holes+0x130>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d01b      	beq.n	800792c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80078f4:	4b2c      	ldr	r3, [pc, #176]	@ (80079a8 <plug_holes+0x140>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d102      	bne.n	8007904 <plug_holes+0x9c>
      lfree = mem;
 80078fe:	4a2a      	ldr	r2, [pc, #168]	@ (80079a8 <plug_holes+0x140>)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	881a      	ldrh	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007914:	d00a      	beq.n	800792c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff80 	bl	8007820 <ptr_to_mem>
 8007920:	4604      	mov	r4, r0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff8e 	bl	8007844 <mem_to_ptr>
 8007928:	4603      	mov	r3, r0
 800792a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	885b      	ldrh	r3, [r3, #2]
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff ff75 	bl	8007820 <ptr_to_mem>
 8007936:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d01f      	beq.n	8007980 <plug_holes+0x118>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	791b      	ldrb	r3, [r3, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11b      	bne.n	8007980 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007948:	4b17      	ldr	r3, [pc, #92]	@ (80079a8 <plug_holes+0x140>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	429a      	cmp	r2, r3
 8007950:	d102      	bne.n	8007958 <plug_holes+0xf0>
      lfree = pmem;
 8007952:	4a15      	ldr	r2, [pc, #84]	@ (80079a8 <plug_holes+0x140>)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007968:	d00a      	beq.n	8007980 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff ff56 	bl	8007820 <ptr_to_mem>
 8007974:	4604      	mov	r4, r0
 8007976:	68b8      	ldr	r0, [r7, #8]
 8007978:	f7ff ff64 	bl	8007844 <mem_to_ptr>
 800797c:	4603      	mov	r3, r0
 800797e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}
 8007988:	200050d0 	.word	0x200050d0
 800798c:	08019094 	.word	0x08019094
 8007990:	080190c4 	.word	0x080190c4
 8007994:	080190dc 	.word	0x080190dc
 8007998:	200050d4 	.word	0x200050d4
 800799c:	08019104 	.word	0x08019104
 80079a0:	08019120 	.word	0x08019120
 80079a4:	0801913c 	.word	0x0801913c
 80079a8:	200050d8 	.word	0x200050d8

080079ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079b2:	4b16      	ldr	r3, [pc, #88]	@ (8007a0c <mem_init+0x60>)
 80079b4:	4a16      	ldr	r2, [pc, #88]	@ (8007a10 <mem_init+0x64>)
 80079b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80079b8:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <mem_init+0x60>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80079c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80079d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80079d6:	f7ff ff23 	bl	8007820 <ptr_to_mem>
 80079da:	4603      	mov	r3, r0
 80079dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007a14 <mem_init+0x68>)
 80079de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80079e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <mem_init+0x68>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a14 <mem_init+0x68>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80079f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80079f2:	4b08      	ldr	r3, [pc, #32]	@ (8007a14 <mem_init+0x68>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80079fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80079fc:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <mem_init+0x60>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a05      	ldr	r2, [pc, #20]	@ (8007a18 <mem_init+0x6c>)
 8007a02:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	200050d0 	.word	0x200050d0
 8007a10:	20048000 	.word	0x20048000
 8007a14:	200050d4 	.word	0x200050d4
 8007a18:	200050d8 	.word	0x200050d8

08007a1c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff ff0d 	bl	8007844 <mem_to_ptr>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fef4 	bl	8007820 <ptr_to_mem>
 8007a38:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff feee 	bl	8007820 <ptr_to_mem>
 8007a44:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a4e:	d818      	bhi.n	8007a82 <mem_link_valid+0x66>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	885b      	ldrh	r3, [r3, #2]
 8007a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a58:	d813      	bhi.n	8007a82 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007a5e:	8afa      	ldrh	r2, [r7, #22]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d004      	beq.n	8007a6e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	8afa      	ldrh	r2, [r7, #22]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d109      	bne.n	8007a82 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007a6e:	4b08      	ldr	r3, [pc, #32]	@ (8007a90 <mem_link_valid+0x74>)
 8007a70:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d006      	beq.n	8007a86 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	8afa      	ldrh	r2, [r7, #22]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d001      	beq.n	8007a86 <mem_link_valid+0x6a>
    return 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e000      	b.n	8007a88 <mem_link_valid+0x6c>
  }
  return 1;
 8007a86:	2301      	movs	r3, #1
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	200050d4 	.word	0x200050d4

08007a94 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04c      	beq.n	8007b3c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d007      	beq.n	8007abc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007aac:	4b25      	ldr	r3, [pc, #148]	@ (8007b44 <mem_free+0xb0>)
 8007aae:	f240 2273 	movw	r2, #627	@ 0x273
 8007ab2:	4925      	ldr	r1, [pc, #148]	@ (8007b48 <mem_free+0xb4>)
 8007ab4:	4825      	ldr	r0, [pc, #148]	@ (8007b4c <mem_free+0xb8>)
 8007ab6:	f00d faa5 	bl	8015004 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007aba:	e040      	b.n	8007b3e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3b08      	subs	r3, #8
 8007ac0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007ac2:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <mem_free+0xbc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d306      	bcc.n	8007ada <mem_free+0x46>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f103 020c 	add.w	r2, r3, #12
 8007ad2:	4b20      	ldr	r3, [pc, #128]	@ (8007b54 <mem_free+0xc0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d907      	bls.n	8007aea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007ada:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <mem_free+0xb0>)
 8007adc:	f240 227f 	movw	r2, #639	@ 0x27f
 8007ae0:	491d      	ldr	r1, [pc, #116]	@ (8007b58 <mem_free+0xc4>)
 8007ae2:	481a      	ldr	r0, [pc, #104]	@ (8007b4c <mem_free+0xb8>)
 8007ae4:	f00d fa8e 	bl	8015004 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007ae8:	e029      	b.n	8007b3e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d107      	bne.n	8007b02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007af2:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <mem_free+0xb0>)
 8007af4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007af8:	4918      	ldr	r1, [pc, #96]	@ (8007b5c <mem_free+0xc8>)
 8007afa:	4814      	ldr	r0, [pc, #80]	@ (8007b4c <mem_free+0xb8>)
 8007afc:	f00d fa82 	bl	8015004 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007b00:	e01d      	b.n	8007b3e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ff8a 	bl	8007a1c <mem_link_valid>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <mem_free+0xb0>)
 8007b10:	f240 2295 	movw	r2, #661	@ 0x295
 8007b14:	4912      	ldr	r1, [pc, #72]	@ (8007b60 <mem_free+0xcc>)
 8007b16:	480d      	ldr	r0, [pc, #52]	@ (8007b4c <mem_free+0xb8>)
 8007b18:	f00d fa74 	bl	8015004 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007b1c:	e00f      	b.n	8007b3e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007b24:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <mem_free+0xd0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d202      	bcs.n	8007b34 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8007b64 <mem_free+0xd0>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fe97 	bl	8007868 <plug_holes>
 8007b3a:	e000      	b.n	8007b3e <mem_free+0xaa>
    return;
 8007b3c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	08019094 	.word	0x08019094
 8007b48:	08019168 	.word	0x08019168
 8007b4c:	080190dc 	.word	0x080190dc
 8007b50:	200050d0 	.word	0x200050d0
 8007b54:	200050d4 	.word	0x200050d4
 8007b58:	0801918c 	.word	0x0801918c
 8007b5c:	080191a8 	.word	0x080191a8
 8007b60:	080191d0 	.word	0x080191d0
 8007b64:	200050d8 	.word	0x200050d8

08007b68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	3303      	adds	r3, #3
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007b80:	8bfb      	ldrh	r3, [r7, #30]
 8007b82:	2b0b      	cmp	r3, #11
 8007b84:	d801      	bhi.n	8007b8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007b86:	230c      	movs	r3, #12
 8007b88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007b8a:	8bfb      	ldrh	r3, [r7, #30]
 8007b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b90:	d803      	bhi.n	8007b9a <mem_trim+0x32>
 8007b92:	8bfa      	ldrh	r2, [r7, #30]
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d201      	bcs.n	8007b9e <mem_trim+0x36>
    return NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e0cc      	b.n	8007d38 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007b9e:	4b68      	ldr	r3, [pc, #416]	@ (8007d40 <mem_trim+0x1d8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d304      	bcc.n	8007bb2 <mem_trim+0x4a>
 8007ba8:	4b66      	ldr	r3, [pc, #408]	@ (8007d44 <mem_trim+0x1dc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d306      	bcc.n	8007bc0 <mem_trim+0x58>
 8007bb2:	4b65      	ldr	r3, [pc, #404]	@ (8007d48 <mem_trim+0x1e0>)
 8007bb4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007bb8:	4964      	ldr	r1, [pc, #400]	@ (8007d4c <mem_trim+0x1e4>)
 8007bba:	4865      	ldr	r0, [pc, #404]	@ (8007d50 <mem_trim+0x1e8>)
 8007bbc:	f00d fa22 	bl	8015004 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8007d40 <mem_trim+0x1d8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d304      	bcc.n	8007bd4 <mem_trim+0x6c>
 8007bca:	4b5e      	ldr	r3, [pc, #376]	@ (8007d44 <mem_trim+0x1dc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d301      	bcc.n	8007bd8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	e0af      	b.n	8007d38 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3b08      	subs	r3, #8
 8007bdc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007bde:	69b8      	ldr	r0, [r7, #24]
 8007be0:	f7ff fe30 	bl	8007844 <mem_to_ptr>
 8007be4:	4603      	mov	r3, r0
 8007be6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	881a      	ldrh	r2, [r3, #0]
 8007bec:	8afb      	ldrh	r3, [r7, #22]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b08      	subs	r3, #8
 8007bf4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007bf6:	8bfa      	ldrh	r2, [r7, #30]
 8007bf8:	8abb      	ldrh	r3, [r7, #20]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d906      	bls.n	8007c0c <mem_trim+0xa4>
 8007bfe:	4b52      	ldr	r3, [pc, #328]	@ (8007d48 <mem_trim+0x1e0>)
 8007c00:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007c04:	4953      	ldr	r1, [pc, #332]	@ (8007d54 <mem_trim+0x1ec>)
 8007c06:	4852      	ldr	r0, [pc, #328]	@ (8007d50 <mem_trim+0x1e8>)
 8007c08:	f00d f9fc 	bl	8015004 <iprintf>
  if (newsize > size) {
 8007c0c:	8bfa      	ldrh	r2, [r7, #30]
 8007c0e:	8abb      	ldrh	r3, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d901      	bls.n	8007c18 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e08f      	b.n	8007d38 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007c18:	8bfa      	ldrh	r2, [r7, #30]
 8007c1a:	8abb      	ldrh	r3, [r7, #20]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d101      	bne.n	8007c24 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	e089      	b.n	8007d38 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff fdf9 	bl	8007820 <ptr_to_mem>
 8007c2e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	791b      	ldrb	r3, [r3, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d13f      	bne.n	8007cb8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c40:	d106      	bne.n	8007c50 <mem_trim+0xe8>
 8007c42:	4b41      	ldr	r3, [pc, #260]	@ (8007d48 <mem_trim+0x1e0>)
 8007c44:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007c48:	4943      	ldr	r1, [pc, #268]	@ (8007d58 <mem_trim+0x1f0>)
 8007c4a:	4841      	ldr	r0, [pc, #260]	@ (8007d50 <mem_trim+0x1e8>)
 8007c4c:	f00d f9da 	bl	8015004 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007c56:	8afa      	ldrh	r2, [r7, #22]
 8007c58:	8bfb      	ldrh	r3, [r7, #30]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3308      	adds	r3, #8
 8007c60:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007c62:	4b3e      	ldr	r3, [pc, #248]	@ (8007d5c <mem_trim+0x1f4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d106      	bne.n	8007c7a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007c6c:	89fb      	ldrh	r3, [r7, #14]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff fdd6 	bl	8007820 <ptr_to_mem>
 8007c74:	4603      	mov	r3, r0
 8007c76:	4a39      	ldr	r2, [pc, #228]	@ (8007d5c <mem_trim+0x1f4>)
 8007c78:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007c7a:	89fb      	ldrh	r3, [r7, #14]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff fdcf 	bl	8007820 <ptr_to_mem>
 8007c82:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2200      	movs	r2, #0
 8007c88:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	89ba      	ldrh	r2, [r7, #12]
 8007c8e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	8afa      	ldrh	r2, [r7, #22]
 8007c94:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	89fa      	ldrh	r2, [r7, #14]
 8007c9a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ca4:	d047      	beq.n	8007d36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fdb8 	bl	8007820 <ptr_to_mem>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	89fb      	ldrh	r3, [r7, #14]
 8007cb4:	8053      	strh	r3, [r2, #2]
 8007cb6:	e03e      	b.n	8007d36 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007cb8:	8bfb      	ldrh	r3, [r7, #30]
 8007cba:	f103 0214 	add.w	r2, r3, #20
 8007cbe:	8abb      	ldrh	r3, [r7, #20]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d838      	bhi.n	8007d36 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007cc4:	8afa      	ldrh	r2, [r7, #22]
 8007cc6:	8bfb      	ldrh	r3, [r7, #30]
 8007cc8:	4413      	add	r3, r2
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3308      	adds	r3, #8
 8007cce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cd8:	d106      	bne.n	8007ce8 <mem_trim+0x180>
 8007cda:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <mem_trim+0x1e0>)
 8007cdc:	f240 3216 	movw	r2, #790	@ 0x316
 8007ce0:	491d      	ldr	r1, [pc, #116]	@ (8007d58 <mem_trim+0x1f0>)
 8007ce2:	481b      	ldr	r0, [pc, #108]	@ (8007d50 <mem_trim+0x1e8>)
 8007ce4:	f00d f98e 	bl	8015004 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007ce8:	89fb      	ldrh	r3, [r7, #14]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fd98 	bl	8007820 <ptr_to_mem>
 8007cf0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d5c <mem_trim+0x1f4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d202      	bcs.n	8007d02 <mem_trim+0x19a>
      lfree = mem2;
 8007cfc:	4a17      	ldr	r2, [pc, #92]	@ (8007d5c <mem_trim+0x1f4>)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2200      	movs	r2, #0
 8007d06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	8afa      	ldrh	r2, [r7, #22]
 8007d14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	89fa      	ldrh	r2, [r7, #14]
 8007d1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d24:	d007      	beq.n	8007d36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fd78 	bl	8007820 <ptr_to_mem>
 8007d30:	4602      	mov	r2, r0
 8007d32:	89fb      	ldrh	r3, [r7, #14]
 8007d34:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007d36:	687b      	ldr	r3, [r7, #4]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3720      	adds	r7, #32
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200050d0 	.word	0x200050d0
 8007d44:	200050d4 	.word	0x200050d4
 8007d48:	08019094 	.word	0x08019094
 8007d4c:	08019204 	.word	0x08019204
 8007d50:	080190dc 	.word	0x080190dc
 8007d54:	0801921c 	.word	0x0801921c
 8007d58:	0801923c 	.word	0x0801923c
 8007d5c:	200050d8 	.word	0x200050d8

08007d60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <mem_malloc+0x14>
    return NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	e0d9      	b.n	8007f28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007d74:	88fb      	ldrh	r3, [r7, #6]
 8007d76:	3303      	adds	r3, #3
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007d80:	8bbb      	ldrh	r3, [r7, #28]
 8007d82:	2b0b      	cmp	r3, #11
 8007d84:	d801      	bhi.n	8007d8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007d86:	230c      	movs	r3, #12
 8007d88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d8a:	8bbb      	ldrh	r3, [r7, #28]
 8007d8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d90:	d803      	bhi.n	8007d9a <mem_malloc+0x3a>
 8007d92:	8bba      	ldrh	r2, [r7, #28]
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d201      	bcs.n	8007d9e <mem_malloc+0x3e>
    return NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e0c4      	b.n	8007f28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d9e:	4b64      	ldr	r3, [pc, #400]	@ (8007f30 <mem_malloc+0x1d0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fd4e 	bl	8007844 <mem_to_ptr>
 8007da8:	4603      	mov	r3, r0
 8007daa:	83fb      	strh	r3, [r7, #30]
 8007dac:	e0b4      	b.n	8007f18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007dae:	8bfb      	ldrh	r3, [r7, #30]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fd35 	bl	8007820 <ptr_to_mem>
 8007db6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	791b      	ldrb	r3, [r3, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 80a4 	bne.w	8007f0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	8bfb      	ldrh	r3, [r7, #30]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	f1a3 0208 	sub.w	r2, r3, #8
 8007dd0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	f0c0 8099 	bcc.w	8007f0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	8bfb      	ldrh	r3, [r7, #30]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	f1a3 0208 	sub.w	r2, r3, #8
 8007de6:	8bbb      	ldrh	r3, [r7, #28]
 8007de8:	3314      	adds	r3, #20
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d333      	bcc.n	8007e56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007dee:	8bfa      	ldrh	r2, [r7, #30]
 8007df0:	8bbb      	ldrh	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3308      	adds	r3, #8
 8007df8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007dfa:	8a7b      	ldrh	r3, [r7, #18]
 8007dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e00:	d106      	bne.n	8007e10 <mem_malloc+0xb0>
 8007e02:	4b4c      	ldr	r3, [pc, #304]	@ (8007f34 <mem_malloc+0x1d4>)
 8007e04:	f240 3287 	movw	r2, #903	@ 0x387
 8007e08:	494b      	ldr	r1, [pc, #300]	@ (8007f38 <mem_malloc+0x1d8>)
 8007e0a:	484c      	ldr	r0, [pc, #304]	@ (8007f3c <mem_malloc+0x1dc>)
 8007e0c:	f00d f8fa 	bl	8015004 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007e10:	8a7b      	ldrh	r3, [r7, #18]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fd04 	bl	8007820 <ptr_to_mem>
 8007e18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	881a      	ldrh	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8bfa      	ldrh	r2, [r7, #30]
 8007e2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	8a7a      	ldrh	r2, [r7, #18]
 8007e32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2201      	movs	r2, #1
 8007e38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e42:	d00b      	beq.n	8007e5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff fce9 	bl	8007820 <ptr_to_mem>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	8a7b      	ldrh	r3, [r7, #18]
 8007e52:	8053      	strh	r3, [r2, #2]
 8007e54:	e002      	b.n	8007e5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007e5c:	4b34      	ldr	r3, [pc, #208]	@ (8007f30 <mem_malloc+0x1d0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d127      	bne.n	8007eb6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007e66:	4b32      	ldr	r3, [pc, #200]	@ (8007f30 <mem_malloc+0x1d0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007e6c:	e005      	b.n	8007e7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fcd4 	bl	8007820 <ptr_to_mem>
 8007e78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	791b      	ldrb	r3, [r3, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <mem_malloc+0x12c>
 8007e82:	4b2f      	ldr	r3, [pc, #188]	@ (8007f40 <mem_malloc+0x1e0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d1f0      	bne.n	8007e6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8007e8c:	4a28      	ldr	r2, [pc, #160]	@ (8007f30 <mem_malloc+0x1d0>)
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e92:	4b27      	ldr	r3, [pc, #156]	@ (8007f30 <mem_malloc+0x1d0>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b2a      	ldr	r3, [pc, #168]	@ (8007f40 <mem_malloc+0x1e0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d00b      	beq.n	8007eb6 <mem_malloc+0x156>
 8007e9e:	4b24      	ldr	r3, [pc, #144]	@ (8007f30 <mem_malloc+0x1d0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	791b      	ldrb	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d006      	beq.n	8007eb6 <mem_malloc+0x156>
 8007ea8:	4b22      	ldr	r3, [pc, #136]	@ (8007f34 <mem_malloc+0x1d4>)
 8007eaa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007eae:	4925      	ldr	r1, [pc, #148]	@ (8007f44 <mem_malloc+0x1e4>)
 8007eb0:	4822      	ldr	r0, [pc, #136]	@ (8007f3c <mem_malloc+0x1dc>)
 8007eb2:	f00d f8a7 	bl	8015004 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007eb6:	8bba      	ldrh	r2, [r7, #28]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	4a20      	ldr	r2, [pc, #128]	@ (8007f40 <mem_malloc+0x1e0>)
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d906      	bls.n	8007ed4 <mem_malloc+0x174>
 8007ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8007f34 <mem_malloc+0x1d4>)
 8007ec8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007ecc:	491e      	ldr	r1, [pc, #120]	@ (8007f48 <mem_malloc+0x1e8>)
 8007ece:	481b      	ldr	r0, [pc, #108]	@ (8007f3c <mem_malloc+0x1dc>)
 8007ed0:	f00d f898 	bl	8015004 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d006      	beq.n	8007eec <mem_malloc+0x18c>
 8007ede:	4b15      	ldr	r3, [pc, #84]	@ (8007f34 <mem_malloc+0x1d4>)
 8007ee0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007ee4:	4919      	ldr	r1, [pc, #100]	@ (8007f4c <mem_malloc+0x1ec>)
 8007ee6:	4815      	ldr	r0, [pc, #84]	@ (8007f3c <mem_malloc+0x1dc>)
 8007ee8:	f00d f88c 	bl	8015004 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d006      	beq.n	8007f04 <mem_malloc+0x1a4>
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <mem_malloc+0x1d4>)
 8007ef8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007efc:	4914      	ldr	r1, [pc, #80]	@ (8007f50 <mem_malloc+0x1f0>)
 8007efe:	480f      	ldr	r0, [pc, #60]	@ (8007f3c <mem_malloc+0x1dc>)
 8007f00:	f00d f880 	bl	8015004 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	3308      	adds	r3, #8
 8007f08:	e00e      	b.n	8007f28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007f0a:	8bfb      	ldrh	r3, [r7, #30]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fc87 	bl	8007820 <ptr_to_mem>
 8007f12:	4603      	mov	r3, r0
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007f18:	8bfa      	ldrh	r2, [r7, #30]
 8007f1a:	8bbb      	ldrh	r3, [r7, #28]
 8007f1c:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 8007f20:	429a      	cmp	r2, r3
 8007f22:	f4ff af44 	bcc.w	8007dae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3720      	adds	r7, #32
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	200050d8 	.word	0x200050d8
 8007f34:	08019094 	.word	0x08019094
 8007f38:	0801923c 	.word	0x0801923c
 8007f3c:	080190dc 	.word	0x080190dc
 8007f40:	200050d4 	.word	0x200050d4
 8007f44:	08019250 	.word	0x08019250
 8007f48:	0801926c 	.word	0x0801926c
 8007f4c:	0801929c 	.word	0x0801929c
 8007f50:	080192cc 	.word	0x080192cc

08007f54 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	80fb      	strh	r3, [r7, #6]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	88ba      	ldrh	r2, [r7, #4]
 8007f68:	fb02 f303 	mul.w	r3, r2, r3
 8007f6c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d001      	beq.n	8007f7e <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e00e      	b.n	8007f9c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff feec 	bl	8007d60 <mem_malloc>
 8007f88:	60b8      	str	r0, [r7, #8]
  if (p) {
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d004      	beq.n	8007f9a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	2100      	movs	r1, #0
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f00d f9c9 	bl	801532c <memset>
  }
  return p;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	3303      	adds	r3, #3
 8007fba:	f023 0303 	bic.w	r3, r3, #3
 8007fbe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e011      	b.n	8007fea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	dbe7      	blt.n	8007fc6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800800a:	2300      	movs	r3, #0
 800800c:	80fb      	strh	r3, [r7, #6]
 800800e:	e009      	b.n	8008024 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008010:	88fb      	ldrh	r3, [r7, #6]
 8008012:	4a08      	ldr	r2, [pc, #32]	@ (8008034 <memp_init+0x30>)
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff ffc3 	bl	8007fa4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	3301      	adds	r3, #1
 8008022:	80fb      	strh	r3, [r7, #6]
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	2b08      	cmp	r3, #8
 8008028:	d9f2      	bls.n	8008010 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	0801bec0 	.word	0x0801bec0

08008038 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d012      	beq.n	8008074 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	6812      	ldr	r2, [r2, #0]
 8008056:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <do_memp_malloc_pool+0x38>
 8008062:	4b07      	ldr	r3, [pc, #28]	@ (8008080 <do_memp_malloc_pool+0x48>)
 8008064:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008068:	4906      	ldr	r1, [pc, #24]	@ (8008084 <do_memp_malloc_pool+0x4c>)
 800806a:	4807      	ldr	r0, [pc, #28]	@ (8008088 <do_memp_malloc_pool+0x50>)
 800806c:	f00c ffca 	bl	8015004 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	e000      	b.n	8008076 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	080192f0 	.word	0x080192f0
 8008084:	08019320 	.word	0x08019320
 8008088:	08019344 	.word	0x08019344

0800808c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d106      	bne.n	80080a8 <memp_malloc_pool+0x1c>
 800809a:	4b0a      	ldr	r3, [pc, #40]	@ (80080c4 <memp_malloc_pool+0x38>)
 800809c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80080a0:	4909      	ldr	r1, [pc, #36]	@ (80080c8 <memp_malloc_pool+0x3c>)
 80080a2:	480a      	ldr	r0, [pc, #40]	@ (80080cc <memp_malloc_pool+0x40>)
 80080a4:	f00c ffae 	bl	8015004 <iprintf>
  if (desc == NULL) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <memp_malloc_pool+0x26>
    return NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e003      	b.n	80080ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ffc0 	bl	8008038 <do_memp_malloc_pool>
 80080b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	080192f0 	.word	0x080192f0
 80080c8:	0801936c 	.word	0x0801936c
 80080cc:	08019344 	.word	0x08019344

080080d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	2b08      	cmp	r3, #8
 80080de:	d908      	bls.n	80080f2 <memp_malloc+0x22>
 80080e0:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <memp_malloc+0x3c>)
 80080e2:	f240 1257 	movw	r2, #343	@ 0x157
 80080e6:	490a      	ldr	r1, [pc, #40]	@ (8008110 <memp_malloc+0x40>)
 80080e8:	480a      	ldr	r0, [pc, #40]	@ (8008114 <memp_malloc+0x44>)
 80080ea:	f00c ff8b 	bl	8015004 <iprintf>
 80080ee:	2300      	movs	r3, #0
 80080f0:	e008      	b.n	8008104 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	4a08      	ldr	r2, [pc, #32]	@ (8008118 <memp_malloc+0x48>)
 80080f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff ff9c 	bl	8008038 <do_memp_malloc_pool>
 8008100:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	080192f0 	.word	0x080192f0
 8008110:	08019380 	.word	0x08019380
 8008114:	08019344 	.word	0x08019344
 8008118:	0801bec0 	.word	0x0801bec0

0800811c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d006      	beq.n	800813e <do_memp_free_pool+0x22>
 8008130:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <do_memp_free_pool+0x40>)
 8008132:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008136:	490a      	ldr	r1, [pc, #40]	@ (8008160 <do_memp_free_pool+0x44>)
 8008138:	480a      	ldr	r0, [pc, #40]	@ (8008164 <do_memp_free_pool+0x48>)
 800813a:	f00c ff63 	bl	8015004 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	080192f0 	.word	0x080192f0
 8008160:	080193a0 	.word	0x080193a0
 8008164:	08019344 	.word	0x08019344

08008168 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <memp_free_pool+0x1e>
 8008178:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <memp_free_pool+0x3c>)
 800817a:	f240 1295 	movw	r2, #405	@ 0x195
 800817e:	490a      	ldr	r1, [pc, #40]	@ (80081a8 <memp_free_pool+0x40>)
 8008180:	480a      	ldr	r0, [pc, #40]	@ (80081ac <memp_free_pool+0x44>)
 8008182:	f00c ff3f 	bl	8015004 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <memp_free_pool+0x34>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d004      	beq.n	800819c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ffc1 	bl	800811c <do_memp_free_pool>
 800819a:	e000      	b.n	800819e <memp_free_pool+0x36>
    return;
 800819c:	bf00      	nop
}
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	080192f0 	.word	0x080192f0
 80081a8:	0801936c 	.word	0x0801936c
 80081ac:	08019344 	.word	0x08019344

080081b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	4603      	mov	r3, r0
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d907      	bls.n	80081d2 <memp_free+0x22>
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <memp_free+0x44>)
 80081c4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80081c8:	490b      	ldr	r1, [pc, #44]	@ (80081f8 <memp_free+0x48>)
 80081ca:	480c      	ldr	r0, [pc, #48]	@ (80081fc <memp_free+0x4c>)
 80081cc:	f00c ff1a 	bl	8015004 <iprintf>
 80081d0:	e00c      	b.n	80081ec <memp_free+0x3c>

  if (mem == NULL) {
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d008      	beq.n	80081ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <memp_free+0x50>)
 80081dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff ff9a 	bl	800811c <do_memp_free_pool>
 80081e8:	e000      	b.n	80081ec <memp_free+0x3c>
    return;
 80081ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	080192f0 	.word	0x080192f0
 80081f8:	080193c0 	.word	0x080193c0
 80081fc:	08019344 	.word	0x08019344
 8008200:	0801bec0 	.word	0x0801bec0

08008204 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
	...

08008214 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d108      	bne.n	800823a <netif_add+0x26>
 8008228:	4b5b      	ldr	r3, [pc, #364]	@ (8008398 <netif_add+0x184>)
 800822a:	f240 1227 	movw	r2, #295	@ 0x127
 800822e:	495b      	ldr	r1, [pc, #364]	@ (800839c <netif_add+0x188>)
 8008230:	485b      	ldr	r0, [pc, #364]	@ (80083a0 <netif_add+0x18c>)
 8008232:	f00c fee7 	bl	8015004 <iprintf>
 8008236:	2300      	movs	r3, #0
 8008238:	e0a9      	b.n	800838e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	2b00      	cmp	r3, #0
 800823e:	d108      	bne.n	8008252 <netif_add+0x3e>
 8008240:	4b55      	ldr	r3, [pc, #340]	@ (8008398 <netif_add+0x184>)
 8008242:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008246:	4957      	ldr	r1, [pc, #348]	@ (80083a4 <netif_add+0x190>)
 8008248:	4855      	ldr	r0, [pc, #340]	@ (80083a0 <netif_add+0x18c>)
 800824a:	f00c fedb 	bl	8015004 <iprintf>
 800824e:	2300      	movs	r3, #0
 8008250:	e09d      	b.n	800838e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008258:	4b53      	ldr	r3, [pc, #332]	@ (80083a8 <netif_add+0x194>)
 800825a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008262:	4b51      	ldr	r3, [pc, #324]	@ (80083a8 <netif_add+0x194>)
 8008264:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800826c:	4b4e      	ldr	r3, [pc, #312]	@ (80083a8 <netif_add+0x194>)
 800826e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4a49      	ldr	r2, [pc, #292]	@ (80083ac <netif_add+0x198>)
 8008286:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3324      	adds	r3, #36	@ 0x24
 800829a:	2204      	movs	r2, #4
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f00d f844 	bl	801532c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a3a      	ldr	r2, [r7, #32]
 80082ae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80082b0:	4b3f      	ldr	r3, [pc, #252]	@ (80083b0 <netif_add+0x19c>)
 80082b2:	781a      	ldrb	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082be:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f914 	bl	80084f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	4798      	blx	r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <netif_add+0xc8>
    return NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	e058      	b.n	800838e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80082e2:	2bff      	cmp	r3, #255	@ 0xff
 80082e4:	d103      	bne.n	80082ee <netif_add+0xda>
        netif->num = 0;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80082f2:	4b30      	ldr	r3, [pc, #192]	@ (80083b4 <netif_add+0x1a0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	e02b      	b.n	8008352 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d106      	bne.n	8008310 <netif_add+0xfc>
 8008302:	4b25      	ldr	r3, [pc, #148]	@ (8008398 <netif_add+0x184>)
 8008304:	f240 128b 	movw	r2, #395	@ 0x18b
 8008308:	492b      	ldr	r1, [pc, #172]	@ (80083b8 <netif_add+0x1a4>)
 800830a:	4825      	ldr	r0, [pc, #148]	@ (80083a0 <netif_add+0x18c>)
 800830c:	f00c fe7a 	bl	8015004 <iprintf>
        num_netifs++;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	3301      	adds	r3, #1
 8008314:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2bff      	cmp	r3, #255	@ 0xff
 800831a:	dd06      	ble.n	800832a <netif_add+0x116>
 800831c:	4b1e      	ldr	r3, [pc, #120]	@ (8008398 <netif_add+0x184>)
 800831e:	f240 128d 	movw	r2, #397	@ 0x18d
 8008322:	4926      	ldr	r1, [pc, #152]	@ (80083bc <netif_add+0x1a8>)
 8008324:	481e      	ldr	r0, [pc, #120]	@ (80083a0 <netif_add+0x18c>)
 8008326:	f00c fe6d 	bl	8015004 <iprintf>
        if (netif2->num == netif->num) {
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008336:	429a      	cmp	r2, r3
 8008338:	d108      	bne.n	800834c <netif_add+0x138>
          netif->num++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008340:	3301      	adds	r3, #1
 8008342:	b2da      	uxtb	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800834a:	e005      	b.n	8008358 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1d0      	bne.n	80082fa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1be      	bne.n	80082dc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008364:	2bfe      	cmp	r3, #254	@ 0xfe
 8008366:	d103      	bne.n	8008370 <netif_add+0x15c>
    netif_num = 0;
 8008368:	4b11      	ldr	r3, [pc, #68]	@ (80083b0 <netif_add+0x19c>)
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e006      	b.n	800837e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008376:	3301      	adds	r3, #1
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <netif_add+0x19c>)
 800837c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800837e:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <netif_add+0x1a0>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008386:	4a0b      	ldr	r2, [pc, #44]	@ (80083b4 <netif_add+0x1a0>)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800838c:	68fb      	ldr	r3, [r7, #12]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	080193dc 	.word	0x080193dc
 800839c:	08019470 	.word	0x08019470
 80083a0:	0801942c 	.word	0x0801942c
 80083a4:	0801948c 	.word	0x0801948c
 80083a8:	0801bf34 	.word	0x0801bf34
 80083ac:	080087d7 	.word	0x080087d7
 80083b0:	200080f0 	.word	0x200080f0
 80083b4:	200080e8 	.word	0x200080e8
 80083b8:	080194b0 	.word	0x080194b0
 80083bc:	080194c4 	.word	0x080194c4

080083c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f002 fb59 	bl	800aa84 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f007 fb8f 	bl	800faf8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <netif_do_set_ipaddr+0x20>
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <netif_do_set_ipaddr+0x88>)
 80083f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80083fc:	491c      	ldr	r1, [pc, #112]	@ (8008470 <netif_do_set_ipaddr+0x8c>)
 80083fe:	481d      	ldr	r0, [pc, #116]	@ (8008474 <netif_do_set_ipaddr+0x90>)
 8008400:	f00c fe00 	bl	8015004 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <netif_do_set_ipaddr+0x34>
 800840a:	4b18      	ldr	r3, [pc, #96]	@ (800846c <netif_do_set_ipaddr+0x88>)
 800840c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8008410:	4917      	ldr	r1, [pc, #92]	@ (8008470 <netif_do_set_ipaddr+0x8c>)
 8008412:	4818      	ldr	r0, [pc, #96]	@ (8008474 <netif_do_set_ipaddr+0x90>)
 8008414:	f00c fdf6 	bl	8015004 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3304      	adds	r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d01c      	beq.n	8008460 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3304      	adds	r3, #4
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008436:	f107 0314 	add.w	r3, r7, #20
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ffbf 	bl	80083c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <netif_do_set_ipaddr+0x6a>
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	e000      	b.n	8008450 <netif_do_set_ipaddr+0x6c>
 800844e:	2300      	movs	r3, #0
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008454:	2101      	movs	r1, #1
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f8d2 	bl	8008600 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800845c:	2301      	movs	r3, #1
 800845e:	e000      	b.n	8008462 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	080193dc 	.word	0x080193dc
 8008470:	080194f4 	.word	0x080194f4
 8008474:	0801942c 	.word	0x0801942c

08008478 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3308      	adds	r3, #8
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d00a      	beq.n	80084a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <netif_do_set_netmask+0x26>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	e000      	b.n	80084a0 <netif_do_set_netmask+0x28>
 800849e:	2300      	movs	r3, #0
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	330c      	adds	r3, #12
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d00a      	beq.n	80084e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <netif_do_set_gw+0x26>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	e000      	b.n	80084de <netif_do_set_gw+0x28>
 80084dc:	2300      	movs	r3, #0
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80084e2:	2301      	movs	r3, #1
 80084e4:	e000      	b.n	80084e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008510:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <netif_set_addr+0x90>)
 8008512:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800851a:	4b1a      	ldr	r3, [pc, #104]	@ (8008584 <netif_set_addr+0x90>)
 800851c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008524:	4b17      	ldr	r3, [pc, #92]	@ (8008584 <netif_set_addr+0x90>)
 8008526:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <netif_set_addr+0x42>
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <netif_set_addr+0x46>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <netif_set_addr+0x48>
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008544:	f107 0310 	add.w	r3, r7, #16
 8008548:	461a      	mov	r2, r3
 800854a:	68b9      	ldr	r1, [r7, #8]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f7ff ff49 	bl	80083e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff ff8e 	bl	8008478 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7ff ffa8 	bl	80084b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	461a      	mov	r2, r3
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff ff35 	bl	80083e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800857a:	bf00      	nop
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	0801bf34 	.word	0x0801bf34

08008588 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008590:	4a04      	ldr	r2, [pc, #16]	@ (80085a4 <netif_set_default+0x1c>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	200080ec 	.word	0x200080ec

080085a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <netif_set_up+0x1e>
 80085b6:	4b0f      	ldr	r3, [pc, #60]	@ (80085f4 <netif_set_up+0x4c>)
 80085b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80085bc:	490e      	ldr	r1, [pc, #56]	@ (80085f8 <netif_set_up+0x50>)
 80085be:	480f      	ldr	r0, [pc, #60]	@ (80085fc <netif_set_up+0x54>)
 80085c0:	f00c fd20 	bl	8015004 <iprintf>
 80085c4:	e013      	b.n	80085ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10c      	bne.n	80085ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80085e6:	2103      	movs	r1, #3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f809 	bl	8008600 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	080193dc 	.word	0x080193dc
 80085f8:	08019564 	.word	0x08019564
 80085fc:	0801942c 	.word	0x0801942c

08008600 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <netif_issue_reports+0x20>
 8008612:	4b18      	ldr	r3, [pc, #96]	@ (8008674 <netif_issue_reports+0x74>)
 8008614:	f240 326d 	movw	r2, #877	@ 0x36d
 8008618:	4917      	ldr	r1, [pc, #92]	@ (8008678 <netif_issue_reports+0x78>)
 800861a:	4818      	ldr	r0, [pc, #96]	@ (800867c <netif_issue_reports+0x7c>)
 800861c:	f00c fcf2 	bl	8015004 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01e      	beq.n	800866c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008634:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3304      	adds	r3, #4
 800864a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f00a f843 	bl	80126f0 <etharp_request>
 800866a:	e000      	b.n	800866e <netif_issue_reports+0x6e>
    return;
 800866c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	080193dc 	.word	0x080193dc
 8008678:	08019580 	.word	0x08019580
 800867c:	0801942c 	.word	0x0801942c

08008680 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d107      	bne.n	800869e <netif_set_down+0x1e>
 800868e:	4b12      	ldr	r3, [pc, #72]	@ (80086d8 <netif_set_down+0x58>)
 8008690:	f240 329b 	movw	r2, #923	@ 0x39b
 8008694:	4911      	ldr	r1, [pc, #68]	@ (80086dc <netif_set_down+0x5c>)
 8008696:	4812      	ldr	r0, [pc, #72]	@ (80086e0 <netif_set_down+0x60>)
 8008698:	f00c fcb4 	bl	8015004 <iprintf>
 800869c:	e019      	b.n	80086d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d012      	beq.n	80086d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f009 fbc9 	bl	8011e64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	080193dc 	.word	0x080193dc
 80086dc:	080195a4 	.word	0x080195a4
 80086e0:	0801942c 	.word	0x0801942c

080086e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d107      	bne.n	8008702 <netif_set_link_up+0x1e>
 80086f2:	4b15      	ldr	r3, [pc, #84]	@ (8008748 <netif_set_link_up+0x64>)
 80086f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80086f8:	4914      	ldr	r1, [pc, #80]	@ (800874c <netif_set_link_up+0x68>)
 80086fa:	4815      	ldr	r0, [pc, #84]	@ (8008750 <netif_set_link_up+0x6c>)
 80086fc:	f00c fc82 	bl	8015004 <iprintf>
 8008700:	e01e      	b.n	8008740 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d117      	bne.n	8008740 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008716:	f043 0304 	orr.w	r3, r3, #4
 800871a:	b2da      	uxtb	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f007 fe14 	bl	8010350 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008728:	2103      	movs	r1, #3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ff68 	bl	8008600 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <netif_set_link_up+0x5c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	080193dc 	.word	0x080193dc
 800874c:	080195c4 	.word	0x080195c4
 8008750:	0801942c 	.word	0x0801942c

08008754 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d107      	bne.n	8008772 <netif_set_link_down+0x1e>
 8008762:	4b11      	ldr	r3, [pc, #68]	@ (80087a8 <netif_set_link_down+0x54>)
 8008764:	f240 4206 	movw	r2, #1030	@ 0x406
 8008768:	4910      	ldr	r1, [pc, #64]	@ (80087ac <netif_set_link_down+0x58>)
 800876a:	4811      	ldr	r0, [pc, #68]	@ (80087b0 <netif_set_link_down+0x5c>)
 800876c:	f00c fc4a 	bl	8015004 <iprintf>
 8008770:	e017      	b.n	80087a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d010      	beq.n	80087a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008786:	f023 0304 	bic.w	r3, r3, #4
 800878a:	b2da      	uxtb	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <netif_set_link_down+0x4e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	080193dc 	.word	0x080193dc
 80087ac:	080195e8 	.word	0x080195e8
 80087b0:	0801942c 	.word	0x0801942c

080087b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	61da      	str	r2, [r3, #28]
  }
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80087e2:	f06f 030b 	mvn.w	r3, #11
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008804:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <netif_get_by_index+0x48>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e00c      	b.n	8008826 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008812:	3301      	adds	r3, #1
 8008814:	b2db      	uxtb	r3, r3
 8008816:	79fa      	ldrb	r2, [r7, #7]
 8008818:	429a      	cmp	r2, r3
 800881a:	d101      	bne.n	8008820 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e006      	b.n	800882e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1ef      	bne.n	800880c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	200080e8 	.word	0x200080e8

08008840 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008846:	4b0c      	ldr	r3, [pc, #48]	@ (8008878 <pbuf_free_ooseq+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800884c:	4b0b      	ldr	r3, [pc, #44]	@ (800887c <pbuf_free_ooseq+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	e00a      	b.n	800886a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f002 f94f 	bl	800ab00 <tcp_free_ooseq>
      return;
 8008862:	e005      	b.n	8008870 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f1      	bne.n	8008854 <pbuf_free_ooseq+0x14>
    }
  }
}
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	200080f1 	.word	0x200080f1
 800887c:	20008100 	.word	0x20008100

08008880 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008884:	4b03      	ldr	r3, [pc, #12]	@ (8008894 <pbuf_pool_is_empty+0x14>)
 8008886:	2201      	movs	r2, #1
 8008888:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800888a:	bf00      	nop
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	200080f1 	.word	0x200080f1

08008898 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	460b      	mov	r3, r1
 80088a8:	80fb      	strh	r3, [r7, #6]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	88fa      	ldrh	r2, [r7, #6]
 80088be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88ba      	ldrh	r2, [r7, #4]
 80088c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80088c6:	8b3b      	ldrh	r3, [r7, #24]
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	7f3a      	ldrb	r2, [r7, #28]
 80088d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	73da      	strb	r2, [r3, #15]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	@ 0x30
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
 80088f6:	460b      	mov	r3, r1
 80088f8:	80bb      	strh	r3, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008908:	d07f      	beq.n	8008a0a <pbuf_alloc+0x11e>
 800890a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800890e:	f300 80c8 	bgt.w	8008aa2 <pbuf_alloc+0x1b6>
 8008912:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008916:	d010      	beq.n	800893a <pbuf_alloc+0x4e>
 8008918:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800891c:	f300 80c1 	bgt.w	8008aa2 <pbuf_alloc+0x1b6>
 8008920:	2b01      	cmp	r3, #1
 8008922:	d002      	beq.n	800892a <pbuf_alloc+0x3e>
 8008924:	2b41      	cmp	r3, #65	@ 0x41
 8008926:	f040 80bc 	bne.w	8008aa2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	88bb      	ldrh	r3, [r7, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	2000      	movs	r0, #0
 8008932:	f000 f8d1 	bl	8008ad8 <pbuf_alloc_reference>
 8008936:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008938:	e0bd      	b.n	8008ab6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008942:	88bb      	ldrh	r3, [r7, #4]
 8008944:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008946:	2008      	movs	r0, #8
 8008948:	f7ff fbc2 	bl	80080d0 <memp_malloc>
 800894c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008954:	f7ff ff94 	bl	8008880 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <pbuf_alloc+0x78>
            pbuf_free(p);
 800895e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008960:	f000 faa8 	bl	8008eb4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	e0a7      	b.n	8008ab8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800896a:	3303      	adds	r3, #3
 800896c:	b29b      	uxth	r3, r3
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	b29b      	uxth	r3, r3
 8008974:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8008978:	b29b      	uxth	r3, r3
 800897a:	8b7a      	ldrh	r2, [r7, #26]
 800897c:	4293      	cmp	r3, r2
 800897e:	bf28      	it	cs
 8008980:	4613      	movcs	r3, r2
 8008982:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008984:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008986:	3310      	adds	r3, #16
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4413      	add	r3, r2
 800898c:	3303      	adds	r3, #3
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	4618      	mov	r0, r3
 8008994:	89f9      	ldrh	r1, [r7, #14]
 8008996:	8b7a      	ldrh	r2, [r7, #26]
 8008998:	2300      	movs	r3, #0
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	460b      	mov	r3, r1
 80089a2:	4601      	mov	r1, r0
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f7ff ff77 	bl	8008898 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <pbuf_alloc+0xd8>
 80089b6:	4b42      	ldr	r3, [pc, #264]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 80089b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089bc:	4941      	ldr	r1, [pc, #260]	@ (8008ac4 <pbuf_alloc+0x1d8>)
 80089be:	4842      	ldr	r0, [pc, #264]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 80089c0:	f00c fb20 	bl	8015004 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80089c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089c6:	3303      	adds	r3, #3
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80089d0:	d106      	bne.n	80089e0 <pbuf_alloc+0xf4>
 80089d2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 80089d4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80089d8:	493c      	ldr	r1, [pc, #240]	@ (8008acc <pbuf_alloc+0x1e0>)
 80089da:	483b      	ldr	r0, [pc, #236]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 80089dc:	f00c fb12 	bl	8015004 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ea:	e002      	b.n	80089f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80089f6:	8b7a      	ldrh	r2, [r7, #26]
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008a02:	8b7b      	ldrh	r3, [r7, #26]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d19e      	bne.n	8008946 <pbuf_alloc+0x5a>
      break;
 8008a08:	e055      	b.n	8008ab6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008a0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a0c:	3303      	adds	r3, #3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f023 0303 	bic.w	r3, r3, #3
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	88bb      	ldrh	r3, [r7, #4]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008a26:	8b3b      	ldrh	r3, [r7, #24]
 8008a28:	3310      	adds	r3, #16
 8008a2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a2c:	8b3a      	ldrh	r2, [r7, #24]
 8008a2e:	88bb      	ldrh	r3, [r7, #4]
 8008a30:	3303      	adds	r3, #3
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d306      	bcc.n	8008a48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008a3a:	8afa      	ldrh	r2, [r7, #22]
 8008a3c:	88bb      	ldrh	r3, [r7, #4]
 8008a3e:	3303      	adds	r3, #3
 8008a40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d201      	bcs.n	8008a4c <pbuf_alloc+0x160>
        return NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e035      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008a4c:	8afb      	ldrh	r3, [r7, #22]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff f986 	bl	8007d60 <mem_malloc>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <pbuf_alloc+0x174>
        return NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e02b      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008a60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a62:	3310      	adds	r3, #16
 8008a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a66:	4413      	add	r3, r2
 8008a68:	3303      	adds	r3, #3
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	88b9      	ldrh	r1, [r7, #4]
 8008a72:	88ba      	ldrh	r2, [r7, #4]
 8008a74:	2300      	movs	r3, #0
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	887b      	ldrh	r3, [r7, #2]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4601      	mov	r1, r0
 8008a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a82:	f7ff ff09 	bl	8008898 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <pbuf_alloc+0x1c8>
 8008a92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 8008a94:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8008a98:	490d      	ldr	r1, [pc, #52]	@ (8008ad0 <pbuf_alloc+0x1e4>)
 8008a9a:	480b      	ldr	r0, [pc, #44]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 8008a9c:	f00c fab2 	bl	8015004 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008aa0:	e008      	b.n	8008ab4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008aa2:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 8008aa4:	f240 1227 	movw	r2, #295	@ 0x127
 8008aa8:	490a      	ldr	r1, [pc, #40]	@ (8008ad4 <pbuf_alloc+0x1e8>)
 8008aaa:	4807      	ldr	r0, [pc, #28]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 8008aac:	f00c faaa 	bl	8015004 <iprintf>
      return NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e001      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      break;
 8008ab4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3728      	adds	r7, #40	@ 0x28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	0801960c 	.word	0x0801960c
 8008ac4:	0801963c 	.word	0x0801963c
 8008ac8:	0801966c 	.word	0x0801966c
 8008acc:	08019694 	.word	0x08019694
 8008ad0:	080196c8 	.word	0x080196c8
 8008ad4:	080196f4 	.word	0x080196f4

08008ad8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	807b      	strh	r3, [r7, #2]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008ae8:	883b      	ldrh	r3, [r7, #0]
 8008aea:	2b41      	cmp	r3, #65	@ 0x41
 8008aec:	d009      	beq.n	8008b02 <pbuf_alloc_reference+0x2a>
 8008aee:	883b      	ldrh	r3, [r7, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d006      	beq.n	8008b02 <pbuf_alloc_reference+0x2a>
 8008af4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b34 <pbuf_alloc_reference+0x5c>)
 8008af6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008afa:	490f      	ldr	r1, [pc, #60]	@ (8008b38 <pbuf_alloc_reference+0x60>)
 8008afc:	480f      	ldr	r0, [pc, #60]	@ (8008b3c <pbuf_alloc_reference+0x64>)
 8008afe:	f00c fa81 	bl	8015004 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008b02:	2007      	movs	r0, #7
 8008b04:	f7ff fae4 	bl	80080d0 <memp_malloc>
 8008b08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e00b      	b.n	8008b2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008b14:	8879      	ldrh	r1, [r7, #2]
 8008b16:	887a      	ldrh	r2, [r7, #2]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	883b      	ldrh	r3, [r7, #0]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff feb7 	bl	8008898 <pbuf_init_alloced_pbuf>
  return p;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	0801960c 	.word	0x0801960c
 8008b38:	08019710 	.word	0x08019710
 8008b3c:	0801966c 	.word	0x0801966c

08008b40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	607b      	str	r3, [r7, #4]
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	81bb      	strh	r3, [r7, #12]
 8008b50:	4613      	mov	r3, r2
 8008b52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008b58:	8a7b      	ldrh	r3, [r7, #18]
 8008b5a:	3303      	adds	r3, #3
 8008b5c:	f023 0203 	bic.w	r2, r3, #3
 8008b60:	89bb      	ldrh	r3, [r7, #12]
 8008b62:	441a      	add	r2, r3
 8008b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d901      	bls.n	8008b6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e018      	b.n	8008ba0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008b74:	8a7b      	ldrh	r3, [r7, #18]
 8008b76:	3303      	adds	r3, #3
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	6a3a      	ldr	r2, [r7, #32]
 8008b7e:	4413      	add	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e001      	b.n	8008b88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	89b9      	ldrh	r1, [r7, #12]
 8008b8c:	89ba      	ldrh	r2, [r7, #12]
 8008b8e:	2302      	movs	r3, #2
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	897b      	ldrh	r3, [r7, #10]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	460b      	mov	r3, r1
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	f7ff fe7d 	bl	8008898 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008b9e:	687b      	ldr	r3, [r7, #4]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <pbuf_realloc+0x20>
 8008bba:	4b3a      	ldr	r3, [pc, #232]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008bbc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008bc0:	4939      	ldr	r1, [pc, #228]	@ (8008ca8 <pbuf_realloc+0x100>)
 8008bc2:	483a      	ldr	r0, [pc, #232]	@ (8008cac <pbuf_realloc+0x104>)
 8008bc4:	f00c fa1e 	bl	8015004 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	891b      	ldrh	r3, [r3, #8]
 8008bcc:	887a      	ldrh	r2, [r7, #2]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d263      	bcs.n	8008c9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	891a      	ldrh	r2, [r3, #8]
 8008bd6:	887b      	ldrh	r3, [r7, #2]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	817b      	strh	r3, [r7, #10]
  q = p;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008be4:	e018      	b.n	8008c18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	895b      	ldrh	r3, [r3, #10]
 8008bea:	897a      	ldrh	r2, [r7, #10]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	891a      	ldrh	r2, [r3, #8]
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <pbuf_realloc+0x70>
 8008c0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008c0c:	f240 12af 	movw	r2, #431	@ 0x1af
 8008c10:	4927      	ldr	r1, [pc, #156]	@ (8008cb0 <pbuf_realloc+0x108>)
 8008c12:	4826      	ldr	r0, [pc, #152]	@ (8008cac <pbuf_realloc+0x104>)
 8008c14:	f00c f9f6 	bl	8015004 <iprintf>
  while (rem_len > q->len) {
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	897a      	ldrh	r2, [r7, #10]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d8e1      	bhi.n	8008be6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	7b1b      	ldrb	r3, [r3, #12]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d121      	bne.n	8008c72 <pbuf_realloc+0xca>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	895b      	ldrh	r3, [r3, #10]
 8008c32:	897a      	ldrh	r2, [r7, #10]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d01c      	beq.n	8008c72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	7b5b      	ldrb	r3, [r3, #13]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d116      	bne.n	8008c72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	897b      	ldrh	r3, [r7, #10]
 8008c50:	4413      	add	r3, r2
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7fe ff86 	bl	8007b68 <mem_trim>
 8008c5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <pbuf_realloc+0xca>
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008c66:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008c6a:	4912      	ldr	r1, [pc, #72]	@ (8008cb4 <pbuf_realloc+0x10c>)
 8008c6c:	480f      	ldr	r0, [pc, #60]	@ (8008cac <pbuf_realloc+0x104>)
 8008c6e:	f00c f9c9 	bl	8015004 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	897a      	ldrh	r2, [r7, #10]
 8008c76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	895a      	ldrh	r2, [r3, #10]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f911 	bl	8008eb4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e000      	b.n	8008c9c <pbuf_realloc+0xf4>
    return;
 8008c9a:	bf00      	nop

}
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0801960c 	.word	0x0801960c
 8008ca8:	08019724 	.word	0x08019724
 8008cac:	0801966c 	.word	0x0801966c
 8008cb0:	0801973c 	.word	0x0801973c
 8008cb4:	08019754 	.word	0x08019754

08008cb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <pbuf_add_header_impl+0x22>
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d7c <pbuf_add_header_impl+0xc4>)
 8008cce:	f240 12df 	movw	r2, #479	@ 0x1df
 8008cd2:	492b      	ldr	r1, [pc, #172]	@ (8008d80 <pbuf_add_header_impl+0xc8>)
 8008cd4:	482b      	ldr	r0, [pc, #172]	@ (8008d84 <pbuf_add_header_impl+0xcc>)
 8008cd6:	f00c f995 	bl	8015004 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <pbuf_add_header_impl+0x30>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce6:	d301      	bcc.n	8008cec <pbuf_add_header_impl+0x34>
    return 1;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e043      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <pbuf_add_header_impl+0x3e>
    return 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e03e      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	891a      	ldrh	r2, [r3, #8]
 8008cfe:	8a7b      	ldrh	r3, [r7, #18]
 8008d00:	4413      	add	r3, r2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8a7a      	ldrh	r2, [r7, #18]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d901      	bls.n	8008d0e <pbuf_add_header_impl+0x56>
    return 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e032      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	7b1b      	ldrb	r3, [r3, #12]
 8008d12:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008d14:	8a3b      	ldrh	r3, [r7, #16]
 8008d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	425b      	negs	r3, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d20d      	bcs.n	8008d50 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e01d      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	425b      	negs	r3, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e001      	b.n	8008d50 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e011      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	895a      	ldrh	r2, [r3, #10]
 8008d5a:	8a7b      	ldrh	r3, [r7, #18]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	891a      	ldrh	r2, [r3, #8]
 8008d68:	8a7b      	ldrh	r3, [r7, #18]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	811a      	strh	r2, [r3, #8]


  return 0;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	0801960c 	.word	0x0801960c
 8008d80:	08019770 	.word	0x08019770
 8008d84:	0801966c 	.word	0x0801966c

08008d88 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008d92:	2200      	movs	r2, #0
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff ff8e 	bl	8008cb8 <pbuf_add_header_impl>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <pbuf_remove_header+0x1e>
 8008db8:	4b20      	ldr	r3, [pc, #128]	@ (8008e3c <pbuf_remove_header+0x94>)
 8008dba:	f240 224b 	movw	r2, #587	@ 0x24b
 8008dbe:	4920      	ldr	r1, [pc, #128]	@ (8008e40 <pbuf_remove_header+0x98>)
 8008dc0:	4820      	ldr	r0, [pc, #128]	@ (8008e44 <pbuf_remove_header+0x9c>)
 8008dc2:	f00c f91f 	bl	8015004 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <pbuf_remove_header+0x2c>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd2:	d301      	bcc.n	8008dd8 <pbuf_remove_header+0x30>
    return 1;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e02c      	b.n	8008e32 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <pbuf_remove_header+0x3a>
    return 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e027      	b.n	8008e32 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	895b      	ldrh	r3, [r3, #10]
 8008dea:	89fa      	ldrh	r2, [r7, #14]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d908      	bls.n	8008e02 <pbuf_remove_header+0x5a>
 8008df0:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <pbuf_remove_header+0x94>)
 8008df2:	f240 2255 	movw	r2, #597	@ 0x255
 8008df6:	4914      	ldr	r1, [pc, #80]	@ (8008e48 <pbuf_remove_header+0xa0>)
 8008df8:	4812      	ldr	r0, [pc, #72]	@ (8008e44 <pbuf_remove_header+0x9c>)
 8008dfa:	f00c f903 	bl	8015004 <iprintf>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e017      	b.n	8008e32 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	441a      	add	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	895a      	ldrh	r2, [r3, #10]
 8008e18:	89fb      	ldrh	r3, [r7, #14]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	891a      	ldrh	r2, [r3, #8]
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0801960c 	.word	0x0801960c
 8008e40:	08019770 	.word	0x08019770
 8008e44:	0801966c 	.word	0x0801966c
 8008e48:	0801977c 	.word	0x0801977c

08008e4c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da08      	bge.n	8008e76 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e68:	425b      	negs	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff9b 	bl	8008da8 <pbuf_remove_header>
 8008e72:	4603      	mov	r3, r0
 8008e74:	e007      	b.n	8008e86 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008e76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e7a:	787a      	ldrb	r2, [r7, #1]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff1a 	bl	8008cb8 <pbuf_add_header_impl>
 8008e84:	4603      	mov	r3, r0
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008e9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff ffd2 	bl	8008e4c <pbuf_header_impl>
 8008ea8:	4603      	mov	r3, r0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <pbuf_free+0x22>
 8008ec8:	4b38      	ldr	r3, [pc, #224]	@ (8008fac <pbuf_free+0xf8>)
 8008eca:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008ece:	4938      	ldr	r1, [pc, #224]	@ (8008fb0 <pbuf_free+0xfc>)
 8008ed0:	4838      	ldr	r0, [pc, #224]	@ (8008fb4 <pbuf_free+0x100>)
 8008ed2:	f00c f897 	bl	8015004 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e063      	b.n	8008fa2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008ede:	e05c      	b.n	8008f9a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7b9b      	ldrb	r3, [r3, #14]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <pbuf_free+0x42>
 8008ee8:	4b30      	ldr	r3, [pc, #192]	@ (8008fac <pbuf_free+0xf8>)
 8008eea:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008eee:	4932      	ldr	r1, [pc, #200]	@ (8008fb8 <pbuf_free+0x104>)
 8008ef0:	4830      	ldr	r0, [pc, #192]	@ (8008fb4 <pbuf_free+0x100>)
 8008ef2:	f00c f887 	bl	8015004 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7b9b      	ldrb	r3, [r3, #14]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	739a      	strb	r2, [r3, #14]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7b9b      	ldrb	r3, [r3, #14]
 8008f06:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008f08:	7dbb      	ldrb	r3, [r7, #22]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d143      	bne.n	8008f96 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	7b5b      	ldrb	r3, [r3, #13]
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d011      	beq.n	8008f4e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <pbuf_free+0x90>
 8008f36:	4b1d      	ldr	r3, [pc, #116]	@ (8008fac <pbuf_free+0xf8>)
 8008f38:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008f3c:	491f      	ldr	r1, [pc, #124]	@ (8008fbc <pbuf_free+0x108>)
 8008f3e:	481d      	ldr	r0, [pc, #116]	@ (8008fb4 <pbuf_free+0x100>)
 8008f40:	f00c f860 	bl	8015004 <iprintf>
        pc->custom_free_function(p);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3
 8008f4c:	e01d      	b.n	8008f8a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d104      	bne.n	8008f5e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	2008      	movs	r0, #8
 8008f58:	f7ff f92a 	bl	80081b0 <memp_free>
 8008f5c:	e015      	b.n	8008f8a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d104      	bne.n	8008f6e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	2007      	movs	r0, #7
 8008f68:	f7ff f922 	bl	80081b0 <memp_free>
 8008f6c:	e00d      	b.n	8008f8a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <pbuf_free+0xc8>
          mem_free(p);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7fe fd8d 	bl	8007a94 <mem_free>
 8008f7a:	e006      	b.n	8008f8a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <pbuf_free+0xf8>)
 8008f7e:	f240 320f 	movw	r2, #783	@ 0x30f
 8008f82:	490f      	ldr	r1, [pc, #60]	@ (8008fc0 <pbuf_free+0x10c>)
 8008f84:	480b      	ldr	r0, [pc, #44]	@ (8008fb4 <pbuf_free+0x100>)
 8008f86:	f00c f83d 	bl	8015004 <iprintf>
        }
      }
      count++;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e001      	b.n	8008f9a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d19f      	bne.n	8008ee0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	0801960c 	.word	0x0801960c
 8008fb0:	08019770 	.word	0x08019770
 8008fb4:	0801966c 	.word	0x0801966c
 8008fb8:	0801979c 	.word	0x0801979c
 8008fbc:	080197b4 	.word	0x080197b4
 8008fc0:	080197d8 	.word	0x080197d8

08008fc4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008fd0:	e005      	b.n	8008fde <pbuf_clen+0x1a>
    ++len;
 8008fd2:	89fb      	ldrh	r3, [r7, #14]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1f6      	bne.n	8008fd2 <pbuf_clen+0xe>
  }
  return len;
 8008fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d010      	beq.n	8009024 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7b9b      	ldrb	r3, [r3, #14]
 8009006:	3301      	adds	r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7b9b      	ldrb	r3, [r3, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <pbuf_ref+0x30>
 8009016:	4b05      	ldr	r3, [pc, #20]	@ (800902c <pbuf_ref+0x38>)
 8009018:	f240 3242 	movw	r2, #834	@ 0x342
 800901c:	4904      	ldr	r1, [pc, #16]	@ (8009030 <pbuf_ref+0x3c>)
 800901e:	4805      	ldr	r0, [pc, #20]	@ (8009034 <pbuf_ref+0x40>)
 8009020:	f00b fff0 	bl	8015004 <iprintf>
  }
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	0801960c 	.word	0x0801960c
 8009030:	080197ec 	.word	0x080197ec
 8009034:	0801966c 	.word	0x0801966c

08009038 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <pbuf_cat+0x16>
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d107      	bne.n	800905e <pbuf_cat+0x26>
 800904e:	4b20      	ldr	r3, [pc, #128]	@ (80090d0 <pbuf_cat+0x98>)
 8009050:	f240 3259 	movw	r2, #857	@ 0x359
 8009054:	491f      	ldr	r1, [pc, #124]	@ (80090d4 <pbuf_cat+0x9c>)
 8009056:	4820      	ldr	r0, [pc, #128]	@ (80090d8 <pbuf_cat+0xa0>)
 8009058:	f00b ffd4 	bl	8015004 <iprintf>
 800905c:	e034      	b.n	80090c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e00a      	b.n	800907a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	891a      	ldrh	r2, [r3, #8]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	891b      	ldrh	r3, [r3, #8]
 800906c:	4413      	add	r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1f0      	bne.n	8009064 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	891a      	ldrh	r2, [r3, #8]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	895b      	ldrh	r3, [r3, #10]
 800908a:	429a      	cmp	r2, r3
 800908c:	d006      	beq.n	800909c <pbuf_cat+0x64>
 800908e:	4b10      	ldr	r3, [pc, #64]	@ (80090d0 <pbuf_cat+0x98>)
 8009090:	f240 3262 	movw	r2, #866	@ 0x362
 8009094:	4911      	ldr	r1, [pc, #68]	@ (80090dc <pbuf_cat+0xa4>)
 8009096:	4810      	ldr	r0, [pc, #64]	@ (80090d8 <pbuf_cat+0xa0>)
 8009098:	f00b ffb4 	bl	8015004 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <pbuf_cat+0x7a>
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <pbuf_cat+0x98>)
 80090a6:	f240 3263 	movw	r2, #867	@ 0x363
 80090aa:	490d      	ldr	r1, [pc, #52]	@ (80090e0 <pbuf_cat+0xa8>)
 80090ac:	480a      	ldr	r0, [pc, #40]	@ (80090d8 <pbuf_cat+0xa0>)
 80090ae:	f00b ffa9 	bl	8015004 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	891a      	ldrh	r2, [r3, #8]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	891b      	ldrh	r3, [r3, #8]
 80090ba:	4413      	add	r3, r2
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0801960c 	.word	0x0801960c
 80090d4:	08019800 	.word	0x08019800
 80090d8:	0801966c 	.word	0x0801966c
 80090dc:	08019838 	.word	0x08019838
 80090e0:	08019868 	.word	0x08019868

080090e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ffa1 	bl	8009038 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80090f6:	6838      	ldr	r0, [r7, #0]
 80090f8:	f7ff ff7c 	bl	8008ff4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d008      	beq.n	800912e <pbuf_copy+0x2a>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <pbuf_copy+0x2a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	891a      	ldrh	r2, [r3, #8]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	891b      	ldrh	r3, [r3, #8]
 800912a:	429a      	cmp	r2, r3
 800912c:	d209      	bcs.n	8009142 <pbuf_copy+0x3e>
 800912e:	4b57      	ldr	r3, [pc, #348]	@ (800928c <pbuf_copy+0x188>)
 8009130:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009134:	4956      	ldr	r1, [pc, #344]	@ (8009290 <pbuf_copy+0x18c>)
 8009136:	4857      	ldr	r0, [pc, #348]	@ (8009294 <pbuf_copy+0x190>)
 8009138:	f00b ff64 	bl	8015004 <iprintf>
 800913c:	f06f 030f 	mvn.w	r3, #15
 8009140:	e09f      	b.n	8009282 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	461a      	mov	r2, r3
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	1ad2      	subs	r2, r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	895b      	ldrh	r3, [r3, #10]
 8009150:	4619      	mov	r1, r3
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1acb      	subs	r3, r1, r3
 8009156:	429a      	cmp	r2, r3
 8009158:	d306      	bcc.n	8009168 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	895b      	ldrh	r3, [r3, #10]
 800915e:	461a      	mov	r2, r3
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e005      	b.n	8009174 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	895b      	ldrh	r3, [r3, #10]
 800916c:	461a      	mov	r2, r3
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	18d0      	adds	r0, r2, r3
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	4413      	add	r3, r2
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4619      	mov	r1, r3
 8009188:	f00c f961 	bl	801544e <memcpy>
    offset_to += len;
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4413      	add	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	895b      	ldrh	r3, [r3, #10]
 80091a0:	461a      	mov	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d906      	bls.n	80091b6 <pbuf_copy+0xb2>
 80091a8:	4b38      	ldr	r3, [pc, #224]	@ (800928c <pbuf_copy+0x188>)
 80091aa:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80091ae:	493a      	ldr	r1, [pc, #232]	@ (8009298 <pbuf_copy+0x194>)
 80091b0:	4838      	ldr	r0, [pc, #224]	@ (8009294 <pbuf_copy+0x190>)
 80091b2:	f00b ff27 	bl	8015004 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	895b      	ldrh	r3, [r3, #10]
 80091ba:	461a      	mov	r2, r3
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	4293      	cmp	r3, r2
 80091c0:	d906      	bls.n	80091d0 <pbuf_copy+0xcc>
 80091c2:	4b32      	ldr	r3, [pc, #200]	@ (800928c <pbuf_copy+0x188>)
 80091c4:	f240 32da 	movw	r2, #986	@ 0x3da
 80091c8:	4934      	ldr	r1, [pc, #208]	@ (800929c <pbuf_copy+0x198>)
 80091ca:	4832      	ldr	r0, [pc, #200]	@ (8009294 <pbuf_copy+0x190>)
 80091cc:	f00b ff1a 	bl	8015004 <iprintf>
    if (offset_from >= p_from->len) {
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	895b      	ldrh	r3, [r3, #10]
 80091d4:	461a      	mov	r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	4293      	cmp	r3, r2
 80091da:	d304      	bcc.n	80091e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	895b      	ldrh	r3, [r3, #10]
 80091ea:	461a      	mov	r2, r3
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d114      	bne.n	800921c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10c      	bne.n	800921c <pbuf_copy+0x118>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d009      	beq.n	800921c <pbuf_copy+0x118>
 8009208:	4b20      	ldr	r3, [pc, #128]	@ (800928c <pbuf_copy+0x188>)
 800920a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800920e:	4924      	ldr	r1, [pc, #144]	@ (80092a0 <pbuf_copy+0x19c>)
 8009210:	4820      	ldr	r0, [pc, #128]	@ (8009294 <pbuf_copy+0x190>)
 8009212:	f00b fef7 	bl	8015004 <iprintf>
 8009216:	f06f 030f 	mvn.w	r3, #15
 800921a:	e032      	b.n	8009282 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <pbuf_copy+0x146>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	895a      	ldrh	r2, [r3, #10]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	891b      	ldrh	r3, [r3, #8]
 800922a:	429a      	cmp	r2, r3
 800922c:	d10d      	bne.n	800924a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <pbuf_copy+0x146>
 8009236:	4b15      	ldr	r3, [pc, #84]	@ (800928c <pbuf_copy+0x188>)
 8009238:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800923c:	4919      	ldr	r1, [pc, #100]	@ (80092a4 <pbuf_copy+0x1a0>)
 800923e:	4815      	ldr	r0, [pc, #84]	@ (8009294 <pbuf_copy+0x190>)
 8009240:	f00b fee0 	bl	8015004 <iprintf>
 8009244:	f06f 0305 	mvn.w	r3, #5
 8009248:	e01b      	b.n	8009282 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d013      	beq.n	8009278 <pbuf_copy+0x174>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	895a      	ldrh	r2, [r3, #10]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	891b      	ldrh	r3, [r3, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d10d      	bne.n	8009278 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d009      	beq.n	8009278 <pbuf_copy+0x174>
 8009264:	4b09      	ldr	r3, [pc, #36]	@ (800928c <pbuf_copy+0x188>)
 8009266:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800926a:	490e      	ldr	r1, [pc, #56]	@ (80092a4 <pbuf_copy+0x1a0>)
 800926c:	4809      	ldr	r0, [pc, #36]	@ (8009294 <pbuf_copy+0x190>)
 800926e:	f00b fec9 	bl	8015004 <iprintf>
 8009272:	f06f 0305 	mvn.w	r3, #5
 8009276:	e004      	b.n	8009282 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f47f af61 	bne.w	8009142 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	0801960c 	.word	0x0801960c
 8009290:	080198b4 	.word	0x080198b4
 8009294:	0801966c 	.word	0x0801966c
 8009298:	080198e4 	.word	0x080198e4
 800929c:	080198fc 	.word	0x080198fc
 80092a0:	08019918 	.word	0x08019918
 80092a4:	08019928 	.word	0x08019928

080092a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4611      	mov	r1, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	460b      	mov	r3, r1
 80092b8:	80fb      	strh	r3, [r7, #6]
 80092ba:	4613      	mov	r3, r2
 80092bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d108      	bne.n	80092de <pbuf_copy_partial+0x36>
 80092cc:	4b2b      	ldr	r3, [pc, #172]	@ (800937c <pbuf_copy_partial+0xd4>)
 80092ce:	f240 420a 	movw	r2, #1034	@ 0x40a
 80092d2:	492b      	ldr	r1, [pc, #172]	@ (8009380 <pbuf_copy_partial+0xd8>)
 80092d4:	482b      	ldr	r0, [pc, #172]	@ (8009384 <pbuf_copy_partial+0xdc>)
 80092d6:	f00b fe95 	bl	8015004 <iprintf>
 80092da:	2300      	movs	r3, #0
 80092dc:	e04a      	b.n	8009374 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d108      	bne.n	80092f6 <pbuf_copy_partial+0x4e>
 80092e4:	4b25      	ldr	r3, [pc, #148]	@ (800937c <pbuf_copy_partial+0xd4>)
 80092e6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80092ea:	4927      	ldr	r1, [pc, #156]	@ (8009388 <pbuf_copy_partial+0xe0>)
 80092ec:	4825      	ldr	r0, [pc, #148]	@ (8009384 <pbuf_copy_partial+0xdc>)
 80092ee:	f00b fe89 	bl	8015004 <iprintf>
 80092f2:	2300      	movs	r3, #0
 80092f4:	e03e      	b.n	8009374 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e034      	b.n	8009366 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80092fc:	88bb      	ldrh	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <pbuf_copy_partial+0x70>
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	895b      	ldrh	r3, [r3, #10]
 8009306:	88ba      	ldrh	r2, [r7, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d305      	bcc.n	8009318 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	895b      	ldrh	r3, [r3, #10]
 8009310:	88ba      	ldrh	r2, [r7, #4]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	80bb      	strh	r3, [r7, #4]
 8009316:	e023      	b.n	8009360 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	895a      	ldrh	r2, [r3, #10]
 800931c:	88bb      	ldrh	r3, [r7, #4]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009322:	8b3a      	ldrh	r2, [r7, #24]
 8009324:	88fb      	ldrh	r3, [r7, #6]
 8009326:	429a      	cmp	r2, r3
 8009328:	d901      	bls.n	800932e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800932a:	88fb      	ldrh	r3, [r7, #6]
 800932c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800932e:	8b7b      	ldrh	r3, [r7, #26]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	18d0      	adds	r0, r2, r3
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	88bb      	ldrh	r3, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	8b3a      	ldrh	r2, [r7, #24]
 800933e:	4619      	mov	r1, r3
 8009340:	f00c f885 	bl	801544e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009344:	8afa      	ldrh	r2, [r7, #22]
 8009346:	8b3b      	ldrh	r3, [r7, #24]
 8009348:	4413      	add	r3, r2
 800934a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800934c:	8b7a      	ldrh	r2, [r7, #26]
 800934e:	8b3b      	ldrh	r3, [r7, #24]
 8009350:	4413      	add	r3, r2
 8009352:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009354:	88fa      	ldrh	r2, [r7, #6]
 8009356:	8b3b      	ldrh	r3, [r7, #24]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <pbuf_copy_partial+0xca>
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1c4      	bne.n	80092fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009372:	8afb      	ldrh	r3, [r7, #22]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	0801960c 	.word	0x0801960c
 8009380:	08019954 	.word	0x08019954
 8009384:	0801966c 	.word	0x0801966c
 8009388:	08019974 	.word	0x08019974

0800938c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	4603      	mov	r3, r0
 8009394:	603a      	str	r2, [r7, #0]
 8009396:	71fb      	strb	r3, [r7, #7]
 8009398:	460b      	mov	r3, r1
 800939a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	8919      	ldrh	r1, [r3, #8]
 80093a0:	88ba      	ldrh	r2, [r7, #4]
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff faa1 	bl	80088ec <pbuf_alloc>
 80093aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <pbuf_clone+0x2a>
    return NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e011      	b.n	80093da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fea3 	bl	8009104 <pbuf_copy>
 80093be:	4603      	mov	r3, r0
 80093c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80093c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <pbuf_clone+0x4c>
 80093ca:	4b06      	ldr	r3, [pc, #24]	@ (80093e4 <pbuf_clone+0x58>)
 80093cc:	f240 5224 	movw	r2, #1316	@ 0x524
 80093d0:	4905      	ldr	r1, [pc, #20]	@ (80093e8 <pbuf_clone+0x5c>)
 80093d2:	4806      	ldr	r0, [pc, #24]	@ (80093ec <pbuf_clone+0x60>)
 80093d4:	f00b fe16 	bl	8015004 <iprintf>
  return q;
 80093d8:	68fb      	ldr	r3, [r7, #12]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	0801960c 	.word	0x0801960c
 80093e8:	08019a80 	.word	0x08019a80
 80093ec:	0801966c 	.word	0x0801966c

080093f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80093f4:	f00a fe50 	bl	8014098 <rand>
 80093f8:	4603      	mov	r3, r0
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009400:	b29b      	uxth	r3, r3
 8009402:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8009406:	b29a      	uxth	r2, r3
 8009408:	4b01      	ldr	r3, [pc, #4]	@ (8009410 <tcp_init+0x20>)
 800940a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800940c:	bf00      	nop
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20000030 	.word	0x20000030

08009414 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7d1b      	ldrb	r3, [r3, #20]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d105      	bne.n	8009430 <tcp_free+0x1c>
 8009424:	4b06      	ldr	r3, [pc, #24]	@ (8009440 <tcp_free+0x2c>)
 8009426:	22d4      	movs	r2, #212	@ 0xd4
 8009428:	4906      	ldr	r1, [pc, #24]	@ (8009444 <tcp_free+0x30>)
 800942a:	4807      	ldr	r0, [pc, #28]	@ (8009448 <tcp_free+0x34>)
 800942c:	f00b fdea 	bl	8015004 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	2001      	movs	r0, #1
 8009434:	f7fe febc 	bl	80081b0 <memp_free>
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	08019b0c 	.word	0x08019b0c
 8009444:	08019b3c 	.word	0x08019b3c
 8009448:	08019b50 	.word	0x08019b50

0800944c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	7d1b      	ldrb	r3, [r3, #20]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d105      	bne.n	8009468 <tcp_free_listen+0x1c>
 800945c:	4b06      	ldr	r3, [pc, #24]	@ (8009478 <tcp_free_listen+0x2c>)
 800945e:	22df      	movs	r2, #223	@ 0xdf
 8009460:	4906      	ldr	r1, [pc, #24]	@ (800947c <tcp_free_listen+0x30>)
 8009462:	4807      	ldr	r0, [pc, #28]	@ (8009480 <tcp_free_listen+0x34>)
 8009464:	f00b fdce 	bl	8015004 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	2002      	movs	r0, #2
 800946c:	f7fe fea0 	bl	80081b0 <memp_free>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	08019b0c 	.word	0x08019b0c
 800947c:	08019b78 	.word	0x08019b78
 8009480:	08019b50 	.word	0x08019b50

08009484 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009488:	f000 fea4 	bl	800a1d4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800948c:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <tcp_tmr+0x28>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <tcp_tmr+0x28>)
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	4b04      	ldr	r3, [pc, #16]	@ (80094ac <tcp_tmr+0x28>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80094a4:	f000 fb54 	bl	8009b50 <tcp_slowtmr>
  }
}
 80094a8:	bf00      	nop
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20008109 	.word	0x20008109

080094b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <tcp_remove_listener+0x1c>
 80094c0:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <tcp_remove_listener+0x48>)
 80094c2:	22ff      	movs	r2, #255	@ 0xff
 80094c4:	490d      	ldr	r1, [pc, #52]	@ (80094fc <tcp_remove_listener+0x4c>)
 80094c6:	480e      	ldr	r0, [pc, #56]	@ (8009500 <tcp_remove_listener+0x50>)
 80094c8:	f00b fd9c 	bl	8015004 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	e00a      	b.n	80094e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d102      	bne.n	80094e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1f1      	bne.n	80094d2 <tcp_remove_listener+0x22>
    }
  }
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08019b0c 	.word	0x08019b0c
 80094fc:	08019b94 	.word	0x08019b94
 8009500:	08019b50 	.word	0x08019b50

08009504 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <tcp_listen_closed+0x1c>
 8009512:	4b14      	ldr	r3, [pc, #80]	@ (8009564 <tcp_listen_closed+0x60>)
 8009514:	f240 1211 	movw	r2, #273	@ 0x111
 8009518:	4913      	ldr	r1, [pc, #76]	@ (8009568 <tcp_listen_closed+0x64>)
 800951a:	4814      	ldr	r0, [pc, #80]	@ (800956c <tcp_listen_closed+0x68>)
 800951c:	f00b fd72 	bl	8015004 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7d1b      	ldrb	r3, [r3, #20]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d006      	beq.n	8009536 <tcp_listen_closed+0x32>
 8009528:	4b0e      	ldr	r3, [pc, #56]	@ (8009564 <tcp_listen_closed+0x60>)
 800952a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800952e:	4910      	ldr	r1, [pc, #64]	@ (8009570 <tcp_listen_closed+0x6c>)
 8009530:	480e      	ldr	r0, [pc, #56]	@ (800956c <tcp_listen_closed+0x68>)
 8009532:	f00b fd67 	bl	8015004 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009536:	2301      	movs	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	e00b      	b.n	8009554 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800953c:	4a0d      	ldr	r2, [pc, #52]	@ (8009574 <tcp_listen_closed+0x70>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4618      	mov	r0, r3
 800954a:	f7ff ffb1 	bl	80094b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b03      	cmp	r3, #3
 8009558:	d9f0      	bls.n	800953c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800955a:	bf00      	nop
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	08019b0c 	.word	0x08019b0c
 8009568:	08019bbc 	.word	0x08019bbc
 800956c:	08019b50 	.word	0x08019b50
 8009570:	08019bc8 	.word	0x08019bc8
 8009574:	0801befc 	.word	0x0801befc

08009578 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009578:	b5b0      	push	{r4, r5, r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af04      	add	r7, sp, #16
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <tcp_close_shutdown+0x20>
 800958a:	4b63      	ldr	r3, [pc, #396]	@ (8009718 <tcp_close_shutdown+0x1a0>)
 800958c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8009590:	4962      	ldr	r1, [pc, #392]	@ (800971c <tcp_close_shutdown+0x1a4>)
 8009592:	4863      	ldr	r0, [pc, #396]	@ (8009720 <tcp_close_shutdown+0x1a8>)
 8009594:	f00b fd36 	bl	8015004 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009598:	78fb      	ldrb	r3, [r7, #3]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d066      	beq.n	800966c <tcp_close_shutdown+0xf4>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7d1b      	ldrb	r3, [r3, #20]
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d003      	beq.n	80095ae <tcp_close_shutdown+0x36>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	2b07      	cmp	r3, #7
 80095ac:	d15e      	bne.n	800966c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d104      	bne.n	80095c0 <tcp_close_shutdown+0x48>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095be:	d055      	beq.n	800966c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8b5b      	ldrh	r3, [r3, #26]
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <tcp_close_shutdown+0x62>
 80095cc:	4b52      	ldr	r3, [pc, #328]	@ (8009718 <tcp_close_shutdown+0x1a0>)
 80095ce:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80095d2:	4954      	ldr	r1, [pc, #336]	@ (8009724 <tcp_close_shutdown+0x1ac>)
 80095d4:	4852      	ldr	r0, [pc, #328]	@ (8009720 <tcp_close_shutdown+0x1a8>)
 80095d6:	f00b fd15 	bl	8015004 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80095e2:	687d      	ldr	r5, [r7, #4]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3304      	adds	r3, #4
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	8ad2      	ldrh	r2, [r2, #22]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	8b09      	ldrh	r1, [r1, #24]
 80095f0:	9102      	str	r1, [sp, #8]
 80095f2:	9201      	str	r2, [sp, #4]
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	462b      	mov	r3, r5
 80095f8:	4622      	mov	r2, r4
 80095fa:	4601      	mov	r1, r0
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f005 fae5 	bl	800ebcc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 f8c8 	bl	800a798 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009608:	4b47      	ldr	r3, [pc, #284]	@ (8009728 <tcp_close_shutdown+0x1b0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d105      	bne.n	800961e <tcp_close_shutdown+0xa6>
 8009612:	4b45      	ldr	r3, [pc, #276]	@ (8009728 <tcp_close_shutdown+0x1b0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	4a43      	ldr	r2, [pc, #268]	@ (8009728 <tcp_close_shutdown+0x1b0>)
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	e013      	b.n	8009646 <tcp_close_shutdown+0xce>
 800961e:	4b42      	ldr	r3, [pc, #264]	@ (8009728 <tcp_close_shutdown+0x1b0>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	e00c      	b.n	8009640 <tcp_close_shutdown+0xc8>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	429a      	cmp	r2, r3
 800962e:	d104      	bne.n	800963a <tcp_close_shutdown+0xc2>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	60da      	str	r2, [r3, #12]
 8009638:	e005      	b.n	8009646 <tcp_close_shutdown+0xce>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1ef      	bne.n	8009626 <tcp_close_shutdown+0xae>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	60da      	str	r2, [r3, #12]
 800964c:	4b37      	ldr	r3, [pc, #220]	@ (800972c <tcp_close_shutdown+0x1b4>)
 800964e:	2201      	movs	r2, #1
 8009650:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009652:	4b37      	ldr	r3, [pc, #220]	@ (8009730 <tcp_close_shutdown+0x1b8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	429a      	cmp	r2, r3
 800965a:	d102      	bne.n	8009662 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800965c:	f003 fd5c 	bl	800d118 <tcp_trigger_input_pcb_close>
 8009660:	e002      	b.n	8009668 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff fed6 	bl	8009414 <tcp_free>
      }
      return ERR_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	e050      	b.n	800970e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	7d1b      	ldrb	r3, [r3, #20]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d03b      	beq.n	80096ec <tcp_close_shutdown+0x174>
 8009674:	2b02      	cmp	r3, #2
 8009676:	dc44      	bgt.n	8009702 <tcp_close_shutdown+0x18a>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <tcp_close_shutdown+0x10a>
 800967c:	2b01      	cmp	r3, #1
 800967e:	d02a      	beq.n	80096d6 <tcp_close_shutdown+0x15e>
 8009680:	e03f      	b.n	8009702 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8adb      	ldrh	r3, [r3, #22]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d021      	beq.n	80096ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800968a:	4b2a      	ldr	r3, [pc, #168]	@ (8009734 <tcp_close_shutdown+0x1bc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d105      	bne.n	80096a0 <tcp_close_shutdown+0x128>
 8009694:	4b27      	ldr	r3, [pc, #156]	@ (8009734 <tcp_close_shutdown+0x1bc>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	4a26      	ldr	r2, [pc, #152]	@ (8009734 <tcp_close_shutdown+0x1bc>)
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	e013      	b.n	80096c8 <tcp_close_shutdown+0x150>
 80096a0:	4b24      	ldr	r3, [pc, #144]	@ (8009734 <tcp_close_shutdown+0x1bc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	e00c      	b.n	80096c2 <tcp_close_shutdown+0x14a>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d104      	bne.n	80096bc <tcp_close_shutdown+0x144>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	60da      	str	r2, [r3, #12]
 80096ba:	e005      	b.n	80096c8 <tcp_close_shutdown+0x150>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1ef      	bne.n	80096a8 <tcp_close_shutdown+0x130>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fea0 	bl	8009414 <tcp_free>
      break;
 80096d4:	e01a      	b.n	800970c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff ff14 	bl	8009504 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4816      	ldr	r0, [pc, #88]	@ (8009738 <tcp_close_shutdown+0x1c0>)
 80096e0:	f001 f8aa 	bl	800a838 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff feb1 	bl	800944c <tcp_free_listen>
      break;
 80096ea:	e00f      	b.n	800970c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	480e      	ldr	r0, [pc, #56]	@ (8009728 <tcp_close_shutdown+0x1b0>)
 80096f0:	f001 f8a2 	bl	800a838 <tcp_pcb_remove>
 80096f4:	4b0d      	ldr	r3, [pc, #52]	@ (800972c <tcp_close_shutdown+0x1b4>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fe8a 	bl	8009414 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009700:	e004      	b.n	800970c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f81a 	bl	800973c <tcp_close_shutdown_fin>
 8009708:	4603      	mov	r3, r0
 800970a:	e000      	b.n	800970e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bdb0      	pop	{r4, r5, r7, pc}
 8009716:	bf00      	nop
 8009718:	08019b0c 	.word	0x08019b0c
 800971c:	08019be0 	.word	0x08019be0
 8009720:	08019b50 	.word	0x08019b50
 8009724:	08019c00 	.word	0x08019c00
 8009728:	20008100 	.word	0x20008100
 800972c:	20008108 	.word	0x20008108
 8009730:	20008140 	.word	0x20008140
 8009734:	200080f8 	.word	0x200080f8
 8009738:	200080fc 	.word	0x200080fc

0800973c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <tcp_close_shutdown_fin+0x1c>
 800974a:	4b2e      	ldr	r3, [pc, #184]	@ (8009804 <tcp_close_shutdown_fin+0xc8>)
 800974c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009750:	492d      	ldr	r1, [pc, #180]	@ (8009808 <tcp_close_shutdown_fin+0xcc>)
 8009752:	482e      	ldr	r0, [pc, #184]	@ (800980c <tcp_close_shutdown_fin+0xd0>)
 8009754:	f00b fc56 	bl	8015004 <iprintf>

  switch (pcb->state) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	2b07      	cmp	r3, #7
 800975e:	d020      	beq.n	80097a2 <tcp_close_shutdown_fin+0x66>
 8009760:	2b07      	cmp	r3, #7
 8009762:	dc2b      	bgt.n	80097bc <tcp_close_shutdown_fin+0x80>
 8009764:	2b03      	cmp	r3, #3
 8009766:	d002      	beq.n	800976e <tcp_close_shutdown_fin+0x32>
 8009768:	2b04      	cmp	r3, #4
 800976a:	d00d      	beq.n	8009788 <tcp_close_shutdown_fin+0x4c>
 800976c:	e026      	b.n	80097bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f004 fb3a 	bl	800dde8 <tcp_send_fin>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d11f      	bne.n	80097c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2205      	movs	r2, #5
 8009784:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009786:	e01b      	b.n	80097c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f004 fb2d 	bl	800dde8 <tcp_send_fin>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d114      	bne.n	80097c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2205      	movs	r2, #5
 800979e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80097a0:	e010      	b.n	80097c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f004 fb20 	bl	800dde8 <tcp_send_fin>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80097ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d109      	bne.n	80097c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2209      	movs	r2, #9
 80097b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80097ba:	e005      	b.n	80097c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	e01c      	b.n	80097fa <tcp_close_shutdown_fin+0xbe>
      break;
 80097c0:	bf00      	nop
 80097c2:	e002      	b.n	80097ca <tcp_close_shutdown_fin+0x8e>
      break;
 80097c4:	bf00      	nop
 80097c6:	e000      	b.n	80097ca <tcp_close_shutdown_fin+0x8e>
      break;
 80097c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80097ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f004 fc46 	bl	800e064 <tcp_output>
 80097d8:	e00d      	b.n	80097f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80097da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d108      	bne.n	80097f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	8b5b      	ldrh	r3, [r3, #26]
 80097e8:	f043 0308 	orr.w	r3, r3, #8
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e001      	b.n	80097fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80097f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	08019b0c 	.word	0x08019b0c
 8009808:	08019bbc 	.word	0x08019bbc
 800980c:	08019b50 	.word	0x08019b50

08009810 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d109      	bne.n	8009832 <tcp_close+0x22>
 800981e:	4b0f      	ldr	r3, [pc, #60]	@ (800985c <tcp_close+0x4c>)
 8009820:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8009824:	490e      	ldr	r1, [pc, #56]	@ (8009860 <tcp_close+0x50>)
 8009826:	480f      	ldr	r0, [pc, #60]	@ (8009864 <tcp_close+0x54>)
 8009828:	f00b fbec 	bl	8015004 <iprintf>
 800982c:	f06f 030f 	mvn.w	r3, #15
 8009830:	e00f      	b.n	8009852 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7d1b      	ldrb	r3, [r3, #20]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d006      	beq.n	8009848 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	8b5b      	ldrh	r3, [r3, #26]
 800983e:	f043 0310 	orr.w	r3, r3, #16
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009848:	2101      	movs	r1, #1
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fe94 	bl	8009578 <tcp_close_shutdown>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	08019b0c 	.word	0x08019b0c
 8009860:	08019c1c 	.word	0x08019c1c
 8009864:	08019b50 	.word	0x08019b50

08009868 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	@ 0x38
 800986c:	af04      	add	r7, sp, #16
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d107      	bne.n	8009888 <tcp_abandon+0x20>
 8009878:	4b52      	ldr	r3, [pc, #328]	@ (80099c4 <tcp_abandon+0x15c>)
 800987a:	f240 223d 	movw	r2, #573	@ 0x23d
 800987e:	4952      	ldr	r1, [pc, #328]	@ (80099c8 <tcp_abandon+0x160>)
 8009880:	4852      	ldr	r0, [pc, #328]	@ (80099cc <tcp_abandon+0x164>)
 8009882:	f00b fbbf 	bl	8015004 <iprintf>
 8009886:	e099      	b.n	80099bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d106      	bne.n	800989e <tcp_abandon+0x36>
 8009890:	4b4c      	ldr	r3, [pc, #304]	@ (80099c4 <tcp_abandon+0x15c>)
 8009892:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8009896:	494e      	ldr	r1, [pc, #312]	@ (80099d0 <tcp_abandon+0x168>)
 8009898:	484c      	ldr	r0, [pc, #304]	@ (80099cc <tcp_abandon+0x164>)
 800989a:	f00b fbb3 	bl	8015004 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	7d1b      	ldrb	r3, [r3, #20]
 80098a2:	2b0a      	cmp	r3, #10
 80098a4:	d107      	bne.n	80098b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	484a      	ldr	r0, [pc, #296]	@ (80099d4 <tcp_abandon+0x16c>)
 80098aa:	f000 ffc5 	bl	800a838 <tcp_pcb_remove>
    tcp_free(pcb);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff fdb0 	bl	8009414 <tcp_free>
 80098b4:	e082      	b.n	80099bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80098ba:	2300      	movs	r3, #0
 80098bc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7d1b      	ldrb	r3, [r3, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d126      	bne.n	800992e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8adb      	ldrh	r3, [r3, #22]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d02e      	beq.n	8009946 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80098e8:	4b3b      	ldr	r3, [pc, #236]	@ (80099d8 <tcp_abandon+0x170>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d105      	bne.n	80098fe <tcp_abandon+0x96>
 80098f2:	4b39      	ldr	r3, [pc, #228]	@ (80099d8 <tcp_abandon+0x170>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	4a37      	ldr	r2, [pc, #220]	@ (80099d8 <tcp_abandon+0x170>)
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	e013      	b.n	8009926 <tcp_abandon+0xbe>
 80098fe:	4b36      	ldr	r3, [pc, #216]	@ (80099d8 <tcp_abandon+0x170>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	e00c      	b.n	8009920 <tcp_abandon+0xb8>
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	429a      	cmp	r2, r3
 800990e:	d104      	bne.n	800991a <tcp_abandon+0xb2>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	60da      	str	r2, [r3, #12]
 8009918:	e005      	b.n	8009926 <tcp_abandon+0xbe>
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1ef      	bne.n	8009906 <tcp_abandon+0x9e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	60da      	str	r2, [r3, #12]
 800992c:	e00b      	b.n	8009946 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	8adb      	ldrh	r3, [r3, #22]
 8009936:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009938:	6879      	ldr	r1, [r7, #4]
 800993a:	4828      	ldr	r0, [pc, #160]	@ (80099dc <tcp_abandon+0x174>)
 800993c:	f000 ff7c 	bl	800a838 <tcp_pcb_remove>
 8009940:	4b27      	ldr	r3, [pc, #156]	@ (80099e0 <tcp_abandon+0x178>)
 8009942:	2201      	movs	r2, #1
 8009944:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fd1e 	bl	800a394 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fd15 	bl	800a394 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800996e:	2b00      	cmp	r3, #0
 8009970:	d004      	beq.n	800997c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fd0c 	bl	800a394 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800997c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	8b12      	ldrh	r2, [r2, #24]
 800998c:	9202      	str	r2, [sp, #8]
 800998e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009990:	9201      	str	r2, [sp, #4]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	460b      	mov	r3, r1
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	69b9      	ldr	r1, [r7, #24]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f005 f916 	bl	800ebcc <tcp_rst>
    }
    last_state = pcb->state;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	7d1b      	ldrb	r3, [r3, #20]
 80099a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff fd34 	bl	8009414 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <tcp_abandon+0x154>
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f06f 010c 	mvn.w	r1, #12
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3
  }
}
 80099bc:	3728      	adds	r7, #40	@ 0x28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	08019b0c 	.word	0x08019b0c
 80099c8:	08019c50 	.word	0x08019c50
 80099cc:	08019b50 	.word	0x08019b50
 80099d0:	08019c6c 	.word	0x08019c6c
 80099d4:	20008104 	.word	0x20008104
 80099d8:	200080f8 	.word	0x200080f8
 80099dc:	20008100 	.word	0x20008100
 80099e0:	20008108 	.word	0x20008108

080099e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80099ec:	2101      	movs	r1, #1
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff ff3a 	bl	8009868 <tcp_abandon>
}
 80099f4:	bf00      	nop
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <tcp_update_rcv_ann_wnd+0x1c>
 8009a0a:	4b25      	ldr	r3, [pc, #148]	@ (8009aa0 <tcp_update_rcv_ann_wnd+0xa4>)
 8009a0c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009a10:	4924      	ldr	r1, [pc, #144]	@ (8009aa4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009a12:	4825      	ldr	r0, [pc, #148]	@ (8009aa8 <tcp_update_rcv_ann_wnd+0xac>)
 8009a14:	f00b faf6 	bl	8015004 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009a20:	4413      	add	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009a2c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8009a30:	bf28      	it	cs
 8009a32:	f44f 6200 	movcs.w	r2, #2048	@ 0x800
 8009a36:	b292      	uxth	r2, r2
 8009a38:	4413      	add	r3, r2
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	db08      	blt.n	8009a54 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	e020      	b.n	8009a96 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd03      	ble.n	8009a6a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009a68:	e014      	b.n	8009a94 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7c:	d306      	bcc.n	8009a8c <tcp_update_rcv_ann_wnd+0x90>
 8009a7e:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <tcp_update_rcv_ann_wnd+0xa4>)
 8009a80:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009a84:	4909      	ldr	r1, [pc, #36]	@ (8009aac <tcp_update_rcv_ann_wnd+0xb0>)
 8009a86:	4808      	ldr	r0, [pc, #32]	@ (8009aa8 <tcp_update_rcv_ann_wnd+0xac>)
 8009a88:	f00b fabc 	bl	8015004 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009a94:	2300      	movs	r3, #0
  }
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	08019b0c 	.word	0x08019b0c
 8009aa4:	08019d68 	.word	0x08019d68
 8009aa8:	08019b50 	.word	0x08019b50
 8009aac:	08019d8c 	.word	0x08019d8c

08009ab0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d107      	bne.n	8009ad2 <tcp_recved+0x22>
 8009ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b40 <tcp_recved+0x90>)
 8009ac4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009ac8:	491e      	ldr	r1, [pc, #120]	@ (8009b44 <tcp_recved+0x94>)
 8009aca:	481f      	ldr	r0, [pc, #124]	@ (8009b48 <tcp_recved+0x98>)
 8009acc:	f00b fa9a 	bl	8015004 <iprintf>
 8009ad0:	e032      	b.n	8009b38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7d1b      	ldrb	r3, [r3, #20]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d106      	bne.n	8009ae8 <tcp_recved+0x38>
 8009ada:	4b19      	ldr	r3, [pc, #100]	@ (8009b40 <tcp_recved+0x90>)
 8009adc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009ae0:	491a      	ldr	r1, [pc, #104]	@ (8009b4c <tcp_recved+0x9c>)
 8009ae2:	4819      	ldr	r0, [pc, #100]	@ (8009b48 <tcp_recved+0x98>)
 8009ae4:	f00b fa8e 	bl	8015004 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009aec:	887b      	ldrh	r3, [r7, #2]
 8009aee:	4413      	add	r3, r2
 8009af0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009af2:	89fb      	ldrh	r3, [r7, #14]
 8009af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af8:	d804      	bhi.n	8009b04 <tcp_recved+0x54>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009afe:	89fa      	ldrh	r2, [r7, #14]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d204      	bcs.n	8009b0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009b0c:	e002      	b.n	8009b14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	89fa      	ldrh	r2, [r7, #14]
 8009b12:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff ff71 	bl	80099fc <tcp_update_rcv_ann_wnd>
 8009b1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b22:	d309      	bcc.n	8009b38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8b5b      	ldrh	r3, [r3, #26]
 8009b28:	f043 0302 	orr.w	r3, r3, #2
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f004 fa96 	bl	800e064 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	08019b0c 	.word	0x08019b0c
 8009b44:	08019da8 	.word	0x08019da8
 8009b48:	08019b50 	.word	0x08019b50
 8009b4c:	08019dc0 	.word	0x08019dc0

08009b50 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009b50:	b5b0      	push	{r4, r5, r7, lr}
 8009b52:	b090      	sub	sp, #64	@ 0x40
 8009b54:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009b5c:	4b95      	ldr	r3, [pc, #596]	@ (8009db4 <tcp_slowtmr+0x264>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3301      	adds	r3, #1
 8009b62:	4a94      	ldr	r2, [pc, #592]	@ (8009db4 <tcp_slowtmr+0x264>)
 8009b64:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b66:	4b94      	ldr	r3, [pc, #592]	@ (8009db8 <tcp_slowtmr+0x268>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	4b92      	ldr	r3, [pc, #584]	@ (8009db8 <tcp_slowtmr+0x268>)
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	e000      	b.n	8009b76 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009b74:	bf00      	nop
  prev = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009b7a:	4b90      	ldr	r3, [pc, #576]	@ (8009dbc <tcp_slowtmr+0x26c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009b80:	e29d      	b.n	800a0be <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	7d1b      	ldrb	r3, [r3, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <tcp_slowtmr+0x48>
 8009b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8009dc0 <tcp_slowtmr+0x270>)
 8009b8c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009b90:	498c      	ldr	r1, [pc, #560]	@ (8009dc4 <tcp_slowtmr+0x274>)
 8009b92:	488d      	ldr	r0, [pc, #564]	@ (8009dc8 <tcp_slowtmr+0x278>)
 8009b94:	f00b fa36 	bl	8015004 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	7d1b      	ldrb	r3, [r3, #20]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d106      	bne.n	8009bae <tcp_slowtmr+0x5e>
 8009ba0:	4b87      	ldr	r3, [pc, #540]	@ (8009dc0 <tcp_slowtmr+0x270>)
 8009ba2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009ba6:	4989      	ldr	r1, [pc, #548]	@ (8009dcc <tcp_slowtmr+0x27c>)
 8009ba8:	4887      	ldr	r0, [pc, #540]	@ (8009dc8 <tcp_slowtmr+0x278>)
 8009baa:	f00b fa2b 	bl	8015004 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb0:	7d1b      	ldrb	r3, [r3, #20]
 8009bb2:	2b0a      	cmp	r3, #10
 8009bb4:	d106      	bne.n	8009bc4 <tcp_slowtmr+0x74>
 8009bb6:	4b82      	ldr	r3, [pc, #520]	@ (8009dc0 <tcp_slowtmr+0x270>)
 8009bb8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009bbc:	4984      	ldr	r1, [pc, #528]	@ (8009dd0 <tcp_slowtmr+0x280>)
 8009bbe:	4882      	ldr	r0, [pc, #520]	@ (8009dc8 <tcp_slowtmr+0x278>)
 8009bc0:	f00b fa20 	bl	8015004 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc6:	7f9a      	ldrb	r2, [r3, #30]
 8009bc8:	4b7b      	ldr	r3, [pc, #492]	@ (8009db8 <tcp_slowtmr+0x268>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d105      	bne.n	8009bdc <tcp_slowtmr+0x8c>
      prev = pcb;
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009bda:	e270      	b.n	800a0be <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009bdc:	4b76      	ldr	r3, [pc, #472]	@ (8009db8 <tcp_slowtmr+0x268>)
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf2:	7d1b      	ldrb	r3, [r3, #20]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d10a      	bne.n	8009c0e <tcp_slowtmr+0xbe>
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d905      	bls.n	8009c0e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009c02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c06:	3301      	adds	r3, #1
 8009c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009c0c:	e11e      	b.n	8009e4c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c14:	2b0b      	cmp	r3, #11
 8009c16:	d905      	bls.n	8009c24 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009c22:	e113      	b.n	8009e4c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d075      	beq.n	8009d1a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d006      	beq.n	8009c44 <tcp_slowtmr+0xf4>
 8009c36:	4b62      	ldr	r3, [pc, #392]	@ (8009dc0 <tcp_slowtmr+0x270>)
 8009c38:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009c3c:	4965      	ldr	r1, [pc, #404]	@ (8009dd4 <tcp_slowtmr+0x284>)
 8009c3e:	4862      	ldr	r0, [pc, #392]	@ (8009dc8 <tcp_slowtmr+0x278>)
 8009c40:	f00b f9e0 	bl	8015004 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <tcp_slowtmr+0x10a>
 8009c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009dc0 <tcp_slowtmr+0x270>)
 8009c4e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009c52:	4961      	ldr	r1, [pc, #388]	@ (8009dd8 <tcp_slowtmr+0x288>)
 8009c54:	485c      	ldr	r0, [pc, #368]	@ (8009dc8 <tcp_slowtmr+0x278>)
 8009c56:	f00b f9d5 	bl	8015004 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009c60:	2b0b      	cmp	r3, #11
 8009c62:	d905      	bls.n	8009c70 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c68:	3301      	adds	r3, #1
 8009c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009c6e:	e0ed      	b.n	8009e4c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4a58      	ldr	r2, [pc, #352]	@ (8009ddc <tcp_slowtmr+0x28c>)
 8009c7a:	5cd3      	ldrb	r3, [r2, r3]
 8009c7c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c80:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009c84:	7c7a      	ldrb	r2, [r7, #17]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d907      	bls.n	8009c9a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009c90:	3301      	adds	r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009ca0:	7c7a      	ldrb	r2, [r7, #17]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	f200 80d2 	bhi.w	8009e4c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009ca8:	2301      	movs	r3, #1
 8009caa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d108      	bne.n	8009cc8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cb8:	f005 f87a 	bl	800edb0 <tcp_zero_window_probe>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d014      	beq.n	8009cec <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	e011      	b.n	8009cec <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cd2:	f003 ff41 	bl	800db58 <tcp_split_unsent_seg>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d107      	bne.n	8009cec <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cde:	f004 f9c1 	bl	800e064 <tcp_output>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 80ac 	beq.w	8009e4c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009d02:	2b06      	cmp	r3, #6
 8009d04:	f200 80a2 	bhi.w	8009e4c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009d0e:	3301      	adds	r3, #1
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009d18:	e098      	b.n	8009e4c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	db0f      	blt.n	8009d44 <tcp_slowtmr+0x1f4>
 8009d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009d2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d008      	beq.n	8009d44 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	b21a      	sxth	r2, r3
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d46:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8009d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d4c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009d50:	429a      	cmp	r2, r3
 8009d52:	db7b      	blt.n	8009e4c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009d54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d56:	f004 fc79 	bl	800e64c <tcp_rexmit_rto_prepare>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <tcp_slowtmr+0x220>
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d171      	bne.n	8009e4c <tcp_slowtmr+0x2fc>
 8009d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d06d      	beq.n	8009e4c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d03a      	beq.n	8009dee <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d7e:	2b0c      	cmp	r3, #12
 8009d80:	bf28      	it	cs
 8009d82:	230c      	movcs	r3, #12
 8009d84:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009d8c:	10db      	asrs	r3, r3, #3
 8009d8e:	b21b      	sxth	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009d98:	4413      	add	r3, r2
 8009d9a:	7efa      	ldrb	r2, [r7, #27]
 8009d9c:	4910      	ldr	r1, [pc, #64]	@ (8009de0 <tcp_slowtmr+0x290>)
 8009d9e:	5c8a      	ldrb	r2, [r1, r2]
 8009da0:	4093      	lsls	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009daa:	4293      	cmp	r3, r2
 8009dac:	dc1a      	bgt.n	8009de4 <tcp_slowtmr+0x294>
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	b21a      	sxth	r2, r3
 8009db2:	e019      	b.n	8009de8 <tcp_slowtmr+0x298>
 8009db4:	200080f4 	.word	0x200080f4
 8009db8:	2000810a 	.word	0x2000810a
 8009dbc:	20008100 	.word	0x20008100
 8009dc0:	08019b0c 	.word	0x08019b0c
 8009dc4:	08019e50 	.word	0x08019e50
 8009dc8:	08019b50 	.word	0x08019b50
 8009dcc:	08019e7c 	.word	0x08019e7c
 8009dd0:	08019ea8 	.word	0x08019ea8
 8009dd4:	08019ed8 	.word	0x08019ed8
 8009dd8:	08019f0c 	.word	0x08019f0c
 8009ddc:	0801bef4 	.word	0x0801bef4
 8009de0:	0801bee4 	.word	0x0801bee4
 8009de4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8009dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df0:	2200      	movs	r2, #0
 8009df2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009e00:	4293      	cmp	r3, r2
 8009e02:	bf28      	it	cs
 8009e04:	4613      	movcs	r3, r2
 8009e06:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009e08:	8a7b      	ldrh	r3, [r7, #18]
 8009e0a:	085b      	lsrs	r3, r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e10:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d206      	bcs.n	8009e34 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e30:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e36:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009e46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e48:	f004 fc70 	bl	800e72c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	d111      	bne.n	8009e78 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e56:	8b5b      	ldrh	r3, [r3, #26]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e60:	4b9c      	ldr	r3, [pc, #624]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b28      	cmp	r3, #40	@ 0x28
 8009e6c:	d904      	bls.n	8009e78 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e72:	3301      	adds	r3, #1
 8009e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7a:	7a5b      	ldrb	r3, [r3, #9]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d04a      	beq.n	8009f1a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d003      	beq.n	8009e94 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d142      	bne.n	8009f1a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e94:	4b8f      	ldr	r3, [pc, #572]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009ea4:	4b8c      	ldr	r3, [pc, #560]	@ (800a0d8 <tcp_slowtmr+0x588>)
 8009ea6:	440b      	add	r3, r1
 8009ea8:	498c      	ldr	r1, [pc, #560]	@ (800a0dc <tcp_slowtmr+0x58c>)
 8009eaa:	fba1 1303 	umull	r1, r3, r1, r3
 8009eae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d90a      	bls.n	8009eca <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009ec8:	e027      	b.n	8009f1a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eca:	4b82      	ldr	r3, [pc, #520]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009edc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	4b7f      	ldr	r3, [pc, #508]	@ (800a0e0 <tcp_slowtmr+0x590>)
 8009ee4:	fb00 f303 	mul.w	r3, r0, r3
 8009ee8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009eea:	497c      	ldr	r1, [pc, #496]	@ (800a0dc <tcp_slowtmr+0x58c>)
 8009eec:	fba1 1303 	umull	r1, r3, r1, r3
 8009ef0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d911      	bls.n	8009f1a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009ef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ef8:	f004 ff1a 	bl	800ed30 <tcp_keepalive>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009f02:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009f10:	3301      	adds	r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d011      	beq.n	8009f46 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009f22:	4b6c      	ldr	r3, [pc, #432]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	1ad2      	subs	r2, r2, r3
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009f32:	4619      	mov	r1, r3
 8009f34:	460b      	mov	r3, r1
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	440b      	add	r3, r1
 8009f3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d302      	bcc.n	8009f46 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f42:	f000 fddd 	bl	800ab00 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d10b      	bne.n	8009f66 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f4e:	4b61      	ldr	r3, [pc, #388]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	2b28      	cmp	r3, #40	@ 0x28
 8009f5a:	d904      	bls.n	8009f66 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f60:	3301      	adds	r3, #1
 8009f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f68:	7d1b      	ldrb	r3, [r3, #20]
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d10b      	bne.n	8009f86 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f6e:	4b59      	ldr	r3, [pc, #356]	@ (800a0d4 <tcp_slowtmr+0x584>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2bf0      	cmp	r3, #240	@ 0xf0
 8009f7a:	d904      	bls.n	8009f86 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f80:	3301      	adds	r3, #1
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d060      	beq.n	800a050 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f94:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009f96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f98:	f000 fbfe 	bl	800a798 <tcp_pcb_purge>
      if (prev != NULL) {
 8009f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d010      	beq.n	8009fc4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009fa2:	4b50      	ldr	r3, [pc, #320]	@ (800a0e4 <tcp_slowtmr+0x594>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d106      	bne.n	8009fba <tcp_slowtmr+0x46a>
 8009fac:	4b4e      	ldr	r3, [pc, #312]	@ (800a0e8 <tcp_slowtmr+0x598>)
 8009fae:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009fb2:	494e      	ldr	r1, [pc, #312]	@ (800a0ec <tcp_slowtmr+0x59c>)
 8009fb4:	484e      	ldr	r0, [pc, #312]	@ (800a0f0 <tcp_slowtmr+0x5a0>)
 8009fb6:	f00b f825 	bl	8015004 <iprintf>
        prev->next = pcb->next;
 8009fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fbc:	68da      	ldr	r2, [r3, #12]
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	60da      	str	r2, [r3, #12]
 8009fc2:	e00f      	b.n	8009fe4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009fc4:	4b47      	ldr	r3, [pc, #284]	@ (800a0e4 <tcp_slowtmr+0x594>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d006      	beq.n	8009fdc <tcp_slowtmr+0x48c>
 8009fce:	4b46      	ldr	r3, [pc, #280]	@ (800a0e8 <tcp_slowtmr+0x598>)
 8009fd0:	f240 5271 	movw	r2, #1393	@ 0x571
 8009fd4:	4947      	ldr	r1, [pc, #284]	@ (800a0f4 <tcp_slowtmr+0x5a4>)
 8009fd6:	4846      	ldr	r0, [pc, #280]	@ (800a0f0 <tcp_slowtmr+0x5a0>)
 8009fd8:	f00b f814 	bl	8015004 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	4a40      	ldr	r2, [pc, #256]	@ (800a0e4 <tcp_slowtmr+0x594>)
 8009fe2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009fe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d013      	beq.n	800a014 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009ff4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ffc:	8ad2      	ldrh	r2, [r2, #22]
 8009ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a000:	8b09      	ldrh	r1, [r1, #24]
 800a002:	9102      	str	r1, [sp, #8]
 800a004:	9201      	str	r2, [sp, #4]
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	462b      	mov	r3, r5
 800a00a:	4622      	mov	r2, r4
 800a00c:	4601      	mov	r1, r0
 800a00e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a010:	f004 fddc 	bl	800ebcc <tcp_rst>
      err_arg = pcb->callback_arg;
 800a014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01c:	7d1b      	ldrb	r3, [r3, #20]
 800a01e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a022:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a02a:	6838      	ldr	r0, [r7, #0]
 800a02c:	f7ff f9f2 	bl	8009414 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a030:	4b31      	ldr	r3, [pc, #196]	@ (800a0f8 <tcp_slowtmr+0x5a8>)
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <tcp_slowtmr+0x4f6>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f06f 010c 	mvn.w	r1, #12
 800a042:	68b8      	ldr	r0, [r7, #8]
 800a044:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a046:	4b2c      	ldr	r3, [pc, #176]	@ (800a0f8 <tcp_slowtmr+0x5a8>)
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d037      	beq.n	800a0be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a04e:	e592      	b.n	8009b76 <tcp_slowtmr+0x26>
      prev = pcb;
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800a05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05c:	7f1b      	ldrb	r3, [r3, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	7f1a      	ldrb	r2, [r3, #28]
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	7f5b      	ldrb	r3, [r3, #29]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d325      	bcc.n	800a0be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a074:	2200      	movs	r2, #0
 800a076:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800a078:	4b1f      	ldr	r3, [pc, #124]	@ (800a0f8 <tcp_slowtmr+0x5a8>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00b      	beq.n	800a0a0 <tcp_slowtmr+0x550>
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a08e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a090:	6912      	ldr	r2, [r2, #16]
 800a092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	4603      	mov	r3, r0
 800a09a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a09e:	e002      	b.n	800a0a6 <tcp_slowtmr+0x556>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800a0a6:	4b14      	ldr	r3, [pc, #80]	@ (800a0f8 <tcp_slowtmr+0x5a8>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f47f ad62 	bne.w	8009b74 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a0b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d102      	bne.n	800a0be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a0b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ba:	f003 ffd3 	bl	800e064 <tcp_output>
  while (pcb != NULL) {
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f47f ad5e 	bne.w	8009b82 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a0fc <tcp_slowtmr+0x5ac>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a0d0:	e069      	b.n	800a1a6 <tcp_slowtmr+0x656>
 800a0d2:	bf00      	nop
 800a0d4:	200080f4 	.word	0x200080f4
 800a0d8:	000a4cb8 	.word	0x000a4cb8
 800a0dc:	10624dd3 	.word	0x10624dd3
 800a0e0:	000124f8 	.word	0x000124f8
 800a0e4:	20008100 	.word	0x20008100
 800a0e8:	08019b0c 	.word	0x08019b0c
 800a0ec:	08019f44 	.word	0x08019f44
 800a0f0:	08019b50 	.word	0x08019b50
 800a0f4:	08019f70 	.word	0x08019f70
 800a0f8:	20008108 	.word	0x20008108
 800a0fc:	20008104 	.word	0x20008104
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	7d1b      	ldrb	r3, [r3, #20]
 800a104:	2b0a      	cmp	r3, #10
 800a106:	d006      	beq.n	800a116 <tcp_slowtmr+0x5c6>
 800a108:	4b2b      	ldr	r3, [pc, #172]	@ (800a1b8 <tcp_slowtmr+0x668>)
 800a10a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800a10e:	492b      	ldr	r1, [pc, #172]	@ (800a1bc <tcp_slowtmr+0x66c>)
 800a110:	482b      	ldr	r0, [pc, #172]	@ (800a1c0 <tcp_slowtmr+0x670>)
 800a112:	f00a ff77 	bl	8015004 <iprintf>
    pcb_remove = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a11c:	4b29      	ldr	r3, [pc, #164]	@ (800a1c4 <tcp_slowtmr+0x674>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	2bf0      	cmp	r3, #240	@ 0xf0
 800a128:	d904      	bls.n	800a134 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800a12a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a12e:	3301      	adds	r3, #1
 800a130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d02f      	beq.n	800a19c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a13c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a13e:	f000 fb2b 	bl	800a798 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a144:	2b00      	cmp	r3, #0
 800a146:	d010      	beq.n	800a16a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a148:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c8 <tcp_slowtmr+0x678>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a14e:	429a      	cmp	r2, r3
 800a150:	d106      	bne.n	800a160 <tcp_slowtmr+0x610>
 800a152:	4b19      	ldr	r3, [pc, #100]	@ (800a1b8 <tcp_slowtmr+0x668>)
 800a154:	f240 52af 	movw	r2, #1455	@ 0x5af
 800a158:	491c      	ldr	r1, [pc, #112]	@ (800a1cc <tcp_slowtmr+0x67c>)
 800a15a:	4819      	ldr	r0, [pc, #100]	@ (800a1c0 <tcp_slowtmr+0x670>)
 800a15c:	f00a ff52 	bl	8015004 <iprintf>
        prev->next = pcb->next;
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a166:	60da      	str	r2, [r3, #12]
 800a168:	e00f      	b.n	800a18a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a16a:	4b17      	ldr	r3, [pc, #92]	@ (800a1c8 <tcp_slowtmr+0x678>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a170:	429a      	cmp	r2, r3
 800a172:	d006      	beq.n	800a182 <tcp_slowtmr+0x632>
 800a174:	4b10      	ldr	r3, [pc, #64]	@ (800a1b8 <tcp_slowtmr+0x668>)
 800a176:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a17a:	4915      	ldr	r1, [pc, #84]	@ (800a1d0 <tcp_slowtmr+0x680>)
 800a17c:	4810      	ldr	r0, [pc, #64]	@ (800a1c0 <tcp_slowtmr+0x670>)
 800a17e:	f00a ff41 	bl	8015004 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4a10      	ldr	r2, [pc, #64]	@ (800a1c8 <tcp_slowtmr+0x678>)
 800a188:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a194:	69f8      	ldr	r0, [r7, #28]
 800a196:	f7ff f93d 	bl	8009414 <tcp_free>
 800a19a:	e004      	b.n	800a1a6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1a9      	bne.n	800a100 <tcp_slowtmr+0x5b0>
    }
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	bf00      	nop
 800a1b0:	3730      	adds	r7, #48	@ 0x30
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	08019b0c 	.word	0x08019b0c
 800a1bc:	08019f9c 	.word	0x08019f9c
 800a1c0:	08019b50 	.word	0x08019b50
 800a1c4:	200080f4 	.word	0x200080f4
 800a1c8:	20008104 	.word	0x20008104
 800a1cc:	08019fcc 	.word	0x08019fcc
 800a1d0:	08019ff4 	.word	0x08019ff4

0800a1d4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a1da:	4b2d      	ldr	r3, [pc, #180]	@ (800a290 <tcp_fasttmr+0xbc>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	4b2b      	ldr	r3, [pc, #172]	@ (800a290 <tcp_fasttmr+0xbc>)
 800a1e4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a1e6:	4b2b      	ldr	r3, [pc, #172]	@ (800a294 <tcp_fasttmr+0xc0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a1ec:	e048      	b.n	800a280 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	7f9a      	ldrb	r2, [r3, #30]
 800a1f2:	4b27      	ldr	r3, [pc, #156]	@ (800a290 <tcp_fasttmr+0xbc>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d03f      	beq.n	800a27a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a1fa:	4b25      	ldr	r3, [pc, #148]	@ (800a290 <tcp_fasttmr+0xbc>)
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8b5b      	ldrh	r3, [r3, #26]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d010      	beq.n	800a230 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	8b5b      	ldrh	r3, [r3, #26]
 800a212:	f043 0302 	orr.w	r3, r3, #2
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f003 ff21 	bl	800e064 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8b5b      	ldrh	r3, [r3, #26]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	8b5b      	ldrh	r3, [r3, #26]
 800a234:	f003 0308 	and.w	r3, r3, #8
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d009      	beq.n	800a250 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	8b5b      	ldrh	r3, [r3, #26]
 800a240:	f023 0308 	bic.w	r3, r3, #8
 800a244:	b29a      	uxth	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff fa76 	bl	800973c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a25e:	4b0e      	ldr	r3, [pc, #56]	@ (800a298 <tcp_fasttmr+0xc4>)
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f819 	bl	800a29c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a26a:	4b0b      	ldr	r3, [pc, #44]	@ (800a298 <tcp_fasttmr+0xc4>)
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d000      	beq.n	800a274 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a272:	e7b8      	b.n	800a1e6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	607b      	str	r3, [r7, #4]
 800a278:	e002      	b.n	800a280 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1b3      	bne.n	800a1ee <tcp_fasttmr+0x1a>
    }
  }
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	2000810a 	.word	0x2000810a
 800a294:	20008100 	.word	0x20008100
 800a298:	20008108 	.word	0x20008108

0800a29c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a29c:	b590      	push	{r4, r7, lr}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d109      	bne.n	800a2be <tcp_process_refused_data+0x22>
 800a2aa:	4b37      	ldr	r3, [pc, #220]	@ (800a388 <tcp_process_refused_data+0xec>)
 800a2ac:	f240 6209 	movw	r2, #1545	@ 0x609
 800a2b0:	4936      	ldr	r1, [pc, #216]	@ (800a38c <tcp_process_refused_data+0xf0>)
 800a2b2:	4837      	ldr	r0, [pc, #220]	@ (800a390 <tcp_process_refused_data+0xf4>)
 800a2b4:	f00a fea6 	bl	8015004 <iprintf>
 800a2b8:	f06f 030f 	mvn.w	r3, #15
 800a2bc:	e060      	b.n	800a380 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2c2:	7b5b      	ldrb	r3, [r3, #13]
 800a2c4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00b      	beq.n	800a2f4 <tcp_process_refused_data+0x58>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6918      	ldr	r0, [r3, #16]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	47a0      	blx	r4
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
 800a2f2:	e007      	b.n	800a304 <tcp_process_refused_data+0x68>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f000 f8a4 	bl	800a448 <tcp_recv_null>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d12a      	bne.n	800a362 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	d033      	beq.n	800a37e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a31a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a31e:	d005      	beq.n	800a32c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a324:	3301      	adds	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <tcp_process_refused_data+0xb2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6918      	ldr	r0, [r3, #16]
 800a340:	2300      	movs	r3, #0
 800a342:	2200      	movs	r2, #0
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	47a0      	blx	r4
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
 800a34c:	e001      	b.n	800a352 <tcp_process_refused_data+0xb6>
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a356:	f113 0f0d 	cmn.w	r3, #13
 800a35a:	d110      	bne.n	800a37e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a35c:	f06f 030c 	mvn.w	r3, #12
 800a360:	e00e      	b.n	800a380 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a366:	f113 0f0d 	cmn.w	r3, #13
 800a36a:	d102      	bne.n	800a372 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a36c:	f06f 030c 	mvn.w	r3, #12
 800a370:	e006      	b.n	800a380 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a378:	f06f 0304 	mvn.w	r3, #4
 800a37c:	e000      	b.n	800a380 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	bd90      	pop	{r4, r7, pc}
 800a388:	08019b0c 	.word	0x08019b0c
 800a38c:	0801a01c 	.word	0x0801a01c
 800a390:	08019b50 	.word	0x08019b50

0800a394 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a39c:	e007      	b.n	800a3ae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f80a 	bl	800a3be <tcp_seg_free>
    seg = next;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f4      	bne.n	800a39e <tcp_segs_free+0xa>
  }
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b082      	sub	sp, #8
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fd6b 	bl	8008eb4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	2003      	movs	r0, #3
 800a3e2:	f7fd fee5 	bl	80081b0 <memp_free>
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_seg_copy+0x1c>
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a43c <tcp_seg_copy+0x4c>)
 800a400:	f240 6282 	movw	r2, #1666	@ 0x682
 800a404:	490e      	ldr	r1, [pc, #56]	@ (800a440 <tcp_seg_copy+0x50>)
 800a406:	480f      	ldr	r0, [pc, #60]	@ (800a444 <tcp_seg_copy+0x54>)
 800a408:	f00a fdfc 	bl	8015004 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a40c:	2003      	movs	r0, #3
 800a40e:	f7fd fe5f 	bl	80080d0 <memp_malloc>
 800a412:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <tcp_seg_copy+0x2e>
    return NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e00a      	b.n	800a434 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a41e:	2210      	movs	r2, #16
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f00b f813 	bl	801544e <memcpy>
  pbuf_ref(cseg->p);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fe fde1 	bl	8008ff4 <pbuf_ref>
  return cseg;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	08019b0c 	.word	0x08019b0c
 800a440:	0801a060 	.word	0x0801a060
 800a444:	08019b50 	.word	0x08019b50

0800a448 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d109      	bne.n	800a470 <tcp_recv_null+0x28>
 800a45c:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <tcp_recv_null+0x60>)
 800a45e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a462:	4912      	ldr	r1, [pc, #72]	@ (800a4ac <tcp_recv_null+0x64>)
 800a464:	4812      	ldr	r0, [pc, #72]	@ (800a4b0 <tcp_recv_null+0x68>)
 800a466:	f00a fdcd 	bl	8015004 <iprintf>
 800a46a:	f06f 030f 	mvn.w	r3, #15
 800a46e:	e016      	b.n	800a49e <tcp_recv_null+0x56>

  if (p != NULL) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	891b      	ldrh	r3, [r3, #8]
 800a47a:	4619      	mov	r1, r3
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f7ff fb17 	bl	8009ab0 <tcp_recved>
    pbuf_free(p);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fe fd16 	bl	8008eb4 <pbuf_free>
 800a488:	e008      	b.n	800a49c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a48a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d104      	bne.n	800a49c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a492:	68b8      	ldr	r0, [r7, #8]
 800a494:	f7ff f9bc 	bl	8009810 <tcp_close>
 800a498:	4603      	mov	r3, r0
 800a49a:	e000      	b.n	800a49e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	08019b0c 	.word	0x08019b0c
 800a4ac:	0801a07c 	.word	0x0801a07c
 800a4b0:	08019b50 	.word	0x08019b50

0800a4b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	db01      	blt.n	800a4ca <tcp_kill_prio+0x16>
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	e000      	b.n	800a4cc <tcp_kill_prio+0x18>
 800a4ca:	237f      	movs	r3, #127	@ 0x7f
 800a4cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d034      	beq.n	800a53e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4e2:	4b19      	ldr	r3, [pc, #100]	@ (800a548 <tcp_kill_prio+0x94>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e01f      	b.n	800a52a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	7d5b      	ldrb	r3, [r3, #21]
 800a4ee:	7afa      	ldrb	r2, [r7, #11]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d80c      	bhi.n	800a50e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a4f8:	7afa      	ldrb	r2, [r7, #11]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d112      	bne.n	800a524 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a4fe:	4b13      	ldr	r3, [pc, #76]	@ (800a54c <tcp_kill_prio+0x98>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d80a      	bhi.n	800a524 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a50e:	4b0f      	ldr	r3, [pc, #60]	@ (800a54c <tcp_kill_prio+0x98>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	7d5b      	ldrb	r3, [r3, #21]
 800a522:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1dc      	bne.n	800a4ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d004      	beq.n	800a540 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a536:	6938      	ldr	r0, [r7, #16]
 800a538:	f7ff fa54 	bl	80099e4 <tcp_abort>
 800a53c:	e000      	b.n	800a540 <tcp_kill_prio+0x8c>
    return;
 800a53e:	bf00      	nop
  }
}
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20008100 	.word	0x20008100
 800a54c:	200080f4 	.word	0x200080f4

0800a550 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	4603      	mov	r3, r0
 800a558:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	2b08      	cmp	r3, #8
 800a55e:	d009      	beq.n	800a574 <tcp_kill_state+0x24>
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	2b09      	cmp	r3, #9
 800a564:	d006      	beq.n	800a574 <tcp_kill_state+0x24>
 800a566:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d0 <tcp_kill_state+0x80>)
 800a568:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a56c:	4919      	ldr	r1, [pc, #100]	@ (800a5d4 <tcp_kill_state+0x84>)
 800a56e:	481a      	ldr	r0, [pc, #104]	@ (800a5d8 <tcp_kill_state+0x88>)
 800a570:	f00a fd48 	bl	8015004 <iprintf>

  inactivity = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a57c:	4b17      	ldr	r3, [pc, #92]	@ (800a5dc <tcp_kill_state+0x8c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e017      	b.n	800a5b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	7d1b      	ldrb	r3, [r3, #20]
 800a588:	79fa      	ldrb	r2, [r7, #7]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d10f      	bne.n	800a5ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a58e:	4b14      	ldr	r3, [pc, #80]	@ (800a5e0 <tcp_kill_state+0x90>)
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d807      	bhi.n	800a5ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a59e:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <tcp_kill_state+0x90>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1e4      	bne.n	800a584 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6938      	ldr	r0, [r7, #16]
 800a5c4:	f7ff f950 	bl	8009868 <tcp_abandon>
  }
}
 800a5c8:	bf00      	nop
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	08019b0c 	.word	0x08019b0c
 800a5d4:	0801a098 	.word	0x0801a098
 800a5d8:	08019b50 	.word	0x08019b50
 800a5dc:	20008100 	.word	0x20008100
 800a5e0:	200080f4 	.word	0x200080f4

0800a5e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5f2:	4b12      	ldr	r3, [pc, #72]	@ (800a63c <tcp_kill_timewait+0x58>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	e012      	b.n	800a620 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5fa:	4b11      	ldr	r3, [pc, #68]	@ (800a640 <tcp_kill_timewait+0x5c>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	429a      	cmp	r2, r3
 800a608:	d807      	bhi.n	800a61a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a60a:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <tcp_kill_timewait+0x5c>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	60fb      	str	r3, [r7, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e9      	bne.n	800a5fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f7ff f9d9 	bl	80099e4 <tcp_abort>
  }
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20008104 	.word	0x20008104
 800a640:	200080f4 	.word	0x200080f4

0800a644 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a64a:	4b10      	ldr	r3, [pc, #64]	@ (800a68c <tcp_handle_closepend+0x48>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a650:	e014      	b.n	800a67c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	8b5b      	ldrh	r3, [r3, #26]
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b00      	cmp	r3, #0
 800a662:	d009      	beq.n	800a678 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	8b5b      	ldrh	r3, [r3, #26]
 800a668:	f023 0308 	bic.w	r3, r3, #8
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff f862 	bl	800973c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e7      	bne.n	800a652 <tcp_handle_closepend+0xe>
  }
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20008100 	.word	0x20008100

0800a690 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a69a:	2001      	movs	r0, #1
 800a69c:	f7fd fd18 	bl	80080d0 <memp_malloc>
 800a6a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d126      	bne.n	800a6f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a6a8:	f7ff ffcc 	bl	800a644 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a6ac:	f7ff ff9a 	bl	800a5e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	f7fd fd0d 	bl	80080d0 <memp_malloc>
 800a6b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d11b      	bne.n	800a6f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a6be:	2009      	movs	r0, #9
 800a6c0:	f7ff ff46 	bl	800a550 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6c4:	2001      	movs	r0, #1
 800a6c6:	f7fd fd03 	bl	80080d0 <memp_malloc>
 800a6ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d111      	bne.n	800a6f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a6d2:	2008      	movs	r0, #8
 800a6d4:	f7ff ff3c 	bl	800a550 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f7fd fcf9 	bl	80080d0 <memp_malloc>
 800a6de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff fee3 	bl	800a4b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f7fd fcee 	bl	80080d0 <memp_malloc>
 800a6f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d03f      	beq.n	800a77c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a6fc:	229c      	movs	r2, #156	@ 0x9c
 800a6fe:	2100      	movs	r1, #0
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f00a fe13 	bl	801532c <memset>
    pcb->prio = prio;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	79fa      	ldrb	r2, [r7, #7]
 800a70a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a712:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a71c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	22ff      	movs	r2, #255	@ 0xff
 800a72a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a732:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2206      	movs	r2, #6
 800a738:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2206      	movs	r2, #6
 800a740:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a748:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <tcp_alloc+0xf8>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a75a:	4b0c      	ldr	r3, [pc, #48]	@ (800a78c <tcp_alloc+0xfc>)
 800a75c:	781a      	ldrb	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a768:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4a08      	ldr	r2, [pc, #32]	@ (800a790 <tcp_alloc+0x100>)
 800a770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a07      	ldr	r2, [pc, #28]	@ (800a794 <tcp_alloc+0x104>)
 800a778:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a77c:	68fb      	ldr	r3, [r7, #12]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	200080f4 	.word	0x200080f4
 800a78c:	2000810a 	.word	0x2000810a
 800a790:	0800a449 	.word	0x0800a449
 800a794:	006ddd00 	.word	0x006ddd00

0800a798 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d107      	bne.n	800a7b6 <tcp_pcb_purge+0x1e>
 800a7a6:	4b21      	ldr	r3, [pc, #132]	@ (800a82c <tcp_pcb_purge+0x94>)
 800a7a8:	f640 0251 	movw	r2, #2129	@ 0x851
 800a7ac:	4920      	ldr	r1, [pc, #128]	@ (800a830 <tcp_pcb_purge+0x98>)
 800a7ae:	4821      	ldr	r0, [pc, #132]	@ (800a834 <tcp_pcb_purge+0x9c>)
 800a7b0:	f00a fc28 	bl	8015004 <iprintf>
 800a7b4:	e037      	b.n	800a826 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d033      	beq.n	800a826 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a7c2:	2b0a      	cmp	r3, #10
 800a7c4:	d02f      	beq.n	800a826 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d02b      	beq.n	800a826 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d007      	beq.n	800a7e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe fb6a 	bl	8008eb4 <pbuf_free>
      pcb->refused_data = NULL;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f986 	bl	800ab00 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7fa:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fdc7 	bl	800a394 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7ff fdc2 	bl	800a394 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	08019b0c 	.word	0x08019b0c
 800a830:	0801a158 	.word	0x0801a158
 800a834:	08019b50 	.word	0x08019b50

0800a838 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <tcp_pcb_remove+0x1e>
 800a848:	4b3e      	ldr	r3, [pc, #248]	@ (800a944 <tcp_pcb_remove+0x10c>)
 800a84a:	f640 0283 	movw	r2, #2179	@ 0x883
 800a84e:	493e      	ldr	r1, [pc, #248]	@ (800a948 <tcp_pcb_remove+0x110>)
 800a850:	483e      	ldr	r0, [pc, #248]	@ (800a94c <tcp_pcb_remove+0x114>)
 800a852:	f00a fbd7 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <tcp_pcb_remove+0x32>
 800a85c:	4b39      	ldr	r3, [pc, #228]	@ (800a944 <tcp_pcb_remove+0x10c>)
 800a85e:	f640 0284 	movw	r2, #2180	@ 0x884
 800a862:	493b      	ldr	r1, [pc, #236]	@ (800a950 <tcp_pcb_remove+0x118>)
 800a864:	4839      	ldr	r0, [pc, #228]	@ (800a94c <tcp_pcb_remove+0x114>)
 800a866:	f00a fbcd 	bl	8015004 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	429a      	cmp	r2, r3
 800a872:	d105      	bne.n	800a880 <tcp_pcb_remove+0x48>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68da      	ldr	r2, [r3, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e013      	b.n	800a8a8 <tcp_pcb_remove+0x70>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	e00c      	b.n	800a8a2 <tcp_pcb_remove+0x6a>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d104      	bne.n	800a89c <tcp_pcb_remove+0x64>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68da      	ldr	r2, [r3, #12]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	60da      	str	r2, [r3, #12]
 800a89a:	e005      	b.n	800a8a8 <tcp_pcb_remove+0x70>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1ef      	bne.n	800a888 <tcp_pcb_remove+0x50>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a8ae:	6838      	ldr	r0, [r7, #0]
 800a8b0:	f7ff ff72 	bl	800a798 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	7d1b      	ldrb	r3, [r3, #20]
 800a8b8:	2b0a      	cmp	r3, #10
 800a8ba:	d013      	beq.n	800a8e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d00f      	beq.n	800a8e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	8b5b      	ldrh	r3, [r3, #26]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d009      	beq.n	800a8e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	8b5b      	ldrh	r3, [r3, #26]
 800a8d4:	f043 0302 	orr.w	r3, r3, #2
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8de:	6838      	ldr	r0, [r7, #0]
 800a8e0:	f003 fbc0 	bl	800e064 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	7d1b      	ldrb	r3, [r3, #20]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d020      	beq.n	800a92e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <tcp_pcb_remove+0xca>
 800a8f4:	4b13      	ldr	r3, [pc, #76]	@ (800a944 <tcp_pcb_remove+0x10c>)
 800a8f6:	f640 0293 	movw	r2, #2195	@ 0x893
 800a8fa:	4916      	ldr	r1, [pc, #88]	@ (800a954 <tcp_pcb_remove+0x11c>)
 800a8fc:	4813      	ldr	r0, [pc, #76]	@ (800a94c <tcp_pcb_remove+0x114>)
 800a8fe:	f00a fb81 	bl	8015004 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <tcp_pcb_remove+0xe0>
 800a90a:	4b0e      	ldr	r3, [pc, #56]	@ (800a944 <tcp_pcb_remove+0x10c>)
 800a90c:	f640 0294 	movw	r2, #2196	@ 0x894
 800a910:	4911      	ldr	r1, [pc, #68]	@ (800a958 <tcp_pcb_remove+0x120>)
 800a912:	480e      	ldr	r0, [pc, #56]	@ (800a94c <tcp_pcb_remove+0x114>)
 800a914:	f00a fb76 	bl	8015004 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <tcp_pcb_remove+0xf6>
 800a920:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <tcp_pcb_remove+0x10c>)
 800a922:	f640 0296 	movw	r2, #2198	@ 0x896
 800a926:	490d      	ldr	r1, [pc, #52]	@ (800a95c <tcp_pcb_remove+0x124>)
 800a928:	4808      	ldr	r0, [pc, #32]	@ (800a94c <tcp_pcb_remove+0x114>)
 800a92a:	f00a fb6b 	bl	8015004 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2200      	movs	r2, #0
 800a932:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	2200      	movs	r2, #0
 800a938:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a93a:	bf00      	nop
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	08019b0c 	.word	0x08019b0c
 800a948:	0801a174 	.word	0x0801a174
 800a94c:	08019b50 	.word	0x08019b50
 800a950:	0801a190 	.word	0x0801a190
 800a954:	0801a1b0 	.word	0x0801a1b0
 800a958:	0801a1c8 	.word	0x0801a1c8
 800a95c:	0801a1e4 	.word	0x0801a1e4

0800a960 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d106      	bne.n	800a97c <tcp_next_iss+0x1c>
 800a96e:	4b0a      	ldr	r3, [pc, #40]	@ (800a998 <tcp_next_iss+0x38>)
 800a970:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a974:	4909      	ldr	r1, [pc, #36]	@ (800a99c <tcp_next_iss+0x3c>)
 800a976:	480a      	ldr	r0, [pc, #40]	@ (800a9a0 <tcp_next_iss+0x40>)
 800a978:	f00a fb44 	bl	8015004 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a97c:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <tcp_next_iss+0x44>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4b09      	ldr	r3, [pc, #36]	@ (800a9a8 <tcp_next_iss+0x48>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4413      	add	r3, r2
 800a986:	4a07      	ldr	r2, [pc, #28]	@ (800a9a4 <tcp_next_iss+0x44>)
 800a988:	6013      	str	r3, [r2, #0]
  return iss;
 800a98a:	4b06      	ldr	r3, [pc, #24]	@ (800a9a4 <tcp_next_iss+0x44>)
 800a98c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	08019b0c 	.word	0x08019b0c
 800a99c:	0801a1fc 	.word	0x0801a1fc
 800a9a0:	08019b50 	.word	0x08019b50
 800a9a4:	20000034 	.word	0x20000034
 800a9a8:	200080f4 	.word	0x200080f4

0800a9ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <tcp_eff_send_mss_netif+0x22>
 800a9c0:	4b14      	ldr	r3, [pc, #80]	@ (800aa14 <tcp_eff_send_mss_netif+0x68>)
 800a9c2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a9c6:	4914      	ldr	r1, [pc, #80]	@ (800aa18 <tcp_eff_send_mss_netif+0x6c>)
 800a9c8:	4814      	ldr	r0, [pc, #80]	@ (800aa1c <tcp_eff_send_mss_netif+0x70>)
 800a9ca:	f00a fb1b 	bl	8015004 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a9d4:	89fb      	ldrh	r3, [r7, #14]
 800a9d6:	e019      	b.n	800aa0c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a9de:	8afb      	ldrh	r3, [r7, #22]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d012      	beq.n	800aa0a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a9e4:	2328      	movs	r3, #40	@ 0x28
 800a9e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a9e8:	8afa      	ldrh	r2, [r7, #22]
 800a9ea:	8abb      	ldrh	r3, [r7, #20]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d904      	bls.n	800a9fa <tcp_eff_send_mss_netif+0x4e>
 800a9f0:	8afa      	ldrh	r2, [r7, #22]
 800a9f2:	8abb      	ldrh	r3, [r7, #20]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	e000      	b.n	800a9fc <tcp_eff_send_mss_netif+0x50>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a9fe:	8a7a      	ldrh	r2, [r7, #18]
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	4293      	cmp	r3, r2
 800aa04:	bf28      	it	cs
 800aa06:	4613      	movcs	r3, r2
 800aa08:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	08019b0c 	.word	0x08019b0c
 800aa18:	0801a218 	.word	0x0801a218
 800aa1c:	08019b50 	.word	0x08019b50

0800aa20 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d119      	bne.n	800aa68 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800aa34:	4b10      	ldr	r3, [pc, #64]	@ (800aa78 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800aa36:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800aa3a:	4910      	ldr	r1, [pc, #64]	@ (800aa7c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800aa3c:	4810      	ldr	r0, [pc, #64]	@ (800aa80 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800aa3e:	f00a fae1 	bl	8015004 <iprintf>

  while (pcb != NULL) {
 800aa42:	e011      	b.n	800aa68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d108      	bne.n	800aa62 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fe ffc4 	bl	80099e4 <tcp_abort>
      pcb = next;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e002      	b.n	800aa68 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1ea      	bne.n	800aa44 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	08019b0c 	.word	0x08019b0c
 800aa7c:	0801a240 	.word	0x0801a240
 800aa80:	08019b50 	.word	0x08019b50

0800aa84 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d02a      	beq.n	800aaea <tcp_netif_ip_addr_changed+0x66>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d026      	beq.n	800aaea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800aa9c:	4b15      	ldr	r3, [pc, #84]	@ (800aaf4 <tcp_netif_ip_addr_changed+0x70>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ffbc 	bl	800aa20 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800aaa8:	4b13      	ldr	r3, [pc, #76]	@ (800aaf8 <tcp_netif_ip_addr_changed+0x74>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff ffb6 	bl	800aa20 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d017      	beq.n	800aaea <tcp_netif_ip_addr_changed+0x66>
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d013      	beq.n	800aaea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aac2:	4b0e      	ldr	r3, [pc, #56]	@ (800aafc <tcp_netif_ip_addr_changed+0x78>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	e00c      	b.n	800aae4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d103      	bne.n	800aade <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1ef      	bne.n	800aaca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20008100 	.word	0x20008100
 800aaf8:	200080f8 	.word	0x200080f8
 800aafc:	200080fc 	.word	0x200080fc

0800ab00 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d007      	beq.n	800ab20 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fc3d 	bl	800a394 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ab28:	b590      	push	{r4, r7, lr}
 800ab2a:	b08d      	sub	sp, #52	@ 0x34
 800ab2c:	af04      	add	r7, sp, #16
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d105      	bne.n	800ab44 <tcp_input+0x1c>
 800ab38:	4b9b      	ldr	r3, [pc, #620]	@ (800ada8 <tcp_input+0x280>)
 800ab3a:	2283      	movs	r2, #131	@ 0x83
 800ab3c:	499b      	ldr	r1, [pc, #620]	@ (800adac <tcp_input+0x284>)
 800ab3e:	489c      	ldr	r0, [pc, #624]	@ (800adb0 <tcp_input+0x288>)
 800ab40:	f00a fa60 	bl	8015004 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	4a9a      	ldr	r2, [pc, #616]	@ (800adb4 <tcp_input+0x28c>)
 800ab4a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	895b      	ldrh	r3, [r3, #10]
 800ab50:	2b13      	cmp	r3, #19
 800ab52:	f240 83d1 	bls.w	800b2f8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ab56:	4b98      	ldr	r3, [pc, #608]	@ (800adb8 <tcp_input+0x290>)
 800ab58:	695b      	ldr	r3, [r3, #20]
 800ab5a:	4a97      	ldr	r2, [pc, #604]	@ (800adb8 <tcp_input+0x290>)
 800ab5c:	6812      	ldr	r2, [r2, #0]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4618      	mov	r0, r3
 800ab62:	f008 fa19 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f040 83c7 	bne.w	800b2fc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab6e:	4b92      	ldr	r3, [pc, #584]	@ (800adb8 <tcp_input+0x290>)
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ab76:	2be0      	cmp	r3, #224	@ 0xe0
 800ab78:	f000 83c0 	beq.w	800b2fc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ab7c:	4b8d      	ldr	r3, [pc, #564]	@ (800adb4 <tcp_input+0x28c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	899b      	ldrh	r3, [r3, #12]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fc fe07 	bl	8007798 <lwip_htons>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	0b1b      	lsrs	r3, r3, #12
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ab96:	7cbb      	ldrb	r3, [r7, #18]
 800ab98:	2b13      	cmp	r3, #19
 800ab9a:	f240 83b1 	bls.w	800b300 <tcp_input+0x7d8>
 800ab9e:	7cbb      	ldrb	r3, [r7, #18]
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	891b      	ldrh	r3, [r3, #8]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	f200 83aa 	bhi.w	800b300 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800abac:	7cbb      	ldrb	r3, [r7, #18]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	3b14      	subs	r3, #20
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	4b81      	ldr	r3, [pc, #516]	@ (800adbc <tcp_input+0x294>)
 800abb6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800abb8:	4b81      	ldr	r3, [pc, #516]	@ (800adc0 <tcp_input+0x298>)
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	895a      	ldrh	r2, [r3, #10]
 800abc2:	7cbb      	ldrb	r3, [r7, #18]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d309      	bcc.n	800abde <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800abca:	4b7c      	ldr	r3, [pc, #496]	@ (800adbc <tcp_input+0x294>)
 800abcc:	881a      	ldrh	r2, [r3, #0]
 800abce:	4b7d      	ldr	r3, [pc, #500]	@ (800adc4 <tcp_input+0x29c>)
 800abd0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800abd2:	7cbb      	ldrb	r3, [r7, #18]
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fe f8e6 	bl	8008da8 <pbuf_remove_header>
 800abdc:	e04e      	b.n	800ac7c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <tcp_input+0xca>
 800abe6:	4b70      	ldr	r3, [pc, #448]	@ (800ada8 <tcp_input+0x280>)
 800abe8:	22c2      	movs	r2, #194	@ 0xc2
 800abea:	4977      	ldr	r1, [pc, #476]	@ (800adc8 <tcp_input+0x2a0>)
 800abec:	4870      	ldr	r0, [pc, #448]	@ (800adb0 <tcp_input+0x288>)
 800abee:	f00a fa09 	bl	8015004 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800abf2:	2114      	movs	r1, #20
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7fe f8d7 	bl	8008da8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	895a      	ldrh	r2, [r3, #10]
 800abfe:	4b71      	ldr	r3, [pc, #452]	@ (800adc4 <tcp_input+0x29c>)
 800ac00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ac02:	4b6e      	ldr	r3, [pc, #440]	@ (800adbc <tcp_input+0x294>)
 800ac04:	881a      	ldrh	r2, [r3, #0]
 800ac06:	4b6f      	ldr	r3, [pc, #444]	@ (800adc4 <tcp_input+0x29c>)
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ac0e:	4b6d      	ldr	r3, [pc, #436]	@ (800adc4 <tcp_input+0x29c>)
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7fe f8c7 	bl	8008da8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	895b      	ldrh	r3, [r3, #10]
 800ac20:	8a3a      	ldrh	r2, [r7, #16]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	f200 836e 	bhi.w	800b304 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	4a64      	ldr	r2, [pc, #400]	@ (800adc0 <tcp_input+0x298>)
 800ac30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	8a3a      	ldrh	r2, [r7, #16]
 800ac38:	4611      	mov	r1, r2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe f8b4 	bl	8008da8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	891a      	ldrh	r2, [r3, #8]
 800ac44:	8a3b      	ldrh	r3, [r7, #16]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	895b      	ldrh	r3, [r3, #10]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d005      	beq.n	800ac62 <tcp_input+0x13a>
 800ac56:	4b54      	ldr	r3, [pc, #336]	@ (800ada8 <tcp_input+0x280>)
 800ac58:	22df      	movs	r2, #223	@ 0xdf
 800ac5a:	495c      	ldr	r1, [pc, #368]	@ (800adcc <tcp_input+0x2a4>)
 800ac5c:	4854      	ldr	r0, [pc, #336]	@ (800adb0 <tcp_input+0x288>)
 800ac5e:	f00a f9d1 	bl	8015004 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	891a      	ldrh	r2, [r3, #8]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	891b      	ldrh	r3, [r3, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d005      	beq.n	800ac7c <tcp_input+0x154>
 800ac70:	4b4d      	ldr	r3, [pc, #308]	@ (800ada8 <tcp_input+0x280>)
 800ac72:	22e0      	movs	r2, #224	@ 0xe0
 800ac74:	4956      	ldr	r1, [pc, #344]	@ (800add0 <tcp_input+0x2a8>)
 800ac76:	484e      	ldr	r0, [pc, #312]	@ (800adb0 <tcp_input+0x288>)
 800ac78:	f00a f9c4 	bl	8015004 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ac7c:	4b4d      	ldr	r3, [pc, #308]	@ (800adb4 <tcp_input+0x28c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4a4b      	ldr	r2, [pc, #300]	@ (800adb4 <tcp_input+0x28c>)
 800ac86:	6814      	ldr	r4, [r2, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fc fd85 	bl	8007798 <lwip_htons>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ac92:	4b48      	ldr	r3, [pc, #288]	@ (800adb4 <tcp_input+0x28c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	885b      	ldrh	r3, [r3, #2]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	4a46      	ldr	r2, [pc, #280]	@ (800adb4 <tcp_input+0x28c>)
 800ac9c:	6814      	ldr	r4, [r2, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fc fd7a 	bl	8007798 <lwip_htons>
 800aca4:	4603      	mov	r3, r0
 800aca6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aca8:	4b42      	ldr	r3, [pc, #264]	@ (800adb4 <tcp_input+0x28c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	4a41      	ldr	r2, [pc, #260]	@ (800adb4 <tcp_input+0x28c>)
 800acb0:	6814      	ldr	r4, [r2, #0]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fc fd86 	bl	80077c4 <lwip_htonl>
 800acb8:	4603      	mov	r3, r0
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	4a45      	ldr	r2, [pc, #276]	@ (800add4 <tcp_input+0x2ac>)
 800acc0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800acc2:	4b3c      	ldr	r3, [pc, #240]	@ (800adb4 <tcp_input+0x28c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	4a3a      	ldr	r2, [pc, #232]	@ (800adb4 <tcp_input+0x28c>)
 800acca:	6814      	ldr	r4, [r2, #0]
 800accc:	4618      	mov	r0, r3
 800acce:	f7fc fd79 	bl	80077c4 <lwip_htonl>
 800acd2:	4603      	mov	r3, r0
 800acd4:	60a3      	str	r3, [r4, #8]
 800acd6:	68a3      	ldr	r3, [r4, #8]
 800acd8:	4a3f      	ldr	r2, [pc, #252]	@ (800add8 <tcp_input+0x2b0>)
 800acda:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800acdc:	4b35      	ldr	r3, [pc, #212]	@ (800adb4 <tcp_input+0x28c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	89db      	ldrh	r3, [r3, #14]
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	4a33      	ldr	r2, [pc, #204]	@ (800adb4 <tcp_input+0x28c>)
 800ace6:	6814      	ldr	r4, [r2, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fc fd55 	bl	8007798 <lwip_htons>
 800acee:	4603      	mov	r3, r0
 800acf0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800acf2:	4b30      	ldr	r3, [pc, #192]	@ (800adb4 <tcp_input+0x28c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	899b      	ldrh	r3, [r3, #12]
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fc fd4c 	bl	8007798 <lwip_htons>
 800ad00:	4603      	mov	r3, r0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	4b34      	ldr	r3, [pc, #208]	@ (800addc <tcp_input+0x2b4>)
 800ad0c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	891a      	ldrh	r2, [r3, #8]
 800ad12:	4b33      	ldr	r3, [pc, #204]	@ (800ade0 <tcp_input+0x2b8>)
 800ad14:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ad16:	4b31      	ldr	r3, [pc, #196]	@ (800addc <tcp_input+0x2b4>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00c      	beq.n	800ad3c <tcp_input+0x214>
    tcplen++;
 800ad22:	4b2f      	ldr	r3, [pc, #188]	@ (800ade0 <tcp_input+0x2b8>)
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	4b2d      	ldr	r3, [pc, #180]	@ (800ade0 <tcp_input+0x2b8>)
 800ad2c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	891a      	ldrh	r2, [r3, #8]
 800ad32:	4b2b      	ldr	r3, [pc, #172]	@ (800ade0 <tcp_input+0x2b8>)
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	f200 82e6 	bhi.w	800b308 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad40:	4b28      	ldr	r3, [pc, #160]	@ (800ade4 <tcp_input+0x2bc>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	61fb      	str	r3, [r7, #28]
 800ad46:	e09d      	b.n	800ae84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	7d1b      	ldrb	r3, [r3, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d105      	bne.n	800ad5c <tcp_input+0x234>
 800ad50:	4b15      	ldr	r3, [pc, #84]	@ (800ada8 <tcp_input+0x280>)
 800ad52:	22fb      	movs	r2, #251	@ 0xfb
 800ad54:	4924      	ldr	r1, [pc, #144]	@ (800ade8 <tcp_input+0x2c0>)
 800ad56:	4816      	ldr	r0, [pc, #88]	@ (800adb0 <tcp_input+0x288>)
 800ad58:	f00a f954 	bl	8015004 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	7d1b      	ldrb	r3, [r3, #20]
 800ad60:	2b0a      	cmp	r3, #10
 800ad62:	d105      	bne.n	800ad70 <tcp_input+0x248>
 800ad64:	4b10      	ldr	r3, [pc, #64]	@ (800ada8 <tcp_input+0x280>)
 800ad66:	22fc      	movs	r2, #252	@ 0xfc
 800ad68:	4920      	ldr	r1, [pc, #128]	@ (800adec <tcp_input+0x2c4>)
 800ad6a:	4811      	ldr	r0, [pc, #68]	@ (800adb0 <tcp_input+0x288>)
 800ad6c:	f00a f94a 	bl	8015004 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	7d1b      	ldrb	r3, [r3, #20]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d105      	bne.n	800ad84 <tcp_input+0x25c>
 800ad78:	4b0b      	ldr	r3, [pc, #44]	@ (800ada8 <tcp_input+0x280>)
 800ad7a:	22fd      	movs	r2, #253	@ 0xfd
 800ad7c:	491c      	ldr	r1, [pc, #112]	@ (800adf0 <tcp_input+0x2c8>)
 800ad7e:	480c      	ldr	r0, [pc, #48]	@ (800adb0 <tcp_input+0x288>)
 800ad80:	f00a f940 	bl	8015004 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	7a1b      	ldrb	r3, [r3, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d033      	beq.n	800adf4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	7a1a      	ldrb	r2, [r3, #8]
 800ad90:	4b09      	ldr	r3, [pc, #36]	@ (800adb8 <tcp_input+0x290>)
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ad98:	3301      	adds	r3, #1
 800ad9a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d029      	beq.n	800adf4 <tcp_input+0x2cc>
      prev = pcb;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	61bb      	str	r3, [r7, #24]
      continue;
 800ada4:	e06b      	b.n	800ae7e <tcp_input+0x356>
 800ada6:	bf00      	nop
 800ada8:	0801a274 	.word	0x0801a274
 800adac:	0801a2a8 	.word	0x0801a2a8
 800adb0:	0801a2c0 	.word	0x0801a2c0
 800adb4:	2000811c 	.word	0x2000811c
 800adb8:	200050b8 	.word	0x200050b8
 800adbc:	20008120 	.word	0x20008120
 800adc0:	20008124 	.word	0x20008124
 800adc4:	20008122 	.word	0x20008122
 800adc8:	0801a2e8 	.word	0x0801a2e8
 800adcc:	0801a2f8 	.word	0x0801a2f8
 800add0:	0801a304 	.word	0x0801a304
 800add4:	2000812c 	.word	0x2000812c
 800add8:	20008130 	.word	0x20008130
 800addc:	20008138 	.word	0x20008138
 800ade0:	20008136 	.word	0x20008136
 800ade4:	20008100 	.word	0x20008100
 800ade8:	0801a324 	.word	0x0801a324
 800adec:	0801a34c 	.word	0x0801a34c
 800adf0:	0801a378 	.word	0x0801a378
    }

    if (pcb->remote_port == tcphdr->src &&
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	8b1a      	ldrh	r2, [r3, #24]
 800adf8:	4b72      	ldr	r3, [pc, #456]	@ (800afc4 <tcp_input+0x49c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d13a      	bne.n	800ae7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	8ada      	ldrh	r2, [r3, #22]
 800ae08:	4b6e      	ldr	r3, [pc, #440]	@ (800afc4 <tcp_input+0x49c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d132      	bne.n	800ae7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	4b6b      	ldr	r3, [pc, #428]	@ (800afc8 <tcp_input+0x4a0>)
 800ae1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d12c      	bne.n	800ae7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	4b68      	ldr	r3, [pc, #416]	@ (800afc8 <tcp_input+0x4a0>)
 800ae26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d126      	bne.n	800ae7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d106      	bne.n	800ae44 <tcp_input+0x31c>
 800ae36:	4b65      	ldr	r3, [pc, #404]	@ (800afcc <tcp_input+0x4a4>)
 800ae38:	f240 120d 	movw	r2, #269	@ 0x10d
 800ae3c:	4964      	ldr	r1, [pc, #400]	@ (800afd0 <tcp_input+0x4a8>)
 800ae3e:	4865      	ldr	r0, [pc, #404]	@ (800afd4 <tcp_input+0x4ac>)
 800ae40:	f00a f8e0 	bl	8015004 <iprintf>
      if (prev != NULL) {
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <tcp_input+0x338>
        prev->next = pcb->next;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ae52:	4b61      	ldr	r3, [pc, #388]	@ (800afd8 <tcp_input+0x4b0>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ae5a:	4a5f      	ldr	r2, [pc, #380]	@ (800afd8 <tcp_input+0x4b0>)
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	69fa      	ldr	r2, [r7, #28]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d111      	bne.n	800ae8e <tcp_input+0x366>
 800ae6a:	4b58      	ldr	r3, [pc, #352]	@ (800afcc <tcp_input+0x4a4>)
 800ae6c:	f240 1215 	movw	r2, #277	@ 0x115
 800ae70:	495a      	ldr	r1, [pc, #360]	@ (800afdc <tcp_input+0x4b4>)
 800ae72:	4858      	ldr	r0, [pc, #352]	@ (800afd4 <tcp_input+0x4ac>)
 800ae74:	f00a f8c6 	bl	8015004 <iprintf>
      break;
 800ae78:	e009      	b.n	800ae8e <tcp_input+0x366>
    }
    prev = pcb;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f47f af5e 	bne.w	800ad48 <tcp_input+0x220>
 800ae8c:	e000      	b.n	800ae90 <tcp_input+0x368>
      break;
 800ae8e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f040 80aa 	bne.w	800afec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae98:	4b51      	ldr	r3, [pc, #324]	@ (800afe0 <tcp_input+0x4b8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	61fb      	str	r3, [r7, #28]
 800ae9e:	e03f      	b.n	800af20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	7d1b      	ldrb	r3, [r3, #20]
 800aea4:	2b0a      	cmp	r3, #10
 800aea6:	d006      	beq.n	800aeb6 <tcp_input+0x38e>
 800aea8:	4b48      	ldr	r3, [pc, #288]	@ (800afcc <tcp_input+0x4a4>)
 800aeaa:	f240 121f 	movw	r2, #287	@ 0x11f
 800aeae:	494d      	ldr	r1, [pc, #308]	@ (800afe4 <tcp_input+0x4bc>)
 800aeb0:	4848      	ldr	r0, [pc, #288]	@ (800afd4 <tcp_input+0x4ac>)
 800aeb2:	f00a f8a7 	bl	8015004 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	7a1b      	ldrb	r3, [r3, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d009      	beq.n	800aed2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	7a1a      	ldrb	r2, [r3, #8]
 800aec2:	4b41      	ldr	r3, [pc, #260]	@ (800afc8 <tcp_input+0x4a0>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800aeca:	3301      	adds	r3, #1
 800aecc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aece:	429a      	cmp	r2, r3
 800aed0:	d122      	bne.n	800af18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	8b1a      	ldrh	r2, [r3, #24]
 800aed6:	4b3b      	ldr	r3, [pc, #236]	@ (800afc4 <tcp_input+0x49c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	b29b      	uxth	r3, r3
 800aede:	429a      	cmp	r2, r3
 800aee0:	d11b      	bne.n	800af1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	8ada      	ldrh	r2, [r3, #22]
 800aee6:	4b37      	ldr	r3, [pc, #220]	@ (800afc4 <tcp_input+0x49c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	885b      	ldrh	r3, [r3, #2]
 800aeec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d113      	bne.n	800af1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	4b34      	ldr	r3, [pc, #208]	@ (800afc8 <tcp_input+0x4a0>)
 800aef8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d10d      	bne.n	800af1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	4b31      	ldr	r3, [pc, #196]	@ (800afc8 <tcp_input+0x4a0>)
 800af04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800af06:	429a      	cmp	r2, r3
 800af08:	d107      	bne.n	800af1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800af0a:	69f8      	ldr	r0, [r7, #28]
 800af0c:	f000 fb56 	bl	800b5bc <tcp_timewait_input>
        }
        pbuf_free(p);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7fd ffcf 	bl	8008eb4 <pbuf_free>
        return;
 800af16:	e1fd      	b.n	800b314 <tcp_input+0x7ec>
        continue;
 800af18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1bc      	bne.n	800aea0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af2a:	4b2f      	ldr	r3, [pc, #188]	@ (800afe8 <tcp_input+0x4c0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e02a      	b.n	800af88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	7a1b      	ldrb	r3, [r3, #8]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00c      	beq.n	800af54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	7a1a      	ldrb	r2, [r3, #8]
 800af3e:	4b22      	ldr	r3, [pc, #136]	@ (800afc8 <tcp_input+0x4a0>)
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af46:	3301      	adds	r3, #1
 800af48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d002      	beq.n	800af54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	61bb      	str	r3, [r7, #24]
        continue;
 800af52:	e016      	b.n	800af82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	8ada      	ldrh	r2, [r3, #22]
 800af58:	4b1a      	ldr	r3, [pc, #104]	@ (800afc4 <tcp_input+0x49c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	885b      	ldrh	r3, [r3, #2]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	429a      	cmp	r2, r3
 800af62:	d10c      	bne.n	800af7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	4b17      	ldr	r3, [pc, #92]	@ (800afc8 <tcp_input+0x4a0>)
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d00f      	beq.n	800af90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00d      	beq.n	800af92 <tcp_input+0x46a>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1d1      	bne.n	800af32 <tcp_input+0x40a>
 800af8e:	e000      	b.n	800af92 <tcp_input+0x46a>
            break;
 800af90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d029      	beq.n	800afec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800afa6:	4b10      	ldr	r3, [pc, #64]	@ (800afe8 <tcp_input+0x4c0>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800afae:	4a0e      	ldr	r2, [pc, #56]	@ (800afe8 <tcp_input+0x4c0>)
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800afb4:	6978      	ldr	r0, [r7, #20]
 800afb6:	f000 fa03 	bl	800b3c0 <tcp_listen_input>
      }
      pbuf_free(p);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7fd ff7a 	bl	8008eb4 <pbuf_free>
      return;
 800afc0:	e1a8      	b.n	800b314 <tcp_input+0x7ec>
 800afc2:	bf00      	nop
 800afc4:	2000811c 	.word	0x2000811c
 800afc8:	200050b8 	.word	0x200050b8
 800afcc:	0801a274 	.word	0x0801a274
 800afd0:	0801a3a0 	.word	0x0801a3a0
 800afd4:	0801a2c0 	.word	0x0801a2c0
 800afd8:	20008100 	.word	0x20008100
 800afdc:	0801a3cc 	.word	0x0801a3cc
 800afe0:	20008104 	.word	0x20008104
 800afe4:	0801a3f8 	.word	0x0801a3f8
 800afe8:	200080fc 	.word	0x200080fc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 8158 	beq.w	800b2a4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800aff4:	4b95      	ldr	r3, [pc, #596]	@ (800b24c <tcp_input+0x724>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	891a      	ldrh	r2, [r3, #8]
 800affe:	4b93      	ldr	r3, [pc, #588]	@ (800b24c <tcp_input+0x724>)
 800b000:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b002:	4a92      	ldr	r2, [pc, #584]	@ (800b24c <tcp_input+0x724>)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b008:	4b91      	ldr	r3, [pc, #580]	@ (800b250 <tcp_input+0x728>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a8f      	ldr	r2, [pc, #572]	@ (800b24c <tcp_input+0x724>)
 800b00e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b010:	4b90      	ldr	r3, [pc, #576]	@ (800b254 <tcp_input+0x72c>)
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b016:	4b90      	ldr	r3, [pc, #576]	@ (800b258 <tcp_input+0x730>)
 800b018:	2200      	movs	r2, #0
 800b01a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b01c:	4b8f      	ldr	r3, [pc, #572]	@ (800b25c <tcp_input+0x734>)
 800b01e:	2200      	movs	r2, #0
 800b020:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b022:	4b8f      	ldr	r3, [pc, #572]	@ (800b260 <tcp_input+0x738>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	f003 0308 	and.w	r3, r3, #8
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d006      	beq.n	800b03c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	7b5b      	ldrb	r3, [r3, #13]
 800b032:	f043 0301 	orr.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b040:	2b00      	cmp	r3, #0
 800b042:	d017      	beq.n	800b074 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b044:	69f8      	ldr	r0, [r7, #28]
 800b046:	f7ff f929 	bl	800a29c <tcp_process_refused_data>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f113 0f0d 	cmn.w	r3, #13
 800b050:	d007      	beq.n	800b062 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00c      	beq.n	800b074 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b05a:	4b82      	ldr	r3, [pc, #520]	@ (800b264 <tcp_input+0x73c>)
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d008      	beq.n	800b074 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b066:	2b00      	cmp	r3, #0
 800b068:	f040 80e3 	bne.w	800b232 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b06c:	69f8      	ldr	r0, [r7, #28]
 800b06e:	f003 fdfd 	bl	800ec6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b072:	e0de      	b.n	800b232 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b074:	4a7c      	ldr	r2, [pc, #496]	@ (800b268 <tcp_input+0x740>)
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b07a:	69f8      	ldr	r0, [r7, #28]
 800b07c:	f000 fb18 	bl	800b6b0 <tcp_process>
 800b080:	4603      	mov	r3, r0
 800b082:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b088:	f113 0f0d 	cmn.w	r3, #13
 800b08c:	f000 80d3 	beq.w	800b236 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b090:	4b71      	ldr	r3, [pc, #452]	@ (800b258 <tcp_input+0x730>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 0308 	and.w	r3, r3, #8
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d015      	beq.n	800b0c8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d008      	beq.n	800b0b8 <tcp_input+0x590>
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	6912      	ldr	r2, [r2, #16]
 800b0b0:	f06f 010d 	mvn.w	r1, #13
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b0b8:	69f9      	ldr	r1, [r7, #28]
 800b0ba:	486c      	ldr	r0, [pc, #432]	@ (800b26c <tcp_input+0x744>)
 800b0bc:	f7ff fbbc 	bl	800a838 <tcp_pcb_remove>
        tcp_free(pcb);
 800b0c0:	69f8      	ldr	r0, [r7, #28]
 800b0c2:	f7fe f9a7 	bl	8009414 <tcp_free>
 800b0c6:	e0da      	b.n	800b27e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b0cc:	4b63      	ldr	r3, [pc, #396]	@ (800b25c <tcp_input+0x734>)
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01d      	beq.n	800b110 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b0d4:	4b61      	ldr	r3, [pc, #388]	@ (800b25c <tcp_input+0x734>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00a      	beq.n	800b0fa <tcp_input+0x5d2>
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	6910      	ldr	r0, [r2, #16]
 800b0ee:	89fa      	ldrh	r2, [r7, #14]
 800b0f0:	69f9      	ldr	r1, [r7, #28]
 800b0f2:	4798      	blx	r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	74fb      	strb	r3, [r7, #19]
 800b0f8:	e001      	b.n	800b0fe <tcp_input+0x5d6>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b0fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b102:	f113 0f0d 	cmn.w	r3, #13
 800b106:	f000 8098 	beq.w	800b23a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b10a:	4b54      	ldr	r3, [pc, #336]	@ (800b25c <tcp_input+0x734>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b110:	69f8      	ldr	r0, [r7, #28]
 800b112:	f000 f915 	bl	800b340 <tcp_input_delayed_close>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f040 8090 	bne.w	800b23e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b11e:	4b4d      	ldr	r3, [pc, #308]	@ (800b254 <tcp_input+0x72c>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d041      	beq.n	800b1aa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d006      	beq.n	800b13c <tcp_input+0x614>
 800b12e:	4b50      	ldr	r3, [pc, #320]	@ (800b270 <tcp_input+0x748>)
 800b130:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b134:	494f      	ldr	r1, [pc, #316]	@ (800b274 <tcp_input+0x74c>)
 800b136:	4850      	ldr	r0, [pc, #320]	@ (800b278 <tcp_input+0x750>)
 800b138:	f009 ff64 	bl	8015004 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	8b5b      	ldrh	r3, [r3, #26]
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b148:	4b42      	ldr	r3, [pc, #264]	@ (800b254 <tcp_input+0x72c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fd feb1 	bl	8008eb4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b152:	69f8      	ldr	r0, [r7, #28]
 800b154:	f7fe fc46 	bl	80099e4 <tcp_abort>
            goto aborted;
 800b158:	e091      	b.n	800b27e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00c      	beq.n	800b17e <tcp_input+0x656>
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	6918      	ldr	r0, [r3, #16]
 800b16e:	4b39      	ldr	r3, [pc, #228]	@ (800b254 <tcp_input+0x72c>)
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	2300      	movs	r3, #0
 800b174:	69f9      	ldr	r1, [r7, #28]
 800b176:	47a0      	blx	r4
 800b178:	4603      	mov	r3, r0
 800b17a:	74fb      	strb	r3, [r7, #19]
 800b17c:	e008      	b.n	800b190 <tcp_input+0x668>
 800b17e:	4b35      	ldr	r3, [pc, #212]	@ (800b254 <tcp_input+0x72c>)
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	2300      	movs	r3, #0
 800b184:	69f9      	ldr	r1, [r7, #28]
 800b186:	2000      	movs	r0, #0
 800b188:	f7ff f95e 	bl	800a448 <tcp_recv_null>
 800b18c:	4603      	mov	r3, r0
 800b18e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b194:	f113 0f0d 	cmn.w	r3, #13
 800b198:	d053      	beq.n	800b242 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b19a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b1a2:	4b2c      	ldr	r3, [pc, #176]	@ (800b254 <tcp_input+0x72c>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b258 <tcp_input+0x730>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d030      	beq.n	800b218 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d009      	beq.n	800b1d2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1c2:	7b5a      	ldrb	r2, [r3, #13]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1c8:	f042 0220 	orr.w	r2, r2, #32
 800b1cc:	b2d2      	uxtb	r2, r2
 800b1ce:	735a      	strb	r2, [r3, #13]
 800b1d0:	e022      	b.n	800b218 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1da:	d005      	beq.n	800b1e8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <tcp_input+0x6e2>
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	6918      	ldr	r0, [r3, #16]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	47a0      	blx	r4
 800b204:	4603      	mov	r3, r0
 800b206:	74fb      	strb	r3, [r7, #19]
 800b208:	e001      	b.n	800b20e <tcp_input+0x6e6>
 800b20a:	2300      	movs	r3, #0
 800b20c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b20e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b212:	f113 0f0d 	cmn.w	r3, #13
 800b216:	d016      	beq.n	800b246 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b218:	4b13      	ldr	r3, [pc, #76]	@ (800b268 <tcp_input+0x740>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b21e:	69f8      	ldr	r0, [r7, #28]
 800b220:	f000 f88e 	bl	800b340 <tcp_input_delayed_close>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d128      	bne.n	800b27c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b22a:	69f8      	ldr	r0, [r7, #28]
 800b22c:	f002 ff1a 	bl	800e064 <tcp_output>
 800b230:	e025      	b.n	800b27e <tcp_input+0x756>
        goto aborted;
 800b232:	bf00      	nop
 800b234:	e023      	b.n	800b27e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b236:	bf00      	nop
 800b238:	e021      	b.n	800b27e <tcp_input+0x756>
              goto aborted;
 800b23a:	bf00      	nop
 800b23c:	e01f      	b.n	800b27e <tcp_input+0x756>
          goto aborted;
 800b23e:	bf00      	nop
 800b240:	e01d      	b.n	800b27e <tcp_input+0x756>
            goto aborted;
 800b242:	bf00      	nop
 800b244:	e01b      	b.n	800b27e <tcp_input+0x756>
              goto aborted;
 800b246:	bf00      	nop
 800b248:	e019      	b.n	800b27e <tcp_input+0x756>
 800b24a:	bf00      	nop
 800b24c:	2000810c 	.word	0x2000810c
 800b250:	2000811c 	.word	0x2000811c
 800b254:	2000813c 	.word	0x2000813c
 800b258:	20008139 	.word	0x20008139
 800b25c:	20008134 	.word	0x20008134
 800b260:	20008138 	.word	0x20008138
 800b264:	20008136 	.word	0x20008136
 800b268:	20008140 	.word	0x20008140
 800b26c:	20008100 	.word	0x20008100
 800b270:	0801a274 	.word	0x0801a274
 800b274:	0801a428 	.word	0x0801a428
 800b278:	0801a2c0 	.word	0x0801a2c0
          goto aborted;
 800b27c:	bf00      	nop
    tcp_input_pcb = NULL;
 800b27e:	4b27      	ldr	r3, [pc, #156]	@ (800b31c <tcp_input+0x7f4>)
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b284:	4b26      	ldr	r3, [pc, #152]	@ (800b320 <tcp_input+0x7f8>)
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b28a:	4b26      	ldr	r3, [pc, #152]	@ (800b324 <tcp_input+0x7fc>)
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d03f      	beq.n	800b312 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b292:	4b24      	ldr	r3, [pc, #144]	@ (800b324 <tcp_input+0x7fc>)
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	4618      	mov	r0, r3
 800b298:	f7fd fe0c 	bl	8008eb4 <pbuf_free>
      inseg.p = NULL;
 800b29c:	4b21      	ldr	r3, [pc, #132]	@ (800b324 <tcp_input+0x7fc>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b2a2:	e036      	b.n	800b312 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b2a4:	4b20      	ldr	r3, [pc, #128]	@ (800b328 <tcp_input+0x800>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	899b      	ldrh	r3, [r3, #12]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fc fa73 	bl	8007798 <lwip_htons>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d118      	bne.n	800b2f0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2be:	4b1b      	ldr	r3, [pc, #108]	@ (800b32c <tcp_input+0x804>)
 800b2c0:	6819      	ldr	r1, [r3, #0]
 800b2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b330 <tcp_input+0x808>)
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b334 <tcp_input+0x80c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2ce:	4b16      	ldr	r3, [pc, #88]	@ (800b328 <tcp_input+0x800>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2d2:	885b      	ldrh	r3, [r3, #2]
 800b2d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b2d6:	4a14      	ldr	r2, [pc, #80]	@ (800b328 <tcp_input+0x800>)
 800b2d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b2da:	8812      	ldrh	r2, [r2, #0]
 800b2dc:	b292      	uxth	r2, r2
 800b2de:	9202      	str	r2, [sp, #8]
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <tcp_input+0x810>)
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4b15      	ldr	r3, [pc, #84]	@ (800b33c <tcp_input+0x814>)
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	f003 fc6e 	bl	800ebcc <tcp_rst>
    pbuf_free(p);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fd fddf 	bl	8008eb4 <pbuf_free>
  return;
 800b2f6:	e00c      	b.n	800b312 <tcp_input+0x7ea>
    goto dropped;
 800b2f8:	bf00      	nop
 800b2fa:	e006      	b.n	800b30a <tcp_input+0x7e2>
    goto dropped;
 800b2fc:	bf00      	nop
 800b2fe:	e004      	b.n	800b30a <tcp_input+0x7e2>
    goto dropped;
 800b300:	bf00      	nop
 800b302:	e002      	b.n	800b30a <tcp_input+0x7e2>
      goto dropped;
 800b304:	bf00      	nop
 800b306:	e000      	b.n	800b30a <tcp_input+0x7e2>
      goto dropped;
 800b308:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7fd fdd2 	bl	8008eb4 <pbuf_free>
 800b310:	e000      	b.n	800b314 <tcp_input+0x7ec>
  return;
 800b312:	bf00      	nop
}
 800b314:	3724      	adds	r7, #36	@ 0x24
 800b316:	46bd      	mov	sp, r7
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20008140 	.word	0x20008140
 800b320:	2000813c 	.word	0x2000813c
 800b324:	2000810c 	.word	0x2000810c
 800b328:	2000811c 	.word	0x2000811c
 800b32c:	20008130 	.word	0x20008130
 800b330:	20008136 	.word	0x20008136
 800b334:	2000812c 	.word	0x2000812c
 800b338:	200050c8 	.word	0x200050c8
 800b33c:	200050cc 	.word	0x200050cc

0800b340 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <tcp_input_delayed_close+0x1c>
 800b34e:	4b17      	ldr	r3, [pc, #92]	@ (800b3ac <tcp_input_delayed_close+0x6c>)
 800b350:	f240 225a 	movw	r2, #602	@ 0x25a
 800b354:	4916      	ldr	r1, [pc, #88]	@ (800b3b0 <tcp_input_delayed_close+0x70>)
 800b356:	4817      	ldr	r0, [pc, #92]	@ (800b3b4 <tcp_input_delayed_close+0x74>)
 800b358:	f009 fe54 	bl	8015004 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b35c:	4b16      	ldr	r3, [pc, #88]	@ (800b3b8 <tcp_input_delayed_close+0x78>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 0310 	and.w	r3, r3, #16
 800b364:	2b00      	cmp	r3, #0
 800b366:	d01c      	beq.n	800b3a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8b5b      	ldrh	r3, [r3, #26]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10d      	bne.n	800b390 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d008      	beq.n	800b390 <tcp_input_delayed_close+0x50>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	6912      	ldr	r2, [r2, #16]
 800b388:	f06f 010e 	mvn.w	r1, #14
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	480a      	ldr	r0, [pc, #40]	@ (800b3bc <tcp_input_delayed_close+0x7c>)
 800b394:	f7ff fa50 	bl	800a838 <tcp_pcb_remove>
    tcp_free(pcb);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7fe f83b 	bl	8009414 <tcp_free>
    return 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	0801a274 	.word	0x0801a274
 800b3b0:	0801a444 	.word	0x0801a444
 800b3b4:	0801a2c0 	.word	0x0801a2c0
 800b3b8:	20008139 	.word	0x20008139
 800b3bc:	20008100 	.word	0x20008100

0800b3c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b08b      	sub	sp, #44	@ 0x2c
 800b3c4:	af04      	add	r7, sp, #16
 800b3c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b3c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b588 <tcp_listen_input+0x1c8>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f040 80d2 	bne.w	800b57a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <tcp_listen_input+0x2a>
 800b3dc:	4b6b      	ldr	r3, [pc, #428]	@ (800b58c <tcp_listen_input+0x1cc>)
 800b3de:	f240 2281 	movw	r2, #641	@ 0x281
 800b3e2:	496b      	ldr	r1, [pc, #428]	@ (800b590 <tcp_listen_input+0x1d0>)
 800b3e4:	486b      	ldr	r0, [pc, #428]	@ (800b594 <tcp_listen_input+0x1d4>)
 800b3e6:	f009 fe0d 	bl	8015004 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b3ea:	4b67      	ldr	r3, [pc, #412]	@ (800b588 <tcp_listen_input+0x1c8>)
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f003 0310 	and.w	r3, r3, #16
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d019      	beq.n	800b42a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3f6:	4b68      	ldr	r3, [pc, #416]	@ (800b598 <tcp_listen_input+0x1d8>)
 800b3f8:	6819      	ldr	r1, [r3, #0]
 800b3fa:	4b68      	ldr	r3, [pc, #416]	@ (800b59c <tcp_listen_input+0x1dc>)
 800b3fc:	881b      	ldrh	r3, [r3, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	4b67      	ldr	r3, [pc, #412]	@ (800b5a0 <tcp_listen_input+0x1e0>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b406:	4b67      	ldr	r3, [pc, #412]	@ (800b5a4 <tcp_listen_input+0x1e4>)
 800b408:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b40a:	885b      	ldrh	r3, [r3, #2]
 800b40c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b40e:	4a65      	ldr	r2, [pc, #404]	@ (800b5a4 <tcp_listen_input+0x1e4>)
 800b410:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b412:	8812      	ldrh	r2, [r2, #0]
 800b414:	b292      	uxth	r2, r2
 800b416:	9202      	str	r2, [sp, #8]
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	4b63      	ldr	r3, [pc, #396]	@ (800b5a8 <tcp_listen_input+0x1e8>)
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	4b63      	ldr	r3, [pc, #396]	@ (800b5ac <tcp_listen_input+0x1ec>)
 800b420:	4602      	mov	r2, r0
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f003 fbd2 	bl	800ebcc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b428:	e0a9      	b.n	800b57e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b42a:	4b57      	ldr	r3, [pc, #348]	@ (800b588 <tcp_listen_input+0x1c8>)
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	f003 0302 	and.w	r3, r3, #2
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80a3 	beq.w	800b57e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7d5b      	ldrb	r3, [r3, #21]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff f927 	bl	800a690 <tcp_alloc>
 800b442:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d111      	bne.n	800b46e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <tcp_listen_input+0xa8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	6910      	ldr	r0, [r2, #16]
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	2100      	movs	r1, #0
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	73bb      	strb	r3, [r7, #14]
      return;
 800b466:	e08b      	b.n	800b580 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b468:	23f0      	movs	r3, #240	@ 0xf0
 800b46a:	73bb      	strb	r3, [r7, #14]
      return;
 800b46c:	e088      	b.n	800b580 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b46e:	4b50      	ldr	r3, [pc, #320]	@ (800b5b0 <tcp_listen_input+0x1f0>)
 800b470:	695a      	ldr	r2, [r3, #20]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b476:	4b4e      	ldr	r3, [pc, #312]	@ (800b5b0 <tcp_listen_input+0x1f0>)
 800b478:	691a      	ldr	r2, [r3, #16]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	8ada      	ldrh	r2, [r3, #22]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b486:	4b47      	ldr	r3, [pc, #284]	@ (800b5a4 <tcp_listen_input+0x1e4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	b29a      	uxth	r2, r3
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2203      	movs	r2, #3
 800b496:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b498:	4b41      	ldr	r3, [pc, #260]	@ (800b5a0 <tcp_listen_input+0x1e0>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b4aa:	6978      	ldr	r0, [r7, #20]
 800b4ac:	f7ff fa58 	bl	800a960 <tcp_next_iss>
 800b4b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b4ca:	4b35      	ldr	r3, [pc, #212]	@ (800b5a0 <tcp_listen_input+0x1e0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	1e5a      	subs	r2, r3, #1
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691a      	ldr	r2, [r3, #16]
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7a5b      	ldrb	r3, [r3, #9]
 800b4e6:	f003 030c 	and.w	r3, r3, #12
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	7a1a      	ldrb	r2, [r3, #8]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b4f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b5b4 <tcp_listen_input+0x1f4>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	60da      	str	r2, [r3, #12]
 800b500:	4a2c      	ldr	r2, [pc, #176]	@ (800b5b4 <tcp_listen_input+0x1f4>)
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	f003 fd21 	bl	800ef4c <tcp_timer_needed>
 800b50a:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b8 <tcp_listen_input+0x1f8>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b510:	6978      	ldr	r0, [r7, #20]
 800b512:	f001 fd8b 	bl	800d02c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b516:	4b23      	ldr	r3, [pc, #140]	@ (800b5a4 <tcp_listen_input+0x1e4>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	89db      	ldrh	r3, [r3, #14]
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	3304      	adds	r3, #4
 800b538:	4618      	mov	r0, r3
 800b53a:	f007 fa79 	bl	8012a30 <ip4_route>
 800b53e:	4601      	mov	r1, r0
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3304      	adds	r3, #4
 800b544:	461a      	mov	r2, r3
 800b546:	4620      	mov	r0, r4
 800b548:	f7ff fa30 	bl	800a9ac <tcp_eff_send_mss_netif>
 800b54c:	4603      	mov	r3, r0
 800b54e:	461a      	mov	r2, r3
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b554:	2112      	movs	r1, #18
 800b556:	6978      	ldr	r0, [r7, #20]
 800b558:	f002 fc96 	bl	800de88 <tcp_enqueue_flags>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d004      	beq.n	800b572 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b568:	2100      	movs	r1, #0
 800b56a:	6978      	ldr	r0, [r7, #20]
 800b56c:	f7fe f97c 	bl	8009868 <tcp_abandon>
      return;
 800b570:	e006      	b.n	800b580 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b572:	6978      	ldr	r0, [r7, #20]
 800b574:	f002 fd76 	bl	800e064 <tcp_output>
  return;
 800b578:	e001      	b.n	800b57e <tcp_listen_input+0x1be>
    return;
 800b57a:	bf00      	nop
 800b57c:	e000      	b.n	800b580 <tcp_listen_input+0x1c0>
  return;
 800b57e:	bf00      	nop
}
 800b580:	371c      	adds	r7, #28
 800b582:	46bd      	mov	sp, r7
 800b584:	bd90      	pop	{r4, r7, pc}
 800b586:	bf00      	nop
 800b588:	20008138 	.word	0x20008138
 800b58c:	0801a274 	.word	0x0801a274
 800b590:	0801a46c 	.word	0x0801a46c
 800b594:	0801a2c0 	.word	0x0801a2c0
 800b598:	20008130 	.word	0x20008130
 800b59c:	20008136 	.word	0x20008136
 800b5a0:	2000812c 	.word	0x2000812c
 800b5a4:	2000811c 	.word	0x2000811c
 800b5a8:	200050c8 	.word	0x200050c8
 800b5ac:	200050cc 	.word	0x200050cc
 800b5b0:	200050b8 	.word	0x200050b8
 800b5b4:	20008100 	.word	0x20008100
 800b5b8:	20008108 	.word	0x20008108

0800b5bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af04      	add	r7, sp, #16
 800b5c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b5c4:	4b2f      	ldr	r3, [pc, #188]	@ (800b684 <tcp_timewait_input+0xc8>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d153      	bne.n	800b678 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <tcp_timewait_input+0x28>
 800b5d6:	4b2c      	ldr	r3, [pc, #176]	@ (800b688 <tcp_timewait_input+0xcc>)
 800b5d8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b5dc:	492b      	ldr	r1, [pc, #172]	@ (800b68c <tcp_timewait_input+0xd0>)
 800b5de:	482c      	ldr	r0, [pc, #176]	@ (800b690 <tcp_timewait_input+0xd4>)
 800b5e0:	f009 fd10 	bl	8015004 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b5e4:	4b27      	ldr	r3, [pc, #156]	@ (800b684 <tcp_timewait_input+0xc8>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d02a      	beq.n	800b646 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b5f0:	4b28      	ldr	r3, [pc, #160]	@ (800b694 <tcp_timewait_input+0xd8>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	db2d      	blt.n	800b65a <tcp_timewait_input+0x9e>
 800b5fe:	4b25      	ldr	r3, [pc, #148]	@ (800b694 <tcp_timewait_input+0xd8>)
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b60a:	440b      	add	r3, r1
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	dc23      	bgt.n	800b65a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b612:	4b21      	ldr	r3, [pc, #132]	@ (800b698 <tcp_timewait_input+0xdc>)
 800b614:	6819      	ldr	r1, [r3, #0]
 800b616:	4b21      	ldr	r3, [pc, #132]	@ (800b69c <tcp_timewait_input+0xe0>)
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	4b1d      	ldr	r3, [pc, #116]	@ (800b694 <tcp_timewait_input+0xd8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b622:	4b1f      	ldr	r3, [pc, #124]	@ (800b6a0 <tcp_timewait_input+0xe4>)
 800b624:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b626:	885b      	ldrh	r3, [r3, #2]
 800b628:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b62a:	4a1d      	ldr	r2, [pc, #116]	@ (800b6a0 <tcp_timewait_input+0xe4>)
 800b62c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b62e:	8812      	ldrh	r2, [r2, #0]
 800b630:	b292      	uxth	r2, r2
 800b632:	9202      	str	r2, [sp, #8]
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a4 <tcp_timewait_input+0xe8>)
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a8 <tcp_timewait_input+0xec>)
 800b63c:	4602      	mov	r2, r0
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f003 fac4 	bl	800ebcc <tcp_rst>
      return;
 800b644:	e01b      	b.n	800b67e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b646:	4b0f      	ldr	r3, [pc, #60]	@ (800b684 <tcp_timewait_input+0xc8>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b652:	4b16      	ldr	r3, [pc, #88]	@ (800b6ac <tcp_timewait_input+0xf0>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b65a:	4b10      	ldr	r3, [pc, #64]	@ (800b69c <tcp_timewait_input+0xe0>)
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00c      	beq.n	800b67c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	8b5b      	ldrh	r3, [r3, #26]
 800b666:	f043 0302 	orr.w	r3, r3, #2
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f002 fcf7 	bl	800e064 <tcp_output>
  }
  return;
 800b676:	e001      	b.n	800b67c <tcp_timewait_input+0xc0>
    return;
 800b678:	bf00      	nop
 800b67a:	e000      	b.n	800b67e <tcp_timewait_input+0xc2>
  return;
 800b67c:	bf00      	nop
}
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	20008138 	.word	0x20008138
 800b688:	0801a274 	.word	0x0801a274
 800b68c:	0801a48c 	.word	0x0801a48c
 800b690:	0801a2c0 	.word	0x0801a2c0
 800b694:	2000812c 	.word	0x2000812c
 800b698:	20008130 	.word	0x20008130
 800b69c:	20008136 	.word	0x20008136
 800b6a0:	2000811c 	.word	0x2000811c
 800b6a4:	200050c8 	.word	0x200050c8
 800b6a8:	200050cc 	.word	0x200050cc
 800b6ac:	200080f4 	.word	0x200080f4

0800b6b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b6b0:	b590      	push	{r4, r7, lr}
 800b6b2:	b08d      	sub	sp, #52	@ 0x34
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <tcp_process+0x24>
 800b6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800b93c <tcp_process+0x28c>)
 800b6c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b6cc:	499c      	ldr	r1, [pc, #624]	@ (800b940 <tcp_process+0x290>)
 800b6ce:	489d      	ldr	r0, [pc, #628]	@ (800b944 <tcp_process+0x294>)
 800b6d0:	f009 fc98 	bl	8015004 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b6d4:	4b9c      	ldr	r3, [pc, #624]	@ (800b948 <tcp_process+0x298>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	f003 0304 	and.w	r3, r3, #4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d04e      	beq.n	800b77e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7d1b      	ldrb	r3, [r3, #20]
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d108      	bne.n	800b6fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6ec:	4b97      	ldr	r3, [pc, #604]	@ (800b94c <tcp_process+0x29c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d123      	bne.n	800b73c <tcp_process+0x8c>
        acceptable = 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	76fb      	strb	r3, [r7, #27]
 800b6f8:	e020      	b.n	800b73c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6fe:	4b94      	ldr	r3, [pc, #592]	@ (800b950 <tcp_process+0x2a0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d102      	bne.n	800b70c <tcp_process+0x5c>
        acceptable = 1;
 800b706:	2301      	movs	r3, #1
 800b708:	76fb      	strb	r3, [r7, #27]
 800b70a:	e017      	b.n	800b73c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b70c:	4b90      	ldr	r3, [pc, #576]	@ (800b950 <tcp_process+0x2a0>)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	db10      	blt.n	800b73c <tcp_process+0x8c>
 800b71a:	4b8d      	ldr	r3, [pc, #564]	@ (800b950 <tcp_process+0x2a0>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b722:	6879      	ldr	r1, [r7, #4]
 800b724:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b726:	440b      	add	r3, r1
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dc06      	bgt.n	800b73c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	8b5b      	ldrh	r3, [r3, #26]
 800b732:	f043 0302 	orr.w	r3, r3, #2
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b73c:	7efb      	ldrb	r3, [r7, #27]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d01b      	beq.n	800b77a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7d1b      	ldrb	r3, [r3, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <tcp_process+0xa8>
 800b74a:	4b7c      	ldr	r3, [pc, #496]	@ (800b93c <tcp_process+0x28c>)
 800b74c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b750:	4980      	ldr	r1, [pc, #512]	@ (800b954 <tcp_process+0x2a4>)
 800b752:	487c      	ldr	r0, [pc, #496]	@ (800b944 <tcp_process+0x294>)
 800b754:	f009 fc56 	bl	8015004 <iprintf>
      recv_flags |= TF_RESET;
 800b758:	4b7f      	ldr	r3, [pc, #508]	@ (800b958 <tcp_process+0x2a8>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f043 0308 	orr.w	r3, r3, #8
 800b760:	b2da      	uxtb	r2, r3
 800b762:	4b7d      	ldr	r3, [pc, #500]	@ (800b958 <tcp_process+0x2a8>)
 800b764:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	8b5b      	ldrh	r3, [r3, #26]
 800b76a:	f023 0301 	bic.w	r3, r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b774:	f06f 030d 	mvn.w	r3, #13
 800b778:	e37a      	b.n	800be70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e378      	b.n	800be70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b77e:	4b72      	ldr	r3, [pc, #456]	@ (800b948 <tcp_process+0x298>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d010      	beq.n	800b7ac <tcp_process+0xfc>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7d1b      	ldrb	r3, [r3, #20]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d00c      	beq.n	800b7ac <tcp_process+0xfc>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7d1b      	ldrb	r3, [r3, #20]
 800b796:	2b03      	cmp	r3, #3
 800b798:	d008      	beq.n	800b7ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	8b5b      	ldrh	r3, [r3, #26]
 800b79e:	f043 0302 	orr.w	r3, r3, #2
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e361      	b.n	800be70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8b5b      	ldrh	r3, [r3, #26]
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b7b8:	4b68      	ldr	r3, [pc, #416]	@ (800b95c <tcp_process+0x2ac>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f001 fc2b 	bl	800d02c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	7d1b      	ldrb	r3, [r3, #20]
 800b7da:	3b02      	subs	r3, #2
 800b7dc:	2b07      	cmp	r3, #7
 800b7de:	f200 8337 	bhi.w	800be50 <tcp_process+0x7a0>
 800b7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800b7e8 <tcp_process+0x138>)
 800b7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e8:	0800b809 	.word	0x0800b809
 800b7ec:	0800ba39 	.word	0x0800ba39
 800b7f0:	0800bbb1 	.word	0x0800bbb1
 800b7f4:	0800bbdb 	.word	0x0800bbdb
 800b7f8:	0800bcff 	.word	0x0800bcff
 800b7fc:	0800bbb1 	.word	0x0800bbb1
 800b800:	0800bd8b 	.word	0x0800bd8b
 800b804:	0800be1b 	.word	0x0800be1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b808:	4b4f      	ldr	r3, [pc, #316]	@ (800b948 <tcp_process+0x298>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	f003 0310 	and.w	r3, r3, #16
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 80e4 	beq.w	800b9de <tcp_process+0x32e>
 800b816:	4b4c      	ldr	r3, [pc, #304]	@ (800b948 <tcp_process+0x298>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80dd 	beq.w	800b9de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b828:	1c5a      	adds	r2, r3, #1
 800b82a:	4b48      	ldr	r3, [pc, #288]	@ (800b94c <tcp_process+0x29c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	f040 80d5 	bne.w	800b9de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b834:	4b46      	ldr	r3, [pc, #280]	@ (800b950 <tcp_process+0x2a0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b846:	4b41      	ldr	r3, [pc, #260]	@ (800b94c <tcp_process+0x29c>)
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b84e:	4b44      	ldr	r3, [pc, #272]	@ (800b960 <tcp_process+0x2b0>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	89db      	ldrh	r3, [r3, #14]
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b868:	4b39      	ldr	r3, [pc, #228]	@ (800b950 <tcp_process+0x2a0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	1e5a      	subs	r2, r3, #1
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2204      	movs	r2, #4
 800b876:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3304      	adds	r3, #4
 800b880:	4618      	mov	r0, r3
 800b882:	f007 f8d5 	bl	8012a30 <ip4_route>
 800b886:	4601      	mov	r1, r0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	461a      	mov	r2, r3
 800b88e:	4620      	mov	r0, r4
 800b890:	f7ff f88c 	bl	800a9ac <tcp_eff_send_mss_netif>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8a0:	009a      	lsls	r2, r3, #2
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b8ac:	428b      	cmp	r3, r1
 800b8ae:	bf38      	it	cc
 800b8b0:	460b      	movcc	r3, r1
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d204      	bcs.n	800b8c0 <tcp_process+0x210>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	e00d      	b.n	800b8dc <tcp_process+0x22c>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d904      	bls.n	800b8d8 <tcp_process+0x228>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	e001      	b.n	800b8dc <tcp_process+0x22c>
 800b8d8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d106      	bne.n	800b8fa <tcp_process+0x24a>
 800b8ec:	4b13      	ldr	r3, [pc, #76]	@ (800b93c <tcp_process+0x28c>)
 800b8ee:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b8f2:	491c      	ldr	r1, [pc, #112]	@ (800b964 <tcp_process+0x2b4>)
 800b8f4:	4813      	ldr	r0, [pc, #76]	@ (800b944 <tcp_process+0x294>)
 800b8f6:	f009 fb85 	bl	8015004 <iprintf>
        --pcb->snd_queuelen;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b90e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d12a      	bne.n	800b96c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b91a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d106      	bne.n	800b930 <tcp_process+0x280>
 800b922:	4b06      	ldr	r3, [pc, #24]	@ (800b93c <tcp_process+0x28c>)
 800b924:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b928:	490f      	ldr	r1, [pc, #60]	@ (800b968 <tcp_process+0x2b8>)
 800b92a:	4806      	ldr	r0, [pc, #24]	@ (800b944 <tcp_process+0x294>)
 800b92c:	f009 fb6a 	bl	8015004 <iprintf>
          pcb->unsent = rseg->next;
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b938:	e01c      	b.n	800b974 <tcp_process+0x2c4>
 800b93a:	bf00      	nop
 800b93c:	0801a274 	.word	0x0801a274
 800b940:	0801a4ac 	.word	0x0801a4ac
 800b944:	0801a2c0 	.word	0x0801a2c0
 800b948:	20008138 	.word	0x20008138
 800b94c:	20008130 	.word	0x20008130
 800b950:	2000812c 	.word	0x2000812c
 800b954:	0801a4c8 	.word	0x0801a4c8
 800b958:	20008139 	.word	0x20008139
 800b95c:	200080f4 	.word	0x200080f4
 800b960:	2000811c 	.word	0x2000811c
 800b964:	0801a4e8 	.word	0x0801a4e8
 800b968:	0801a500 	.word	0x0801a500
        } else {
          pcb->unacked = rseg->next;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b974:	69f8      	ldr	r0, [r7, #28]
 800b976:	f7fe fd22 	bl	800a3be <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b988:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b98a:	e006      	b.n	800b99a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00a      	beq.n	800b9ba <tcp_process+0x30a>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6910      	ldr	r0, [r2, #16]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	4798      	blx	r3
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	76bb      	strb	r3, [r7, #26]
 800b9b8:	e001      	b.n	800b9be <tcp_process+0x30e>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b9be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9c2:	f113 0f0d 	cmn.w	r3, #13
 800b9c6:	d102      	bne.n	800b9ce <tcp_process+0x31e>
          return ERR_ABRT;
 800b9c8:	f06f 030c 	mvn.w	r3, #12
 800b9cc:	e250      	b.n	800be70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8b5b      	ldrh	r3, [r3, #26]
 800b9d2:	f043 0302 	orr.w	r3, r3, #2
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b9dc:	e23a      	b.n	800be54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b9de:	4b98      	ldr	r3, [pc, #608]	@ (800bc40 <tcp_process+0x590>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 0310 	and.w	r3, r3, #16
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 8234 	beq.w	800be54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9ec:	4b95      	ldr	r3, [pc, #596]	@ (800bc44 <tcp_process+0x594>)
 800b9ee:	6819      	ldr	r1, [r3, #0]
 800b9f0:	4b95      	ldr	r3, [pc, #596]	@ (800bc48 <tcp_process+0x598>)
 800b9f2:	881b      	ldrh	r3, [r3, #0]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	4b95      	ldr	r3, [pc, #596]	@ (800bc4c <tcp_process+0x59c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9fc:	4b94      	ldr	r3, [pc, #592]	@ (800bc50 <tcp_process+0x5a0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba00:	885b      	ldrh	r3, [r3, #2]
 800ba02:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba04:	4a92      	ldr	r2, [pc, #584]	@ (800bc50 <tcp_process+0x5a0>)
 800ba06:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba08:	8812      	ldrh	r2, [r2, #0]
 800ba0a:	b292      	uxth	r2, r2
 800ba0c:	9202      	str	r2, [sp, #8]
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	4b90      	ldr	r3, [pc, #576]	@ (800bc54 <tcp_process+0x5a4>)
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4b90      	ldr	r3, [pc, #576]	@ (800bc58 <tcp_process+0x5a8>)
 800ba16:	4602      	mov	r2, r0
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f003 f8d7 	bl	800ebcc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba24:	2b05      	cmp	r3, #5
 800ba26:	f200 8215 	bhi.w	800be54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f002 fea3 	bl	800e77c <tcp_rexmit_rto>
      break;
 800ba36:	e20d      	b.n	800be54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ba38:	4b81      	ldr	r3, [pc, #516]	@ (800bc40 <tcp_process+0x590>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	f003 0310 	and.w	r3, r3, #16
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f000 80a1 	beq.w	800bb88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ba46:	4b7f      	ldr	r3, [pc, #508]	@ (800bc44 <tcp_process+0x594>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	3b01      	subs	r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	db7e      	blt.n	800bb54 <tcp_process+0x4a4>
 800ba56:	4b7b      	ldr	r3, [pc, #492]	@ (800bc44 <tcp_process+0x594>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	dc77      	bgt.n	800bb54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2204      	movs	r2, #4
 800ba68:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ba72:	23fa      	movs	r3, #250	@ 0xfa
 800ba74:	76bb      	strb	r3, [r7, #26]
 800ba76:	e01d      	b.n	800bab4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <tcp_process+0x3e0>
 800ba82:	4b76      	ldr	r3, [pc, #472]	@ (800bc5c <tcp_process+0x5ac>)
 800ba84:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ba88:	4975      	ldr	r1, [pc, #468]	@ (800bc60 <tcp_process+0x5b0>)
 800ba8a:	4876      	ldr	r0, [pc, #472]	@ (800bc64 <tcp_process+0x5b4>)
 800ba8c:	f009 faba 	bl	8015004 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <tcp_process+0x400>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	6910      	ldr	r0, [r2, #16]
 800baa4:	2200      	movs	r2, #0
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	4798      	blx	r3
 800baaa:	4603      	mov	r3, r0
 800baac:	76bb      	strb	r3, [r7, #26]
 800baae:	e001      	b.n	800bab4 <tcp_process+0x404>
 800bab0:	23f0      	movs	r3, #240	@ 0xf0
 800bab2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bab4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00a      	beq.n	800bad2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800babc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bac0:	f113 0f0d 	cmn.w	r3, #13
 800bac4:	d002      	beq.n	800bacc <tcp_process+0x41c>
              tcp_abort(pcb);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7fd ff8c 	bl	80099e4 <tcp_abort>
            }
            return ERR_ABRT;
 800bacc:	f06f 030c 	mvn.w	r3, #12
 800bad0:	e1ce      	b.n	800be70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fae0 	bl	800c098 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bad8:	4b63      	ldr	r3, [pc, #396]	@ (800bc68 <tcp_process+0x5b8>)
 800bada:	881b      	ldrh	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <tcp_process+0x43c>
            recv_acked--;
 800bae0:	4b61      	ldr	r3, [pc, #388]	@ (800bc68 <tcp_process+0x5b8>)
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	4b5f      	ldr	r3, [pc, #380]	@ (800bc68 <tcp_process+0x5b8>)
 800baea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800baf0:	009a      	lsls	r2, r3, #2
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800bafc:	428b      	cmp	r3, r1
 800bafe:	bf38      	it	cc
 800bb00:	460b      	movcc	r3, r1
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d204      	bcs.n	800bb10 <tcp_process+0x460>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	e00d      	b.n	800bb2c <tcp_process+0x47c>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	f241 121c 	movw	r2, #4380	@ 0x111c
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d904      	bls.n	800bb28 <tcp_process+0x478>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb22:	005b      	lsls	r3, r3, #1
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	e001      	b.n	800bb2c <tcp_process+0x47c>
 800bb28:	f241 131c 	movw	r3, #4380	@ 0x111c
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800bb32:	4b4e      	ldr	r3, [pc, #312]	@ (800bc6c <tcp_process+0x5bc>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	f003 0320 	and.w	r3, r3, #32
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d037      	beq.n	800bbae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	8b5b      	ldrh	r3, [r3, #26]
 800bb42:	f043 0302 	orr.w	r3, r3, #2
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2207      	movs	r2, #7
 800bb50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bb52:	e02c      	b.n	800bbae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb54:	4b3b      	ldr	r3, [pc, #236]	@ (800bc44 <tcp_process+0x594>)
 800bb56:	6819      	ldr	r1, [r3, #0]
 800bb58:	4b3b      	ldr	r3, [pc, #236]	@ (800bc48 <tcp_process+0x598>)
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4b3b      	ldr	r3, [pc, #236]	@ (800bc4c <tcp_process+0x59c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb64:	4b3a      	ldr	r3, [pc, #232]	@ (800bc50 <tcp_process+0x5a0>)
 800bb66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb68:	885b      	ldrh	r3, [r3, #2]
 800bb6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb6c:	4a38      	ldr	r2, [pc, #224]	@ (800bc50 <tcp_process+0x5a0>)
 800bb6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb70:	8812      	ldrh	r2, [r2, #0]
 800bb72:	b292      	uxth	r2, r2
 800bb74:	9202      	str	r2, [sp, #8]
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	4b36      	ldr	r3, [pc, #216]	@ (800bc54 <tcp_process+0x5a4>)
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	4b36      	ldr	r3, [pc, #216]	@ (800bc58 <tcp_process+0x5a8>)
 800bb7e:	4602      	mov	r2, r0
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f003 f823 	bl	800ebcc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bb86:	e167      	b.n	800be58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bb88:	4b2d      	ldr	r3, [pc, #180]	@ (800bc40 <tcp_process+0x590>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 0302 	and.w	r3, r3, #2
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8161 	beq.w	800be58 <tcp_process+0x7a8>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9a:	1e5a      	subs	r2, r3, #1
 800bb9c:	4b2b      	ldr	r3, [pc, #172]	@ (800bc4c <tcp_process+0x59c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	f040 8159 	bne.w	800be58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f002 fe0a 	bl	800e7c0 <tcp_rexmit>
      break;
 800bbac:	e154      	b.n	800be58 <tcp_process+0x7a8>
 800bbae:	e153      	b.n	800be58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fa71 	bl	800c098 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bbb6:	4b2d      	ldr	r3, [pc, #180]	@ (800bc6c <tcp_process+0x5bc>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	f003 0320 	and.w	r3, r3, #32
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 814c 	beq.w	800be5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	8b5b      	ldrh	r3, [r3, #26]
 800bbc8:	f043 0302 	orr.w	r3, r3, #2
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2207      	movs	r2, #7
 800bbd6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bbd8:	e140      	b.n	800be5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fa5c 	bl	800c098 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bbe0:	4b22      	ldr	r3, [pc, #136]	@ (800bc6c <tcp_process+0x5bc>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	f003 0320 	and.w	r3, r3, #32
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d071      	beq.n	800bcd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbec:	4b14      	ldr	r3, [pc, #80]	@ (800bc40 <tcp_process+0x590>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f003 0310 	and.w	r3, r3, #16
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d060      	beq.n	800bcba <tcp_process+0x60a>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbfc:	4b11      	ldr	r3, [pc, #68]	@ (800bc44 <tcp_process+0x594>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d15a      	bne.n	800bcba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d156      	bne.n	800bcba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	8b5b      	ldrh	r3, [r3, #26]
 800bc10:	f043 0302 	orr.w	r3, r3, #2
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7fe fdbc 	bl	800a798 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bc20:	4b13      	ldr	r3, [pc, #76]	@ (800bc70 <tcp_process+0x5c0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d105      	bne.n	800bc36 <tcp_process+0x586>
 800bc2a:	4b11      	ldr	r3, [pc, #68]	@ (800bc70 <tcp_process+0x5c0>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	@ (800bc70 <tcp_process+0x5c0>)
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	e02e      	b.n	800bc94 <tcp_process+0x5e4>
 800bc36:	4b0e      	ldr	r3, [pc, #56]	@ (800bc70 <tcp_process+0x5c0>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e027      	b.n	800bc8e <tcp_process+0x5de>
 800bc3e:	bf00      	nop
 800bc40:	20008138 	.word	0x20008138
 800bc44:	20008130 	.word	0x20008130
 800bc48:	20008136 	.word	0x20008136
 800bc4c:	2000812c 	.word	0x2000812c
 800bc50:	2000811c 	.word	0x2000811c
 800bc54:	200050c8 	.word	0x200050c8
 800bc58:	200050cc 	.word	0x200050cc
 800bc5c:	0801a274 	.word	0x0801a274
 800bc60:	0801a514 	.word	0x0801a514
 800bc64:	0801a2c0 	.word	0x0801a2c0
 800bc68:	20008134 	.word	0x20008134
 800bc6c:	20008139 	.word	0x20008139
 800bc70:	20008100 	.word	0x20008100
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d104      	bne.n	800bc88 <tcp_process+0x5d8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	68da      	ldr	r2, [r3, #12]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	60da      	str	r2, [r3, #12]
 800bc86:	e005      	b.n	800bc94 <tcp_process+0x5e4>
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ef      	bne.n	800bc74 <tcp_process+0x5c4>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	60da      	str	r2, [r3, #12]
 800bc9a:	4b77      	ldr	r3, [pc, #476]	@ (800be78 <tcp_process+0x7c8>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	220a      	movs	r2, #10
 800bca4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bca6:	4b75      	ldr	r3, [pc, #468]	@ (800be7c <tcp_process+0x7cc>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	60da      	str	r2, [r3, #12]
 800bcae:	4a73      	ldr	r2, [pc, #460]	@ (800be7c <tcp_process+0x7cc>)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	f003 f94a 	bl	800ef4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bcb8:	e0d2      	b.n	800be60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	8b5b      	ldrh	r3, [r3, #26]
 800bcbe:	f043 0302 	orr.w	r3, r3, #2
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2208      	movs	r2, #8
 800bccc:	751a      	strb	r2, [r3, #20]
      break;
 800bcce:	e0c7      	b.n	800be60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bcd0:	4b6b      	ldr	r3, [pc, #428]	@ (800be80 <tcp_process+0x7d0>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	f003 0310 	and.w	r3, r3, #16
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 80c1 	beq.w	800be60 <tcp_process+0x7b0>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bce2:	4b68      	ldr	r3, [pc, #416]	@ (800be84 <tcp_process+0x7d4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	f040 80ba 	bne.w	800be60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f040 80b5 	bne.w	800be60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2206      	movs	r2, #6
 800bcfa:	751a      	strb	r2, [r3, #20]
      break;
 800bcfc:	e0b0      	b.n	800be60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f9ca 	bl	800c098 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bd04:	4b60      	ldr	r3, [pc, #384]	@ (800be88 <tcp_process+0x7d8>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	f003 0320 	and.w	r3, r3, #32
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80a9 	beq.w	800be64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	8b5b      	ldrh	r3, [r3, #26]
 800bd16:	f043 0302 	orr.w	r3, r3, #2
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7fe fd39 	bl	800a798 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bd26:	4b59      	ldr	r3, [pc, #356]	@ (800be8c <tcp_process+0x7dc>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d105      	bne.n	800bd3c <tcp_process+0x68c>
 800bd30:	4b56      	ldr	r3, [pc, #344]	@ (800be8c <tcp_process+0x7dc>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	4a55      	ldr	r2, [pc, #340]	@ (800be8c <tcp_process+0x7dc>)
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	e013      	b.n	800bd64 <tcp_process+0x6b4>
 800bd3c:	4b53      	ldr	r3, [pc, #332]	@ (800be8c <tcp_process+0x7dc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	613b      	str	r3, [r7, #16]
 800bd42:	e00c      	b.n	800bd5e <tcp_process+0x6ae>
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d104      	bne.n	800bd58 <tcp_process+0x6a8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68da      	ldr	r2, [r3, #12]
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	60da      	str	r2, [r3, #12]
 800bd56:	e005      	b.n	800bd64 <tcp_process+0x6b4>
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	613b      	str	r3, [r7, #16]
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1ef      	bne.n	800bd44 <tcp_process+0x694>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	4b43      	ldr	r3, [pc, #268]	@ (800be78 <tcp_process+0x7c8>)
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	220a      	movs	r2, #10
 800bd74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bd76:	4b41      	ldr	r3, [pc, #260]	@ (800be7c <tcp_process+0x7cc>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	60da      	str	r2, [r3, #12]
 800bd7e:	4a3f      	ldr	r2, [pc, #252]	@ (800be7c <tcp_process+0x7cc>)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	f003 f8e2 	bl	800ef4c <tcp_timer_needed>
      }
      break;
 800bd88:	e06c      	b.n	800be64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f984 	bl	800c098 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bd90:	4b3b      	ldr	r3, [pc, #236]	@ (800be80 <tcp_process+0x7d0>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 0310 	and.w	r3, r3, #16
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d065      	beq.n	800be68 <tcp_process+0x7b8>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bda0:	4b38      	ldr	r3, [pc, #224]	@ (800be84 <tcp_process+0x7d4>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d15f      	bne.n	800be68 <tcp_process+0x7b8>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d15b      	bne.n	800be68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f7fe fcf1 	bl	800a798 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bdb6:	4b35      	ldr	r3, [pc, #212]	@ (800be8c <tcp_process+0x7dc>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d105      	bne.n	800bdcc <tcp_process+0x71c>
 800bdc0:	4b32      	ldr	r3, [pc, #200]	@ (800be8c <tcp_process+0x7dc>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	4a31      	ldr	r2, [pc, #196]	@ (800be8c <tcp_process+0x7dc>)
 800bdc8:	6013      	str	r3, [r2, #0]
 800bdca:	e013      	b.n	800bdf4 <tcp_process+0x744>
 800bdcc:	4b2f      	ldr	r3, [pc, #188]	@ (800be8c <tcp_process+0x7dc>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	e00c      	b.n	800bdee <tcp_process+0x73e>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d104      	bne.n	800bde8 <tcp_process+0x738>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	60da      	str	r2, [r3, #12]
 800bde6:	e005      	b.n	800bdf4 <tcp_process+0x744>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1ef      	bne.n	800bdd4 <tcp_process+0x724>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	60da      	str	r2, [r3, #12]
 800bdfa:	4b1f      	ldr	r3, [pc, #124]	@ (800be78 <tcp_process+0x7c8>)
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	220a      	movs	r2, #10
 800be04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800be06:	4b1d      	ldr	r3, [pc, #116]	@ (800be7c <tcp_process+0x7cc>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	60da      	str	r2, [r3, #12]
 800be0e:	4a1b      	ldr	r2, [pc, #108]	@ (800be7c <tcp_process+0x7cc>)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	f003 f89a 	bl	800ef4c <tcp_timer_needed>
      }
      break;
 800be18:	e026      	b.n	800be68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f93c 	bl	800c098 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800be20:	4b17      	ldr	r3, [pc, #92]	@ (800be80 <tcp_process+0x7d0>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01f      	beq.n	800be6c <tcp_process+0x7bc>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be30:	4b14      	ldr	r3, [pc, #80]	@ (800be84 <tcp_process+0x7d4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d119      	bne.n	800be6c <tcp_process+0x7bc>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d115      	bne.n	800be6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800be40:	4b11      	ldr	r3, [pc, #68]	@ (800be88 <tcp_process+0x7d8>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f043 0310 	orr.w	r3, r3, #16
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4b0f      	ldr	r3, [pc, #60]	@ (800be88 <tcp_process+0x7d8>)
 800be4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800be4e:	e00d      	b.n	800be6c <tcp_process+0x7bc>
    default:
      break;
 800be50:	bf00      	nop
 800be52:	e00c      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be54:	bf00      	nop
 800be56:	e00a      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be58:	bf00      	nop
 800be5a:	e008      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be5c:	bf00      	nop
 800be5e:	e006      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be60:	bf00      	nop
 800be62:	e004      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be64:	bf00      	nop
 800be66:	e002      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be68:	bf00      	nop
 800be6a:	e000      	b.n	800be6e <tcp_process+0x7be>
      break;
 800be6c:	bf00      	nop
  }
  return ERR_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3724      	adds	r7, #36	@ 0x24
 800be74:	46bd      	mov	sp, r7
 800be76:	bd90      	pop	{r4, r7, pc}
 800be78:	20008108 	.word	0x20008108
 800be7c:	20008104 	.word	0x20008104
 800be80:	20008138 	.word	0x20008138
 800be84:	20008130 	.word	0x20008130
 800be88:	20008139 	.word	0x20008139
 800be8c:	20008100 	.word	0x20008100

0800be90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800be90:	b590      	push	{r4, r7, lr}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d106      	bne.n	800beae <tcp_oos_insert_segment+0x1e>
 800bea0:	4b3b      	ldr	r3, [pc, #236]	@ (800bf90 <tcp_oos_insert_segment+0x100>)
 800bea2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bea6:	493b      	ldr	r1, [pc, #236]	@ (800bf94 <tcp_oos_insert_segment+0x104>)
 800bea8:	483b      	ldr	r0, [pc, #236]	@ (800bf98 <tcp_oos_insert_segment+0x108>)
 800beaa:	f009 f8ab 	bl	8015004 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	899b      	ldrh	r3, [r3, #12]
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fb fc6e 	bl	8007798 <lwip_htons>
 800bebc:	4603      	mov	r3, r0
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d028      	beq.n	800bf1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bec8:	6838      	ldr	r0, [r7, #0]
 800beca:	f7fe fa63 	bl	800a394 <tcp_segs_free>
    next = NULL;
 800bece:	2300      	movs	r3, #0
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	e056      	b.n	800bf82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	899b      	ldrh	r3, [r3, #12]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fb fc5b 	bl	8007798 <lwip_htons>
 800bee2:	4603      	mov	r3, r0
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00d      	beq.n	800bf0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	899b      	ldrh	r3, [r3, #12]
 800bef4:	b29c      	uxth	r4, r3
 800bef6:	2001      	movs	r0, #1
 800bef8:	f7fb fc4e 	bl	8007798 <lwip_htons>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	4322      	orrs	r2, r4
 800bf06:	b292      	uxth	r2, r2
 800bf08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7fe fa52 	bl	800a3be <tcp_seg_free>
    while (next &&
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00e      	beq.n	800bf3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	891b      	ldrh	r3, [r3, #8]
 800bf24:	461a      	mov	r2, r3
 800bf26:	4b1d      	ldr	r3, [pc, #116]	@ (800bf9c <tcp_oos_insert_segment+0x10c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	441a      	add	r2, r3
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	8909      	ldrh	r1, [r1, #8]
 800bf36:	440b      	add	r3, r1
 800bf38:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	daca      	bge.n	800bed4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01e      	beq.n	800bf82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	891b      	ldrh	r3, [r3, #8]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4b14      	ldr	r3, [pc, #80]	@ (800bf9c <tcp_oos_insert_segment+0x10c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	441a      	add	r2, r3
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	dd12      	ble.n	800bf82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	4b0d      	ldr	r3, [pc, #52]	@ (800bf9c <tcp_oos_insert_segment+0x10c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	891b      	ldrh	r3, [r3, #8]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fc fe13 	bl	8008ba8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	601a      	str	r2, [r3, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd90      	pop	{r4, r7, pc}
 800bf90:	0801a274 	.word	0x0801a274
 800bf94:	0801a534 	.word	0x0801a534
 800bf98:	0801a2c0 	.word	0x0801a2c0
 800bf9c:	2000812c 	.word	0x2000812c

0800bfa0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bfa0:	b5b0      	push	{r4, r5, r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bfae:	e03e      	b.n	800c02e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd f800 	bl	8008fc4 <pbuf_clen>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bfce:	8a7a      	ldrh	r2, [r7, #18]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d906      	bls.n	800bfe2 <tcp_free_acked_segments+0x42>
 800bfd4:	4b2a      	ldr	r3, [pc, #168]	@ (800c080 <tcp_free_acked_segments+0xe0>)
 800bfd6:	f240 4257 	movw	r2, #1111	@ 0x457
 800bfda:	492a      	ldr	r1, [pc, #168]	@ (800c084 <tcp_free_acked_segments+0xe4>)
 800bfdc:	482a      	ldr	r0, [pc, #168]	@ (800c088 <tcp_free_acked_segments+0xe8>)
 800bfde:	f009 f811 	bl	8015004 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bfe8:	8a7b      	ldrh	r3, [r7, #18]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	891a      	ldrh	r2, [r3, #8]
 800bff8:	4b24      	ldr	r3, [pc, #144]	@ (800c08c <tcp_free_acked_segments+0xec>)
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	4413      	add	r3, r2
 800bffe:	b29a      	uxth	r2, r3
 800c000:	4b22      	ldr	r3, [pc, #136]	@ (800c08c <tcp_free_acked_segments+0xec>)
 800c002:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c004:	6978      	ldr	r0, [r7, #20]
 800c006:	f7fe f9da 	bl	800a3be <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00c      	beq.n	800c02e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d109      	bne.n	800c02e <tcp_free_acked_segments+0x8e>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <tcp_free_acked_segments+0x8e>
 800c020:	4b17      	ldr	r3, [pc, #92]	@ (800c080 <tcp_free_acked_segments+0xe0>)
 800c022:	f240 4261 	movw	r2, #1121	@ 0x461
 800c026:	491a      	ldr	r1, [pc, #104]	@ (800c090 <tcp_free_acked_segments+0xf0>)
 800c028:	4817      	ldr	r0, [pc, #92]	@ (800c088 <tcp_free_acked_segments+0xe8>)
 800c02a:	f008 ffeb 	bl	8015004 <iprintf>
  while (seg_list != NULL &&
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d020      	beq.n	800c076 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fb fbc2 	bl	80077c4 <lwip_htonl>
 800c040:	4604      	mov	r4, r0
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	891b      	ldrh	r3, [r3, #8]
 800c046:	461d      	mov	r5, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	899b      	ldrh	r3, [r3, #12]
 800c04e:	b29b      	uxth	r3, r3
 800c050:	4618      	mov	r0, r3
 800c052:	f7fb fba1 	bl	8007798 <lwip_htons>
 800c056:	4603      	mov	r3, r0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <tcp_free_acked_segments+0xc6>
 800c062:	2301      	movs	r3, #1
 800c064:	e000      	b.n	800c068 <tcp_free_acked_segments+0xc8>
 800c066:	2300      	movs	r3, #0
 800c068:	442b      	add	r3, r5
 800c06a:	18e2      	adds	r2, r4, r3
 800c06c:	4b09      	ldr	r3, [pc, #36]	@ (800c094 <tcp_free_acked_segments+0xf4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c072:	2b00      	cmp	r3, #0
 800c074:	dd9c      	ble.n	800bfb0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c076:	68bb      	ldr	r3, [r7, #8]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bdb0      	pop	{r4, r5, r7, pc}
 800c080:	0801a274 	.word	0x0801a274
 800c084:	0801a55c 	.word	0x0801a55c
 800c088:	0801a2c0 	.word	0x0801a2c0
 800c08c:	20008134 	.word	0x20008134
 800c090:	0801a584 	.word	0x0801a584
 800c094:	20008130 	.word	0x20008130

0800c098 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c098:	b5b0      	push	{r4, r5, r7, lr}
 800c09a:	b094      	sub	sp, #80	@ 0x50
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d106      	bne.n	800c0b8 <tcp_receive+0x20>
 800c0aa:	4b91      	ldr	r3, [pc, #580]	@ (800c2f0 <tcp_receive+0x258>)
 800c0ac:	f240 427b 	movw	r2, #1147	@ 0x47b
 800c0b0:	4990      	ldr	r1, [pc, #576]	@ (800c2f4 <tcp_receive+0x25c>)
 800c0b2:	4891      	ldr	r0, [pc, #580]	@ (800c2f8 <tcp_receive+0x260>)
 800c0b4:	f008 ffa6 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	7d1b      	ldrb	r3, [r3, #20]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d806      	bhi.n	800c0ce <tcp_receive+0x36>
 800c0c0:	4b8b      	ldr	r3, [pc, #556]	@ (800c2f0 <tcp_receive+0x258>)
 800c0c2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c0c6:	498d      	ldr	r1, [pc, #564]	@ (800c2fc <tcp_receive+0x264>)
 800c0c8:	488b      	ldr	r0, [pc, #556]	@ (800c2f8 <tcp_receive+0x260>)
 800c0ca:	f008 ff9b 	bl	8015004 <iprintf>

  if (flags & TCP_ACK) {
 800c0ce:	4b8c      	ldr	r3, [pc, #560]	@ (800c300 <tcp_receive+0x268>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	f003 0310 	and.w	r3, r3, #16
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8264 	beq.w	800c5a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e8:	4413      	add	r3, r2
 800c0ea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0f0:	4b84      	ldr	r3, [pc, #528]	@ (800c304 <tcp_receive+0x26c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	db1b      	blt.n	800c132 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0fe:	4b81      	ldr	r3, [pc, #516]	@ (800c304 <tcp_receive+0x26c>)
 800c100:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c102:	429a      	cmp	r2, r3
 800c104:	d106      	bne.n	800c114 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c10a:	4b7f      	ldr	r3, [pc, #508]	@ (800c308 <tcp_receive+0x270>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	db0e      	blt.n	800c132 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c118:	4b7b      	ldr	r3, [pc, #492]	@ (800c308 <tcp_receive+0x270>)
 800c11a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d125      	bne.n	800c16c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c120:	4b7a      	ldr	r3, [pc, #488]	@ (800c30c <tcp_receive+0x274>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	89db      	ldrh	r3, [r3, #14]
 800c126:	b29a      	uxth	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c12e:	429a      	cmp	r2, r3
 800c130:	d91c      	bls.n	800c16c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c132:	4b76      	ldr	r3, [pc, #472]	@ (800c30c <tcp_receive+0x274>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	89db      	ldrh	r3, [r3, #14]
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d205      	bcs.n	800c15c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800c15c:	4b69      	ldr	r3, [pc, #420]	@ (800c304 <tcp_receive+0x26c>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800c164:	4b68      	ldr	r3, [pc, #416]	@ (800c308 <tcp_receive+0x270>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c16c:	4b66      	ldr	r3, [pc, #408]	@ (800c308 <tcp_receive+0x270>)
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	dc58      	bgt.n	800c22c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c17a:	4b65      	ldr	r3, [pc, #404]	@ (800c310 <tcp_receive+0x278>)
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d14b      	bne.n	800c21a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800c18c:	4413      	add	r3, r2
 800c18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c190:	429a      	cmp	r2, r3
 800c192:	d142      	bne.n	800c21a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	db3d      	blt.n	800c21a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1a2:	4b59      	ldr	r3, [pc, #356]	@ (800c308 <tcp_receive+0x270>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d137      	bne.n	800c21a <tcp_receive+0x182>
              found_dupack = 1;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c1b4:	2bff      	cmp	r3, #255	@ 0xff
 800c1b6:	d007      	beq.n	800c1c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c1be:	3301      	adds	r3, #1
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d91b      	bls.n	800c20a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c1dc:	4413      	add	r3, r2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d30a      	bcc.n	800c200 <tcp_receive+0x168>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c1f4:	4413      	add	r3, r2
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c1fe:	e004      	b.n	800c20a <tcp_receive+0x172>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c206:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c210:	2b02      	cmp	r3, #2
 800c212:	d902      	bls.n	800c21a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f002 fb3f 	bl	800e898 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c21a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f040 8161 	bne.w	800c4e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c22a:	e15b      	b.n	800c4e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c22c:	4b36      	ldr	r3, [pc, #216]	@ (800c308 <tcp_receive+0x270>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	3b01      	subs	r3, #1
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f2c0 814e 	blt.w	800c4da <tcp_receive+0x442>
 800c23e:	4b32      	ldr	r3, [pc, #200]	@ (800c308 <tcp_receive+0x270>)
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f300 8146 	bgt.w	800c4da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8b5b      	ldrh	r3, [r3, #26]
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	2b00      	cmp	r3, #0
 800c258:	d010      	beq.n	800c27c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	8b5b      	ldrh	r3, [r3, #26]
 800c25e:	f023 0304 	bic.w	r3, r3, #4
 800c262:	b29a      	uxth	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c28a:	10db      	asrs	r3, r3, #3
 800c28c:	b21b      	sxth	r3, r3
 800c28e:	b29a      	uxth	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c296:	b29b      	uxth	r3, r3
 800c298:	4413      	add	r3, r2
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	b21a      	sxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c2a4:	4b18      	ldr	r3, [pc, #96]	@ (800c308 <tcp_receive+0x270>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c2bc:	4b12      	ldr	r3, [pc, #72]	@ (800c308 <tcp_receive+0x270>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7d1b      	ldrb	r3, [r3, #20]
 800c2c8:	2b03      	cmp	r3, #3
 800c2ca:	f240 8097 	bls.w	800c3fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d245      	bcs.n	800c36a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8b5b      	ldrh	r3, [r3, #26]
 800c2e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d014      	beq.n	800c314 <tcp_receive+0x27c>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e013      	b.n	800c316 <tcp_receive+0x27e>
 800c2ee:	bf00      	nop
 800c2f0:	0801a274 	.word	0x0801a274
 800c2f4:	0801a5a4 	.word	0x0801a5a4
 800c2f8:	0801a2c0 	.word	0x0801a2c0
 800c2fc:	0801a5c0 	.word	0x0801a5c0
 800c300:	20008138 	.word	0x20008138
 800c304:	2000812c 	.word	0x2000812c
 800c308:	20008130 	.word	0x20008130
 800c30c:	2000811c 	.word	0x2000811c
 800c310:	20008136 	.word	0x20008136
 800c314:	2302      	movs	r3, #2
 800c316:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c31a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c31e:	b29a      	uxth	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c324:	fb12 f303 	smulbb	r3, r2, r3
 800c328:	b29b      	uxth	r3, r3
 800c32a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c32c:	4293      	cmp	r3, r2
 800c32e:	bf28      	it	cs
 800c330:	4613      	movcs	r3, r2
 800c332:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c33a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c33c:	4413      	add	r3, r2
 800c33e:	b29a      	uxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c346:	429a      	cmp	r2, r3
 800c348:	d309      	bcc.n	800c35e <tcp_receive+0x2c6>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c350:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c352:	4413      	add	r3, r2
 800c354:	b29a      	uxth	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c35c:	e04e      	b.n	800c3fc <tcp_receive+0x364>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c364:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c368:	e048      	b.n	800c3fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c370:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c372:	4413      	add	r3, r2
 800c374:	b29a      	uxth	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d309      	bcc.n	800c394 <tcp_receive+0x2fc>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c386:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c388:	4413      	add	r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c392:	e004      	b.n	800c39e <tcp_receive+0x306>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c39a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d326      	bcc.n	800c3fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c3ce:	4413      	add	r3, r2
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d30a      	bcc.n	800c3f2 <tcp_receive+0x35a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c3e6:	4413      	add	r3, r2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c3f0:	e004      	b.n	800c3fc <tcp_receive+0x364>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c404:	4a98      	ldr	r2, [pc, #608]	@ (800c668 <tcp_receive+0x5d0>)
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff fdca 	bl	800bfa0 <tcp_free_acked_segments>
 800c40c:	4602      	mov	r2, r0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c41a:	4a94      	ldr	r2, [pc, #592]	@ (800c66c <tcp_receive+0x5d4>)
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fdbf 	bl	800bfa0 <tcp_free_acked_segments>
 800c422:	4602      	mov	r2, r0
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d104      	bne.n	800c43a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c436:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c438:	e002      	b.n	800c440 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d103      	bne.n	800c456 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c45c:	4b84      	ldr	r3, [pc, #528]	@ (800c670 <tcp_receive+0x5d8>)
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	4413      	add	r3, r2
 800c462:	b29a      	uxth	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	8b5b      	ldrh	r3, [r3, #26]
 800c46e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c472:	2b00      	cmp	r3, #0
 800c474:	d035      	beq.n	800c4e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d118      	bne.n	800c4b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00c      	beq.n	800c4a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	4618      	mov	r0, r3
 800c494:	f7fb f996 	bl	80077c4 <lwip_htonl>
 800c498:	4603      	mov	r3, r0
 800c49a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	dc20      	bgt.n	800c4e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	8b5b      	ldrh	r3, [r3, #26]
 800c4a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4ae:	e018      	b.n	800c4e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fb f981 	bl	80077c4 <lwip_htonl>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	1ae3      	subs	r3, r4, r3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dc0b      	bgt.n	800c4e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b5b      	ldrh	r3, [r3, #26]
 800c4ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4d8:	e003      	b.n	800c4e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f002 fbc6 	bl	800ec6c <tcp_send_empty_ack>
 800c4e0:	e000      	b.n	800c4e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d05b      	beq.n	800c5a4 <tcp_receive+0x50c>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4f0:	4b60      	ldr	r3, [pc, #384]	@ (800c674 <tcp_receive+0x5dc>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	da54      	bge.n	800c5a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c4fa:	4b5f      	ldr	r3, [pc, #380]	@ (800c678 <tcp_receive+0x5e0>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c504:	b29b      	uxth	r3, r3
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	b29b      	uxth	r3, r3
 800c50a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c50e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c518:	10db      	asrs	r3, r3, #3
 800c51a:	b21b      	sxth	r3, r3
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	b29b      	uxth	r3, r3
 800c522:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c532:	4413      	add	r3, r2
 800c534:	b29b      	uxth	r3, r3
 800c536:	b21a      	sxth	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c53c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c540:	2b00      	cmp	r3, #0
 800c542:	da05      	bge.n	800c550 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c548:	425b      	negs	r3, r3
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c550:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c55a:	109b      	asrs	r3, r3, #2
 800c55c:	b21b      	sxth	r3, r3
 800c55e:	b29b      	uxth	r3, r3
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	b29b      	uxth	r3, r3
 800c564:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c56e:	b29a      	uxth	r2, r3
 800c570:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c574:	4413      	add	r3, r2
 800c576:	b29b      	uxth	r3, r3
 800c578:	b21a      	sxth	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c584:	10db      	asrs	r3, r3, #3
 800c586:	b21b      	sxth	r3, r3
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c590:	b29b      	uxth	r3, r3
 800c592:	4413      	add	r3, r2
 800c594:	b29b      	uxth	r3, r3
 800c596:	b21a      	sxth	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c5a4:	4b35      	ldr	r3, [pc, #212]	@ (800c67c <tcp_receive+0x5e4>)
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 84df 	beq.w	800cf6c <tcp_receive+0xed4>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7d1b      	ldrb	r3, [r3, #20]
 800c5b2:	2b06      	cmp	r3, #6
 800c5b4:	f200 84da 	bhi.w	800cf6c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5bc:	4b30      	ldr	r3, [pc, #192]	@ (800c680 <tcp_receive+0x5e8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f2c0 808f 	blt.w	800c6e8 <tcp_receive+0x650>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5ce:	4b2b      	ldr	r3, [pc, #172]	@ (800c67c <tcp_receive+0x5e4>)
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4b2a      	ldr	r3, [pc, #168]	@ (800c680 <tcp_receive+0x5e8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	440b      	add	r3, r1
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	3301      	adds	r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f300 8082 	bgt.w	800c6e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c5e4:	4b27      	ldr	r3, [pc, #156]	@ (800c684 <tcp_receive+0x5ec>)
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c5ee:	4b24      	ldr	r3, [pc, #144]	@ (800c680 <tcp_receive+0x5e8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c5f6:	4b23      	ldr	r3, [pc, #140]	@ (800c684 <tcp_receive+0x5ec>)
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <tcp_receive+0x574>
 800c5fe:	4b22      	ldr	r3, [pc, #136]	@ (800c688 <tcp_receive+0x5f0>)
 800c600:	f240 5294 	movw	r2, #1428	@ 0x594
 800c604:	4921      	ldr	r1, [pc, #132]	@ (800c68c <tcp_receive+0x5f4>)
 800c606:	4822      	ldr	r0, [pc, #136]	@ (800c690 <tcp_receive+0x5f8>)
 800c608:	f008 fcfc 	bl	8015004 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c612:	4293      	cmp	r3, r2
 800c614:	d906      	bls.n	800c624 <tcp_receive+0x58c>
 800c616:	4b1c      	ldr	r3, [pc, #112]	@ (800c688 <tcp_receive+0x5f0>)
 800c618:	f240 5295 	movw	r2, #1429	@ 0x595
 800c61c:	491d      	ldr	r1, [pc, #116]	@ (800c694 <tcp_receive+0x5fc>)
 800c61e:	481c      	ldr	r0, [pc, #112]	@ (800c690 <tcp_receive+0x5f8>)
 800c620:	f008 fcf0 	bl	8015004 <iprintf>
      off = (u16_t)off32;
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c62a:	4b16      	ldr	r3, [pc, #88]	@ (800c684 <tcp_receive+0x5ec>)
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	891b      	ldrh	r3, [r3, #8]
 800c630:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c634:	429a      	cmp	r2, r3
 800c636:	d906      	bls.n	800c646 <tcp_receive+0x5ae>
 800c638:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <tcp_receive+0x5f0>)
 800c63a:	f240 5297 	movw	r2, #1431	@ 0x597
 800c63e:	4916      	ldr	r1, [pc, #88]	@ (800c698 <tcp_receive+0x600>)
 800c640:	4813      	ldr	r0, [pc, #76]	@ (800c690 <tcp_receive+0x5f8>)
 800c642:	f008 fcdf 	bl	8015004 <iprintf>
      inseg.len -= off;
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <tcp_receive+0x5ec>)
 800c648:	891a      	ldrh	r2, [r3, #8]
 800c64a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	b29a      	uxth	r2, r3
 800c652:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <tcp_receive+0x5ec>)
 800c654:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c656:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <tcp_receive+0x5ec>)
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	891a      	ldrh	r2, [r3, #8]
 800c65c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c664:	e02a      	b.n	800c6bc <tcp_receive+0x624>
 800c666:	bf00      	nop
 800c668:	0801a5dc 	.word	0x0801a5dc
 800c66c:	0801a5e4 	.word	0x0801a5e4
 800c670:	20008134 	.word	0x20008134
 800c674:	20008130 	.word	0x20008130
 800c678:	200080f4 	.word	0x200080f4
 800c67c:	20008136 	.word	0x20008136
 800c680:	2000812c 	.word	0x2000812c
 800c684:	2000810c 	.word	0x2000810c
 800c688:	0801a274 	.word	0x0801a274
 800c68c:	0801a5ec 	.word	0x0801a5ec
 800c690:	0801a2c0 	.word	0x0801a2c0
 800c694:	0801a5fc 	.word	0x0801a5fc
 800c698:	0801a60c 	.word	0x0801a60c
        off -= p->len;
 800c69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c69e:	895b      	ldrh	r3, [r3, #10]
 800c6a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c6ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c6b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c6b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6be:	895b      	ldrh	r3, [r3, #10]
 800c6c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d8e9      	bhi.n	800c69c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c6c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c6d0:	f7fc fb6a 	bl	8008da8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d8:	4a90      	ldr	r2, [pc, #576]	@ (800c91c <tcp_receive+0x884>)
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	4b90      	ldr	r3, [pc, #576]	@ (800c920 <tcp_receive+0x888>)
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4a8e      	ldr	r2, [pc, #568]	@ (800c91c <tcp_receive+0x884>)
 800c6e2:	6812      	ldr	r2, [r2, #0]
 800c6e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c6e6:	e00d      	b.n	800c704 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c6e8:	4b8c      	ldr	r3, [pc, #560]	@ (800c91c <tcp_receive+0x884>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da06      	bge.n	800c704 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	8b5b      	ldrh	r3, [r3, #26]
 800c6fa:	f043 0302 	orr.w	r3, r3, #2
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c704:	4b85      	ldr	r3, [pc, #532]	@ (800c91c <tcp_receive+0x884>)
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f2c0 8427 	blt.w	800cf62 <tcp_receive+0xeca>
 800c714:	4b81      	ldr	r3, [pc, #516]	@ (800c91c <tcp_receive+0x884>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c720:	440b      	add	r3, r1
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	3301      	adds	r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	f300 841b 	bgt.w	800cf62 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c730:	4b7a      	ldr	r3, [pc, #488]	@ (800c91c <tcp_receive+0x884>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	f040 8298 	bne.w	800cc6a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c73a:	4b79      	ldr	r3, [pc, #484]	@ (800c920 <tcp_receive+0x888>)
 800c73c:	891c      	ldrh	r4, [r3, #8]
 800c73e:	4b78      	ldr	r3, [pc, #480]	@ (800c920 <tcp_receive+0x888>)
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	899b      	ldrh	r3, [r3, #12]
 800c744:	b29b      	uxth	r3, r3
 800c746:	4618      	mov	r0, r3
 800c748:	f7fb f826 	bl	8007798 <lwip_htons>
 800c74c:	4603      	mov	r3, r0
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f003 0303 	and.w	r3, r3, #3
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <tcp_receive+0x6c4>
 800c758:	2301      	movs	r3, #1
 800c75a:	e000      	b.n	800c75e <tcp_receive+0x6c6>
 800c75c:	2300      	movs	r3, #0
 800c75e:	4423      	add	r3, r4
 800c760:	b29a      	uxth	r2, r3
 800c762:	4b70      	ldr	r3, [pc, #448]	@ (800c924 <tcp_receive+0x88c>)
 800c764:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c76a:	4b6e      	ldr	r3, [pc, #440]	@ (800c924 <tcp_receive+0x88c>)
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d274      	bcs.n	800c85c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c772:	4b6b      	ldr	r3, [pc, #428]	@ (800c920 <tcp_receive+0x888>)
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	899b      	ldrh	r3, [r3, #12]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fb f80c 	bl	8007798 <lwip_htons>
 800c780:	4603      	mov	r3, r0
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d01e      	beq.n	800c7ca <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c78c:	4b64      	ldr	r3, [pc, #400]	@ (800c920 <tcp_receive+0x888>)
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	899b      	ldrh	r3, [r3, #12]
 800c792:	b29b      	uxth	r3, r3
 800c794:	b21b      	sxth	r3, r3
 800c796:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c79a:	b21c      	sxth	r4, r3
 800c79c:	4b60      	ldr	r3, [pc, #384]	@ (800c920 <tcp_receive+0x888>)
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	899b      	ldrh	r3, [r3, #12]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fa fff7 	bl	8007798 <lwip_htons>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fa ffef 	bl	8007798 <lwip_htons>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	b21b      	sxth	r3, r3
 800c7be:	4323      	orrs	r3, r4
 800c7c0:	b21a      	sxth	r2, r3
 800c7c2:	4b57      	ldr	r3, [pc, #348]	@ (800c920 <tcp_receive+0x888>)
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	b292      	uxth	r2, r2
 800c7c8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7ce:	4b54      	ldr	r3, [pc, #336]	@ (800c920 <tcp_receive+0x888>)
 800c7d0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c7d2:	4b53      	ldr	r3, [pc, #332]	@ (800c920 <tcp_receive+0x888>)
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	899b      	ldrh	r3, [r3, #12]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fa ffdc 	bl	8007798 <lwip_htons>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d005      	beq.n	800c7f8 <tcp_receive+0x760>
            inseg.len -= 1;
 800c7ec:	4b4c      	ldr	r3, [pc, #304]	@ (800c920 <tcp_receive+0x888>)
 800c7ee:	891b      	ldrh	r3, [r3, #8]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	4b4a      	ldr	r3, [pc, #296]	@ (800c920 <tcp_receive+0x888>)
 800c7f6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c7f8:	4b49      	ldr	r3, [pc, #292]	@ (800c920 <tcp_receive+0x888>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	4a48      	ldr	r2, [pc, #288]	@ (800c920 <tcp_receive+0x888>)
 800c7fe:	8912      	ldrh	r2, [r2, #8]
 800c800:	4611      	mov	r1, r2
 800c802:	4618      	mov	r0, r3
 800c804:	f7fc f9d0 	bl	8008ba8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c808:	4b45      	ldr	r3, [pc, #276]	@ (800c920 <tcp_receive+0x888>)
 800c80a:	891c      	ldrh	r4, [r3, #8]
 800c80c:	4b44      	ldr	r3, [pc, #272]	@ (800c920 <tcp_receive+0x888>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	899b      	ldrh	r3, [r3, #12]
 800c812:	b29b      	uxth	r3, r3
 800c814:	4618      	mov	r0, r3
 800c816:	f7fa ffbf 	bl	8007798 <lwip_htons>
 800c81a:	4603      	mov	r3, r0
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	f003 0303 	and.w	r3, r3, #3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d001      	beq.n	800c82a <tcp_receive+0x792>
 800c826:	2301      	movs	r3, #1
 800c828:	e000      	b.n	800c82c <tcp_receive+0x794>
 800c82a:	2300      	movs	r3, #0
 800c82c:	4423      	add	r3, r4
 800c82e:	b29a      	uxth	r2, r3
 800c830:	4b3c      	ldr	r3, [pc, #240]	@ (800c924 <tcp_receive+0x88c>)
 800c832:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c834:	4b3b      	ldr	r3, [pc, #236]	@ (800c924 <tcp_receive+0x88c>)
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	461a      	mov	r2, r3
 800c83a:	4b38      	ldr	r3, [pc, #224]	@ (800c91c <tcp_receive+0x884>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	441a      	add	r2, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c848:	440b      	add	r3, r1
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d006      	beq.n	800c85c <tcp_receive+0x7c4>
 800c84e:	4b36      	ldr	r3, [pc, #216]	@ (800c928 <tcp_receive+0x890>)
 800c850:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c854:	4935      	ldr	r1, [pc, #212]	@ (800c92c <tcp_receive+0x894>)
 800c856:	4836      	ldr	r0, [pc, #216]	@ (800c930 <tcp_receive+0x898>)
 800c858:	f008 fbd4 	bl	8015004 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 80e6 	beq.w	800ca32 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c866:	4b2e      	ldr	r3, [pc, #184]	@ (800c920 <tcp_receive+0x888>)
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	899b      	ldrh	r3, [r3, #12]
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fa ff92 	bl	8007798 <lwip_htons>
 800c874:	4603      	mov	r3, r0
 800c876:	b2db      	uxtb	r3, r3
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d010      	beq.n	800c8a2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c880:	e00a      	b.n	800c898 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c886:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f7fd fd93 	bl	800a3be <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d1f0      	bne.n	800c882 <tcp_receive+0x7ea>
 800c8a0:	e0c7      	b.n	800ca32 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c8a8:	e051      	b.n	800c94e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c8aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	899b      	ldrh	r3, [r3, #12]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fa ff70 	bl	8007798 <lwip_htons>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d03c      	beq.n	800c93e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c8c4:	4b16      	ldr	r3, [pc, #88]	@ (800c920 <tcp_receive+0x888>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	899b      	ldrh	r3, [r3, #12]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7fa ff63 	bl	8007798 <lwip_htons>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d12f      	bne.n	800c93e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c8de:	4b10      	ldr	r3, [pc, #64]	@ (800c920 <tcp_receive+0x888>)
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	899b      	ldrh	r3, [r3, #12]
 800c8e4:	b29c      	uxth	r4, r3
 800c8e6:	2001      	movs	r0, #1
 800c8e8:	f7fa ff56 	bl	8007798 <lwip_htons>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c920 <tcp_receive+0x888>)
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	4322      	orrs	r2, r4
 800c8f6:	b292      	uxth	r2, r2
 800c8f8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c8fa:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <tcp_receive+0x888>)
 800c8fc:	891c      	ldrh	r4, [r3, #8]
 800c8fe:	4b08      	ldr	r3, [pc, #32]	@ (800c920 <tcp_receive+0x888>)
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	899b      	ldrh	r3, [r3, #12]
 800c904:	b29b      	uxth	r3, r3
 800c906:	4618      	mov	r0, r3
 800c908:	f7fa ff46 	bl	8007798 <lwip_htons>
 800c90c:	4603      	mov	r3, r0
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	f003 0303 	and.w	r3, r3, #3
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00d      	beq.n	800c934 <tcp_receive+0x89c>
 800c918:	2301      	movs	r3, #1
 800c91a:	e00c      	b.n	800c936 <tcp_receive+0x89e>
 800c91c:	2000812c 	.word	0x2000812c
 800c920:	2000810c 	.word	0x2000810c
 800c924:	20008136 	.word	0x20008136
 800c928:	0801a274 	.word	0x0801a274
 800c92c:	0801a61c 	.word	0x0801a61c
 800c930:	0801a2c0 	.word	0x0801a2c0
 800c934:	2300      	movs	r3, #0
 800c936:	4423      	add	r3, r4
 800c938:	b29a      	uxth	r2, r3
 800c93a:	4b98      	ldr	r3, [pc, #608]	@ (800cb9c <tcp_receive+0xb04>)
 800c93c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c940:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c948:	6938      	ldr	r0, [r7, #16]
 800c94a:	f7fd fd38 	bl	800a3be <tcp_seg_free>
            while (next &&
 800c94e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00e      	beq.n	800c972 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c954:	4b91      	ldr	r3, [pc, #580]	@ (800cb9c <tcp_receive+0xb04>)
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	461a      	mov	r2, r3
 800c95a:	4b91      	ldr	r3, [pc, #580]	@ (800cba0 <tcp_receive+0xb08>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	441a      	add	r2, r3
 800c960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c968:	8909      	ldrh	r1, [r1, #8]
 800c96a:	440b      	add	r3, r1
 800c96c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c96e:	2b00      	cmp	r3, #0
 800c970:	da9b      	bge.n	800c8aa <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c974:	2b00      	cmp	r3, #0
 800c976:	d059      	beq.n	800ca2c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c978:	4b88      	ldr	r3, [pc, #544]	@ (800cb9c <tcp_receive+0xb04>)
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	461a      	mov	r2, r3
 800c97e:	4b88      	ldr	r3, [pc, #544]	@ (800cba0 <tcp_receive+0xb08>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	441a      	add	r2, r3
 800c984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dd4d      	ble.n	800ca2c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	b29a      	uxth	r2, r3
 800c998:	4b81      	ldr	r3, [pc, #516]	@ (800cba0 <tcp_receive+0xb08>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	4b80      	ldr	r3, [pc, #512]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c9a6:	4b7f      	ldr	r3, [pc, #508]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	899b      	ldrh	r3, [r3, #12]
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fa fef2 	bl	8007798 <lwip_htons>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d005      	beq.n	800c9cc <tcp_receive+0x934>
                inseg.len -= 1;
 800c9c0:	4b78      	ldr	r3, [pc, #480]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9c2:	891b      	ldrh	r3, [r3, #8]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	4b76      	ldr	r3, [pc, #472]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c9cc:	4b75      	ldr	r3, [pc, #468]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	4a74      	ldr	r2, [pc, #464]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9d2:	8912      	ldrh	r2, [r2, #8]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fc f8e6 	bl	8008ba8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c9dc:	4b71      	ldr	r3, [pc, #452]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9de:	891c      	ldrh	r4, [r3, #8]
 800c9e0:	4b70      	ldr	r3, [pc, #448]	@ (800cba4 <tcp_receive+0xb0c>)
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	899b      	ldrh	r3, [r3, #12]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fa fed5 	bl	8007798 <lwip_htons>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <tcp_receive+0x966>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e000      	b.n	800ca00 <tcp_receive+0x968>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	4423      	add	r3, r4
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	4b65      	ldr	r3, [pc, #404]	@ (800cb9c <tcp_receive+0xb04>)
 800ca06:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ca08:	4b64      	ldr	r3, [pc, #400]	@ (800cb9c <tcp_receive+0xb04>)
 800ca0a:	881b      	ldrh	r3, [r3, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	4b64      	ldr	r3, [pc, #400]	@ (800cba0 <tcp_receive+0xb08>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	441a      	add	r2, r3
 800ca14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d006      	beq.n	800ca2c <tcp_receive+0x994>
 800ca1e:	4b62      	ldr	r3, [pc, #392]	@ (800cba8 <tcp_receive+0xb10>)
 800ca20:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ca24:	4961      	ldr	r1, [pc, #388]	@ (800cbac <tcp_receive+0xb14>)
 800ca26:	4862      	ldr	r0, [pc, #392]	@ (800cbb0 <tcp_receive+0xb18>)
 800ca28:	f008 faec 	bl	8015004 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca30:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ca32:	4b5a      	ldr	r3, [pc, #360]	@ (800cb9c <tcp_receive+0xb04>)
 800ca34:	881b      	ldrh	r3, [r3, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	4b59      	ldr	r3, [pc, #356]	@ (800cba0 <tcp_receive+0xb08>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca46:	4b55      	ldr	r3, [pc, #340]	@ (800cb9c <tcp_receive+0xb04>)
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d206      	bcs.n	800ca5c <tcp_receive+0x9c4>
 800ca4e:	4b56      	ldr	r3, [pc, #344]	@ (800cba8 <tcp_receive+0xb10>)
 800ca50:	f240 6207 	movw	r2, #1543	@ 0x607
 800ca54:	4957      	ldr	r1, [pc, #348]	@ (800cbb4 <tcp_receive+0xb1c>)
 800ca56:	4856      	ldr	r0, [pc, #344]	@ (800cbb0 <tcp_receive+0xb18>)
 800ca58:	f008 fad4 	bl	8015004 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca60:	4b4e      	ldr	r3, [pc, #312]	@ (800cb9c <tcp_receive+0xb04>)
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7fc ffc5 	bl	80099fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ca72:	4b4c      	ldr	r3, [pc, #304]	@ (800cba4 <tcp_receive+0xb0c>)
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	891b      	ldrh	r3, [r3, #8]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d006      	beq.n	800ca8a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ca7c:	4b49      	ldr	r3, [pc, #292]	@ (800cba4 <tcp_receive+0xb0c>)
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	4a4d      	ldr	r2, [pc, #308]	@ (800cbb8 <tcp_receive+0xb20>)
 800ca82:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ca84:	4b47      	ldr	r3, [pc, #284]	@ (800cba4 <tcp_receive+0xb0c>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca8a:	4b46      	ldr	r3, [pc, #280]	@ (800cba4 <tcp_receive+0xb0c>)
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	899b      	ldrh	r3, [r3, #12]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fa fe80 	bl	8007798 <lwip_htons>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80b8 	beq.w	800cc16 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800caa6:	4b45      	ldr	r3, [pc, #276]	@ (800cbbc <tcp_receive+0xb24>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	f043 0320 	orr.w	r3, r3, #32
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b42      	ldr	r3, [pc, #264]	@ (800cbbc <tcp_receive+0xb24>)
 800cab2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cab4:	e0af      	b.n	800cc16 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	4a36      	ldr	r2, [pc, #216]	@ (800cba0 <tcp_receive+0xb08>)
 800cac6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	891b      	ldrh	r3, [r3, #8]
 800cacc:	461c      	mov	r4, r3
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	899b      	ldrh	r3, [r3, #12]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fa fe5e 	bl	8007798 <lwip_htons>
 800cadc:	4603      	mov	r3, r0
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 0303 	and.w	r3, r3, #3
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <tcp_receive+0xa54>
 800cae8:	2301      	movs	r3, #1
 800caea:	e000      	b.n	800caee <tcp_receive+0xa56>
 800caec:	2300      	movs	r3, #0
 800caee:	191a      	adds	r2, r3, r4
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf4:	441a      	add	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cafe:	461c      	mov	r4, r3
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	891b      	ldrh	r3, [r3, #8]
 800cb04:	461d      	mov	r5, r3
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	899b      	ldrh	r3, [r3, #12]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fa fe42 	bl	8007798 <lwip_htons>
 800cb14:	4603      	mov	r3, r0
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	f003 0303 	and.w	r3, r3, #3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <tcp_receive+0xa8c>
 800cb20:	2301      	movs	r3, #1
 800cb22:	e000      	b.n	800cb26 <tcp_receive+0xa8e>
 800cb24:	2300      	movs	r3, #0
 800cb26:	442b      	add	r3, r5
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	d206      	bcs.n	800cb3a <tcp_receive+0xaa2>
 800cb2c:	4b1e      	ldr	r3, [pc, #120]	@ (800cba8 <tcp_receive+0xb10>)
 800cb2e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800cb32:	4923      	ldr	r1, [pc, #140]	@ (800cbc0 <tcp_receive+0xb28>)
 800cb34:	481e      	ldr	r0, [pc, #120]	@ (800cbb0 <tcp_receive+0xb18>)
 800cb36:	f008 fa65 	bl	8015004 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	891b      	ldrh	r3, [r3, #8]
 800cb3e:	461c      	mov	r4, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	899b      	ldrh	r3, [r3, #12]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fa fe25 	bl	8007798 <lwip_htons>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <tcp_receive+0xac6>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e000      	b.n	800cb60 <tcp_receive+0xac8>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	1919      	adds	r1, r3, r4
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cb66:	b28b      	uxth	r3, r1
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7fc ff43 	bl	80099fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	891b      	ldrh	r3, [r3, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d028      	beq.n	800cbd2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cb80:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb8 <tcp_receive+0xb20>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01d      	beq.n	800cbc4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800cb88:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb8 <tcp_receive+0xb20>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	4619      	mov	r1, r3
 800cb92:	4610      	mov	r0, r2
 800cb94:	f7fc fa50 	bl	8009038 <pbuf_cat>
 800cb98:	e018      	b.n	800cbcc <tcp_receive+0xb34>
 800cb9a:	bf00      	nop
 800cb9c:	20008136 	.word	0x20008136
 800cba0:	2000812c 	.word	0x2000812c
 800cba4:	2000810c 	.word	0x2000810c
 800cba8:	0801a274 	.word	0x0801a274
 800cbac:	0801a654 	.word	0x0801a654
 800cbb0:	0801a2c0 	.word	0x0801a2c0
 800cbb4:	0801a690 	.word	0x0801a690
 800cbb8:	2000813c 	.word	0x2000813c
 800cbbc:	20008139 	.word	0x20008139
 800cbc0:	0801a6b0 	.word	0x0801a6b0
            } else {
              recv_data = cseg->p;
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	4a70      	ldr	r2, [pc, #448]	@ (800cd8c <tcp_receive+0xcf4>)
 800cbca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	899b      	ldrh	r3, [r3, #12]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fa fddc 	bl	8007798 <lwip_htons>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00d      	beq.n	800cc08 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cbec:	4b68      	ldr	r3, [pc, #416]	@ (800cd90 <tcp_receive+0xcf8>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	f043 0320 	orr.w	r3, r3, #32
 800cbf4:	b2da      	uxtb	r2, r3
 800cbf6:	4b66      	ldr	r3, [pc, #408]	@ (800cd90 <tcp_receive+0xcf8>)
 800cbf8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7d1b      	ldrb	r3, [r3, #20]
 800cbfe:	2b04      	cmp	r3, #4
 800cc00:	d102      	bne.n	800cc08 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2207      	movs	r2, #7
 800cc06:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800cc10:	68b8      	ldr	r0, [r7, #8]
 800cc12:	f7fd fbd4 	bl	800a3be <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d008      	beq.n	800cc30 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	f43f af43 	beq.w	800cab6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	8b5b      	ldrh	r3, [r3, #26]
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00e      	beq.n	800cc5a <tcp_receive+0xbc2>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	8b5b      	ldrh	r3, [r3, #26]
 800cc40:	f023 0301 	bic.w	r3, r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	835a      	strh	r2, [r3, #26]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	8b5b      	ldrh	r3, [r3, #26]
 800cc4e:	f043 0302 	orr.w	r3, r3, #2
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc58:	e187      	b.n	800cf6a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	8b5b      	ldrh	r3, [r3, #26]
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cc68:	e17f      	b.n	800cf6a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cc72:	4848      	ldr	r0, [pc, #288]	@ (800cd94 <tcp_receive+0xcfc>)
 800cc74:	f7fd fbbc 	bl	800a3f0 <tcp_seg_copy>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	675a      	str	r2, [r3, #116]	@ 0x74
 800cc7e:	e16c      	b.n	800cf5a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cc80:	2300      	movs	r3, #0
 800cc82:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc88:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc8a:	e156      	b.n	800cf3a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	4b41      	ldr	r3, [pc, #260]	@ (800cd98 <tcp_receive+0xd00>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d11d      	bne.n	800ccd6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cc9a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd94 <tcp_receive+0xcfc>)
 800cc9c:	891a      	ldrh	r2, [r3, #8]
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	891b      	ldrh	r3, [r3, #8]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	f240 814e 	bls.w	800cf44 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cca8:	483a      	ldr	r0, [pc, #232]	@ (800cd94 <tcp_receive+0xcfc>)
 800ccaa:	f7fd fba1 	bl	800a3f0 <tcp_seg_copy>
 800ccae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 8148 	beq.w	800cf48 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	e002      	b.n	800cccc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cccc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccce:	6978      	ldr	r0, [r7, #20]
 800ccd0:	f7ff f8de 	bl	800be90 <tcp_oos_insert_segment>
                }
                break;
 800ccd4:	e138      	b.n	800cf48 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ccd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d117      	bne.n	800cd0c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ccdc:	4b2e      	ldr	r3, [pc, #184]	@ (800cd98 <tcp_receive+0xd00>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da57      	bge.n	800cd9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ccec:	4829      	ldr	r0, [pc, #164]	@ (800cd94 <tcp_receive+0xcfc>)
 800ccee:	f7fd fb7f 	bl	800a3f0 <tcp_seg_copy>
 800ccf2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 8128 	beq.w	800cf4c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	69ba      	ldr	r2, [r7, #24]
 800cd00:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cd02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd04:	69b8      	ldr	r0, [r7, #24]
 800cd06:	f7ff f8c3 	bl	800be90 <tcp_oos_insert_segment>
                  }
                  break;
 800cd0a:	e11f      	b.n	800cf4c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cd0c:	4b22      	ldr	r3, [pc, #136]	@ (800cd98 <tcp_receive+0xd00>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	db3e      	blt.n	800cd9c <tcp_receive+0xd04>
 800cd1e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd98 <tcp_receive+0xd00>)
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dc35      	bgt.n	800cd9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cd30:	4818      	ldr	r0, [pc, #96]	@ (800cd94 <tcp_receive+0xcfc>)
 800cd32:	f7fd fb5d 	bl	800a3f0 <tcp_seg_copy>
 800cd36:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 8108 	beq.w	800cf50 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cd40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd48:	8912      	ldrh	r2, [r2, #8]
 800cd4a:	441a      	add	r2, r3
 800cd4c:	4b12      	ldr	r3, [pc, #72]	@ (800cd98 <tcp_receive+0xd00>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dd12      	ble.n	800cd7c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cd56:	4b10      	ldr	r3, [pc, #64]	@ (800cd98 <tcp_receive+0xd00>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd6e:	685a      	ldr	r2, [r3, #4]
 800cd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd72:	891b      	ldrh	r3, [r3, #8]
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fb ff16 	bl	8008ba8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cd82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd84:	69f8      	ldr	r0, [r7, #28]
 800cd86:	f7ff f883 	bl	800be90 <tcp_oos_insert_segment>
                  }
                  break;
 800cd8a:	e0e1      	b.n	800cf50 <tcp_receive+0xeb8>
 800cd8c:	2000813c 	.word	0x2000813c
 800cd90:	20008139 	.word	0x20008139
 800cd94:	2000810c 	.word	0x2000810c
 800cd98:	2000812c 	.word	0x2000812c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f040 80c5 	bne.w	800cf34 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cdaa:	4b7f      	ldr	r3, [pc, #508]	@ (800cfa8 <tcp_receive+0xf10>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f340 80bc 	ble.w	800cf34 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	899b      	ldrh	r3, [r3, #12]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fa fce7 	bl	8007798 <lwip_htons>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f040 80be 	bne.w	800cf54 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cdd8:	4874      	ldr	r0, [pc, #464]	@ (800cfac <tcp_receive+0xf14>)
 800cdda:	f7fd fb09 	bl	800a3f0 <tcp_seg_copy>
 800cdde:	4602      	mov	r2, r0
 800cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 80b5 	beq.w	800cf58 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdf6:	8912      	ldrh	r2, [r2, #8]
 800cdf8:	441a      	add	r2, r3
 800cdfa:	4b6b      	ldr	r3, [pc, #428]	@ (800cfa8 <tcp_receive+0xf10>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dd12      	ble.n	800ce2a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ce04:	4b68      	ldr	r3, [pc, #416]	@ (800cfa8 <tcp_receive+0xf10>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	1ad3      	subs	r3, r2, r3
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	685a      	ldr	r2, [r3, #4]
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce20:	891b      	ldrh	r3, [r3, #8]
 800ce22:	4619      	mov	r1, r3
 800ce24:	4610      	mov	r0, r2
 800ce26:	f7fb febf 	bl	8008ba8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ce2a:	4b61      	ldr	r3, [pc, #388]	@ (800cfb0 <tcp_receive+0xf18>)
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	4b5d      	ldr	r3, [pc, #372]	@ (800cfa8 <tcp_receive+0xf10>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	441a      	add	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce3a:	6879      	ldr	r1, [r7, #4]
 800ce3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ce3e:	440b      	add	r3, r1
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f340 8088 	ble.w	800cf58 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ce48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68db      	ldr	r3, [r3, #12]
 800ce4e:	899b      	ldrh	r3, [r3, #12]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fa fca0 	bl	8007798 <lwip_htons>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d021      	beq.n	800cea8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	899b      	ldrh	r3, [r3, #12]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	b21b      	sxth	r3, r3
 800ce70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce74:	b21c      	sxth	r4, r3
 800ce76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	899b      	ldrh	r3, [r3, #12]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fa fc89 	bl	8007798 <lwip_htons>
 800ce86:	4603      	mov	r3, r0
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fa fc81 	bl	8007798 <lwip_htons>
 800ce96:	4603      	mov	r3, r0
 800ce98:	b21b      	sxth	r3, r3
 800ce9a:	4323      	orrs	r3, r4
 800ce9c:	b21a      	sxth	r2, r3
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	b292      	uxth	r2, r2
 800cea6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceb2:	4413      	add	r3, r2
 800ceb4:	b299      	uxth	r1, r3
 800ceb6:	4b3c      	ldr	r3, [pc, #240]	@ (800cfa8 <tcp_receive+0xf10>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	1a8a      	subs	r2, r1, r2
 800cec2:	b292      	uxth	r2, r2
 800cec4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	891b      	ldrh	r3, [r3, #8]
 800ced2:	4619      	mov	r1, r3
 800ced4:	4610      	mov	r0, r2
 800ced6:	f7fb fe67 	bl	8008ba8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ceda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	891c      	ldrh	r4, [r3, #8]
 800cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	899b      	ldrh	r3, [r3, #12]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fa fc54 	bl	8007798 <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0303 	and.w	r3, r3, #3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <tcp_receive+0xe68>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <tcp_receive+0xe6a>
 800cf00:	2300      	movs	r3, #0
 800cf02:	4423      	add	r3, r4
 800cf04:	b29a      	uxth	r2, r3
 800cf06:	4b2a      	ldr	r3, [pc, #168]	@ (800cfb0 <tcp_receive+0xf18>)
 800cf08:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cf0a:	4b29      	ldr	r3, [pc, #164]	@ (800cfb0 <tcp_receive+0xf18>)
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	4b25      	ldr	r3, [pc, #148]	@ (800cfa8 <tcp_receive+0xf10>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	441a      	add	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cf1e:	440b      	add	r3, r1
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d019      	beq.n	800cf58 <tcp_receive+0xec0>
 800cf24:	4b23      	ldr	r3, [pc, #140]	@ (800cfb4 <tcp_receive+0xf1c>)
 800cf26:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800cf2a:	4923      	ldr	r1, [pc, #140]	@ (800cfb8 <tcp_receive+0xf20>)
 800cf2c:	4823      	ldr	r0, [pc, #140]	@ (800cfbc <tcp_receive+0xf24>)
 800cf2e:	f008 f869 	bl	8015004 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cf32:	e011      	b.n	800cf58 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cf34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f47f aea5 	bne.w	800cc8c <tcp_receive+0xbf4>
 800cf42:	e00a      	b.n	800cf5a <tcp_receive+0xec2>
                break;
 800cf44:	bf00      	nop
 800cf46:	e008      	b.n	800cf5a <tcp_receive+0xec2>
                break;
 800cf48:	bf00      	nop
 800cf4a:	e006      	b.n	800cf5a <tcp_receive+0xec2>
                  break;
 800cf4c:	bf00      	nop
 800cf4e:	e004      	b.n	800cf5a <tcp_receive+0xec2>
                  break;
 800cf50:	bf00      	nop
 800cf52:	e002      	b.n	800cf5a <tcp_receive+0xec2>
                  break;
 800cf54:	bf00      	nop
 800cf56:	e000      	b.n	800cf5a <tcp_receive+0xec2>
                break;
 800cf58:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f001 fe86 	bl	800ec6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cf60:	e003      	b.n	800cf6a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f001 fe82 	bl	800ec6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf68:	e01a      	b.n	800cfa0 <tcp_receive+0xf08>
 800cf6a:	e019      	b.n	800cfa0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cf6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cfa8 <tcp_receive+0xf10>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	db0a      	blt.n	800cf90 <tcp_receive+0xef8>
 800cf7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa8 <tcp_receive+0xf10>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cf86:	440b      	add	r3, r1
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd07      	ble.n	800cfa0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	8b5b      	ldrh	r3, [r3, #26]
 800cf94:	f043 0302 	orr.w	r3, r3, #2
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cf9e:	e7ff      	b.n	800cfa0 <tcp_receive+0xf08>
 800cfa0:	bf00      	nop
 800cfa2:	3750      	adds	r7, #80	@ 0x50
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bdb0      	pop	{r4, r5, r7, pc}
 800cfa8:	2000812c 	.word	0x2000812c
 800cfac:	2000810c 	.word	0x2000810c
 800cfb0:	20008136 	.word	0x20008136
 800cfb4:	0801a274 	.word	0x0801a274
 800cfb8:	0801a61c 	.word	0x0801a61c
 800cfbc:	0801a2c0 	.word	0x0801a2c0

0800cfc0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cfc6:	4b15      	ldr	r3, [pc, #84]	@ (800d01c <tcp_get_next_optbyte+0x5c>)
 800cfc8:	881b      	ldrh	r3, [r3, #0]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	b291      	uxth	r1, r2
 800cfce:	4a13      	ldr	r2, [pc, #76]	@ (800d01c <tcp_get_next_optbyte+0x5c>)
 800cfd0:	8011      	strh	r1, [r2, #0]
 800cfd2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cfd4:	4b12      	ldr	r3, [pc, #72]	@ (800d020 <tcp_get_next_optbyte+0x60>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d004      	beq.n	800cfe6 <tcp_get_next_optbyte+0x26>
 800cfdc:	4b11      	ldr	r3, [pc, #68]	@ (800d024 <tcp_get_next_optbyte+0x64>)
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	88fa      	ldrh	r2, [r7, #6]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d208      	bcs.n	800cff8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cfe6:	4b10      	ldr	r3, [pc, #64]	@ (800d028 <tcp_get_next_optbyte+0x68>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3314      	adds	r3, #20
 800cfec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cfee:	88fb      	ldrh	r3, [r7, #6]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	4413      	add	r3, r2
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	e00b      	b.n	800d010 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	4b09      	ldr	r3, [pc, #36]	@ (800d024 <tcp_get_next_optbyte+0x64>)
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	b2db      	uxtb	r3, r3
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d006:	4b06      	ldr	r3, [pc, #24]	@ (800d020 <tcp_get_next_optbyte+0x60>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	797b      	ldrb	r3, [r7, #5]
 800d00c:	4413      	add	r3, r2
 800d00e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	20008128 	.word	0x20008128
 800d020:	20008124 	.word	0x20008124
 800d024:	20008122 	.word	0x20008122
 800d028:	2000811c 	.word	0x2000811c

0800d02c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <tcp_parseopt+0x1c>
 800d03a:	4b32      	ldr	r3, [pc, #200]	@ (800d104 <tcp_parseopt+0xd8>)
 800d03c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800d040:	4931      	ldr	r1, [pc, #196]	@ (800d108 <tcp_parseopt+0xdc>)
 800d042:	4832      	ldr	r0, [pc, #200]	@ (800d10c <tcp_parseopt+0xe0>)
 800d044:	f007 ffde 	bl	8015004 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d048:	4b31      	ldr	r3, [pc, #196]	@ (800d110 <tcp_parseopt+0xe4>)
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d056      	beq.n	800d0fe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d050:	4b30      	ldr	r3, [pc, #192]	@ (800d114 <tcp_parseopt+0xe8>)
 800d052:	2200      	movs	r2, #0
 800d054:	801a      	strh	r2, [r3, #0]
 800d056:	e046      	b.n	800d0e6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800d058:	f7ff ffb2 	bl	800cfc0 <tcp_get_next_optbyte>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d060:	7bfb      	ldrb	r3, [r7, #15]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d006      	beq.n	800d074 <tcp_parseopt+0x48>
 800d066:	2b02      	cmp	r3, #2
 800d068:	dc2a      	bgt.n	800d0c0 <tcp_parseopt+0x94>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d042      	beq.n	800d0f4 <tcp_parseopt+0xc8>
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d038      	beq.n	800d0e4 <tcp_parseopt+0xb8>
 800d072:	e025      	b.n	800d0c0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d074:	f7ff ffa4 	bl	800cfc0 <tcp_get_next_optbyte>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b04      	cmp	r3, #4
 800d07c:	d13c      	bne.n	800d0f8 <tcp_parseopt+0xcc>
 800d07e:	4b25      	ldr	r3, [pc, #148]	@ (800d114 <tcp_parseopt+0xe8>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	3301      	adds	r3, #1
 800d084:	4a22      	ldr	r2, [pc, #136]	@ (800d110 <tcp_parseopt+0xe4>)
 800d086:	8812      	ldrh	r2, [r2, #0]
 800d088:	4293      	cmp	r3, r2
 800d08a:	da35      	bge.n	800d0f8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d08c:	f7ff ff98 	bl	800cfc0 <tcp_get_next_optbyte>
 800d090:	4603      	mov	r3, r0
 800d092:	021b      	lsls	r3, r3, #8
 800d094:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d096:	f7ff ff93 	bl	800cfc0 <tcp_get_next_optbyte>
 800d09a:	4603      	mov	r3, r0
 800d09c:	461a      	mov	r2, r3
 800d09e:	89bb      	ldrh	r3, [r7, #12]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d0a4:	89bb      	ldrh	r3, [r7, #12]
 800d0a6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d0aa:	d804      	bhi.n	800d0b6 <tcp_parseopt+0x8a>
 800d0ac:	89bb      	ldrh	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <tcp_parseopt+0x8a>
 800d0b2:	89ba      	ldrh	r2, [r7, #12]
 800d0b4:	e001      	b.n	800d0ba <tcp_parseopt+0x8e>
 800d0b6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800d0be:	e012      	b.n	800d0e6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d0c0:	f7ff ff7e 	bl	800cfc0 <tcp_get_next_optbyte>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d916      	bls.n	800d0fc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d0ce:	7afb      	ldrb	r3, [r7, #11]
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <tcp_parseopt+0xe8>)
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	3b02      	subs	r3, #2
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	4b0d      	ldr	r3, [pc, #52]	@ (800d114 <tcp_parseopt+0xe8>)
 800d0e0:	801a      	strh	r2, [r3, #0]
 800d0e2:	e000      	b.n	800d0e6 <tcp_parseopt+0xba>
          break;
 800d0e4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d114 <tcp_parseopt+0xe8>)
 800d0e8:	881a      	ldrh	r2, [r3, #0]
 800d0ea:	4b09      	ldr	r3, [pc, #36]	@ (800d110 <tcp_parseopt+0xe4>)
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d3b2      	bcc.n	800d058 <tcp_parseopt+0x2c>
 800d0f2:	e004      	b.n	800d0fe <tcp_parseopt+0xd2>
          return;
 800d0f4:	bf00      	nop
 800d0f6:	e002      	b.n	800d0fe <tcp_parseopt+0xd2>
            return;
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <tcp_parseopt+0xd2>
            return;
 800d0fc:	bf00      	nop
      }
    }
  }
}
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	0801a274 	.word	0x0801a274
 800d108:	0801a6d8 	.word	0x0801a6d8
 800d10c:	0801a2c0 	.word	0x0801a2c0
 800d110:	20008120 	.word	0x20008120
 800d114:	20008128 	.word	0x20008128

0800d118 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d118:	b480      	push	{r7}
 800d11a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d11c:	4b05      	ldr	r3, [pc, #20]	@ (800d134 <tcp_trigger_input_pcb_close+0x1c>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f043 0310 	orr.w	r3, r3, #16
 800d124:	b2da      	uxtb	r2, r3
 800d126:	4b03      	ldr	r3, [pc, #12]	@ (800d134 <tcp_trigger_input_pcb_close+0x1c>)
 800d128:	701a      	strb	r2, [r3, #0]
}
 800d12a:	bf00      	nop
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	20008139 	.word	0x20008139

0800d138 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <tcp_route+0x28>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	7a1b      	ldrb	r3, [r3, #8]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d006      	beq.n	800d160 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	7a1b      	ldrb	r3, [r3, #8]
 800d156:	4618      	mov	r0, r3
 800d158:	f7fb fb4c 	bl	80087f4 <netif_get_by_index>
 800d15c:	4603      	mov	r3, r0
 800d15e:	e003      	b.n	800d168 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f005 fc65 	bl	8012a30 <ip4_route>
 800d166:	4603      	mov	r3, r0
  }
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d170:	b590      	push	{r4, r7, lr}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	603b      	str	r3, [r7, #0]
 800d17c:	4613      	mov	r3, r2
 800d17e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d105      	bne.n	800d192 <tcp_create_segment+0x22>
 800d186:	4b43      	ldr	r3, [pc, #268]	@ (800d294 <tcp_create_segment+0x124>)
 800d188:	22a3      	movs	r2, #163	@ 0xa3
 800d18a:	4943      	ldr	r1, [pc, #268]	@ (800d298 <tcp_create_segment+0x128>)
 800d18c:	4843      	ldr	r0, [pc, #268]	@ (800d29c <tcp_create_segment+0x12c>)
 800d18e:	f007 ff39 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d105      	bne.n	800d1a4 <tcp_create_segment+0x34>
 800d198:	4b3e      	ldr	r3, [pc, #248]	@ (800d294 <tcp_create_segment+0x124>)
 800d19a:	22a4      	movs	r2, #164	@ 0xa4
 800d19c:	4940      	ldr	r1, [pc, #256]	@ (800d2a0 <tcp_create_segment+0x130>)
 800d19e:	483f      	ldr	r0, [pc, #252]	@ (800d29c <tcp_create_segment+0x12c>)
 800d1a0:	f007 ff30 	bl	8015004 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d1a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d1b2:	2003      	movs	r0, #3
 800d1b4:	f7fa ff8c 	bl	80080d0 <memp_malloc>
 800d1b8:	6138      	str	r0, [r7, #16]
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d104      	bne.n	800d1ca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d1c0:	68b8      	ldr	r0, [r7, #8]
 800d1c2:	f7fb fe77 	bl	8008eb4 <pbuf_free>
    return NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e060      	b.n	800d28c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d1d0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	891a      	ldrh	r2, [r3, #8]
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d205      	bcs.n	800d1f6 <tcp_create_segment+0x86>
 800d1ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d294 <tcp_create_segment+0x124>)
 800d1ec:	22b0      	movs	r2, #176	@ 0xb0
 800d1ee:	492d      	ldr	r1, [pc, #180]	@ (800d2a4 <tcp_create_segment+0x134>)
 800d1f0:	482a      	ldr	r0, [pc, #168]	@ (800d29c <tcp_create_segment+0x12c>)
 800d1f2:	f007 ff07 	bl	8015004 <iprintf>
  seg->len = p->tot_len - optlen;
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	891a      	ldrh	r2, [r3, #8]
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	b29a      	uxth	r2, r3
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d206:	2114      	movs	r1, #20
 800d208:	68b8      	ldr	r0, [r7, #8]
 800d20a:	f7fb fdbd 	bl	8008d88 <pbuf_add_header>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d004      	beq.n	800d21e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d214:	6938      	ldr	r0, [r7, #16]
 800d216:	f7fd f8d2 	bl	800a3be <tcp_seg_free>
    return NULL;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e036      	b.n	800d28c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	8ada      	ldrh	r2, [r3, #22]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	68dc      	ldr	r4, [r3, #12]
 800d230:	4610      	mov	r0, r2
 800d232:	f7fa fab1 	bl	8007798 <lwip_htons>
 800d236:	4603      	mov	r3, r0
 800d238:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	8b1a      	ldrh	r2, [r3, #24]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	68dc      	ldr	r4, [r3, #12]
 800d242:	4610      	mov	r0, r2
 800d244:	f7fa faa8 	bl	8007798 <lwip_htons>
 800d248:	4603      	mov	r3, r0
 800d24a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	68dc      	ldr	r4, [r3, #12]
 800d250:	6838      	ldr	r0, [r7, #0]
 800d252:	f7fa fab7 	bl	80077c4 <lwip_htonl>
 800d256:	4603      	mov	r3, r0
 800d258:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	089b      	lsrs	r3, r3, #2
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	3305      	adds	r3, #5
 800d262:	b29b      	uxth	r3, r3
 800d264:	031b      	lsls	r3, r3, #12
 800d266:	b29a      	uxth	r2, r3
 800d268:	79fb      	ldrb	r3, [r7, #7]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	4313      	orrs	r3, r2
 800d26e:	b29a      	uxth	r2, r3
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	68dc      	ldr	r4, [r3, #12]
 800d274:	4610      	mov	r0, r2
 800d276:	f7fa fa8f 	bl	8007798 <lwip_htons>
 800d27a:	4603      	mov	r3, r0
 800d27c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	749a      	strb	r2, [r3, #18]
 800d286:	2200      	movs	r2, #0
 800d288:	74da      	strb	r2, [r3, #19]
  return seg;
 800d28a:	693b      	ldr	r3, [r7, #16]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	371c      	adds	r7, #28
 800d290:	46bd      	mov	sp, r7
 800d292:	bd90      	pop	{r4, r7, pc}
 800d294:	0801a6f4 	.word	0x0801a6f4
 800d298:	0801a728 	.word	0x0801a728
 800d29c:	0801a748 	.word	0x0801a748
 800d2a0:	0801a770 	.word	0x0801a770
 800d2a4:	0801a794 	.word	0x0801a794

0800d2a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	607b      	str	r3, [r7, #4]
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	81bb      	strh	r3, [r7, #12]
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d2bc:	89bb      	ldrh	r3, [r7, #12]
 800d2be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d105      	bne.n	800d2d2 <tcp_pbuf_prealloc+0x2a>
 800d2c6:	4b30      	ldr	r3, [pc, #192]	@ (800d388 <tcp_pbuf_prealloc+0xe0>)
 800d2c8:	22e8      	movs	r2, #232	@ 0xe8
 800d2ca:	4930      	ldr	r1, [pc, #192]	@ (800d38c <tcp_pbuf_prealloc+0xe4>)
 800d2cc:	4830      	ldr	r0, [pc, #192]	@ (800d390 <tcp_pbuf_prealloc+0xe8>)
 800d2ce:	f007 fe99 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d105      	bne.n	800d2e4 <tcp_pbuf_prealloc+0x3c>
 800d2d8:	4b2b      	ldr	r3, [pc, #172]	@ (800d388 <tcp_pbuf_prealloc+0xe0>)
 800d2da:	22e9      	movs	r2, #233	@ 0xe9
 800d2dc:	492d      	ldr	r1, [pc, #180]	@ (800d394 <tcp_pbuf_prealloc+0xec>)
 800d2de:	482c      	ldr	r0, [pc, #176]	@ (800d390 <tcp_pbuf_prealloc+0xe8>)
 800d2e0:	f007 fe90 	bl	8015004 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d2e4:	89ba      	ldrh	r2, [r7, #12]
 800d2e6:	897b      	ldrh	r3, [r7, #10]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d221      	bcs.n	800d330 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d2ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d111      	bne.n	800d31c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	8b5b      	ldrh	r3, [r3, #26]
 800d2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d300:	2b00      	cmp	r3, #0
 800d302:	d115      	bne.n	800d330 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d304:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d007      	beq.n	800d31c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d30c:	6a3b      	ldr	r3, [r7, #32]
 800d30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d314:	6a3b      	ldr	r3, [r7, #32]
 800d316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d009      	beq.n	800d330 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d31c:	89bb      	ldrh	r3, [r7, #12]
 800d31e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d322:	f023 0203 	bic.w	r2, r3, #3
 800d326:	897b      	ldrh	r3, [r7, #10]
 800d328:	4293      	cmp	r3, r2
 800d32a:	bf28      	it	cs
 800d32c:	4613      	movcs	r3, r2
 800d32e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d330:	8af9      	ldrh	r1, [r7, #22]
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fb fad7 	bl	80088ec <pbuf_alloc>
 800d33e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	e019      	b.n	800d37e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <tcp_pbuf_prealloc+0xb8>
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <tcp_pbuf_prealloc+0xe0>)
 800d354:	f240 120b 	movw	r2, #267	@ 0x10b
 800d358:	490f      	ldr	r1, [pc, #60]	@ (800d398 <tcp_pbuf_prealloc+0xf0>)
 800d35a:	480d      	ldr	r0, [pc, #52]	@ (800d390 <tcp_pbuf_prealloc+0xe8>)
 800d35c:	f007 fe52 	bl	8015004 <iprintf>
  *oversize = p->len - length;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	895a      	ldrh	r2, [r3, #10]
 800d364:	89bb      	ldrh	r3, [r7, #12]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	b29a      	uxth	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	89ba      	ldrh	r2, [r7, #12]
 800d372:	811a      	strh	r2, [r3, #8]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	891a      	ldrh	r2, [r3, #8]
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	815a      	strh	r2, [r3, #10]
  return p;
 800d37c:	693b      	ldr	r3, [r7, #16]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	0801a6f4 	.word	0x0801a6f4
 800d38c:	0801a7ac 	.word	0x0801a7ac
 800d390:	0801a748 	.word	0x0801a748
 800d394:	0801a7d0 	.word	0x0801a7d0
 800d398:	0801a7f0 	.word	0x0801a7f0

0800d39c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <tcp_write_checks+0x20>
 800d3ae:	4b33      	ldr	r3, [pc, #204]	@ (800d47c <tcp_write_checks+0xe0>)
 800d3b0:	f240 1233 	movw	r2, #307	@ 0x133
 800d3b4:	4932      	ldr	r1, [pc, #200]	@ (800d480 <tcp_write_checks+0xe4>)
 800d3b6:	4833      	ldr	r0, [pc, #204]	@ (800d484 <tcp_write_checks+0xe8>)
 800d3b8:	f007 fe24 	bl	8015004 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	7d1b      	ldrb	r3, [r3, #20]
 800d3c0:	2b04      	cmp	r3, #4
 800d3c2:	d00e      	beq.n	800d3e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d3c8:	2b07      	cmp	r3, #7
 800d3ca:	d00a      	beq.n	800d3e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d006      	beq.n	800d3e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d3d8:	2b03      	cmp	r3, #3
 800d3da:	d002      	beq.n	800d3e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d3dc:	f06f 030a 	mvn.w	r3, #10
 800d3e0:	e048      	b.n	800d474 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d3e2:	887b      	ldrh	r3, [r7, #2]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <tcp_write_checks+0x50>
    return ERR_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e043      	b.n	800d474 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d3f2:	887a      	ldrh	r2, [r7, #2]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d909      	bls.n	800d40c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	8b5b      	ldrh	r3, [r3, #26]
 800d3fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d400:	b29a      	uxth	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d406:	f04f 33ff 	mov.w	r3, #4294967295
 800d40a:	e033      	b.n	800d474 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d412:	2b1e      	cmp	r3, #30
 800d414:	d909      	bls.n	800d42a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	8b5b      	ldrh	r3, [r3, #26]
 800d41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d41e:	b29a      	uxth	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d424:	f04f 33ff 	mov.w	r3, #4294967295
 800d428:	e024      	b.n	800d474 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00f      	beq.n	800d454 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d11a      	bne.n	800d472 <tcp_write_checks+0xd6>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d116      	bne.n	800d472 <tcp_write_checks+0xd6>
 800d444:	4b0d      	ldr	r3, [pc, #52]	@ (800d47c <tcp_write_checks+0xe0>)
 800d446:	f240 1255 	movw	r2, #341	@ 0x155
 800d44a:	490f      	ldr	r1, [pc, #60]	@ (800d488 <tcp_write_checks+0xec>)
 800d44c:	480d      	ldr	r0, [pc, #52]	@ (800d484 <tcp_write_checks+0xe8>)
 800d44e:	f007 fdd9 	bl	8015004 <iprintf>
 800d452:	e00e      	b.n	800d472 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d103      	bne.n	800d464 <tcp_write_checks+0xc8>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <tcp_write_checks+0xd6>
 800d464:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <tcp_write_checks+0xe0>)
 800d466:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d46a:	4908      	ldr	r1, [pc, #32]	@ (800d48c <tcp_write_checks+0xf0>)
 800d46c:	4805      	ldr	r0, [pc, #20]	@ (800d484 <tcp_write_checks+0xe8>)
 800d46e:	f007 fdc9 	bl	8015004 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	0801a6f4 	.word	0x0801a6f4
 800d480:	0801a804 	.word	0x0801a804
 800d484:	0801a748 	.word	0x0801a748
 800d488:	0801a824 	.word	0x0801a824
 800d48c:	0801a860 	.word	0x0801a860

0800d490 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d490:	b590      	push	{r4, r7, lr}
 800d492:	b09b      	sub	sp, #108	@ 0x6c
 800d494:	af04      	add	r7, sp, #16
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	4611      	mov	r1, r2
 800d49c:	461a      	mov	r2, r3
 800d49e:	460b      	mov	r3, r1
 800d4a0:	80fb      	strh	r3, [r7, #6]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d109      	bne.n	800d4ec <tcp_write+0x5c>
 800d4d8:	4ba4      	ldr	r3, [pc, #656]	@ (800d76c <tcp_write+0x2dc>)
 800d4da:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d4de:	49a4      	ldr	r1, [pc, #656]	@ (800d770 <tcp_write+0x2e0>)
 800d4e0:	48a4      	ldr	r0, [pc, #656]	@ (800d774 <tcp_write+0x2e4>)
 800d4e2:	f007 fd8f 	bl	8015004 <iprintf>
 800d4e6:	f06f 030f 	mvn.w	r3, #15
 800d4ea:	e32a      	b.n	800db42 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	bf28      	it	cs
 800d4fe:	4613      	movcs	r3, r2
 800d500:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d502:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <tcp_write+0x7e>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d50c:	e000      	b.n	800d510 <tcp_write+0x80>
 800d50e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d510:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d109      	bne.n	800d52c <tcp_write+0x9c>
 800d518:	4b94      	ldr	r3, [pc, #592]	@ (800d76c <tcp_write+0x2dc>)
 800d51a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d51e:	4996      	ldr	r1, [pc, #600]	@ (800d778 <tcp_write+0x2e8>)
 800d520:	4894      	ldr	r0, [pc, #592]	@ (800d774 <tcp_write+0x2e4>)
 800d522:	f007 fd6f 	bl	8015004 <iprintf>
 800d526:	f06f 030f 	mvn.w	r3, #15
 800d52a:	e30a      	b.n	800db42 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	4619      	mov	r1, r3
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f7ff ff33 	bl	800d39c <tcp_write_checks>
 800d536:	4603      	mov	r3, r0
 800d538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d53c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <tcp_write+0xba>
    return err;
 800d544:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d548:	e2fb      	b.n	800db42 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d550:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d554:	2300      	movs	r3, #0
 800d556:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 80f6 	beq.w	800d750 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d568:	653b      	str	r3, [r7, #80]	@ 0x50
 800d56a:	e002      	b.n	800d572 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1f8      	bne.n	800d56c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d57c:	7a9b      	ldrb	r3, [r3, #10]
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	b29b      	uxth	r3, r3
 800d582:	f003 0304 	and.w	r3, r3, #4
 800d586:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d588:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d58c:	891b      	ldrh	r3, [r3, #8]
 800d58e:	4619      	mov	r1, r3
 800d590:	8c3b      	ldrh	r3, [r7, #32]
 800d592:	440b      	add	r3, r1
 800d594:	429a      	cmp	r2, r3
 800d596:	da06      	bge.n	800d5a6 <tcp_write+0x116>
 800d598:	4b74      	ldr	r3, [pc, #464]	@ (800d76c <tcp_write+0x2dc>)
 800d59a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d59e:	4977      	ldr	r1, [pc, #476]	@ (800d77c <tcp_write+0x2ec>)
 800d5a0:	4874      	ldr	r0, [pc, #464]	@ (800d774 <tcp_write+0x2e4>)
 800d5a2:	f007 fd2f 	bl	8015004 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d5a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5a8:	891a      	ldrh	r2, [r3, #8]
 800d5aa:	8c3b      	ldrh	r3, [r7, #32]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d5be:	8a7b      	ldrh	r3, [r7, #18]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d026      	beq.n	800d612 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d5c4:	8a7b      	ldrh	r3, [r7, #18]
 800d5c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d206      	bcs.n	800d5da <tcp_write+0x14a>
 800d5cc:	4b67      	ldr	r3, [pc, #412]	@ (800d76c <tcp_write+0x2dc>)
 800d5ce:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d5d2:	496b      	ldr	r1, [pc, #428]	@ (800d780 <tcp_write+0x2f0>)
 800d5d4:	4867      	ldr	r0, [pc, #412]	@ (800d774 <tcp_write+0x2e4>)
 800d5d6:	f007 fd15 	bl	8015004 <iprintf>
      seg = last_unsent;
 800d5da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d5de:	8a7b      	ldrh	r3, [r7, #18]
 800d5e0:	88fa      	ldrh	r2, [r7, #6]
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	bf28      	it	cs
 800d5e6:	4613      	movcs	r3, r2
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	bf28      	it	cs
 800d5f0:	4613      	movcs	r3, r2
 800d5f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d5f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d5f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d600:	8a7a      	ldrh	r2, [r7, #18]
 800d602:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	b29b      	uxth	r3, r3
 800d608:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d60a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d60c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d612:	8a7b      	ldrh	r3, [r7, #18]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d00b      	beq.n	800d630 <tcp_write+0x1a0>
 800d618:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d61c:	88fb      	ldrh	r3, [r7, #6]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d006      	beq.n	800d630 <tcp_write+0x1a0>
 800d622:	4b52      	ldr	r3, [pc, #328]	@ (800d76c <tcp_write+0x2dc>)
 800d624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d628:	4956      	ldr	r1, [pc, #344]	@ (800d784 <tcp_write+0x2f4>)
 800d62a:	4852      	ldr	r0, [pc, #328]	@ (800d774 <tcp_write+0x2e4>)
 800d62c:	f007 fcea 	bl	8015004 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d630:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d634:	88fb      	ldrh	r3, [r7, #6]
 800d636:	429a      	cmp	r2, r3
 800d638:	f080 8167 	bcs.w	800d90a <tcp_write+0x47a>
 800d63c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f000 8163 	beq.w	800d90a <tcp_write+0x47a>
 800d644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d646:	891b      	ldrh	r3, [r3, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 815e 	beq.w	800d90a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d64e:	88fa      	ldrh	r2, [r7, #6]
 800d650:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d654:	1ad2      	subs	r2, r2, r3
 800d656:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d658:	4293      	cmp	r3, r2
 800d65a:	bfa8      	it	ge
 800d65c:	4613      	movge	r3, r2
 800d65e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d662:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d664:	797b      	ldrb	r3, [r7, #5]
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d027      	beq.n	800d6be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d66e:	f107 0012 	add.w	r0, r7, #18
 800d672:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d674:	8bf9      	ldrh	r1, [r7, #30]
 800d676:	2301      	movs	r3, #1
 800d678:	9302      	str	r3, [sp, #8]
 800d67a:	797b      	ldrb	r3, [r7, #5]
 800d67c:	9301      	str	r3, [sp, #4]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	4603      	mov	r3, r0
 800d684:	2000      	movs	r0, #0
 800d686:	f7ff fe0f 	bl	800d2a8 <tcp_pbuf_prealloc>
 800d68a:	6578      	str	r0, [r7, #84]	@ 0x54
 800d68c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 8225 	beq.w	800dade <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d696:	6858      	ldr	r0, [r3, #4]
 800d698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	4413      	add	r3, r2
 800d6a0:	8bfa      	ldrh	r2, [r7, #30]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f007 fed3 	bl	801544e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d6a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d6aa:	f7fb fc8b 	bl	8008fc4 <pbuf_clen>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d6bc:	e041      	b.n	800d742 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d6be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6c4:	e002      	b.n	800d6cc <tcp_write+0x23c>
 800d6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1f8      	bne.n	800d6c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d6:	7b1b      	ldrb	r3, [r3, #12]
 800d6d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d115      	bne.n	800d70c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6e6:	8952      	ldrh	r2, [r2, #10]
 800d6e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d10d      	bne.n	800d70c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d6f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d006      	beq.n	800d706 <tcp_write+0x276>
 800d6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800d76c <tcp_write+0x2dc>)
 800d6fa:	f240 2231 	movw	r2, #561	@ 0x231
 800d6fe:	4922      	ldr	r1, [pc, #136]	@ (800d788 <tcp_write+0x2f8>)
 800d700:	481c      	ldr	r0, [pc, #112]	@ (800d774 <tcp_write+0x2e4>)
 800d702:	f007 fc7f 	bl	8015004 <iprintf>
          extendlen = seglen;
 800d706:	8bfb      	ldrh	r3, [r7, #30]
 800d708:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d70a:	e01a      	b.n	800d742 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d70c:	8bfb      	ldrh	r3, [r7, #30]
 800d70e:	2201      	movs	r2, #1
 800d710:	4619      	mov	r1, r3
 800d712:	2000      	movs	r0, #0
 800d714:	f7fb f8ea 	bl	80088ec <pbuf_alloc>
 800d718:	6578      	str	r0, [r7, #84]	@ 0x54
 800d71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 81e0 	beq.w	800dae2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d722:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	441a      	add	r2, r3
 800d72a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d72c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d72e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d730:	f7fb fc48 	bl	8008fc4 <pbuf_clen>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d73c:	4413      	add	r3, r2
 800d73e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d742:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d746:	8bfb      	ldrh	r3, [r7, #30]
 800d748:	4413      	add	r3, r2
 800d74a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d74e:	e0dc      	b.n	800d90a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 80d7 	beq.w	800d90a <tcp_write+0x47a>
 800d75c:	4b03      	ldr	r3, [pc, #12]	@ (800d76c <tcp_write+0x2dc>)
 800d75e:	f240 224a 	movw	r2, #586	@ 0x24a
 800d762:	490a      	ldr	r1, [pc, #40]	@ (800d78c <tcp_write+0x2fc>)
 800d764:	4803      	ldr	r0, [pc, #12]	@ (800d774 <tcp_write+0x2e4>)
 800d766:	f007 fc4d 	bl	8015004 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d76a:	e0ce      	b.n	800d90a <tcp_write+0x47a>
 800d76c:	0801a6f4 	.word	0x0801a6f4
 800d770:	0801a894 	.word	0x0801a894
 800d774:	0801a748 	.word	0x0801a748
 800d778:	0801a8ac 	.word	0x0801a8ac
 800d77c:	0801a8e0 	.word	0x0801a8e0
 800d780:	0801a8f8 	.word	0x0801a8f8
 800d784:	0801a918 	.word	0x0801a918
 800d788:	0801a938 	.word	0x0801a938
 800d78c:	0801a964 	.word	0x0801a964
    struct pbuf *p;
    u16_t left = len - pos;
 800d790:	88fa      	ldrh	r2, [r7, #6]
 800d792:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d79a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d7a6:	8b7a      	ldrh	r2, [r7, #26]
 800d7a8:	8bbb      	ldrh	r3, [r7, #28]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	bf28      	it	cs
 800d7ae:	4613      	movcs	r3, r2
 800d7b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d7b2:	797b      	ldrb	r3, [r7, #5]
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d036      	beq.n	800d82a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d7bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	8b3b      	ldrh	r3, [r7, #24]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	b299      	uxth	r1, r3
 800d7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2301      	moveq	r3, #1
 800d7d0:	2300      	movne	r3, #0
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f107 0012 	add.w	r0, r7, #18
 800d7d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	797b      	ldrb	r3, [r7, #5]
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2036      	movs	r0, #54	@ 0x36
 800d7e8:	f7ff fd5e 	bl	800d2a8 <tcp_pbuf_prealloc>
 800d7ec:	6338      	str	r0, [r7, #48]	@ 0x30
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f000 8178 	beq.w	800dae6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f8:	895b      	ldrh	r3, [r3, #10]
 800d7fa:	8b3a      	ldrh	r2, [r7, #24]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d906      	bls.n	800d80e <tcp_write+0x37e>
 800d800:	4b8c      	ldr	r3, [pc, #560]	@ (800da34 <tcp_write+0x5a4>)
 800d802:	f240 2266 	movw	r2, #614	@ 0x266
 800d806:	498c      	ldr	r1, [pc, #560]	@ (800da38 <tcp_write+0x5a8>)
 800d808:	488c      	ldr	r0, [pc, #560]	@ (800da3c <tcp_write+0x5ac>)
 800d80a:	f007 fbfb 	bl	8015004 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d810:	685a      	ldr	r2, [r3, #4]
 800d812:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d816:	18d0      	adds	r0, r2, r3
 800d818:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	4413      	add	r3, r2
 800d820:	8b3a      	ldrh	r2, [r7, #24]
 800d822:	4619      	mov	r1, r3
 800d824:	f007 fe13 	bl	801544e <memcpy>
 800d828:	e02f      	b.n	800d88a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d82a:	8a7b      	ldrh	r3, [r7, #18]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d006      	beq.n	800d83e <tcp_write+0x3ae>
 800d830:	4b80      	ldr	r3, [pc, #512]	@ (800da34 <tcp_write+0x5a4>)
 800d832:	f240 2271 	movw	r2, #625	@ 0x271
 800d836:	4982      	ldr	r1, [pc, #520]	@ (800da40 <tcp_write+0x5b0>)
 800d838:	4880      	ldr	r0, [pc, #512]	@ (800da3c <tcp_write+0x5ac>)
 800d83a:	f007 fbe3 	bl	8015004 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d83e:	8b3b      	ldrh	r3, [r7, #24]
 800d840:	2201      	movs	r2, #1
 800d842:	4619      	mov	r1, r3
 800d844:	2036      	movs	r0, #54	@ 0x36
 800d846:	f7fb f851 	bl	80088ec <pbuf_alloc>
 800d84a:	6178      	str	r0, [r7, #20]
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	f000 814b 	beq.w	800daea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d854:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	441a      	add	r2, r3
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d860:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d864:	b29b      	uxth	r3, r3
 800d866:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d86a:	4619      	mov	r1, r3
 800d86c:	2036      	movs	r0, #54	@ 0x36
 800d86e:	f7fb f83d 	bl	80088ec <pbuf_alloc>
 800d872:	6338      	str	r0, [r7, #48]	@ 0x30
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	2b00      	cmp	r3, #0
 800d878:	d103      	bne.n	800d882 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d87a:	6978      	ldr	r0, [r7, #20]
 800d87c:	f7fb fb1a 	bl	8008eb4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d880:	e136      	b.n	800daf0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d882:	6979      	ldr	r1, [r7, #20]
 800d884:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d886:	f7fb fbd7 	bl	8009038 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d88a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d88c:	f7fb fb9a 	bl	8008fc4 <pbuf_clen>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d898:	4413      	add	r3, r2
 800d89a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d89e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d8a2:	2b1f      	cmp	r3, #31
 800d8a4:	d903      	bls.n	800d8ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d8a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8a8:	f7fb fb04 	bl	8008eb4 <pbuf_free>
      goto memerr;
 800d8ac:	e120      	b.n	800daf0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d8b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d8b6:	441a      	add	r2, r3
 800d8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fc53 	bl	800d170 <tcp_create_segment>
 800d8ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f000 810d 	beq.w	800daee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d102      	bne.n	800d8e0 <tcp_write+0x450>
      queue = seg;
 800d8da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8de:	e00c      	b.n	800d8fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d8e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <tcp_write+0x464>
 800d8e6:	4b53      	ldr	r3, [pc, #332]	@ (800da34 <tcp_write+0x5a4>)
 800d8e8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d8ec:	4955      	ldr	r1, [pc, #340]	@ (800da44 <tcp_write+0x5b4>)
 800d8ee:	4853      	ldr	r0, [pc, #332]	@ (800da3c <tcp_write+0x5ac>)
 800d8f0:	f007 fb88 	bl	8015004 <iprintf>
      prev_seg->next = seg;
 800d8f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d8fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d902:	8b3b      	ldrh	r3, [r7, #24]
 800d904:	4413      	add	r3, r2
 800d906:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d90a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d90e:	88fb      	ldrh	r3, [r7, #6]
 800d910:	429a      	cmp	r2, r3
 800d912:	f4ff af3d 	bcc.w	800d790 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d916:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02c      	beq.n	800d976 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d91c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d922:	e01e      	b.n	800d962 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d926:	891a      	ldrh	r2, [r3, #8]
 800d928:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d92a:	4413      	add	r3, r2
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d930:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d110      	bne.n	800d95c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d940:	8952      	ldrh	r2, [r2, #10]
 800d942:	4413      	add	r3, r2
 800d944:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	4618      	mov	r0, r3
 800d94a:	f007 fd80 	bl	801544e <memcpy>
        p->len += oversize_used;
 800d94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d950:	895a      	ldrh	r2, [r3, #10]
 800d952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d954:	4413      	add	r3, r2
 800d956:	b29a      	uxth	r2, r3
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1dd      	bne.n	800d924 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d96a:	891a      	ldrh	r2, [r3, #8]
 800d96c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d96e:	4413      	add	r3, r2
 800d970:	b29a      	uxth	r2, r3
 800d972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d974:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d976:	8a7a      	ldrh	r2, [r7, #18]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d97e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d980:	2b00      	cmp	r3, #0
 800d982:	d018      	beq.n	800d9b6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <tcp_write+0x508>
 800d98a:	4b2a      	ldr	r3, [pc, #168]	@ (800da34 <tcp_write+0x5a4>)
 800d98c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d990:	492d      	ldr	r1, [pc, #180]	@ (800da48 <tcp_write+0x5b8>)
 800d992:	482a      	ldr	r0, [pc, #168]	@ (800da3c <tcp_write+0x5ac>)
 800d994:	f007 fb36 	bl	8015004 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fb fb4a 	bl	8009038 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d9a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a6:	891a      	ldrh	r2, [r3, #8]
 800d9a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9aa:	891b      	ldrh	r3, [r3, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9b2:	811a      	strh	r2, [r3, #8]
 800d9b4:	e037      	b.n	800da26 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d9b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d034      	beq.n	800da26 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d9bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <tcp_write+0x53a>
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <tcp_write+0x548>
 800d9ca:	4b1a      	ldr	r3, [pc, #104]	@ (800da34 <tcp_write+0x5a4>)
 800d9cc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d9d0:	491e      	ldr	r1, [pc, #120]	@ (800da4c <tcp_write+0x5bc>)
 800d9d2:	481a      	ldr	r0, [pc, #104]	@ (800da3c <tcp_write+0x5ac>)
 800d9d4:	f007 fb16 	bl	8015004 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d9d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9de:	e009      	b.n	800d9f4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e2:	891a      	ldrh	r2, [r3, #8]
 800d9e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d9e6:	4413      	add	r3, r2
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1f1      	bne.n	800d9e0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fe:	891a      	ldrh	r2, [r3, #8]
 800da00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800da02:	4413      	add	r3, r2
 800da04:	b29a      	uxth	r2, r3
 800da06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da08:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800da0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0c:	895a      	ldrh	r2, [r3, #10]
 800da0e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800da10:	4413      	add	r3, r2
 800da12:	b29a      	uxth	r2, r3
 800da14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da16:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800da18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da1a:	891a      	ldrh	r2, [r3, #8]
 800da1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800da1e:	4413      	add	r3, r2
 800da20:	b29a      	uxth	r2, r3
 800da22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da24:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800da26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d111      	bne.n	800da50 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da30:	66da      	str	r2, [r3, #108]	@ 0x6c
 800da32:	e010      	b.n	800da56 <tcp_write+0x5c6>
 800da34:	0801a6f4 	.word	0x0801a6f4
 800da38:	0801a994 	.word	0x0801a994
 800da3c:	0801a748 	.word	0x0801a748
 800da40:	0801a9d4 	.word	0x0801a9d4
 800da44:	0801a9e4 	.word	0x0801a9e4
 800da48:	0801a9f8 	.word	0x0801a9f8
 800da4c:	0801aa30 	.word	0x0801aa30
  } else {
    last_unsent->next = queue;
 800da50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da54:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	441a      	add	r2, r3
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800da68:	88fb      	ldrh	r3, [r7, #6]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800da7a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00e      	beq.n	800daa6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10a      	bne.n	800daa6 <tcp_write+0x616>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d106      	bne.n	800daa6 <tcp_write+0x616>
 800da98:	4b2c      	ldr	r3, [pc, #176]	@ (800db4c <tcp_write+0x6bc>)
 800da9a:	f240 3212 	movw	r2, #786	@ 0x312
 800da9e:	492c      	ldr	r1, [pc, #176]	@ (800db50 <tcp_write+0x6c0>)
 800daa0:	482c      	ldr	r0, [pc, #176]	@ (800db54 <tcp_write+0x6c4>)
 800daa2:	f007 faaf 	bl	8015004 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800daa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d016      	beq.n	800dada <tcp_write+0x64a>
 800daac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d012      	beq.n	800dada <tcp_write+0x64a>
 800dab4:	797b      	ldrb	r3, [r7, #5]
 800dab6:	f003 0302 	and.w	r3, r3, #2
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10d      	bne.n	800dada <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dabe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	899b      	ldrh	r3, [r3, #12]
 800dac4:	b29c      	uxth	r4, r3
 800dac6:	2008      	movs	r0, #8
 800dac8:	f7f9 fe66 	bl	8007798 <lwip_htons>
 800dacc:	4603      	mov	r3, r0
 800dace:	461a      	mov	r2, r3
 800dad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	4322      	orrs	r2, r4
 800dad6:	b292      	uxth	r2, r2
 800dad8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	e031      	b.n	800db42 <tcp_write+0x6b2>
          goto memerr;
 800dade:	bf00      	nop
 800dae0:	e006      	b.n	800daf0 <tcp_write+0x660>
            goto memerr;
 800dae2:	bf00      	nop
 800dae4:	e004      	b.n	800daf0 <tcp_write+0x660>
        goto memerr;
 800dae6:	bf00      	nop
 800dae8:	e002      	b.n	800daf0 <tcp_write+0x660>
        goto memerr;
 800daea:	bf00      	nop
 800daec:	e000      	b.n	800daf0 <tcp_write+0x660>
      goto memerr;
 800daee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	8b5b      	ldrh	r3, [r3, #26]
 800daf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800dafe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800db04:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800db06:	f7fb f9d5 	bl	8008eb4 <pbuf_free>
  }
  if (queue != NULL) {
 800db0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <tcp_write+0x686>
    tcp_segs_free(queue);
 800db10:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800db12:	f7fc fc3f 	bl	800a394 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00e      	beq.n	800db3e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <tcp_write+0x6ae>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <tcp_write+0x6ae>
 800db30:	4b06      	ldr	r3, [pc, #24]	@ (800db4c <tcp_write+0x6bc>)
 800db32:	f240 3227 	movw	r2, #807	@ 0x327
 800db36:	4906      	ldr	r1, [pc, #24]	@ (800db50 <tcp_write+0x6c0>)
 800db38:	4806      	ldr	r0, [pc, #24]	@ (800db54 <tcp_write+0x6c4>)
 800db3a:	f007 fa63 	bl	8015004 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db42:	4618      	mov	r0, r3
 800db44:	375c      	adds	r7, #92	@ 0x5c
 800db46:	46bd      	mov	sp, r7
 800db48:	bd90      	pop	{r4, r7, pc}
 800db4a:	bf00      	nop
 800db4c:	0801a6f4 	.word	0x0801a6f4
 800db50:	0801aa68 	.word	0x0801aa68
 800db54:	0801a748 	.word	0x0801a748

0800db58 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b08b      	sub	sp, #44	@ 0x2c
 800db5c:	af02      	add	r7, sp, #8
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	61fb      	str	r3, [r7, #28]
 800db68:	2300      	movs	r3, #0
 800db6a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800db6c:	2300      	movs	r3, #0
 800db6e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <tcp_split_unsent_seg+0x2c>
 800db76:	4b95      	ldr	r3, [pc, #596]	@ (800ddcc <tcp_split_unsent_seg+0x274>)
 800db78:	f240 324b 	movw	r2, #843	@ 0x34b
 800db7c:	4994      	ldr	r1, [pc, #592]	@ (800ddd0 <tcp_split_unsent_seg+0x278>)
 800db7e:	4895      	ldr	r0, [pc, #596]	@ (800ddd4 <tcp_split_unsent_seg+0x27c>)
 800db80:	f007 fa40 	bl	8015004 <iprintf>

  useg = pcb->unsent;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db88:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800db90:	f04f 33ff 	mov.w	r3, #4294967295
 800db94:	e116      	b.n	800ddc4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800db96:	887b      	ldrh	r3, [r7, #2]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800db9c:	4b8b      	ldr	r3, [pc, #556]	@ (800ddcc <tcp_split_unsent_seg+0x274>)
 800db9e:	f240 3253 	movw	r2, #851	@ 0x353
 800dba2:	498d      	ldr	r1, [pc, #564]	@ (800ddd8 <tcp_split_unsent_seg+0x280>)
 800dba4:	488b      	ldr	r0, [pc, #556]	@ (800ddd4 <tcp_split_unsent_seg+0x27c>)
 800dba6:	f007 fa2d 	bl	8015004 <iprintf>
    return ERR_VAL;
 800dbaa:	f06f 0305 	mvn.w	r3, #5
 800dbae:	e109      	b.n	800ddc4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	891b      	ldrh	r3, [r3, #8]
 800dbb4:	887a      	ldrh	r2, [r7, #2]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d301      	bcc.n	800dbbe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e102      	b.n	800ddc4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dbc2:	887a      	ldrh	r2, [r7, #2]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d906      	bls.n	800dbd6 <tcp_split_unsent_seg+0x7e>
 800dbc8:	4b80      	ldr	r3, [pc, #512]	@ (800ddcc <tcp_split_unsent_seg+0x274>)
 800dbca:	f240 325b 	movw	r2, #859	@ 0x35b
 800dbce:	4983      	ldr	r1, [pc, #524]	@ (800dddc <tcp_split_unsent_seg+0x284>)
 800dbd0:	4880      	ldr	r0, [pc, #512]	@ (800ddd4 <tcp_split_unsent_seg+0x27c>)
 800dbd2:	f007 fa17 	bl	8015004 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	891b      	ldrh	r3, [r3, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <tcp_split_unsent_seg+0x94>
 800dbde:	4b7b      	ldr	r3, [pc, #492]	@ (800ddcc <tcp_split_unsent_seg+0x274>)
 800dbe0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800dbe4:	497e      	ldr	r1, [pc, #504]	@ (800dde0 <tcp_split_unsent_seg+0x288>)
 800dbe6:	487b      	ldr	r0, [pc, #492]	@ (800ddd4 <tcp_split_unsent_seg+0x27c>)
 800dbe8:	f007 fa0c 	bl	8015004 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	7a9b      	ldrb	r3, [r3, #10]
 800dbf0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	f003 0304 	and.w	r3, r3, #4
 800dbfc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	891a      	ldrh	r2, [r3, #8]
 800dc02:	887b      	ldrh	r3, [r7, #2]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dc08:	7bbb      	ldrb	r3, [r7, #14]
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	89bb      	ldrh	r3, [r7, #12]
 800dc0e:	4413      	add	r3, r2
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc16:	4619      	mov	r1, r3
 800dc18:	2036      	movs	r0, #54	@ 0x36
 800dc1a:	f7fa fe67 	bl	80088ec <pbuf_alloc>
 800dc1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 80b7 	beq.w	800dd96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	891a      	ldrh	r2, [r3, #8]
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	891b      	ldrh	r3, [r3, #8]
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	4413      	add	r3, r2
 800dc3a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6858      	ldr	r0, [r3, #4]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
 800dc46:	18d1      	adds	r1, r2, r3
 800dc48:	897b      	ldrh	r3, [r7, #10]
 800dc4a:	89ba      	ldrh	r2, [r7, #12]
 800dc4c:	f7fb fb2c 	bl	80092a8 <pbuf_copy_partial>
 800dc50:	4603      	mov	r3, r0
 800dc52:	461a      	mov	r2, r3
 800dc54:	89bb      	ldrh	r3, [r7, #12]
 800dc56:	4293      	cmp	r3, r2
 800dc58:	f040 809f 	bne.w	800dd9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	899b      	ldrh	r3, [r3, #12]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7f9 fd97 	bl	8007798 <lwip_htons>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc72:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dc74:	2300      	movs	r3, #0
 800dc76:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dc78:	7efb      	ldrb	r3, [r7, #27]
 800dc7a:	f003 0308 	and.w	r3, r3, #8
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d007      	beq.n	800dc92 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800dc82:	7efb      	ldrb	r3, [r7, #27]
 800dc84:	f023 0308 	bic.w	r3, r3, #8
 800dc88:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800dc8a:	7ebb      	ldrb	r3, [r7, #26]
 800dc8c:	f043 0308 	orr.w	r3, r3, #8
 800dc90:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dc92:	7efb      	ldrb	r3, [r7, #27]
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d007      	beq.n	800dcac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800dc9c:	7efb      	ldrb	r3, [r7, #27]
 800dc9e:	f023 0301 	bic.w	r3, r3, #1
 800dca2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800dca4:	7ebb      	ldrb	r3, [r7, #26]
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7f9 fd86 	bl	80077c4 <lwip_htonl>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	887b      	ldrh	r3, [r7, #2]
 800dcbc:	18d1      	adds	r1, r2, r3
 800dcbe:	7eba      	ldrb	r2, [r7, #26]
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	6939      	ldr	r1, [r7, #16]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff fa51 	bl	800d170 <tcp_create_segment>
 800dcce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d063      	beq.n	800dd9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fb f972 	bl	8008fc4 <pbuf_clen>
 800dce0:	4603      	mov	r3, r0
 800dce2:	461a      	mov	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dcea:	1a9b      	subs	r3, r3, r2
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	6858      	ldr	r0, [r3, #4]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	891a      	ldrh	r2, [r3, #8]
 800dcfe:	89bb      	ldrh	r3, [r7, #12]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	4619      	mov	r1, r3
 800dd06:	f7fa ff4f 	bl	8008ba8 <pbuf_realloc>
  useg->len -= remainder;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	891a      	ldrh	r2, [r3, #8]
 800dd0e:	89bb      	ldrh	r3, [r7, #12]
 800dd10:	1ad3      	subs	r3, r2, r3
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	899b      	ldrh	r3, [r3, #12]
 800dd1e:	b29c      	uxth	r4, r3
 800dd20:	7efb      	ldrb	r3, [r7, #27]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7f9 fd37 	bl	8007798 <lwip_htons>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	4322      	orrs	r2, r4
 800dd34:	b292      	uxth	r2, r2
 800dd36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fb f941 	bl	8008fc4 <pbuf_clen>
 800dd42:	4603      	mov	r3, r0
 800dd44:	461a      	mov	r2, r3
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd4c:	4413      	add	r3, r2
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fb f932 	bl	8008fc4 <pbuf_clen>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd6a:	4413      	add	r3, r2
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	69fa      	ldr	r2, [r7, #28]
 800dd80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d103      	bne.n	800dd92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	e016      	b.n	800ddc4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dd96:	bf00      	nop
 800dd98:	e002      	b.n	800dda0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dd9a:	bf00      	nop
 800dd9c:	e000      	b.n	800dda0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dd9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d006      	beq.n	800ddb4 <tcp_split_unsent_seg+0x25c>
 800dda6:	4b09      	ldr	r3, [pc, #36]	@ (800ddcc <tcp_split_unsent_seg+0x274>)
 800dda8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800ddac:	490d      	ldr	r1, [pc, #52]	@ (800dde4 <tcp_split_unsent_seg+0x28c>)
 800ddae:	4809      	ldr	r0, [pc, #36]	@ (800ddd4 <tcp_split_unsent_seg+0x27c>)
 800ddb0:	f007 f928 	bl	8015004 <iprintf>
  if (p != NULL) {
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ddba:	6938      	ldr	r0, [r7, #16]
 800ddbc:	f7fb f87a 	bl	8008eb4 <pbuf_free>
  }

  return ERR_MEM;
 800ddc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3724      	adds	r7, #36	@ 0x24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd90      	pop	{r4, r7, pc}
 800ddcc:	0801a6f4 	.word	0x0801a6f4
 800ddd0:	0801aa88 	.word	0x0801aa88
 800ddd4:	0801a748 	.word	0x0801a748
 800ddd8:	0801aaac 	.word	0x0801aaac
 800dddc:	0801aad0 	.word	0x0801aad0
 800dde0:	0801aae0 	.word	0x0801aae0
 800dde4:	0801aaf0 	.word	0x0801aaf0

0800dde8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dde8:	b590      	push	{r4, r7, lr}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <tcp_send_fin+0x1c>
 800ddf6:	4b21      	ldr	r3, [pc, #132]	@ (800de7c <tcp_send_fin+0x94>)
 800ddf8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800ddfc:	4920      	ldr	r1, [pc, #128]	@ (800de80 <tcp_send_fin+0x98>)
 800ddfe:	4821      	ldr	r0, [pc, #132]	@ (800de84 <tcp_send_fin+0x9c>)
 800de00:	f007 f900 	bl	8015004 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d02e      	beq.n	800de6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e002      	b.n	800de1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1f8      	bne.n	800de14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	899b      	ldrh	r3, [r3, #12]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7f9 fcb4 	bl	8007798 <lwip_htons>
 800de30:	4603      	mov	r3, r0
 800de32:	b2db      	uxtb	r3, r3
 800de34:	f003 0307 	and.w	r3, r3, #7
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d116      	bne.n	800de6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	899b      	ldrh	r3, [r3, #12]
 800de42:	b29c      	uxth	r4, r3
 800de44:	2001      	movs	r0, #1
 800de46:	f7f9 fca7 	bl	8007798 <lwip_htons>
 800de4a:	4603      	mov	r3, r0
 800de4c:	461a      	mov	r2, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	4322      	orrs	r2, r4
 800de54:	b292      	uxth	r2, r2
 800de56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8b5b      	ldrh	r3, [r3, #26]
 800de5c:	f043 0320 	orr.w	r3, r3, #32
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	e004      	b.n	800de74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800de6a:	2101      	movs	r1, #1
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 f80b 	bl	800de88 <tcp_enqueue_flags>
 800de72:	4603      	mov	r3, r0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd90      	pop	{r4, r7, pc}
 800de7c:	0801a6f4 	.word	0x0801a6f4
 800de80:	0801aafc 	.word	0x0801aafc
 800de84:	0801a748 	.word	0x0801a748

0800de88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b08a      	sub	sp, #40	@ 0x28
 800de8c:	af02      	add	r7, sp, #8
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800de94:	2300      	movs	r3, #0
 800de96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800de98:	2300      	movs	r3, #0
 800de9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	f003 0303 	and.w	r3, r3, #3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d106      	bne.n	800deb4 <tcp_enqueue_flags+0x2c>
 800dea6:	4b67      	ldr	r3, [pc, #412]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800dea8:	f240 4211 	movw	r2, #1041	@ 0x411
 800deac:	4966      	ldr	r1, [pc, #408]	@ (800e048 <tcp_enqueue_flags+0x1c0>)
 800deae:	4867      	ldr	r0, [pc, #412]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800deb0:	f007 f8a8 	bl	8015004 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d106      	bne.n	800dec8 <tcp_enqueue_flags+0x40>
 800deba:	4b62      	ldr	r3, [pc, #392]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800debc:	f240 4213 	movw	r2, #1043	@ 0x413
 800dec0:	4963      	ldr	r1, [pc, #396]	@ (800e050 <tcp_enqueue_flags+0x1c8>)
 800dec2:	4862      	ldr	r0, [pc, #392]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800dec4:	f007 f89e 	bl	8015004 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dec8:	78fb      	ldrb	r3, [r7, #3]
 800deca:	f003 0302 	and.w	r3, r3, #2
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ded2:	2301      	movs	r3, #1
 800ded4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ded6:	7ffb      	ldrb	r3, [r7, #31]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	f003 0304 	and.w	r3, r3, #4
 800dee0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800deea:	4619      	mov	r1, r3
 800deec:	2036      	movs	r0, #54	@ 0x36
 800deee:	f7fa fcfd 	bl	80088ec <pbuf_alloc>
 800def2:	6138      	str	r0, [r7, #16]
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d109      	bne.n	800df0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	8b5b      	ldrh	r3, [r3, #26]
 800defe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800df08:	f04f 33ff 	mov.w	r3, #4294967295
 800df0c:	e095      	b.n	800e03a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	895a      	ldrh	r2, [r3, #10]
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	b29b      	uxth	r3, r3
 800df16:	429a      	cmp	r2, r3
 800df18:	d206      	bcs.n	800df28 <tcp_enqueue_flags+0xa0>
 800df1a:	4b4a      	ldr	r3, [pc, #296]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800df1c:	f240 4239 	movw	r2, #1081	@ 0x439
 800df20:	494c      	ldr	r1, [pc, #304]	@ (800e054 <tcp_enqueue_flags+0x1cc>)
 800df22:	484a      	ldr	r0, [pc, #296]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800df24:	f007 f86e 	bl	8015004 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800df2c:	78fa      	ldrb	r2, [r7, #3]
 800df2e:	7ffb      	ldrb	r3, [r7, #31]
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	460b      	mov	r3, r1
 800df34:	6939      	ldr	r1, [r7, #16]
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff f91a 	bl	800d170 <tcp_create_segment>
 800df3c:	60f8      	str	r0, [r7, #12]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d109      	bne.n	800df58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	8b5b      	ldrh	r3, [r3, #26]
 800df48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800df52:	f04f 33ff 	mov.w	r3, #4294967295
 800df56:	e070      	b.n	800e03a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	f003 0303 	and.w	r3, r3, #3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d006      	beq.n	800df72 <tcp_enqueue_flags+0xea>
 800df64:	4b37      	ldr	r3, [pc, #220]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800df66:	f240 4242 	movw	r2, #1090	@ 0x442
 800df6a:	493b      	ldr	r1, [pc, #236]	@ (800e058 <tcp_enqueue_flags+0x1d0>)
 800df6c:	4837      	ldr	r0, [pc, #220]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800df6e:	f007 f849 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	891b      	ldrh	r3, [r3, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d006      	beq.n	800df88 <tcp_enqueue_flags+0x100>
 800df7a:	4b32      	ldr	r3, [pc, #200]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800df7c:	f240 4243 	movw	r2, #1091	@ 0x443
 800df80:	4936      	ldr	r1, [pc, #216]	@ (800e05c <tcp_enqueue_flags+0x1d4>)
 800df82:	4832      	ldr	r0, [pc, #200]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800df84:	f007 f83e 	bl	8015004 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d103      	bne.n	800df98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df96:	e00d      	b.n	800dfb4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df9c:	61bb      	str	r3, [r7, #24]
 800df9e:	e002      	b.n	800dfa6 <tcp_enqueue_flags+0x11e>
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	61bb      	str	r3, [r7, #24]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1f8      	bne.n	800dfa0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dfbc:	78fb      	ldrb	r3, [r7, #3]
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d104      	bne.n	800dfd0 <tcp_enqueue_flags+0x148>
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d004      	beq.n	800dfda <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dfda:	78fb      	ldrb	r3, [r7, #3]
 800dfdc:	f003 0301 	and.w	r3, r3, #1
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d006      	beq.n	800dff2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8b5b      	ldrh	r3, [r3, #26]
 800dfe8:	f043 0320 	orr.w	r3, r3, #32
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fa ffe4 	bl	8008fc4 <pbuf_clen>
 800dffc:	4603      	mov	r3, r0
 800dffe:	461a      	mov	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e006:	4413      	add	r3, r2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00e      	beq.n	800e038 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10a      	bne.n	800e038 <tcp_enqueue_flags+0x1b0>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <tcp_enqueue_flags+0x1b0>
 800e02a:	4b06      	ldr	r3, [pc, #24]	@ (800e044 <tcp_enqueue_flags+0x1bc>)
 800e02c:	f240 4265 	movw	r2, #1125	@ 0x465
 800e030:	490b      	ldr	r1, [pc, #44]	@ (800e060 <tcp_enqueue_flags+0x1d8>)
 800e032:	4806      	ldr	r0, [pc, #24]	@ (800e04c <tcp_enqueue_flags+0x1c4>)
 800e034:	f006 ffe6 	bl	8015004 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3720      	adds	r7, #32
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	0801a6f4 	.word	0x0801a6f4
 800e048:	0801ab18 	.word	0x0801ab18
 800e04c:	0801a748 	.word	0x0801a748
 800e050:	0801ab70 	.word	0x0801ab70
 800e054:	0801ab90 	.word	0x0801ab90
 800e058:	0801abcc 	.word	0x0801abcc
 800e05c:	0801abe4 	.word	0x0801abe4
 800e060:	0801ac10 	.word	0x0801ac10

0800e064 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e064:	b5b0      	push	{r4, r5, r7, lr}
 800e066:	b08a      	sub	sp, #40	@ 0x28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <tcp_output+0x1c>
 800e072:	4b8a      	ldr	r3, [pc, #552]	@ (800e29c <tcp_output+0x238>)
 800e074:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e078:	4989      	ldr	r1, [pc, #548]	@ (800e2a0 <tcp_output+0x23c>)
 800e07a:	488a      	ldr	r0, [pc, #552]	@ (800e2a4 <tcp_output+0x240>)
 800e07c:	f006 ffc2 	bl	8015004 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7d1b      	ldrb	r3, [r3, #20]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d106      	bne.n	800e096 <tcp_output+0x32>
 800e088:	4b84      	ldr	r3, [pc, #528]	@ (800e29c <tcp_output+0x238>)
 800e08a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e08e:	4986      	ldr	r1, [pc, #536]	@ (800e2a8 <tcp_output+0x244>)
 800e090:	4884      	ldr	r0, [pc, #528]	@ (800e2a4 <tcp_output+0x240>)
 800e092:	f006 ffb7 	bl	8015004 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e096:	4b85      	ldr	r3, [pc, #532]	@ (800e2ac <tcp_output+0x248>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d101      	bne.n	800e0a4 <tcp_output+0x40>
    return ERR_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	e1ce      	b.n	800e442 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	bf28      	it	cs
 800e0b4:	4613      	movcs	r3, r2
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10b      	bne.n	800e0de <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8b5b      	ldrh	r3, [r3, #26]
 800e0ca:	f003 0302 	and.w	r3, r3, #2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 81aa 	beq.w	800e428 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fdc9 	bl	800ec6c <tcp_send_empty_ack>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	e1b1      	b.n	800e442 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff f826 	bl	800d138 <tcp_route>
 800e0ec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d102      	bne.n	800e0fa <tcp_output+0x96>
    return ERR_RTE;
 800e0f4:	f06f 0303 	mvn.w	r3, #3
 800e0f8:	e1a3      	b.n	800e442 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d003      	beq.n	800e108 <tcp_output+0xa4>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d111      	bne.n	800e12c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d002      	beq.n	800e114 <tcp_output+0xb0>
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	3304      	adds	r3, #4
 800e112:	e000      	b.n	800e116 <tcp_output+0xb2>
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d102      	bne.n	800e124 <tcp_output+0xc0>
      return ERR_RTE;
 800e11e:	f06f 0303 	mvn.w	r3, #3
 800e122:	e18e      	b.n	800e442 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	4618      	mov	r0, r3
 800e134:	f7f9 fb46 	bl	80077c4 <lwip_htonl>
 800e138:	4602      	mov	r2, r0
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e142:	8912      	ldrh	r2, [r2, #8]
 800e144:	4413      	add	r3, r2
 800e146:	69ba      	ldr	r2, [r7, #24]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d227      	bcs.n	800e19c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e152:	461a      	mov	r2, r3
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	4293      	cmp	r3, r2
 800e158:	d114      	bne.n	800e184 <tcp_output+0x120>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d110      	bne.n	800e184 <tcp_output+0x120>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10b      	bne.n	800e184 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	8b5b      	ldrh	r3, [r3, #26]
 800e188:	f003 0302 	and.w	r3, r3, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 814d 	beq.w	800e42c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fd6a 	bl	800ec6c <tcp_send_empty_ack>
 800e198:	4603      	mov	r3, r0
 800e19a:	e152      	b.n	800e442 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1a8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e1aa:	6a3b      	ldr	r3, [r7, #32]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f000 811c 	beq.w	800e3ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e1b2:	e002      	b.n	800e1ba <tcp_output+0x156>
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	623b      	str	r3, [r7, #32]
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1f8      	bne.n	800e1b4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e1c2:	e112      	b.n	800e3ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	899b      	ldrh	r3, [r3, #12]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7f9 fae3 	bl	8007798 <lwip_htons>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f003 0304 	and.w	r3, r3, #4
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d006      	beq.n	800e1ec <tcp_output+0x188>
 800e1de:	4b2f      	ldr	r3, [pc, #188]	@ (800e29c <tcp_output+0x238>)
 800e1e0:	f240 5236 	movw	r2, #1334	@ 0x536
 800e1e4:	4932      	ldr	r1, [pc, #200]	@ (800e2b0 <tcp_output+0x24c>)
 800e1e6:	482f      	ldr	r0, [pc, #188]	@ (800e2a4 <tcp_output+0x240>)
 800e1e8:	f006 ff0c 	bl	8015004 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d01f      	beq.n	800e234 <tcp_output+0x1d0>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	8b5b      	ldrh	r3, [r3, #26]
 800e1f8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d119      	bne.n	800e234 <tcp_output+0x1d0>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e204:	2b00      	cmp	r3, #0
 800e206:	d00b      	beq.n	800e220 <tcp_output+0x1bc>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d110      	bne.n	800e234 <tcp_output+0x1d0>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e216:	891a      	ldrh	r2, [r3, #8]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d209      	bcs.n	800e234 <tcp_output+0x1d0>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e226:	2b00      	cmp	r3, #0
 800e228:	d004      	beq.n	800e234 <tcp_output+0x1d0>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e230:	2b1e      	cmp	r3, #30
 800e232:	d901      	bls.n	800e238 <tcp_output+0x1d4>
 800e234:	2301      	movs	r3, #1
 800e236:	e000      	b.n	800e23a <tcp_output+0x1d6>
 800e238:	2300      	movs	r3, #0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	8b5b      	ldrh	r3, [r3, #26]
 800e242:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 80e4 	beq.w	800e414 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	2b02      	cmp	r3, #2
 800e252:	d00d      	beq.n	800e270 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	899b      	ldrh	r3, [r3, #12]
 800e25a:	b29c      	uxth	r4, r3
 800e25c:	2010      	movs	r0, #16
 800e25e:	f7f9 fa9b 	bl	8007798 <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	461a      	mov	r2, r3
 800e266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	4322      	orrs	r2, r4
 800e26c:	b292      	uxth	r2, r2
 800e26e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	6879      	ldr	r1, [r7, #4]
 800e274:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e276:	f000 f909 	bl	800e48c <tcp_output_segment>
 800e27a:	4603      	mov	r3, r0
 800e27c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d016      	beq.n	800e2b4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	8b5b      	ldrh	r3, [r3, #26]
 800e28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e28e:	b29a      	uxth	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	835a      	strh	r2, [r3, #26]
      return err;
 800e294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e298:	e0d3      	b.n	800e442 <tcp_output+0x3de>
 800e29a:	bf00      	nop
 800e29c:	0801a6f4 	.word	0x0801a6f4
 800e2a0:	0801ac38 	.word	0x0801ac38
 800e2a4:	0801a748 	.word	0x0801a748
 800e2a8:	0801ac50 	.word	0x0801ac50
 800e2ac:	20008140 	.word	0x20008140
 800e2b0:	0801ac78 	.word	0x0801ac78
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7d1b      	ldrb	r3, [r3, #20]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	d006      	beq.n	800e2d2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	8b5b      	ldrh	r3, [r3, #26]
 800e2c8:	f023 0303 	bic.w	r3, r3, #3
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f9 fa73 	bl	80077c4 <lwip_htonl>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e2:	891b      	ldrh	r3, [r3, #8]
 800e2e4:	461d      	mov	r5, r3
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	899b      	ldrh	r3, [r3, #12]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7f9 fa52 	bl	8007798 <lwip_htons>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	f003 0303 	and.w	r3, r3, #3
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <tcp_output+0x2a0>
 800e300:	2301      	movs	r3, #1
 800e302:	e000      	b.n	800e306 <tcp_output+0x2a2>
 800e304:	2300      	movs	r3, #0
 800e306:	442b      	add	r3, r5
 800e308:	4423      	add	r3, r4
 800e30a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	2b00      	cmp	r3, #0
 800e316:	da02      	bge.n	800e31e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68ba      	ldr	r2, [r7, #8]
 800e31c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e320:	891b      	ldrh	r3, [r3, #8]
 800e322:	461c      	mov	r4, r3
 800e324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	899b      	ldrh	r3, [r3, #12]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f9 fa33 	bl	8007798 <lwip_htons>
 800e332:	4603      	mov	r3, r0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	f003 0303 	and.w	r3, r3, #3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <tcp_output+0x2de>
 800e33e:	2301      	movs	r3, #1
 800e340:	e000      	b.n	800e344 <tcp_output+0x2e0>
 800e342:	2300      	movs	r3, #0
 800e344:	4423      	add	r3, r4
 800e346:	2b00      	cmp	r3, #0
 800e348:	d049      	beq.n	800e3de <tcp_output+0x37a>
      seg->next = NULL;
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	2200      	movs	r2, #0
 800e34e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e354:	2b00      	cmp	r3, #0
 800e356:	d105      	bne.n	800e364 <tcp_output+0x300>
        pcb->unacked = seg;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e35c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e360:	623b      	str	r3, [r7, #32]
 800e362:	e03f      	b.n	800e3e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7f9 fa2a 	bl	80077c4 <lwip_htonl>
 800e370:	4604      	mov	r4, r0
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f9 fa23 	bl	80077c4 <lwip_htonl>
 800e37e:	4603      	mov	r3, r0
 800e380:	1ae3      	subs	r3, r4, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	da24      	bge.n	800e3d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3370      	adds	r3, #112	@ 0x70
 800e38a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e38c:	e002      	b.n	800e394 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d011      	beq.n	800e3c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f9 fa0d 	bl	80077c4 <lwip_htonl>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ae:	68db      	ldr	r3, [r3, #12]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f9 fa06 	bl	80077c4 <lwip_htonl>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	dbe6      	blt.n	800e38e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3cc:	601a      	str	r2, [r3, #0]
 800e3ce:	e009      	b.n	800e3e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	623b      	str	r3, [r7, #32]
 800e3dc:	e002      	b.n	800e3e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e3de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3e0:	f7fb ffed 	bl	800a3be <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d012      	beq.n	800e416 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f9 f9e4 	bl	80077c4 <lwip_htonl>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e406:	8912      	ldrh	r2, [r2, #8]
 800e408:	4413      	add	r3, r2
  while (seg != NULL &&
 800e40a:	69ba      	ldr	r2, [r7, #24]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	f4bf aed9 	bcs.w	800e1c4 <tcp_output+0x160>
 800e412:	e000      	b.n	800e416 <tcp_output+0x3b2>
      break;
 800e414:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d108      	bne.n	800e430 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e426:	e004      	b.n	800e432 <tcp_output+0x3ce>
    goto output_done;
 800e428:	bf00      	nop
 800e42a:	e002      	b.n	800e432 <tcp_output+0x3ce>
    goto output_done;
 800e42c:	bf00      	nop
 800e42e:	e000      	b.n	800e432 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e430:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3728      	adds	r7, #40	@ 0x28
 800e446:	46bd      	mov	sp, r7
 800e448:	bdb0      	pop	{r4, r5, r7, pc}
 800e44a:	bf00      	nop

0800e44c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <tcp_output_segment_busy+0x1c>
 800e45a:	4b09      	ldr	r3, [pc, #36]	@ (800e480 <tcp_output_segment_busy+0x34>)
 800e45c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e460:	4908      	ldr	r1, [pc, #32]	@ (800e484 <tcp_output_segment_busy+0x38>)
 800e462:	4809      	ldr	r0, [pc, #36]	@ (800e488 <tcp_output_segment_busy+0x3c>)
 800e464:	f006 fdce 	bl	8015004 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	7b9b      	ldrb	r3, [r3, #14]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d001      	beq.n	800e476 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	0801a6f4 	.word	0x0801a6f4
 800e484:	0801ac90 	.word	0x0801ac90
 800e488:	0801a748 	.word	0x0801a748

0800e48c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e48c:	b5b0      	push	{r4, r5, r7, lr}
 800e48e:	b08c      	sub	sp, #48	@ 0x30
 800e490:	af04      	add	r7, sp, #16
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d106      	bne.n	800e4ac <tcp_output_segment+0x20>
 800e49e:	4b64      	ldr	r3, [pc, #400]	@ (800e630 <tcp_output_segment+0x1a4>)
 800e4a0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e4a4:	4963      	ldr	r1, [pc, #396]	@ (800e634 <tcp_output_segment+0x1a8>)
 800e4a6:	4864      	ldr	r0, [pc, #400]	@ (800e638 <tcp_output_segment+0x1ac>)
 800e4a8:	f006 fdac 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d106      	bne.n	800e4c0 <tcp_output_segment+0x34>
 800e4b2:	4b5f      	ldr	r3, [pc, #380]	@ (800e630 <tcp_output_segment+0x1a4>)
 800e4b4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e4b8:	4960      	ldr	r1, [pc, #384]	@ (800e63c <tcp_output_segment+0x1b0>)
 800e4ba:	485f      	ldr	r0, [pc, #380]	@ (800e638 <tcp_output_segment+0x1ac>)
 800e4bc:	f006 fda2 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d106      	bne.n	800e4d4 <tcp_output_segment+0x48>
 800e4c6:	4b5a      	ldr	r3, [pc, #360]	@ (800e630 <tcp_output_segment+0x1a4>)
 800e4c8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e4cc:	495c      	ldr	r1, [pc, #368]	@ (800e640 <tcp_output_segment+0x1b4>)
 800e4ce:	485a      	ldr	r0, [pc, #360]	@ (800e638 <tcp_output_segment+0x1ac>)
 800e4d0:	f006 fd98 	bl	8015004 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e4d4:	68f8      	ldr	r0, [r7, #12]
 800e4d6:	f7ff ffb9 	bl	800e44c <tcp_output_segment_busy>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e0a1      	b.n	800e628 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	68dc      	ldr	r4, [r3, #12]
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7f9 f969 	bl	80077c4 <lwip_htonl>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	68dc      	ldr	r4, [r3, #12]
 800e4fe:	4610      	mov	r0, r2
 800e500:	f7f9 f94a 	bl	8007798 <lwip_htons>
 800e504:	4603      	mov	r3, r0
 800e506:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e510:	441a      	add	r2, r3
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	3314      	adds	r3, #20
 800e51c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	7a9b      	ldrb	r3, [r3, #10]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	d015      	beq.n	800e556 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	3304      	adds	r3, #4
 800e52e:	461a      	mov	r2, r3
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e536:	f7fc fa39 	bl	800a9ac <tcp_eff_send_mss_netif>
 800e53a:	4603      	mov	r3, r0
 800e53c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e53e:	8b7b      	ldrh	r3, [r7, #26]
 800e540:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e544:	4618      	mov	r0, r3
 800e546:	f7f9 f93d 	bl	80077c4 <lwip_htonl>
 800e54a:	4602      	mov	r2, r0
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	3304      	adds	r3, #4
 800e554:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	da02      	bge.n	800e566 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2200      	movs	r2, #0
 800e564:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10c      	bne.n	800e588 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e56e:	4b35      	ldr	r3, [pc, #212]	@ (800e644 <tcp_output_segment+0x1b8>)
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f9 f921 	bl	80077c4 <lwip_htonl>
 800e582:	4602      	mov	r2, r0
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68da      	ldr	r2, [r3, #12]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	8959      	ldrh	r1, [r3, #10]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	8b3a      	ldrh	r2, [r7, #24]
 800e5a2:	1a8a      	subs	r2, r1, r2
 800e5a4:	b292      	uxth	r2, r2
 800e5a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	8919      	ldrh	r1, [r3, #8]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	8b3a      	ldrh	r2, [r7, #24]
 800e5b4:	1a8a      	subs	r2, r1, r2
 800e5b6:	b292      	uxth	r2, r2
 800e5b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	68d2      	ldr	r2, [r2, #12]
 800e5c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	741a      	strb	r2, [r3, #16]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	68da      	ldr	r2, [r3, #12]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	7a9b      	ldrb	r3, [r3, #10]
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <tcp_output_segment+0x158>
 800e5e0:	2318      	movs	r3, #24
 800e5e2:	e000      	b.n	800e5e6 <tcp_output_segment+0x15a>
 800e5e4:	2314      	movs	r3, #20
 800e5e6:	4413      	add	r3, r2
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d006      	beq.n	800e5fc <tcp_output_segment+0x170>
 800e5ee:	4b10      	ldr	r3, [pc, #64]	@ (800e630 <tcp_output_segment+0x1a4>)
 800e5f0:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e5f4:	4914      	ldr	r1, [pc, #80]	@ (800e648 <tcp_output_segment+0x1bc>)
 800e5f6:	4810      	ldr	r0, [pc, #64]	@ (800e638 <tcp_output_segment+0x1ac>)
 800e5f8:	f006 fd04 	bl	8015004 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	6858      	ldr	r0, [r3, #4]
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	1d1c      	adds	r4, r3, #4
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	7add      	ldrb	r5, [r3, #11]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	7a9b      	ldrb	r3, [r3, #10]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	9202      	str	r2, [sp, #8]
 800e612:	2206      	movs	r2, #6
 800e614:	9201      	str	r2, [sp, #4]
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	462b      	mov	r3, r5
 800e61a:	4622      	mov	r2, r4
 800e61c:	f004 fbe4 	bl	8012de8 <ip4_output_if>
 800e620:	4603      	mov	r3, r0
 800e622:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e624:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3720      	adds	r7, #32
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bdb0      	pop	{r4, r5, r7, pc}
 800e630:	0801a6f4 	.word	0x0801a6f4
 800e634:	0801acb8 	.word	0x0801acb8
 800e638:	0801a748 	.word	0x0801a748
 800e63c:	0801acd8 	.word	0x0801acd8
 800e640:	0801acf8 	.word	0x0801acf8
 800e644:	200080f4 	.word	0x200080f4
 800e648:	0801ad1c 	.word	0x0801ad1c

0800e64c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e64c:	b5b0      	push	{r4, r5, r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d106      	bne.n	800e668 <tcp_rexmit_rto_prepare+0x1c>
 800e65a:	4b31      	ldr	r3, [pc, #196]	@ (800e720 <tcp_rexmit_rto_prepare+0xd4>)
 800e65c:	f240 6263 	movw	r2, #1635	@ 0x663
 800e660:	4930      	ldr	r1, [pc, #192]	@ (800e724 <tcp_rexmit_rto_prepare+0xd8>)
 800e662:	4831      	ldr	r0, [pc, #196]	@ (800e728 <tcp_rexmit_rto_prepare+0xdc>)
 800e664:	f006 fcce 	bl	8015004 <iprintf>

  if (pcb->unacked == NULL) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d102      	bne.n	800e676 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e670:	f06f 0305 	mvn.w	r3, #5
 800e674:	e050      	b.n	800e718 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	e00b      	b.n	800e696 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7ff fee4 	bl	800e44c <tcp_output_segment_busy>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d002      	beq.n	800e690 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e68a:	f06f 0305 	mvn.w	r3, #5
 800e68e:	e043      	b.n	800e718 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	60fb      	str	r3, [r7, #12]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1ef      	bne.n	800e67e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f7ff fed4 	bl	800e44c <tcp_output_segment_busy>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e6aa:	f06f 0305 	mvn.w	r3, #5
 800e6ae:	e033      	b.n	800e718 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	68db      	ldr	r3, [r3, #12]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7f9 f872 	bl	80077c4 <lwip_htonl>
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	891b      	ldrh	r3, [r3, #8]
 800e6e6:	461d      	mov	r5, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	899b      	ldrh	r3, [r3, #12]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7f9 f851 	bl	8007798 <lwip_htons>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	f003 0303 	and.w	r3, r3, #3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <tcp_rexmit_rto_prepare+0xba>
 800e702:	2301      	movs	r3, #1
 800e704:	e000      	b.n	800e708 <tcp_rexmit_rto_prepare+0xbc>
 800e706:	2300      	movs	r3, #0
 800e708:	442b      	add	r3, r5
 800e70a:	18e2      	adds	r2, r4, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bdb0      	pop	{r4, r5, r7, pc}
 800e720:	0801a6f4 	.word	0x0801a6f4
 800e724:	0801ad30 	.word	0x0801ad30
 800e728:	0801a748 	.word	0x0801a748

0800e72c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d106      	bne.n	800e748 <tcp_rexmit_rto_commit+0x1c>
 800e73a:	4b0d      	ldr	r3, [pc, #52]	@ (800e770 <tcp_rexmit_rto_commit+0x44>)
 800e73c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e740:	490c      	ldr	r1, [pc, #48]	@ (800e774 <tcp_rexmit_rto_commit+0x48>)
 800e742:	480d      	ldr	r0, [pc, #52]	@ (800e778 <tcp_rexmit_rto_commit+0x4c>)
 800e744:	f006 fc5e 	bl	8015004 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e74e:	2bff      	cmp	r3, #255	@ 0xff
 800e750:	d007      	beq.n	800e762 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e758:	3301      	adds	r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fc7e 	bl	800e064 <tcp_output>
}
 800e768:	bf00      	nop
 800e76a:	3708      	adds	r7, #8
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	0801a6f4 	.word	0x0801a6f4
 800e774:	0801ad54 	.word	0x0801ad54
 800e778:	0801a748 	.word	0x0801a748

0800e77c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d106      	bne.n	800e798 <tcp_rexmit_rto+0x1c>
 800e78a:	4b0a      	ldr	r3, [pc, #40]	@ (800e7b4 <tcp_rexmit_rto+0x38>)
 800e78c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e790:	4909      	ldr	r1, [pc, #36]	@ (800e7b8 <tcp_rexmit_rto+0x3c>)
 800e792:	480a      	ldr	r0, [pc, #40]	@ (800e7bc <tcp_rexmit_rto+0x40>)
 800e794:	f006 fc36 	bl	8015004 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7ff ff57 	bl	800e64c <tcp_rexmit_rto_prepare>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d102      	bne.n	800e7aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ffc1 	bl	800e72c <tcp_rexmit_rto_commit>
  }
}
 800e7aa:	bf00      	nop
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0801a6f4 	.word	0x0801a6f4
 800e7b8:	0801ad78 	.word	0x0801ad78
 800e7bc:	0801a748 	.word	0x0801a748

0800e7c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e7c0:	b590      	push	{r4, r7, lr}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d106      	bne.n	800e7dc <tcp_rexmit+0x1c>
 800e7ce:	4b2f      	ldr	r3, [pc, #188]	@ (800e88c <tcp_rexmit+0xcc>)
 800e7d0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e7d4:	492e      	ldr	r1, [pc, #184]	@ (800e890 <tcp_rexmit+0xd0>)
 800e7d6:	482f      	ldr	r0, [pc, #188]	@ (800e894 <tcp_rexmit+0xd4>)
 800e7d8:	f006 fc14 	bl	8015004 <iprintf>

  if (pcb->unacked == NULL) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e7e4:	f06f 0305 	mvn.w	r3, #5
 800e7e8:	e04c      	b.n	800e884 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e7f0:	68b8      	ldr	r0, [r7, #8]
 800e7f2:	f7ff fe2b 	bl	800e44c <tcp_output_segment_busy>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e7fc:	f06f 0305 	mvn.w	r3, #5
 800e800:	e040      	b.n	800e884 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	336c      	adds	r3, #108	@ 0x6c
 800e80e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e810:	e002      	b.n	800e818 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d011      	beq.n	800e844 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	f7f8 ffcb 	bl	80077c4 <lwip_htonl>
 800e82e:	4604      	mov	r4, r0
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f7f8 ffc4 	bl	80077c4 <lwip_htonl>
 800e83c:	4603      	mov	r3, r0
 800e83e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e840:	2b00      	cmp	r3, #0
 800e842:	dbe6      	blt.n	800e812 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d103      	bne.n	800e862 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e868:	2bff      	cmp	r3, #255	@ 0xff
 800e86a:	d007      	beq.n	800e87c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e872:	3301      	adds	r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd90      	pop	{r4, r7, pc}
 800e88c:	0801a6f4 	.word	0x0801a6f4
 800e890:	0801ad94 	.word	0x0801ad94
 800e894:	0801a748 	.word	0x0801a748

0800e898 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <tcp_rexmit_fast+0x1c>
 800e8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800e950 <tcp_rexmit_fast+0xb8>)
 800e8a8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e8ac:	4929      	ldr	r1, [pc, #164]	@ (800e954 <tcp_rexmit_fast+0xbc>)
 800e8ae:	482a      	ldr	r0, [pc, #168]	@ (800e958 <tcp_rexmit_fast+0xc0>)
 800e8b0:	f006 fba8 	bl	8015004 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d045      	beq.n	800e948 <tcp_rexmit_fast+0xb0>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	8b5b      	ldrh	r3, [r3, #26]
 800e8c0:	f003 0304 	and.w	r3, r3, #4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d13f      	bne.n	800e948 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7ff ff79 	bl	800e7c0 <tcp_rexmit>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d139      	bne.n	800e948 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	bf28      	it	cs
 800e8e4:	4613      	movcs	r3, r2
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	da00      	bge.n	800e8ee <tcp_rexmit_fast+0x56>
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	105b      	asrs	r3, r3, #1
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e8fe:	461a      	mov	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	429a      	cmp	r2, r3
 800e908:	d206      	bcs.n	800e918 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e90e:	005b      	lsls	r3, r3, #1
 800e910:	b29a      	uxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e922:	4619      	mov	r1, r3
 800e924:	0049      	lsls	r1, r1, #1
 800e926:	440b      	add	r3, r1
 800e928:	b29b      	uxth	r3, r3
 800e92a:	4413      	add	r3, r2
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8b5b      	ldrh	r3, [r3, #26]
 800e938:	f043 0304 	orr.w	r3, r3, #4
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e948:	bf00      	nop
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	0801a6f4 	.word	0x0801a6f4
 800e954:	0801adac 	.word	0x0801adac
 800e958:	0801a748 	.word	0x0801a748

0800e95c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	460b      	mov	r3, r1
 800e968:	817b      	strh	r3, [r7, #10]
 800e96a:	4613      	mov	r3, r2
 800e96c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e96e:	897a      	ldrh	r2, [r7, #10]
 800e970:	893b      	ldrh	r3, [r7, #8]
 800e972:	4413      	add	r3, r2
 800e974:	b29b      	uxth	r3, r3
 800e976:	3314      	adds	r3, #20
 800e978:	b29b      	uxth	r3, r3
 800e97a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e97e:	4619      	mov	r1, r3
 800e980:	2022      	movs	r0, #34	@ 0x22
 800e982:	f7f9 ffb3 	bl	80088ec <pbuf_alloc>
 800e986:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d04d      	beq.n	800ea2a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e98e:	897b      	ldrh	r3, [r7, #10]
 800e990:	3313      	adds	r3, #19
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	8952      	ldrh	r2, [r2, #10]
 800e996:	4293      	cmp	r3, r2
 800e998:	db06      	blt.n	800e9a8 <tcp_output_alloc_header_common+0x4c>
 800e99a:	4b26      	ldr	r3, [pc, #152]	@ (800ea34 <tcp_output_alloc_header_common+0xd8>)
 800e99c:	f240 7223 	movw	r2, #1827	@ 0x723
 800e9a0:	4925      	ldr	r1, [pc, #148]	@ (800ea38 <tcp_output_alloc_header_common+0xdc>)
 800e9a2:	4826      	ldr	r0, [pc, #152]	@ (800ea3c <tcp_output_alloc_header_common+0xe0>)
 800e9a4:	f006 fb2e 	bl	8015004 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e9ae:	8c3b      	ldrh	r3, [r7, #32]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7f8 fef1 	bl	8007798 <lwip_htons>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e9be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7f8 fee9 	bl	8007798 <lwip_htons>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f7f8 fef5 	bl	80077c4 <lwip_htonl>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e9e0:	897b      	ldrh	r3, [r7, #10]
 800e9e2:	089b      	lsrs	r3, r3, #2
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	3305      	adds	r3, #5
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	031b      	lsls	r3, r3, #12
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f8 fecd 	bl	8007798 <lwip_htons>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	461a      	mov	r2, r3
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ea06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f8 fec5 	bl	8007798 <lwip_htons>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	461a      	mov	r2, r3
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	741a      	strb	r2, [r3, #16]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	2200      	movs	r2, #0
 800ea24:	749a      	strb	r2, [r3, #18]
 800ea26:	2200      	movs	r2, #0
 800ea28:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ea2a:	697b      	ldr	r3, [r7, #20]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	0801a6f4 	.word	0x0801a6f4
 800ea38:	0801adcc 	.word	0x0801adcc
 800ea3c:	0801a748 	.word	0x0801a748

0800ea40 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ea40:	b5b0      	push	{r4, r5, r7, lr}
 800ea42:	b08a      	sub	sp, #40	@ 0x28
 800ea44:	af04      	add	r7, sp, #16
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	607b      	str	r3, [r7, #4]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	817b      	strh	r3, [r7, #10]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d106      	bne.n	800ea66 <tcp_output_alloc_header+0x26>
 800ea58:	4b15      	ldr	r3, [pc, #84]	@ (800eab0 <tcp_output_alloc_header+0x70>)
 800ea5a:	f240 7242 	movw	r2, #1858	@ 0x742
 800ea5e:	4915      	ldr	r1, [pc, #84]	@ (800eab4 <tcp_output_alloc_header+0x74>)
 800ea60:	4815      	ldr	r0, [pc, #84]	@ (800eab8 <tcp_output_alloc_header+0x78>)
 800ea62:	f006 facf 	bl	8015004 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	8adb      	ldrh	r3, [r3, #22]
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	8b12      	ldrh	r2, [r2, #24]
 800ea72:	68f9      	ldr	r1, [r7, #12]
 800ea74:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ea76:	893d      	ldrh	r5, [r7, #8]
 800ea78:	897c      	ldrh	r4, [r7, #10]
 800ea7a:	9103      	str	r1, [sp, #12]
 800ea7c:	2110      	movs	r1, #16
 800ea7e:	9102      	str	r1, [sp, #8]
 800ea80:	9201      	str	r2, [sp, #4]
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	462a      	mov	r2, r5
 800ea88:	4621      	mov	r1, r4
 800ea8a:	f7ff ff67 	bl	800e95c <tcp_output_alloc_header_common>
 800ea8e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d006      	beq.n	800eaa4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ea9e:	441a      	add	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800eaa4:	697b      	ldr	r3, [r7, #20]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3718      	adds	r7, #24
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bdb0      	pop	{r4, r5, r7, pc}
 800eaae:	bf00      	nop
 800eab0:	0801a6f4 	.word	0x0801a6f4
 800eab4:	0801adfc 	.word	0x0801adfc
 800eab8:	0801a748 	.word	0x0801a748

0800eabc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b088      	sub	sp, #32
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	4611      	mov	r1, r2
 800eac8:	461a      	mov	r2, r3
 800eaca:	460b      	mov	r3, r1
 800eacc:	71fb      	strb	r3, [r7, #7]
 800eace:	4613      	mov	r3, r2
 800ead0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ead2:	2300      	movs	r3, #0
 800ead4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <tcp_output_fill_options+0x2e>
 800eadc:	4b12      	ldr	r3, [pc, #72]	@ (800eb28 <tcp_output_fill_options+0x6c>)
 800eade:	f240 7256 	movw	r2, #1878	@ 0x756
 800eae2:	4912      	ldr	r1, [pc, #72]	@ (800eb2c <tcp_output_fill_options+0x70>)
 800eae4:	4812      	ldr	r0, [pc, #72]	@ (800eb30 <tcp_output_fill_options+0x74>)
 800eae6:	f006 fa8d 	bl	8015004 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	3314      	adds	r3, #20
 800eaf4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800eaf6:	8bfb      	ldrh	r3, [r7, #30]
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	461a      	mov	r2, r3
 800eafc:	79fb      	ldrb	r3, [r7, #7]
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	f003 0304 	and.w	r3, r3, #4
 800eb04:	4413      	add	r3, r2
 800eb06:	3314      	adds	r3, #20
 800eb08:	69ba      	ldr	r2, [r7, #24]
 800eb0a:	4413      	add	r3, r2
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d006      	beq.n	800eb20 <tcp_output_fill_options+0x64>
 800eb12:	4b05      	ldr	r3, [pc, #20]	@ (800eb28 <tcp_output_fill_options+0x6c>)
 800eb14:	f240 7275 	movw	r2, #1909	@ 0x775
 800eb18:	4906      	ldr	r1, [pc, #24]	@ (800eb34 <tcp_output_fill_options+0x78>)
 800eb1a:	4805      	ldr	r0, [pc, #20]	@ (800eb30 <tcp_output_fill_options+0x74>)
 800eb1c:	f006 fa72 	bl	8015004 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800eb20:	bf00      	nop
 800eb22:	3720      	adds	r7, #32
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	0801a6f4 	.word	0x0801a6f4
 800eb2c:	0801ae24 	.word	0x0801ae24
 800eb30:	0801a748 	.word	0x0801a748
 800eb34:	0801ad1c 	.word	0x0801ad1c

0800eb38 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08a      	sub	sp, #40	@ 0x28
 800eb3c:	af04      	add	r7, sp, #16
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
 800eb44:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d106      	bne.n	800eb5a <tcp_output_control_segment+0x22>
 800eb4c:	4b1c      	ldr	r3, [pc, #112]	@ (800ebc0 <tcp_output_control_segment+0x88>)
 800eb4e:	f240 7287 	movw	r2, #1927	@ 0x787
 800eb52:	491c      	ldr	r1, [pc, #112]	@ (800ebc4 <tcp_output_control_segment+0x8c>)
 800eb54:	481c      	ldr	r0, [pc, #112]	@ (800ebc8 <tcp_output_control_segment+0x90>)
 800eb56:	f006 fa55 	bl	8015004 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7fe faea 	bl	800d138 <tcp_route>
 800eb64:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800eb6c:	23fc      	movs	r3, #252	@ 0xfc
 800eb6e:	75fb      	strb	r3, [r7, #23]
 800eb70:	e01c      	b.n	800ebac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d006      	beq.n	800eb86 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	7adb      	ldrb	r3, [r3, #11]
 800eb7c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	7a9b      	ldrb	r3, [r3, #10]
 800eb82:	757b      	strb	r3, [r7, #21]
 800eb84:	e003      	b.n	800eb8e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800eb86:	23ff      	movs	r3, #255	@ 0xff
 800eb88:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800eb8e:	7dba      	ldrb	r2, [r7, #22]
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	9302      	str	r3, [sp, #8]
 800eb94:	2306      	movs	r3, #6
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	7d7b      	ldrb	r3, [r7, #21]
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	68b8      	ldr	r0, [r7, #8]
 800eba4:	f004 f920 	bl	8012de8 <ip4_output_if>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ebac:	68b8      	ldr	r0, [r7, #8]
 800ebae:	f7fa f981 	bl	8008eb4 <pbuf_free>
  return err;
 800ebb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	0801a6f4 	.word	0x0801a6f4
 800ebc4:	0801ae4c 	.word	0x0801ae4c
 800ebc8:	0801a748 	.word	0x0801a748

0800ebcc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b08b      	sub	sp, #44	@ 0x2c
 800ebd0:	af04      	add	r7, sp, #16
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
 800ebd8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d106      	bne.n	800ebee <tcp_rst+0x22>
 800ebe0:	4b1e      	ldr	r3, [pc, #120]	@ (800ec5c <tcp_rst+0x90>)
 800ebe2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ebe6:	491e      	ldr	r1, [pc, #120]	@ (800ec60 <tcp_rst+0x94>)
 800ebe8:	481e      	ldr	r0, [pc, #120]	@ (800ec64 <tcp_rst+0x98>)
 800ebea:	f006 fa0b 	bl	8015004 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d106      	bne.n	800ec02 <tcp_rst+0x36>
 800ebf4:	4b19      	ldr	r3, [pc, #100]	@ (800ec5c <tcp_rst+0x90>)
 800ebf6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ebfa:	491b      	ldr	r1, [pc, #108]	@ (800ec68 <tcp_rst+0x9c>)
 800ebfc:	4819      	ldr	r0, [pc, #100]	@ (800ec64 <tcp_rst+0x98>)
 800ebfe:	f006 fa01 	bl	8015004 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ec06:	2310      	movs	r3, #16
 800ec08:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	b29c      	uxth	r4, r3
 800ec0e:	68b8      	ldr	r0, [r7, #8]
 800ec10:	f7f8 fdd8 	bl	80077c4 <lwip_htonl>
 800ec14:	4602      	mov	r2, r0
 800ec16:	8abb      	ldrh	r3, [r7, #20]
 800ec18:	9303      	str	r3, [sp, #12]
 800ec1a:	2314      	movs	r3, #20
 800ec1c:	9302      	str	r3, [sp, #8]
 800ec1e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	4613      	mov	r3, r2
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4621      	mov	r1, r4
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff fe95 	bl	800e95c <tcp_output_alloc_header_common>
 800ec32:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00c      	beq.n	800ec54 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	6939      	ldr	r1, [r7, #16]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7ff ff3b 	bl	800eabc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ec46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	6939      	ldr	r1, [r7, #16]
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f7ff ff73 	bl	800eb38 <tcp_output_control_segment>
 800ec52:	e000      	b.n	800ec56 <tcp_rst+0x8a>
    return;
 800ec54:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ec56:	371c      	adds	r7, #28
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd90      	pop	{r4, r7, pc}
 800ec5c:	0801a6f4 	.word	0x0801a6f4
 800ec60:	0801ae78 	.word	0x0801ae78
 800ec64:	0801a748 	.word	0x0801a748
 800ec68:	0801ae94 	.word	0x0801ae94

0800ec6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ec6c:	b590      	push	{r4, r7, lr}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ec74:	2300      	movs	r3, #0
 800ec76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d106      	bne.n	800ec90 <tcp_send_empty_ack+0x24>
 800ec82:	4b28      	ldr	r3, [pc, #160]	@ (800ed24 <tcp_send_empty_ack+0xb8>)
 800ec84:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ec88:	4927      	ldr	r1, [pc, #156]	@ (800ed28 <tcp_send_empty_ack+0xbc>)
 800ec8a:	4828      	ldr	r0, [pc, #160]	@ (800ed2c <tcp_send_empty_ack+0xc0>)
 800ec8c:	f006 f9ba 	bl	8015004 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ec90:	7dfb      	ldrb	r3, [r7, #23]
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	f003 0304 	and.w	r3, r3, #4
 800ec9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ec9c:	7d7b      	ldrb	r3, [r7, #21]
 800ec9e:	b29c      	uxth	r4, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7f8 fd8d 	bl	80077c4 <lwip_htonl>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2200      	movs	r2, #0
 800ecae:	4621      	mov	r1, r4
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fec5 	bl	800ea40 <tcp_output_alloc_header>
 800ecb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d109      	bne.n	800ecd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	8b5b      	ldrh	r3, [r3, #26]
 800ecc2:	f043 0303 	orr.w	r3, r3, #3
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800eccc:	f06f 0301 	mvn.w	r3, #1
 800ecd0:	e023      	b.n	800ed1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ecd2:	7dbb      	ldrb	r3, [r7, #22]
 800ecd4:	7dfa      	ldrb	r2, [r7, #23]
 800ecd6:	6939      	ldr	r1, [r7, #16]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f7ff feef 	bl	800eabc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	6939      	ldr	r1, [r7, #16]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff ff26 	bl	800eb38 <tcp_output_control_segment>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ecf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	8b5b      	ldrh	r3, [r3, #26]
 800ecfc:	f043 0303 	orr.w	r3, r3, #3
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	835a      	strh	r2, [r3, #26]
 800ed06:	e006      	b.n	800ed16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	8b5b      	ldrh	r3, [r3, #26]
 800ed0c:	f023 0303 	bic.w	r3, r3, #3
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ed16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	371c      	adds	r7, #28
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd90      	pop	{r4, r7, pc}
 800ed22:	bf00      	nop
 800ed24:	0801a6f4 	.word	0x0801a6f4
 800ed28:	0801aeb0 	.word	0x0801aeb0
 800ed2c:	0801a748 	.word	0x0801a748

0800ed30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ed30:	b590      	push	{r4, r7, lr}
 800ed32:	b087      	sub	sp, #28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ed38:	2300      	movs	r3, #0
 800ed3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <tcp_keepalive+0x20>
 800ed42:	4b18      	ldr	r3, [pc, #96]	@ (800eda4 <tcp_keepalive+0x74>)
 800ed44:	f640 0224 	movw	r2, #2084	@ 0x824
 800ed48:	4917      	ldr	r1, [pc, #92]	@ (800eda8 <tcp_keepalive+0x78>)
 800ed4a:	4818      	ldr	r0, [pc, #96]	@ (800edac <tcp_keepalive+0x7c>)
 800ed4c:	f006 f95a 	bl	8015004 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ed50:	7dfb      	ldrb	r3, [r7, #23]
 800ed52:	b29c      	uxth	r4, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f8 fd32 	bl	80077c4 <lwip_htonl>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2200      	movs	r2, #0
 800ed64:	4621      	mov	r1, r4
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7ff fe6a 	bl	800ea40 <tcp_output_alloc_header>
 800ed6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d102      	bne.n	800ed7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ed74:	f04f 33ff 	mov.w	r3, #4294967295
 800ed78:	e010      	b.n	800ed9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ed7a:	7dfb      	ldrb	r3, [r7, #23]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	6939      	ldr	r1, [r7, #16]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff fe9b 	bl	800eabc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	6939      	ldr	r1, [r7, #16]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff fed2 	bl	800eb38 <tcp_output_control_segment>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ed98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	371c      	adds	r7, #28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd90      	pop	{r4, r7, pc}
 800eda4:	0801a6f4 	.word	0x0801a6f4
 800eda8:	0801aed0 	.word	0x0801aed0
 800edac:	0801a748 	.word	0x0801a748

0800edb0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800edb0:	b590      	push	{r4, r7, lr}
 800edb2:	b08b      	sub	sp, #44	@ 0x2c
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800edb8:	2300      	movs	r3, #0
 800edba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d106      	bne.n	800edd2 <tcp_zero_window_probe+0x22>
 800edc4:	4b4c      	ldr	r3, [pc, #304]	@ (800eef8 <tcp_zero_window_probe+0x148>)
 800edc6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800edca:	494c      	ldr	r1, [pc, #304]	@ (800eefc <tcp_zero_window_probe+0x14c>)
 800edcc:	484c      	ldr	r0, [pc, #304]	@ (800ef00 <tcp_zero_window_probe+0x150>)
 800edce:	f006 f919 	bl	8015004 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d101      	bne.n	800ede2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	e086      	b.n	800eef0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ede8:	2bff      	cmp	r3, #255	@ 0xff
 800edea:	d007      	beq.n	800edfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800edf2:	3301      	adds	r3, #1
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	899b      	ldrh	r3, [r3, #12]
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f8 fcc7 	bl	8007798 <lwip_htons>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	f003 0301 	and.w	r3, r3, #1
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d005      	beq.n	800ee22 <tcp_zero_window_probe+0x72>
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	891b      	ldrh	r3, [r3, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <tcp_zero_window_probe+0x72>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	e000      	b.n	800ee24 <tcp_zero_window_probe+0x74>
 800ee22:	2300      	movs	r3, #0
 800ee24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ee26:	7ffb      	ldrb	r3, [r7, #31]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	bf0c      	ite	eq
 800ee2c:	2301      	moveq	r3, #1
 800ee2e:	2300      	movne	r3, #0
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ee34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee38:	b299      	uxth	r1, r3
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	8bba      	ldrh	r2, [r7, #28]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff fdfc 	bl	800ea40 <tcp_output_alloc_header>
 800ee48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ee50:	f04f 33ff 	mov.w	r3, #4294967295
 800ee54:	e04c      	b.n	800eef0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ee5c:	7ffb      	ldrb	r3, [r7, #31]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d011      	beq.n	800ee86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	899b      	ldrh	r3, [r3, #12]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	b21b      	sxth	r3, r3
 800ee6a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ee6e:	b21c      	sxth	r4, r3
 800ee70:	2011      	movs	r0, #17
 800ee72:	f7f8 fc91 	bl	8007798 <lwip_htons>
 800ee76:	4603      	mov	r3, r0
 800ee78:	b21b      	sxth	r3, r3
 800ee7a:	4323      	orrs	r3, r4
 800ee7c:	b21b      	sxth	r3, r3
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	819a      	strh	r2, [r3, #12]
 800ee84:	e010      	b.n	800eea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	3314      	adds	r3, #20
 800ee8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	6858      	ldr	r0, [r3, #4]
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	891a      	ldrh	r2, [r3, #8]
 800ee98:	6a3b      	ldr	r3, [r7, #32]
 800ee9a:	891b      	ldrh	r3, [r3, #8]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	2201      	movs	r2, #1
 800eea2:	6939      	ldr	r1, [r7, #16]
 800eea4:	f7fa fa00 	bl	80092a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f8 fc88 	bl	80077c4 <lwip_htonl>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	da02      	bge.n	800eecc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eed0:	2200      	movs	r2, #0
 800eed2:	69b9      	ldr	r1, [r7, #24]
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7ff fdf1 	bl	800eabc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	3304      	adds	r3, #4
 800eee0:	69b9      	ldr	r1, [r7, #24]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7ff fe28 	bl	800eb38 <tcp_output_control_segment>
 800eee8:	4603      	mov	r3, r0
 800eeea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eeec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	372c      	adds	r7, #44	@ 0x2c
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd90      	pop	{r4, r7, pc}
 800eef8:	0801a6f4 	.word	0x0801a6f4
 800eefc:	0801aeec 	.word	0x0801aeec
 800ef00:	0801a748 	.word	0x0801a748

0800ef04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ef0c:	f7fa faba 	bl	8009484 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ef10:	4b0a      	ldr	r3, [pc, #40]	@ (800ef3c <tcpip_tcp_timer+0x38>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d103      	bne.n	800ef20 <tcpip_tcp_timer+0x1c>
 800ef18:	4b09      	ldr	r3, [pc, #36]	@ (800ef40 <tcpip_tcp_timer+0x3c>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d005      	beq.n	800ef2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ef20:	2200      	movs	r2, #0
 800ef22:	4908      	ldr	r1, [pc, #32]	@ (800ef44 <tcpip_tcp_timer+0x40>)
 800ef24:	20fa      	movs	r0, #250	@ 0xfa
 800ef26:	f000 f8f3 	bl	800f110 <sys_timeout>
 800ef2a:	e003      	b.n	800ef34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ef2c:	4b06      	ldr	r3, [pc, #24]	@ (800ef48 <tcpip_tcp_timer+0x44>)
 800ef2e:	2200      	movs	r2, #0
 800ef30:	601a      	str	r2, [r3, #0]
  }
}
 800ef32:	bf00      	nop
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	20008100 	.word	0x20008100
 800ef40:	20008104 	.word	0x20008104
 800ef44:	0800ef05 	.word	0x0800ef05
 800ef48:	2000814c 	.word	0x2000814c

0800ef4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ef50:	4b0a      	ldr	r3, [pc, #40]	@ (800ef7c <tcp_timer_needed+0x30>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10f      	bne.n	800ef78 <tcp_timer_needed+0x2c>
 800ef58:	4b09      	ldr	r3, [pc, #36]	@ (800ef80 <tcp_timer_needed+0x34>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d103      	bne.n	800ef68 <tcp_timer_needed+0x1c>
 800ef60:	4b08      	ldr	r3, [pc, #32]	@ (800ef84 <tcp_timer_needed+0x38>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d007      	beq.n	800ef78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ef68:	4b04      	ldr	r3, [pc, #16]	@ (800ef7c <tcp_timer_needed+0x30>)
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ef6e:	2200      	movs	r2, #0
 800ef70:	4905      	ldr	r1, [pc, #20]	@ (800ef88 <tcp_timer_needed+0x3c>)
 800ef72:	20fa      	movs	r0, #250	@ 0xfa
 800ef74:	f000 f8cc 	bl	800f110 <sys_timeout>
  }
}
 800ef78:	bf00      	nop
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	2000814c 	.word	0x2000814c
 800ef80:	20008100 	.word	0x20008100
 800ef84:	20008104 	.word	0x20008104
 800ef88:	0800ef05 	.word	0x0800ef05

0800ef8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ef98:	2006      	movs	r0, #6
 800ef9a:	f7f9 f899 	bl	80080d0 <memp_malloc>
 800ef9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d109      	bne.n	800efba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d151      	bne.n	800f050 <sys_timeout_abs+0xc4>
 800efac:	4b2a      	ldr	r3, [pc, #168]	@ (800f058 <sys_timeout_abs+0xcc>)
 800efae:	22be      	movs	r2, #190	@ 0xbe
 800efb0:	492a      	ldr	r1, [pc, #168]	@ (800f05c <sys_timeout_abs+0xd0>)
 800efb2:	482b      	ldr	r0, [pc, #172]	@ (800f060 <sys_timeout_abs+0xd4>)
 800efb4:	f006 f826 	bl	8015004 <iprintf>
    return;
 800efb8:	e04a      	b.n	800f050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800efd2:	4b24      	ldr	r3, [pc, #144]	@ (800f064 <sys_timeout_abs+0xd8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d103      	bne.n	800efe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800efda:	4a22      	ldr	r2, [pc, #136]	@ (800f064 <sys_timeout_abs+0xd8>)
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	6013      	str	r3, [r2, #0]
    return;
 800efe0:	e037      	b.n	800f052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	685a      	ldr	r2, [r3, #4]
 800efe6:	4b1f      	ldr	r3, [pc, #124]	@ (800f064 <sys_timeout_abs+0xd8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	1ad3      	subs	r3, r2, r3
 800efee:	0fdb      	lsrs	r3, r3, #31
 800eff0:	f003 0301 	and.w	r3, r3, #1
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d007      	beq.n	800f00a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800effa:	4b1a      	ldr	r3, [pc, #104]	@ (800f064 <sys_timeout_abs+0xd8>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f002:	4a18      	ldr	r2, [pc, #96]	@ (800f064 <sys_timeout_abs+0xd8>)
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	6013      	str	r3, [r2, #0]
 800f008:	e023      	b.n	800f052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f00a:	4b16      	ldr	r3, [pc, #88]	@ (800f064 <sys_timeout_abs+0xd8>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	617b      	str	r3, [r7, #20]
 800f010:	e01a      	b.n	800f048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00b      	beq.n	800f032 <sys_timeout_abs+0xa6>
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	0fdb      	lsrs	r3, r3, #31
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d007      	beq.n	800f042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	601a      	str	r2, [r3, #0]
        break;
 800f040:	e007      	b.n	800f052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1e1      	bne.n	800f012 <sys_timeout_abs+0x86>
 800f04e:	e000      	b.n	800f052 <sys_timeout_abs+0xc6>
    return;
 800f050:	bf00      	nop
      }
    }
  }
}
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	0801af10 	.word	0x0801af10
 800f05c:	0801af44 	.word	0x0801af44
 800f060:	0801af84 	.word	0x0801af84
 800f064:	20008144 	.word	0x20008144

0800f068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	4798      	blx	r3

  now = sys_now();
 800f07a:	f7f7 fde9 	bl	8006c50 <sys_now>
 800f07e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	4b0f      	ldr	r3, [pc, #60]	@ (800f0c4 <lwip_cyclic_timer+0x5c>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4413      	add	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	0fdb      	lsrs	r3, r3, #31
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d009      	beq.n	800f0b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	4907      	ldr	r1, [pc, #28]	@ (800f0c8 <lwip_cyclic_timer+0x60>)
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff ff6e 	bl	800ef8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f0b0:	e004      	b.n	800f0bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	4904      	ldr	r1, [pc, #16]	@ (800f0c8 <lwip_cyclic_timer+0x60>)
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff ff68 	bl	800ef8c <sys_timeout_abs>
}
 800f0bc:	bf00      	nop
 800f0be:	3718      	adds	r7, #24
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	20008148 	.word	0x20008148
 800f0c8:	0800f069 	.word	0x0800f069

0800f0cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	607b      	str	r3, [r7, #4]
 800f0d6:	e00e      	b.n	800f0f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800f108 <sys_timeouts_init+0x3c>)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	4a08      	ldr	r2, [pc, #32]	@ (800f108 <sys_timeouts_init+0x3c>)
 800f0e6:	4413      	add	r3, r2
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	4908      	ldr	r1, [pc, #32]	@ (800f10c <sys_timeouts_init+0x40>)
 800f0ec:	f000 f810 	bl	800f110 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	607b      	str	r3, [r7, #4]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b04      	cmp	r3, #4
 800f0fa:	d9ed      	bls.n	800f0d8 <sys_timeouts_init+0xc>
  }
}
 800f0fc:	bf00      	nop
 800f0fe:	bf00      	nop
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	0801bf0c 	.word	0x0801bf0c
 800f10c:	0800f069 	.word	0x0800f069

0800f110 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f122:	d306      	bcc.n	800f132 <sys_timeout+0x22>
 800f124:	4b0a      	ldr	r3, [pc, #40]	@ (800f150 <sys_timeout+0x40>)
 800f126:	f240 1229 	movw	r2, #297	@ 0x129
 800f12a:	490a      	ldr	r1, [pc, #40]	@ (800f154 <sys_timeout+0x44>)
 800f12c:	480a      	ldr	r0, [pc, #40]	@ (800f158 <sys_timeout+0x48>)
 800f12e:	f005 ff69 	bl	8015004 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f132:	f7f7 fd8d 	bl	8006c50 <sys_now>
 800f136:	4602      	mov	r2, r0
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	68b9      	ldr	r1, [r7, #8]
 800f142:	6978      	ldr	r0, [r7, #20]
 800f144:	f7ff ff22 	bl	800ef8c <sys_timeout_abs>
#endif
}
 800f148:	bf00      	nop
 800f14a:	3718      	adds	r7, #24
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}
 800f150:	0801af10 	.word	0x0801af10
 800f154:	0801afac 	.word	0x0801afac
 800f158:	0801af84 	.word	0x0801af84

0800f15c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f162:	f7f7 fd75 	bl	8006c50 <sys_now>
 800f166:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f168:	4b1a      	ldr	r3, [pc, #104]	@ (800f1d4 <sys_check_timeouts+0x78>)
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <sys_check_timeouts+0x1a>
 800f172:	f7f9 fb65 	bl	8008840 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f176:	4b18      	ldr	r3, [pc, #96]	@ (800f1d8 <sys_check_timeouts+0x7c>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d022      	beq.n	800f1c8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	0fdb      	lsrs	r3, r3, #31
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d11a      	bne.n	800f1cc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a0f      	ldr	r2, [pc, #60]	@ (800f1d8 <sys_check_timeouts+0x7c>)
 800f19c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	689b      	ldr	r3, [r3, #8]
 800f1a2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4a0b      	ldr	r2, [pc, #44]	@ (800f1dc <sys_check_timeouts+0x80>)
 800f1b0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f1b2:	68b9      	ldr	r1, [r7, #8]
 800f1b4:	2006      	movs	r0, #6
 800f1b6:	f7f8 fffb 	bl	80081b0 <memp_free>
    if (handler != NULL) {
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d0d3      	beq.n	800f168 <sys_check_timeouts+0xc>
      handler(arg);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6838      	ldr	r0, [r7, #0]
 800f1c4:	4798      	blx	r3
  do {
 800f1c6:	e7cf      	b.n	800f168 <sys_check_timeouts+0xc>
      return;
 800f1c8:	bf00      	nop
 800f1ca:	e000      	b.n	800f1ce <sys_check_timeouts+0x72>
      return;
 800f1cc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	200080f1 	.word	0x200080f1
 800f1d8:	20008144 	.word	0x20008144
 800f1dc:	20008148 	.word	0x20008148

0800f1e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f1e4:	f004 ff58 	bl	8014098 <rand>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	4b01      	ldr	r3, [pc, #4]	@ (800f200 <udp_init+0x20>)
 800f1fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f1fc:	bf00      	nop
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	20000038 	.word	0x20000038

0800f204 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f20e:	4b17      	ldr	r3, [pc, #92]	@ (800f26c <udp_new_port+0x68>)
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	b291      	uxth	r1, r2
 800f216:	4a15      	ldr	r2, [pc, #84]	@ (800f26c <udp_new_port+0x68>)
 800f218:	8011      	strh	r1, [r2, #0]
 800f21a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f21e:	4293      	cmp	r3, r2
 800f220:	d103      	bne.n	800f22a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f222:	4b12      	ldr	r3, [pc, #72]	@ (800f26c <udp_new_port+0x68>)
 800f224:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f228:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f22a:	4b11      	ldr	r3, [pc, #68]	@ (800f270 <udp_new_port+0x6c>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	603b      	str	r3, [r7, #0]
 800f230:	e011      	b.n	800f256 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	8a5a      	ldrh	r2, [r3, #18]
 800f236:	4b0d      	ldr	r3, [pc, #52]	@ (800f26c <udp_new_port+0x68>)
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d108      	bne.n	800f250 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f23e:	88fb      	ldrh	r3, [r7, #6]
 800f240:	3301      	adds	r3, #1
 800f242:	80fb      	strh	r3, [r7, #6]
 800f244:	88fb      	ldrh	r3, [r7, #6]
 800f246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f24a:	d3e0      	bcc.n	800f20e <udp_new_port+0xa>
        return 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	e007      	b.n	800f260 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	603b      	str	r3, [r7, #0]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d1ea      	bne.n	800f232 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f25c:	4b03      	ldr	r3, [pc, #12]	@ (800f26c <udp_new_port+0x68>)
 800f25e:	881b      	ldrh	r3, [r3, #0]
}
 800f260:	4618      	mov	r0, r3
 800f262:	370c      	adds	r7, #12
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	20000038 	.word	0x20000038
 800f270:	20008150 	.word	0x20008150

0800f274 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	4613      	mov	r3, r2
 800f280:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d105      	bne.n	800f294 <udp_input_local_match+0x20>
 800f288:	4b27      	ldr	r3, [pc, #156]	@ (800f328 <udp_input_local_match+0xb4>)
 800f28a:	2287      	movs	r2, #135	@ 0x87
 800f28c:	4927      	ldr	r1, [pc, #156]	@ (800f32c <udp_input_local_match+0xb8>)
 800f28e:	4828      	ldr	r0, [pc, #160]	@ (800f330 <udp_input_local_match+0xbc>)
 800f290:	f005 feb8 	bl	8015004 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d105      	bne.n	800f2a6 <udp_input_local_match+0x32>
 800f29a:	4b23      	ldr	r3, [pc, #140]	@ (800f328 <udp_input_local_match+0xb4>)
 800f29c:	2288      	movs	r2, #136	@ 0x88
 800f29e:	4925      	ldr	r1, [pc, #148]	@ (800f334 <udp_input_local_match+0xc0>)
 800f2a0:	4823      	ldr	r0, [pc, #140]	@ (800f330 <udp_input_local_match+0xbc>)
 800f2a2:	f005 feaf 	bl	8015004 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	7a1b      	ldrb	r3, [r3, #8]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00b      	beq.n	800f2c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	7a1a      	ldrb	r2, [r3, #8]
 800f2b2:	4b21      	ldr	r3, [pc, #132]	@ (800f338 <udp_input_local_match+0xc4>)
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d001      	beq.n	800f2c6 <udp_input_local_match+0x52>
    return 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	e02b      	b.n	800f31e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d018      	beq.n	800f2fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d013      	beq.n	800f2fa <udp_input_local_match+0x86>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00f      	beq.n	800f2fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f2da:	4b17      	ldr	r3, [pc, #92]	@ (800f338 <udp_input_local_match+0xc4>)
 800f2dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e2:	d00a      	beq.n	800f2fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b13      	ldr	r3, [pc, #76]	@ (800f338 <udp_input_local_match+0xc4>)
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	405a      	eors	r2, r3
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d110      	bne.n	800f31c <udp_input_local_match+0xa8>
          return 1;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e00f      	b.n	800f31e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d009      	beq.n	800f318 <udp_input_local_match+0xa4>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d005      	beq.n	800f318 <udp_input_local_match+0xa4>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	4b09      	ldr	r3, [pc, #36]	@ (800f338 <udp_input_local_match+0xc4>)
 800f312:	695b      	ldr	r3, [r3, #20]
 800f314:	429a      	cmp	r2, r3
 800f316:	d101      	bne.n	800f31c <udp_input_local_match+0xa8>
        return 1;
 800f318:	2301      	movs	r3, #1
 800f31a:	e000      	b.n	800f31e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	0801aff8 	.word	0x0801aff8
 800f32c:	0801b028 	.word	0x0801b028
 800f330:	0801b04c 	.word	0x0801b04c
 800f334:	0801b074 	.word	0x0801b074
 800f338:	200050b8 	.word	0x200050b8

0800f33c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b08d      	sub	sp, #52	@ 0x34
 800f340:	af02      	add	r7, sp, #8
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f346:	2300      	movs	r3, #0
 800f348:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d105      	bne.n	800f35c <udp_input+0x20>
 800f350:	4b7c      	ldr	r3, [pc, #496]	@ (800f544 <udp_input+0x208>)
 800f352:	22cf      	movs	r2, #207	@ 0xcf
 800f354:	497c      	ldr	r1, [pc, #496]	@ (800f548 <udp_input+0x20c>)
 800f356:	487d      	ldr	r0, [pc, #500]	@ (800f54c <udp_input+0x210>)
 800f358:	f005 fe54 	bl	8015004 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d105      	bne.n	800f36e <udp_input+0x32>
 800f362:	4b78      	ldr	r3, [pc, #480]	@ (800f544 <udp_input+0x208>)
 800f364:	22d0      	movs	r2, #208	@ 0xd0
 800f366:	497a      	ldr	r1, [pc, #488]	@ (800f550 <udp_input+0x214>)
 800f368:	4878      	ldr	r0, [pc, #480]	@ (800f54c <udp_input+0x210>)
 800f36a:	f005 fe4b 	bl	8015004 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	895b      	ldrh	r3, [r3, #10]
 800f372:	2b07      	cmp	r3, #7
 800f374:	d803      	bhi.n	800f37e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7f9 fd9c 	bl	8008eb4 <pbuf_free>
    goto end;
 800f37c:	e0de      	b.n	800f53c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f384:	4b73      	ldr	r3, [pc, #460]	@ (800f554 <udp_input+0x218>)
 800f386:	695b      	ldr	r3, [r3, #20]
 800f388:	4a72      	ldr	r2, [pc, #456]	@ (800f554 <udp_input+0x218>)
 800f38a:	6812      	ldr	r2, [r2, #0]
 800f38c:	4611      	mov	r1, r2
 800f38e:	4618      	mov	r0, r3
 800f390:	f003 fe02 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 800f394:	4603      	mov	r3, r0
 800f396:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f8 f9fa 	bl	8007798 <lwip_htons>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	885b      	ldrh	r3, [r3, #2]
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7f8 f9f2 	bl	8007798 <lwip_htons>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3c4:	4b64      	ldr	r3, [pc, #400]	@ (800f558 <udp_input+0x21c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3ca:	e054      	b.n	800f476 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ce:	8a5b      	ldrh	r3, [r3, #18]
 800f3d0:	89fa      	ldrh	r2, [r7, #14]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d14a      	bne.n	800f46c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f3d6:	7cfb      	ldrb	r3, [r7, #19]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	6839      	ldr	r1, [r7, #0]
 800f3dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3de:	f7ff ff49 	bl	800f274 <udp_input_local_match>
 800f3e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d041      	beq.n	800f46c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ea:	7c1b      	ldrb	r3, [r3, #16]
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d11d      	bne.n	800f430 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	61fb      	str	r3, [r7, #28]
 800f3fe:	e017      	b.n	800f430 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f400:	7cfb      	ldrb	r3, [r7, #19]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d014      	beq.n	800f430 <udp_input+0xf4>
 800f406:	4b53      	ldr	r3, [pc, #332]	@ (800f554 <udp_input+0x218>)
 800f408:	695b      	ldr	r3, [r3, #20]
 800f40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f40e:	d10f      	bne.n	800f430 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	3304      	adds	r3, #4
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d008      	beq.n	800f430 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	3304      	adds	r3, #4
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d101      	bne.n	800f430 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	8a9b      	ldrh	r3, [r3, #20]
 800f434:	8a3a      	ldrh	r2, [r7, #16]
 800f436:	429a      	cmp	r2, r3
 800f438:	d118      	bne.n	800f46c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d005      	beq.n	800f44e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	4b43      	ldr	r3, [pc, #268]	@ (800f554 <udp_input+0x218>)
 800f448:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d10e      	bne.n	800f46c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d014      	beq.n	800f47e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	68da      	ldr	r2, [r3, #12]
 800f458:	6a3b      	ldr	r3, [r7, #32]
 800f45a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f45c:	4b3e      	ldr	r3, [pc, #248]	@ (800f558 <udp_input+0x21c>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f462:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f464:	4a3c      	ldr	r2, [pc, #240]	@ (800f558 <udp_input+0x21c>)
 800f466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f468:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f46a:	e008      	b.n	800f47e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	627b      	str	r3, [r7, #36]	@ 0x24
 800f476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1a7      	bne.n	800f3cc <udp_input+0x90>
 800f47c:	e000      	b.n	800f480 <udp_input+0x144>
        break;
 800f47e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d002      	beq.n	800f496 <udp_input+0x15a>
    for_us = 1;
 800f490:	2301      	movs	r3, #1
 800f492:	76fb      	strb	r3, [r7, #27]
 800f494:	e00a      	b.n	800f4ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	3304      	adds	r3, #4
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	4b2d      	ldr	r3, [pc, #180]	@ (800f554 <udp_input+0x218>)
 800f49e:	695b      	ldr	r3, [r3, #20]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	bf0c      	ite	eq
 800f4a4:	2301      	moveq	r3, #1
 800f4a6:	2300      	movne	r3, #0
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f4ac:	7efb      	ldrb	r3, [r7, #27]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d041      	beq.n	800f536 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f4b2:	2108      	movs	r1, #8
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7f9 fc77 	bl	8008da8 <pbuf_remove_header>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00a      	beq.n	800f4d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f4c0:	4b20      	ldr	r3, [pc, #128]	@ (800f544 <udp_input+0x208>)
 800f4c2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f4c6:	4925      	ldr	r1, [pc, #148]	@ (800f55c <udp_input+0x220>)
 800f4c8:	4820      	ldr	r0, [pc, #128]	@ (800f54c <udp_input+0x210>)
 800f4ca:	f005 fd9b 	bl	8015004 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7f9 fcf0 	bl	8008eb4 <pbuf_free>
      goto end;
 800f4d4:	e032      	b.n	800f53c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d012      	beq.n	800f502 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00a      	beq.n	800f4fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e6:	699c      	ldr	r4, [r3, #24]
 800f4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ea:	69d8      	ldr	r0, [r3, #28]
 800f4ec:	8a3b      	ldrh	r3, [r7, #16]
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f560 <udp_input+0x224>)
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f4f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f4f8:	e021      	b.n	800f53e <udp_input+0x202>
        pbuf_free(p);
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7f9 fcda 	bl	8008eb4 <pbuf_free>
        goto end;
 800f500:	e01c      	b.n	800f53c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f502:	7cfb      	ldrb	r3, [r7, #19]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d112      	bne.n	800f52e <udp_input+0x1f2>
 800f508:	4b12      	ldr	r3, [pc, #72]	@ (800f554 <udp_input+0x218>)
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f510:	2be0      	cmp	r3, #224	@ 0xe0
 800f512:	d00c      	beq.n	800f52e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f514:	4b0f      	ldr	r3, [pc, #60]	@ (800f554 <udp_input+0x218>)
 800f516:	899b      	ldrh	r3, [r3, #12]
 800f518:	3308      	adds	r3, #8
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	b21b      	sxth	r3, r3
 800f51e:	4619      	mov	r1, r3
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f7f9 fcb4 	bl	8008e8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f526:	2103      	movs	r1, #3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f003 f9f7 	bl	801291c <icmp_dest_unreach>
      pbuf_free(p);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7f9 fcc0 	bl	8008eb4 <pbuf_free>
  return;
 800f534:	e003      	b.n	800f53e <udp_input+0x202>
    pbuf_free(p);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7f9 fcbc 	bl	8008eb4 <pbuf_free>
  return;
 800f53c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f53e:	372c      	adds	r7, #44	@ 0x2c
 800f540:	46bd      	mov	sp, r7
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	0801aff8 	.word	0x0801aff8
 800f548:	0801b09c 	.word	0x0801b09c
 800f54c:	0801b04c 	.word	0x0801b04c
 800f550:	0801b0b4 	.word	0x0801b0b4
 800f554:	200050b8 	.word	0x200050b8
 800f558:	20008150 	.word	0x20008150
 800f55c:	0801b0d0 	.word	0x0801b0d0
 800f560:	200050c8 	.word	0x200050c8

0800f564 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af02      	add	r7, sp, #8
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d109      	bne.n	800f58c <udp_sendto_if+0x28>
 800f578:	4b2e      	ldr	r3, [pc, #184]	@ (800f634 <udp_sendto_if+0xd0>)
 800f57a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f57e:	492e      	ldr	r1, [pc, #184]	@ (800f638 <udp_sendto_if+0xd4>)
 800f580:	482e      	ldr	r0, [pc, #184]	@ (800f63c <udp_sendto_if+0xd8>)
 800f582:	f005 fd3f 	bl	8015004 <iprintf>
 800f586:	f06f 030f 	mvn.w	r3, #15
 800f58a:	e04f      	b.n	800f62c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d109      	bne.n	800f5a6 <udp_sendto_if+0x42>
 800f592:	4b28      	ldr	r3, [pc, #160]	@ (800f634 <udp_sendto_if+0xd0>)
 800f594:	f240 2281 	movw	r2, #641	@ 0x281
 800f598:	4929      	ldr	r1, [pc, #164]	@ (800f640 <udp_sendto_if+0xdc>)
 800f59a:	4828      	ldr	r0, [pc, #160]	@ (800f63c <udp_sendto_if+0xd8>)
 800f59c:	f005 fd32 	bl	8015004 <iprintf>
 800f5a0:	f06f 030f 	mvn.w	r3, #15
 800f5a4:	e042      	b.n	800f62c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d109      	bne.n	800f5c0 <udp_sendto_if+0x5c>
 800f5ac:	4b21      	ldr	r3, [pc, #132]	@ (800f634 <udp_sendto_if+0xd0>)
 800f5ae:	f240 2282 	movw	r2, #642	@ 0x282
 800f5b2:	4924      	ldr	r1, [pc, #144]	@ (800f644 <udp_sendto_if+0xe0>)
 800f5b4:	4821      	ldr	r0, [pc, #132]	@ (800f63c <udp_sendto_if+0xd8>)
 800f5b6:	f005 fd25 	bl	8015004 <iprintf>
 800f5ba:	f06f 030f 	mvn.w	r3, #15
 800f5be:	e035      	b.n	800f62c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d109      	bne.n	800f5da <udp_sendto_if+0x76>
 800f5c6:	4b1b      	ldr	r3, [pc, #108]	@ (800f634 <udp_sendto_if+0xd0>)
 800f5c8:	f240 2283 	movw	r2, #643	@ 0x283
 800f5cc:	491e      	ldr	r1, [pc, #120]	@ (800f648 <udp_sendto_if+0xe4>)
 800f5ce:	481b      	ldr	r0, [pc, #108]	@ (800f63c <udp_sendto_if+0xd8>)
 800f5d0:	f005 fd18 	bl	8015004 <iprintf>
 800f5d4:	f06f 030f 	mvn.w	r3, #15
 800f5d8:	e028      	b.n	800f62c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d009      	beq.n	800f5f4 <udp_sendto_if+0x90>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d005      	beq.n	800f5f4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5f0:	2be0      	cmp	r3, #224	@ 0xe0
 800f5f2:	d103      	bne.n	800f5fc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e00b      	b.n	800f614 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	6a3b      	ldr	r3, [r7, #32]
 800f602:	3304      	adds	r3, #4
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	429a      	cmp	r2, r3
 800f608:	d002      	beq.n	800f610 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f60a:	f06f 0303 	mvn.w	r3, #3
 800f60e:	e00d      	b.n	800f62c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f614:	887a      	ldrh	r2, [r7, #2]
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	6a3b      	ldr	r3, [r7, #32]
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	4613      	mov	r3, r2
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	68b9      	ldr	r1, [r7, #8]
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f000 f811 	bl	800f64c <udp_sendto_if_src>
 800f62a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	0801aff8 	.word	0x0801aff8
 800f638:	0801b16c 	.word	0x0801b16c
 800f63c:	0801b04c 	.word	0x0801b04c
 800f640:	0801b188 	.word	0x0801b188
 800f644:	0801b1a4 	.word	0x0801b1a4
 800f648:	0801b1c4 	.word	0x0801b1c4

0800f64c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b08c      	sub	sp, #48	@ 0x30
 800f650:	af04      	add	r7, sp, #16
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d109      	bne.n	800f674 <udp_sendto_if_src+0x28>
 800f660:	4b65      	ldr	r3, [pc, #404]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f662:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f666:	4965      	ldr	r1, [pc, #404]	@ (800f7fc <udp_sendto_if_src+0x1b0>)
 800f668:	4865      	ldr	r0, [pc, #404]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f66a:	f005 fccb 	bl	8015004 <iprintf>
 800f66e:	f06f 030f 	mvn.w	r3, #15
 800f672:	e0bc      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d109      	bne.n	800f68e <udp_sendto_if_src+0x42>
 800f67a:	4b5f      	ldr	r3, [pc, #380]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f67c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f680:	4960      	ldr	r1, [pc, #384]	@ (800f804 <udp_sendto_if_src+0x1b8>)
 800f682:	485f      	ldr	r0, [pc, #380]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f684:	f005 fcbe 	bl	8015004 <iprintf>
 800f688:	f06f 030f 	mvn.w	r3, #15
 800f68c:	e0af      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d109      	bne.n	800f6a8 <udp_sendto_if_src+0x5c>
 800f694:	4b58      	ldr	r3, [pc, #352]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f696:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f69a:	495b      	ldr	r1, [pc, #364]	@ (800f808 <udp_sendto_if_src+0x1bc>)
 800f69c:	4858      	ldr	r0, [pc, #352]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f69e:	f005 fcb1 	bl	8015004 <iprintf>
 800f6a2:	f06f 030f 	mvn.w	r3, #15
 800f6a6:	e0a2      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d109      	bne.n	800f6c2 <udp_sendto_if_src+0x76>
 800f6ae:	4b52      	ldr	r3, [pc, #328]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f6b0:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f6b4:	4955      	ldr	r1, [pc, #340]	@ (800f80c <udp_sendto_if_src+0x1c0>)
 800f6b6:	4852      	ldr	r0, [pc, #328]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f6b8:	f005 fca4 	bl	8015004 <iprintf>
 800f6bc:	f06f 030f 	mvn.w	r3, #15
 800f6c0:	e095      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d109      	bne.n	800f6dc <udp_sendto_if_src+0x90>
 800f6c8:	4b4b      	ldr	r3, [pc, #300]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f6ca:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f6ce:	4950      	ldr	r1, [pc, #320]	@ (800f810 <udp_sendto_if_src+0x1c4>)
 800f6d0:	484b      	ldr	r0, [pc, #300]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f6d2:	f005 fc97 	bl	8015004 <iprintf>
 800f6d6:	f06f 030f 	mvn.w	r3, #15
 800f6da:	e088      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	8a5b      	ldrh	r3, [r3, #18]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d10f      	bne.n	800f704 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f6e4:	68f9      	ldr	r1, [r7, #12]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	8a5b      	ldrh	r3, [r3, #18]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 f893 	bl	800f818 <udp_bind>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f6f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d002      	beq.n	800f704 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f6fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f702:	e074      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	891b      	ldrh	r3, [r3, #8]
 800f708:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d902      	bls.n	800f716 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f710:	f04f 33ff 	mov.w	r3, #4294967295
 800f714:	e06b      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f716:	2108      	movs	r1, #8
 800f718:	68b8      	ldr	r0, [r7, #8]
 800f71a:	f7f9 fb35 	bl	8008d88 <pbuf_add_header>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b00      	cmp	r3, #0
 800f722:	d015      	beq.n	800f750 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f724:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f728:	2108      	movs	r1, #8
 800f72a:	2022      	movs	r0, #34	@ 0x22
 800f72c:	f7f9 f8de 	bl	80088ec <pbuf_alloc>
 800f730:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d102      	bne.n	800f73e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f738:	f04f 33ff 	mov.w	r3, #4294967295
 800f73c:	e057      	b.n	800f7ee <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	891b      	ldrh	r3, [r3, #8]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d006      	beq.n	800f754 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f746:	68b9      	ldr	r1, [r7, #8]
 800f748:	69f8      	ldr	r0, [r7, #28]
 800f74a:	f7f9 fccb 	bl	80090e4 <pbuf_chain>
 800f74e:	e001      	b.n	800f754 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	895b      	ldrh	r3, [r3, #10]
 800f758:	2b07      	cmp	r3, #7
 800f75a:	d806      	bhi.n	800f76a <udp_sendto_if_src+0x11e>
 800f75c:	4b26      	ldr	r3, [pc, #152]	@ (800f7f8 <udp_sendto_if_src+0x1ac>)
 800f75e:	f240 320d 	movw	r2, #781	@ 0x30d
 800f762:	492c      	ldr	r1, [pc, #176]	@ (800f814 <udp_sendto_if_src+0x1c8>)
 800f764:	4826      	ldr	r0, [pc, #152]	@ (800f800 <udp_sendto_if_src+0x1b4>)
 800f766:	f005 fc4d 	bl	8015004 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	8a5b      	ldrh	r3, [r3, #18]
 800f774:	4618      	mov	r0, r3
 800f776:	f7f8 f80f 	bl	8007798 <lwip_htons>
 800f77a:	4603      	mov	r3, r0
 800f77c:	461a      	mov	r2, r3
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f782:	887b      	ldrh	r3, [r7, #2]
 800f784:	4618      	mov	r0, r3
 800f786:	f7f8 f807 	bl	8007798 <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	461a      	mov	r2, r3
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2200      	movs	r2, #0
 800f796:	719a      	strb	r2, [r3, #6]
 800f798:	2200      	movs	r2, #0
 800f79a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	891b      	ldrh	r3, [r3, #8]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7f7 fff9 	bl	8007798 <lwip_htons>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f7ae:	2311      	movs	r3, #17
 800f7b0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	7adb      	ldrb	r3, [r3, #11]
 800f7b6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	7a9b      	ldrb	r3, [r3, #10]
 800f7bc:	7cb9      	ldrb	r1, [r7, #18]
 800f7be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7c0:	9202      	str	r2, [sp, #8]
 800f7c2:	7cfa      	ldrb	r2, [r7, #19]
 800f7c4:	9201      	str	r2, [sp, #4]
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7ce:	69f8      	ldr	r0, [r7, #28]
 800f7d0:	f003 fb34 	bl	8012e3c <ip4_output_if_src>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f7d8:	69fa      	ldr	r2, [r7, #28]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d004      	beq.n	800f7ea <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f7e0:	69f8      	ldr	r0, [r7, #28]
 800f7e2:	f7f9 fb67 	bl	8008eb4 <pbuf_free>
    q = NULL;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f7ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3720      	adds	r7, #32
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	0801aff8 	.word	0x0801aff8
 800f7fc:	0801b1e4 	.word	0x0801b1e4
 800f800:	0801b04c 	.word	0x0801b04c
 800f804:	0801b204 	.word	0x0801b204
 800f808:	0801b224 	.word	0x0801b224
 800f80c:	0801b248 	.word	0x0801b248
 800f810:	0801b26c 	.word	0x0801b26c
 800f814:	0801b290 	.word	0x0801b290

0800f818 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	4613      	mov	r3, r2
 800f824:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f82c:	4b39      	ldr	r3, [pc, #228]	@ (800f914 <udp_bind+0xfc>)
 800f82e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d109      	bne.n	800f84a <udp_bind+0x32>
 800f836:	4b38      	ldr	r3, [pc, #224]	@ (800f918 <udp_bind+0x100>)
 800f838:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f83c:	4937      	ldr	r1, [pc, #220]	@ (800f91c <udp_bind+0x104>)
 800f83e:	4838      	ldr	r0, [pc, #224]	@ (800f920 <udp_bind+0x108>)
 800f840:	f005 fbe0 	bl	8015004 <iprintf>
 800f844:	f06f 030f 	mvn.w	r3, #15
 800f848:	e060      	b.n	800f90c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f84a:	2300      	movs	r3, #0
 800f84c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f84e:	4b35      	ldr	r3, [pc, #212]	@ (800f924 <udp_bind+0x10c>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	617b      	str	r3, [r7, #20]
 800f854:	e009      	b.n	800f86a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f856:	68fa      	ldr	r2, [r7, #12]
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d102      	bne.n	800f864 <udp_bind+0x4c>
      rebind = 1;
 800f85e:	2301      	movs	r3, #1
 800f860:	74fb      	strb	r3, [r7, #19]
      break;
 800f862:	e005      	b.n	800f870 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1f2      	bne.n	800f856 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f870:	88fb      	ldrh	r3, [r7, #6]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d109      	bne.n	800f88a <udp_bind+0x72>
    port = udp_new_port();
 800f876:	f7ff fcc5 	bl	800f204 <udp_new_port>
 800f87a:	4603      	mov	r3, r0
 800f87c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f87e:	88fb      	ldrh	r3, [r7, #6]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d12c      	bne.n	800f8de <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f884:	f06f 0307 	mvn.w	r3, #7
 800f888:	e040      	b.n	800f90c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f88a:	4b26      	ldr	r3, [pc, #152]	@ (800f924 <udp_bind+0x10c>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	617b      	str	r3, [r7, #20]
 800f890:	e022      	b.n	800f8d8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	429a      	cmp	r2, r3
 800f898:	d01b      	beq.n	800f8d2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	8a5b      	ldrh	r3, [r3, #18]
 800f89e:	88fa      	ldrh	r2, [r7, #6]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d116      	bne.n	800f8d2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d00d      	beq.n	800f8cc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00a      	beq.n	800f8cc <udp_bind+0xb4>
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d006      	beq.n	800f8cc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f8be:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d102      	bne.n	800f8d2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f8cc:	f06f 0307 	mvn.w	r3, #7
 800f8d0:	e01c      	b.n	800f90c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	617b      	str	r3, [r7, #20]
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1d9      	bne.n	800f892 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <udp_bind+0xd2>
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	e000      	b.n	800f8ec <udp_bind+0xd4>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	88fa      	ldrh	r2, [r7, #6]
 800f8f4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f8f6:	7cfb      	ldrb	r3, [r7, #19]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d106      	bne.n	800f90a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f8fc:	4b09      	ldr	r3, [pc, #36]	@ (800f924 <udp_bind+0x10c>)
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f904:	4a07      	ldr	r2, [pc, #28]	@ (800f924 <udp_bind+0x10c>)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	0801bf34 	.word	0x0801bf34
 800f918:	0801aff8 	.word	0x0801aff8
 800f91c:	0801b2c0 	.word	0x0801b2c0
 800f920:	0801b04c 	.word	0x0801b04c
 800f924:	20008150 	.word	0x20008150

0800f928 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	4613      	mov	r3, r2
 800f934:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d109      	bne.n	800f950 <udp_connect+0x28>
 800f93c:	4b2c      	ldr	r3, [pc, #176]	@ (800f9f0 <udp_connect+0xc8>)
 800f93e:	f240 4235 	movw	r2, #1077	@ 0x435
 800f942:	492c      	ldr	r1, [pc, #176]	@ (800f9f4 <udp_connect+0xcc>)
 800f944:	482c      	ldr	r0, [pc, #176]	@ (800f9f8 <udp_connect+0xd0>)
 800f946:	f005 fb5d 	bl	8015004 <iprintf>
 800f94a:	f06f 030f 	mvn.w	r3, #15
 800f94e:	e04b      	b.n	800f9e8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d109      	bne.n	800f96a <udp_connect+0x42>
 800f956:	4b26      	ldr	r3, [pc, #152]	@ (800f9f0 <udp_connect+0xc8>)
 800f958:	f240 4236 	movw	r2, #1078	@ 0x436
 800f95c:	4927      	ldr	r1, [pc, #156]	@ (800f9fc <udp_connect+0xd4>)
 800f95e:	4826      	ldr	r0, [pc, #152]	@ (800f9f8 <udp_connect+0xd0>)
 800f960:	f005 fb50 	bl	8015004 <iprintf>
 800f964:	f06f 030f 	mvn.w	r3, #15
 800f968:	e03e      	b.n	800f9e8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	8a5b      	ldrh	r3, [r3, #18]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10f      	bne.n	800f992 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f972:	68f9      	ldr	r1, [r7, #12]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	8a5b      	ldrh	r3, [r3, #18]
 800f978:	461a      	mov	r2, r3
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff ff4c 	bl	800f818 <udp_bind>
 800f980:	4603      	mov	r3, r0
 800f982:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f984:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d002      	beq.n	800f992 <udp_connect+0x6a>
      return err;
 800f98c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f990:	e02a      	b.n	800f9e8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <udp_connect+0x76>
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	e000      	b.n	800f9a0 <udp_connect+0x78>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	88fa      	ldrh	r2, [r7, #6]
 800f9a8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7c1b      	ldrb	r3, [r3, #16]
 800f9ae:	f043 0304 	orr.w	r3, r3, #4
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f9b8:	4b11      	ldr	r3, [pc, #68]	@ (800fa00 <udp_connect+0xd8>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	617b      	str	r3, [r7, #20]
 800f9be:	e008      	b.n	800f9d2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d101      	bne.n	800f9cc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	e00d      	b.n	800f9e8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	617b      	str	r3, [r7, #20]
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1f3      	bne.n	800f9c0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f9d8:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <udp_connect+0xd8>)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f9e0:	4a07      	ldr	r2, [pc, #28]	@ (800fa00 <udp_connect+0xd8>)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	0801aff8 	.word	0x0801aff8
 800f9f4:	0801b2d8 	.word	0x0801b2d8
 800f9f8:	0801b04c 	.word	0x0801b04c
 800f9fc:	0801b2f4 	.word	0x0801b2f4
 800fa00:	20008150 	.word	0x20008150

0800fa04 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d107      	bne.n	800fa26 <udp_recv+0x22>
 800fa16:	4b08      	ldr	r3, [pc, #32]	@ (800fa38 <udp_recv+0x34>)
 800fa18:	f240 428a 	movw	r2, #1162	@ 0x48a
 800fa1c:	4907      	ldr	r1, [pc, #28]	@ (800fa3c <udp_recv+0x38>)
 800fa1e:	4808      	ldr	r0, [pc, #32]	@ (800fa40 <udp_recv+0x3c>)
 800fa20:	f005 faf0 	bl	8015004 <iprintf>
 800fa24:	e005      	b.n	800fa32 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	61da      	str	r2, [r3, #28]
}
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	0801aff8 	.word	0x0801aff8
 800fa3c:	0801b32c 	.word	0x0801b32c
 800fa40:	0801b04c 	.word	0x0801b04c

0800fa44 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d107      	bne.n	800fa62 <udp_remove+0x1e>
 800fa52:	4b19      	ldr	r3, [pc, #100]	@ (800fab8 <udp_remove+0x74>)
 800fa54:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800fa58:	4918      	ldr	r1, [pc, #96]	@ (800fabc <udp_remove+0x78>)
 800fa5a:	4819      	ldr	r0, [pc, #100]	@ (800fac0 <udp_remove+0x7c>)
 800fa5c:	f005 fad2 	bl	8015004 <iprintf>
 800fa60:	e026      	b.n	800fab0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800fa62:	4b18      	ldr	r3, [pc, #96]	@ (800fac4 <udp_remove+0x80>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d105      	bne.n	800fa78 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800fa6c:	4b15      	ldr	r3, [pc, #84]	@ (800fac4 <udp_remove+0x80>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	4a14      	ldr	r2, [pc, #80]	@ (800fac4 <udp_remove+0x80>)
 800fa74:	6013      	str	r3, [r2, #0]
 800fa76:	e017      	b.n	800faa8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fa78:	4b12      	ldr	r3, [pc, #72]	@ (800fac4 <udp_remove+0x80>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e010      	b.n	800faa2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d009      	beq.n	800fa9c <udp_remove+0x58>
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d104      	bne.n	800fa9c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68da      	ldr	r2, [r3, #12]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	60da      	str	r2, [r3, #12]
        break;
 800fa9a:	e005      	b.n	800faa8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	60fb      	str	r3, [r7, #12]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1eb      	bne.n	800fa80 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	2000      	movs	r0, #0
 800faac:	f7f8 fb80 	bl	80081b0 <memp_free>
}
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	0801aff8 	.word	0x0801aff8
 800fabc:	0801b344 	.word	0x0801b344
 800fac0:	0801b04c 	.word	0x0801b04c
 800fac4:	20008150 	.word	0x20008150

0800fac8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800face:	2000      	movs	r0, #0
 800fad0:	f7f8 fafe 	bl	80080d0 <memp_malloc>
 800fad4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d007      	beq.n	800faec <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fadc:	2220      	movs	r2, #32
 800fade:	2100      	movs	r1, #0
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f005 fc23 	bl	801532c <memset>
    pcb->ttl = UDP_TTL;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	22ff      	movs	r2, #255	@ 0xff
 800faea:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800faec:	687b      	ldr	r3, [r7, #4]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
	...

0800faf8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d01e      	beq.n	800fb46 <udp_netif_ip_addr_changed+0x4e>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d01a      	beq.n	800fb46 <udp_netif_ip_addr_changed+0x4e>
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d017      	beq.n	800fb46 <udp_netif_ip_addr_changed+0x4e>
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d013      	beq.n	800fb46 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb54 <udp_netif_ip_addr_changed+0x5c>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	60fb      	str	r3, [r7, #12]
 800fb24:	e00c      	b.n	800fb40 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d103      	bne.n	800fb3a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	681a      	ldr	r2, [r3, #0]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1ef      	bne.n	800fb26 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fb46:	bf00      	nop
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	20008150 	.word	0x20008150

0800fb58 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fb5c:	4b20      	ldr	r3, [pc, #128]	@ (800fbe0 <dhcp_inc_pcb_refcount+0x88>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d133      	bne.n	800fbcc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fb64:	4b1f      	ldr	r3, [pc, #124]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d005      	beq.n	800fb78 <dhcp_inc_pcb_refcount+0x20>
 800fb6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fbe8 <dhcp_inc_pcb_refcount+0x90>)
 800fb6e:	22e5      	movs	r2, #229	@ 0xe5
 800fb70:	491e      	ldr	r1, [pc, #120]	@ (800fbec <dhcp_inc_pcb_refcount+0x94>)
 800fb72:	481f      	ldr	r0, [pc, #124]	@ (800fbf0 <dhcp_inc_pcb_refcount+0x98>)
 800fb74:	f005 fa46 	bl	8015004 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fb78:	f7ff ffa6 	bl	800fac8 <udp_new>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	4a19      	ldr	r2, [pc, #100]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fb80:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fb82:	4b18      	ldr	r3, [pc, #96]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d102      	bne.n	800fb90 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb8e:	e024      	b.n	800fbda <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fb90:	4b14      	ldr	r3, [pc, #80]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	7a5a      	ldrb	r2, [r3, #9]
 800fb96:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f042 0220 	orr.w	r2, r2, #32
 800fb9e:	b2d2      	uxtb	r2, r2
 800fba0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fba2:	4b10      	ldr	r3, [pc, #64]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2244      	movs	r2, #68	@ 0x44
 800fba8:	4912      	ldr	r1, [pc, #72]	@ (800fbf4 <dhcp_inc_pcb_refcount+0x9c>)
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fe34 	bl	800f818 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2243      	movs	r2, #67	@ 0x43
 800fbb6:	490f      	ldr	r1, [pc, #60]	@ (800fbf4 <dhcp_inc_pcb_refcount+0x9c>)
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff feb5 	bl	800f928 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fbbe:	4b09      	ldr	r3, [pc, #36]	@ (800fbe4 <dhcp_inc_pcb_refcount+0x8c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	490c      	ldr	r1, [pc, #48]	@ (800fbf8 <dhcp_inc_pcb_refcount+0xa0>)
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7ff ff1c 	bl	800fa04 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fbcc:	4b04      	ldr	r3, [pc, #16]	@ (800fbe0 <dhcp_inc_pcb_refcount+0x88>)
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	4b02      	ldr	r3, [pc, #8]	@ (800fbe0 <dhcp_inc_pcb_refcount+0x88>)
 800fbd6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	20008180 	.word	0x20008180
 800fbe4:	2000817c 	.word	0x2000817c
 800fbe8:	0801b35c 	.word	0x0801b35c
 800fbec:	0801b394 	.word	0x0801b394
 800fbf0:	0801b3bc 	.word	0x0801b3bc
 800fbf4:	0801bf34 	.word	0x0801bf34
 800fbf8:	08011485 	.word	0x08011485

0800fbfc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fc00:	4b0e      	ldr	r3, [pc, #56]	@ (800fc3c <dhcp_dec_pcb_refcount+0x40>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d105      	bne.n	800fc14 <dhcp_dec_pcb_refcount+0x18>
 800fc08:	4b0d      	ldr	r3, [pc, #52]	@ (800fc40 <dhcp_dec_pcb_refcount+0x44>)
 800fc0a:	22ff      	movs	r2, #255	@ 0xff
 800fc0c:	490d      	ldr	r1, [pc, #52]	@ (800fc44 <dhcp_dec_pcb_refcount+0x48>)
 800fc0e:	480e      	ldr	r0, [pc, #56]	@ (800fc48 <dhcp_dec_pcb_refcount+0x4c>)
 800fc10:	f005 f9f8 	bl	8015004 <iprintf>
  dhcp_pcb_refcount--;
 800fc14:	4b09      	ldr	r3, [pc, #36]	@ (800fc3c <dhcp_dec_pcb_refcount+0x40>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	b2da      	uxtb	r2, r3
 800fc1c:	4b07      	ldr	r3, [pc, #28]	@ (800fc3c <dhcp_dec_pcb_refcount+0x40>)
 800fc1e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fc20:	4b06      	ldr	r3, [pc, #24]	@ (800fc3c <dhcp_dec_pcb_refcount+0x40>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d107      	bne.n	800fc38 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fc28:	4b08      	ldr	r3, [pc, #32]	@ (800fc4c <dhcp_dec_pcb_refcount+0x50>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff ff09 	bl	800fa44 <udp_remove>
    dhcp_pcb = NULL;
 800fc32:	4b06      	ldr	r3, [pc, #24]	@ (800fc4c <dhcp_dec_pcb_refcount+0x50>)
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
  }
}
 800fc38:	bf00      	nop
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	20008180 	.word	0x20008180
 800fc40:	0801b35c 	.word	0x0801b35c
 800fc44:	0801b3e4 	.word	0x0801b3e4
 800fc48:	0801b3bc 	.word	0x0801b3bc
 800fc4c:	2000817c 	.word	0x2000817c

0800fc50 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fc5e:	210c      	movs	r1, #12
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f001 f851 	bl	8010d08 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fc66:	4b06      	ldr	r3, [pc, #24]	@ (800fc80 <dhcp_handle_nak+0x30>)
 800fc68:	4a05      	ldr	r2, [pc, #20]	@ (800fc80 <dhcp_handle_nak+0x30>)
 800fc6a:	4905      	ldr	r1, [pc, #20]	@ (800fc80 <dhcp_handle_nak+0x30>)
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f7f8 fc41 	bl	80084f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fc4a 	bl	801050c <dhcp_discover>
}
 800fc78:	bf00      	nop
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	0801bf34 	.word	0x0801bf34

0800fc84 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc90:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fc92:	2108      	movs	r1, #8
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f001 f837 	bl	8010d08 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	331c      	adds	r3, #28
 800fc9e:	2200      	movs	r2, #0
 800fca0:	4619      	mov	r1, r3
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f002 fb38 	bl	8012318 <etharp_query>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	799b      	ldrb	r3, [r3, #6]
 800fcb0:	2bff      	cmp	r3, #255	@ 0xff
 800fcb2:	d005      	beq.n	800fcc0 <dhcp_check+0x3c>
    dhcp->tries++;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	799b      	ldrb	r3, [r3, #6]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fcc0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fcc4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fcc6:	893b      	ldrh	r3, [r7, #8]
 800fcc8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fccc:	4a06      	ldr	r2, [pc, #24]	@ (800fce8 <dhcp_check+0x64>)
 800fcce:	fb82 1203 	smull	r1, r2, r2, r3
 800fcd2:	1152      	asrs	r2, r2, #5
 800fcd4:	17db      	asrs	r3, r3, #31
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	b29a      	uxth	r2, r3
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fcde:	bf00      	nop
 800fce0:	3710      	adds	r7, #16
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	10624dd3 	.word	0x10624dd3

0800fcec <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcfa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fcfc:	4b0c      	ldr	r3, [pc, #48]	@ (800fd30 <dhcp_handle_offer+0x44>)
 800fcfe:	789b      	ldrb	r3, [r3, #2]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d011      	beq.n	800fd28 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fd34 <dhcp_handle_offer+0x48>)
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7f7 fd58 	bl	80077c4 <lwip_htonl>
 800fd14:	4602      	mov	r2, r0
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	691a      	ldr	r2, [r3, #16]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f808 	bl	800fd38 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fd28:	bf00      	nop
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	20008174 	.word	0x20008174
 800fd34:	20008154 	.word	0x20008154

0800fd38 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fd38:	b5b0      	push	{r4, r5, r7, lr}
 800fd3a:	b08a      	sub	sp, #40	@ 0x28
 800fd3c:	af02      	add	r7, sp, #8
 800fd3e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d109      	bne.n	800fd5a <dhcp_select+0x22>
 800fd46:	4b71      	ldr	r3, [pc, #452]	@ (800ff0c <dhcp_select+0x1d4>)
 800fd48:	f240 1277 	movw	r2, #375	@ 0x177
 800fd4c:	4970      	ldr	r1, [pc, #448]	@ (800ff10 <dhcp_select+0x1d8>)
 800fd4e:	4871      	ldr	r0, [pc, #452]	@ (800ff14 <dhcp_select+0x1dc>)
 800fd50:	f005 f958 	bl	8015004 <iprintf>
 800fd54:	f06f 030f 	mvn.w	r3, #15
 800fd58:	e0d3      	b.n	800ff02 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd5e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d109      	bne.n	800fd7a <dhcp_select+0x42>
 800fd66:	4b69      	ldr	r3, [pc, #420]	@ (800ff0c <dhcp_select+0x1d4>)
 800fd68:	f240 1279 	movw	r2, #377	@ 0x179
 800fd6c:	496a      	ldr	r1, [pc, #424]	@ (800ff18 <dhcp_select+0x1e0>)
 800fd6e:	4869      	ldr	r0, [pc, #420]	@ (800ff14 <dhcp_select+0x1dc>)
 800fd70:	f005 f948 	bl	8015004 <iprintf>
 800fd74:	f06f 0305 	mvn.w	r3, #5
 800fd78:	e0c3      	b.n	800ff02 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fd7a:	2101      	movs	r1, #1
 800fd7c:	69b8      	ldr	r0, [r7, #24]
 800fd7e:	f000 ffc3 	bl	8010d08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fd82:	f107 030c 	add.w	r3, r7, #12
 800fd86:	2203      	movs	r2, #3
 800fd88:	69b9      	ldr	r1, [r7, #24]
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f001 fc48 	bl	8011620 <dhcp_create_msg>
 800fd90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 8085 	beq.w	800fea4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fda0:	89b8      	ldrh	r0, [r7, #12]
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fda8:	2302      	movs	r3, #2
 800fdaa:	2239      	movs	r2, #57	@ 0x39
 800fdac:	f000 ffc6 	bl	8010d3c <dhcp_option>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fdb4:	89b8      	ldrh	r0, [r7, #12]
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	f001 f815 	bl	8010df0 <dhcp_option_short>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fdca:	89b8      	ldrh	r0, [r7, #12]
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fdd2:	2304      	movs	r3, #4
 800fdd4:	2232      	movs	r2, #50	@ 0x32
 800fdd6:	f000 ffb1 	bl	8010d3c <dhcp_option>
 800fdda:	4603      	mov	r3, r0
 800fddc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fdde:	89bc      	ldrh	r4, [r7, #12]
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	69db      	ldr	r3, [r3, #28]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7f7 fcea 	bl	80077c4 <lwip_htonl>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f001 f82c 	bl	8010e54 <dhcp_option_long>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fe00:	89b8      	ldrh	r0, [r7, #12]
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fe08:	2304      	movs	r3, #4
 800fe0a:	2236      	movs	r2, #54	@ 0x36
 800fe0c:	f000 ff96 	bl	8010d3c <dhcp_option>
 800fe10:	4603      	mov	r3, r0
 800fe12:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fe14:	89bc      	ldrh	r4, [r7, #12]
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7f7 fccf 	bl	80077c4 <lwip_htonl>
 800fe26:	4603      	mov	r3, r0
 800fe28:	461a      	mov	r2, r3
 800fe2a:	4629      	mov	r1, r5
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f001 f811 	bl	8010e54 <dhcp_option_long>
 800fe32:	4603      	mov	r3, r0
 800fe34:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fe36:	89b8      	ldrh	r0, [r7, #12]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fe3e:	2303      	movs	r3, #3
 800fe40:	2237      	movs	r2, #55	@ 0x37
 800fe42:	f000 ff7b 	bl	8010d3c <dhcp_option>
 800fe46:	4603      	mov	r3, r0
 800fe48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	77bb      	strb	r3, [r7, #30]
 800fe4e:	e00e      	b.n	800fe6e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fe50:	89b8      	ldrh	r0, [r7, #12]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fe58:	7fbb      	ldrb	r3, [r7, #30]
 800fe5a:	4a30      	ldr	r2, [pc, #192]	@ (800ff1c <dhcp_select+0x1e4>)
 800fe5c:	5cd3      	ldrb	r3, [r2, r3]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	f000 ffa0 	bl	8010da4 <dhcp_option_byte>
 800fe64:	4603      	mov	r3, r0
 800fe66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe68:	7fbb      	ldrb	r3, [r7, #30]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	77bb      	strb	r3, [r7, #30]
 800fe6e:	7fbb      	ldrb	r3, [r7, #30]
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d9ed      	bls.n	800fe50 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fe74:	89b8      	ldrh	r0, [r7, #12]
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	33f0      	adds	r3, #240	@ 0xf0
 800fe7a:	697a      	ldr	r2, [r7, #20]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	f001 fca5 	bl	80117cc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fe82:	4b27      	ldr	r3, [pc, #156]	@ (800ff20 <dhcp_select+0x1e8>)
 800fe84:	6818      	ldr	r0, [r3, #0]
 800fe86:	4b27      	ldr	r3, [pc, #156]	@ (800ff24 <dhcp_select+0x1ec>)
 800fe88:	9301      	str	r3, [sp, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	2343      	movs	r3, #67	@ 0x43
 800fe90:	4a25      	ldr	r2, [pc, #148]	@ (800ff28 <dhcp_select+0x1f0>)
 800fe92:	6979      	ldr	r1, [r7, #20]
 800fe94:	f7ff fbda 	bl	800f64c <udp_sendto_if_src>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fe9c:	6978      	ldr	r0, [r7, #20]
 800fe9e:	f7f9 f809 	bl	8008eb4 <pbuf_free>
 800fea2:	e001      	b.n	800fea8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fea4:	23ff      	movs	r3, #255	@ 0xff
 800fea6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	799b      	ldrb	r3, [r3, #6]
 800feac:	2bff      	cmp	r3, #255	@ 0xff
 800feae:	d005      	beq.n	800febc <dhcp_select+0x184>
    dhcp->tries++;
 800feb0:	69bb      	ldr	r3, [r7, #24]
 800feb2:	799b      	ldrb	r3, [r3, #6]
 800feb4:	3301      	adds	r3, #1
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	799b      	ldrb	r3, [r3, #6]
 800fec0:	2b05      	cmp	r3, #5
 800fec2:	d80d      	bhi.n	800fee0 <dhcp_select+0x1a8>
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	799b      	ldrb	r3, [r3, #6]
 800fec8:	461a      	mov	r2, r3
 800feca:	2301      	movs	r3, #1
 800fecc:	4093      	lsls	r3, r2
 800fece:	b29b      	uxth	r3, r3
 800fed0:	461a      	mov	r2, r3
 800fed2:	0152      	lsls	r2, r2, #5
 800fed4:	1ad2      	subs	r2, r2, r3
 800fed6:	0092      	lsls	r2, r2, #2
 800fed8:	4413      	add	r3, r2
 800feda:	00db      	lsls	r3, r3, #3
 800fedc:	b29b      	uxth	r3, r3
 800fede:	e001      	b.n	800fee4 <dhcp_select+0x1ac>
 800fee0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fee4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fee6:	89fb      	ldrh	r3, [r7, #14]
 800fee8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800feec:	4a0f      	ldr	r2, [pc, #60]	@ (800ff2c <dhcp_select+0x1f4>)
 800feee:	fb82 1203 	smull	r1, r2, r2, r3
 800fef2:	1152      	asrs	r2, r2, #5
 800fef4:	17db      	asrs	r3, r3, #31
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	b29a      	uxth	r2, r3
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fefe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bdb0      	pop	{r4, r5, r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	0801b35c 	.word	0x0801b35c
 800ff10:	0801b408 	.word	0x0801b408
 800ff14:	0801b3bc 	.word	0x0801b3bc
 800ff18:	0801b424 	.word	0x0801b424
 800ff1c:	2000003c 	.word	0x2000003c
 800ff20:	2000817c 	.word	0x2000817c
 800ff24:	0801bf34 	.word	0x0801bf34
 800ff28:	0801bf38 	.word	0x0801bf38
 800ff2c:	10624dd3 	.word	0x10624dd3

0800ff30 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800ff36:	4b27      	ldr	r3, [pc, #156]	@ (800ffd4 <dhcp_coarse_tmr+0xa4>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	607b      	str	r3, [r7, #4]
 800ff3c:	e042      	b.n	800ffc4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff42:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d039      	beq.n	800ffbe <dhcp_coarse_tmr+0x8e>
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	795b      	ldrb	r3, [r3, #5]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d035      	beq.n	800ffbe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	8a9b      	ldrh	r3, [r3, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d012      	beq.n	800ff80 <dhcp_coarse_tmr+0x50>
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	8a5b      	ldrh	r3, [r3, #18]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	825a      	strh	r2, [r3, #18]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	8a5a      	ldrh	r2, [r3, #18]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	8a9b      	ldrh	r3, [r3, #20]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d106      	bne.n	800ff80 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fe2e 	bl	8010bd4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f96b 	bl	8010254 <dhcp_start>
 800ff7e:	e01e      	b.n	800ffbe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	8a1b      	ldrh	r3, [r3, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <dhcp_coarse_tmr+0x70>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	8a1b      	ldrh	r3, [r3, #16]
 800ff8c:	1e5a      	subs	r2, r3, #1
 800ff8e:	b291      	uxth	r1, r2
 800ff90:	683a      	ldr	r2, [r7, #0]
 800ff92:	8211      	strh	r1, [r2, #16]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d103      	bne.n	800ffa0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f8c7 	bl	801012c <dhcp_t2_timeout>
 800ff9e:	e00e      	b.n	800ffbe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	89db      	ldrh	r3, [r3, #14]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00a      	beq.n	800ffbe <dhcp_coarse_tmr+0x8e>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	89db      	ldrh	r3, [r3, #14]
 800ffac:	1e5a      	subs	r2, r3, #1
 800ffae:	b291      	uxth	r1, r2
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	81d1      	strh	r1, [r2, #14]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d102      	bne.n	800ffbe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 f888 	bl	80100ce <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	607b      	str	r3, [r7, #4]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d1b9      	bne.n	800ff3e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ffca:	bf00      	nop
 800ffcc:	bf00      	nop
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	200080e8 	.word	0x200080e8

0800ffd8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ffde:	4b16      	ldr	r3, [pc, #88]	@ (8010038 <dhcp_fine_tmr+0x60>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	607b      	str	r3, [r7, #4]
 800ffe4:	e020      	b.n	8010028 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffea:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d017      	beq.n	8010022 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	891b      	ldrh	r3, [r3, #8]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d906      	bls.n	8010008 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	891b      	ldrh	r3, [r3, #8]
 800fffe:	3b01      	subs	r3, #1
 8010000:	b29a      	uxth	r2, r3
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	811a      	strh	r2, [r3, #8]
 8010006:	e00c      	b.n	8010022 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	891b      	ldrh	r3, [r3, #8]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d108      	bne.n	8010022 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	891b      	ldrh	r3, [r3, #8]
 8010014:	3b01      	subs	r3, #1
 8010016:	b29a      	uxth	r2, r3
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f80d 	bl	801003c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	607b      	str	r3, [r7, #4]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1db      	bne.n	800ffe6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801002e:	bf00      	nop
 8010030:	bf00      	nop
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	200080e8 	.word	0x200080e8

0801003c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010048:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	795b      	ldrb	r3, [r3, #5]
 801004e:	2b0c      	cmp	r3, #12
 8010050:	d003      	beq.n	801005a <dhcp_timeout+0x1e>
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	795b      	ldrb	r3, [r3, #5]
 8010056:	2b06      	cmp	r3, #6
 8010058:	d103      	bne.n	8010062 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fa56 	bl	801050c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010060:	e031      	b.n	80100c6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	795b      	ldrb	r3, [r3, #5]
 8010066:	2b01      	cmp	r3, #1
 8010068:	d10e      	bne.n	8010088 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	799b      	ldrb	r3, [r3, #6]
 801006e:	2b05      	cmp	r3, #5
 8010070:	d803      	bhi.n	801007a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff fe60 	bl	800fd38 <dhcp_select>
}
 8010078:	e025      	b.n	80100c6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 fdaa 	bl	8010bd4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f8e7 	bl	8010254 <dhcp_start>
}
 8010086:	e01e      	b.n	80100c6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	795b      	ldrb	r3, [r3, #5]
 801008c:	2b08      	cmp	r3, #8
 801008e:	d10b      	bne.n	80100a8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	799b      	ldrb	r3, [r3, #6]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d803      	bhi.n	80100a0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7ff fdf3 	bl	800fc84 <dhcp_check>
}
 801009e:	e012      	b.n	80100c6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fad5 	bl	8010650 <dhcp_bind>
}
 80100a6:	e00e      	b.n	80100c6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	795b      	ldrb	r3, [r3, #5]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d10a      	bne.n	80100c6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	799b      	ldrb	r3, [r3, #6]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d803      	bhi.n	80100c0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fcd7 	bl	8010a6c <dhcp_reboot>
}
 80100be:	e002      	b.n	80100c6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fa23 	bl	801050c <dhcp_discover>
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b084      	sub	sp, #16
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	795b      	ldrb	r3, [r3, #5]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d007      	beq.n	80100f4 <dhcp_t1_timeout+0x26>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	795b      	ldrb	r3, [r3, #5]
 80100e8:	2b0a      	cmp	r3, #10
 80100ea:	d003      	beq.n	80100f4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80100f0:	2b05      	cmp	r3, #5
 80100f2:	d117      	bne.n	8010124 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fb85 	bl	8010804 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	899b      	ldrh	r3, [r3, #12]
 80100fe:	461a      	mov	r2, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	8a5b      	ldrh	r3, [r3, #18]
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	2b01      	cmp	r3, #1
 8010108:	dd0c      	ble.n	8010124 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	461a      	mov	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	8a5b      	ldrh	r3, [r3, #18]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	da00      	bge.n	801011c <dhcp_t1_timeout+0x4e>
 801011a:	3301      	adds	r3, #1
 801011c:	105b      	asrs	r3, r3, #1
 801011e:	b29a      	uxth	r2, r3
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010124:	bf00      	nop
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010138:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	795b      	ldrb	r3, [r3, #5]
 801013e:	2b01      	cmp	r3, #1
 8010140:	d00b      	beq.n	801015a <dhcp_t2_timeout+0x2e>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	795b      	ldrb	r3, [r3, #5]
 8010146:	2b0a      	cmp	r3, #10
 8010148:	d007      	beq.n	801015a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801014e:	2b05      	cmp	r3, #5
 8010150:	d003      	beq.n	801015a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	795b      	ldrb	r3, [r3, #5]
 8010156:	2b04      	cmp	r3, #4
 8010158:	d117      	bne.n	801018a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f000 fbec 	bl	8010938 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8a9b      	ldrh	r3, [r3, #20]
 8010164:	461a      	mov	r2, r3
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	8a5b      	ldrh	r3, [r3, #18]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	2b01      	cmp	r3, #1
 801016e:	dd0c      	ble.n	801018a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	8a9b      	ldrh	r3, [r3, #20]
 8010174:	461a      	mov	r2, r3
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	8a5b      	ldrh	r3, [r3, #18]
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	2b00      	cmp	r3, #0
 801017e:	da00      	bge.n	8010182 <dhcp_t2_timeout+0x56>
 8010180:	3301      	adds	r3, #1
 8010182:	105b      	asrs	r3, r3, #1
 8010184:	b29a      	uxth	r2, r3
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
	...

08010194 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101a2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2200      	movs	r2, #0
 80101a8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2200      	movs	r2, #0
 80101ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80101b0:	4b26      	ldr	r3, [pc, #152]	@ (801024c <dhcp_handle_ack+0xb8>)
 80101b2:	78db      	ldrb	r3, [r3, #3]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d003      	beq.n	80101c0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80101b8:	4b25      	ldr	r3, [pc, #148]	@ (8010250 <dhcp_handle_ack+0xbc>)
 80101ba:	68da      	ldr	r2, [r3, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80101c0:	4b22      	ldr	r3, [pc, #136]	@ (801024c <dhcp_handle_ack+0xb8>)
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d004      	beq.n	80101d2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80101c8:	4b21      	ldr	r3, [pc, #132]	@ (8010250 <dhcp_handle_ack+0xbc>)
 80101ca:	691a      	ldr	r2, [r3, #16]
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80101d0:	e004      	b.n	80101dc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101d6:	085a      	lsrs	r2, r3, #1
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80101dc:	4b1b      	ldr	r3, [pc, #108]	@ (801024c <dhcp_handle_ack+0xb8>)
 80101de:	795b      	ldrb	r3, [r3, #5]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d004      	beq.n	80101ee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80101e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010250 <dhcp_handle_ack+0xbc>)
 80101e6:	695a      	ldr	r2, [r3, #20]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80101ec:	e007      	b.n	80101fe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80101f2:	4613      	mov	r3, r2
 80101f4:	00db      	lsls	r3, r3, #3
 80101f6:	1a9b      	subs	r3, r3, r2
 80101f8:	08da      	lsrs	r2, r3, #3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	691a      	ldr	r2, [r3, #16]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010206:	4b11      	ldr	r3, [pc, #68]	@ (801024c <dhcp_handle_ack+0xb8>)
 8010208:	799b      	ldrb	r3, [r3, #6]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00b      	beq.n	8010226 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801020e:	4b10      	ldr	r3, [pc, #64]	@ (8010250 <dhcp_handle_ack+0xbc>)
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	4618      	mov	r0, r3
 8010214:	f7f7 fad6 	bl	80077c4 <lwip_htonl>
 8010218:	4602      	mov	r2, r0
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2201      	movs	r2, #1
 8010222:	71da      	strb	r2, [r3, #7]
 8010224:	e002      	b.n	801022c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2200      	movs	r2, #0
 801022a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801022c:	4b07      	ldr	r3, [pc, #28]	@ (801024c <dhcp_handle_ack+0xb8>)
 801022e:	79db      	ldrb	r3, [r3, #7]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d007      	beq.n	8010244 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010234:	4b06      	ldr	r3, [pc, #24]	@ (8010250 <dhcp_handle_ack+0xbc>)
 8010236:	69db      	ldr	r3, [r3, #28]
 8010238:	4618      	mov	r0, r3
 801023a:	f7f7 fac3 	bl	80077c4 <lwip_htonl>
 801023e:	4602      	mov	r2, r0
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010244:	bf00      	nop
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20008174 	.word	0x20008174
 8010250:	20008154 	.word	0x20008154

08010254 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d109      	bne.n	8010276 <dhcp_start+0x22>
 8010262:	4b37      	ldr	r3, [pc, #220]	@ (8010340 <dhcp_start+0xec>)
 8010264:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8010268:	4936      	ldr	r1, [pc, #216]	@ (8010344 <dhcp_start+0xf0>)
 801026a:	4837      	ldr	r0, [pc, #220]	@ (8010348 <dhcp_start+0xf4>)
 801026c:	f004 feca 	bl	8015004 <iprintf>
 8010270:	f06f 030f 	mvn.w	r3, #15
 8010274:	e060      	b.n	8010338 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801027c:	f003 0301 	and.w	r3, r3, #1
 8010280:	2b00      	cmp	r3, #0
 8010282:	d109      	bne.n	8010298 <dhcp_start+0x44>
 8010284:	4b2e      	ldr	r3, [pc, #184]	@ (8010340 <dhcp_start+0xec>)
 8010286:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801028a:	4930      	ldr	r1, [pc, #192]	@ (801034c <dhcp_start+0xf8>)
 801028c:	482e      	ldr	r0, [pc, #184]	@ (8010348 <dhcp_start+0xf4>)
 801028e:	f004 feb9 	bl	8015004 <iprintf>
 8010292:	f06f 030f 	mvn.w	r3, #15
 8010296:	e04f      	b.n	8010338 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801029c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102a2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80102a6:	d202      	bcs.n	80102ae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80102a8:	f04f 33ff 	mov.w	r3, #4294967295
 80102ac:	e044      	b.n	8010338 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10d      	bne.n	80102d0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80102b4:	2034      	movs	r0, #52	@ 0x34
 80102b6:	f7f7 fd53 	bl	8007d60 <mem_malloc>
 80102ba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d102      	bne.n	80102c8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80102c2:	f04f 33ff 	mov.w	r3, #4294967295
 80102c6:	e037      	b.n	8010338 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80102ce:	e005      	b.n	80102dc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	791b      	ldrb	r3, [r3, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d001      	beq.n	80102dc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80102d8:	f7ff fc90 	bl	800fbfc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80102dc:	2234      	movs	r2, #52	@ 0x34
 80102de:	2100      	movs	r1, #0
 80102e0:	68f8      	ldr	r0, [r7, #12]
 80102e2:	f005 f823 	bl	801532c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80102e6:	f7ff fc37 	bl	800fb58 <dhcp_inc_pcb_refcount>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d002      	beq.n	80102f6 <dhcp_start+0xa2>
    return ERR_MEM;
 80102f0:	f04f 33ff 	mov.w	r3, #4294967295
 80102f4:	e020      	b.n	8010338 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2201      	movs	r2, #1
 80102fa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010302:	f003 0304 	and.w	r3, r3, #4
 8010306:	2b00      	cmp	r3, #0
 8010308:	d105      	bne.n	8010316 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801030a:	2102      	movs	r1, #2
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 fcfb 	bl	8010d08 <dhcp_set_state>
    return ERR_OK;
 8010312:	2300      	movs	r3, #0
 8010314:	e010      	b.n	8010338 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f8f8 	bl	801050c <dhcp_discover>
 801031c:	4603      	mov	r3, r0
 801031e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010320:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d005      	beq.n	8010334 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f000 fc53 	bl	8010bd4 <dhcp_release_and_stop>
    return ERR_MEM;
 801032e:	f04f 33ff 	mov.w	r3, #4294967295
 8010332:	e001      	b.n	8010338 <dhcp_start+0xe4>
  }
  return result;
 8010334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	0801b35c 	.word	0x0801b35c
 8010344:	0801b440 	.word	0x0801b440
 8010348:	0801b3bc 	.word	0x0801b3bc
 801034c:	0801b484 	.word	0x0801b484

08010350 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801035c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d025      	beq.n	80103b0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	795b      	ldrb	r3, [r3, #5]
 8010368:	2b0a      	cmp	r3, #10
 801036a:	d008      	beq.n	801037e <dhcp_network_changed+0x2e>
 801036c:	2b0a      	cmp	r3, #10
 801036e:	dc0d      	bgt.n	801038c <dhcp_network_changed+0x3c>
 8010370:	2b00      	cmp	r3, #0
 8010372:	d01f      	beq.n	80103b4 <dhcp_network_changed+0x64>
 8010374:	2b00      	cmp	r3, #0
 8010376:	db09      	blt.n	801038c <dhcp_network_changed+0x3c>
 8010378:	3b03      	subs	r3, #3
 801037a:	2b02      	cmp	r3, #2
 801037c:	d806      	bhi.n	801038c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2200      	movs	r2, #0
 8010382:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 fb71 	bl	8010a6c <dhcp_reboot>
      break;
 801038a:	e014      	b.n	80103b6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	795b      	ldrb	r3, [r3, #5]
 8010390:	2b0c      	cmp	r3, #12
 8010392:	d906      	bls.n	80103a2 <dhcp_network_changed+0x52>
 8010394:	4b09      	ldr	r3, [pc, #36]	@ (80103bc <dhcp_network_changed+0x6c>)
 8010396:	f240 326d 	movw	r2, #877	@ 0x36d
 801039a:	4909      	ldr	r1, [pc, #36]	@ (80103c0 <dhcp_network_changed+0x70>)
 801039c:	4809      	ldr	r0, [pc, #36]	@ (80103c4 <dhcp_network_changed+0x74>)
 801039e:	f004 fe31 	bl	8015004 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f8af 	bl	801050c <dhcp_discover>
      break;
 80103ae:	e002      	b.n	80103b6 <dhcp_network_changed+0x66>
    return;
 80103b0:	bf00      	nop
 80103b2:	e000      	b.n	80103b6 <dhcp_network_changed+0x66>
      break;
 80103b4:	bf00      	nop
  }
}
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0801b35c 	.word	0x0801b35c
 80103c0:	0801b4a8 	.word	0x0801b4a8
 80103c4:	0801b3bc 	.word	0x0801b3bc

080103c8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d107      	bne.n	80103e8 <dhcp_arp_reply+0x20>
 80103d8:	4b0e      	ldr	r3, [pc, #56]	@ (8010414 <dhcp_arp_reply+0x4c>)
 80103da:	f240 328b 	movw	r2, #907	@ 0x38b
 80103de:	490e      	ldr	r1, [pc, #56]	@ (8010418 <dhcp_arp_reply+0x50>)
 80103e0:	480e      	ldr	r0, [pc, #56]	@ (801041c <dhcp_arp_reply+0x54>)
 80103e2:	f004 fe0f 	bl	8015004 <iprintf>
 80103e6:	e012      	b.n	801040e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00c      	beq.n	801040e <dhcp_arp_reply+0x46>
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	795b      	ldrb	r3, [r3, #5]
 80103f8:	2b08      	cmp	r3, #8
 80103fa:	d108      	bne.n	801040e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	69db      	ldr	r3, [r3, #28]
 8010404:	429a      	cmp	r2, r3
 8010406:	d102      	bne.n	801040e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f000 f809 	bl	8010420 <dhcp_decline>
    }
  }
}
 801040e:	3710      	adds	r7, #16
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	0801b35c 	.word	0x0801b35c
 8010418:	0801b440 	.word	0x0801b440
 801041c:	0801b3bc 	.word	0x0801b3bc

08010420 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010420:	b5b0      	push	{r4, r5, r7, lr}
 8010422:	b08a      	sub	sp, #40	@ 0x28
 8010424:	af02      	add	r7, sp, #8
 8010426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801042c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801042e:	210c      	movs	r1, #12
 8010430:	69b8      	ldr	r0, [r7, #24]
 8010432:	f000 fc69 	bl	8010d08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010436:	f107 030c 	add.w	r3, r7, #12
 801043a:	2204      	movs	r2, #4
 801043c:	69b9      	ldr	r1, [r7, #24]
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f001 f8ee 	bl	8011620 <dhcp_create_msg>
 8010444:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d035      	beq.n	80104b8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010452:	89b8      	ldrh	r0, [r7, #12]
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801045a:	2304      	movs	r3, #4
 801045c:	2232      	movs	r2, #50	@ 0x32
 801045e:	f000 fc6d 	bl	8010d3c <dhcp_option>
 8010462:	4603      	mov	r3, r0
 8010464:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010466:	89bc      	ldrh	r4, [r7, #12]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	69db      	ldr	r3, [r3, #28]
 8010472:	4618      	mov	r0, r3
 8010474:	f7f7 f9a6 	bl	80077c4 <lwip_htonl>
 8010478:	4603      	mov	r3, r0
 801047a:	461a      	mov	r2, r3
 801047c:	4629      	mov	r1, r5
 801047e:	4620      	mov	r0, r4
 8010480:	f000 fce8 	bl	8010e54 <dhcp_option_long>
 8010484:	4603      	mov	r3, r0
 8010486:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010488:	89b8      	ldrh	r0, [r7, #12]
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	33f0      	adds	r3, #240	@ 0xf0
 801048e:	697a      	ldr	r2, [r7, #20]
 8010490:	4619      	mov	r1, r3
 8010492:	f001 f99b 	bl	80117cc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010496:	4b19      	ldr	r3, [pc, #100]	@ (80104fc <dhcp_decline+0xdc>)
 8010498:	6818      	ldr	r0, [r3, #0]
 801049a:	4b19      	ldr	r3, [pc, #100]	@ (8010500 <dhcp_decline+0xe0>)
 801049c:	9301      	str	r3, [sp, #4]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	2343      	movs	r3, #67	@ 0x43
 80104a4:	4a17      	ldr	r2, [pc, #92]	@ (8010504 <dhcp_decline+0xe4>)
 80104a6:	6979      	ldr	r1, [r7, #20]
 80104a8:	f7ff f8d0 	bl	800f64c <udp_sendto_if_src>
 80104ac:	4603      	mov	r3, r0
 80104ae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80104b0:	6978      	ldr	r0, [r7, #20]
 80104b2:	f7f8 fcff 	bl	8008eb4 <pbuf_free>
 80104b6:	e001      	b.n	80104bc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80104b8:	23ff      	movs	r3, #255	@ 0xff
 80104ba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	799b      	ldrb	r3, [r3, #6]
 80104c0:	2bff      	cmp	r3, #255	@ 0xff
 80104c2:	d005      	beq.n	80104d0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	799b      	ldrb	r3, [r3, #6]
 80104c8:	3301      	adds	r3, #1
 80104ca:	b2da      	uxtb	r2, r3
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80104d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80104d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80104d6:	89fb      	ldrh	r3, [r7, #14]
 80104d8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80104dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010508 <dhcp_decline+0xe8>)
 80104de:	fb82 1203 	smull	r1, r2, r2, r3
 80104e2:	1152      	asrs	r2, r2, #5
 80104e4:	17db      	asrs	r3, r3, #31
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80104ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3720      	adds	r7, #32
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bdb0      	pop	{r4, r5, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000817c 	.word	0x2000817c
 8010500:	0801bf34 	.word	0x0801bf34
 8010504:	0801bf38 	.word	0x0801bf38
 8010508:	10624dd3 	.word	0x10624dd3

0801050c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b08a      	sub	sp, #40	@ 0x28
 8010510:	af02      	add	r7, sp, #8
 8010512:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010518:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	2200      	movs	r2, #0
 8010522:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010524:	2106      	movs	r1, #6
 8010526:	69b8      	ldr	r0, [r7, #24]
 8010528:	f000 fbee 	bl	8010d08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801052c:	f107 0308 	add.w	r3, r7, #8
 8010530:	2201      	movs	r2, #1
 8010532:	69b9      	ldr	r1, [r7, #24]
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f001 f873 	bl	8011620 <dhcp_create_msg>
 801053a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d04b      	beq.n	80105da <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010548:	8938      	ldrh	r0, [r7, #8]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010550:	2302      	movs	r3, #2
 8010552:	2239      	movs	r2, #57	@ 0x39
 8010554:	f000 fbf2 	bl	8010d3c <dhcp_option>
 8010558:	4603      	mov	r3, r0
 801055a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801055c:	8938      	ldrh	r0, [r7, #8]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010568:	461a      	mov	r2, r3
 801056a:	f000 fc41 	bl	8010df0 <dhcp_option_short>
 801056e:	4603      	mov	r3, r0
 8010570:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010572:	8938      	ldrh	r0, [r7, #8]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801057a:	2303      	movs	r3, #3
 801057c:	2237      	movs	r2, #55	@ 0x37
 801057e:	f000 fbdd 	bl	8010d3c <dhcp_option>
 8010582:	4603      	mov	r3, r0
 8010584:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010586:	2300      	movs	r3, #0
 8010588:	77fb      	strb	r3, [r7, #31]
 801058a:	e00e      	b.n	80105aa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801058c:	8938      	ldrh	r0, [r7, #8]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010594:	7ffb      	ldrb	r3, [r7, #31]
 8010596:	4a29      	ldr	r2, [pc, #164]	@ (801063c <dhcp_discover+0x130>)
 8010598:	5cd3      	ldrb	r3, [r2, r3]
 801059a:	461a      	mov	r2, r3
 801059c:	f000 fc02 	bl	8010da4 <dhcp_option_byte>
 80105a0:	4603      	mov	r3, r0
 80105a2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80105a4:	7ffb      	ldrb	r3, [r7, #31]
 80105a6:	3301      	adds	r3, #1
 80105a8:	77fb      	strb	r3, [r7, #31]
 80105aa:	7ffb      	ldrb	r3, [r7, #31]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d9ed      	bls.n	801058c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80105b0:	8938      	ldrh	r0, [r7, #8]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	33f0      	adds	r3, #240	@ 0xf0
 80105b6:	693a      	ldr	r2, [r7, #16]
 80105b8:	4619      	mov	r1, r3
 80105ba:	f001 f907 	bl	80117cc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80105be:	4b20      	ldr	r3, [pc, #128]	@ (8010640 <dhcp_discover+0x134>)
 80105c0:	6818      	ldr	r0, [r3, #0]
 80105c2:	4b20      	ldr	r3, [pc, #128]	@ (8010644 <dhcp_discover+0x138>)
 80105c4:	9301      	str	r3, [sp, #4]
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	2343      	movs	r3, #67	@ 0x43
 80105cc:	4a1e      	ldr	r2, [pc, #120]	@ (8010648 <dhcp_discover+0x13c>)
 80105ce:	6939      	ldr	r1, [r7, #16]
 80105d0:	f7ff f83c 	bl	800f64c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80105d4:	6938      	ldr	r0, [r7, #16]
 80105d6:	f7f8 fc6d 	bl	8008eb4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	799b      	ldrb	r3, [r3, #6]
 80105de:	2bff      	cmp	r3, #255	@ 0xff
 80105e0:	d005      	beq.n	80105ee <dhcp_discover+0xe2>
    dhcp->tries++;
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	799b      	ldrb	r3, [r3, #6]
 80105e6:	3301      	adds	r3, #1
 80105e8:	b2da      	uxtb	r2, r3
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	799b      	ldrb	r3, [r3, #6]
 80105f2:	2b05      	cmp	r3, #5
 80105f4:	d80d      	bhi.n	8010612 <dhcp_discover+0x106>
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	799b      	ldrb	r3, [r3, #6]
 80105fa:	461a      	mov	r2, r3
 80105fc:	2301      	movs	r3, #1
 80105fe:	4093      	lsls	r3, r2
 8010600:	b29b      	uxth	r3, r3
 8010602:	461a      	mov	r2, r3
 8010604:	0152      	lsls	r2, r2, #5
 8010606:	1ad2      	subs	r2, r2, r3
 8010608:	0092      	lsls	r2, r2, #2
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	b29b      	uxth	r3, r3
 8010610:	e001      	b.n	8010616 <dhcp_discover+0x10a>
 8010612:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8010616:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010618:	897b      	ldrh	r3, [r7, #10]
 801061a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801061e:	4a0b      	ldr	r2, [pc, #44]	@ (801064c <dhcp_discover+0x140>)
 8010620:	fb82 1203 	smull	r1, r2, r2, r3
 8010624:	1152      	asrs	r2, r2, #5
 8010626:	17db      	asrs	r3, r3, #31
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	b29a      	uxth	r2, r3
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3720      	adds	r7, #32
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	2000003c 	.word	0x2000003c
 8010640:	2000817c 	.word	0x2000817c
 8010644:	0801bf34 	.word	0x0801bf34
 8010648:	0801bf38 	.word	0x0801bf38
 801064c:	10624dd3 	.word	0x10624dd3

08010650 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b088      	sub	sp, #32
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d107      	bne.n	801066e <dhcp_bind+0x1e>
 801065e:	4b64      	ldr	r3, [pc, #400]	@ (80107f0 <dhcp_bind+0x1a0>)
 8010660:	f240 4215 	movw	r2, #1045	@ 0x415
 8010664:	4963      	ldr	r1, [pc, #396]	@ (80107f4 <dhcp_bind+0x1a4>)
 8010666:	4864      	ldr	r0, [pc, #400]	@ (80107f8 <dhcp_bind+0x1a8>)
 8010668:	f004 fccc 	bl	8015004 <iprintf>
 801066c:	e0bc      	b.n	80107e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010672:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d107      	bne.n	801068a <dhcp_bind+0x3a>
 801067a:	4b5d      	ldr	r3, [pc, #372]	@ (80107f0 <dhcp_bind+0x1a0>)
 801067c:	f240 4217 	movw	r2, #1047	@ 0x417
 8010680:	495e      	ldr	r1, [pc, #376]	@ (80107fc <dhcp_bind+0x1ac>)
 8010682:	485d      	ldr	r0, [pc, #372]	@ (80107f8 <dhcp_bind+0x1a8>)
 8010684:	f004 fcbe 	bl	8015004 <iprintf>
 8010688:	e0ae      	b.n	80107e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	2200      	movs	r2, #0
 801068e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010698:	d019      	beq.n	80106ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801069e:	331e      	adds	r3, #30
 80106a0:	4a57      	ldr	r2, [pc, #348]	@ (8010800 <dhcp_bind+0x1b0>)
 80106a2:	fba2 2303 	umull	r2, r3, r2, r3
 80106a6:	095b      	lsrs	r3, r3, #5
 80106a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106b0:	d302      	bcc.n	80106b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80106b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	8a9b      	ldrh	r3, [r3, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d102      	bne.n	80106ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	2201      	movs	r2, #1
 80106cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d6:	d01d      	beq.n	8010714 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106dc:	331e      	adds	r3, #30
 80106de:	4a48      	ldr	r2, [pc, #288]	@ (8010800 <dhcp_bind+0x1b0>)
 80106e0:	fba2 2303 	umull	r2, r3, r2, r3
 80106e4:	095b      	lsrs	r3, r3, #5
 80106e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106ee:	d302      	bcc.n	80106f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80106f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	b29a      	uxth	r2, r3
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	895b      	ldrh	r3, [r3, #10]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d102      	bne.n	801070c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2201      	movs	r2, #1
 801070a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	895a      	ldrh	r2, [r3, #10]
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071c:	d01d      	beq.n	801075a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010722:	331e      	adds	r3, #30
 8010724:	4a36      	ldr	r2, [pc, #216]	@ (8010800 <dhcp_bind+0x1b0>)
 8010726:	fba2 2303 	umull	r2, r3, r2, r3
 801072a:	095b      	lsrs	r3, r3, #5
 801072c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010734:	d302      	bcc.n	801073c <dhcp_bind+0xec>
      timeout = 0xffff;
 8010736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801073a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	b29a      	uxth	r2, r3
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	899b      	ldrh	r3, [r3, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	2201      	movs	r2, #1
 8010750:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	899a      	ldrh	r2, [r3, #12]
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801075a:	69bb      	ldr	r3, [r7, #24]
 801075c:	895a      	ldrh	r2, [r3, #10]
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	899b      	ldrh	r3, [r3, #12]
 8010762:	429a      	cmp	r2, r3
 8010764:	d306      	bcc.n	8010774 <dhcp_bind+0x124>
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	899b      	ldrh	r3, [r3, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	2200      	movs	r2, #0
 8010772:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	79db      	ldrb	r3, [r3, #7]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d003      	beq.n	8010784 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	613b      	str	r3, [r7, #16]
 8010782:	e014      	b.n	80107ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	331c      	adds	r3, #28
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801078c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db02      	blt.n	801079a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010794:	23ff      	movs	r3, #255	@ 0xff
 8010796:	613b      	str	r3, [r7, #16]
 8010798:	e009      	b.n	80107ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801079a:	7dfb      	ldrb	r3, [r7, #23]
 801079c:	2bbf      	cmp	r3, #191	@ 0xbf
 801079e:	d903      	bls.n	80107a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80107a0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80107a4:	613b      	str	r3, [r7, #16]
 80107a6:	e002      	b.n	80107ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80107a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80107ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d108      	bne.n	80107cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	69da      	ldr	r2, [r3, #28]
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	4013      	ands	r3, r2
 80107c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80107ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80107cc:	210a      	movs	r1, #10
 80107ce:	69b8      	ldr	r0, [r7, #24]
 80107d0:	f000 fa9a 	bl	8010d08 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	f103 011c 	add.w	r1, r3, #28
 80107da:	f107 030c 	add.w	r3, r7, #12
 80107de:	f107 0210 	add.w	r2, r7, #16
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7f7 fe86 	bl	80084f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	0801b35c 	.word	0x0801b35c
 80107f4:	0801b4bc 	.word	0x0801b4bc
 80107f8:	0801b3bc 	.word	0x0801b3bc
 80107fc:	0801b4d8 	.word	0x0801b4d8
 8010800:	88888889 	.word	0x88888889

08010804 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b08a      	sub	sp, #40	@ 0x28
 8010808:	af02      	add	r7, sp, #8
 801080a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010810:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010812:	2105      	movs	r1, #5
 8010814:	69b8      	ldr	r0, [r7, #24]
 8010816:	f000 fa77 	bl	8010d08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801081a:	f107 030c 	add.w	r3, r7, #12
 801081e:	2203      	movs	r2, #3
 8010820:	69b9      	ldr	r1, [r7, #24]
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fefc 	bl	8011620 <dhcp_create_msg>
 8010828:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d04e      	beq.n	80108ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	685b      	ldr	r3, [r3, #4]
 8010834:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010836:	89b8      	ldrh	r0, [r7, #12]
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801083e:	2302      	movs	r3, #2
 8010840:	2239      	movs	r2, #57	@ 0x39
 8010842:	f000 fa7b 	bl	8010d3c <dhcp_option>
 8010846:	4603      	mov	r3, r0
 8010848:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801084a:	89b8      	ldrh	r0, [r7, #12]
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010856:	461a      	mov	r2, r3
 8010858:	f000 faca 	bl	8010df0 <dhcp_option_short>
 801085c:	4603      	mov	r3, r0
 801085e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010860:	89b8      	ldrh	r0, [r7, #12]
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010868:	2303      	movs	r3, #3
 801086a:	2237      	movs	r2, #55	@ 0x37
 801086c:	f000 fa66 	bl	8010d3c <dhcp_option>
 8010870:	4603      	mov	r3, r0
 8010872:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010874:	2300      	movs	r3, #0
 8010876:	77bb      	strb	r3, [r7, #30]
 8010878:	e00e      	b.n	8010898 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801087a:	89b8      	ldrh	r0, [r7, #12]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010882:	7fbb      	ldrb	r3, [r7, #30]
 8010884:	4a29      	ldr	r2, [pc, #164]	@ (801092c <dhcp_renew+0x128>)
 8010886:	5cd3      	ldrb	r3, [r2, r3]
 8010888:	461a      	mov	r2, r3
 801088a:	f000 fa8b 	bl	8010da4 <dhcp_option_byte>
 801088e:	4603      	mov	r3, r0
 8010890:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010892:	7fbb      	ldrb	r3, [r7, #30]
 8010894:	3301      	adds	r3, #1
 8010896:	77bb      	strb	r3, [r7, #30]
 8010898:	7fbb      	ldrb	r3, [r7, #30]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d9ed      	bls.n	801087a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801089e:	89b8      	ldrh	r0, [r7, #12]
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	33f0      	adds	r3, #240	@ 0xf0
 80108a4:	697a      	ldr	r2, [r7, #20]
 80108a6:	4619      	mov	r1, r3
 80108a8:	f000 ff90 	bl	80117cc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80108ac:	4b20      	ldr	r3, [pc, #128]	@ (8010930 <dhcp_renew+0x12c>)
 80108ae:	6818      	ldr	r0, [r3, #0]
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	f103 0218 	add.w	r2, r3, #24
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	9300      	str	r3, [sp, #0]
 80108ba:	2343      	movs	r3, #67	@ 0x43
 80108bc:	6979      	ldr	r1, [r7, #20]
 80108be:	f7fe fe51 	bl	800f564 <udp_sendto_if>
 80108c2:	4603      	mov	r3, r0
 80108c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80108c6:	6978      	ldr	r0, [r7, #20]
 80108c8:	f7f8 faf4 	bl	8008eb4 <pbuf_free>
 80108cc:	e001      	b.n	80108d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80108ce:	23ff      	movs	r3, #255	@ 0xff
 80108d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	799b      	ldrb	r3, [r3, #6]
 80108d6:	2bff      	cmp	r3, #255	@ 0xff
 80108d8:	d005      	beq.n	80108e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	799b      	ldrb	r3, [r3, #6]
 80108de:	3301      	adds	r3, #1
 80108e0:	b2da      	uxtb	r2, r3
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	799b      	ldrb	r3, [r3, #6]
 80108ea:	2b09      	cmp	r3, #9
 80108ec:	d809      	bhi.n	8010902 <dhcp_renew+0xfe>
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	799b      	ldrb	r3, [r3, #6]
 80108f2:	461a      	mov	r2, r3
 80108f4:	0152      	lsls	r2, r2, #5
 80108f6:	1ad2      	subs	r2, r2, r3
 80108f8:	0092      	lsls	r2, r2, #2
 80108fa:	4413      	add	r3, r2
 80108fc:	011b      	lsls	r3, r3, #4
 80108fe:	b29b      	uxth	r3, r3
 8010900:	e001      	b.n	8010906 <dhcp_renew+0x102>
 8010902:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010906:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010908:	89fb      	ldrh	r3, [r7, #14]
 801090a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801090e:	4a09      	ldr	r2, [pc, #36]	@ (8010934 <dhcp_renew+0x130>)
 8010910:	fb82 1203 	smull	r1, r2, r2, r3
 8010914:	1152      	asrs	r2, r2, #5
 8010916:	17db      	asrs	r3, r3, #31
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	b29a      	uxth	r2, r3
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010920:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3720      	adds	r7, #32
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	2000003c 	.word	0x2000003c
 8010930:	2000817c 	.word	0x2000817c
 8010934:	10624dd3 	.word	0x10624dd3

08010938 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b08a      	sub	sp, #40	@ 0x28
 801093c:	af02      	add	r7, sp, #8
 801093e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010944:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010946:	2104      	movs	r1, #4
 8010948:	69b8      	ldr	r0, [r7, #24]
 801094a:	f000 f9dd 	bl	8010d08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801094e:	f107 030c 	add.w	r3, r7, #12
 8010952:	2203      	movs	r2, #3
 8010954:	69b9      	ldr	r1, [r7, #24]
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 fe62 	bl	8011620 <dhcp_create_msg>
 801095c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d04c      	beq.n	80109fe <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	685b      	ldr	r3, [r3, #4]
 8010968:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801096a:	89b8      	ldrh	r0, [r7, #12]
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010972:	2302      	movs	r3, #2
 8010974:	2239      	movs	r2, #57	@ 0x39
 8010976:	f000 f9e1 	bl	8010d3c <dhcp_option>
 801097a:	4603      	mov	r3, r0
 801097c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801097e:	89b8      	ldrh	r0, [r7, #12]
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801098a:	461a      	mov	r2, r3
 801098c:	f000 fa30 	bl	8010df0 <dhcp_option_short>
 8010990:	4603      	mov	r3, r0
 8010992:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010994:	89b8      	ldrh	r0, [r7, #12]
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801099c:	2303      	movs	r3, #3
 801099e:	2237      	movs	r2, #55	@ 0x37
 80109a0:	f000 f9cc 	bl	8010d3c <dhcp_option>
 80109a4:	4603      	mov	r3, r0
 80109a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80109a8:	2300      	movs	r3, #0
 80109aa:	77bb      	strb	r3, [r7, #30]
 80109ac:	e00e      	b.n	80109cc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80109ae:	89b8      	ldrh	r0, [r7, #12]
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109b6:	7fbb      	ldrb	r3, [r7, #30]
 80109b8:	4a28      	ldr	r2, [pc, #160]	@ (8010a5c <dhcp_rebind+0x124>)
 80109ba:	5cd3      	ldrb	r3, [r2, r3]
 80109bc:	461a      	mov	r2, r3
 80109be:	f000 f9f1 	bl	8010da4 <dhcp_option_byte>
 80109c2:	4603      	mov	r3, r0
 80109c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80109c6:	7fbb      	ldrb	r3, [r7, #30]
 80109c8:	3301      	adds	r3, #1
 80109ca:	77bb      	strb	r3, [r7, #30]
 80109cc:	7fbb      	ldrb	r3, [r7, #30]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d9ed      	bls.n	80109ae <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80109d2:	89b8      	ldrh	r0, [r7, #12]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	33f0      	adds	r3, #240	@ 0xf0
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	4619      	mov	r1, r3
 80109dc:	f000 fef6 	bl	80117cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80109e0:	4b1f      	ldr	r3, [pc, #124]	@ (8010a60 <dhcp_rebind+0x128>)
 80109e2:	6818      	ldr	r0, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	2343      	movs	r3, #67	@ 0x43
 80109ea:	4a1e      	ldr	r2, [pc, #120]	@ (8010a64 <dhcp_rebind+0x12c>)
 80109ec:	6979      	ldr	r1, [r7, #20]
 80109ee:	f7fe fdb9 	bl	800f564 <udp_sendto_if>
 80109f2:	4603      	mov	r3, r0
 80109f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80109f6:	6978      	ldr	r0, [r7, #20]
 80109f8:	f7f8 fa5c 	bl	8008eb4 <pbuf_free>
 80109fc:	e001      	b.n	8010a02 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80109fe:	23ff      	movs	r3, #255	@ 0xff
 8010a00:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	799b      	ldrb	r3, [r3, #6]
 8010a06:	2bff      	cmp	r3, #255	@ 0xff
 8010a08:	d005      	beq.n	8010a16 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	799b      	ldrb	r3, [r3, #6]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	b2da      	uxtb	r2, r3
 8010a12:	69bb      	ldr	r3, [r7, #24]
 8010a14:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010a16:	69bb      	ldr	r3, [r7, #24]
 8010a18:	799b      	ldrb	r3, [r3, #6]
 8010a1a:	2b09      	cmp	r3, #9
 8010a1c:	d809      	bhi.n	8010a32 <dhcp_rebind+0xfa>
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	799b      	ldrb	r3, [r3, #6]
 8010a22:	461a      	mov	r2, r3
 8010a24:	0152      	lsls	r2, r2, #5
 8010a26:	1ad2      	subs	r2, r2, r3
 8010a28:	0092      	lsls	r2, r2, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	00db      	lsls	r3, r3, #3
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	e001      	b.n	8010a36 <dhcp_rebind+0xfe>
 8010a32:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010a36:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010a38:	89fb      	ldrh	r3, [r7, #14]
 8010a3a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8010a68 <dhcp_rebind+0x130>)
 8010a40:	fb82 1203 	smull	r1, r2, r2, r3
 8010a44:	1152      	asrs	r2, r2, #5
 8010a46:	17db      	asrs	r3, r3, #31
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010a50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3720      	adds	r7, #32
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	2000003c 	.word	0x2000003c
 8010a60:	2000817c 	.word	0x2000817c
 8010a64:	0801bf38 	.word	0x0801bf38
 8010a68:	10624dd3 	.word	0x10624dd3

08010a6c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010a6c:	b5b0      	push	{r4, r5, r7, lr}
 8010a6e:	b08a      	sub	sp, #40	@ 0x28
 8010a70:	af02      	add	r7, sp, #8
 8010a72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a78:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010a7a:	2103      	movs	r1, #3
 8010a7c:	69b8      	ldr	r0, [r7, #24]
 8010a7e:	f000 f943 	bl	8010d08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010a82:	f107 030c 	add.w	r3, r7, #12
 8010a86:	2203      	movs	r2, #3
 8010a88:	69b9      	ldr	r1, [r7, #24]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f000 fdc8 	bl	8011620 <dhcp_create_msg>
 8010a90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d066      	beq.n	8010b66 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010a9e:	89b8      	ldrh	r0, [r7, #12]
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	2239      	movs	r2, #57	@ 0x39
 8010aaa:	f000 f947 	bl	8010d3c <dhcp_option>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010ab2:	89b8      	ldrh	r0, [r7, #12]
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	33f0      	adds	r3, #240	@ 0xf0
 8010ab8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010abc:	4619      	mov	r1, r3
 8010abe:	f000 f997 	bl	8010df0 <dhcp_option_short>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010ac6:	89b8      	ldrh	r0, [r7, #12]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010ace:	2304      	movs	r3, #4
 8010ad0:	2232      	movs	r2, #50	@ 0x32
 8010ad2:	f000 f933 	bl	8010d3c <dhcp_option>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010ada:	89bc      	ldrh	r4, [r7, #12]
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010ae2:	69bb      	ldr	r3, [r7, #24]
 8010ae4:	69db      	ldr	r3, [r3, #28]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7f6 fe6c 	bl	80077c4 <lwip_htonl>
 8010aec:	4603      	mov	r3, r0
 8010aee:	461a      	mov	r2, r3
 8010af0:	4629      	mov	r1, r5
 8010af2:	4620      	mov	r0, r4
 8010af4:	f000 f9ae 	bl	8010e54 <dhcp_option_long>
 8010af8:	4603      	mov	r3, r0
 8010afa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010afc:	89b8      	ldrh	r0, [r7, #12]
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010b04:	2303      	movs	r3, #3
 8010b06:	2237      	movs	r2, #55	@ 0x37
 8010b08:	f000 f918 	bl	8010d3c <dhcp_option>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b10:	2300      	movs	r3, #0
 8010b12:	77bb      	strb	r3, [r7, #30]
 8010b14:	e00e      	b.n	8010b34 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010b16:	89b8      	ldrh	r0, [r7, #12]
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010b1e:	7fbb      	ldrb	r3, [r7, #30]
 8010b20:	4a28      	ldr	r2, [pc, #160]	@ (8010bc4 <dhcp_reboot+0x158>)
 8010b22:	5cd3      	ldrb	r3, [r2, r3]
 8010b24:	461a      	mov	r2, r3
 8010b26:	f000 f93d 	bl	8010da4 <dhcp_option_byte>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b2e:	7fbb      	ldrb	r3, [r7, #30]
 8010b30:	3301      	adds	r3, #1
 8010b32:	77bb      	strb	r3, [r7, #30]
 8010b34:	7fbb      	ldrb	r3, [r7, #30]
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	d9ed      	bls.n	8010b16 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010b3a:	89b8      	ldrh	r0, [r7, #12]
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	33f0      	adds	r3, #240	@ 0xf0
 8010b40:	697a      	ldr	r2, [r7, #20]
 8010b42:	4619      	mov	r1, r3
 8010b44:	f000 fe42 	bl	80117cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010b48:	4b1f      	ldr	r3, [pc, #124]	@ (8010bc8 <dhcp_reboot+0x15c>)
 8010b4a:	6818      	ldr	r0, [r3, #0]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	2343      	movs	r3, #67	@ 0x43
 8010b52:	4a1e      	ldr	r2, [pc, #120]	@ (8010bcc <dhcp_reboot+0x160>)
 8010b54:	6979      	ldr	r1, [r7, #20]
 8010b56:	f7fe fd05 	bl	800f564 <udp_sendto_if>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010b5e:	6978      	ldr	r0, [r7, #20]
 8010b60:	f7f8 f9a8 	bl	8008eb4 <pbuf_free>
 8010b64:	e001      	b.n	8010b6a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010b66:	23ff      	movs	r3, #255	@ 0xff
 8010b68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	799b      	ldrb	r3, [r3, #6]
 8010b6e:	2bff      	cmp	r3, #255	@ 0xff
 8010b70:	d005      	beq.n	8010b7e <dhcp_reboot+0x112>
    dhcp->tries++;
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	799b      	ldrb	r3, [r3, #6]
 8010b76:	3301      	adds	r3, #1
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	799b      	ldrb	r3, [r3, #6]
 8010b82:	2b09      	cmp	r3, #9
 8010b84:	d809      	bhi.n	8010b9a <dhcp_reboot+0x12e>
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	799b      	ldrb	r3, [r3, #6]
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	0152      	lsls	r2, r2, #5
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	0092      	lsls	r2, r2, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	e001      	b.n	8010b9e <dhcp_reboot+0x132>
 8010b9a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010b9e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010ba0:	89fb      	ldrh	r3, [r7, #14]
 8010ba2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8010bd0 <dhcp_reboot+0x164>)
 8010ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8010bac:	1152      	asrs	r2, r2, #5
 8010bae:	17db      	asrs	r3, r3, #31
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	69bb      	ldr	r3, [r7, #24]
 8010bb6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010bb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3720      	adds	r7, #32
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8010bc4:	2000003c 	.word	0x2000003c
 8010bc8:	2000817c 	.word	0x2000817c
 8010bcc:	0801bf38 	.word	0x0801bf38
 8010bd0:	10624dd3 	.word	0x10624dd3

08010bd4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010bd4:	b5b0      	push	{r4, r5, r7, lr}
 8010bd6:	b08a      	sub	sp, #40	@ 0x28
 8010bd8:	af02      	add	r7, sp, #8
 8010bda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010be0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	f000 8084 	beq.w	8010cf2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	795b      	ldrb	r3, [r3, #5]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 8081 	beq.w	8010cf6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	699b      	ldr	r3, [r3, #24]
 8010bf8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	2200      	movs	r2, #0
 8010c04:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	2200      	movs	r2, #0
 8010c16:	631a      	str	r2, [r3, #48]	@ 0x30
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	829a      	strh	r2, [r3, #20]
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	8a9a      	ldrh	r2, [r3, #20]
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	825a      	strh	r2, [r3, #18]
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	8a5a      	ldrh	r2, [r3, #18]
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	821a      	strh	r2, [r3, #16]
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	8a1a      	ldrh	r2, [r3, #16]
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f000 fdee 	bl	8011828 <dhcp_supplied_address>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d03b      	beq.n	8010cca <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010c52:	f107 030e 	add.w	r3, r7, #14
 8010c56:	2207      	movs	r2, #7
 8010c58:	69f9      	ldr	r1, [r7, #28]
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 fce0 	bl	8011620 <dhcp_create_msg>
 8010c60:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d030      	beq.n	8010cca <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010c6e:	89f8      	ldrh	r0, [r7, #14]
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010c76:	2304      	movs	r3, #4
 8010c78:	2236      	movs	r2, #54	@ 0x36
 8010c7a:	f000 f85f 	bl	8010d3c <dhcp_option>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010c82:	89fc      	ldrh	r4, [r7, #14]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f6 fd99 	bl	80077c4 <lwip_htonl>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461a      	mov	r2, r3
 8010c96:	4629      	mov	r1, r5
 8010c98:	4620      	mov	r0, r4
 8010c9a:	f000 f8db 	bl	8010e54 <dhcp_option_long>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010ca2:	89f8      	ldrh	r0, [r7, #14]
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	33f0      	adds	r3, #240	@ 0xf0
 8010ca8:	69ba      	ldr	r2, [r7, #24]
 8010caa:	4619      	mov	r1, r3
 8010cac:	f000 fd8e 	bl	80117cc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010cb0:	4b13      	ldr	r3, [pc, #76]	@ (8010d00 <dhcp_release_and_stop+0x12c>)
 8010cb2:	6818      	ldr	r0, [r3, #0]
 8010cb4:	f107 0210 	add.w	r2, r7, #16
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	2343      	movs	r3, #67	@ 0x43
 8010cbe:	69b9      	ldr	r1, [r7, #24]
 8010cc0:	f7fe fc50 	bl	800f564 <udp_sendto_if>
      pbuf_free(p_out);
 8010cc4:	69b8      	ldr	r0, [r7, #24]
 8010cc6:	f7f8 f8f5 	bl	8008eb4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010cca:	4b0e      	ldr	r3, [pc, #56]	@ (8010d04 <dhcp_release_and_stop+0x130>)
 8010ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8010d04 <dhcp_release_and_stop+0x130>)
 8010cce:	490d      	ldr	r1, [pc, #52]	@ (8010d04 <dhcp_release_and_stop+0x130>)
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f7f7 fc0f 	bl	80084f4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	69f8      	ldr	r0, [r7, #28]
 8010cda:	f000 f815 	bl	8010d08 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	791b      	ldrb	r3, [r3, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d008      	beq.n	8010cf8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010ce6:	f7fe ff89 	bl	800fbfc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	2200      	movs	r2, #0
 8010cee:	711a      	strb	r2, [r3, #4]
 8010cf0:	e002      	b.n	8010cf8 <dhcp_release_and_stop+0x124>
    return;
 8010cf2:	bf00      	nop
 8010cf4:	e000      	b.n	8010cf8 <dhcp_release_and_stop+0x124>
    return;
 8010cf6:	bf00      	nop
  }
}
 8010cf8:	3720      	adds	r7, #32
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2000817c 	.word	0x2000817c
 8010d04:	0801bf34 	.word	0x0801bf34

08010d08 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b083      	sub	sp, #12
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	460b      	mov	r3, r1
 8010d12:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	795b      	ldrb	r3, [r3, #5]
 8010d18:	78fa      	ldrb	r2, [r7, #3]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d008      	beq.n	8010d30 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	78fa      	ldrb	r2, [r7, #3]
 8010d22:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2200      	movs	r2, #0
 8010d28:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	811a      	strh	r2, [r3, #8]
  }
}
 8010d30:	bf00      	nop
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6039      	str	r1, [r7, #0]
 8010d44:	4611      	mov	r1, r2
 8010d46:	461a      	mov	r2, r3
 8010d48:	4603      	mov	r3, r0
 8010d4a:	80fb      	strh	r3, [r7, #6]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	717b      	strb	r3, [r7, #5]
 8010d50:	4613      	mov	r3, r2
 8010d52:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010d54:	88fa      	ldrh	r2, [r7, #6]
 8010d56:	793b      	ldrb	r3, [r7, #4]
 8010d58:	4413      	add	r3, r2
 8010d5a:	3302      	adds	r3, #2
 8010d5c:	2b44      	cmp	r3, #68	@ 0x44
 8010d5e:	d906      	bls.n	8010d6e <dhcp_option+0x32>
 8010d60:	4b0d      	ldr	r3, [pc, #52]	@ (8010d98 <dhcp_option+0x5c>)
 8010d62:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010d66:	490d      	ldr	r1, [pc, #52]	@ (8010d9c <dhcp_option+0x60>)
 8010d68:	480d      	ldr	r0, [pc, #52]	@ (8010da0 <dhcp_option+0x64>)
 8010d6a:	f004 f94b 	bl	8015004 <iprintf>
  options[options_out_len++] = option_type;
 8010d6e:	88fb      	ldrh	r3, [r7, #6]
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	80fa      	strh	r2, [r7, #6]
 8010d74:	461a      	mov	r2, r3
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	4413      	add	r3, r2
 8010d7a:	797a      	ldrb	r2, [r7, #5]
 8010d7c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010d7e:	88fb      	ldrh	r3, [r7, #6]
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	80fa      	strh	r2, [r7, #6]
 8010d84:	461a      	mov	r2, r3
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	4413      	add	r3, r2
 8010d8a:	793a      	ldrb	r2, [r7, #4]
 8010d8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d8e:	88fb      	ldrh	r3, [r7, #6]
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	0801b35c 	.word	0x0801b35c
 8010d9c:	0801b4f0 	.word	0x0801b4f0
 8010da0:	0801b3bc 	.word	0x0801b3bc

08010da4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	6039      	str	r1, [r7, #0]
 8010dae:	80fb      	strh	r3, [r7, #6]
 8010db0:	4613      	mov	r3, r2
 8010db2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010db4:	88fb      	ldrh	r3, [r7, #6]
 8010db6:	2b43      	cmp	r3, #67	@ 0x43
 8010db8:	d906      	bls.n	8010dc8 <dhcp_option_byte+0x24>
 8010dba:	4b0a      	ldr	r3, [pc, #40]	@ (8010de4 <dhcp_option_byte+0x40>)
 8010dbc:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010dc0:	4909      	ldr	r1, [pc, #36]	@ (8010de8 <dhcp_option_byte+0x44>)
 8010dc2:	480a      	ldr	r0, [pc, #40]	@ (8010dec <dhcp_option_byte+0x48>)
 8010dc4:	f004 f91e 	bl	8015004 <iprintf>
  options[options_out_len++] = value;
 8010dc8:	88fb      	ldrh	r3, [r7, #6]
 8010dca:	1c5a      	adds	r2, r3, #1
 8010dcc:	80fa      	strh	r2, [r7, #6]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	797a      	ldrb	r2, [r7, #5]
 8010dd6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010dd8:	88fb      	ldrh	r3, [r7, #6]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3708      	adds	r7, #8
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	0801b35c 	.word	0x0801b35c
 8010de8:	0801b534 	.word	0x0801b534
 8010dec:	0801b3bc 	.word	0x0801b3bc

08010df0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	6039      	str	r1, [r7, #0]
 8010dfa:	80fb      	strh	r3, [r7, #6]
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010e00:	88fb      	ldrh	r3, [r7, #6]
 8010e02:	3302      	adds	r3, #2
 8010e04:	2b44      	cmp	r3, #68	@ 0x44
 8010e06:	d906      	bls.n	8010e16 <dhcp_option_short+0x26>
 8010e08:	4b0f      	ldr	r3, [pc, #60]	@ (8010e48 <dhcp_option_short+0x58>)
 8010e0a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010e0e:	490f      	ldr	r1, [pc, #60]	@ (8010e4c <dhcp_option_short+0x5c>)
 8010e10:	480f      	ldr	r0, [pc, #60]	@ (8010e50 <dhcp_option_short+0x60>)
 8010e12:	f004 f8f7 	bl	8015004 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010e16:	88bb      	ldrh	r3, [r7, #4]
 8010e18:	0a1b      	lsrs	r3, r3, #8
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	88fb      	ldrh	r3, [r7, #6]
 8010e1e:	1c59      	adds	r1, r3, #1
 8010e20:	80f9      	strh	r1, [r7, #6]
 8010e22:	4619      	mov	r1, r3
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	440b      	add	r3, r1
 8010e28:	b2d2      	uxtb	r2, r2
 8010e2a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010e2c:	88fb      	ldrh	r3, [r7, #6]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	80fa      	strh	r2, [r7, #6]
 8010e32:	461a      	mov	r2, r3
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	4413      	add	r3, r2
 8010e38:	88ba      	ldrh	r2, [r7, #4]
 8010e3a:	b2d2      	uxtb	r2, r2
 8010e3c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010e3e:	88fb      	ldrh	r3, [r7, #6]
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801b35c 	.word	0x0801b35c
 8010e4c:	0801b56c 	.word	0x0801b56c
 8010e50:	0801b3bc 	.word	0x0801b3bc

08010e54 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
 8010e60:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010e62:	89fb      	ldrh	r3, [r7, #14]
 8010e64:	3304      	adds	r3, #4
 8010e66:	2b44      	cmp	r3, #68	@ 0x44
 8010e68:	d906      	bls.n	8010e78 <dhcp_option_long+0x24>
 8010e6a:	4b19      	ldr	r3, [pc, #100]	@ (8010ed0 <dhcp_option_long+0x7c>)
 8010e6c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010e70:	4918      	ldr	r1, [pc, #96]	@ (8010ed4 <dhcp_option_long+0x80>)
 8010e72:	4819      	ldr	r0, [pc, #100]	@ (8010ed8 <dhcp_option_long+0x84>)
 8010e74:	f004 f8c6 	bl	8015004 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	0e1a      	lsrs	r2, r3, #24
 8010e7c:	89fb      	ldrh	r3, [r7, #14]
 8010e7e:	1c59      	adds	r1, r3, #1
 8010e80:	81f9      	strh	r1, [r7, #14]
 8010e82:	4619      	mov	r1, r3
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	440b      	add	r3, r1
 8010e88:	b2d2      	uxtb	r2, r2
 8010e8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	0c1a      	lsrs	r2, r3, #16
 8010e90:	89fb      	ldrh	r3, [r7, #14]
 8010e92:	1c59      	adds	r1, r3, #1
 8010e94:	81f9      	strh	r1, [r7, #14]
 8010e96:	4619      	mov	r1, r3
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	440b      	add	r3, r1
 8010e9c:	b2d2      	uxtb	r2, r2
 8010e9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	0a1a      	lsrs	r2, r3, #8
 8010ea4:	89fb      	ldrh	r3, [r7, #14]
 8010ea6:	1c59      	adds	r1, r3, #1
 8010ea8:	81f9      	strh	r1, [r7, #14]
 8010eaa:	4619      	mov	r1, r3
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	440b      	add	r3, r1
 8010eb0:	b2d2      	uxtb	r2, r2
 8010eb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010eb4:	89fb      	ldrh	r3, [r7, #14]
 8010eb6:	1c5a      	adds	r2, r3, #1
 8010eb8:	81fa      	strh	r2, [r7, #14]
 8010eba:	461a      	mov	r2, r3
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	b2d2      	uxtb	r2, r2
 8010ec4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010ec6:	89fb      	ldrh	r3, [r7, #14]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3710      	adds	r7, #16
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	0801b35c 	.word	0x0801b35c
 8010ed4:	0801b5a8 	.word	0x0801b5a8
 8010ed8:	0801b3bc 	.word	0x0801b3bc

08010edc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b090      	sub	sp, #64	@ 0x40
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010eee:	2208      	movs	r2, #8
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	48b5      	ldr	r0, [pc, #724]	@ (80111c8 <dhcp_parse_reply+0x2ec>)
 8010ef4:	f004 fa1a 	bl	801532c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	895b      	ldrh	r3, [r3, #10]
 8010efc:	2b2b      	cmp	r3, #43	@ 0x2b
 8010efe:	d802      	bhi.n	8010f06 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010f00:	f06f 0301 	mvn.w	r3, #1
 8010f04:	e2a7      	b.n	8011456 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010f0c:	23f0      	movs	r3, #240	@ 0xf0
 8010f0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	891b      	ldrh	r3, [r3, #8]
 8010f14:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010f1a:	e00c      	b.n	8010f36 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1e:	895b      	ldrh	r3, [r3, #10]
 8010f20:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f28:	895b      	ldrh	r3, [r3, #10]
 8010f2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d004      	beq.n	8010f46 <dhcp_parse_reply+0x6a>
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3e:	895b      	ldrh	r3, [r3, #10]
 8010f40:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d2ea      	bcs.n	8010f1c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010f4c:	f06f 0301 	mvn.w	r3, #1
 8010f50:	e281      	b.n	8011456 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010f52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010f54:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010f56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010f58:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010f60:	e239      	b.n	80113d6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010f62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f66:	4413      	add	r3, r2
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010f72:	f04f 33ff 	mov.w	r3, #4294967295
 8010f76:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010f78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f7a:	3302      	adds	r3, #2
 8010f7c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010f7e:	8bfa      	ldrh	r2, [r7, #30]
 8010f80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d202      	bcs.n	8010f8c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010f86:	f06f 0301 	mvn.w	r3, #1
 8010f8a:	e264      	b.n	8011456 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010f8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f8e:	3301      	adds	r3, #1
 8010f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f92:	8952      	ldrh	r2, [r2, #10]
 8010f94:	4293      	cmp	r3, r2
 8010f96:	da07      	bge.n	8010fa8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010f98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f9e:	4413      	add	r3, r2
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010fa6:	e00b      	b.n	8010fc0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d004      	beq.n	8010fba <dhcp_parse_reply+0xde>
 8010fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	e000      	b.n	8010fbc <dhcp_parse_reply+0xe0>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010fc8:	7dfb      	ldrb	r3, [r7, #23]
 8010fca:	2b3b      	cmp	r3, #59	@ 0x3b
 8010fcc:	f200 812c 	bhi.w	8011228 <dhcp_parse_reply+0x34c>
 8010fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8010fd8 <dhcp_parse_reply+0xfc>)
 8010fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fd6:	bf00      	nop
 8010fd8:	080110c9 	.word	0x080110c9
 8010fdc:	080110d9 	.word	0x080110d9
 8010fe0:	08011229 	.word	0x08011229
 8010fe4:	080110fb 	.word	0x080110fb
 8010fe8:	08011229 	.word	0x08011229
 8010fec:	08011229 	.word	0x08011229
 8010ff0:	08011229 	.word	0x08011229
 8010ff4:	08011229 	.word	0x08011229
 8010ff8:	08011229 	.word	0x08011229
 8010ffc:	08011229 	.word	0x08011229
 8011000:	08011229 	.word	0x08011229
 8011004:	08011229 	.word	0x08011229
 8011008:	08011229 	.word	0x08011229
 801100c:	08011229 	.word	0x08011229
 8011010:	08011229 	.word	0x08011229
 8011014:	08011229 	.word	0x08011229
 8011018:	08011229 	.word	0x08011229
 801101c:	08011229 	.word	0x08011229
 8011020:	08011229 	.word	0x08011229
 8011024:	08011229 	.word	0x08011229
 8011028:	08011229 	.word	0x08011229
 801102c:	08011229 	.word	0x08011229
 8011030:	08011229 	.word	0x08011229
 8011034:	08011229 	.word	0x08011229
 8011038:	08011229 	.word	0x08011229
 801103c:	08011229 	.word	0x08011229
 8011040:	08011229 	.word	0x08011229
 8011044:	08011229 	.word	0x08011229
 8011048:	08011229 	.word	0x08011229
 801104c:	08011229 	.word	0x08011229
 8011050:	08011229 	.word	0x08011229
 8011054:	08011229 	.word	0x08011229
 8011058:	08011229 	.word	0x08011229
 801105c:	08011229 	.word	0x08011229
 8011060:	08011229 	.word	0x08011229
 8011064:	08011229 	.word	0x08011229
 8011068:	08011229 	.word	0x08011229
 801106c:	08011229 	.word	0x08011229
 8011070:	08011229 	.word	0x08011229
 8011074:	08011229 	.word	0x08011229
 8011078:	08011229 	.word	0x08011229
 801107c:	08011229 	.word	0x08011229
 8011080:	08011229 	.word	0x08011229
 8011084:	08011229 	.word	0x08011229
 8011088:	08011229 	.word	0x08011229
 801108c:	08011229 	.word	0x08011229
 8011090:	08011229 	.word	0x08011229
 8011094:	08011229 	.word	0x08011229
 8011098:	08011229 	.word	0x08011229
 801109c:	08011229 	.word	0x08011229
 80110a0:	08011229 	.word	0x08011229
 80110a4:	08011127 	.word	0x08011127
 80110a8:	08011149 	.word	0x08011149
 80110ac:	08011185 	.word	0x08011185
 80110b0:	080111a7 	.word	0x080111a7
 80110b4:	08011229 	.word	0x08011229
 80110b8:	08011229 	.word	0x08011229
 80110bc:	08011229 	.word	0x08011229
 80110c0:	080111e5 	.word	0x080111e5
 80110c4:	08011207 	.word	0x08011207
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80110ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80110d6:	e0ab      	b.n	8011230 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110dc:	2b04      	cmp	r3, #4
 80110de:	d009      	beq.n	80110f4 <dhcp_parse_reply+0x218>
 80110e0:	4b3a      	ldr	r3, [pc, #232]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 80110e2:	f240 622e 	movw	r2, #1582	@ 0x62e
 80110e6:	493a      	ldr	r1, [pc, #232]	@ (80111d0 <dhcp_parse_reply+0x2f4>)
 80110e8:	483a      	ldr	r0, [pc, #232]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 80110ea:	f003 ff8b 	bl	8015004 <iprintf>
 80110ee:	f06f 0305 	mvn.w	r3, #5
 80110f2:	e1b0      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80110f4:	2306      	movs	r3, #6
 80110f6:	623b      	str	r3, [r7, #32]
        break;
 80110f8:	e09a      	b.n	8011230 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80110fa:	2304      	movs	r3, #4
 80110fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011100:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011104:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011108:	429a      	cmp	r2, r3
 801110a:	d209      	bcs.n	8011120 <dhcp_parse_reply+0x244>
 801110c:	4b2f      	ldr	r3, [pc, #188]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 801110e:	f240 6233 	movw	r2, #1587	@ 0x633
 8011112:	4931      	ldr	r1, [pc, #196]	@ (80111d8 <dhcp_parse_reply+0x2fc>)
 8011114:	482f      	ldr	r0, [pc, #188]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 8011116:	f003 ff75 	bl	8015004 <iprintf>
 801111a:	f06f 0305 	mvn.w	r3, #5
 801111e:	e19a      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011120:	2307      	movs	r3, #7
 8011122:	623b      	str	r3, [r7, #32]
        break;
 8011124:	e084      	b.n	8011230 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801112a:	2b04      	cmp	r3, #4
 801112c:	d009      	beq.n	8011142 <dhcp_parse_reply+0x266>
 801112e:	4b27      	ldr	r3, [pc, #156]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 8011130:	f240 6241 	movw	r2, #1601	@ 0x641
 8011134:	4926      	ldr	r1, [pc, #152]	@ (80111d0 <dhcp_parse_reply+0x2f4>)
 8011136:	4827      	ldr	r0, [pc, #156]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 8011138:	f003 ff64 	bl	8015004 <iprintf>
 801113c:	f06f 0305 	mvn.w	r3, #5
 8011140:	e189      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011142:	2303      	movs	r3, #3
 8011144:	623b      	str	r3, [r7, #32]
        break;
 8011146:	e073      	b.n	8011230 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801114c:	2b01      	cmp	r3, #1
 801114e:	d009      	beq.n	8011164 <dhcp_parse_reply+0x288>
 8011150:	4b1e      	ldr	r3, [pc, #120]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 8011152:	f240 624f 	movw	r2, #1615	@ 0x64f
 8011156:	4921      	ldr	r1, [pc, #132]	@ (80111dc <dhcp_parse_reply+0x300>)
 8011158:	481e      	ldr	r0, [pc, #120]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 801115a:	f003 ff53 	bl	8015004 <iprintf>
 801115e:	f06f 0305 	mvn.w	r3, #5
 8011162:	e178      	b.n	8011456 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011164:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011166:	2bf0      	cmp	r3, #240	@ 0xf0
 8011168:	d009      	beq.n	801117e <dhcp_parse_reply+0x2a2>
 801116a:	4b18      	ldr	r3, [pc, #96]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 801116c:	f240 6251 	movw	r2, #1617	@ 0x651
 8011170:	491b      	ldr	r1, [pc, #108]	@ (80111e0 <dhcp_parse_reply+0x304>)
 8011172:	4818      	ldr	r0, [pc, #96]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 8011174:	f003 ff46 	bl	8015004 <iprintf>
 8011178:	f06f 0305 	mvn.w	r3, #5
 801117c:	e16b      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801117e:	2300      	movs	r3, #0
 8011180:	623b      	str	r3, [r7, #32]
        break;
 8011182:	e055      	b.n	8011230 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011188:	2b01      	cmp	r3, #1
 801118a:	d009      	beq.n	80111a0 <dhcp_parse_reply+0x2c4>
 801118c:	4b0f      	ldr	r3, [pc, #60]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 801118e:	f240 6255 	movw	r2, #1621	@ 0x655
 8011192:	4912      	ldr	r1, [pc, #72]	@ (80111dc <dhcp_parse_reply+0x300>)
 8011194:	480f      	ldr	r0, [pc, #60]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 8011196:	f003 ff35 	bl	8015004 <iprintf>
 801119a:	f06f 0305 	mvn.w	r3, #5
 801119e:	e15a      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80111a0:	2301      	movs	r3, #1
 80111a2:	623b      	str	r3, [r7, #32]
        break;
 80111a4:	e044      	b.n	8011230 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80111a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111aa:	2b04      	cmp	r3, #4
 80111ac:	d009      	beq.n	80111c2 <dhcp_parse_reply+0x2e6>
 80111ae:	4b07      	ldr	r3, [pc, #28]	@ (80111cc <dhcp_parse_reply+0x2f0>)
 80111b0:	f240 6259 	movw	r2, #1625	@ 0x659
 80111b4:	4906      	ldr	r1, [pc, #24]	@ (80111d0 <dhcp_parse_reply+0x2f4>)
 80111b6:	4807      	ldr	r0, [pc, #28]	@ (80111d4 <dhcp_parse_reply+0x2f8>)
 80111b8:	f003 ff24 	bl	8015004 <iprintf>
 80111bc:	f06f 0305 	mvn.w	r3, #5
 80111c0:	e149      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80111c2:	2302      	movs	r3, #2
 80111c4:	623b      	str	r3, [r7, #32]
        break;
 80111c6:	e033      	b.n	8011230 <dhcp_parse_reply+0x354>
 80111c8:	20008174 	.word	0x20008174
 80111cc:	0801b35c 	.word	0x0801b35c
 80111d0:	0801b5e4 	.word	0x0801b5e4
 80111d4:	0801b3bc 	.word	0x0801b3bc
 80111d8:	0801b5f0 	.word	0x0801b5f0
 80111dc:	0801b604 	.word	0x0801b604
 80111e0:	0801b610 	.word	0x0801b610
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80111e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111e8:	2b04      	cmp	r3, #4
 80111ea:	d009      	beq.n	8011200 <dhcp_parse_reply+0x324>
 80111ec:	4b9c      	ldr	r3, [pc, #624]	@ (8011460 <dhcp_parse_reply+0x584>)
 80111ee:	f240 625d 	movw	r2, #1629	@ 0x65d
 80111f2:	499c      	ldr	r1, [pc, #624]	@ (8011464 <dhcp_parse_reply+0x588>)
 80111f4:	489c      	ldr	r0, [pc, #624]	@ (8011468 <dhcp_parse_reply+0x58c>)
 80111f6:	f003 ff05 	bl	8015004 <iprintf>
 80111fa:	f06f 0305 	mvn.w	r3, #5
 80111fe:	e12a      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011200:	2304      	movs	r3, #4
 8011202:	623b      	str	r3, [r7, #32]
        break;
 8011204:	e014      	b.n	8011230 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801120a:	2b04      	cmp	r3, #4
 801120c:	d009      	beq.n	8011222 <dhcp_parse_reply+0x346>
 801120e:	4b94      	ldr	r3, [pc, #592]	@ (8011460 <dhcp_parse_reply+0x584>)
 8011210:	f240 6261 	movw	r2, #1633	@ 0x661
 8011214:	4993      	ldr	r1, [pc, #588]	@ (8011464 <dhcp_parse_reply+0x588>)
 8011216:	4894      	ldr	r0, [pc, #592]	@ (8011468 <dhcp_parse_reply+0x58c>)
 8011218:	f003 fef4 	bl	8015004 <iprintf>
 801121c:	f06f 0305 	mvn.w	r3, #5
 8011220:	e119      	b.n	8011456 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011222:	2305      	movs	r3, #5
 8011224:	623b      	str	r3, [r7, #32]
        break;
 8011226:	e003      	b.n	8011230 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8011228:	2300      	movs	r3, #0
 801122a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801122e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011230:	7dfb      	ldrb	r3, [r7, #23]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d103      	bne.n	801123e <dhcp_parse_reply+0x362>
      offset++;
 8011236:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011238:	3301      	adds	r3, #1
 801123a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801123c:	e0a1      	b.n	8011382 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801123e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011244:	4413      	add	r3, r2
 8011246:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801124a:	4293      	cmp	r3, r2
 801124c:	dd02      	ble.n	8011254 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801124e:	f06f 0301 	mvn.w	r3, #1
 8011252:	e100      	b.n	8011456 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8011254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011258:	b29a      	uxth	r2, r3
 801125a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801125c:	4413      	add	r3, r2
 801125e:	b29b      	uxth	r3, r3
 8011260:	3302      	adds	r3, #2
 8011262:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8011264:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011268:	2b00      	cmp	r3, #0
 801126a:	f000 808a 	beq.w	8011382 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	2b00      	cmp	r3, #0
 8011276:	db02      	blt.n	801127e <dhcp_parse_reply+0x3a2>
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	2b07      	cmp	r3, #7
 801127c:	dd06      	ble.n	801128c <dhcp_parse_reply+0x3b0>
 801127e:	4b78      	ldr	r3, [pc, #480]	@ (8011460 <dhcp_parse_reply+0x584>)
 8011280:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8011284:	4979      	ldr	r1, [pc, #484]	@ (801146c <dhcp_parse_reply+0x590>)
 8011286:	4878      	ldr	r0, [pc, #480]	@ (8011468 <dhcp_parse_reply+0x58c>)
 8011288:	f003 febc 	bl	8015004 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801128c:	4a78      	ldr	r2, [pc, #480]	@ (8011470 <dhcp_parse_reply+0x594>)
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	4413      	add	r3, r2
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d174      	bne.n	8011382 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8011298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801129c:	2b04      	cmp	r3, #4
 801129e:	bf28      	it	cs
 80112a0:	2304      	movcs	r3, #4
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80112a6:	8bfb      	ldrh	r3, [r7, #30]
 80112a8:	8aba      	ldrh	r2, [r7, #20]
 80112aa:	f107 0108 	add.w	r1, r7, #8
 80112ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112b0:	f7f7 fffa 	bl	80092a8 <pbuf_copy_partial>
 80112b4:	4603      	mov	r3, r0
 80112b6:	461a      	mov	r2, r3
 80112b8:	8abb      	ldrh	r3, [r7, #20]
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d002      	beq.n	80112c4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80112be:	f06f 0301 	mvn.w	r3, #1
 80112c2:	e0c8      	b.n	8011456 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80112c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	d933      	bls.n	8011334 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80112cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112d0:	f003 0303 	and.w	r3, r3, #3
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d009      	beq.n	80112ee <dhcp_parse_reply+0x412>
 80112da:	4b61      	ldr	r3, [pc, #388]	@ (8011460 <dhcp_parse_reply+0x584>)
 80112dc:	f240 6281 	movw	r2, #1665	@ 0x681
 80112e0:	4964      	ldr	r1, [pc, #400]	@ (8011474 <dhcp_parse_reply+0x598>)
 80112e2:	4861      	ldr	r0, [pc, #388]	@ (8011468 <dhcp_parse_reply+0x58c>)
 80112e4:	f003 fe8e 	bl	8015004 <iprintf>
 80112e8:	f06f 0305 	mvn.w	r3, #5
 80112ec:	e0b3      	b.n	8011456 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80112ee:	4a60      	ldr	r2, [pc, #384]	@ (8011470 <dhcp_parse_reply+0x594>)
 80112f0:	6a3b      	ldr	r3, [r7, #32]
 80112f2:	4413      	add	r3, r2
 80112f4:	2201      	movs	r2, #1
 80112f6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7f6 fa62 	bl	80077c4 <lwip_htonl>
 8011300:	4602      	mov	r2, r0
 8011302:	495d      	ldr	r1, [pc, #372]	@ (8011478 <dhcp_parse_reply+0x59c>)
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801130a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801130e:	3b04      	subs	r3, #4
 8011310:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011314:	8bfb      	ldrh	r3, [r7, #30]
 8011316:	3304      	adds	r3, #4
 8011318:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801131a:	8a7a      	ldrh	r2, [r7, #18]
 801131c:	8bfb      	ldrh	r3, [r7, #30]
 801131e:	429a      	cmp	r2, r3
 8011320:	d202      	bcs.n	8011328 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8011322:	f06f 0301 	mvn.w	r3, #1
 8011326:	e096      	b.n	8011456 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8011328:	8a7b      	ldrh	r3, [r7, #18]
 801132a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801132c:	6a3b      	ldr	r3, [r7, #32]
 801132e:	3301      	adds	r3, #1
 8011330:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011332:	e79e      	b.n	8011272 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8011334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011338:	2b04      	cmp	r3, #4
 801133a:	d106      	bne.n	801134a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	4618      	mov	r0, r3
 8011340:	f7f6 fa40 	bl	80077c4 <lwip_htonl>
 8011344:	4603      	mov	r3, r0
 8011346:	60bb      	str	r3, [r7, #8]
 8011348:	e011      	b.n	801136e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801134a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801134e:	2b01      	cmp	r3, #1
 8011350:	d009      	beq.n	8011366 <dhcp_parse_reply+0x48a>
 8011352:	4b43      	ldr	r3, [pc, #268]	@ (8011460 <dhcp_parse_reply+0x584>)
 8011354:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8011358:	4948      	ldr	r1, [pc, #288]	@ (801147c <dhcp_parse_reply+0x5a0>)
 801135a:	4843      	ldr	r0, [pc, #268]	@ (8011468 <dhcp_parse_reply+0x58c>)
 801135c:	f003 fe52 	bl	8015004 <iprintf>
 8011360:	f06f 0305 	mvn.w	r3, #5
 8011364:	e077      	b.n	8011456 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8011366:	f107 0308 	add.w	r3, r7, #8
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801136e:	4a40      	ldr	r2, [pc, #256]	@ (8011470 <dhcp_parse_reply+0x594>)
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	4413      	add	r3, r2
 8011374:	2201      	movs	r2, #1
 8011376:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	493f      	ldr	r1, [pc, #252]	@ (8011478 <dhcp_parse_reply+0x59c>)
 801137c:	6a3b      	ldr	r3, [r7, #32]
 801137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011384:	895b      	ldrh	r3, [r3, #10]
 8011386:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011388:	429a      	cmp	r2, r3
 801138a:	d324      	bcc.n	80113d6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801138c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801138e:	895b      	ldrh	r3, [r3, #10]
 8011390:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011398:	895b      	ldrh	r3, [r3, #10]
 801139a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801139c:	1ad3      	subs	r3, r2, r3
 801139e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80113a0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80113a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d213      	bcs.n	80113d0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80113a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80113ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d109      	bne.n	80113c8 <dhcp_parse_reply+0x4ec>
 80113b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011460 <dhcp_parse_reply+0x584>)
 80113b6:	f240 629d 	movw	r2, #1693	@ 0x69d
 80113ba:	4931      	ldr	r1, [pc, #196]	@ (8011480 <dhcp_parse_reply+0x5a4>)
 80113bc:	482a      	ldr	r0, [pc, #168]	@ (8011468 <dhcp_parse_reply+0x58c>)
 80113be:	f003 fe21 	bl	8015004 <iprintf>
 80113c2:	f06f 0305 	mvn.w	r3, #5
 80113c6:	e046      	b.n	8011456 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80113c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113ce:	e002      	b.n	80113d6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80113d0:	f06f 0301 	mvn.w	r3, #1
 80113d4:	e03f      	b.n	8011456 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80113d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d00a      	beq.n	80113f2 <dhcp_parse_reply+0x516>
 80113dc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80113de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d206      	bcs.n	80113f2 <dhcp_parse_reply+0x516>
 80113e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80113e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80113e8:	4413      	add	r3, r2
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	2bff      	cmp	r3, #255	@ 0xff
 80113ee:	f47f adb8 	bne.w	8010f62 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80113f2:	4b1f      	ldr	r3, [pc, #124]	@ (8011470 <dhcp_parse_reply+0x594>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d018      	beq.n	801142c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80113fa:	4b1f      	ldr	r3, [pc, #124]	@ (8011478 <dhcp_parse_reply+0x59c>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011400:	4b1b      	ldr	r3, [pc, #108]	@ (8011470 <dhcp_parse_reply+0x594>)
 8011402:	2200      	movs	r2, #0
 8011404:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d102      	bne.n	8011412 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801140c:	2301      	movs	r3, #1
 801140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011410:	e00c      	b.n	801142c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2b02      	cmp	r3, #2
 8011416:	d102      	bne.n	801141e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8011418:	2301      	movs	r3, #1
 801141a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801141c:	e006      	b.n	801142c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2b03      	cmp	r3, #3
 8011422:	d103      	bne.n	801142c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8011424:	2301      	movs	r3, #1
 8011426:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8011428:	2301      	movs	r3, #1
 801142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801142c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d006      	beq.n	8011440 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011432:	2300      	movs	r3, #0
 8011434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8011436:	236c      	movs	r3, #108	@ 0x6c
 8011438:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801143a:	23ec      	movs	r3, #236	@ 0xec
 801143c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801143e:	e56a      	b.n	8010f16 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011442:	2b00      	cmp	r3, #0
 8011444:	d006      	beq.n	8011454 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801144a:	232c      	movs	r3, #44	@ 0x2c
 801144c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801144e:	236c      	movs	r3, #108	@ 0x6c
 8011450:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8011452:	e560      	b.n	8010f16 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3740      	adds	r7, #64	@ 0x40
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	0801b35c 	.word	0x0801b35c
 8011464:	0801b5e4 	.word	0x0801b5e4
 8011468:	0801b3bc 	.word	0x0801b3bc
 801146c:	0801b628 	.word	0x0801b628
 8011470:	20008174 	.word	0x20008174
 8011474:	0801b63c 	.word	0x0801b63c
 8011478:	20008154 	.word	0x20008154
 801147c:	0801b654 	.word	0x0801b654
 8011480:	0801b668 	.word	0x0801b668

08011484 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08a      	sub	sp, #40	@ 0x28
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	607a      	str	r2, [r7, #4]
 8011490:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011492:	4b60      	ldr	r3, [pc, #384]	@ (8011614 <dhcp_recv+0x190>)
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011498:	6a3b      	ldr	r3, [r7, #32]
 801149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801149c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 809d 	beq.w	80115e6 <dhcp_recv+0x162>
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	791b      	ldrb	r3, [r3, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 8098 	beq.w	80115e6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	895b      	ldrh	r3, [r3, #10]
 80114ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80114bc:	f240 8095 	bls.w	80115ea <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80114c0:	69bb      	ldr	r3, [r7, #24]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	f040 8092 	bne.w	80115ee <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80114ca:	2300      	movs	r3, #0
 80114cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114d0:	e012      	b.n	80114f8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80114d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114d6:	6a3a      	ldr	r2, [r7, #32]
 80114d8:	4413      	add	r3, r2
 80114da:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80114de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114e2:	69b9      	ldr	r1, [r7, #24]
 80114e4:	440b      	add	r3, r1
 80114e6:	7f1b      	ldrb	r3, [r3, #28]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	f040 8082 	bne.w	80115f2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80114ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114f2:	3301      	adds	r3, #1
 80114f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114f8:	6a3b      	ldr	r3, [r7, #32]
 80114fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80114fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011502:	429a      	cmp	r2, r3
 8011504:	d203      	bcs.n	801150e <dhcp_recv+0x8a>
 8011506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801150a:	2b05      	cmp	r3, #5
 801150c:	d9e1      	bls.n	80114d2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	4618      	mov	r0, r3
 8011514:	f7f6 f956 	bl	80077c4 <lwip_htonl>
 8011518:	4602      	mov	r2, r0
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	429a      	cmp	r2, r3
 8011520:	d169      	bne.n	80115f6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011522:	69f9      	ldr	r1, [r7, #28]
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff fcd9 	bl	8010edc <dhcp_parse_reply>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d164      	bne.n	80115fa <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011530:	4b39      	ldr	r3, [pc, #228]	@ (8011618 <dhcp_recv+0x194>)
 8011532:	785b      	ldrb	r3, [r3, #1]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d062      	beq.n	80115fe <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801153e:	4b37      	ldr	r3, [pc, #220]	@ (801161c <dhcp_recv+0x198>)
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011544:	7cfb      	ldrb	r3, [r7, #19]
 8011546:	2b05      	cmp	r3, #5
 8011548:	d12a      	bne.n	80115a0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	795b      	ldrb	r3, [r3, #5]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d112      	bne.n	8011578 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011552:	6979      	ldr	r1, [r7, #20]
 8011554:	6a38      	ldr	r0, [r7, #32]
 8011556:	f7fe fe1d 	bl	8010194 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801155a:	6a3b      	ldr	r3, [r7, #32]
 801155c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011560:	f003 0308 	and.w	r3, r3, #8
 8011564:	2b00      	cmp	r3, #0
 8011566:	d003      	beq.n	8011570 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011568:	6a38      	ldr	r0, [r7, #32]
 801156a:	f7fe fb8b 	bl	800fc84 <dhcp_check>
 801156e:	e049      	b.n	8011604 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011570:	6a38      	ldr	r0, [r7, #32]
 8011572:	f7ff f86d 	bl	8010650 <dhcp_bind>
 8011576:	e045      	b.n	8011604 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	795b      	ldrb	r3, [r3, #5]
 801157c:	2b03      	cmp	r3, #3
 801157e:	d007      	beq.n	8011590 <dhcp_recv+0x10c>
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	795b      	ldrb	r3, [r3, #5]
 8011584:	2b04      	cmp	r3, #4
 8011586:	d003      	beq.n	8011590 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801158c:	2b05      	cmp	r3, #5
 801158e:	d139      	bne.n	8011604 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011590:	6979      	ldr	r1, [r7, #20]
 8011592:	6a38      	ldr	r0, [r7, #32]
 8011594:	f7fe fdfe 	bl	8010194 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011598:	6a38      	ldr	r0, [r7, #32]
 801159a:	f7ff f859 	bl	8010650 <dhcp_bind>
 801159e:	e031      	b.n	8011604 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80115a0:	7cfb      	ldrb	r3, [r7, #19]
 80115a2:	2b06      	cmp	r3, #6
 80115a4:	d113      	bne.n	80115ce <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d00b      	beq.n	80115c6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80115ae:	69fb      	ldr	r3, [r7, #28]
 80115b0:	795b      	ldrb	r3, [r3, #5]
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d007      	beq.n	80115c6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80115ba:	2b04      	cmp	r3, #4
 80115bc:	d003      	beq.n	80115c6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	795b      	ldrb	r3, [r3, #5]
 80115c2:	2b05      	cmp	r3, #5
 80115c4:	d103      	bne.n	80115ce <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80115c6:	6a38      	ldr	r0, [r7, #32]
 80115c8:	f7fe fb42 	bl	800fc50 <dhcp_handle_nak>
 80115cc:	e01a      	b.n	8011604 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80115ce:	7cfb      	ldrb	r3, [r7, #19]
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d116      	bne.n	8011602 <dhcp_recv+0x17e>
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	795b      	ldrb	r3, [r3, #5]
 80115d8:	2b06      	cmp	r3, #6
 80115da:	d112      	bne.n	8011602 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80115dc:	6979      	ldr	r1, [r7, #20]
 80115de:	6a38      	ldr	r0, [r7, #32]
 80115e0:	f7fe fb84 	bl	800fcec <dhcp_handle_offer>
 80115e4:	e00e      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115e6:	bf00      	nop
 80115e8:	e00c      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115ea:	bf00      	nop
 80115ec:	e00a      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115ee:	bf00      	nop
 80115f0:	e008      	b.n	8011604 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80115f2:	bf00      	nop
 80115f4:	e006      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115f6:	bf00      	nop
 80115f8:	e004      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115fa:	bf00      	nop
 80115fc:	e002      	b.n	8011604 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80115fe:	bf00      	nop
 8011600:	e000      	b.n	8011604 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011602:	bf00      	nop
  pbuf_free(p);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7f7 fc55 	bl	8008eb4 <pbuf_free>
}
 801160a:	bf00      	nop
 801160c:	3728      	adds	r7, #40	@ 0x28
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	200050b8 	.word	0x200050b8
 8011618:	20008174 	.word	0x20008174
 801161c:	20008154 	.word	0x20008154

08011620 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b088      	sub	sp, #32
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	603b      	str	r3, [r7, #0]
 801162c:	4613      	mov	r3, r2
 801162e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d108      	bne.n	8011648 <dhcp_create_msg+0x28>
 8011636:	4b5f      	ldr	r3, [pc, #380]	@ (80117b4 <dhcp_create_msg+0x194>)
 8011638:	f240 7269 	movw	r2, #1897	@ 0x769
 801163c:	495e      	ldr	r1, [pc, #376]	@ (80117b8 <dhcp_create_msg+0x198>)
 801163e:	485f      	ldr	r0, [pc, #380]	@ (80117bc <dhcp_create_msg+0x19c>)
 8011640:	f003 fce0 	bl	8015004 <iprintf>
 8011644:	2300      	movs	r3, #0
 8011646:	e0b1      	b.n	80117ac <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d108      	bne.n	8011660 <dhcp_create_msg+0x40>
 801164e:	4b59      	ldr	r3, [pc, #356]	@ (80117b4 <dhcp_create_msg+0x194>)
 8011650:	f240 726a 	movw	r2, #1898	@ 0x76a
 8011654:	495a      	ldr	r1, [pc, #360]	@ (80117c0 <dhcp_create_msg+0x1a0>)
 8011656:	4859      	ldr	r0, [pc, #356]	@ (80117bc <dhcp_create_msg+0x19c>)
 8011658:	f003 fcd4 	bl	8015004 <iprintf>
 801165c:	2300      	movs	r3, #0
 801165e:	e0a5      	b.n	80117ac <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011660:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011664:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8011668:	2036      	movs	r0, #54	@ 0x36
 801166a:	f7f7 f93f 	bl	80088ec <pbuf_alloc>
 801166e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d101      	bne.n	801167a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011676:	2300      	movs	r3, #0
 8011678:	e098      	b.n	80117ac <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	895b      	ldrh	r3, [r3, #10]
 801167e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8011682:	d206      	bcs.n	8011692 <dhcp_create_msg+0x72>
 8011684:	4b4b      	ldr	r3, [pc, #300]	@ (80117b4 <dhcp_create_msg+0x194>)
 8011686:	f240 7271 	movw	r2, #1905	@ 0x771
 801168a:	494e      	ldr	r1, [pc, #312]	@ (80117c4 <dhcp_create_msg+0x1a4>)
 801168c:	484b      	ldr	r0, [pc, #300]	@ (80117bc <dhcp_create_msg+0x19c>)
 801168e:	f003 fcb9 	bl	8015004 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011692:	79fb      	ldrb	r3, [r7, #7]
 8011694:	2b03      	cmp	r3, #3
 8011696:	d103      	bne.n	80116a0 <dhcp_create_msg+0x80>
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	795b      	ldrb	r3, [r3, #5]
 801169c:	2b03      	cmp	r3, #3
 801169e:	d10d      	bne.n	80116bc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	799b      	ldrb	r3, [r3, #6]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d105      	bne.n	80116b4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80116a8:	f002 fcf6 	bl	8014098 <rand>
 80116ac:	4603      	mov	r3, r0
 80116ae:	461a      	mov	r2, r3
 80116b0:	4b45      	ldr	r3, [pc, #276]	@ (80117c8 <dhcp_create_msg+0x1a8>)
 80116b2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80116b4:	4b44      	ldr	r3, [pc, #272]	@ (80117c8 <dhcp_create_msg+0x1a8>)
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80116c2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80116c6:	2100      	movs	r1, #0
 80116c8:	6978      	ldr	r0, [r7, #20]
 80116ca:	f003 fe2f 	bl	801532c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	2201      	movs	r2, #1
 80116d2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	2201      	movs	r2, #1
 80116d8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7f6 f86b 	bl	80077c4 <lwip_htonl>
 80116ee:	4602      	mov	r2, r0
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80116f4:	79fb      	ldrb	r3, [r7, #7]
 80116f6:	2b08      	cmp	r3, #8
 80116f8:	d010      	beq.n	801171c <dhcp_create_msg+0xfc>
 80116fa:	79fb      	ldrb	r3, [r7, #7]
 80116fc:	2b04      	cmp	r3, #4
 80116fe:	d00d      	beq.n	801171c <dhcp_create_msg+0xfc>
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	2b07      	cmp	r3, #7
 8011704:	d00a      	beq.n	801171c <dhcp_create_msg+0xfc>
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	2b03      	cmp	r3, #3
 801170a:	d10c      	bne.n	8011726 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011710:	2b05      	cmp	r3, #5
 8011712:	d003      	beq.n	801171c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	795b      	ldrb	r3, [r3, #5]
 8011718:	2b04      	cmp	r3, #4
 801171a:	d104      	bne.n	8011726 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	3304      	adds	r3, #4
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011726:	2300      	movs	r3, #0
 8011728:	83fb      	strh	r3, [r7, #30]
 801172a:	e00c      	b.n	8011746 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801172c:	8bfa      	ldrh	r2, [r7, #30]
 801172e:	8bfb      	ldrh	r3, [r7, #30]
 8011730:	68f9      	ldr	r1, [r7, #12]
 8011732:	440a      	add	r2, r1
 8011734:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8011738:	697a      	ldr	r2, [r7, #20]
 801173a:	4413      	add	r3, r2
 801173c:	460a      	mov	r2, r1
 801173e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011740:	8bfb      	ldrh	r3, [r7, #30]
 8011742:	3301      	adds	r3, #1
 8011744:	83fb      	strh	r3, [r7, #30]
 8011746:	8bfb      	ldrh	r3, [r7, #30]
 8011748:	2b05      	cmp	r3, #5
 801174a:	d9ef      	bls.n	801172c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	2200      	movs	r2, #0
 8011750:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8011758:	2200      	movs	r2, #0
 801175a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801175e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8011762:	2200      	movs	r2, #0
 8011764:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8011768:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801176c:	2200      	movs	r2, #0
 801176e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011772:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801177c:	2301      	movs	r3, #1
 801177e:	2235      	movs	r2, #53	@ 0x35
 8011780:	2000      	movs	r0, #0
 8011782:	f7ff fadb 	bl	8010d3c <dhcp_option>
 8011786:	4603      	mov	r3, r0
 8011788:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011790:	79fa      	ldrb	r2, [r7, #7]
 8011792:	8a7b      	ldrh	r3, [r7, #18]
 8011794:	4618      	mov	r0, r3
 8011796:	f7ff fb05 	bl	8010da4 <dhcp_option_byte>
 801179a:	4603      	mov	r3, r0
 801179c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d002      	beq.n	80117aa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	8a7a      	ldrh	r2, [r7, #18]
 80117a8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80117aa:	69bb      	ldr	r3, [r7, #24]
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3720      	adds	r7, #32
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	0801b35c 	.word	0x0801b35c
 80117b8:	0801b67c 	.word	0x0801b67c
 80117bc:	0801b3bc 	.word	0x0801b3bc
 80117c0:	0801b69c 	.word	0x0801b69c
 80117c4:	0801b6bc 	.word	0x0801b6bc
 80117c8:	20008184 	.word	0x20008184

080117cc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	4603      	mov	r3, r0
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80117da:	89fb      	ldrh	r3, [r7, #14]
 80117dc:	1c5a      	adds	r2, r3, #1
 80117de:	81fa      	strh	r2, [r7, #14]
 80117e0:	461a      	mov	r2, r3
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	4413      	add	r3, r2
 80117e6:	22ff      	movs	r2, #255	@ 0xff
 80117e8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80117ea:	e007      	b.n	80117fc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80117ec:	89fb      	ldrh	r3, [r7, #14]
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	81fa      	strh	r2, [r7, #14]
 80117f2:	461a      	mov	r2, r3
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	4413      	add	r3, r2
 80117f8:	2200      	movs	r2, #0
 80117fa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80117fc:	89fb      	ldrh	r3, [r7, #14]
 80117fe:	2b43      	cmp	r3, #67	@ 0x43
 8011800:	d904      	bls.n	801180c <dhcp_option_trailer+0x40>
 8011802:	89fb      	ldrh	r3, [r7, #14]
 8011804:	f003 0303 	and.w	r3, r3, #3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <dhcp_option_trailer+0x46>
 801180c:	89fb      	ldrh	r3, [r7, #14]
 801180e:	2b43      	cmp	r3, #67	@ 0x43
 8011810:	d9ec      	bls.n	80117ec <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011812:	89fb      	ldrh	r3, [r7, #14]
 8011814:	33f0      	adds	r3, #240	@ 0xf0
 8011816:	b29b      	uxth	r3, r3
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7f7 f9c4 	bl	8008ba8 <pbuf_realloc>
}
 8011820:	bf00      	nop
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011828:	b480      	push	{r7}
 801182a:	b085      	sub	sp, #20
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d017      	beq.n	8011866 <dhcp_supplied_address+0x3e>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801183a:	2b00      	cmp	r3, #0
 801183c:	d013      	beq.n	8011866 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011842:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	795b      	ldrb	r3, [r3, #5]
 8011848:	2b0a      	cmp	r3, #10
 801184a:	d007      	beq.n	801185c <dhcp_supplied_address+0x34>
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	795b      	ldrb	r3, [r3, #5]
 8011850:	2b05      	cmp	r3, #5
 8011852:	d003      	beq.n	801185c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011858:	2b04      	cmp	r3, #4
 801185a:	d101      	bne.n	8011860 <dhcp_supplied_address+0x38>
 801185c:	2301      	movs	r3, #1
 801185e:	e000      	b.n	8011862 <dhcp_supplied_address+0x3a>
 8011860:	2300      	movs	r3, #0
 8011862:	b2db      	uxtb	r3, r3
 8011864:	e000      	b.n	8011868 <dhcp_supplied_address+0x40>
  }
  return 0;
 8011866:	2300      	movs	r3, #0
}
 8011868:	4618      	mov	r0, r3
 801186a:	3714      	adds	r7, #20
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801187c:	4915      	ldr	r1, [pc, #84]	@ (80118d4 <etharp_free_entry+0x60>)
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	4613      	mov	r3, r2
 8011882:	005b      	lsls	r3, r3, #1
 8011884:	4413      	add	r3, r2
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	440b      	add	r3, r1
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d013      	beq.n	80118b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011890:	4910      	ldr	r1, [pc, #64]	@ (80118d4 <etharp_free_entry+0x60>)
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	4613      	mov	r3, r2
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	4413      	add	r3, r2
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	440b      	add	r3, r1
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7f7 fb07 	bl	8008eb4 <pbuf_free>
    arp_table[i].q = NULL;
 80118a6:	490b      	ldr	r1, [pc, #44]	@ (80118d4 <etharp_free_entry+0x60>)
 80118a8:	687a      	ldr	r2, [r7, #4]
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	440b      	add	r3, r1
 80118b4:	2200      	movs	r2, #0
 80118b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80118b8:	4906      	ldr	r1, [pc, #24]	@ (80118d4 <etharp_free_entry+0x60>)
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	4613      	mov	r3, r2
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	4413      	add	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	440b      	add	r3, r1
 80118c6:	3314      	adds	r3, #20
 80118c8:	2200      	movs	r2, #0
 80118ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80118cc:	bf00      	nop
 80118ce:	3708      	adds	r7, #8
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}
 80118d4:	20008188 	.word	0x20008188

080118d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118de:	2300      	movs	r3, #0
 80118e0:	607b      	str	r3, [r7, #4]
 80118e2:	e096      	b.n	8011a12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80118e4:	494f      	ldr	r1, [pc, #316]	@ (8011a24 <etharp_tmr+0x14c>)
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	4613      	mov	r3, r2
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	440b      	add	r3, r1
 80118f2:	3314      	adds	r3, #20
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80118f8:	78fb      	ldrb	r3, [r7, #3]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 8086 	beq.w	8011a0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011900:	4948      	ldr	r1, [pc, #288]	@ (8011a24 <etharp_tmr+0x14c>)
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	4613      	mov	r3, r2
 8011906:	005b      	lsls	r3, r3, #1
 8011908:	4413      	add	r3, r2
 801190a:	00db      	lsls	r3, r3, #3
 801190c:	440b      	add	r3, r1
 801190e:	3312      	adds	r3, #18
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	3301      	adds	r3, #1
 8011914:	b298      	uxth	r0, r3
 8011916:	4943      	ldr	r1, [pc, #268]	@ (8011a24 <etharp_tmr+0x14c>)
 8011918:	687a      	ldr	r2, [r7, #4]
 801191a:	4613      	mov	r3, r2
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	4413      	add	r3, r2
 8011920:	00db      	lsls	r3, r3, #3
 8011922:	440b      	add	r3, r1
 8011924:	3312      	adds	r3, #18
 8011926:	4602      	mov	r2, r0
 8011928:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801192a:	493e      	ldr	r1, [pc, #248]	@ (8011a24 <etharp_tmr+0x14c>)
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	4613      	mov	r3, r2
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	440b      	add	r3, r1
 8011938:	3312      	adds	r3, #18
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011940:	d215      	bcs.n	801196e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011942:	4938      	ldr	r1, [pc, #224]	@ (8011a24 <etharp_tmr+0x14c>)
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	4613      	mov	r3, r2
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	4413      	add	r3, r2
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	3314      	adds	r3, #20
 8011952:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011954:	2b01      	cmp	r3, #1
 8011956:	d10e      	bne.n	8011976 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011958:	4932      	ldr	r1, [pc, #200]	@ (8011a24 <etharp_tmr+0x14c>)
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	4613      	mov	r3, r2
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	4413      	add	r3, r2
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	440b      	add	r3, r1
 8011966:	3312      	adds	r3, #18
 8011968:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801196a:	2b04      	cmp	r3, #4
 801196c:	d903      	bls.n	8011976 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f7ff ff80 	bl	8011874 <etharp_free_entry>
 8011974:	e04a      	b.n	8011a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011976:	492b      	ldr	r1, [pc, #172]	@ (8011a24 <etharp_tmr+0x14c>)
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	4613      	mov	r3, r2
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	4413      	add	r3, r2
 8011980:	00db      	lsls	r3, r3, #3
 8011982:	440b      	add	r3, r1
 8011984:	3314      	adds	r3, #20
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	2b03      	cmp	r3, #3
 801198a:	d10a      	bne.n	80119a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801198c:	4925      	ldr	r1, [pc, #148]	@ (8011a24 <etharp_tmr+0x14c>)
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	4613      	mov	r3, r2
 8011992:	005b      	lsls	r3, r3, #1
 8011994:	4413      	add	r3, r2
 8011996:	00db      	lsls	r3, r3, #3
 8011998:	440b      	add	r3, r1
 801199a:	3314      	adds	r3, #20
 801199c:	2204      	movs	r2, #4
 801199e:	701a      	strb	r2, [r3, #0]
 80119a0:	e034      	b.n	8011a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80119a2:	4920      	ldr	r1, [pc, #128]	@ (8011a24 <etharp_tmr+0x14c>)
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	4613      	mov	r3, r2
 80119a8:	005b      	lsls	r3, r3, #1
 80119aa:	4413      	add	r3, r2
 80119ac:	00db      	lsls	r3, r3, #3
 80119ae:	440b      	add	r3, r1
 80119b0:	3314      	adds	r3, #20
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	2b04      	cmp	r3, #4
 80119b6:	d10a      	bne.n	80119ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80119b8:	491a      	ldr	r1, [pc, #104]	@ (8011a24 <etharp_tmr+0x14c>)
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	4613      	mov	r3, r2
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	4413      	add	r3, r2
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	440b      	add	r3, r1
 80119c6:	3314      	adds	r3, #20
 80119c8:	2202      	movs	r2, #2
 80119ca:	701a      	strb	r2, [r3, #0]
 80119cc:	e01e      	b.n	8011a0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80119ce:	4915      	ldr	r1, [pc, #84]	@ (8011a24 <etharp_tmr+0x14c>)
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	4613      	mov	r3, r2
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	4413      	add	r3, r2
 80119d8:	00db      	lsls	r3, r3, #3
 80119da:	440b      	add	r3, r1
 80119dc:	3314      	adds	r3, #20
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d113      	bne.n	8011a0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80119e4:	490f      	ldr	r1, [pc, #60]	@ (8011a24 <etharp_tmr+0x14c>)
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3308      	adds	r3, #8
 80119f4:	6818      	ldr	r0, [r3, #0]
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	4613      	mov	r3, r2
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	4413      	add	r3, r2
 80119fe:	00db      	lsls	r3, r3, #3
 8011a00:	4a08      	ldr	r2, [pc, #32]	@ (8011a24 <etharp_tmr+0x14c>)
 8011a02:	4413      	add	r3, r2
 8011a04:	3304      	adds	r3, #4
 8011a06:	4619      	mov	r1, r3
 8011a08:	f000 fe72 	bl	80126f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	3301      	adds	r3, #1
 8011a10:	607b      	str	r3, [r7, #4]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2b09      	cmp	r3, #9
 8011a16:	f77f af65 	ble.w	80118e4 <etharp_tmr+0xc>
      }
    }
  }
}
 8011a1a:	bf00      	nop
 8011a1c:	bf00      	nop
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	20008188 	.word	0x20008188

08011a28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b08a      	sub	sp, #40	@ 0x28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	460b      	mov	r3, r1
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011a36:	230a      	movs	r3, #10
 8011a38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011a3a:	230a      	movs	r3, #10
 8011a3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011a3e:	230a      	movs	r3, #10
 8011a40:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8011a42:	2300      	movs	r3, #0
 8011a44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011a46:	230a      	movs	r3, #10
 8011a48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	83bb      	strh	r3, [r7, #28]
 8011a4e:	2300      	movs	r3, #0
 8011a50:	837b      	strh	r3, [r7, #26]
 8011a52:	2300      	movs	r3, #0
 8011a54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a56:	2300      	movs	r3, #0
 8011a58:	843b      	strh	r3, [r7, #32]
 8011a5a:	e0ae      	b.n	8011bba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011a5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a60:	49a6      	ldr	r1, [pc, #664]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011a62:	4613      	mov	r3, r2
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	4413      	add	r3, r2
 8011a68:	00db      	lsls	r3, r3, #3
 8011a6a:	440b      	add	r3, r1
 8011a6c:	3314      	adds	r3, #20
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011a72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011a76:	2b0a      	cmp	r3, #10
 8011a78:	d105      	bne.n	8011a86 <etharp_find_entry+0x5e>
 8011a7a:	7dfb      	ldrb	r3, [r7, #23]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d102      	bne.n	8011a86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011a80:	8c3b      	ldrh	r3, [r7, #32]
 8011a82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011a84:	e095      	b.n	8011bb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011a86:	7dfb      	ldrb	r3, [r7, #23]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 8092 	beq.w	8011bb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011a8e:	7dfb      	ldrb	r3, [r7, #23]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d009      	beq.n	8011aa8 <etharp_find_entry+0x80>
 8011a94:	7dfb      	ldrb	r3, [r7, #23]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d806      	bhi.n	8011aa8 <etharp_find_entry+0x80>
 8011a9a:	4b99      	ldr	r3, [pc, #612]	@ (8011d00 <etharp_find_entry+0x2d8>)
 8011a9c:	f240 1223 	movw	r2, #291	@ 0x123
 8011aa0:	4998      	ldr	r1, [pc, #608]	@ (8011d04 <etharp_find_entry+0x2dc>)
 8011aa2:	4899      	ldr	r0, [pc, #612]	@ (8011d08 <etharp_find_entry+0x2e0>)
 8011aa4:	f003 faae 	bl	8015004 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d020      	beq.n	8011af0 <etharp_find_entry+0xc8>
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6819      	ldr	r1, [r3, #0]
 8011ab2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ab6:	4891      	ldr	r0, [pc, #580]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011ab8:	4613      	mov	r3, r2
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	4413      	add	r3, r2
 8011abe:	00db      	lsls	r3, r3, #3
 8011ac0:	4403      	add	r3, r0
 8011ac2:	3304      	adds	r3, #4
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4299      	cmp	r1, r3
 8011ac8:	d112      	bne.n	8011af0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d00c      	beq.n	8011aea <etharp_find_entry+0xc2>
 8011ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ad4:	4989      	ldr	r1, [pc, #548]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	005b      	lsls	r3, r3, #1
 8011ada:	4413      	add	r3, r2
 8011adc:	00db      	lsls	r3, r3, #3
 8011ade:	440b      	add	r3, r1
 8011ae0:	3308      	adds	r3, #8
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d102      	bne.n	8011af0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011aea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011aee:	e100      	b.n	8011cf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011af0:	7dfb      	ldrb	r3, [r7, #23]
 8011af2:	2b01      	cmp	r3, #1
 8011af4:	d140      	bne.n	8011b78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011afa:	4980      	ldr	r1, [pc, #512]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011afc:	4613      	mov	r3, r2
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	4413      	add	r3, r2
 8011b02:	00db      	lsls	r3, r3, #3
 8011b04:	440b      	add	r3, r1
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d01a      	beq.n	8011b42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011b0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b10:	497a      	ldr	r1, [pc, #488]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011b12:	4613      	mov	r3, r2
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	4413      	add	r3, r2
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	440b      	add	r3, r1
 8011b1c:	3312      	adds	r3, #18
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	8bba      	ldrh	r2, [r7, #28]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d845      	bhi.n	8011bb2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011b26:	8c3b      	ldrh	r3, [r7, #32]
 8011b28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011b2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b2e:	4973      	ldr	r1, [pc, #460]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011b30:	4613      	mov	r3, r2
 8011b32:	005b      	lsls	r3, r3, #1
 8011b34:	4413      	add	r3, r2
 8011b36:	00db      	lsls	r3, r3, #3
 8011b38:	440b      	add	r3, r1
 8011b3a:	3312      	adds	r3, #18
 8011b3c:	881b      	ldrh	r3, [r3, #0]
 8011b3e:	83bb      	strh	r3, [r7, #28]
 8011b40:	e037      	b.n	8011bb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b46:	496d      	ldr	r1, [pc, #436]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011b48:	4613      	mov	r3, r2
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	4413      	add	r3, r2
 8011b4e:	00db      	lsls	r3, r3, #3
 8011b50:	440b      	add	r3, r1
 8011b52:	3312      	adds	r3, #18
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	8b7a      	ldrh	r2, [r7, #26]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d82a      	bhi.n	8011bb2 <etharp_find_entry+0x18a>
            old_pending = i;
 8011b5c:	8c3b      	ldrh	r3, [r7, #32]
 8011b5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b64:	4965      	ldr	r1, [pc, #404]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011b66:	4613      	mov	r3, r2
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	4413      	add	r3, r2
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	440b      	add	r3, r1
 8011b70:	3312      	adds	r3, #18
 8011b72:	881b      	ldrh	r3, [r3, #0]
 8011b74:	837b      	strh	r3, [r7, #26]
 8011b76:	e01c      	b.n	8011bb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011b78:	7dfb      	ldrb	r3, [r7, #23]
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d919      	bls.n	8011bb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b82:	495e      	ldr	r1, [pc, #376]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011b84:	4613      	mov	r3, r2
 8011b86:	005b      	lsls	r3, r3, #1
 8011b88:	4413      	add	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3312      	adds	r3, #18
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	8b3a      	ldrh	r2, [r7, #24]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d80c      	bhi.n	8011bb2 <etharp_find_entry+0x18a>
            old_stable = i;
 8011b98:	8c3b      	ldrh	r3, [r7, #32]
 8011b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8011b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ba0:	4956      	ldr	r1, [pc, #344]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011ba2:	4613      	mov	r3, r2
 8011ba4:	005b      	lsls	r3, r3, #1
 8011ba6:	4413      	add	r3, r2
 8011ba8:	00db      	lsls	r3, r3, #3
 8011baa:	440b      	add	r3, r1
 8011bac:	3312      	adds	r3, #18
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bb2:	8c3b      	ldrh	r3, [r7, #32]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	843b      	strh	r3, [r7, #32]
 8011bba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bbe:	2b09      	cmp	r3, #9
 8011bc0:	f77f af4c 	ble.w	8011a5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011bc4:	7afb      	ldrb	r3, [r7, #11]
 8011bc6:	f003 0302 	and.w	r3, r3, #2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d108      	bne.n	8011be0 <etharp_find_entry+0x1b8>
 8011bce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011bd2:	2b0a      	cmp	r3, #10
 8011bd4:	d107      	bne.n	8011be6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011bd6:	7afb      	ldrb	r3, [r7, #11]
 8011bd8:	f003 0301 	and.w	r3, r3, #1
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d102      	bne.n	8011be6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011be0:	f04f 33ff 	mov.w	r3, #4294967295
 8011be4:	e085      	b.n	8011cf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011be6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011bea:	2b09      	cmp	r3, #9
 8011bec:	dc02      	bgt.n	8011bf4 <etharp_find_entry+0x1cc>
    i = empty;
 8011bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bf0:	843b      	strh	r3, [r7, #32]
 8011bf2:	e039      	b.n	8011c68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011bf4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011bf8:	2b09      	cmp	r3, #9
 8011bfa:	dc14      	bgt.n	8011c26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011bfe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c04:	493d      	ldr	r1, [pc, #244]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011c06:	4613      	mov	r3, r2
 8011c08:	005b      	lsls	r3, r3, #1
 8011c0a:	4413      	add	r3, r2
 8011c0c:	00db      	lsls	r3, r3, #3
 8011c0e:	440b      	add	r3, r1
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d018      	beq.n	8011c48 <etharp_find_entry+0x220>
 8011c16:	4b3a      	ldr	r3, [pc, #232]	@ (8011d00 <etharp_find_entry+0x2d8>)
 8011c18:	f240 126d 	movw	r2, #365	@ 0x16d
 8011c1c:	493b      	ldr	r1, [pc, #236]	@ (8011d0c <etharp_find_entry+0x2e4>)
 8011c1e:	483a      	ldr	r0, [pc, #232]	@ (8011d08 <etharp_find_entry+0x2e0>)
 8011c20:	f003 f9f0 	bl	8015004 <iprintf>
 8011c24:	e010      	b.n	8011c48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011c26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011c2a:	2b09      	cmp	r3, #9
 8011c2c:	dc02      	bgt.n	8011c34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011c2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011c30:	843b      	strh	r3, [r7, #32]
 8011c32:	e009      	b.n	8011c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011c34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c38:	2b09      	cmp	r3, #9
 8011c3a:	dc02      	bgt.n	8011c42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011c3c:	8bfb      	ldrh	r3, [r7, #30]
 8011c3e:	843b      	strh	r3, [r7, #32]
 8011c40:	e002      	b.n	8011c48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011c42:	f04f 33ff 	mov.w	r3, #4294967295
 8011c46:	e054      	b.n	8011cf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011c48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c4c:	2b09      	cmp	r3, #9
 8011c4e:	dd06      	ble.n	8011c5e <etharp_find_entry+0x236>
 8011c50:	4b2b      	ldr	r3, [pc, #172]	@ (8011d00 <etharp_find_entry+0x2d8>)
 8011c52:	f240 127f 	movw	r2, #383	@ 0x17f
 8011c56:	492e      	ldr	r1, [pc, #184]	@ (8011d10 <etharp_find_entry+0x2e8>)
 8011c58:	482b      	ldr	r0, [pc, #172]	@ (8011d08 <etharp_find_entry+0x2e0>)
 8011c5a:	f003 f9d3 	bl	8015004 <iprintf>
    etharp_free_entry(i);
 8011c5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7ff fe06 	bl	8011874 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011c68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011c6c:	2b09      	cmp	r3, #9
 8011c6e:	dd06      	ble.n	8011c7e <etharp_find_entry+0x256>
 8011c70:	4b23      	ldr	r3, [pc, #140]	@ (8011d00 <etharp_find_entry+0x2d8>)
 8011c72:	f240 1283 	movw	r2, #387	@ 0x183
 8011c76:	4926      	ldr	r1, [pc, #152]	@ (8011d10 <etharp_find_entry+0x2e8>)
 8011c78:	4823      	ldr	r0, [pc, #140]	@ (8011d08 <etharp_find_entry+0x2e0>)
 8011c7a:	f003 f9c3 	bl	8015004 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011c7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c82:	491e      	ldr	r1, [pc, #120]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011c84:	4613      	mov	r3, r2
 8011c86:	005b      	lsls	r3, r3, #1
 8011c88:	4413      	add	r3, r2
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	440b      	add	r3, r1
 8011c8e:	3314      	adds	r3, #20
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d006      	beq.n	8011ca4 <etharp_find_entry+0x27c>
 8011c96:	4b1a      	ldr	r3, [pc, #104]	@ (8011d00 <etharp_find_entry+0x2d8>)
 8011c98:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011c9c:	491d      	ldr	r1, [pc, #116]	@ (8011d14 <etharp_find_entry+0x2ec>)
 8011c9e:	481a      	ldr	r0, [pc, #104]	@ (8011d08 <etharp_find_entry+0x2e0>)
 8011ca0:	f003 f9b0 	bl	8015004 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d00b      	beq.n	8011cc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011caa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	6819      	ldr	r1, [r3, #0]
 8011cb2:	4812      	ldr	r0, [pc, #72]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	005b      	lsls	r3, r3, #1
 8011cb8:	4413      	add	r3, r2
 8011cba:	00db      	lsls	r3, r3, #3
 8011cbc:	4403      	add	r3, r0
 8011cbe:	3304      	adds	r3, #4
 8011cc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011cc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cc6:	490d      	ldr	r1, [pc, #52]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011cc8:	4613      	mov	r3, r2
 8011cca:	005b      	lsls	r3, r3, #1
 8011ccc:	4413      	add	r3, r2
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	440b      	add	r3, r1
 8011cd2:	3312      	adds	r3, #18
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011cd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cdc:	4907      	ldr	r1, [pc, #28]	@ (8011cfc <etharp_find_entry+0x2d4>)
 8011cde:	4613      	mov	r3, r2
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	4413      	add	r3, r2
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	440b      	add	r3, r1
 8011ce8:	3308      	adds	r3, #8
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3728      	adds	r7, #40	@ 0x28
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	20008188 	.word	0x20008188
 8011d00:	0801b6fc 	.word	0x0801b6fc
 8011d04:	0801b734 	.word	0x0801b734
 8011d08:	0801b774 	.word	0x0801b774
 8011d0c:	0801b79c 	.word	0x0801b79c
 8011d10:	0801b7b4 	.word	0x0801b7b4
 8011d14:	0801b7c8 	.word	0x0801b7c8

08011d18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af02      	add	r7, sp, #8
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011d2c:	2b06      	cmp	r3, #6
 8011d2e:	d006      	beq.n	8011d3e <etharp_update_arp_entry+0x26>
 8011d30:	4b48      	ldr	r3, [pc, #288]	@ (8011e54 <etharp_update_arp_entry+0x13c>)
 8011d32:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011d36:	4948      	ldr	r1, [pc, #288]	@ (8011e58 <etharp_update_arp_entry+0x140>)
 8011d38:	4848      	ldr	r0, [pc, #288]	@ (8011e5c <etharp_update_arp_entry+0x144>)
 8011d3a:	f003 f963 	bl	8015004 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d012      	beq.n	8011d6a <etharp_update_arp_entry+0x52>
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00e      	beq.n	8011d6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68f9      	ldr	r1, [r7, #12]
 8011d52:	4618      	mov	r0, r3
 8011d54:	f001 f920 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8011d58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d105      	bne.n	8011d6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d66:	2be0      	cmp	r3, #224	@ 0xe0
 8011d68:	d102      	bne.n	8011d70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011d6a:	f06f 030f 	mvn.w	r3, #15
 8011d6e:	e06c      	b.n	8011e4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011d70:	78fb      	ldrb	r3, [r7, #3]
 8011d72:	68fa      	ldr	r2, [r7, #12]
 8011d74:	4619      	mov	r1, r3
 8011d76:	68b8      	ldr	r0, [r7, #8]
 8011d78:	f7ff fe56 	bl	8011a28 <etharp_find_entry>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011d80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	da02      	bge.n	8011d8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011d88:	8afb      	ldrh	r3, [r7, #22]
 8011d8a:	b25b      	sxtb	r3, r3
 8011d8c:	e05d      	b.n	8011e4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d92:	4933      	ldr	r1, [pc, #204]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011d94:	4613      	mov	r3, r2
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	4413      	add	r3, r2
 8011d9a:	00db      	lsls	r3, r3, #3
 8011d9c:	440b      	add	r3, r1
 8011d9e:	3314      	adds	r3, #20
 8011da0:	2202      	movs	r2, #2
 8011da2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011da4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011da8:	492d      	ldr	r1, [pc, #180]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011daa:	4613      	mov	r3, r2
 8011dac:	005b      	lsls	r3, r3, #1
 8011dae:	4413      	add	r3, r2
 8011db0:	00db      	lsls	r3, r3, #3
 8011db2:	440b      	add	r3, r1
 8011db4:	3308      	adds	r3, #8
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011dba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	4413      	add	r3, r2
 8011dc4:	00db      	lsls	r3, r3, #3
 8011dc6:	3308      	adds	r3, #8
 8011dc8:	4a25      	ldr	r2, [pc, #148]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011dca:	4413      	add	r3, r2
 8011dcc:	3304      	adds	r3, #4
 8011dce:	2206      	movs	r2, #6
 8011dd0:	6879      	ldr	r1, [r7, #4]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f003 fb3b 	bl	801544e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011dd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ddc:	4920      	ldr	r1, [pc, #128]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011dde:	4613      	mov	r3, r2
 8011de0:	005b      	lsls	r3, r3, #1
 8011de2:	4413      	add	r3, r2
 8011de4:	00db      	lsls	r3, r3, #3
 8011de6:	440b      	add	r3, r1
 8011de8:	3312      	adds	r3, #18
 8011dea:	2200      	movs	r2, #0
 8011dec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011dee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011df2:	491b      	ldr	r1, [pc, #108]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011df4:	4613      	mov	r3, r2
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	4413      	add	r3, r2
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	440b      	add	r3, r1
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d021      	beq.n	8011e48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e08:	4915      	ldr	r1, [pc, #84]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	4413      	add	r3, r2
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	440b      	add	r3, r1
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011e18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011e1c:	4910      	ldr	r1, [pc, #64]	@ (8011e60 <etharp_update_arp_entry+0x148>)
 8011e1e:	4613      	mov	r3, r2
 8011e20:	005b      	lsls	r3, r3, #1
 8011e22:	4413      	add	r3, r2
 8011e24:	00db      	lsls	r3, r3, #3
 8011e26:	440b      	add	r3, r1
 8011e28:	2200      	movs	r2, #0
 8011e2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6939      	ldr	r1, [r7, #16]
 8011e3c:	68f8      	ldr	r0, [r7, #12]
 8011e3e:	f002 f8e3 	bl	8014008 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011e42:	6938      	ldr	r0, [r7, #16]
 8011e44:	f7f7 f836 	bl	8008eb4 <pbuf_free>
  }
  return ERR_OK;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3718      	adds	r7, #24
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	0801b6fc 	.word	0x0801b6fc
 8011e58:	0801b7f4 	.word	0x0801b7f4
 8011e5c:	0801b774 	.word	0x0801b774
 8011e60:	20008188 	.word	0x20008188

08011e64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	60fb      	str	r3, [r7, #12]
 8011e70:	e01e      	b.n	8011eb0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011e72:	4913      	ldr	r1, [pc, #76]	@ (8011ec0 <etharp_cleanup_netif+0x5c>)
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	4613      	mov	r3, r2
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	4413      	add	r3, r2
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	440b      	add	r3, r1
 8011e80:	3314      	adds	r3, #20
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011e86:	7afb      	ldrb	r3, [r7, #11]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d00e      	beq.n	8011eaa <etharp_cleanup_netif+0x46>
 8011e8c:	490c      	ldr	r1, [pc, #48]	@ (8011ec0 <etharp_cleanup_netif+0x5c>)
 8011e8e:	68fa      	ldr	r2, [r7, #12]
 8011e90:	4613      	mov	r3, r2
 8011e92:	005b      	lsls	r3, r3, #1
 8011e94:	4413      	add	r3, r2
 8011e96:	00db      	lsls	r3, r3, #3
 8011e98:	440b      	add	r3, r1
 8011e9a:	3308      	adds	r3, #8
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d102      	bne.n	8011eaa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f7ff fce5 	bl	8011874 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	3301      	adds	r3, #1
 8011eae:	60fb      	str	r3, [r7, #12]
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	2b09      	cmp	r3, #9
 8011eb4:	dddd      	ble.n	8011e72 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011eb6:	bf00      	nop
 8011eb8:	bf00      	nop
 8011eba:	3710      	adds	r7, #16
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	20008188 	.word	0x20008188

08011ec4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011ec4:	b5b0      	push	{r4, r5, r7, lr}
 8011ec6:	b08a      	sub	sp, #40	@ 0x28
 8011ec8:	af04      	add	r7, sp, #16
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d107      	bne.n	8011ee4 <etharp_input+0x20>
 8011ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8011fd4 <etharp_input+0x110>)
 8011ed6:	f240 228a 	movw	r2, #650	@ 0x28a
 8011eda:	493f      	ldr	r1, [pc, #252]	@ (8011fd8 <etharp_input+0x114>)
 8011edc:	483f      	ldr	r0, [pc, #252]	@ (8011fdc <etharp_input+0x118>)
 8011ede:	f003 f891 	bl	8015004 <iprintf>
 8011ee2:	e074      	b.n	8011fce <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ef4:	d10c      	bne.n	8011f10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011efa:	2b06      	cmp	r3, #6
 8011efc:	d108      	bne.n	8011f10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011f02:	2b04      	cmp	r3, #4
 8011f04:	d104      	bne.n	8011f10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	885b      	ldrh	r3, [r3, #2]
 8011f0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011f0c:	2b08      	cmp	r3, #8
 8011f0e:	d003      	beq.n	8011f18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7f6 ffcf 	bl	8008eb4 <pbuf_free>
    return;
 8011f16:	e05a      	b.n	8011fce <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	330e      	adds	r3, #14
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	3318      	adds	r3, #24
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d102      	bne.n	8011f38 <etharp_input+0x74>
    for_us = 0;
 8011f32:	2300      	movs	r3, #0
 8011f34:	75fb      	strb	r3, [r7, #23]
 8011f36:	e009      	b.n	8011f4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	bf0c      	ite	eq
 8011f44:	2301      	moveq	r3, #1
 8011f46:	2300      	movne	r3, #0
 8011f48:	b2db      	uxtb	r3, r3
 8011f4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	f103 0208 	add.w	r2, r3, #8
 8011f52:	7dfb      	ldrb	r3, [r7, #23]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d001      	beq.n	8011f5c <etharp_input+0x98>
 8011f58:	2301      	movs	r3, #1
 8011f5a:	e000      	b.n	8011f5e <etharp_input+0x9a>
 8011f5c:	2302      	movs	r3, #2
 8011f5e:	f107 010c 	add.w	r1, r7, #12
 8011f62:	6838      	ldr	r0, [r7, #0]
 8011f64:	f7ff fed8 	bl	8011d18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	88db      	ldrh	r3, [r3, #6]
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f72:	d003      	beq.n	8011f7c <etharp_input+0xb8>
 8011f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f78:	d01e      	beq.n	8011fb8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011f7a:	e025      	b.n	8011fc8 <etharp_input+0x104>
      if (for_us) {
 8011f7c:	7dfb      	ldrb	r3, [r7, #23]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d021      	beq.n	8011fc6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8011f88:	693b      	ldr	r3, [r7, #16]
 8011f8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011f98:	693a      	ldr	r2, [r7, #16]
 8011f9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011f9c:	2102      	movs	r1, #2
 8011f9e:	9103      	str	r1, [sp, #12]
 8011fa0:	f107 010c 	add.w	r1, r7, #12
 8011fa4:	9102      	str	r1, [sp, #8]
 8011fa6:	9201      	str	r2, [sp, #4]
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	462b      	mov	r3, r5
 8011fac:	4622      	mov	r2, r4
 8011fae:	4601      	mov	r1, r0
 8011fb0:	6838      	ldr	r0, [r7, #0]
 8011fb2:	f000 faef 	bl	8012594 <etharp_raw>
      break;
 8011fb6:	e006      	b.n	8011fc6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011fb8:	f107 030c 	add.w	r3, r7, #12
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	6838      	ldr	r0, [r7, #0]
 8011fc0:	f7fe fa02 	bl	80103c8 <dhcp_arp_reply>
      break;
 8011fc4:	e000      	b.n	8011fc8 <etharp_input+0x104>
      break;
 8011fc6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7f6 ff73 	bl	8008eb4 <pbuf_free>
}
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8011fd4:	0801b6fc 	.word	0x0801b6fc
 8011fd8:	0801b84c 	.word	0x0801b84c
 8011fdc:	0801b774 	.word	0x0801b774

08011fe0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b086      	sub	sp, #24
 8011fe4:	af02      	add	r7, sp, #8
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	4613      	mov	r3, r2
 8011fec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011fee:	79fa      	ldrb	r2, [r7, #7]
 8011ff0:	4944      	ldr	r1, [pc, #272]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 8011ff2:	4613      	mov	r3, r2
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	4413      	add	r3, r2
 8011ff8:	00db      	lsls	r3, r3, #3
 8011ffa:	440b      	add	r3, r1
 8011ffc:	3314      	adds	r3, #20
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d806      	bhi.n	8012012 <etharp_output_to_arp_index+0x32>
 8012004:	4b40      	ldr	r3, [pc, #256]	@ (8012108 <etharp_output_to_arp_index+0x128>)
 8012006:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801200a:	4940      	ldr	r1, [pc, #256]	@ (801210c <etharp_output_to_arp_index+0x12c>)
 801200c:	4840      	ldr	r0, [pc, #256]	@ (8012110 <etharp_output_to_arp_index+0x130>)
 801200e:	f002 fff9 	bl	8015004 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012012:	79fa      	ldrb	r2, [r7, #7]
 8012014:	493b      	ldr	r1, [pc, #236]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	3314      	adds	r3, #20
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	2b02      	cmp	r3, #2
 8012026:	d153      	bne.n	80120d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012028:	79fa      	ldrb	r2, [r7, #7]
 801202a:	4936      	ldr	r1, [pc, #216]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 801202c:	4613      	mov	r3, r2
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	4413      	add	r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	440b      	add	r3, r1
 8012036:	3312      	adds	r3, #18
 8012038:	881b      	ldrh	r3, [r3, #0]
 801203a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801203e:	d919      	bls.n	8012074 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012040:	79fa      	ldrb	r2, [r7, #7]
 8012042:	4613      	mov	r3, r2
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	4413      	add	r3, r2
 8012048:	00db      	lsls	r3, r3, #3
 801204a:	4a2e      	ldr	r2, [pc, #184]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 801204c:	4413      	add	r3, r2
 801204e:	3304      	adds	r3, #4
 8012050:	4619      	mov	r1, r3
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f000 fb4c 	bl	80126f0 <etharp_request>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d138      	bne.n	80120d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801205e:	79fa      	ldrb	r2, [r7, #7]
 8012060:	4928      	ldr	r1, [pc, #160]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	440b      	add	r3, r1
 801206c:	3314      	adds	r3, #20
 801206e:	2203      	movs	r2, #3
 8012070:	701a      	strb	r2, [r3, #0]
 8012072:	e02d      	b.n	80120d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012074:	79fa      	ldrb	r2, [r7, #7]
 8012076:	4923      	ldr	r1, [pc, #140]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 8012078:	4613      	mov	r3, r2
 801207a:	005b      	lsls	r3, r3, #1
 801207c:	4413      	add	r3, r2
 801207e:	00db      	lsls	r3, r3, #3
 8012080:	440b      	add	r3, r1
 8012082:	3312      	adds	r3, #18
 8012084:	881b      	ldrh	r3, [r3, #0]
 8012086:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801208a:	d321      	bcc.n	80120d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801208c:	79fa      	ldrb	r2, [r7, #7]
 801208e:	4613      	mov	r3, r2
 8012090:	005b      	lsls	r3, r3, #1
 8012092:	4413      	add	r3, r2
 8012094:	00db      	lsls	r3, r3, #3
 8012096:	4a1b      	ldr	r2, [pc, #108]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 8012098:	4413      	add	r3, r2
 801209a:	1d19      	adds	r1, r3, #4
 801209c:	79fa      	ldrb	r2, [r7, #7]
 801209e:	4613      	mov	r3, r2
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	4413      	add	r3, r2
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	3308      	adds	r3, #8
 80120a8:	4a16      	ldr	r2, [pc, #88]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 80120aa:	4413      	add	r3, r2
 80120ac:	3304      	adds	r3, #4
 80120ae:	461a      	mov	r2, r3
 80120b0:	68f8      	ldr	r0, [r7, #12]
 80120b2:	f000 fafb 	bl	80126ac <etharp_request_dst>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d109      	bne.n	80120d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80120bc:	79fa      	ldrb	r2, [r7, #7]
 80120be:	4911      	ldr	r1, [pc, #68]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 80120c0:	4613      	mov	r3, r2
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	4413      	add	r3, r2
 80120c6:	00db      	lsls	r3, r3, #3
 80120c8:	440b      	add	r3, r1
 80120ca:	3314      	adds	r3, #20
 80120cc:	2203      	movs	r2, #3
 80120ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80120d6:	79fa      	ldrb	r2, [r7, #7]
 80120d8:	4613      	mov	r3, r2
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	4413      	add	r3, r2
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	3308      	adds	r3, #8
 80120e2:	4a08      	ldr	r2, [pc, #32]	@ (8012104 <etharp_output_to_arp_index+0x124>)
 80120e4:	4413      	add	r3, r2
 80120e6:	3304      	adds	r3, #4
 80120e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80120ec:	9200      	str	r2, [sp, #0]
 80120ee:	460a      	mov	r2, r1
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f001 ff88 	bl	8014008 <ethernet_output>
 80120f8:	4603      	mov	r3, r0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3710      	adds	r7, #16
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	20008188 	.word	0x20008188
 8012108:	0801b6fc 	.word	0x0801b6fc
 801210c:	0801b86c 	.word	0x0801b86c
 8012110:	0801b774 	.word	0x0801b774

08012114 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b08a      	sub	sp, #40	@ 0x28
 8012118:	af02      	add	r7, sp, #8
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <etharp_output+0x24>
 801212a:	4b73      	ldr	r3, [pc, #460]	@ (80122f8 <etharp_output+0x1e4>)
 801212c:	f240 321e 	movw	r2, #798	@ 0x31e
 8012130:	4972      	ldr	r1, [pc, #456]	@ (80122fc <etharp_output+0x1e8>)
 8012132:	4873      	ldr	r0, [pc, #460]	@ (8012300 <etharp_output+0x1ec>)
 8012134:	f002 ff66 	bl	8015004 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <etharp_output+0x38>
 801213e:	4b6e      	ldr	r3, [pc, #440]	@ (80122f8 <etharp_output+0x1e4>)
 8012140:	f240 321f 	movw	r2, #799	@ 0x31f
 8012144:	496f      	ldr	r1, [pc, #444]	@ (8012304 <etharp_output+0x1f0>)
 8012146:	486e      	ldr	r0, [pc, #440]	@ (8012300 <etharp_output+0x1ec>)
 8012148:	f002 ff5c 	bl	8015004 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d106      	bne.n	8012160 <etharp_output+0x4c>
 8012152:	4b69      	ldr	r3, [pc, #420]	@ (80122f8 <etharp_output+0x1e4>)
 8012154:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012158:	496b      	ldr	r1, [pc, #428]	@ (8012308 <etharp_output+0x1f4>)
 801215a:	4869      	ldr	r0, [pc, #420]	@ (8012300 <etharp_output+0x1ec>)
 801215c:	f002 ff52 	bl	8015004 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	68f9      	ldr	r1, [r7, #12]
 8012166:	4618      	mov	r0, r3
 8012168:	f000 ff16 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d002      	beq.n	8012178 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012172:	4b66      	ldr	r3, [pc, #408]	@ (801230c <etharp_output+0x1f8>)
 8012174:	61fb      	str	r3, [r7, #28]
 8012176:	e0af      	b.n	80122d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012180:	2be0      	cmp	r3, #224	@ 0xe0
 8012182:	d118      	bne.n	80121b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012184:	2301      	movs	r3, #1
 8012186:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012188:	2300      	movs	r3, #0
 801218a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801218c:	235e      	movs	r3, #94	@ 0x5e
 801218e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	3301      	adds	r3, #1
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801219a:	b2db      	uxtb	r3, r3
 801219c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	3302      	adds	r3, #2
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	3303      	adds	r3, #3
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80121ae:	f107 0310 	add.w	r3, r7, #16
 80121b2:	61fb      	str	r3, [r7, #28]
 80121b4:	e090      	b.n	80122d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681a      	ldr	r2, [r3, #0]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	3304      	adds	r3, #4
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	405a      	eors	r2, r3
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3308      	adds	r3, #8
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	4013      	ands	r3, r2
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d012      	beq.n	80121f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80121d4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80121d8:	4293      	cmp	r3, r2
 80121da:	d00b      	beq.n	80121f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	330c      	adds	r3, #12
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d003      	beq.n	80121ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	330c      	adds	r3, #12
 80121ea:	61bb      	str	r3, [r7, #24]
 80121ec:	e002      	b.n	80121f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80121ee:	f06f 0303 	mvn.w	r3, #3
 80121f2:	e07d      	b.n	80122f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80121f4:	4b46      	ldr	r3, [pc, #280]	@ (8012310 <etharp_output+0x1fc>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	4619      	mov	r1, r3
 80121fa:	4a46      	ldr	r2, [pc, #280]	@ (8012314 <etharp_output+0x200>)
 80121fc:	460b      	mov	r3, r1
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	440b      	add	r3, r1
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4413      	add	r3, r2
 8012206:	3314      	adds	r3, #20
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d925      	bls.n	801225a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801220e:	4b40      	ldr	r3, [pc, #256]	@ (8012310 <etharp_output+0x1fc>)
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	4619      	mov	r1, r3
 8012214:	4a3f      	ldr	r2, [pc, #252]	@ (8012314 <etharp_output+0x200>)
 8012216:	460b      	mov	r3, r1
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	440b      	add	r3, r1
 801221c:	00db      	lsls	r3, r3, #3
 801221e:	4413      	add	r3, r2
 8012220:	3308      	adds	r3, #8
 8012222:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	429a      	cmp	r2, r3
 8012228:	d117      	bne.n	801225a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	4b38      	ldr	r3, [pc, #224]	@ (8012310 <etharp_output+0x1fc>)
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	4618      	mov	r0, r3
 8012234:	4937      	ldr	r1, [pc, #220]	@ (8012314 <etharp_output+0x200>)
 8012236:	4603      	mov	r3, r0
 8012238:	005b      	lsls	r3, r3, #1
 801223a:	4403      	add	r3, r0
 801223c:	00db      	lsls	r3, r3, #3
 801223e:	440b      	add	r3, r1
 8012240:	3304      	adds	r3, #4
 8012242:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012244:	429a      	cmp	r2, r3
 8012246:	d108      	bne.n	801225a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012248:	4b31      	ldr	r3, [pc, #196]	@ (8012310 <etharp_output+0x1fc>)
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	461a      	mov	r2, r3
 801224e:	68b9      	ldr	r1, [r7, #8]
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f7ff fec5 	bl	8011fe0 <etharp_output_to_arp_index>
 8012256:	4603      	mov	r3, r0
 8012258:	e04a      	b.n	80122f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801225a:	2300      	movs	r3, #0
 801225c:	75fb      	strb	r3, [r7, #23]
 801225e:	e031      	b.n	80122c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012260:	7dfa      	ldrb	r2, [r7, #23]
 8012262:	492c      	ldr	r1, [pc, #176]	@ (8012314 <etharp_output+0x200>)
 8012264:	4613      	mov	r3, r2
 8012266:	005b      	lsls	r3, r3, #1
 8012268:	4413      	add	r3, r2
 801226a:	00db      	lsls	r3, r3, #3
 801226c:	440b      	add	r3, r1
 801226e:	3314      	adds	r3, #20
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	2b01      	cmp	r3, #1
 8012274:	d923      	bls.n	80122be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012276:	7dfa      	ldrb	r2, [r7, #23]
 8012278:	4926      	ldr	r1, [pc, #152]	@ (8012314 <etharp_output+0x200>)
 801227a:	4613      	mov	r3, r2
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	4413      	add	r3, r2
 8012280:	00db      	lsls	r3, r3, #3
 8012282:	440b      	add	r3, r1
 8012284:	3308      	adds	r3, #8
 8012286:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	429a      	cmp	r2, r3
 801228c:	d117      	bne.n	80122be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801228e:	69bb      	ldr	r3, [r7, #24]
 8012290:	6819      	ldr	r1, [r3, #0]
 8012292:	7dfa      	ldrb	r2, [r7, #23]
 8012294:	481f      	ldr	r0, [pc, #124]	@ (8012314 <etharp_output+0x200>)
 8012296:	4613      	mov	r3, r2
 8012298:	005b      	lsls	r3, r3, #1
 801229a:	4413      	add	r3, r2
 801229c:	00db      	lsls	r3, r3, #3
 801229e:	4403      	add	r3, r0
 80122a0:	3304      	adds	r3, #4
 80122a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80122a4:	4299      	cmp	r1, r3
 80122a6:	d10a      	bne.n	80122be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80122a8:	4a19      	ldr	r2, [pc, #100]	@ (8012310 <etharp_output+0x1fc>)
 80122aa:	7dfb      	ldrb	r3, [r7, #23]
 80122ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
 80122b0:	461a      	mov	r2, r3
 80122b2:	68b9      	ldr	r1, [r7, #8]
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f7ff fe93 	bl	8011fe0 <etharp_output_to_arp_index>
 80122ba:	4603      	mov	r3, r0
 80122bc:	e018      	b.n	80122f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80122be:	7dfb      	ldrb	r3, [r7, #23]
 80122c0:	3301      	adds	r3, #1
 80122c2:	75fb      	strb	r3, [r7, #23]
 80122c4:	7dfb      	ldrb	r3, [r7, #23]
 80122c6:	2b09      	cmp	r3, #9
 80122c8:	d9ca      	bls.n	8012260 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80122ca:	68ba      	ldr	r2, [r7, #8]
 80122cc:	69b9      	ldr	r1, [r7, #24]
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f000 f822 	bl	8012318 <etharp_query>
 80122d4:	4603      	mov	r3, r0
 80122d6:	e00b      	b.n	80122f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80122de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	68b9      	ldr	r1, [r7, #8]
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f001 fe8d 	bl	8014008 <ethernet_output>
 80122ee:	4603      	mov	r3, r0
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3720      	adds	r7, #32
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	0801b6fc 	.word	0x0801b6fc
 80122fc:	0801b84c 	.word	0x0801b84c
 8012300:	0801b774 	.word	0x0801b774
 8012304:	0801b89c 	.word	0x0801b89c
 8012308:	0801b83c 	.word	0x0801b83c
 801230c:	0801bf3c 	.word	0x0801bf3c
 8012310:	20008278 	.word	0x20008278
 8012314:	20008188 	.word	0x20008188

08012318 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b08c      	sub	sp, #48	@ 0x30
 801231c:	af02      	add	r7, sp, #8
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	332a      	adds	r3, #42	@ 0x2a
 8012328:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801232a:	23ff      	movs	r3, #255	@ 0xff
 801232c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012330:	2300      	movs	r3, #0
 8012332:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	68f9      	ldr	r1, [r7, #12]
 801233a:	4618      	mov	r0, r3
 801233c:	f000 fe2c 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10c      	bne.n	8012360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801234e:	2be0      	cmp	r3, #224	@ 0xe0
 8012350:	d006      	beq.n	8012360 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d003      	beq.n	8012360 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d102      	bne.n	8012366 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012360:	f06f 030f 	mvn.w	r3, #15
 8012364:	e101      	b.n	801256a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	2101      	movs	r1, #1
 801236a:	68b8      	ldr	r0, [r7, #8]
 801236c:	f7ff fb5c 	bl	8011a28 <etharp_find_entry>
 8012370:	4603      	mov	r3, r0
 8012372:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012378:	2b00      	cmp	r3, #0
 801237a:	da02      	bge.n	8012382 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801237c:	8a7b      	ldrh	r3, [r7, #18]
 801237e:	b25b      	sxtb	r3, r3
 8012380:	e0f3      	b.n	801256a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012382:	8a7b      	ldrh	r3, [r7, #18]
 8012384:	2b7e      	cmp	r3, #126	@ 0x7e
 8012386:	d906      	bls.n	8012396 <etharp_query+0x7e>
 8012388:	4b7a      	ldr	r3, [pc, #488]	@ (8012574 <etharp_query+0x25c>)
 801238a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801238e:	497a      	ldr	r1, [pc, #488]	@ (8012578 <etharp_query+0x260>)
 8012390:	487a      	ldr	r0, [pc, #488]	@ (801257c <etharp_query+0x264>)
 8012392:	f002 fe37 	bl	8015004 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012396:	8a7b      	ldrh	r3, [r7, #18]
 8012398:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801239a:	7c7a      	ldrb	r2, [r7, #17]
 801239c:	4978      	ldr	r1, [pc, #480]	@ (8012580 <etharp_query+0x268>)
 801239e:	4613      	mov	r3, r2
 80123a0:	005b      	lsls	r3, r3, #1
 80123a2:	4413      	add	r3, r2
 80123a4:	00db      	lsls	r3, r3, #3
 80123a6:	440b      	add	r3, r1
 80123a8:	3314      	adds	r3, #20
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d115      	bne.n	80123dc <etharp_query+0xc4>
    is_new_entry = 1;
 80123b0:	2301      	movs	r3, #1
 80123b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80123b4:	7c7a      	ldrb	r2, [r7, #17]
 80123b6:	4972      	ldr	r1, [pc, #456]	@ (8012580 <etharp_query+0x268>)
 80123b8:	4613      	mov	r3, r2
 80123ba:	005b      	lsls	r3, r3, #1
 80123bc:	4413      	add	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	440b      	add	r3, r1
 80123c2:	3314      	adds	r3, #20
 80123c4:	2201      	movs	r2, #1
 80123c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80123c8:	7c7a      	ldrb	r2, [r7, #17]
 80123ca:	496d      	ldr	r1, [pc, #436]	@ (8012580 <etharp_query+0x268>)
 80123cc:	4613      	mov	r3, r2
 80123ce:	005b      	lsls	r3, r3, #1
 80123d0:	4413      	add	r3, r2
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	440b      	add	r3, r1
 80123d6:	3308      	adds	r3, #8
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80123dc:	7c7a      	ldrb	r2, [r7, #17]
 80123de:	4968      	ldr	r1, [pc, #416]	@ (8012580 <etharp_query+0x268>)
 80123e0:	4613      	mov	r3, r2
 80123e2:	005b      	lsls	r3, r3, #1
 80123e4:	4413      	add	r3, r2
 80123e6:	00db      	lsls	r3, r3, #3
 80123e8:	440b      	add	r3, r1
 80123ea:	3314      	adds	r3, #20
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d011      	beq.n	8012416 <etharp_query+0xfe>
 80123f2:	7c7a      	ldrb	r2, [r7, #17]
 80123f4:	4962      	ldr	r1, [pc, #392]	@ (8012580 <etharp_query+0x268>)
 80123f6:	4613      	mov	r3, r2
 80123f8:	005b      	lsls	r3, r3, #1
 80123fa:	4413      	add	r3, r2
 80123fc:	00db      	lsls	r3, r3, #3
 80123fe:	440b      	add	r3, r1
 8012400:	3314      	adds	r3, #20
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d806      	bhi.n	8012416 <etharp_query+0xfe>
 8012408:	4b5a      	ldr	r3, [pc, #360]	@ (8012574 <etharp_query+0x25c>)
 801240a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801240e:	495d      	ldr	r1, [pc, #372]	@ (8012584 <etharp_query+0x26c>)
 8012410:	485a      	ldr	r0, [pc, #360]	@ (801257c <etharp_query+0x264>)
 8012412:	f002 fdf7 	bl	8015004 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d102      	bne.n	8012422 <etharp_query+0x10a>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10c      	bne.n	801243c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012422:	68b9      	ldr	r1, [r7, #8]
 8012424:	68f8      	ldr	r0, [r7, #12]
 8012426:	f000 f963 	bl	80126f0 <etharp_request>
 801242a:	4603      	mov	r3, r0
 801242c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d102      	bne.n	801243c <etharp_query+0x124>
      return result;
 8012436:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801243a:	e096      	b.n	801256a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <etharp_query+0x138>
 8012442:	4b4c      	ldr	r3, [pc, #304]	@ (8012574 <etharp_query+0x25c>)
 8012444:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012448:	494f      	ldr	r1, [pc, #316]	@ (8012588 <etharp_query+0x270>)
 801244a:	484c      	ldr	r0, [pc, #304]	@ (801257c <etharp_query+0x264>)
 801244c:	f002 fdda 	bl	8015004 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012450:	7c7a      	ldrb	r2, [r7, #17]
 8012452:	494b      	ldr	r1, [pc, #300]	@ (8012580 <etharp_query+0x268>)
 8012454:	4613      	mov	r3, r2
 8012456:	005b      	lsls	r3, r3, #1
 8012458:	4413      	add	r3, r2
 801245a:	00db      	lsls	r3, r3, #3
 801245c:	440b      	add	r3, r1
 801245e:	3314      	adds	r3, #20
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	2b01      	cmp	r3, #1
 8012464:	d917      	bls.n	8012496 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012466:	4a49      	ldr	r2, [pc, #292]	@ (801258c <etharp_query+0x274>)
 8012468:	7c7b      	ldrb	r3, [r7, #17]
 801246a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801246c:	7c7a      	ldrb	r2, [r7, #17]
 801246e:	4613      	mov	r3, r2
 8012470:	005b      	lsls	r3, r3, #1
 8012472:	4413      	add	r3, r2
 8012474:	00db      	lsls	r3, r3, #3
 8012476:	3308      	adds	r3, #8
 8012478:	4a41      	ldr	r2, [pc, #260]	@ (8012580 <etharp_query+0x268>)
 801247a:	4413      	add	r3, r2
 801247c:	3304      	adds	r3, #4
 801247e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012482:	9200      	str	r2, [sp, #0]
 8012484:	697a      	ldr	r2, [r7, #20]
 8012486:	6879      	ldr	r1, [r7, #4]
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f001 fdbd 	bl	8014008 <ethernet_output>
 801248e:	4603      	mov	r3, r0
 8012490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012494:	e067      	b.n	8012566 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012496:	7c7a      	ldrb	r2, [r7, #17]
 8012498:	4939      	ldr	r1, [pc, #228]	@ (8012580 <etharp_query+0x268>)
 801249a:	4613      	mov	r3, r2
 801249c:	005b      	lsls	r3, r3, #1
 801249e:	4413      	add	r3, r2
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	440b      	add	r3, r1
 80124a4:	3314      	adds	r3, #20
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d15c      	bne.n	8012566 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80124ac:	2300      	movs	r3, #0
 80124ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80124b4:	e01c      	b.n	80124f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	895a      	ldrh	r2, [r3, #10]
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	891b      	ldrh	r3, [r3, #8]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d10a      	bne.n	80124d8 <etharp_query+0x1c0>
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d006      	beq.n	80124d8 <etharp_query+0x1c0>
 80124ca:	4b2a      	ldr	r3, [pc, #168]	@ (8012574 <etharp_query+0x25c>)
 80124cc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80124d0:	492f      	ldr	r1, [pc, #188]	@ (8012590 <etharp_query+0x278>)
 80124d2:	482a      	ldr	r0, [pc, #168]	@ (801257c <etharp_query+0x264>)
 80124d4:	f002 fd96 	bl	8015004 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	7b1b      	ldrb	r3, [r3, #12]
 80124dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <etharp_query+0x1d2>
        copy_needed = 1;
 80124e4:	2301      	movs	r3, #1
 80124e6:	61bb      	str	r3, [r7, #24]
        break;
 80124e8:	e005      	b.n	80124f6 <etharp_query+0x1de>
      }
      p = p->next;
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1df      	bne.n	80124b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d007      	beq.n	801250c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012502:	200e      	movs	r0, #14
 8012504:	f7f6 ff42 	bl	800938c <pbuf_clone>
 8012508:	61f8      	str	r0, [r7, #28]
 801250a:	e004      	b.n	8012516 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012510:	69f8      	ldr	r0, [r7, #28]
 8012512:	f7f6 fd6f 	bl	8008ff4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d021      	beq.n	8012560 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801251c:	7c7a      	ldrb	r2, [r7, #17]
 801251e:	4918      	ldr	r1, [pc, #96]	@ (8012580 <etharp_query+0x268>)
 8012520:	4613      	mov	r3, r2
 8012522:	005b      	lsls	r3, r3, #1
 8012524:	4413      	add	r3, r2
 8012526:	00db      	lsls	r3, r3, #3
 8012528:	440b      	add	r3, r1
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d00a      	beq.n	8012546 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012530:	7c7a      	ldrb	r2, [r7, #17]
 8012532:	4913      	ldr	r1, [pc, #76]	@ (8012580 <etharp_query+0x268>)
 8012534:	4613      	mov	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	4413      	add	r3, r2
 801253a:	00db      	lsls	r3, r3, #3
 801253c:	440b      	add	r3, r1
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f7f6 fcb7 	bl	8008eb4 <pbuf_free>
      }
      arp_table[i].q = p;
 8012546:	7c7a      	ldrb	r2, [r7, #17]
 8012548:	490d      	ldr	r1, [pc, #52]	@ (8012580 <etharp_query+0x268>)
 801254a:	4613      	mov	r3, r2
 801254c:	005b      	lsls	r3, r3, #1
 801254e:	4413      	add	r3, r2
 8012550:	00db      	lsls	r3, r3, #3
 8012552:	440b      	add	r3, r1
 8012554:	69fa      	ldr	r2, [r7, #28]
 8012556:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012558:	2300      	movs	r3, #0
 801255a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801255e:	e002      	b.n	8012566 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012560:	23ff      	movs	r3, #255	@ 0xff
 8012562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012566:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801256a:	4618      	mov	r0, r3
 801256c:	3728      	adds	r7, #40	@ 0x28
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	0801b6fc 	.word	0x0801b6fc
 8012578:	0801b8a8 	.word	0x0801b8a8
 801257c:	0801b774 	.word	0x0801b774
 8012580:	20008188 	.word	0x20008188
 8012584:	0801b8b8 	.word	0x0801b8b8
 8012588:	0801b89c 	.word	0x0801b89c
 801258c:	20008278 	.word	0x20008278
 8012590:	0801b8e0 	.word	0x0801b8e0

08012594 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08a      	sub	sp, #40	@ 0x28
 8012598:	af02      	add	r7, sp, #8
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80125a2:	2300      	movs	r3, #0
 80125a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <etharp_raw+0x26>
 80125ac:	4b3a      	ldr	r3, [pc, #232]	@ (8012698 <etharp_raw+0x104>)
 80125ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80125b2:	493a      	ldr	r1, [pc, #232]	@ (801269c <etharp_raw+0x108>)
 80125b4:	483a      	ldr	r0, [pc, #232]	@ (80126a0 <etharp_raw+0x10c>)
 80125b6:	f002 fd25 	bl	8015004 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80125ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80125be:	211c      	movs	r1, #28
 80125c0:	200e      	movs	r0, #14
 80125c2:	f7f6 f993 	bl	80088ec <pbuf_alloc>
 80125c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80125ce:	f04f 33ff 	mov.w	r3, #4294967295
 80125d2:	e05d      	b.n	8012690 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	895b      	ldrh	r3, [r3, #10]
 80125d8:	2b1b      	cmp	r3, #27
 80125da:	d806      	bhi.n	80125ea <etharp_raw+0x56>
 80125dc:	4b2e      	ldr	r3, [pc, #184]	@ (8012698 <etharp_raw+0x104>)
 80125de:	f240 4262 	movw	r2, #1122	@ 0x462
 80125e2:	4930      	ldr	r1, [pc, #192]	@ (80126a4 <etharp_raw+0x110>)
 80125e4:	482e      	ldr	r0, [pc, #184]	@ (80126a0 <etharp_raw+0x10c>)
 80125e6:	f002 fd0d 	bl	8015004 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80125f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7f5 f8d0 	bl	8007798 <lwip_htons>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461a      	mov	r2, r3
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012606:	2b06      	cmp	r3, #6
 8012608:	d006      	beq.n	8012618 <etharp_raw+0x84>
 801260a:	4b23      	ldr	r3, [pc, #140]	@ (8012698 <etharp_raw+0x104>)
 801260c:	f240 4269 	movw	r2, #1129	@ 0x469
 8012610:	4925      	ldr	r1, [pc, #148]	@ (80126a8 <etharp_raw+0x114>)
 8012612:	4823      	ldr	r0, [pc, #140]	@ (80126a0 <etharp_raw+0x10c>)
 8012614:	f002 fcf6 	bl	8015004 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	3308      	adds	r3, #8
 801261c:	2206      	movs	r2, #6
 801261e:	6839      	ldr	r1, [r7, #0]
 8012620:	4618      	mov	r0, r3
 8012622:	f002 ff14 	bl	801544e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	3312      	adds	r3, #18
 801262a:	2206      	movs	r2, #6
 801262c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801262e:	4618      	mov	r0, r3
 8012630:	f002 ff0d 	bl	801544e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	330e      	adds	r3, #14
 8012638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801263a:	6812      	ldr	r2, [r2, #0]
 801263c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	3318      	adds	r3, #24
 8012642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012644:	6812      	ldr	r2, [r2, #0]
 8012646:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	2200      	movs	r2, #0
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	2200      	movs	r2, #0
 8012650:	f042 0201 	orr.w	r2, r2, #1
 8012654:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	2200      	movs	r2, #0
 801265a:	f042 0208 	orr.w	r2, r2, #8
 801265e:	709a      	strb	r2, [r3, #2]
 8012660:	2200      	movs	r2, #0
 8012662:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	2206      	movs	r2, #6
 8012668:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	2204      	movs	r2, #4
 801266e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012670:	f640 0306 	movw	r3, #2054	@ 0x806
 8012674:	9300      	str	r3, [sp, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	68ba      	ldr	r2, [r7, #8]
 801267a:	69b9      	ldr	r1, [r7, #24]
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f001 fcc3 	bl	8014008 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012682:	69b8      	ldr	r0, [r7, #24]
 8012684:	f7f6 fc16 	bl	8008eb4 <pbuf_free>
  p = NULL;
 8012688:	2300      	movs	r3, #0
 801268a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801268c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3720      	adds	r7, #32
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	0801b6fc 	.word	0x0801b6fc
 801269c:	0801b84c 	.word	0x0801b84c
 80126a0:	0801b774 	.word	0x0801b774
 80126a4:	0801b8fc 	.word	0x0801b8fc
 80126a8:	0801b930 	.word	0x0801b930

080126ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b088      	sub	sp, #32
 80126b0:	af04      	add	r7, sp, #16
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80126c8:	2201      	movs	r2, #1
 80126ca:	9203      	str	r2, [sp, #12]
 80126cc:	68ba      	ldr	r2, [r7, #8]
 80126ce:	9202      	str	r2, [sp, #8]
 80126d0:	4a06      	ldr	r2, [pc, #24]	@ (80126ec <etharp_request_dst+0x40>)
 80126d2:	9201      	str	r2, [sp, #4]
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	4603      	mov	r3, r0
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	68f8      	ldr	r0, [r7, #12]
 80126dc:	f7ff ff5a 	bl	8012594 <etharp_raw>
 80126e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0801bf44 	.word	0x0801bf44

080126f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80126fa:	4a05      	ldr	r2, [pc, #20]	@ (8012710 <etharp_request+0x20>)
 80126fc:	6839      	ldr	r1, [r7, #0]
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7ff ffd4 	bl	80126ac <etharp_request_dst>
 8012704:	4603      	mov	r3, r0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3708      	adds	r7, #8
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	0801bf3c 	.word	0x0801bf3c

08012714 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b08e      	sub	sp, #56	@ 0x38
 8012718:	af04      	add	r7, sp, #16
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801271e:	4b79      	ldr	r3, [pc, #484]	@ (8012904 <icmp_input+0x1f0>)
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 030f 	and.w	r3, r3, #15
 801272c:	b2db      	uxtb	r3, r3
 801272e:	009b      	lsls	r3, r3, #2
 8012730:	b2db      	uxtb	r3, r3
 8012732:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012734:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012736:	2b13      	cmp	r3, #19
 8012738:	f240 80cd 	bls.w	80128d6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	895b      	ldrh	r3, [r3, #10]
 8012740:	2b03      	cmp	r3, #3
 8012742:	f240 80ca 	bls.w	80128da <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012750:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 80b7 	beq.w	80128c8 <icmp_input+0x1b4>
 801275a:	2b08      	cmp	r3, #8
 801275c:	f040 80b7 	bne.w	80128ce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012760:	4b69      	ldr	r3, [pc, #420]	@ (8012908 <icmp_input+0x1f4>)
 8012762:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012764:	4b67      	ldr	r3, [pc, #412]	@ (8012904 <icmp_input+0x1f0>)
 8012766:	695b      	ldr	r3, [r3, #20]
 8012768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801276c:	2be0      	cmp	r3, #224	@ 0xe0
 801276e:	f000 80bb 	beq.w	80128e8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012772:	4b64      	ldr	r3, [pc, #400]	@ (8012904 <icmp_input+0x1f0>)
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	4a63      	ldr	r2, [pc, #396]	@ (8012904 <icmp_input+0x1f0>)
 8012778:	6812      	ldr	r2, [r2, #0]
 801277a:	4611      	mov	r1, r2
 801277c:	4618      	mov	r0, r3
 801277e:	f000 fc0b 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	f040 80b1 	bne.w	80128ec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	891b      	ldrh	r3, [r3, #8]
 801278e:	2b07      	cmp	r3, #7
 8012790:	f240 80a5 	bls.w	80128de <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012794:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012796:	330e      	adds	r3, #14
 8012798:	4619      	mov	r1, r3
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7f6 faf4 	bl	8008d88 <pbuf_add_header>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d04b      	beq.n	801283e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	891a      	ldrh	r2, [r3, #8]
 80127aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127ac:	4413      	add	r3, r2
 80127ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	891b      	ldrh	r3, [r3, #8]
 80127b4:	8b7a      	ldrh	r2, [r7, #26]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	f0c0 809a 	bcc.w	80128f0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80127bc:	8b7b      	ldrh	r3, [r7, #26]
 80127be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80127c2:	4619      	mov	r1, r3
 80127c4:	200e      	movs	r0, #14
 80127c6:	f7f6 f891 	bl	80088ec <pbuf_alloc>
 80127ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 8090 	beq.w	80128f4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	895b      	ldrh	r3, [r3, #10]
 80127d8:	461a      	mov	r2, r3
 80127da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127dc:	3308      	adds	r3, #8
 80127de:	429a      	cmp	r2, r3
 80127e0:	d203      	bcs.n	80127ea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80127e2:	6978      	ldr	r0, [r7, #20]
 80127e4:	f7f6 fb66 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 80127e8:	e085      	b.n	80128f6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80127f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80127f2:	4618      	mov	r0, r3
 80127f4:	f002 fe2b 	bl	801544e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80127f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127fa:	4619      	mov	r1, r3
 80127fc:	6978      	ldr	r0, [r7, #20]
 80127fe:	f7f6 fad3 	bl	8008da8 <pbuf_remove_header>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d009      	beq.n	801281c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012808:	4b40      	ldr	r3, [pc, #256]	@ (801290c <icmp_input+0x1f8>)
 801280a:	22b6      	movs	r2, #182	@ 0xb6
 801280c:	4940      	ldr	r1, [pc, #256]	@ (8012910 <icmp_input+0x1fc>)
 801280e:	4841      	ldr	r0, [pc, #260]	@ (8012914 <icmp_input+0x200>)
 8012810:	f002 fbf8 	bl	8015004 <iprintf>
          pbuf_free(r);
 8012814:	6978      	ldr	r0, [r7, #20]
 8012816:	f7f6 fb4d 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 801281a:	e06c      	b.n	80128f6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801281c:	6879      	ldr	r1, [r7, #4]
 801281e:	6978      	ldr	r0, [r7, #20]
 8012820:	f7f6 fc70 	bl	8009104 <pbuf_copy>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d003      	beq.n	8012832 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801282a:	6978      	ldr	r0, [r7, #20]
 801282c:	f7f6 fb42 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 8012830:	e061      	b.n	80128f6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7f6 fb3e 	bl	8008eb4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	607b      	str	r3, [r7, #4]
 801283c:	e00f      	b.n	801285e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801283e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012840:	330e      	adds	r3, #14
 8012842:	4619      	mov	r1, r3
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7f6 faaf 	bl	8008da8 <pbuf_remove_header>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d006      	beq.n	801285e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012850:	4b2e      	ldr	r3, [pc, #184]	@ (801290c <icmp_input+0x1f8>)
 8012852:	22c7      	movs	r2, #199	@ 0xc7
 8012854:	4930      	ldr	r1, [pc, #192]	@ (8012918 <icmp_input+0x204>)
 8012856:	482f      	ldr	r0, [pc, #188]	@ (8012914 <icmp_input+0x200>)
 8012858:	f002 fbd4 	bl	8015004 <iprintf>
          goto icmperr;
 801285c:	e04b      	b.n	80128f6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012864:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012866:	4619      	mov	r1, r3
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f7f6 fa8d 	bl	8008d88 <pbuf_add_header>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d12b      	bne.n	80128cc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	685b      	ldr	r3, [r3, #4]
 8012878:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012882:	4b20      	ldr	r3, [pc, #128]	@ (8012904 <icmp_input+0x1f0>)
 8012884:	691a      	ldr	r2, [r3, #16]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	2200      	movs	r2, #0
 801288e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	2200      	movs	r2, #0
 8012894:	709a      	strb	r2, [r3, #2]
 8012896:	2200      	movs	r2, #0
 8012898:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	22ff      	movs	r2, #255	@ 0xff
 801289e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2200      	movs	r2, #0
 80128a4:	729a      	strb	r2, [r3, #10]
 80128a6:	2200      	movs	r2, #0
 80128a8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	9302      	str	r3, [sp, #8]
 80128ae:	2301      	movs	r3, #1
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	2300      	movs	r3, #0
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	23ff      	movs	r3, #255	@ 0xff
 80128b8:	2200      	movs	r2, #0
 80128ba:	69f9      	ldr	r1, [r7, #28]
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 fa93 	bl	8012de8 <ip4_output_if>
 80128c2:	4603      	mov	r3, r0
 80128c4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80128c6:	e001      	b.n	80128cc <icmp_input+0x1b8>
      break;
 80128c8:	bf00      	nop
 80128ca:	e000      	b.n	80128ce <icmp_input+0x1ba>
      break;
 80128cc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f7f6 faf0 	bl	8008eb4 <pbuf_free>
  return;
 80128d4:	e013      	b.n	80128fe <icmp_input+0x1ea>
    goto lenerr;
 80128d6:	bf00      	nop
 80128d8:	e002      	b.n	80128e0 <icmp_input+0x1cc>
    goto lenerr;
 80128da:	bf00      	nop
 80128dc:	e000      	b.n	80128e0 <icmp_input+0x1cc>
        goto lenerr;
 80128de:	bf00      	nop
lenerr:
  pbuf_free(p);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7f6 fae7 	bl	8008eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80128e6:	e00a      	b.n	80128fe <icmp_input+0x1ea>
        goto icmperr;
 80128e8:	bf00      	nop
 80128ea:	e004      	b.n	80128f6 <icmp_input+0x1e2>
        goto icmperr;
 80128ec:	bf00      	nop
 80128ee:	e002      	b.n	80128f6 <icmp_input+0x1e2>
          goto icmperr;
 80128f0:	bf00      	nop
 80128f2:	e000      	b.n	80128f6 <icmp_input+0x1e2>
          goto icmperr;
 80128f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7f6 fadc 	bl	8008eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80128fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80128fe:	3728      	adds	r7, #40	@ 0x28
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	200050b8 	.word	0x200050b8
 8012908:	200050cc 	.word	0x200050cc
 801290c:	0801b974 	.word	0x0801b974
 8012910:	0801b9ac 	.word	0x0801b9ac
 8012914:	0801b9e4 	.word	0x0801b9e4
 8012918:	0801ba0c 	.word	0x0801ba0c

0801291c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	460b      	mov	r3, r1
 8012926:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012928:	78fb      	ldrb	r3, [r7, #3]
 801292a:	461a      	mov	r2, r3
 801292c:	2103      	movs	r1, #3
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f000 f814 	bl	801295c <icmp_send_response>
}
 8012934:	bf00      	nop
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	460b      	mov	r3, r1
 8012946:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012948:	78fb      	ldrb	r3, [r7, #3]
 801294a:	461a      	mov	r2, r3
 801294c:	210b      	movs	r1, #11
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f000 f804 	bl	801295c <icmp_send_response>
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b08c      	sub	sp, #48	@ 0x30
 8012960:	af04      	add	r7, sp, #16
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	460b      	mov	r3, r1
 8012966:	70fb      	strb	r3, [r7, #3]
 8012968:	4613      	mov	r3, r2
 801296a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801296c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012970:	2124      	movs	r1, #36	@ 0x24
 8012972:	2022      	movs	r0, #34	@ 0x22
 8012974:	f7f5 ffba 	bl	80088ec <pbuf_alloc>
 8012978:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d04c      	beq.n	8012a1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	895b      	ldrh	r3, [r3, #10]
 8012984:	2b23      	cmp	r3, #35	@ 0x23
 8012986:	d806      	bhi.n	8012996 <icmp_send_response+0x3a>
 8012988:	4b26      	ldr	r3, [pc, #152]	@ (8012a24 <icmp_send_response+0xc8>)
 801298a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801298e:	4926      	ldr	r1, [pc, #152]	@ (8012a28 <icmp_send_response+0xcc>)
 8012990:	4826      	ldr	r0, [pc, #152]	@ (8012a2c <icmp_send_response+0xd0>)
 8012992:	f002 fb37 	bl	8015004 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	78fa      	ldrb	r2, [r7, #3]
 80129a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	78ba      	ldrb	r2, [r7, #2]
 80129ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	2200      	movs	r2, #0
 80129b2:	711a      	strb	r2, [r3, #4]
 80129b4:	2200      	movs	r2, #0
 80129b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	2200      	movs	r2, #0
 80129bc:	719a      	strb	r2, [r3, #6]
 80129be:	2200      	movs	r2, #0
 80129c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	f103 0008 	add.w	r0, r3, #8
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	221c      	movs	r2, #28
 80129d0:	4619      	mov	r1, r3
 80129d2:	f002 fd3c 	bl	801544e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80129dc:	f107 030c 	add.w	r3, r7, #12
 80129e0:	4618      	mov	r0, r3
 80129e2:	f000 f825 	bl	8012a30 <ip4_route>
 80129e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d011      	beq.n	8012a12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	2200      	movs	r2, #0
 80129f2:	709a      	strb	r2, [r3, #2]
 80129f4:	2200      	movs	r2, #0
 80129f6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80129f8:	f107 020c 	add.w	r2, r7, #12
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	9302      	str	r3, [sp, #8]
 8012a00:	2301      	movs	r3, #1
 8012a02:	9301      	str	r3, [sp, #4]
 8012a04:	2300      	movs	r3, #0
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	23ff      	movs	r3, #255	@ 0xff
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	69f8      	ldr	r0, [r7, #28]
 8012a0e:	f000 f9eb 	bl	8012de8 <ip4_output_if>
  }
  pbuf_free(q);
 8012a12:	69f8      	ldr	r0, [r7, #28]
 8012a14:	f7f6 fa4e 	bl	8008eb4 <pbuf_free>
 8012a18:	e000      	b.n	8012a1c <icmp_send_response+0xc0>
    return;
 8012a1a:	bf00      	nop
}
 8012a1c:	3720      	adds	r7, #32
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop
 8012a24:	0801b974 	.word	0x0801b974
 8012a28:	0801ba40 	.word	0x0801ba40
 8012a2c:	0801b9e4 	.word	0x0801b9e4

08012a30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b085      	sub	sp, #20
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012a38:	4b33      	ldr	r3, [pc, #204]	@ (8012b08 <ip4_route+0xd8>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	e036      	b.n	8012aae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a46:	f003 0301 	and.w	r3, r3, #1
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d02b      	beq.n	8012aa8 <ip4_route+0x78>
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a56:	089b      	lsrs	r3, r3, #2
 8012a58:	f003 0301 	and.w	r3, r3, #1
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d022      	beq.n	8012aa8 <ip4_route+0x78>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	3304      	adds	r3, #4
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d01d      	beq.n	8012aa8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	3304      	adds	r3, #4
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	405a      	eors	r2, r3
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	3308      	adds	r3, #8
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4013      	ands	r3, r2
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	e038      	b.n	8012afa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d108      	bne.n	8012aa8 <ip4_route+0x78>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	330c      	adds	r3, #12
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d101      	bne.n	8012aa8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	e028      	b.n	8012afa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	60fb      	str	r3, [r7, #12]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1c5      	bne.n	8012a40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012ab4:	4b15      	ldr	r3, [pc, #84]	@ (8012b0c <ip4_route+0xdc>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d01a      	beq.n	8012af2 <ip4_route+0xc2>
 8012abc:	4b13      	ldr	r3, [pc, #76]	@ (8012b0c <ip4_route+0xdc>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012ac4:	f003 0301 	and.w	r3, r3, #1
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d012      	beq.n	8012af2 <ip4_route+0xc2>
 8012acc:	4b0f      	ldr	r3, [pc, #60]	@ (8012b0c <ip4_route+0xdc>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012ad4:	f003 0304 	and.w	r3, r3, #4
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d00a      	beq.n	8012af2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012adc:	4b0b      	ldr	r3, [pc, #44]	@ (8012b0c <ip4_route+0xdc>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d004      	beq.n	8012af2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b7f      	cmp	r3, #127	@ 0x7f
 8012af0:	d101      	bne.n	8012af6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012af2:	2300      	movs	r3, #0
 8012af4:	e001      	b.n	8012afa <ip4_route+0xca>
  }

  return netif_default;
 8012af6:	4b05      	ldr	r3, [pc, #20]	@ (8012b0c <ip4_route+0xdc>)
 8012af8:	681b      	ldr	r3, [r3, #0]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3714      	adds	r7, #20
 8012afe:	46bd      	mov	sp, r7
 8012b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	200080e8 	.word	0x200080e8
 8012b0c:	200080ec 	.word	0x200080ec

08012b10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012b1e:	f003 0301 	and.w	r3, r3, #1
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d016      	beq.n	8012b56 <ip4_input_accept+0x46>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	3304      	adds	r3, #4
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d011      	beq.n	8012b56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b32:	4b0b      	ldr	r3, [pc, #44]	@ (8012b60 <ip4_input_accept+0x50>)
 8012b34:	695a      	ldr	r2, [r3, #20]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	3304      	adds	r3, #4
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d008      	beq.n	8012b52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012b40:	4b07      	ldr	r3, [pc, #28]	@ (8012b60 <ip4_input_accept+0x50>)
 8012b42:	695b      	ldr	r3, [r3, #20]
 8012b44:	6879      	ldr	r1, [r7, #4]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 fa26 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8012b4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d001      	beq.n	8012b56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012b52:	2301      	movs	r3, #1
 8012b54:	e000      	b.n	8012b58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3708      	adds	r7, #8
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	200050b8 	.word	0x200050b8

08012b64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b088      	sub	sp, #32
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	091b      	lsrs	r3, r3, #4
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b04      	cmp	r3, #4
 8012b82:	d004      	beq.n	8012b8e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7f6 f995 	bl	8008eb4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e123      	b.n	8012dd6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	f003 030f 	and.w	r3, r3, #15
 8012b96:	b2db      	uxtb	r3, r3
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	885b      	ldrh	r3, [r3, #2]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7f4 fdf7 	bl	8007798 <lwip_htons>
 8012baa:	4603      	mov	r3, r0
 8012bac:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	891b      	ldrh	r3, [r3, #8]
 8012bb2:	8a3a      	ldrh	r2, [r7, #16]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d204      	bcs.n	8012bc2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012bb8:	8a3b      	ldrh	r3, [r7, #16]
 8012bba:	4619      	mov	r1, r3
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7f5 fff3 	bl	8008ba8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	895b      	ldrh	r3, [r3, #10]
 8012bc6:	8a7a      	ldrh	r2, [r7, #18]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d807      	bhi.n	8012bdc <ip4_input+0x78>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	891b      	ldrh	r3, [r3, #8]
 8012bd0:	8a3a      	ldrh	r2, [r7, #16]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d802      	bhi.n	8012bdc <ip4_input+0x78>
 8012bd6:	8a7b      	ldrh	r3, [r7, #18]
 8012bd8:	2b13      	cmp	r3, #19
 8012bda:	d804      	bhi.n	8012be6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7f6 f969 	bl	8008eb4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e0f7      	b.n	8012dd6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	691b      	ldr	r3, [r3, #16]
 8012bea:	4a7d      	ldr	r2, [pc, #500]	@ (8012de0 <ip4_input+0x27c>)
 8012bec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	4a7b      	ldr	r2, [pc, #492]	@ (8012de0 <ip4_input+0x27c>)
 8012bf4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8012de0 <ip4_input+0x27c>)
 8012bf8:	695b      	ldr	r3, [r3, #20]
 8012bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bfe:	2be0      	cmp	r3, #224	@ 0xe0
 8012c00:	d112      	bne.n	8012c28 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	b2db      	uxtb	r3, r3
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d007      	beq.n	8012c22 <ip4_input+0xbe>
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	3304      	adds	r3, #4
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <ip4_input+0xbe>
      netif = inp;
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	61bb      	str	r3, [r7, #24]
 8012c20:	e02a      	b.n	8012c78 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012c22:	2300      	movs	r3, #0
 8012c24:	61bb      	str	r3, [r7, #24]
 8012c26:	e027      	b.n	8012c78 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012c28:	6838      	ldr	r0, [r7, #0]
 8012c2a:	f7ff ff71 	bl	8012b10 <ip4_input_accept>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d002      	beq.n	8012c3a <ip4_input+0xd6>
      netif = inp;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	61bb      	str	r3, [r7, #24]
 8012c38:	e01e      	b.n	8012c78 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012c3e:	4b68      	ldr	r3, [pc, #416]	@ (8012de0 <ip4_input+0x27c>)
 8012c40:	695b      	ldr	r3, [r3, #20]
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c46:	d017      	beq.n	8012c78 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012c48:	4b66      	ldr	r3, [pc, #408]	@ (8012de4 <ip4_input+0x280>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	61bb      	str	r3, [r7, #24]
 8012c4e:	e00e      	b.n	8012c6e <ip4_input+0x10a>
          if (netif == inp) {
 8012c50:	69ba      	ldr	r2, [r7, #24]
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d006      	beq.n	8012c66 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012c58:	69b8      	ldr	r0, [r7, #24]
 8012c5a:	f7ff ff59 	bl	8012b10 <ip4_input_accept>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d108      	bne.n	8012c76 <ip4_input+0x112>
 8012c64:	e000      	b.n	8012c68 <ip4_input+0x104>
            continue;
 8012c66:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	61bb      	str	r3, [r7, #24]
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1ed      	bne.n	8012c50 <ip4_input+0xec>
 8012c74:	e000      	b.n	8012c78 <ip4_input+0x114>
            break;
 8012c76:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d111      	bne.n	8012ca2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	7a5b      	ldrb	r3, [r3, #9]
 8012c82:	2b11      	cmp	r3, #17
 8012c84:	d10d      	bne.n	8012ca2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012c86:	8a7b      	ldrh	r3, [r7, #18]
 8012c88:	69fa      	ldr	r2, [r7, #28]
 8012c8a:	4413      	add	r3, r2
 8012c8c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	885b      	ldrh	r3, [r3, #2]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012c98:	d103      	bne.n	8012ca2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d017      	beq.n	8012cd8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8012de0 <ip4_input+0x27c>)
 8012caa:	691b      	ldr	r3, [r3, #16]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d013      	beq.n	8012cd8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8012de0 <ip4_input+0x27c>)
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	6839      	ldr	r1, [r7, #0]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f000 f96e 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d105      	bne.n	8012cce <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012cc2:	4b47      	ldr	r3, [pc, #284]	@ (8012de0 <ip4_input+0x27c>)
 8012cc4:	691b      	ldr	r3, [r3, #16]
 8012cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012cca:	2be0      	cmp	r3, #224	@ 0xe0
 8012ccc:	d104      	bne.n	8012cd8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7f6 f8f0 	bl	8008eb4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	e07e      	b.n	8012dd6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d104      	bne.n	8012ce8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7f6 f8e8 	bl	8008eb4 <pbuf_free>
    return ERR_OK;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	e076      	b.n	8012dd6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	88db      	ldrh	r3, [r3, #6]
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	461a      	mov	r2, r3
 8012cf0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d00b      	beq.n	8012d12 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fdbc 	bl	8013878 <ip4_reass>
 8012d00:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d101      	bne.n	8012d0c <ip4_input+0x1a8>
      return ERR_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	e064      	b.n	8012dd6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012d12:	4a33      	ldr	r2, [pc, #204]	@ (8012de0 <ip4_input+0x27c>)
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012d18:	4a31      	ldr	r2, [pc, #196]	@ (8012de0 <ip4_input+0x27c>)
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012d1e:	4a30      	ldr	r2, [pc, #192]	@ (8012de0 <ip4_input+0x27c>)
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	f003 030f 	and.w	r3, r3, #15
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	461a      	mov	r2, r3
 8012d34:	4b2a      	ldr	r3, [pc, #168]	@ (8012de0 <ip4_input+0x27c>)
 8012d36:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012d38:	8a7b      	ldrh	r3, [r7, #18]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7f6 f833 	bl	8008da8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	7a5b      	ldrb	r3, [r3, #9]
 8012d46:	2b11      	cmp	r3, #17
 8012d48:	d006      	beq.n	8012d58 <ip4_input+0x1f4>
 8012d4a:	2b11      	cmp	r3, #17
 8012d4c:	dc13      	bgt.n	8012d76 <ip4_input+0x212>
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	d00c      	beq.n	8012d6c <ip4_input+0x208>
 8012d52:	2b06      	cmp	r3, #6
 8012d54:	d005      	beq.n	8012d62 <ip4_input+0x1fe>
 8012d56:	e00e      	b.n	8012d76 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012d58:	6839      	ldr	r1, [r7, #0]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7fc faee 	bl	800f33c <udp_input>
        break;
 8012d60:	e026      	b.n	8012db0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7f7 fedf 	bl	800ab28 <tcp_input>
        break;
 8012d6a:	e021      	b.n	8012db0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012d6c:	6839      	ldr	r1, [r7, #0]
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f7ff fcd0 	bl	8012714 <icmp_input>
        break;
 8012d74:	e01c      	b.n	8012db0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d76:	4b1a      	ldr	r3, [pc, #104]	@ (8012de0 <ip4_input+0x27c>)
 8012d78:	695b      	ldr	r3, [r3, #20]
 8012d7a:	69b9      	ldr	r1, [r7, #24]
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f000 f90b 	bl	8012f98 <ip4_addr_isbroadcast_u32>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d10f      	bne.n	8012da8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d88:	4b15      	ldr	r3, [pc, #84]	@ (8012de0 <ip4_input+0x27c>)
 8012d8a:	695b      	ldr	r3, [r3, #20]
 8012d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d90:	2be0      	cmp	r3, #224	@ 0xe0
 8012d92:	d009      	beq.n	8012da8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d98:	4619      	mov	r1, r3
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7f6 f877 	bl	8008e8e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012da0:	2102      	movs	r1, #2
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7ff fdba 	bl	801291c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7f6 f883 	bl	8008eb4 <pbuf_free>
        break;
 8012dae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012db0:	4b0b      	ldr	r3, [pc, #44]	@ (8012de0 <ip4_input+0x27c>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012db6:	4b0a      	ldr	r3, [pc, #40]	@ (8012de0 <ip4_input+0x27c>)
 8012db8:	2200      	movs	r2, #0
 8012dba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012dbc:	4b08      	ldr	r3, [pc, #32]	@ (8012de0 <ip4_input+0x27c>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012dc2:	4b07      	ldr	r3, [pc, #28]	@ (8012de0 <ip4_input+0x27c>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012dc8:	4b05      	ldr	r3, [pc, #20]	@ (8012de0 <ip4_input+0x27c>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012dce:	4b04      	ldr	r3, [pc, #16]	@ (8012de0 <ip4_input+0x27c>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012dd4:	2300      	movs	r3, #0
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3720      	adds	r7, #32
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	200050b8 	.word	0x200050b8
 8012de4:	200080e8 	.word	0x200080e8

08012de8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b08a      	sub	sp, #40	@ 0x28
 8012dec:	af04      	add	r7, sp, #16
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
 8012df4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d009      	beq.n	8012e14 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d003      	beq.n	8012e0e <ip4_output_if+0x26>
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d102      	bne.n	8012e14 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e10:	3304      	adds	r3, #4
 8012e12:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012e14:	78fa      	ldrb	r2, [r7, #3]
 8012e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e18:	9302      	str	r3, [sp, #8]
 8012e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	4613      	mov	r3, r2
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	6979      	ldr	r1, [r7, #20]
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 f805 	bl	8012e3c <ip4_output_if_src>
 8012e32:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3718      	adds	r7, #24
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b088      	sub	sp, #32
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7b9b      	ldrb	r3, [r3, #14]
 8012e4e:	2b01      	cmp	r3, #1
 8012e50:	d006      	beq.n	8012e60 <ip4_output_if_src+0x24>
 8012e52:	4b4b      	ldr	r3, [pc, #300]	@ (8012f80 <ip4_output_if_src+0x144>)
 8012e54:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012e58:	494a      	ldr	r1, [pc, #296]	@ (8012f84 <ip4_output_if_src+0x148>)
 8012e5a:	484b      	ldr	r0, [pc, #300]	@ (8012f88 <ip4_output_if_src+0x14c>)
 8012e5c:	f002 f8d2 	bl	8015004 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d060      	beq.n	8012f28 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012e66:	2314      	movs	r3, #20
 8012e68:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012e6a:	2114      	movs	r1, #20
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f7f5 ff8b 	bl	8008d88 <pbuf_add_header>
 8012e72:	4603      	mov	r3, r0
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d002      	beq.n	8012e7e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e78:	f06f 0301 	mvn.w	r3, #1
 8012e7c:	e07c      	b.n	8012f78 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	685b      	ldr	r3, [r3, #4]
 8012e82:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	895b      	ldrh	r3, [r3, #10]
 8012e88:	2b13      	cmp	r3, #19
 8012e8a:	d806      	bhi.n	8012e9a <ip4_output_if_src+0x5e>
 8012e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8012f80 <ip4_output_if_src+0x144>)
 8012e8e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012e92:	493e      	ldr	r1, [pc, #248]	@ (8012f8c <ip4_output_if_src+0x150>)
 8012e94:	483c      	ldr	r0, [pc, #240]	@ (8012f88 <ip4_output_if_src+0x14c>)
 8012e96:	f002 f8b5 	bl	8015004 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	78fa      	ldrb	r2, [r7, #3]
 8012e9e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012ea6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012eb0:	8b7b      	ldrh	r3, [r7, #26]
 8012eb2:	089b      	lsrs	r3, r3, #2
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012ec8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	891b      	ldrh	r3, [r3, #8]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f4 fc62 	bl	8007798 <lwip_htons>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	719a      	strb	r2, [r3, #6]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8012f90 <ip4_output_if_src+0x154>)
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7f4 fc54 	bl	8007798 <lwip_htons>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012ef8:	4b25      	ldr	r3, [pc, #148]	@ (8012f90 <ip4_output_if_src+0x154>)
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	3301      	adds	r3, #1
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	4b23      	ldr	r3, [pc, #140]	@ (8012f90 <ip4_output_if_src+0x154>)
 8012f02:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d104      	bne.n	8012f14 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012f0a:	4b22      	ldr	r3, [pc, #136]	@ (8012f94 <ip4_output_if_src+0x158>)
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	60da      	str	r2, [r3, #12]
 8012f12:	e003      	b.n	8012f1c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	729a      	strb	r2, [r3, #10]
 8012f22:	2200      	movs	r2, #0
 8012f24:	72da      	strb	r2, [r3, #11]
 8012f26:	e00f      	b.n	8012f48 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	895b      	ldrh	r3, [r3, #10]
 8012f2c:	2b13      	cmp	r3, #19
 8012f2e:	d802      	bhi.n	8012f36 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012f30:	f06f 0301 	mvn.w	r3, #1
 8012f34:	e020      	b.n	8012f78 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	691b      	ldr	r3, [r3, #16]
 8012f40:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012f42:	f107 0314 	add.w	r3, r7, #20
 8012f46:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00c      	beq.n	8012f6a <ip4_output_if_src+0x12e>
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	891a      	ldrh	r2, [r3, #8]
 8012f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d906      	bls.n	8012f6a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012f60:	68f8      	ldr	r0, [r7, #12]
 8012f62:	f000 fe7d 	bl	8013c60 <ip4_frag>
 8012f66:	4603      	mov	r3, r0
 8012f68:	e006      	b.n	8012f78 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f6c:	695b      	ldr	r3, [r3, #20]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	68f9      	ldr	r1, [r7, #12]
 8012f72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f74:	4798      	blx	r3
 8012f76:	4603      	mov	r3, r0
}
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3720      	adds	r7, #32
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	0801ba6c 	.word	0x0801ba6c
 8012f84:	0801baa0 	.word	0x0801baa0
 8012f88:	0801baac 	.word	0x0801baac
 8012f8c:	0801bad4 	.word	0x0801bad4
 8012f90:	2000827a 	.word	0x2000827a
 8012f94:	0801bf34 	.word	0x0801bf34

08012f98 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b085      	sub	sp, #20
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fac:	d002      	beq.n	8012fb4 <ip4_addr_isbroadcast_u32+0x1c>
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d101      	bne.n	8012fb8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	e02a      	b.n	801300e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012fbe:	f003 0302 	and.w	r3, r3, #2
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d101      	bne.n	8012fca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	e021      	b.n	801300e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	3304      	adds	r3, #4
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d101      	bne.n	8012fda <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e019      	b.n	801300e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012fda:	68fa      	ldr	r2, [r7, #12]
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	3304      	adds	r3, #4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	405a      	eors	r2, r3
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	3308      	adds	r3, #8
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4013      	ands	r3, r2
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10d      	bne.n	801300c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	3308      	adds	r3, #8
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	43da      	mvns	r2, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	3308      	adds	r3, #8
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013004:	429a      	cmp	r2, r3
 8013006:	d101      	bne.n	801300c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013008:	2301      	movs	r3, #1
 801300a:	e000      	b.n	801300e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801300c:	2300      	movs	r3, #0
  }
}
 801300e:	4618      	mov	r0, r3
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr
	...

0801301c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08a      	sub	sp, #40	@ 0x28
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013026:	f107 030c 	add.w	r3, r7, #12
 801302a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	781b      	ldrb	r3, [r3, #0]
 8013030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013034:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013038:	3301      	adds	r3, #1
 801303a:	4a89      	ldr	r2, [pc, #548]	@ (8013260 <ip4addr_aton+0x244>)
 801303c:	4413      	add	r3, r2
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	f003 0304 	and.w	r3, r3, #4
 8013044:	2b00      	cmp	r3, #0
 8013046:	d101      	bne.n	801304c <ip4addr_aton+0x30>
      return 0;
 8013048:	2300      	movs	r3, #0
 801304a:	e105      	b.n	8013258 <ip4addr_aton+0x23c>
    }
    val = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8013050:	230a      	movs	r3, #10
 8013052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8013056:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801305a:	2b30      	cmp	r3, #48	@ 0x30
 801305c:	d11c      	bne.n	8013098 <ip4addr_aton+0x7c>
      c = *++cp;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	3301      	adds	r3, #1
 8013062:	607b      	str	r3, [r7, #4]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801306c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013070:	2b78      	cmp	r3, #120	@ 0x78
 8013072:	d003      	beq.n	801307c <ip4addr_aton+0x60>
 8013074:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013078:	2b58      	cmp	r3, #88	@ 0x58
 801307a:	d10a      	bne.n	8013092 <ip4addr_aton+0x76>
        base = 16;
 801307c:	2310      	movs	r3, #16
 801307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	3301      	adds	r3, #1
 8013086:	607b      	str	r3, [r7, #4]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	781b      	ldrb	r3, [r3, #0]
 801308c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8013090:	e002      	b.n	8013098 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8013092:	2308      	movs	r3, #8
 8013094:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8013098:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801309c:	3301      	adds	r3, #1
 801309e:	4a70      	ldr	r2, [pc, #448]	@ (8013260 <ip4addr_aton+0x244>)
 80130a0:	4413      	add	r3, r2
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	f003 0304 	and.w	r3, r3, #4
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d011      	beq.n	80130d0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80130ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80130b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130b2:	fb03 f202 	mul.w	r2, r3, r2
 80130b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80130ba:	4413      	add	r3, r2
 80130bc:	3b30      	subs	r3, #48	@ 0x30
 80130be:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	3301      	adds	r3, #1
 80130c4:	607b      	str	r3, [r7, #4]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80130ce:	e7e3      	b.n	8013098 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80130d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80130d4:	2b10      	cmp	r3, #16
 80130d6:	d127      	bne.n	8013128 <ip4addr_aton+0x10c>
 80130d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80130dc:	3301      	adds	r3, #1
 80130de:	4a60      	ldr	r2, [pc, #384]	@ (8013260 <ip4addr_aton+0x244>)
 80130e0:	4413      	add	r3, r2
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d01d      	beq.n	8013128 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80130ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ee:	011b      	lsls	r3, r3, #4
 80130f0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80130f4:	f102 010a 	add.w	r1, r2, #10
 80130f8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80130fc:	3201      	adds	r2, #1
 80130fe:	4858      	ldr	r0, [pc, #352]	@ (8013260 <ip4addr_aton+0x244>)
 8013100:	4402      	add	r2, r0
 8013102:	7812      	ldrb	r2, [r2, #0]
 8013104:	f002 0203 	and.w	r2, r2, #3
 8013108:	2a02      	cmp	r2, #2
 801310a:	d101      	bne.n	8013110 <ip4addr_aton+0xf4>
 801310c:	2261      	movs	r2, #97	@ 0x61
 801310e:	e000      	b.n	8013112 <ip4addr_aton+0xf6>
 8013110:	2241      	movs	r2, #65	@ 0x41
 8013112:	1a8a      	subs	r2, r1, r2
 8013114:	4313      	orrs	r3, r2
 8013116:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	3301      	adds	r3, #1
 801311c:	607b      	str	r3, [r7, #4]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8013126:	e7b7      	b.n	8013098 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8013128:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801312c:	2b2e      	cmp	r3, #46	@ 0x2e
 801312e:	d114      	bne.n	801315a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8013130:	f107 030c 	add.w	r3, r7, #12
 8013134:	330c      	adds	r3, #12
 8013136:	69fa      	ldr	r2, [r7, #28]
 8013138:	429a      	cmp	r2, r3
 801313a:	d301      	bcc.n	8013140 <ip4addr_aton+0x124>
        return 0;
 801313c:	2300      	movs	r3, #0
 801313e:	e08b      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	1d1a      	adds	r2, r3, #4
 8013144:	61fa      	str	r2, [r7, #28]
 8013146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013148:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	3301      	adds	r3, #1
 801314e:	607b      	str	r3, [r7, #4]
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8013158:	e76c      	b.n	8013034 <ip4addr_aton+0x18>
    } else {
      break;
 801315a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801315c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00b      	beq.n	801317c <ip4addr_aton+0x160>
 8013164:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013168:	3301      	adds	r3, #1
 801316a:	4a3d      	ldr	r2, [pc, #244]	@ (8013260 <ip4addr_aton+0x244>)
 801316c:	4413      	add	r3, r2
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f003 0308 	and.w	r3, r3, #8
 8013174:	2b00      	cmp	r3, #0
 8013176:	d101      	bne.n	801317c <ip4addr_aton+0x160>
    return 0;
 8013178:	2300      	movs	r3, #0
 801317a:	e06d      	b.n	8013258 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801317c:	f107 030c 	add.w	r3, r7, #12
 8013180:	69fa      	ldr	r2, [r7, #28]
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	109b      	asrs	r3, r3, #2
 8013186:	3301      	adds	r3, #1
 8013188:	2b04      	cmp	r3, #4
 801318a:	d853      	bhi.n	8013234 <ip4addr_aton+0x218>
 801318c:	a201      	add	r2, pc, #4	@ (adr r2, 8013194 <ip4addr_aton+0x178>)
 801318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013192:	bf00      	nop
 8013194:	080131a9 	.word	0x080131a9
 8013198:	08013243 	.word	0x08013243
 801319c:	080131ad 	.word	0x080131ad
 80131a0:	080131cf 	.word	0x080131cf
 80131a4:	080131fd 	.word	0x080131fd

    case 0:
      return 0;       /* initial nondigit */
 80131a8:	2300      	movs	r3, #0
 80131aa:	e055      	b.n	8013258 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80131ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80131b2:	d301      	bcc.n	80131b8 <ip4addr_aton+0x19c>
        return 0;
 80131b4:	2300      	movs	r3, #0
 80131b6:	e04f      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2bff      	cmp	r3, #255	@ 0xff
 80131bc:	d901      	bls.n	80131c2 <ip4addr_aton+0x1a6>
        return 0;
 80131be:	2300      	movs	r3, #0
 80131c0:	e04a      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	061b      	lsls	r3, r3, #24
 80131c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131c8:	4313      	orrs	r3, r2
 80131ca:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80131cc:	e03a      	b.n	8013244 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80131ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131d4:	d301      	bcc.n	80131da <ip4addr_aton+0x1be>
        return 0;
 80131d6:	2300      	movs	r3, #0
 80131d8:	e03e      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2bff      	cmp	r3, #255	@ 0xff
 80131de:	d802      	bhi.n	80131e6 <ip4addr_aton+0x1ca>
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	2bff      	cmp	r3, #255	@ 0xff
 80131e4:	d901      	bls.n	80131ea <ip4addr_aton+0x1ce>
        return 0;
 80131e6:	2300      	movs	r3, #0
 80131e8:	e036      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	061a      	lsls	r2, r3, #24
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	041b      	lsls	r3, r3, #16
 80131f2:	4313      	orrs	r3, r2
 80131f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80131f6:	4313      	orrs	r3, r2
 80131f8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80131fa:	e023      	b.n	8013244 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80131fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fe:	2bff      	cmp	r3, #255	@ 0xff
 8013200:	d901      	bls.n	8013206 <ip4addr_aton+0x1ea>
        return 0;
 8013202:	2300      	movs	r3, #0
 8013204:	e028      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2bff      	cmp	r3, #255	@ 0xff
 801320a:	d805      	bhi.n	8013218 <ip4addr_aton+0x1fc>
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	2bff      	cmp	r3, #255	@ 0xff
 8013210:	d802      	bhi.n	8013218 <ip4addr_aton+0x1fc>
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	2bff      	cmp	r3, #255	@ 0xff
 8013216:	d901      	bls.n	801321c <ip4addr_aton+0x200>
        return 0;
 8013218:	2300      	movs	r3, #0
 801321a:	e01d      	b.n	8013258 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	061a      	lsls	r2, r3, #24
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	041b      	lsls	r3, r3, #16
 8013224:	431a      	orrs	r2, r3
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	021b      	lsls	r3, r3, #8
 801322a:	4313      	orrs	r3, r2
 801322c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801322e:	4313      	orrs	r3, r2
 8013230:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8013232:	e007      	b.n	8013244 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8013234:	4b0b      	ldr	r3, [pc, #44]	@ (8013264 <ip4addr_aton+0x248>)
 8013236:	22f9      	movs	r2, #249	@ 0xf9
 8013238:	490b      	ldr	r1, [pc, #44]	@ (8013268 <ip4addr_aton+0x24c>)
 801323a:	480c      	ldr	r0, [pc, #48]	@ (801326c <ip4addr_aton+0x250>)
 801323c:	f001 fee2 	bl	8015004 <iprintf>
      break;
 8013240:	e000      	b.n	8013244 <ip4addr_aton+0x228>
      break;
 8013242:	bf00      	nop
  }
  if (addr) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d005      	beq.n	8013256 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801324a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801324c:	f7f4 faba 	bl	80077c4 <lwip_htonl>
 8013250:	4602      	mov	r2, r0
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8013256:	2301      	movs	r3, #1
}
 8013258:	4618      	mov	r0, r3
 801325a:	3728      	adds	r7, #40	@ 0x28
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0801c178 	.word	0x0801c178
 8013264:	0801bb04 	.word	0x0801bb04
 8013268:	0801bb40 	.word	0x0801bb40
 801326c:	0801bb4c 	.word	0x0801bb4c

08013270 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013276:	2300      	movs	r3, #0
 8013278:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801327a:	4b12      	ldr	r3, [pc, #72]	@ (80132c4 <ip_reass_tmr+0x54>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013280:	e018      	b.n	80132b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	7fdb      	ldrb	r3, [r3, #31]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d00b      	beq.n	80132a2 <ip_reass_tmr+0x32>
      r->timer--;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	7fdb      	ldrb	r3, [r3, #31]
 801328e:	3b01      	subs	r3, #1
 8013290:	b2da      	uxtb	r2, r3
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	60fb      	str	r3, [r7, #12]
 80132a0:	e008      	b.n	80132b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80132ac:	68b9      	ldr	r1, [r7, #8]
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f000 f80a 	bl	80132c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d1e3      	bne.n	8013282 <ip_reass_tmr+0x12>
    }
  }
}
 80132ba:	bf00      	nop
 80132bc:	bf00      	nop
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	2000827c 	.word	0x2000827c

080132c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b088      	sub	sp, #32
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80132d6:	683a      	ldr	r2, [r7, #0]
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d105      	bne.n	80132ea <ip_reass_free_complete_datagram+0x22>
 80132de:	4b45      	ldr	r3, [pc, #276]	@ (80133f4 <ip_reass_free_complete_datagram+0x12c>)
 80132e0:	22ab      	movs	r2, #171	@ 0xab
 80132e2:	4945      	ldr	r1, [pc, #276]	@ (80133f8 <ip_reass_free_complete_datagram+0x130>)
 80132e4:	4845      	ldr	r0, [pc, #276]	@ (80133fc <ip_reass_free_complete_datagram+0x134>)
 80132e6:	f001 fe8d 	bl	8015004 <iprintf>
  if (prev != NULL) {
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00a      	beq.n	8013306 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80132f0:	683b      	ldr	r3, [r7, #0]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d005      	beq.n	8013306 <ip_reass_free_complete_datagram+0x3e>
 80132fa:	4b3e      	ldr	r3, [pc, #248]	@ (80133f4 <ip_reass_free_complete_datagram+0x12c>)
 80132fc:	22ad      	movs	r2, #173	@ 0xad
 80132fe:	4940      	ldr	r1, [pc, #256]	@ (8013400 <ip_reass_free_complete_datagram+0x138>)
 8013300:	483e      	ldr	r0, [pc, #248]	@ (80133fc <ip_reass_free_complete_datagram+0x134>)
 8013302:	f001 fe7f 	bl	8015004 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	685b      	ldr	r3, [r3, #4]
 801330c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	889b      	ldrh	r3, [r3, #4]
 8013312:	b29b      	uxth	r3, r3
 8013314:	2b00      	cmp	r3, #0
 8013316:	d12a      	bne.n	801336e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	681a      	ldr	r2, [r3, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	6858      	ldr	r0, [r3, #4]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	3308      	adds	r3, #8
 801332e:	2214      	movs	r2, #20
 8013330:	4619      	mov	r1, r3
 8013332:	f002 f88c 	bl	801544e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013336:	2101      	movs	r1, #1
 8013338:	69b8      	ldr	r0, [r7, #24]
 801333a:	f7ff faff 	bl	801293c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801333e:	69b8      	ldr	r0, [r7, #24]
 8013340:	f7f5 fe40 	bl	8008fc4 <pbuf_clen>
 8013344:	4603      	mov	r3, r0
 8013346:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013348:	8bfa      	ldrh	r2, [r7, #30]
 801334a:	8a7b      	ldrh	r3, [r7, #18]
 801334c:	4413      	add	r3, r2
 801334e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013352:	db05      	blt.n	8013360 <ip_reass_free_complete_datagram+0x98>
 8013354:	4b27      	ldr	r3, [pc, #156]	@ (80133f4 <ip_reass_free_complete_datagram+0x12c>)
 8013356:	22bc      	movs	r2, #188	@ 0xbc
 8013358:	492a      	ldr	r1, [pc, #168]	@ (8013404 <ip_reass_free_complete_datagram+0x13c>)
 801335a:	4828      	ldr	r0, [pc, #160]	@ (80133fc <ip_reass_free_complete_datagram+0x134>)
 801335c:	f001 fe52 	bl	8015004 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013360:	8bfa      	ldrh	r2, [r7, #30]
 8013362:	8a7b      	ldrh	r3, [r7, #18]
 8013364:	4413      	add	r3, r2
 8013366:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013368:	69b8      	ldr	r0, [r7, #24]
 801336a:	f7f5 fda3 	bl	8008eb4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013374:	e01f      	b.n	80133b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	f7f5 fe1c 	bl	8008fc4 <pbuf_clen>
 801338c:	4603      	mov	r3, r0
 801338e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013390:	8bfa      	ldrh	r2, [r7, #30]
 8013392:	8a7b      	ldrh	r3, [r7, #18]
 8013394:	4413      	add	r3, r2
 8013396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801339a:	db05      	blt.n	80133a8 <ip_reass_free_complete_datagram+0xe0>
 801339c:	4b15      	ldr	r3, [pc, #84]	@ (80133f4 <ip_reass_free_complete_datagram+0x12c>)
 801339e:	22cc      	movs	r2, #204	@ 0xcc
 80133a0:	4918      	ldr	r1, [pc, #96]	@ (8013404 <ip_reass_free_complete_datagram+0x13c>)
 80133a2:	4816      	ldr	r0, [pc, #88]	@ (80133fc <ip_reass_free_complete_datagram+0x134>)
 80133a4:	f001 fe2e 	bl	8015004 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80133a8:	8bfa      	ldrh	r2, [r7, #30]
 80133aa:	8a7b      	ldrh	r3, [r7, #18]
 80133ac:	4413      	add	r3, r2
 80133ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f7f5 fd7f 	bl	8008eb4 <pbuf_free>
  while (p != NULL) {
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d1dc      	bne.n	8013376 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80133bc:	6839      	ldr	r1, [r7, #0]
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f000 f8c2 	bl	8013548 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80133c4:	4b10      	ldr	r3, [pc, #64]	@ (8013408 <ip_reass_free_complete_datagram+0x140>)
 80133c6:	881b      	ldrh	r3, [r3, #0]
 80133c8:	8bfa      	ldrh	r2, [r7, #30]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d905      	bls.n	80133da <ip_reass_free_complete_datagram+0x112>
 80133ce:	4b09      	ldr	r3, [pc, #36]	@ (80133f4 <ip_reass_free_complete_datagram+0x12c>)
 80133d0:	22d2      	movs	r2, #210	@ 0xd2
 80133d2:	490e      	ldr	r1, [pc, #56]	@ (801340c <ip_reass_free_complete_datagram+0x144>)
 80133d4:	4809      	ldr	r0, [pc, #36]	@ (80133fc <ip_reass_free_complete_datagram+0x134>)
 80133d6:	f001 fe15 	bl	8015004 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80133da:	4b0b      	ldr	r3, [pc, #44]	@ (8013408 <ip_reass_free_complete_datagram+0x140>)
 80133dc:	881a      	ldrh	r2, [r3, #0]
 80133de:	8bfb      	ldrh	r3, [r7, #30]
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	4b08      	ldr	r3, [pc, #32]	@ (8013408 <ip_reass_free_complete_datagram+0x140>)
 80133e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80133e8:	8bfb      	ldrh	r3, [r7, #30]
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3720      	adds	r7, #32
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	0801bb74 	.word	0x0801bb74
 80133f8:	0801bbb0 	.word	0x0801bbb0
 80133fc:	0801bbbc 	.word	0x0801bbbc
 8013400:	0801bbe4 	.word	0x0801bbe4
 8013404:	0801bbf8 	.word	0x0801bbf8
 8013408:	20008280 	.word	0x20008280
 801340c:	0801bc18 	.word	0x0801bc18

08013410 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b08a      	sub	sp, #40	@ 0x28
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801341a:	2300      	movs	r3, #0
 801341c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801341e:	2300      	movs	r3, #0
 8013420:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013422:	2300      	movs	r3, #0
 8013424:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013426:	2300      	movs	r3, #0
 8013428:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801342a:	2300      	movs	r3, #0
 801342c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801342e:	4b28      	ldr	r3, [pc, #160]	@ (80134d0 <ip_reass_remove_oldest_datagram+0xc0>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013434:	e030      	b.n	8013498 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013438:	695a      	ldr	r2, [r3, #20]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	429a      	cmp	r2, r3
 8013440:	d10c      	bne.n	801345c <ip_reass_remove_oldest_datagram+0x4c>
 8013442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013444:	699a      	ldr	r2, [r3, #24]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	691b      	ldr	r3, [r3, #16]
 801344a:	429a      	cmp	r2, r3
 801344c:	d106      	bne.n	801345c <ip_reass_remove_oldest_datagram+0x4c>
 801344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013450:	899a      	ldrh	r2, [r3, #12]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	889b      	ldrh	r3, [r3, #4]
 8013456:	b29b      	uxth	r3, r3
 8013458:	429a      	cmp	r2, r3
 801345a:	d014      	beq.n	8013486 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	3301      	adds	r3, #1
 8013460:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d104      	bne.n	8013472 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	61bb      	str	r3, [r7, #24]
 8013470:	e009      	b.n	8013486 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013474:	7fda      	ldrb	r2, [r3, #31]
 8013476:	6a3b      	ldr	r3, [r7, #32]
 8013478:	7fdb      	ldrb	r3, [r3, #31]
 801347a:	429a      	cmp	r2, r3
 801347c:	d803      	bhi.n	8013486 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013480:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d001      	beq.n	8013492 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013490:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349a:	2b00      	cmp	r3, #0
 801349c:	d1cb      	bne.n	8013436 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801349e:	6a3b      	ldr	r3, [r7, #32]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d008      	beq.n	80134b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80134a4:	69b9      	ldr	r1, [r7, #24]
 80134a6:	6a38      	ldr	r0, [r7, #32]
 80134a8:	f7ff ff0e 	bl	80132c8 <ip_reass_free_complete_datagram>
 80134ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80134ae:	697a      	ldr	r2, [r7, #20]
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	4413      	add	r3, r2
 80134b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	da02      	bge.n	80134c4 <ip_reass_remove_oldest_datagram+0xb4>
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	2b01      	cmp	r3, #1
 80134c2:	dcac      	bgt.n	801341e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80134c4:	697b      	ldr	r3, [r7, #20]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3728      	adds	r7, #40	@ 0x28
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	2000827c 	.word	0x2000827c

080134d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134de:	2004      	movs	r0, #4
 80134e0:	f7f4 fdf6 	bl	80080d0 <memp_malloc>
 80134e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d110      	bne.n	801350e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f7ff ff8e 	bl	8013410 <ip_reass_remove_oldest_datagram>
 80134f4:	4602      	mov	r2, r0
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	4293      	cmp	r3, r2
 80134fa:	dc03      	bgt.n	8013504 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80134fc:	2004      	movs	r0, #4
 80134fe:	f7f4 fde7 	bl	80080d0 <memp_malloc>
 8013502:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d101      	bne.n	801350e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801350a:	2300      	movs	r3, #0
 801350c:	e016      	b.n	801353c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801350e:	2220      	movs	r2, #32
 8013510:	2100      	movs	r1, #0
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f001 ff0a 	bl	801532c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	220f      	movs	r2, #15
 801351c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801351e:	4b09      	ldr	r3, [pc, #36]	@ (8013544 <ip_reass_enqueue_new_datagram+0x70>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013526:	4a07      	ldr	r2, [pc, #28]	@ (8013544 <ip_reass_enqueue_new_datagram+0x70>)
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	3308      	adds	r3, #8
 8013530:	2214      	movs	r2, #20
 8013532:	6879      	ldr	r1, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	f001 ff8a 	bl	801544e <memcpy>
  return ipr;
 801353a:	68fb      	ldr	r3, [r7, #12]
}
 801353c:	4618      	mov	r0, r3
 801353e:	3710      	adds	r7, #16
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	2000827c 	.word	0x2000827c

08013548 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013552:	4b10      	ldr	r3, [pc, #64]	@ (8013594 <ip_reass_dequeue_datagram+0x4c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	687a      	ldr	r2, [r7, #4]
 8013558:	429a      	cmp	r2, r3
 801355a:	d104      	bne.n	8013566 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a0c      	ldr	r2, [pc, #48]	@ (8013594 <ip_reass_dequeue_datagram+0x4c>)
 8013562:	6013      	str	r3, [r2, #0]
 8013564:	e00d      	b.n	8013582 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d106      	bne.n	801357a <ip_reass_dequeue_datagram+0x32>
 801356c:	4b0a      	ldr	r3, [pc, #40]	@ (8013598 <ip_reass_dequeue_datagram+0x50>)
 801356e:	f240 1245 	movw	r2, #325	@ 0x145
 8013572:	490a      	ldr	r1, [pc, #40]	@ (801359c <ip_reass_dequeue_datagram+0x54>)
 8013574:	480a      	ldr	r0, [pc, #40]	@ (80135a0 <ip_reass_dequeue_datagram+0x58>)
 8013576:	f001 fd45 	bl	8015004 <iprintf>
    prev->next = ipr->next;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013582:	6879      	ldr	r1, [r7, #4]
 8013584:	2004      	movs	r0, #4
 8013586:	f7f4 fe13 	bl	80081b0 <memp_free>
}
 801358a:	bf00      	nop
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	2000827c 	.word	0x2000827c
 8013598:	0801bb74 	.word	0x0801bb74
 801359c:	0801bc3c 	.word	0x0801bc3c
 80135a0:	0801bbbc 	.word	0x0801bbbc

080135a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b08c      	sub	sp, #48	@ 0x30
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80135b0:	2300      	movs	r3, #0
 80135b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80135b4:	2301      	movs	r3, #1
 80135b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	885b      	ldrh	r3, [r3, #2]
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f4 f8e7 	bl	8007798 <lwip_htons>
 80135ca:	4603      	mov	r3, r0
 80135cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	f003 030f 	and.w	r3, r3, #15
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80135dc:	7e7b      	ldrb	r3, [r7, #25]
 80135de:	b29b      	uxth	r3, r3
 80135e0:	8b7a      	ldrh	r2, [r7, #26]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d202      	bcs.n	80135ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135e6:	f04f 33ff 	mov.w	r3, #4294967295
 80135ea:	e135      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80135ec:	7e7b      	ldrb	r3, [r7, #25]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	8b7a      	ldrh	r2, [r7, #26]
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	88db      	ldrh	r3, [r3, #6]
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7f4 f8cb 	bl	8007798 <lwip_htons>
 8013602:	4603      	mov	r3, r0
 8013604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013608:	b29b      	uxth	r3, r3
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013616:	2200      	movs	r2, #0
 8013618:	701a      	strb	r2, [r3, #0]
 801361a:	2200      	movs	r2, #0
 801361c:	705a      	strb	r2, [r3, #1]
 801361e:	2200      	movs	r2, #0
 8013620:	709a      	strb	r2, [r3, #2]
 8013622:	2200      	movs	r2, #0
 8013624:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013628:	8afa      	ldrh	r2, [r7, #22]
 801362a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801362c:	8afa      	ldrh	r2, [r7, #22]
 801362e:	8b7b      	ldrh	r3, [r7, #26]
 8013630:	4413      	add	r3, r2
 8013632:	b29a      	uxth	r2, r3
 8013634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013636:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363a:	88db      	ldrh	r3, [r3, #6]
 801363c:	b29b      	uxth	r3, r3
 801363e:	8afa      	ldrh	r2, [r7, #22]
 8013640:	429a      	cmp	r2, r3
 8013642:	d902      	bls.n	801364a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013644:	f04f 33ff 	mov.w	r3, #4294967295
 8013648:	e106      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	685b      	ldr	r3, [r3, #4]
 801364e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013650:	e068      	b.n	8013724 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365a:	889b      	ldrh	r3, [r3, #4]
 801365c:	b29a      	uxth	r2, r3
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	889b      	ldrh	r3, [r3, #4]
 8013662:	b29b      	uxth	r3, r3
 8013664:	429a      	cmp	r2, r3
 8013666:	d235      	bcs.n	80136d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801366c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013670:	2b00      	cmp	r3, #0
 8013672:	d020      	beq.n	80136b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013676:	889b      	ldrh	r3, [r3, #4]
 8013678:	b29a      	uxth	r2, r3
 801367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801367c:	88db      	ldrh	r3, [r3, #6]
 801367e:	b29b      	uxth	r3, r3
 8013680:	429a      	cmp	r2, r3
 8013682:	d307      	bcc.n	8013694 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013686:	88db      	ldrh	r3, [r3, #6]
 8013688:	b29a      	uxth	r2, r3
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	889b      	ldrh	r3, [r3, #4]
 801368e:	b29b      	uxth	r3, r3
 8013690:	429a      	cmp	r2, r3
 8013692:	d902      	bls.n	801369a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013694:	f04f 33ff 	mov.w	r3, #4294967295
 8013698:	e0de      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80136a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136a2:	88db      	ldrh	r3, [r3, #6]
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a8:	889b      	ldrh	r3, [r3, #4]
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d03d      	beq.n	801372c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136b0:	2300      	movs	r3, #0
 80136b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80136b4:	e03a      	b.n	801372c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80136b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b8:	88db      	ldrh	r3, [r3, #6]
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	889b      	ldrh	r3, [r3, #4]
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d902      	bls.n	80136cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136c6:	f04f 33ff 	mov.w	r3, #4294967295
 80136ca:	e0c5      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	68ba      	ldr	r2, [r7, #8]
 80136d0:	605a      	str	r2, [r3, #4]
      break;
 80136d2:	e02b      	b.n	801372c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80136d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d6:	889b      	ldrh	r3, [r3, #4]
 80136d8:	b29a      	uxth	r2, r3
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	889b      	ldrh	r3, [r3, #4]
 80136de:	b29b      	uxth	r3, r3
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d102      	bne.n	80136ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136e4:	f04f 33ff 	mov.w	r3, #4294967295
 80136e8:	e0b6      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80136ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ec:	889b      	ldrh	r3, [r3, #4]
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	88db      	ldrh	r3, [r3, #6]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d202      	bcs.n	8013700 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136fa:	f04f 33ff 	mov.w	r3, #4294967295
 80136fe:	e0ab      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013702:	2b00      	cmp	r3, #0
 8013704:	d009      	beq.n	801371a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013708:	88db      	ldrh	r3, [r3, #6]
 801370a:	b29a      	uxth	r2, r3
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	889b      	ldrh	r3, [r3, #4]
 8013710:	b29b      	uxth	r3, r3
 8013712:	429a      	cmp	r2, r3
 8013714:	d001      	beq.n	801371a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013716:	2300      	movs	r3, #0
 8013718:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013726:	2b00      	cmp	r3, #0
 8013728:	d193      	bne.n	8013652 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801372a:	e000      	b.n	801372e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801372c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013730:	2b00      	cmp	r3, #0
 8013732:	d12d      	bne.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013736:	2b00      	cmp	r3, #0
 8013738:	d01c      	beq.n	8013774 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373c:	88db      	ldrh	r3, [r3, #6]
 801373e:	b29a      	uxth	r2, r3
 8013740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013742:	889b      	ldrh	r3, [r3, #4]
 8013744:	b29b      	uxth	r3, r3
 8013746:	429a      	cmp	r2, r3
 8013748:	d906      	bls.n	8013758 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801374a:	4b45      	ldr	r3, [pc, #276]	@ (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801374c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013750:	4944      	ldr	r1, [pc, #272]	@ (8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013752:	4845      	ldr	r0, [pc, #276]	@ (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013754:	f001 fc56 	bl	8015004 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801375a:	68ba      	ldr	r2, [r7, #8]
 801375c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801375e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013760:	88db      	ldrh	r3, [r3, #6]
 8013762:	b29a      	uxth	r2, r3
 8013764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013766:	889b      	ldrh	r3, [r3, #4]
 8013768:	b29b      	uxth	r3, r3
 801376a:	429a      	cmp	r2, r3
 801376c:	d010      	beq.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801376e:	2300      	movs	r3, #0
 8013770:	623b      	str	r3, [r7, #32]
 8013772:	e00d      	b.n	8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d006      	beq.n	801378a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801377c:	4b38      	ldr	r3, [pc, #224]	@ (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801377e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013782:	493a      	ldr	r1, [pc, #232]	@ (801386c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013784:	4838      	ldr	r0, [pc, #224]	@ (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013786:	f001 fc3d 	bl	8015004 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	68ba      	ldr	r2, [r7, #8]
 801378e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d105      	bne.n	80137a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	7f9b      	ldrb	r3, [r3, #30]
 801379a:	f003 0301 	and.w	r3, r3, #1
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d059      	beq.n	8013856 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80137a2:	6a3b      	ldr	r3, [r7, #32]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d04f      	beq.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d006      	beq.n	80137be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	889b      	ldrh	r3, [r3, #4]
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d002      	beq.n	80137c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	623b      	str	r3, [r7, #32]
 80137c2:	e041      	b.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80137c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80137c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80137ce:	e012      	b.n	80137f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80137d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80137d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137d8:	88db      	ldrh	r3, [r3, #6]
 80137da:	b29a      	uxth	r2, r3
 80137dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137de:	889b      	ldrh	r3, [r3, #4]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d002      	beq.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80137e6:	2300      	movs	r3, #0
 80137e8:	623b      	str	r3, [r7, #32]
            break;
 80137ea:	e007      	b.n	80137fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80137ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80137f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d1e9      	bne.n	80137d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80137fc:	6a3b      	ldr	r3, [r7, #32]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d022      	beq.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d106      	bne.n	8013818 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801380a:	4b15      	ldr	r3, [pc, #84]	@ (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801380c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013810:	4917      	ldr	r1, [pc, #92]	@ (8013870 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013812:	4815      	ldr	r0, [pc, #84]	@ (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013814:	f001 fbf6 	bl	8015004 <iprintf>
          LWIP_ASSERT("sanity check",
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013820:	429a      	cmp	r2, r3
 8013822:	d106      	bne.n	8013832 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013824:	4b0e      	ldr	r3, [pc, #56]	@ (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013826:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801382a:	4911      	ldr	r1, [pc, #68]	@ (8013870 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801382c:	480e      	ldr	r0, [pc, #56]	@ (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801382e:	f001 fbe9 	bl	8015004 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d006      	beq.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801383a:	4b09      	ldr	r3, [pc, #36]	@ (8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801383c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013840:	490c      	ldr	r1, [pc, #48]	@ (8013874 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013842:	4809      	ldr	r0, [pc, #36]	@ (8013868 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013844:	f001 fbde 	bl	8015004 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	2b00      	cmp	r3, #0
 801384c:	bf14      	ite	ne
 801384e:	2301      	movne	r3, #1
 8013850:	2300      	moveq	r3, #0
 8013852:	b2db      	uxtb	r3, r3
 8013854:	e000      	b.n	8013858 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013856:	2300      	movs	r3, #0
}
 8013858:	4618      	mov	r0, r3
 801385a:	3730      	adds	r7, #48	@ 0x30
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	0801bb74 	.word	0x0801bb74
 8013864:	0801bc58 	.word	0x0801bc58
 8013868:	0801bbbc 	.word	0x0801bbbc
 801386c:	0801bc78 	.word	0x0801bc78
 8013870:	0801bcb0 	.word	0x0801bcb0
 8013874:	0801bcc0 	.word	0x0801bcc0

08013878 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b08e      	sub	sp, #56	@ 0x38
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	f003 030f 	and.w	r3, r3, #15
 801388e:	b2db      	uxtb	r3, r3
 8013890:	009b      	lsls	r3, r3, #2
 8013892:	b2db      	uxtb	r3, r3
 8013894:	2b14      	cmp	r3, #20
 8013896:	f040 8171 	bne.w	8013b7c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801389c:	88db      	ldrh	r3, [r3, #6]
 801389e:	b29b      	uxth	r3, r3
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7f3 ff79 	bl	8007798 <lwip_htons>
 80138a6:	4603      	mov	r3, r0
 80138a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80138b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138b4:	885b      	ldrh	r3, [r3, #2]
 80138b6:	b29b      	uxth	r3, r3
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7f3 ff6d 	bl	8007798 <lwip_htons>
 80138be:	4603      	mov	r3, r0
 80138c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80138c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	f003 030f 	and.w	r3, r3, #15
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80138d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80138da:	429a      	cmp	r2, r3
 80138dc:	f0c0 8150 	bcc.w	8013b80 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80138e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7f5 fb69 	bl	8008fc4 <pbuf_clen>
 80138f2:	4603      	mov	r3, r0
 80138f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80138f6:	4b8c      	ldr	r3, [pc, #560]	@ (8013b28 <ip4_reass+0x2b0>)
 80138f8:	881b      	ldrh	r3, [r3, #0]
 80138fa:	461a      	mov	r2, r3
 80138fc:	8c3b      	ldrh	r3, [r7, #32]
 80138fe:	4413      	add	r3, r2
 8013900:	2b0a      	cmp	r3, #10
 8013902:	dd10      	ble.n	8013926 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013904:	8c3b      	ldrh	r3, [r7, #32]
 8013906:	4619      	mov	r1, r3
 8013908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801390a:	f7ff fd81 	bl	8013410 <ip_reass_remove_oldest_datagram>
 801390e:	4603      	mov	r3, r0
 8013910:	2b00      	cmp	r3, #0
 8013912:	f000 8137 	beq.w	8013b84 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013916:	4b84      	ldr	r3, [pc, #528]	@ (8013b28 <ip4_reass+0x2b0>)
 8013918:	881b      	ldrh	r3, [r3, #0]
 801391a:	461a      	mov	r2, r3
 801391c:	8c3b      	ldrh	r3, [r7, #32]
 801391e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013920:	2b0a      	cmp	r3, #10
 8013922:	f300 812f 	bgt.w	8013b84 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013926:	4b81      	ldr	r3, [pc, #516]	@ (8013b2c <ip4_reass+0x2b4>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	633b      	str	r3, [r7, #48]	@ 0x30
 801392c:	e015      	b.n	801395a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013930:	695a      	ldr	r2, [r3, #20]
 8013932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	429a      	cmp	r2, r3
 8013938:	d10c      	bne.n	8013954 <ip4_reass+0xdc>
 801393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801393c:	699a      	ldr	r2, [r3, #24]
 801393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013940:	691b      	ldr	r3, [r3, #16]
 8013942:	429a      	cmp	r2, r3
 8013944:	d106      	bne.n	8013954 <ip4_reass+0xdc>
 8013946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013948:	899a      	ldrh	r2, [r3, #12]
 801394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394c:	889b      	ldrh	r3, [r3, #4]
 801394e:	b29b      	uxth	r3, r3
 8013950:	429a      	cmp	r2, r3
 8013952:	d006      	beq.n	8013962 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	633b      	str	r3, [r7, #48]	@ 0x30
 801395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1e6      	bne.n	801392e <ip4_reass+0xb6>
 8013960:	e000      	b.n	8013964 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013962:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013966:	2b00      	cmp	r3, #0
 8013968:	d109      	bne.n	801397e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801396a:	8c3b      	ldrh	r3, [r7, #32]
 801396c:	4619      	mov	r1, r3
 801396e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013970:	f7ff fdb0 	bl	80134d4 <ip_reass_enqueue_new_datagram>
 8013974:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013978:	2b00      	cmp	r3, #0
 801397a:	d11c      	bne.n	80139b6 <ip4_reass+0x13e>
      goto nullreturn;
 801397c:	e105      	b.n	8013b8a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013980:	88db      	ldrh	r3, [r3, #6]
 8013982:	b29b      	uxth	r3, r3
 8013984:	4618      	mov	r0, r3
 8013986:	f7f3 ff07 	bl	8007798 <lwip_htons>
 801398a:	4603      	mov	r3, r0
 801398c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013990:	2b00      	cmp	r3, #0
 8013992:	d110      	bne.n	80139b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013996:	89db      	ldrh	r3, [r3, #14]
 8013998:	4618      	mov	r0, r3
 801399a:	f7f3 fefd 	bl	8007798 <lwip_htons>
 801399e:	4603      	mov	r3, r0
 80139a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d006      	beq.n	80139b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80139a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139aa:	3308      	adds	r3, #8
 80139ac:	2214      	movs	r2, #20
 80139ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80139b0:	4618      	mov	r0, r3
 80139b2:	f001 fd4c 	bl	801544e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80139b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b8:	88db      	ldrh	r3, [r3, #6]
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	f003 0320 	and.w	r3, r3, #32
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	bf0c      	ite	eq
 80139c4:	2301      	moveq	r3, #1
 80139c6:	2300      	movne	r3, #0
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80139cc:	69fb      	ldr	r3, [r7, #28]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d00e      	beq.n	80139f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80139d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80139d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80139d6:	4413      	add	r3, r2
 80139d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80139da:	8b7a      	ldrh	r2, [r7, #26]
 80139dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80139de:	429a      	cmp	r2, r3
 80139e0:	f0c0 80a0 	bcc.w	8013b24 <ip4_reass+0x2ac>
 80139e4:	8b7b      	ldrh	r3, [r7, #26]
 80139e6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80139ea:	4293      	cmp	r3, r2
 80139ec:	f200 809a 	bhi.w	8013b24 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80139f0:	69fa      	ldr	r2, [r7, #28]
 80139f2:	6879      	ldr	r1, [r7, #4]
 80139f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139f6:	f7ff fdd5 	bl	80135a4 <ip_reass_chain_frag_into_datagram_and_validate>
 80139fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a02:	f000 809b 	beq.w	8013b3c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013a06:	4b48      	ldr	r3, [pc, #288]	@ (8013b28 <ip4_reass+0x2b0>)
 8013a08:	881a      	ldrh	r2, [r3, #0]
 8013a0a:	8c3b      	ldrh	r3, [r7, #32]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	4b45      	ldr	r3, [pc, #276]	@ (8013b28 <ip4_reass+0x2b0>)
 8013a12:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00d      	beq.n	8013a36 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013a1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013a1e:	4413      	add	r3, r2
 8013a20:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a24:	8a7a      	ldrh	r2, [r7, #18]
 8013a26:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2a:	7f9b      	ldrb	r3, [r3, #30]
 8013a2c:	f043 0301 	orr.w	r3, r3, #1
 8013a30:	b2da      	uxtb	r2, r3
 8013a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a34:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d171      	bne.n	8013b20 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a3e:	8b9b      	ldrh	r3, [r3, #28]
 8013a40:	3314      	adds	r3, #20
 8013a42:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	685b      	ldr	r3, [r3, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a58:	3308      	adds	r3, #8
 8013a5a:	2214      	movs	r2, #20
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013a60:	f001 fcf5 	bl	801544e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013a64:	8a3b      	ldrh	r3, [r7, #16]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7f3 fe96 	bl	8007798 <lwip_htons>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	461a      	mov	r2, r3
 8013a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a72:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a76:	2200      	movs	r2, #0
 8013a78:	719a      	strb	r2, [r3, #6]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a80:	2200      	movs	r2, #0
 8013a82:	729a      	strb	r2, [r3, #10]
 8013a84:	2200      	movs	r2, #0
 8013a86:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013a8e:	e00d      	b.n	8013aac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013a96:	2114      	movs	r1, #20
 8013a98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013a9a:	f7f5 f985 	bl	8008da8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013a9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f7f5 fac9 	bl	8009038 <pbuf_cat>
      r = iprh->next_pbuf;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d1ee      	bne.n	8013a90 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8013b2c <ip4_reass+0x2b4>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d102      	bne.n	8013ac2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013abc:	2300      	movs	r3, #0
 8013abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ac0:	e010      	b.n	8013ae4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8013b2c <ip4_reass+0x2b4>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ac8:	e007      	b.n	8013ada <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d006      	beq.n	8013ae2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d1f4      	bne.n	8013aca <ip4_reass+0x252>
 8013ae0:	e000      	b.n	8013ae4 <ip4_reass+0x26c>
          break;
 8013ae2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013ae8:	f7ff fd2e 	bl	8013548 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7f5 fa69 	bl	8008fc4 <pbuf_clen>
 8013af2:	4603      	mov	r3, r0
 8013af4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013af6:	4b0c      	ldr	r3, [pc, #48]	@ (8013b28 <ip4_reass+0x2b0>)
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	8c3a      	ldrh	r2, [r7, #32]
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d906      	bls.n	8013b0e <ip4_reass+0x296>
 8013b00:	4b0b      	ldr	r3, [pc, #44]	@ (8013b30 <ip4_reass+0x2b8>)
 8013b02:	f240 229b 	movw	r2, #667	@ 0x29b
 8013b06:	490b      	ldr	r1, [pc, #44]	@ (8013b34 <ip4_reass+0x2bc>)
 8013b08:	480b      	ldr	r0, [pc, #44]	@ (8013b38 <ip4_reass+0x2c0>)
 8013b0a:	f001 fa7b 	bl	8015004 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013b0e:	4b06      	ldr	r3, [pc, #24]	@ (8013b28 <ip4_reass+0x2b0>)
 8013b10:	881a      	ldrh	r2, [r3, #0]
 8013b12:	8c3b      	ldrh	r3, [r7, #32]
 8013b14:	1ad3      	subs	r3, r2, r3
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	4b03      	ldr	r3, [pc, #12]	@ (8013b28 <ip4_reass+0x2b0>)
 8013b1a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	e038      	b.n	8013b92 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b20:	2300      	movs	r3, #0
 8013b22:	e036      	b.n	8013b92 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013b24:	bf00      	nop
 8013b26:	e00a      	b.n	8013b3e <ip4_reass+0x2c6>
 8013b28:	20008280 	.word	0x20008280
 8013b2c:	2000827c 	.word	0x2000827c
 8013b30:	0801bb74 	.word	0x0801bb74
 8013b34:	0801bce4 	.word	0x0801bce4
 8013b38:	0801bbbc 	.word	0x0801bbbc
    goto nullreturn_ipr;
 8013b3c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d106      	bne.n	8013b52 <ip4_reass+0x2da>
 8013b44:	4b15      	ldr	r3, [pc, #84]	@ (8013b9c <ip4_reass+0x324>)
 8013b46:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8013b4a:	4915      	ldr	r1, [pc, #84]	@ (8013ba0 <ip4_reass+0x328>)
 8013b4c:	4815      	ldr	r0, [pc, #84]	@ (8013ba4 <ip4_reass+0x32c>)
 8013b4e:	f001 fa59 	bl	8015004 <iprintf>
  if (ipr->p == NULL) {
 8013b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b54:	685b      	ldr	r3, [r3, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d116      	bne.n	8013b88 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013b5a:	4b13      	ldr	r3, [pc, #76]	@ (8013ba8 <ip4_reass+0x330>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d006      	beq.n	8013b72 <ip4_reass+0x2fa>
 8013b64:	4b0d      	ldr	r3, [pc, #52]	@ (8013b9c <ip4_reass+0x324>)
 8013b66:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013b6a:	4910      	ldr	r1, [pc, #64]	@ (8013bac <ip4_reass+0x334>)
 8013b6c:	480d      	ldr	r0, [pc, #52]	@ (8013ba4 <ip4_reass+0x32c>)
 8013b6e:	f001 fa49 	bl	8015004 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013b72:	2100      	movs	r1, #0
 8013b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013b76:	f7ff fce7 	bl	8013548 <ip_reass_dequeue_datagram>
 8013b7a:	e006      	b.n	8013b8a <ip4_reass+0x312>
    goto nullreturn;
 8013b7c:	bf00      	nop
 8013b7e:	e004      	b.n	8013b8a <ip4_reass+0x312>
    goto nullreturn;
 8013b80:	bf00      	nop
 8013b82:	e002      	b.n	8013b8a <ip4_reass+0x312>
      goto nullreturn;
 8013b84:	bf00      	nop
 8013b86:	e000      	b.n	8013b8a <ip4_reass+0x312>
  }

nullreturn:
 8013b88:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f7f5 f992 	bl	8008eb4 <pbuf_free>
  return NULL;
 8013b90:	2300      	movs	r3, #0
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3738      	adds	r7, #56	@ 0x38
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	bf00      	nop
 8013b9c:	0801bb74 	.word	0x0801bb74
 8013ba0:	0801bd00 	.word	0x0801bd00
 8013ba4:	0801bbbc 	.word	0x0801bbbc
 8013ba8:	2000827c 	.word	0x2000827c
 8013bac:	0801bd0c 	.word	0x0801bd0c

08013bb0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013bb4:	2005      	movs	r0, #5
 8013bb6:	f7f4 fa8b 	bl	80080d0 <memp_malloc>
 8013bba:	4603      	mov	r3, r0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <ip_frag_free_pbuf_custom_ref+0x1c>
 8013bce:	4b07      	ldr	r3, [pc, #28]	@ (8013bec <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013bd0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013bd4:	4906      	ldr	r1, [pc, #24]	@ (8013bf0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013bd6:	4807      	ldr	r0, [pc, #28]	@ (8013bf4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013bd8:	f001 fa14 	bl	8015004 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013bdc:	6879      	ldr	r1, [r7, #4]
 8013bde:	2005      	movs	r0, #5
 8013be0:	f7f4 fae6 	bl	80081b0 <memp_free>
}
 8013be4:	bf00      	nop
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	0801bb74 	.word	0x0801bb74
 8013bf0:	0801bd2c 	.word	0x0801bd2c
 8013bf4:	0801bbbc 	.word	0x0801bbbc

08013bf8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d106      	bne.n	8013c18 <ipfrag_free_pbuf_custom+0x20>
 8013c0a:	4b11      	ldr	r3, [pc, #68]	@ (8013c50 <ipfrag_free_pbuf_custom+0x58>)
 8013c0c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013c10:	4910      	ldr	r1, [pc, #64]	@ (8013c54 <ipfrag_free_pbuf_custom+0x5c>)
 8013c12:	4811      	ldr	r0, [pc, #68]	@ (8013c58 <ipfrag_free_pbuf_custom+0x60>)
 8013c14:	f001 f9f6 	bl	8015004 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d006      	beq.n	8013c2e <ipfrag_free_pbuf_custom+0x36>
 8013c20:	4b0b      	ldr	r3, [pc, #44]	@ (8013c50 <ipfrag_free_pbuf_custom+0x58>)
 8013c22:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013c26:	490d      	ldr	r1, [pc, #52]	@ (8013c5c <ipfrag_free_pbuf_custom+0x64>)
 8013c28:	480b      	ldr	r0, [pc, #44]	@ (8013c58 <ipfrag_free_pbuf_custom+0x60>)
 8013c2a:	f001 f9eb 	bl	8015004 <iprintf>
  if (pcr->original != NULL) {
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	695b      	ldr	r3, [r3, #20]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d004      	beq.n	8013c40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f5 f93a 	bl	8008eb4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f7ff ffbd 	bl	8013bc0 <ip_frag_free_pbuf_custom_ref>
}
 8013c46:	bf00      	nop
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	0801bb74 	.word	0x0801bb74
 8013c54:	0801bd38 	.word	0x0801bd38
 8013c58:	0801bbbc 	.word	0x0801bbbc
 8013c5c:	0801bd44 	.word	0x0801bd44

08013c60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b094      	sub	sp, #80	@ 0x50
 8013c64:	af02      	add	r7, sp, #8
 8013c66:	60f8      	str	r0, [r7, #12]
 8013c68:	60b9      	str	r1, [r7, #8]
 8013c6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c76:	3b14      	subs	r3, #20
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	da00      	bge.n	8013c7e <ip4_frag+0x1e>
 8013c7c:	3307      	adds	r3, #7
 8013c7e:	10db      	asrs	r3, r3, #3
 8013c80:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013c82:	2314      	movs	r3, #20
 8013c84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	f003 030f 	and.w	r3, r3, #15
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	2b14      	cmp	r3, #20
 8013ca0:	d002      	beq.n	8013ca8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013ca2:	f06f 0305 	mvn.w	r3, #5
 8013ca6:	e110      	b.n	8013eca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	895b      	ldrh	r3, [r3, #10]
 8013cac:	2b13      	cmp	r3, #19
 8013cae:	d809      	bhi.n	8013cc4 <ip4_frag+0x64>
 8013cb0:	4b88      	ldr	r3, [pc, #544]	@ (8013ed4 <ip4_frag+0x274>)
 8013cb2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013cb6:	4988      	ldr	r1, [pc, #544]	@ (8013ed8 <ip4_frag+0x278>)
 8013cb8:	4888      	ldr	r0, [pc, #544]	@ (8013edc <ip4_frag+0x27c>)
 8013cba:	f001 f9a3 	bl	8015004 <iprintf>
 8013cbe:	f06f 0305 	mvn.w	r3, #5
 8013cc2:	e102      	b.n	8013eca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc6:	88db      	ldrh	r3, [r3, #6]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7f3 fd64 	bl	8007798 <lwip_htons>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013cd4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013cde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	891b      	ldrh	r3, [r3, #8]
 8013cea:	3b14      	subs	r3, #20
 8013cec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013cf0:	e0e1      	b.n	8013eb6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013cf2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013cf4:	00db      	lsls	r3, r3, #3
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	bf28      	it	cs
 8013d00:	4613      	movcs	r3, r2
 8013d02:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013d04:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013d08:	2114      	movs	r1, #20
 8013d0a:	200e      	movs	r0, #14
 8013d0c:	f7f4 fdee 	bl	80088ec <pbuf_alloc>
 8013d10:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f000 80d5 	beq.w	8013ec4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d1c:	895b      	ldrh	r3, [r3, #10]
 8013d1e:	2b13      	cmp	r3, #19
 8013d20:	d806      	bhi.n	8013d30 <ip4_frag+0xd0>
 8013d22:	4b6c      	ldr	r3, [pc, #432]	@ (8013ed4 <ip4_frag+0x274>)
 8013d24:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013d28:	496d      	ldr	r1, [pc, #436]	@ (8013ee0 <ip4_frag+0x280>)
 8013d2a:	486c      	ldr	r0, [pc, #432]	@ (8013edc <ip4_frag+0x27c>)
 8013d2c:	f001 f96a 	bl	8015004 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	2214      	movs	r2, #20
 8013d36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f001 fb88 	bl	801544e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013d44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013d46:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013d4a:	e064      	b.n	8013e16 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	895a      	ldrh	r2, [r3, #10]
 8013d50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	895b      	ldrh	r3, [r3, #10]
 8013d5a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d906      	bls.n	8013d6e <ip4_frag+0x10e>
 8013d60:	4b5c      	ldr	r3, [pc, #368]	@ (8013ed4 <ip4_frag+0x274>)
 8013d62:	f240 322d 	movw	r2, #813	@ 0x32d
 8013d66:	495f      	ldr	r1, [pc, #380]	@ (8013ee4 <ip4_frag+0x284>)
 8013d68:	485c      	ldr	r0, [pc, #368]	@ (8013edc <ip4_frag+0x27c>)
 8013d6a:	f001 f94b 	bl	8015004 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013d6e:	8bfa      	ldrh	r2, [r7, #30]
 8013d70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013d74:	4293      	cmp	r3, r2
 8013d76:	bf28      	it	cs
 8013d78:	4613      	movcs	r3, r2
 8013d7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013d7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d105      	bne.n	8013d92 <ip4_frag+0x132>
        poff = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	60fb      	str	r3, [r7, #12]
        continue;
 8013d90:	e041      	b.n	8013e16 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013d92:	f7ff ff0d 	bl	8013bb0 <ip_frag_alloc_pbuf_custom_ref>
 8013d96:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d103      	bne.n	8013da6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013da0:	f7f5 f888 	bl	8008eb4 <pbuf_free>
        goto memerr;
 8013da4:	e08f      	b.n	8013ec6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013da6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013dac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013dae:	4413      	add	r3, r2
 8013db0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013db4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013db8:	9201      	str	r2, [sp, #4]
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2241      	movs	r2, #65	@ 0x41
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	f7f4 febd 	bl	8008b40 <pbuf_alloced_custom>
 8013dc6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d106      	bne.n	8013ddc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013dce:	69b8      	ldr	r0, [r7, #24]
 8013dd0:	f7ff fef6 	bl	8013bc0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013dd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013dd6:	f7f5 f86d 	bl	8008eb4 <pbuf_free>
        goto memerr;
 8013dda:	e074      	b.n	8013ec6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013ddc:	68f8      	ldr	r0, [r7, #12]
 8013dde:	f7f5 f909 	bl	8008ff4 <pbuf_ref>
      pcr->original = p;
 8013de2:	69bb      	ldr	r3, [r7, #24]
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	4a3f      	ldr	r2, [pc, #252]	@ (8013ee8 <ip4_frag+0x288>)
 8013dec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013dee:	6979      	ldr	r1, [r7, #20]
 8013df0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013df2:	f7f5 f921 	bl	8009038 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013df6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013dfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013dfe:	1ad3      	subs	r3, r2, r3
 8013e00:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013e04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d004      	beq.n	8013e16 <ip4_frag+0x1b6>
        poff = 0;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013e16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d196      	bne.n	8013d4c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013e1e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013e20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013e24:	4413      	add	r3, r2
 8013e26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e2c:	f1a3 0213 	sub.w	r2, r3, #19
 8013e30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013e34:	429a      	cmp	r2, r3
 8013e36:	bfcc      	ite	gt
 8013e38:	2301      	movgt	r3, #1
 8013e3a:	2300      	movle	r3, #0
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013e40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013e4a:	6a3b      	ldr	r3, [r7, #32]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d002      	beq.n	8013e56 <ip4_frag+0x1f6>
 8013e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d003      	beq.n	8013e5e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013e56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013e58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013e5c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013e5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7f3 fc99 	bl	8007798 <lwip_htons>
 8013e66:	4603      	mov	r3, r0
 8013e68:	461a      	mov	r2, r3
 8013e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e6c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013e70:	3314      	adds	r3, #20
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f3 fc8f 	bl	8007798 <lwip_htons>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e80:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e84:	2200      	movs	r2, #0
 8013e86:	729a      	strb	r2, [r3, #10]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	695b      	ldr	r3, [r3, #20]
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e94:	68b8      	ldr	r0, [r7, #8]
 8013e96:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013e98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e9a:	f7f5 f80b 	bl	8008eb4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013e9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013ea2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013eaa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013eae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013eb0:	4413      	add	r3, r2
 8013eb2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013eb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f47f af19 	bne.w	8013cf2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e002      	b.n	8013eca <ip4_frag+0x26a>
      goto memerr;
 8013ec4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3748      	adds	r7, #72	@ 0x48
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	0801bb74 	.word	0x0801bb74
 8013ed8:	0801bd50 	.word	0x0801bd50
 8013edc:	0801bbbc 	.word	0x0801bbbc
 8013ee0:	0801bd6c 	.word	0x0801bd6c
 8013ee4:	0801bd8c 	.word	0x0801bd8c
 8013ee8:	08013bf9 	.word	0x08013bf9

08013eec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013ef6:	230e      	movs	r3, #14
 8013ef8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	895b      	ldrh	r3, [r3, #10]
 8013efe:	2b0e      	cmp	r3, #14
 8013f00:	d96e      	bls.n	8013fe0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	7bdb      	ldrb	r3, [r3, #15]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d106      	bne.n	8013f18 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013f10:	3301      	adds	r3, #1
 8013f12:	b2da      	uxtb	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	7b1a      	ldrb	r2, [r3, #12]
 8013f22:	7b5b      	ldrb	r3, [r3, #13]
 8013f24:	021b      	lsls	r3, r3, #8
 8013f26:	4313      	orrs	r3, r2
 8013f28:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	f003 0301 	and.w	r3, r3, #1
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d023      	beq.n	8013f7e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d10f      	bne.n	8013f5e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f3e:	693b      	ldr	r3, [r7, #16]
 8013f40:	785b      	ldrb	r3, [r3, #1]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d11b      	bne.n	8013f7e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f4a:	2b5e      	cmp	r3, #94	@ 0x5e
 8013f4c:	d117      	bne.n	8013f7e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	7b5b      	ldrb	r3, [r3, #13]
 8013f52:	f043 0310 	orr.w	r3, r3, #16
 8013f56:	b2da      	uxtb	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	735a      	strb	r2, [r3, #13]
 8013f5c:	e00f      	b.n	8013f7e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	2206      	movs	r2, #6
 8013f62:	4928      	ldr	r1, [pc, #160]	@ (8014004 <ethernet_input+0x118>)
 8013f64:	4618      	mov	r0, r3
 8013f66:	f001 f9b7 	bl	80152d8 <memcmp>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d106      	bne.n	8013f7e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	7b5b      	ldrb	r3, [r3, #13]
 8013f74:	f043 0308 	orr.w	r3, r3, #8
 8013f78:	b2da      	uxtb	r2, r3
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013f7e:	89fb      	ldrh	r3, [r7, #14]
 8013f80:	2b08      	cmp	r3, #8
 8013f82:	d003      	beq.n	8013f8c <ethernet_input+0xa0>
 8013f84:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013f88:	d014      	beq.n	8013fb4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013f8a:	e032      	b.n	8013ff2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013f92:	f003 0308 	and.w	r3, r3, #8
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d024      	beq.n	8013fe4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013f9a:	8afb      	ldrh	r3, [r7, #22]
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f7f4 ff02 	bl	8008da8 <pbuf_remove_header>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d11e      	bne.n	8013fe8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013faa:	6839      	ldr	r1, [r7, #0]
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7fe fdd9 	bl	8012b64 <ip4_input>
      break;
 8013fb2:	e013      	b.n	8013fdc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013fba:	f003 0308 	and.w	r3, r3, #8
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d014      	beq.n	8013fec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013fc2:	8afb      	ldrh	r3, [r7, #22]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7f4 feee 	bl	8008da8 <pbuf_remove_header>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d10e      	bne.n	8013ff0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013fd2:	6839      	ldr	r1, [r7, #0]
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7fd ff75 	bl	8011ec4 <etharp_input>
      break;
 8013fda:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	e00c      	b.n	8013ffa <ethernet_input+0x10e>
    goto free_and_return;
 8013fe0:	bf00      	nop
 8013fe2:	e006      	b.n	8013ff2 <ethernet_input+0x106>
        goto free_and_return;
 8013fe4:	bf00      	nop
 8013fe6:	e004      	b.n	8013ff2 <ethernet_input+0x106>
        goto free_and_return;
 8013fe8:	bf00      	nop
 8013fea:	e002      	b.n	8013ff2 <ethernet_input+0x106>
        goto free_and_return;
 8013fec:	bf00      	nop
 8013fee:	e000      	b.n	8013ff2 <ethernet_input+0x106>
        goto free_and_return;
 8013ff0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f7f4 ff5e 	bl	8008eb4 <pbuf_free>
  return ERR_OK;
 8013ff8:	2300      	movs	r3, #0
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3718      	adds	r7, #24
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	0801bf3c 	.word	0x0801bf3c

08014008 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014008:	b580      	push	{r7, lr}
 801400a:	b086      	sub	sp, #24
 801400c:	af00      	add	r7, sp, #0
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	60b9      	str	r1, [r7, #8]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014016:	8c3b      	ldrh	r3, [r7, #32]
 8014018:	4618      	mov	r0, r3
 801401a:	f7f3 fbbd 	bl	8007798 <lwip_htons>
 801401e:	4603      	mov	r3, r0
 8014020:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014022:	210e      	movs	r1, #14
 8014024:	68b8      	ldr	r0, [r7, #8]
 8014026:	f7f4 feaf 	bl	8008d88 <pbuf_add_header>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d125      	bne.n	801407c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	8afa      	ldrh	r2, [r7, #22]
 801403a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	2206      	movs	r2, #6
 8014040:	6839      	ldr	r1, [r7, #0]
 8014042:	4618      	mov	r0, r3
 8014044:	f001 fa03 	bl	801544e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	3306      	adds	r3, #6
 801404c:	2206      	movs	r2, #6
 801404e:	6879      	ldr	r1, [r7, #4]
 8014050:	4618      	mov	r0, r3
 8014052:	f001 f9fc 	bl	801544e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801405c:	2b06      	cmp	r3, #6
 801405e:	d006      	beq.n	801406e <ethernet_output+0x66>
 8014060:	4b0a      	ldr	r3, [pc, #40]	@ (801408c <ethernet_output+0x84>)
 8014062:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014066:	490a      	ldr	r1, [pc, #40]	@ (8014090 <ethernet_output+0x88>)
 8014068:	480a      	ldr	r0, [pc, #40]	@ (8014094 <ethernet_output+0x8c>)
 801406a:	f000 ffcb 	bl	8015004 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	699b      	ldr	r3, [r3, #24]
 8014072:	68b9      	ldr	r1, [r7, #8]
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	4798      	blx	r3
 8014078:	4603      	mov	r3, r0
 801407a:	e002      	b.n	8014082 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801407c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801407e:	f06f 0301 	mvn.w	r3, #1
}
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	0801bd9c 	.word	0x0801bd9c
 8014090:	0801bdd4 	.word	0x0801bdd4
 8014094:	0801be08 	.word	0x0801be08

08014098 <rand>:
 8014098:	4b16      	ldr	r3, [pc, #88]	@ (80140f4 <rand+0x5c>)
 801409a:	b510      	push	{r4, lr}
 801409c:	681c      	ldr	r4, [r3, #0]
 801409e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80140a0:	b9b3      	cbnz	r3, 80140d0 <rand+0x38>
 80140a2:	2018      	movs	r0, #24
 80140a4:	f002 f838 	bl	8016118 <malloc>
 80140a8:	4602      	mov	r2, r0
 80140aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80140ac:	b920      	cbnz	r0, 80140b8 <rand+0x20>
 80140ae:	4b12      	ldr	r3, [pc, #72]	@ (80140f8 <rand+0x60>)
 80140b0:	4812      	ldr	r0, [pc, #72]	@ (80140fc <rand+0x64>)
 80140b2:	2152      	movs	r1, #82	@ 0x52
 80140b4:	f001 f9e0 	bl	8015478 <__assert_func>
 80140b8:	4911      	ldr	r1, [pc, #68]	@ (8014100 <rand+0x68>)
 80140ba:	4b12      	ldr	r3, [pc, #72]	@ (8014104 <rand+0x6c>)
 80140bc:	e9c0 1300 	strd	r1, r3, [r0]
 80140c0:	4b11      	ldr	r3, [pc, #68]	@ (8014108 <rand+0x70>)
 80140c2:	6083      	str	r3, [r0, #8]
 80140c4:	230b      	movs	r3, #11
 80140c6:	8183      	strh	r3, [r0, #12]
 80140c8:	2100      	movs	r1, #0
 80140ca:	2001      	movs	r0, #1
 80140cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80140d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80140d2:	480e      	ldr	r0, [pc, #56]	@ (801410c <rand+0x74>)
 80140d4:	690b      	ldr	r3, [r1, #16]
 80140d6:	694c      	ldr	r4, [r1, #20]
 80140d8:	4a0d      	ldr	r2, [pc, #52]	@ (8014110 <rand+0x78>)
 80140da:	4358      	muls	r0, r3
 80140dc:	fb02 0004 	mla	r0, r2, r4, r0
 80140e0:	fba3 3202 	umull	r3, r2, r3, r2
 80140e4:	3301      	adds	r3, #1
 80140e6:	eb40 0002 	adc.w	r0, r0, r2
 80140ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80140ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80140f2:	bd10      	pop	{r4, pc}
 80140f4:	2000004c 	.word	0x2000004c
 80140f8:	0801bf4a 	.word	0x0801bf4a
 80140fc:	0801bf61 	.word	0x0801bf61
 8014100:	abcd330e 	.word	0xabcd330e
 8014104:	e66d1234 	.word	0xe66d1234
 8014108:	0005deec 	.word	0x0005deec
 801410c:	5851f42d 	.word	0x5851f42d
 8014110:	4c957f2d 	.word	0x4c957f2d

08014114 <_strtol_l.isra.0>:
 8014114:	2b24      	cmp	r3, #36	@ 0x24
 8014116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801411a:	4686      	mov	lr, r0
 801411c:	4690      	mov	r8, r2
 801411e:	d801      	bhi.n	8014124 <_strtol_l.isra.0+0x10>
 8014120:	2b01      	cmp	r3, #1
 8014122:	d106      	bne.n	8014132 <_strtol_l.isra.0+0x1e>
 8014124:	f001 f966 	bl	80153f4 <__errno>
 8014128:	2316      	movs	r3, #22
 801412a:	6003      	str	r3, [r0, #0]
 801412c:	2000      	movs	r0, #0
 801412e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014132:	4834      	ldr	r0, [pc, #208]	@ (8014204 <_strtol_l.isra.0+0xf0>)
 8014134:	460d      	mov	r5, r1
 8014136:	462a      	mov	r2, r5
 8014138:	f815 4b01 	ldrb.w	r4, [r5], #1
 801413c:	5d06      	ldrb	r6, [r0, r4]
 801413e:	f016 0608 	ands.w	r6, r6, #8
 8014142:	d1f8      	bne.n	8014136 <_strtol_l.isra.0+0x22>
 8014144:	2c2d      	cmp	r4, #45	@ 0x2d
 8014146:	d110      	bne.n	801416a <_strtol_l.isra.0+0x56>
 8014148:	782c      	ldrb	r4, [r5, #0]
 801414a:	2601      	movs	r6, #1
 801414c:	1c95      	adds	r5, r2, #2
 801414e:	f033 0210 	bics.w	r2, r3, #16
 8014152:	d115      	bne.n	8014180 <_strtol_l.isra.0+0x6c>
 8014154:	2c30      	cmp	r4, #48	@ 0x30
 8014156:	d10d      	bne.n	8014174 <_strtol_l.isra.0+0x60>
 8014158:	782a      	ldrb	r2, [r5, #0]
 801415a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801415e:	2a58      	cmp	r2, #88	@ 0x58
 8014160:	d108      	bne.n	8014174 <_strtol_l.isra.0+0x60>
 8014162:	786c      	ldrb	r4, [r5, #1]
 8014164:	3502      	adds	r5, #2
 8014166:	2310      	movs	r3, #16
 8014168:	e00a      	b.n	8014180 <_strtol_l.isra.0+0x6c>
 801416a:	2c2b      	cmp	r4, #43	@ 0x2b
 801416c:	bf04      	itt	eq
 801416e:	782c      	ldrbeq	r4, [r5, #0]
 8014170:	1c95      	addeq	r5, r2, #2
 8014172:	e7ec      	b.n	801414e <_strtol_l.isra.0+0x3a>
 8014174:	2b00      	cmp	r3, #0
 8014176:	d1f6      	bne.n	8014166 <_strtol_l.isra.0+0x52>
 8014178:	2c30      	cmp	r4, #48	@ 0x30
 801417a:	bf14      	ite	ne
 801417c:	230a      	movne	r3, #10
 801417e:	2308      	moveq	r3, #8
 8014180:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014184:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014188:	2200      	movs	r2, #0
 801418a:	fbbc f9f3 	udiv	r9, ip, r3
 801418e:	4610      	mov	r0, r2
 8014190:	fb03 ca19 	mls	sl, r3, r9, ip
 8014194:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014198:	2f09      	cmp	r7, #9
 801419a:	d80f      	bhi.n	80141bc <_strtol_l.isra.0+0xa8>
 801419c:	463c      	mov	r4, r7
 801419e:	42a3      	cmp	r3, r4
 80141a0:	dd1b      	ble.n	80141da <_strtol_l.isra.0+0xc6>
 80141a2:	1c57      	adds	r7, r2, #1
 80141a4:	d007      	beq.n	80141b6 <_strtol_l.isra.0+0xa2>
 80141a6:	4581      	cmp	r9, r0
 80141a8:	d314      	bcc.n	80141d4 <_strtol_l.isra.0+0xc0>
 80141aa:	d101      	bne.n	80141b0 <_strtol_l.isra.0+0x9c>
 80141ac:	45a2      	cmp	sl, r4
 80141ae:	db11      	blt.n	80141d4 <_strtol_l.isra.0+0xc0>
 80141b0:	fb00 4003 	mla	r0, r0, r3, r4
 80141b4:	2201      	movs	r2, #1
 80141b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141ba:	e7eb      	b.n	8014194 <_strtol_l.isra.0+0x80>
 80141bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80141c0:	2f19      	cmp	r7, #25
 80141c2:	d801      	bhi.n	80141c8 <_strtol_l.isra.0+0xb4>
 80141c4:	3c37      	subs	r4, #55	@ 0x37
 80141c6:	e7ea      	b.n	801419e <_strtol_l.isra.0+0x8a>
 80141c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80141cc:	2f19      	cmp	r7, #25
 80141ce:	d804      	bhi.n	80141da <_strtol_l.isra.0+0xc6>
 80141d0:	3c57      	subs	r4, #87	@ 0x57
 80141d2:	e7e4      	b.n	801419e <_strtol_l.isra.0+0x8a>
 80141d4:	f04f 32ff 	mov.w	r2, #4294967295
 80141d8:	e7ed      	b.n	80141b6 <_strtol_l.isra.0+0xa2>
 80141da:	1c53      	adds	r3, r2, #1
 80141dc:	d108      	bne.n	80141f0 <_strtol_l.isra.0+0xdc>
 80141de:	2322      	movs	r3, #34	@ 0x22
 80141e0:	f8ce 3000 	str.w	r3, [lr]
 80141e4:	4660      	mov	r0, ip
 80141e6:	f1b8 0f00 	cmp.w	r8, #0
 80141ea:	d0a0      	beq.n	801412e <_strtol_l.isra.0+0x1a>
 80141ec:	1e69      	subs	r1, r5, #1
 80141ee:	e006      	b.n	80141fe <_strtol_l.isra.0+0xea>
 80141f0:	b106      	cbz	r6, 80141f4 <_strtol_l.isra.0+0xe0>
 80141f2:	4240      	negs	r0, r0
 80141f4:	f1b8 0f00 	cmp.w	r8, #0
 80141f8:	d099      	beq.n	801412e <_strtol_l.isra.0+0x1a>
 80141fa:	2a00      	cmp	r2, #0
 80141fc:	d1f6      	bne.n	80141ec <_strtol_l.isra.0+0xd8>
 80141fe:	f8c8 1000 	str.w	r1, [r8]
 8014202:	e794      	b.n	801412e <_strtol_l.isra.0+0x1a>
 8014204:	0801c179 	.word	0x0801c179

08014208 <_strtol_r>:
 8014208:	f7ff bf84 	b.w	8014114 <_strtol_l.isra.0>

0801420c <__cvt>:
 801420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801420e:	ed2d 8b02 	vpush	{d8}
 8014212:	eeb0 8b40 	vmov.f64	d8, d0
 8014216:	b085      	sub	sp, #20
 8014218:	4617      	mov	r7, r2
 801421a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801421c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801421e:	ee18 2a90 	vmov	r2, s17
 8014222:	f025 0520 	bic.w	r5, r5, #32
 8014226:	2a00      	cmp	r2, #0
 8014228:	bfb6      	itet	lt
 801422a:	222d      	movlt	r2, #45	@ 0x2d
 801422c:	2200      	movge	r2, #0
 801422e:	eeb1 8b40 	vneglt.f64	d8, d0
 8014232:	2d46      	cmp	r5, #70	@ 0x46
 8014234:	460c      	mov	r4, r1
 8014236:	701a      	strb	r2, [r3, #0]
 8014238:	d004      	beq.n	8014244 <__cvt+0x38>
 801423a:	2d45      	cmp	r5, #69	@ 0x45
 801423c:	d100      	bne.n	8014240 <__cvt+0x34>
 801423e:	3401      	adds	r4, #1
 8014240:	2102      	movs	r1, #2
 8014242:	e000      	b.n	8014246 <__cvt+0x3a>
 8014244:	2103      	movs	r1, #3
 8014246:	ab03      	add	r3, sp, #12
 8014248:	9301      	str	r3, [sp, #4]
 801424a:	ab02      	add	r3, sp, #8
 801424c:	9300      	str	r3, [sp, #0]
 801424e:	4622      	mov	r2, r4
 8014250:	4633      	mov	r3, r6
 8014252:	eeb0 0b48 	vmov.f64	d0, d8
 8014256:	f001 f9b7 	bl	80155c8 <_dtoa_r>
 801425a:	2d47      	cmp	r5, #71	@ 0x47
 801425c:	d114      	bne.n	8014288 <__cvt+0x7c>
 801425e:	07fb      	lsls	r3, r7, #31
 8014260:	d50a      	bpl.n	8014278 <__cvt+0x6c>
 8014262:	1902      	adds	r2, r0, r4
 8014264:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801426c:	bf08      	it	eq
 801426e:	9203      	streq	r2, [sp, #12]
 8014270:	2130      	movs	r1, #48	@ 0x30
 8014272:	9b03      	ldr	r3, [sp, #12]
 8014274:	4293      	cmp	r3, r2
 8014276:	d319      	bcc.n	80142ac <__cvt+0xa0>
 8014278:	9b03      	ldr	r3, [sp, #12]
 801427a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801427c:	1a1b      	subs	r3, r3, r0
 801427e:	6013      	str	r3, [r2, #0]
 8014280:	b005      	add	sp, #20
 8014282:	ecbd 8b02 	vpop	{d8}
 8014286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014288:	2d46      	cmp	r5, #70	@ 0x46
 801428a:	eb00 0204 	add.w	r2, r0, r4
 801428e:	d1e9      	bne.n	8014264 <__cvt+0x58>
 8014290:	7803      	ldrb	r3, [r0, #0]
 8014292:	2b30      	cmp	r3, #48	@ 0x30
 8014294:	d107      	bne.n	80142a6 <__cvt+0x9a>
 8014296:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429e:	bf1c      	itt	ne
 80142a0:	f1c4 0401 	rsbne	r4, r4, #1
 80142a4:	6034      	strne	r4, [r6, #0]
 80142a6:	6833      	ldr	r3, [r6, #0]
 80142a8:	441a      	add	r2, r3
 80142aa:	e7db      	b.n	8014264 <__cvt+0x58>
 80142ac:	1c5c      	adds	r4, r3, #1
 80142ae:	9403      	str	r4, [sp, #12]
 80142b0:	7019      	strb	r1, [r3, #0]
 80142b2:	e7de      	b.n	8014272 <__cvt+0x66>

080142b4 <__exponent>:
 80142b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142b6:	2900      	cmp	r1, #0
 80142b8:	bfba      	itte	lt
 80142ba:	4249      	neglt	r1, r1
 80142bc:	232d      	movlt	r3, #45	@ 0x2d
 80142be:	232b      	movge	r3, #43	@ 0x2b
 80142c0:	2909      	cmp	r1, #9
 80142c2:	7002      	strb	r2, [r0, #0]
 80142c4:	7043      	strb	r3, [r0, #1]
 80142c6:	dd29      	ble.n	801431c <__exponent+0x68>
 80142c8:	f10d 0307 	add.w	r3, sp, #7
 80142cc:	461d      	mov	r5, r3
 80142ce:	270a      	movs	r7, #10
 80142d0:	461a      	mov	r2, r3
 80142d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80142d6:	fb07 1416 	mls	r4, r7, r6, r1
 80142da:	3430      	adds	r4, #48	@ 0x30
 80142dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80142e0:	460c      	mov	r4, r1
 80142e2:	2c63      	cmp	r4, #99	@ 0x63
 80142e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80142e8:	4631      	mov	r1, r6
 80142ea:	dcf1      	bgt.n	80142d0 <__exponent+0x1c>
 80142ec:	3130      	adds	r1, #48	@ 0x30
 80142ee:	1e94      	subs	r4, r2, #2
 80142f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80142f4:	1c41      	adds	r1, r0, #1
 80142f6:	4623      	mov	r3, r4
 80142f8:	42ab      	cmp	r3, r5
 80142fa:	d30a      	bcc.n	8014312 <__exponent+0x5e>
 80142fc:	f10d 0309 	add.w	r3, sp, #9
 8014300:	1a9b      	subs	r3, r3, r2
 8014302:	42ac      	cmp	r4, r5
 8014304:	bf88      	it	hi
 8014306:	2300      	movhi	r3, #0
 8014308:	3302      	adds	r3, #2
 801430a:	4403      	add	r3, r0
 801430c:	1a18      	subs	r0, r3, r0
 801430e:	b003      	add	sp, #12
 8014310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014312:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014316:	f801 6f01 	strb.w	r6, [r1, #1]!
 801431a:	e7ed      	b.n	80142f8 <__exponent+0x44>
 801431c:	2330      	movs	r3, #48	@ 0x30
 801431e:	3130      	adds	r1, #48	@ 0x30
 8014320:	7083      	strb	r3, [r0, #2]
 8014322:	70c1      	strb	r1, [r0, #3]
 8014324:	1d03      	adds	r3, r0, #4
 8014326:	e7f1      	b.n	801430c <__exponent+0x58>

08014328 <_printf_float>:
 8014328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432c:	b08d      	sub	sp, #52	@ 0x34
 801432e:	460c      	mov	r4, r1
 8014330:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014334:	4616      	mov	r6, r2
 8014336:	461f      	mov	r7, r3
 8014338:	4605      	mov	r5, r0
 801433a:	f001 f811 	bl	8015360 <_localeconv_r>
 801433e:	f8d0 b000 	ldr.w	fp, [r0]
 8014342:	4658      	mov	r0, fp
 8014344:	f7eb ffcc 	bl	80002e0 <strlen>
 8014348:	2300      	movs	r3, #0
 801434a:	930a      	str	r3, [sp, #40]	@ 0x28
 801434c:	f8d8 3000 	ldr.w	r3, [r8]
 8014350:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014354:	6822      	ldr	r2, [r4, #0]
 8014356:	9005      	str	r0, [sp, #20]
 8014358:	3307      	adds	r3, #7
 801435a:	f023 0307 	bic.w	r3, r3, #7
 801435e:	f103 0108 	add.w	r1, r3, #8
 8014362:	f8c8 1000 	str.w	r1, [r8]
 8014366:	ed93 0b00 	vldr	d0, [r3]
 801436a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80145c8 <_printf_float+0x2a0>
 801436e:	eeb0 7bc0 	vabs.f64	d7, d0
 8014372:	eeb4 7b46 	vcmp.f64	d7, d6
 8014376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801437e:	dd24      	ble.n	80143ca <_printf_float+0xa2>
 8014380:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014388:	d502      	bpl.n	8014390 <_printf_float+0x68>
 801438a:	232d      	movs	r3, #45	@ 0x2d
 801438c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014390:	498f      	ldr	r1, [pc, #572]	@ (80145d0 <_printf_float+0x2a8>)
 8014392:	4b90      	ldr	r3, [pc, #576]	@ (80145d4 <_printf_float+0x2ac>)
 8014394:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014398:	bf8c      	ite	hi
 801439a:	4688      	movhi	r8, r1
 801439c:	4698      	movls	r8, r3
 801439e:	f022 0204 	bic.w	r2, r2, #4
 80143a2:	2303      	movs	r3, #3
 80143a4:	6123      	str	r3, [r4, #16]
 80143a6:	6022      	str	r2, [r4, #0]
 80143a8:	f04f 0a00 	mov.w	sl, #0
 80143ac:	9700      	str	r7, [sp, #0]
 80143ae:	4633      	mov	r3, r6
 80143b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80143b2:	4621      	mov	r1, r4
 80143b4:	4628      	mov	r0, r5
 80143b6:	f000 f9d1 	bl	801475c <_printf_common>
 80143ba:	3001      	adds	r0, #1
 80143bc:	f040 8089 	bne.w	80144d2 <_printf_float+0x1aa>
 80143c0:	f04f 30ff 	mov.w	r0, #4294967295
 80143c4:	b00d      	add	sp, #52	@ 0x34
 80143c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d2:	d709      	bvc.n	80143e8 <_printf_float+0xc0>
 80143d4:	ee10 3a90 	vmov	r3, s1
 80143d8:	2b00      	cmp	r3, #0
 80143da:	bfbc      	itt	lt
 80143dc:	232d      	movlt	r3, #45	@ 0x2d
 80143de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80143e2:	497d      	ldr	r1, [pc, #500]	@ (80145d8 <_printf_float+0x2b0>)
 80143e4:	4b7d      	ldr	r3, [pc, #500]	@ (80145dc <_printf_float+0x2b4>)
 80143e6:	e7d5      	b.n	8014394 <_printf_float+0x6c>
 80143e8:	6863      	ldr	r3, [r4, #4]
 80143ea:	1c59      	adds	r1, r3, #1
 80143ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80143f0:	d139      	bne.n	8014466 <_printf_float+0x13e>
 80143f2:	2306      	movs	r3, #6
 80143f4:	6063      	str	r3, [r4, #4]
 80143f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80143fa:	2300      	movs	r3, #0
 80143fc:	6022      	str	r2, [r4, #0]
 80143fe:	9303      	str	r3, [sp, #12]
 8014400:	ab0a      	add	r3, sp, #40	@ 0x28
 8014402:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014406:	ab09      	add	r3, sp, #36	@ 0x24
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	6861      	ldr	r1, [r4, #4]
 801440c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014410:	4628      	mov	r0, r5
 8014412:	f7ff fefb 	bl	801420c <__cvt>
 8014416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801441a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801441c:	4680      	mov	r8, r0
 801441e:	d129      	bne.n	8014474 <_printf_float+0x14c>
 8014420:	1cc8      	adds	r0, r1, #3
 8014422:	db02      	blt.n	801442a <_printf_float+0x102>
 8014424:	6863      	ldr	r3, [r4, #4]
 8014426:	4299      	cmp	r1, r3
 8014428:	dd41      	ble.n	80144ae <_printf_float+0x186>
 801442a:	f1a9 0902 	sub.w	r9, r9, #2
 801442e:	fa5f f989 	uxtb.w	r9, r9
 8014432:	3901      	subs	r1, #1
 8014434:	464a      	mov	r2, r9
 8014436:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801443a:	9109      	str	r1, [sp, #36]	@ 0x24
 801443c:	f7ff ff3a 	bl	80142b4 <__exponent>
 8014440:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014442:	1813      	adds	r3, r2, r0
 8014444:	2a01      	cmp	r2, #1
 8014446:	4682      	mov	sl, r0
 8014448:	6123      	str	r3, [r4, #16]
 801444a:	dc02      	bgt.n	8014452 <_printf_float+0x12a>
 801444c:	6822      	ldr	r2, [r4, #0]
 801444e:	07d2      	lsls	r2, r2, #31
 8014450:	d501      	bpl.n	8014456 <_printf_float+0x12e>
 8014452:	3301      	adds	r3, #1
 8014454:	6123      	str	r3, [r4, #16]
 8014456:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801445a:	2b00      	cmp	r3, #0
 801445c:	d0a6      	beq.n	80143ac <_printf_float+0x84>
 801445e:	232d      	movs	r3, #45	@ 0x2d
 8014460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014464:	e7a2      	b.n	80143ac <_printf_float+0x84>
 8014466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801446a:	d1c4      	bne.n	80143f6 <_printf_float+0xce>
 801446c:	2b00      	cmp	r3, #0
 801446e:	d1c2      	bne.n	80143f6 <_printf_float+0xce>
 8014470:	2301      	movs	r3, #1
 8014472:	e7bf      	b.n	80143f4 <_printf_float+0xcc>
 8014474:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014478:	d9db      	bls.n	8014432 <_printf_float+0x10a>
 801447a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801447e:	d118      	bne.n	80144b2 <_printf_float+0x18a>
 8014480:	2900      	cmp	r1, #0
 8014482:	6863      	ldr	r3, [r4, #4]
 8014484:	dd0b      	ble.n	801449e <_printf_float+0x176>
 8014486:	6121      	str	r1, [r4, #16]
 8014488:	b913      	cbnz	r3, 8014490 <_printf_float+0x168>
 801448a:	6822      	ldr	r2, [r4, #0]
 801448c:	07d0      	lsls	r0, r2, #31
 801448e:	d502      	bpl.n	8014496 <_printf_float+0x16e>
 8014490:	3301      	adds	r3, #1
 8014492:	440b      	add	r3, r1
 8014494:	6123      	str	r3, [r4, #16]
 8014496:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014498:	f04f 0a00 	mov.w	sl, #0
 801449c:	e7db      	b.n	8014456 <_printf_float+0x12e>
 801449e:	b913      	cbnz	r3, 80144a6 <_printf_float+0x17e>
 80144a0:	6822      	ldr	r2, [r4, #0]
 80144a2:	07d2      	lsls	r2, r2, #31
 80144a4:	d501      	bpl.n	80144aa <_printf_float+0x182>
 80144a6:	3302      	adds	r3, #2
 80144a8:	e7f4      	b.n	8014494 <_printf_float+0x16c>
 80144aa:	2301      	movs	r3, #1
 80144ac:	e7f2      	b.n	8014494 <_printf_float+0x16c>
 80144ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80144b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144b4:	4299      	cmp	r1, r3
 80144b6:	db05      	blt.n	80144c4 <_printf_float+0x19c>
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	6121      	str	r1, [r4, #16]
 80144bc:	07d8      	lsls	r0, r3, #31
 80144be:	d5ea      	bpl.n	8014496 <_printf_float+0x16e>
 80144c0:	1c4b      	adds	r3, r1, #1
 80144c2:	e7e7      	b.n	8014494 <_printf_float+0x16c>
 80144c4:	2900      	cmp	r1, #0
 80144c6:	bfd4      	ite	le
 80144c8:	f1c1 0202 	rsble	r2, r1, #2
 80144cc:	2201      	movgt	r2, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	e7e0      	b.n	8014494 <_printf_float+0x16c>
 80144d2:	6823      	ldr	r3, [r4, #0]
 80144d4:	055a      	lsls	r2, r3, #21
 80144d6:	d407      	bmi.n	80144e8 <_printf_float+0x1c0>
 80144d8:	6923      	ldr	r3, [r4, #16]
 80144da:	4642      	mov	r2, r8
 80144dc:	4631      	mov	r1, r6
 80144de:	4628      	mov	r0, r5
 80144e0:	47b8      	blx	r7
 80144e2:	3001      	adds	r0, #1
 80144e4:	d12a      	bne.n	801453c <_printf_float+0x214>
 80144e6:	e76b      	b.n	80143c0 <_printf_float+0x98>
 80144e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80144ec:	f240 80e0 	bls.w	80146b0 <_printf_float+0x388>
 80144f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80144f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80144f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fc:	d133      	bne.n	8014566 <_printf_float+0x23e>
 80144fe:	4a38      	ldr	r2, [pc, #224]	@ (80145e0 <_printf_float+0x2b8>)
 8014500:	2301      	movs	r3, #1
 8014502:	4631      	mov	r1, r6
 8014504:	4628      	mov	r0, r5
 8014506:	47b8      	blx	r7
 8014508:	3001      	adds	r0, #1
 801450a:	f43f af59 	beq.w	80143c0 <_printf_float+0x98>
 801450e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014512:	4543      	cmp	r3, r8
 8014514:	db02      	blt.n	801451c <_printf_float+0x1f4>
 8014516:	6823      	ldr	r3, [r4, #0]
 8014518:	07d8      	lsls	r0, r3, #31
 801451a:	d50f      	bpl.n	801453c <_printf_float+0x214>
 801451c:	9b05      	ldr	r3, [sp, #20]
 801451e:	465a      	mov	r2, fp
 8014520:	4631      	mov	r1, r6
 8014522:	4628      	mov	r0, r5
 8014524:	47b8      	blx	r7
 8014526:	3001      	adds	r0, #1
 8014528:	f43f af4a 	beq.w	80143c0 <_printf_float+0x98>
 801452c:	f04f 0900 	mov.w	r9, #0
 8014530:	f108 38ff 	add.w	r8, r8, #4294967295
 8014534:	f104 0a1a 	add.w	sl, r4, #26
 8014538:	45c8      	cmp	r8, r9
 801453a:	dc09      	bgt.n	8014550 <_printf_float+0x228>
 801453c:	6823      	ldr	r3, [r4, #0]
 801453e:	079b      	lsls	r3, r3, #30
 8014540:	f100 8107 	bmi.w	8014752 <_printf_float+0x42a>
 8014544:	68e0      	ldr	r0, [r4, #12]
 8014546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014548:	4298      	cmp	r0, r3
 801454a:	bfb8      	it	lt
 801454c:	4618      	movlt	r0, r3
 801454e:	e739      	b.n	80143c4 <_printf_float+0x9c>
 8014550:	2301      	movs	r3, #1
 8014552:	4652      	mov	r2, sl
 8014554:	4631      	mov	r1, r6
 8014556:	4628      	mov	r0, r5
 8014558:	47b8      	blx	r7
 801455a:	3001      	adds	r0, #1
 801455c:	f43f af30 	beq.w	80143c0 <_printf_float+0x98>
 8014560:	f109 0901 	add.w	r9, r9, #1
 8014564:	e7e8      	b.n	8014538 <_printf_float+0x210>
 8014566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014568:	2b00      	cmp	r3, #0
 801456a:	dc3b      	bgt.n	80145e4 <_printf_float+0x2bc>
 801456c:	4a1c      	ldr	r2, [pc, #112]	@ (80145e0 <_printf_float+0x2b8>)
 801456e:	2301      	movs	r3, #1
 8014570:	4631      	mov	r1, r6
 8014572:	4628      	mov	r0, r5
 8014574:	47b8      	blx	r7
 8014576:	3001      	adds	r0, #1
 8014578:	f43f af22 	beq.w	80143c0 <_printf_float+0x98>
 801457c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014580:	ea59 0303 	orrs.w	r3, r9, r3
 8014584:	d102      	bne.n	801458c <_printf_float+0x264>
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	07d9      	lsls	r1, r3, #31
 801458a:	d5d7      	bpl.n	801453c <_printf_float+0x214>
 801458c:	9b05      	ldr	r3, [sp, #20]
 801458e:	465a      	mov	r2, fp
 8014590:	4631      	mov	r1, r6
 8014592:	4628      	mov	r0, r5
 8014594:	47b8      	blx	r7
 8014596:	3001      	adds	r0, #1
 8014598:	f43f af12 	beq.w	80143c0 <_printf_float+0x98>
 801459c:	f04f 0a00 	mov.w	sl, #0
 80145a0:	f104 0b1a 	add.w	fp, r4, #26
 80145a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145a6:	425b      	negs	r3, r3
 80145a8:	4553      	cmp	r3, sl
 80145aa:	dc01      	bgt.n	80145b0 <_printf_float+0x288>
 80145ac:	464b      	mov	r3, r9
 80145ae:	e794      	b.n	80144da <_printf_float+0x1b2>
 80145b0:	2301      	movs	r3, #1
 80145b2:	465a      	mov	r2, fp
 80145b4:	4631      	mov	r1, r6
 80145b6:	4628      	mov	r0, r5
 80145b8:	47b8      	blx	r7
 80145ba:	3001      	adds	r0, #1
 80145bc:	f43f af00 	beq.w	80143c0 <_printf_float+0x98>
 80145c0:	f10a 0a01 	add.w	sl, sl, #1
 80145c4:	e7ee      	b.n	80145a4 <_printf_float+0x27c>
 80145c6:	bf00      	nop
 80145c8:	ffffffff 	.word	0xffffffff
 80145cc:	7fefffff 	.word	0x7fefffff
 80145d0:	0801bfbd 	.word	0x0801bfbd
 80145d4:	0801bfb9 	.word	0x0801bfb9
 80145d8:	0801bfc5 	.word	0x0801bfc5
 80145dc:	0801bfc1 	.word	0x0801bfc1
 80145e0:	0801bfc9 	.word	0x0801bfc9
 80145e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80145e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80145ea:	4553      	cmp	r3, sl
 80145ec:	bfa8      	it	ge
 80145ee:	4653      	movge	r3, sl
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	4699      	mov	r9, r3
 80145f4:	dc37      	bgt.n	8014666 <_printf_float+0x33e>
 80145f6:	2300      	movs	r3, #0
 80145f8:	9307      	str	r3, [sp, #28]
 80145fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80145fe:	f104 021a 	add.w	r2, r4, #26
 8014602:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014604:	9907      	ldr	r1, [sp, #28]
 8014606:	9306      	str	r3, [sp, #24]
 8014608:	eba3 0309 	sub.w	r3, r3, r9
 801460c:	428b      	cmp	r3, r1
 801460e:	dc31      	bgt.n	8014674 <_printf_float+0x34c>
 8014610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014612:	459a      	cmp	sl, r3
 8014614:	dc3b      	bgt.n	801468e <_printf_float+0x366>
 8014616:	6823      	ldr	r3, [r4, #0]
 8014618:	07da      	lsls	r2, r3, #31
 801461a:	d438      	bmi.n	801468e <_printf_float+0x366>
 801461c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801461e:	ebaa 0903 	sub.w	r9, sl, r3
 8014622:	9b06      	ldr	r3, [sp, #24]
 8014624:	ebaa 0303 	sub.w	r3, sl, r3
 8014628:	4599      	cmp	r9, r3
 801462a:	bfa8      	it	ge
 801462c:	4699      	movge	r9, r3
 801462e:	f1b9 0f00 	cmp.w	r9, #0
 8014632:	dc34      	bgt.n	801469e <_printf_float+0x376>
 8014634:	f04f 0800 	mov.w	r8, #0
 8014638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801463c:	f104 0b1a 	add.w	fp, r4, #26
 8014640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014642:	ebaa 0303 	sub.w	r3, sl, r3
 8014646:	eba3 0309 	sub.w	r3, r3, r9
 801464a:	4543      	cmp	r3, r8
 801464c:	f77f af76 	ble.w	801453c <_printf_float+0x214>
 8014650:	2301      	movs	r3, #1
 8014652:	465a      	mov	r2, fp
 8014654:	4631      	mov	r1, r6
 8014656:	4628      	mov	r0, r5
 8014658:	47b8      	blx	r7
 801465a:	3001      	adds	r0, #1
 801465c:	f43f aeb0 	beq.w	80143c0 <_printf_float+0x98>
 8014660:	f108 0801 	add.w	r8, r8, #1
 8014664:	e7ec      	b.n	8014640 <_printf_float+0x318>
 8014666:	4642      	mov	r2, r8
 8014668:	4631      	mov	r1, r6
 801466a:	4628      	mov	r0, r5
 801466c:	47b8      	blx	r7
 801466e:	3001      	adds	r0, #1
 8014670:	d1c1      	bne.n	80145f6 <_printf_float+0x2ce>
 8014672:	e6a5      	b.n	80143c0 <_printf_float+0x98>
 8014674:	2301      	movs	r3, #1
 8014676:	4631      	mov	r1, r6
 8014678:	4628      	mov	r0, r5
 801467a:	9206      	str	r2, [sp, #24]
 801467c:	47b8      	blx	r7
 801467e:	3001      	adds	r0, #1
 8014680:	f43f ae9e 	beq.w	80143c0 <_printf_float+0x98>
 8014684:	9b07      	ldr	r3, [sp, #28]
 8014686:	9a06      	ldr	r2, [sp, #24]
 8014688:	3301      	adds	r3, #1
 801468a:	9307      	str	r3, [sp, #28]
 801468c:	e7b9      	b.n	8014602 <_printf_float+0x2da>
 801468e:	9b05      	ldr	r3, [sp, #20]
 8014690:	465a      	mov	r2, fp
 8014692:	4631      	mov	r1, r6
 8014694:	4628      	mov	r0, r5
 8014696:	47b8      	blx	r7
 8014698:	3001      	adds	r0, #1
 801469a:	d1bf      	bne.n	801461c <_printf_float+0x2f4>
 801469c:	e690      	b.n	80143c0 <_printf_float+0x98>
 801469e:	9a06      	ldr	r2, [sp, #24]
 80146a0:	464b      	mov	r3, r9
 80146a2:	4442      	add	r2, r8
 80146a4:	4631      	mov	r1, r6
 80146a6:	4628      	mov	r0, r5
 80146a8:	47b8      	blx	r7
 80146aa:	3001      	adds	r0, #1
 80146ac:	d1c2      	bne.n	8014634 <_printf_float+0x30c>
 80146ae:	e687      	b.n	80143c0 <_printf_float+0x98>
 80146b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80146b4:	f1b9 0f01 	cmp.w	r9, #1
 80146b8:	dc01      	bgt.n	80146be <_printf_float+0x396>
 80146ba:	07db      	lsls	r3, r3, #31
 80146bc:	d536      	bpl.n	801472c <_printf_float+0x404>
 80146be:	2301      	movs	r3, #1
 80146c0:	4642      	mov	r2, r8
 80146c2:	4631      	mov	r1, r6
 80146c4:	4628      	mov	r0, r5
 80146c6:	47b8      	blx	r7
 80146c8:	3001      	adds	r0, #1
 80146ca:	f43f ae79 	beq.w	80143c0 <_printf_float+0x98>
 80146ce:	9b05      	ldr	r3, [sp, #20]
 80146d0:	465a      	mov	r2, fp
 80146d2:	4631      	mov	r1, r6
 80146d4:	4628      	mov	r0, r5
 80146d6:	47b8      	blx	r7
 80146d8:	3001      	adds	r0, #1
 80146da:	f43f ae71 	beq.w	80143c0 <_printf_float+0x98>
 80146de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80146e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80146e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80146ee:	d018      	beq.n	8014722 <_printf_float+0x3fa>
 80146f0:	464b      	mov	r3, r9
 80146f2:	f108 0201 	add.w	r2, r8, #1
 80146f6:	4631      	mov	r1, r6
 80146f8:	4628      	mov	r0, r5
 80146fa:	47b8      	blx	r7
 80146fc:	3001      	adds	r0, #1
 80146fe:	d10c      	bne.n	801471a <_printf_float+0x3f2>
 8014700:	e65e      	b.n	80143c0 <_printf_float+0x98>
 8014702:	2301      	movs	r3, #1
 8014704:	465a      	mov	r2, fp
 8014706:	4631      	mov	r1, r6
 8014708:	4628      	mov	r0, r5
 801470a:	47b8      	blx	r7
 801470c:	3001      	adds	r0, #1
 801470e:	f43f ae57 	beq.w	80143c0 <_printf_float+0x98>
 8014712:	f108 0801 	add.w	r8, r8, #1
 8014716:	45c8      	cmp	r8, r9
 8014718:	dbf3      	blt.n	8014702 <_printf_float+0x3da>
 801471a:	4653      	mov	r3, sl
 801471c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014720:	e6dc      	b.n	80144dc <_printf_float+0x1b4>
 8014722:	f04f 0800 	mov.w	r8, #0
 8014726:	f104 0b1a 	add.w	fp, r4, #26
 801472a:	e7f4      	b.n	8014716 <_printf_float+0x3ee>
 801472c:	2301      	movs	r3, #1
 801472e:	4642      	mov	r2, r8
 8014730:	e7e1      	b.n	80146f6 <_printf_float+0x3ce>
 8014732:	2301      	movs	r3, #1
 8014734:	464a      	mov	r2, r9
 8014736:	4631      	mov	r1, r6
 8014738:	4628      	mov	r0, r5
 801473a:	47b8      	blx	r7
 801473c:	3001      	adds	r0, #1
 801473e:	f43f ae3f 	beq.w	80143c0 <_printf_float+0x98>
 8014742:	f108 0801 	add.w	r8, r8, #1
 8014746:	68e3      	ldr	r3, [r4, #12]
 8014748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801474a:	1a5b      	subs	r3, r3, r1
 801474c:	4543      	cmp	r3, r8
 801474e:	dcf0      	bgt.n	8014732 <_printf_float+0x40a>
 8014750:	e6f8      	b.n	8014544 <_printf_float+0x21c>
 8014752:	f04f 0800 	mov.w	r8, #0
 8014756:	f104 0919 	add.w	r9, r4, #25
 801475a:	e7f4      	b.n	8014746 <_printf_float+0x41e>

0801475c <_printf_common>:
 801475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014760:	4616      	mov	r6, r2
 8014762:	4698      	mov	r8, r3
 8014764:	688a      	ldr	r2, [r1, #8]
 8014766:	690b      	ldr	r3, [r1, #16]
 8014768:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801476c:	4293      	cmp	r3, r2
 801476e:	bfb8      	it	lt
 8014770:	4613      	movlt	r3, r2
 8014772:	6033      	str	r3, [r6, #0]
 8014774:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014778:	4607      	mov	r7, r0
 801477a:	460c      	mov	r4, r1
 801477c:	b10a      	cbz	r2, 8014782 <_printf_common+0x26>
 801477e:	3301      	adds	r3, #1
 8014780:	6033      	str	r3, [r6, #0]
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	0699      	lsls	r1, r3, #26
 8014786:	bf42      	ittt	mi
 8014788:	6833      	ldrmi	r3, [r6, #0]
 801478a:	3302      	addmi	r3, #2
 801478c:	6033      	strmi	r3, [r6, #0]
 801478e:	6825      	ldr	r5, [r4, #0]
 8014790:	f015 0506 	ands.w	r5, r5, #6
 8014794:	d106      	bne.n	80147a4 <_printf_common+0x48>
 8014796:	f104 0a19 	add.w	sl, r4, #25
 801479a:	68e3      	ldr	r3, [r4, #12]
 801479c:	6832      	ldr	r2, [r6, #0]
 801479e:	1a9b      	subs	r3, r3, r2
 80147a0:	42ab      	cmp	r3, r5
 80147a2:	dc26      	bgt.n	80147f2 <_printf_common+0x96>
 80147a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80147a8:	6822      	ldr	r2, [r4, #0]
 80147aa:	3b00      	subs	r3, #0
 80147ac:	bf18      	it	ne
 80147ae:	2301      	movne	r3, #1
 80147b0:	0692      	lsls	r2, r2, #26
 80147b2:	d42b      	bmi.n	801480c <_printf_common+0xb0>
 80147b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80147b8:	4641      	mov	r1, r8
 80147ba:	4638      	mov	r0, r7
 80147bc:	47c8      	blx	r9
 80147be:	3001      	adds	r0, #1
 80147c0:	d01e      	beq.n	8014800 <_printf_common+0xa4>
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	6922      	ldr	r2, [r4, #16]
 80147c6:	f003 0306 	and.w	r3, r3, #6
 80147ca:	2b04      	cmp	r3, #4
 80147cc:	bf02      	ittt	eq
 80147ce:	68e5      	ldreq	r5, [r4, #12]
 80147d0:	6833      	ldreq	r3, [r6, #0]
 80147d2:	1aed      	subeq	r5, r5, r3
 80147d4:	68a3      	ldr	r3, [r4, #8]
 80147d6:	bf0c      	ite	eq
 80147d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147dc:	2500      	movne	r5, #0
 80147de:	4293      	cmp	r3, r2
 80147e0:	bfc4      	itt	gt
 80147e2:	1a9b      	subgt	r3, r3, r2
 80147e4:	18ed      	addgt	r5, r5, r3
 80147e6:	2600      	movs	r6, #0
 80147e8:	341a      	adds	r4, #26
 80147ea:	42b5      	cmp	r5, r6
 80147ec:	d11a      	bne.n	8014824 <_printf_common+0xc8>
 80147ee:	2000      	movs	r0, #0
 80147f0:	e008      	b.n	8014804 <_printf_common+0xa8>
 80147f2:	2301      	movs	r3, #1
 80147f4:	4652      	mov	r2, sl
 80147f6:	4641      	mov	r1, r8
 80147f8:	4638      	mov	r0, r7
 80147fa:	47c8      	blx	r9
 80147fc:	3001      	adds	r0, #1
 80147fe:	d103      	bne.n	8014808 <_printf_common+0xac>
 8014800:	f04f 30ff 	mov.w	r0, #4294967295
 8014804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014808:	3501      	adds	r5, #1
 801480a:	e7c6      	b.n	801479a <_printf_common+0x3e>
 801480c:	18e1      	adds	r1, r4, r3
 801480e:	1c5a      	adds	r2, r3, #1
 8014810:	2030      	movs	r0, #48	@ 0x30
 8014812:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014816:	4422      	add	r2, r4
 8014818:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801481c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014820:	3302      	adds	r3, #2
 8014822:	e7c7      	b.n	80147b4 <_printf_common+0x58>
 8014824:	2301      	movs	r3, #1
 8014826:	4622      	mov	r2, r4
 8014828:	4641      	mov	r1, r8
 801482a:	4638      	mov	r0, r7
 801482c:	47c8      	blx	r9
 801482e:	3001      	adds	r0, #1
 8014830:	d0e6      	beq.n	8014800 <_printf_common+0xa4>
 8014832:	3601      	adds	r6, #1
 8014834:	e7d9      	b.n	80147ea <_printf_common+0x8e>
	...

08014838 <_printf_i>:
 8014838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801483c:	7e0f      	ldrb	r7, [r1, #24]
 801483e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014840:	2f78      	cmp	r7, #120	@ 0x78
 8014842:	4691      	mov	r9, r2
 8014844:	4680      	mov	r8, r0
 8014846:	460c      	mov	r4, r1
 8014848:	469a      	mov	sl, r3
 801484a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801484e:	d807      	bhi.n	8014860 <_printf_i+0x28>
 8014850:	2f62      	cmp	r7, #98	@ 0x62
 8014852:	d80a      	bhi.n	801486a <_printf_i+0x32>
 8014854:	2f00      	cmp	r7, #0
 8014856:	f000 80d1 	beq.w	80149fc <_printf_i+0x1c4>
 801485a:	2f58      	cmp	r7, #88	@ 0x58
 801485c:	f000 80b8 	beq.w	80149d0 <_printf_i+0x198>
 8014860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014864:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014868:	e03a      	b.n	80148e0 <_printf_i+0xa8>
 801486a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801486e:	2b15      	cmp	r3, #21
 8014870:	d8f6      	bhi.n	8014860 <_printf_i+0x28>
 8014872:	a101      	add	r1, pc, #4	@ (adr r1, 8014878 <_printf_i+0x40>)
 8014874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014878:	080148d1 	.word	0x080148d1
 801487c:	080148e5 	.word	0x080148e5
 8014880:	08014861 	.word	0x08014861
 8014884:	08014861 	.word	0x08014861
 8014888:	08014861 	.word	0x08014861
 801488c:	08014861 	.word	0x08014861
 8014890:	080148e5 	.word	0x080148e5
 8014894:	08014861 	.word	0x08014861
 8014898:	08014861 	.word	0x08014861
 801489c:	08014861 	.word	0x08014861
 80148a0:	08014861 	.word	0x08014861
 80148a4:	080149e3 	.word	0x080149e3
 80148a8:	0801490f 	.word	0x0801490f
 80148ac:	0801499d 	.word	0x0801499d
 80148b0:	08014861 	.word	0x08014861
 80148b4:	08014861 	.word	0x08014861
 80148b8:	08014a05 	.word	0x08014a05
 80148bc:	08014861 	.word	0x08014861
 80148c0:	0801490f 	.word	0x0801490f
 80148c4:	08014861 	.word	0x08014861
 80148c8:	08014861 	.word	0x08014861
 80148cc:	080149a5 	.word	0x080149a5
 80148d0:	6833      	ldr	r3, [r6, #0]
 80148d2:	1d1a      	adds	r2, r3, #4
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	6032      	str	r2, [r6, #0]
 80148d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80148e0:	2301      	movs	r3, #1
 80148e2:	e09c      	b.n	8014a1e <_printf_i+0x1e6>
 80148e4:	6833      	ldr	r3, [r6, #0]
 80148e6:	6820      	ldr	r0, [r4, #0]
 80148e8:	1d19      	adds	r1, r3, #4
 80148ea:	6031      	str	r1, [r6, #0]
 80148ec:	0606      	lsls	r6, r0, #24
 80148ee:	d501      	bpl.n	80148f4 <_printf_i+0xbc>
 80148f0:	681d      	ldr	r5, [r3, #0]
 80148f2:	e003      	b.n	80148fc <_printf_i+0xc4>
 80148f4:	0645      	lsls	r5, r0, #25
 80148f6:	d5fb      	bpl.n	80148f0 <_printf_i+0xb8>
 80148f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80148fc:	2d00      	cmp	r5, #0
 80148fe:	da03      	bge.n	8014908 <_printf_i+0xd0>
 8014900:	232d      	movs	r3, #45	@ 0x2d
 8014902:	426d      	negs	r5, r5
 8014904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014908:	4858      	ldr	r0, [pc, #352]	@ (8014a6c <_printf_i+0x234>)
 801490a:	230a      	movs	r3, #10
 801490c:	e011      	b.n	8014932 <_printf_i+0xfa>
 801490e:	6821      	ldr	r1, [r4, #0]
 8014910:	6833      	ldr	r3, [r6, #0]
 8014912:	0608      	lsls	r0, r1, #24
 8014914:	f853 5b04 	ldr.w	r5, [r3], #4
 8014918:	d402      	bmi.n	8014920 <_printf_i+0xe8>
 801491a:	0649      	lsls	r1, r1, #25
 801491c:	bf48      	it	mi
 801491e:	b2ad      	uxthmi	r5, r5
 8014920:	2f6f      	cmp	r7, #111	@ 0x6f
 8014922:	4852      	ldr	r0, [pc, #328]	@ (8014a6c <_printf_i+0x234>)
 8014924:	6033      	str	r3, [r6, #0]
 8014926:	bf14      	ite	ne
 8014928:	230a      	movne	r3, #10
 801492a:	2308      	moveq	r3, #8
 801492c:	2100      	movs	r1, #0
 801492e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014932:	6866      	ldr	r6, [r4, #4]
 8014934:	60a6      	str	r6, [r4, #8]
 8014936:	2e00      	cmp	r6, #0
 8014938:	db05      	blt.n	8014946 <_printf_i+0x10e>
 801493a:	6821      	ldr	r1, [r4, #0]
 801493c:	432e      	orrs	r6, r5
 801493e:	f021 0104 	bic.w	r1, r1, #4
 8014942:	6021      	str	r1, [r4, #0]
 8014944:	d04b      	beq.n	80149de <_printf_i+0x1a6>
 8014946:	4616      	mov	r6, r2
 8014948:	fbb5 f1f3 	udiv	r1, r5, r3
 801494c:	fb03 5711 	mls	r7, r3, r1, r5
 8014950:	5dc7      	ldrb	r7, [r0, r7]
 8014952:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014956:	462f      	mov	r7, r5
 8014958:	42bb      	cmp	r3, r7
 801495a:	460d      	mov	r5, r1
 801495c:	d9f4      	bls.n	8014948 <_printf_i+0x110>
 801495e:	2b08      	cmp	r3, #8
 8014960:	d10b      	bne.n	801497a <_printf_i+0x142>
 8014962:	6823      	ldr	r3, [r4, #0]
 8014964:	07df      	lsls	r7, r3, #31
 8014966:	d508      	bpl.n	801497a <_printf_i+0x142>
 8014968:	6923      	ldr	r3, [r4, #16]
 801496a:	6861      	ldr	r1, [r4, #4]
 801496c:	4299      	cmp	r1, r3
 801496e:	bfde      	ittt	le
 8014970:	2330      	movle	r3, #48	@ 0x30
 8014972:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014976:	f106 36ff 	addle.w	r6, r6, #4294967295
 801497a:	1b92      	subs	r2, r2, r6
 801497c:	6122      	str	r2, [r4, #16]
 801497e:	f8cd a000 	str.w	sl, [sp]
 8014982:	464b      	mov	r3, r9
 8014984:	aa03      	add	r2, sp, #12
 8014986:	4621      	mov	r1, r4
 8014988:	4640      	mov	r0, r8
 801498a:	f7ff fee7 	bl	801475c <_printf_common>
 801498e:	3001      	adds	r0, #1
 8014990:	d14a      	bne.n	8014a28 <_printf_i+0x1f0>
 8014992:	f04f 30ff 	mov.w	r0, #4294967295
 8014996:	b004      	add	sp, #16
 8014998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801499c:	6823      	ldr	r3, [r4, #0]
 801499e:	f043 0320 	orr.w	r3, r3, #32
 80149a2:	6023      	str	r3, [r4, #0]
 80149a4:	4832      	ldr	r0, [pc, #200]	@ (8014a70 <_printf_i+0x238>)
 80149a6:	2778      	movs	r7, #120	@ 0x78
 80149a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	6831      	ldr	r1, [r6, #0]
 80149b0:	061f      	lsls	r7, r3, #24
 80149b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80149b6:	d402      	bmi.n	80149be <_printf_i+0x186>
 80149b8:	065f      	lsls	r7, r3, #25
 80149ba:	bf48      	it	mi
 80149bc:	b2ad      	uxthmi	r5, r5
 80149be:	6031      	str	r1, [r6, #0]
 80149c0:	07d9      	lsls	r1, r3, #31
 80149c2:	bf44      	itt	mi
 80149c4:	f043 0320 	orrmi.w	r3, r3, #32
 80149c8:	6023      	strmi	r3, [r4, #0]
 80149ca:	b11d      	cbz	r5, 80149d4 <_printf_i+0x19c>
 80149cc:	2310      	movs	r3, #16
 80149ce:	e7ad      	b.n	801492c <_printf_i+0xf4>
 80149d0:	4826      	ldr	r0, [pc, #152]	@ (8014a6c <_printf_i+0x234>)
 80149d2:	e7e9      	b.n	80149a8 <_printf_i+0x170>
 80149d4:	6823      	ldr	r3, [r4, #0]
 80149d6:	f023 0320 	bic.w	r3, r3, #32
 80149da:	6023      	str	r3, [r4, #0]
 80149dc:	e7f6      	b.n	80149cc <_printf_i+0x194>
 80149de:	4616      	mov	r6, r2
 80149e0:	e7bd      	b.n	801495e <_printf_i+0x126>
 80149e2:	6833      	ldr	r3, [r6, #0]
 80149e4:	6825      	ldr	r5, [r4, #0]
 80149e6:	6961      	ldr	r1, [r4, #20]
 80149e8:	1d18      	adds	r0, r3, #4
 80149ea:	6030      	str	r0, [r6, #0]
 80149ec:	062e      	lsls	r6, r5, #24
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	d501      	bpl.n	80149f6 <_printf_i+0x1be>
 80149f2:	6019      	str	r1, [r3, #0]
 80149f4:	e002      	b.n	80149fc <_printf_i+0x1c4>
 80149f6:	0668      	lsls	r0, r5, #25
 80149f8:	d5fb      	bpl.n	80149f2 <_printf_i+0x1ba>
 80149fa:	8019      	strh	r1, [r3, #0]
 80149fc:	2300      	movs	r3, #0
 80149fe:	6123      	str	r3, [r4, #16]
 8014a00:	4616      	mov	r6, r2
 8014a02:	e7bc      	b.n	801497e <_printf_i+0x146>
 8014a04:	6833      	ldr	r3, [r6, #0]
 8014a06:	1d1a      	adds	r2, r3, #4
 8014a08:	6032      	str	r2, [r6, #0]
 8014a0a:	681e      	ldr	r6, [r3, #0]
 8014a0c:	6862      	ldr	r2, [r4, #4]
 8014a0e:	2100      	movs	r1, #0
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7eb fc15 	bl	8000240 <memchr>
 8014a16:	b108      	cbz	r0, 8014a1c <_printf_i+0x1e4>
 8014a18:	1b80      	subs	r0, r0, r6
 8014a1a:	6060      	str	r0, [r4, #4]
 8014a1c:	6863      	ldr	r3, [r4, #4]
 8014a1e:	6123      	str	r3, [r4, #16]
 8014a20:	2300      	movs	r3, #0
 8014a22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a26:	e7aa      	b.n	801497e <_printf_i+0x146>
 8014a28:	6923      	ldr	r3, [r4, #16]
 8014a2a:	4632      	mov	r2, r6
 8014a2c:	4649      	mov	r1, r9
 8014a2e:	4640      	mov	r0, r8
 8014a30:	47d0      	blx	sl
 8014a32:	3001      	adds	r0, #1
 8014a34:	d0ad      	beq.n	8014992 <_printf_i+0x15a>
 8014a36:	6823      	ldr	r3, [r4, #0]
 8014a38:	079b      	lsls	r3, r3, #30
 8014a3a:	d413      	bmi.n	8014a64 <_printf_i+0x22c>
 8014a3c:	68e0      	ldr	r0, [r4, #12]
 8014a3e:	9b03      	ldr	r3, [sp, #12]
 8014a40:	4298      	cmp	r0, r3
 8014a42:	bfb8      	it	lt
 8014a44:	4618      	movlt	r0, r3
 8014a46:	e7a6      	b.n	8014996 <_printf_i+0x15e>
 8014a48:	2301      	movs	r3, #1
 8014a4a:	4632      	mov	r2, r6
 8014a4c:	4649      	mov	r1, r9
 8014a4e:	4640      	mov	r0, r8
 8014a50:	47d0      	blx	sl
 8014a52:	3001      	adds	r0, #1
 8014a54:	d09d      	beq.n	8014992 <_printf_i+0x15a>
 8014a56:	3501      	adds	r5, #1
 8014a58:	68e3      	ldr	r3, [r4, #12]
 8014a5a:	9903      	ldr	r1, [sp, #12]
 8014a5c:	1a5b      	subs	r3, r3, r1
 8014a5e:	42ab      	cmp	r3, r5
 8014a60:	dcf2      	bgt.n	8014a48 <_printf_i+0x210>
 8014a62:	e7eb      	b.n	8014a3c <_printf_i+0x204>
 8014a64:	2500      	movs	r5, #0
 8014a66:	f104 0619 	add.w	r6, r4, #25
 8014a6a:	e7f5      	b.n	8014a58 <_printf_i+0x220>
 8014a6c:	0801bfcb 	.word	0x0801bfcb
 8014a70:	0801bfdc 	.word	0x0801bfdc

08014a74 <_scanf_float>:
 8014a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a78:	b087      	sub	sp, #28
 8014a7a:	4691      	mov	r9, r2
 8014a7c:	9303      	str	r3, [sp, #12]
 8014a7e:	688b      	ldr	r3, [r1, #8]
 8014a80:	1e5a      	subs	r2, r3, #1
 8014a82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014a86:	bf81      	itttt	hi
 8014a88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014a8c:	eb03 0b05 	addhi.w	fp, r3, r5
 8014a90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014a94:	608b      	strhi	r3, [r1, #8]
 8014a96:	680b      	ldr	r3, [r1, #0]
 8014a98:	460a      	mov	r2, r1
 8014a9a:	f04f 0500 	mov.w	r5, #0
 8014a9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014aa2:	f842 3b1c 	str.w	r3, [r2], #28
 8014aa6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014aaa:	4680      	mov	r8, r0
 8014aac:	460c      	mov	r4, r1
 8014aae:	bf98      	it	ls
 8014ab0:	f04f 0b00 	movls.w	fp, #0
 8014ab4:	9201      	str	r2, [sp, #4]
 8014ab6:	4616      	mov	r6, r2
 8014ab8:	46aa      	mov	sl, r5
 8014aba:	462f      	mov	r7, r5
 8014abc:	9502      	str	r5, [sp, #8]
 8014abe:	68a2      	ldr	r2, [r4, #8]
 8014ac0:	b15a      	cbz	r2, 8014ada <_scanf_float+0x66>
 8014ac2:	f8d9 3000 	ldr.w	r3, [r9]
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	2b4e      	cmp	r3, #78	@ 0x4e
 8014aca:	d863      	bhi.n	8014b94 <_scanf_float+0x120>
 8014acc:	2b40      	cmp	r3, #64	@ 0x40
 8014ace:	d83b      	bhi.n	8014b48 <_scanf_float+0xd4>
 8014ad0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014ad4:	b2c8      	uxtb	r0, r1
 8014ad6:	280e      	cmp	r0, #14
 8014ad8:	d939      	bls.n	8014b4e <_scanf_float+0xda>
 8014ada:	b11f      	cbz	r7, 8014ae4 <_scanf_float+0x70>
 8014adc:	6823      	ldr	r3, [r4, #0]
 8014ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014ae2:	6023      	str	r3, [r4, #0]
 8014ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ae8:	f1ba 0f01 	cmp.w	sl, #1
 8014aec:	f200 8114 	bhi.w	8014d18 <_scanf_float+0x2a4>
 8014af0:	9b01      	ldr	r3, [sp, #4]
 8014af2:	429e      	cmp	r6, r3
 8014af4:	f200 8105 	bhi.w	8014d02 <_scanf_float+0x28e>
 8014af8:	2001      	movs	r0, #1
 8014afa:	b007      	add	sp, #28
 8014afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b00:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014b04:	2a0d      	cmp	r2, #13
 8014b06:	d8e8      	bhi.n	8014ada <_scanf_float+0x66>
 8014b08:	a101      	add	r1, pc, #4	@ (adr r1, 8014b10 <_scanf_float+0x9c>)
 8014b0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014b0e:	bf00      	nop
 8014b10:	08014c59 	.word	0x08014c59
 8014b14:	08014adb 	.word	0x08014adb
 8014b18:	08014adb 	.word	0x08014adb
 8014b1c:	08014adb 	.word	0x08014adb
 8014b20:	08014cb5 	.word	0x08014cb5
 8014b24:	08014c8f 	.word	0x08014c8f
 8014b28:	08014adb 	.word	0x08014adb
 8014b2c:	08014adb 	.word	0x08014adb
 8014b30:	08014c67 	.word	0x08014c67
 8014b34:	08014adb 	.word	0x08014adb
 8014b38:	08014adb 	.word	0x08014adb
 8014b3c:	08014adb 	.word	0x08014adb
 8014b40:	08014adb 	.word	0x08014adb
 8014b44:	08014c23 	.word	0x08014c23
 8014b48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8014b4c:	e7da      	b.n	8014b04 <_scanf_float+0x90>
 8014b4e:	290e      	cmp	r1, #14
 8014b50:	d8c3      	bhi.n	8014ada <_scanf_float+0x66>
 8014b52:	a001      	add	r0, pc, #4	@ (adr r0, 8014b58 <_scanf_float+0xe4>)
 8014b54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014b58:	08014c13 	.word	0x08014c13
 8014b5c:	08014adb 	.word	0x08014adb
 8014b60:	08014c13 	.word	0x08014c13
 8014b64:	08014ca3 	.word	0x08014ca3
 8014b68:	08014adb 	.word	0x08014adb
 8014b6c:	08014bb5 	.word	0x08014bb5
 8014b70:	08014bf9 	.word	0x08014bf9
 8014b74:	08014bf9 	.word	0x08014bf9
 8014b78:	08014bf9 	.word	0x08014bf9
 8014b7c:	08014bf9 	.word	0x08014bf9
 8014b80:	08014bf9 	.word	0x08014bf9
 8014b84:	08014bf9 	.word	0x08014bf9
 8014b88:	08014bf9 	.word	0x08014bf9
 8014b8c:	08014bf9 	.word	0x08014bf9
 8014b90:	08014bf9 	.word	0x08014bf9
 8014b94:	2b6e      	cmp	r3, #110	@ 0x6e
 8014b96:	d809      	bhi.n	8014bac <_scanf_float+0x138>
 8014b98:	2b60      	cmp	r3, #96	@ 0x60
 8014b9a:	d8b1      	bhi.n	8014b00 <_scanf_float+0x8c>
 8014b9c:	2b54      	cmp	r3, #84	@ 0x54
 8014b9e:	d07b      	beq.n	8014c98 <_scanf_float+0x224>
 8014ba0:	2b59      	cmp	r3, #89	@ 0x59
 8014ba2:	d19a      	bne.n	8014ada <_scanf_float+0x66>
 8014ba4:	2d07      	cmp	r5, #7
 8014ba6:	d198      	bne.n	8014ada <_scanf_float+0x66>
 8014ba8:	2508      	movs	r5, #8
 8014baa:	e02f      	b.n	8014c0c <_scanf_float+0x198>
 8014bac:	2b74      	cmp	r3, #116	@ 0x74
 8014bae:	d073      	beq.n	8014c98 <_scanf_float+0x224>
 8014bb0:	2b79      	cmp	r3, #121	@ 0x79
 8014bb2:	e7f6      	b.n	8014ba2 <_scanf_float+0x12e>
 8014bb4:	6821      	ldr	r1, [r4, #0]
 8014bb6:	05c8      	lsls	r0, r1, #23
 8014bb8:	d51e      	bpl.n	8014bf8 <_scanf_float+0x184>
 8014bba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8014bbe:	6021      	str	r1, [r4, #0]
 8014bc0:	3701      	adds	r7, #1
 8014bc2:	f1bb 0f00 	cmp.w	fp, #0
 8014bc6:	d003      	beq.n	8014bd0 <_scanf_float+0x15c>
 8014bc8:	3201      	adds	r2, #1
 8014bca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bce:	60a2      	str	r2, [r4, #8]
 8014bd0:	68a3      	ldr	r3, [r4, #8]
 8014bd2:	3b01      	subs	r3, #1
 8014bd4:	60a3      	str	r3, [r4, #8]
 8014bd6:	6923      	ldr	r3, [r4, #16]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	6123      	str	r3, [r4, #16]
 8014bdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014be0:	3b01      	subs	r3, #1
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	f8c9 3004 	str.w	r3, [r9, #4]
 8014be8:	f340 8082 	ble.w	8014cf0 <_scanf_float+0x27c>
 8014bec:	f8d9 3000 	ldr.w	r3, [r9]
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	f8c9 3000 	str.w	r3, [r9]
 8014bf6:	e762      	b.n	8014abe <_scanf_float+0x4a>
 8014bf8:	eb1a 0105 	adds.w	r1, sl, r5
 8014bfc:	f47f af6d 	bne.w	8014ada <_scanf_float+0x66>
 8014c00:	6822      	ldr	r2, [r4, #0]
 8014c02:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014c06:	6022      	str	r2, [r4, #0]
 8014c08:	460d      	mov	r5, r1
 8014c0a:	468a      	mov	sl, r1
 8014c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8014c10:	e7de      	b.n	8014bd0 <_scanf_float+0x15c>
 8014c12:	6822      	ldr	r2, [r4, #0]
 8014c14:	0610      	lsls	r0, r2, #24
 8014c16:	f57f af60 	bpl.w	8014ada <_scanf_float+0x66>
 8014c1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014c1e:	6022      	str	r2, [r4, #0]
 8014c20:	e7f4      	b.n	8014c0c <_scanf_float+0x198>
 8014c22:	f1ba 0f00 	cmp.w	sl, #0
 8014c26:	d10c      	bne.n	8014c42 <_scanf_float+0x1ce>
 8014c28:	b977      	cbnz	r7, 8014c48 <_scanf_float+0x1d4>
 8014c2a:	6822      	ldr	r2, [r4, #0]
 8014c2c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014c30:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014c34:	d108      	bne.n	8014c48 <_scanf_float+0x1d4>
 8014c36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014c3a:	6022      	str	r2, [r4, #0]
 8014c3c:	f04f 0a01 	mov.w	sl, #1
 8014c40:	e7e4      	b.n	8014c0c <_scanf_float+0x198>
 8014c42:	f1ba 0f02 	cmp.w	sl, #2
 8014c46:	d050      	beq.n	8014cea <_scanf_float+0x276>
 8014c48:	2d01      	cmp	r5, #1
 8014c4a:	d002      	beq.n	8014c52 <_scanf_float+0x1de>
 8014c4c:	2d04      	cmp	r5, #4
 8014c4e:	f47f af44 	bne.w	8014ada <_scanf_float+0x66>
 8014c52:	3501      	adds	r5, #1
 8014c54:	b2ed      	uxtb	r5, r5
 8014c56:	e7d9      	b.n	8014c0c <_scanf_float+0x198>
 8014c58:	f1ba 0f01 	cmp.w	sl, #1
 8014c5c:	f47f af3d 	bne.w	8014ada <_scanf_float+0x66>
 8014c60:	f04f 0a02 	mov.w	sl, #2
 8014c64:	e7d2      	b.n	8014c0c <_scanf_float+0x198>
 8014c66:	b975      	cbnz	r5, 8014c86 <_scanf_float+0x212>
 8014c68:	2f00      	cmp	r7, #0
 8014c6a:	f47f af37 	bne.w	8014adc <_scanf_float+0x68>
 8014c6e:	6822      	ldr	r2, [r4, #0]
 8014c70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8014c74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014c78:	f040 80fc 	bne.w	8014e74 <_scanf_float+0x400>
 8014c7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014c80:	6022      	str	r2, [r4, #0]
 8014c82:	2501      	movs	r5, #1
 8014c84:	e7c2      	b.n	8014c0c <_scanf_float+0x198>
 8014c86:	2d03      	cmp	r5, #3
 8014c88:	d0e3      	beq.n	8014c52 <_scanf_float+0x1de>
 8014c8a:	2d05      	cmp	r5, #5
 8014c8c:	e7df      	b.n	8014c4e <_scanf_float+0x1da>
 8014c8e:	2d02      	cmp	r5, #2
 8014c90:	f47f af23 	bne.w	8014ada <_scanf_float+0x66>
 8014c94:	2503      	movs	r5, #3
 8014c96:	e7b9      	b.n	8014c0c <_scanf_float+0x198>
 8014c98:	2d06      	cmp	r5, #6
 8014c9a:	f47f af1e 	bne.w	8014ada <_scanf_float+0x66>
 8014c9e:	2507      	movs	r5, #7
 8014ca0:	e7b4      	b.n	8014c0c <_scanf_float+0x198>
 8014ca2:	6822      	ldr	r2, [r4, #0]
 8014ca4:	0591      	lsls	r1, r2, #22
 8014ca6:	f57f af18 	bpl.w	8014ada <_scanf_float+0x66>
 8014caa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8014cae:	6022      	str	r2, [r4, #0]
 8014cb0:	9702      	str	r7, [sp, #8]
 8014cb2:	e7ab      	b.n	8014c0c <_scanf_float+0x198>
 8014cb4:	6822      	ldr	r2, [r4, #0]
 8014cb6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8014cba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014cbe:	d005      	beq.n	8014ccc <_scanf_float+0x258>
 8014cc0:	0550      	lsls	r0, r2, #21
 8014cc2:	f57f af0a 	bpl.w	8014ada <_scanf_float+0x66>
 8014cc6:	2f00      	cmp	r7, #0
 8014cc8:	f000 80d4 	beq.w	8014e74 <_scanf_float+0x400>
 8014ccc:	0591      	lsls	r1, r2, #22
 8014cce:	bf58      	it	pl
 8014cd0:	9902      	ldrpl	r1, [sp, #8]
 8014cd2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014cd6:	bf58      	it	pl
 8014cd8:	1a79      	subpl	r1, r7, r1
 8014cda:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014cde:	bf58      	it	pl
 8014ce0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	2700      	movs	r7, #0
 8014ce8:	e790      	b.n	8014c0c <_scanf_float+0x198>
 8014cea:	f04f 0a03 	mov.w	sl, #3
 8014cee:	e78d      	b.n	8014c0c <_scanf_float+0x198>
 8014cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014cf4:	4649      	mov	r1, r9
 8014cf6:	4640      	mov	r0, r8
 8014cf8:	4798      	blx	r3
 8014cfa:	2800      	cmp	r0, #0
 8014cfc:	f43f aedf 	beq.w	8014abe <_scanf_float+0x4a>
 8014d00:	e6eb      	b.n	8014ada <_scanf_float+0x66>
 8014d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d0a:	464a      	mov	r2, r9
 8014d0c:	4640      	mov	r0, r8
 8014d0e:	4798      	blx	r3
 8014d10:	6923      	ldr	r3, [r4, #16]
 8014d12:	3b01      	subs	r3, #1
 8014d14:	6123      	str	r3, [r4, #16]
 8014d16:	e6eb      	b.n	8014af0 <_scanf_float+0x7c>
 8014d18:	1e6b      	subs	r3, r5, #1
 8014d1a:	2b06      	cmp	r3, #6
 8014d1c:	d824      	bhi.n	8014d68 <_scanf_float+0x2f4>
 8014d1e:	2d02      	cmp	r5, #2
 8014d20:	d836      	bhi.n	8014d90 <_scanf_float+0x31c>
 8014d22:	9b01      	ldr	r3, [sp, #4]
 8014d24:	429e      	cmp	r6, r3
 8014d26:	f67f aee7 	bls.w	8014af8 <_scanf_float+0x84>
 8014d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d32:	464a      	mov	r2, r9
 8014d34:	4640      	mov	r0, r8
 8014d36:	4798      	blx	r3
 8014d38:	6923      	ldr	r3, [r4, #16]
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	6123      	str	r3, [r4, #16]
 8014d3e:	e7f0      	b.n	8014d22 <_scanf_float+0x2ae>
 8014d40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8014d48:	464a      	mov	r2, r9
 8014d4a:	4640      	mov	r0, r8
 8014d4c:	4798      	blx	r3
 8014d4e:	6923      	ldr	r3, [r4, #16]
 8014d50:	3b01      	subs	r3, #1
 8014d52:	6123      	str	r3, [r4, #16]
 8014d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d58:	fa5f fa8a 	uxtb.w	sl, sl
 8014d5c:	f1ba 0f02 	cmp.w	sl, #2
 8014d60:	d1ee      	bne.n	8014d40 <_scanf_float+0x2cc>
 8014d62:	3d03      	subs	r5, #3
 8014d64:	b2ed      	uxtb	r5, r5
 8014d66:	1b76      	subs	r6, r6, r5
 8014d68:	6823      	ldr	r3, [r4, #0]
 8014d6a:	05da      	lsls	r2, r3, #23
 8014d6c:	d530      	bpl.n	8014dd0 <_scanf_float+0x35c>
 8014d6e:	055b      	lsls	r3, r3, #21
 8014d70:	d511      	bpl.n	8014d96 <_scanf_float+0x322>
 8014d72:	9b01      	ldr	r3, [sp, #4]
 8014d74:	429e      	cmp	r6, r3
 8014d76:	f67f aebf 	bls.w	8014af8 <_scanf_float+0x84>
 8014d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014d82:	464a      	mov	r2, r9
 8014d84:	4640      	mov	r0, r8
 8014d86:	4798      	blx	r3
 8014d88:	6923      	ldr	r3, [r4, #16]
 8014d8a:	3b01      	subs	r3, #1
 8014d8c:	6123      	str	r3, [r4, #16]
 8014d8e:	e7f0      	b.n	8014d72 <_scanf_float+0x2fe>
 8014d90:	46aa      	mov	sl, r5
 8014d92:	46b3      	mov	fp, r6
 8014d94:	e7de      	b.n	8014d54 <_scanf_float+0x2e0>
 8014d96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014d9a:	6923      	ldr	r3, [r4, #16]
 8014d9c:	2965      	cmp	r1, #101	@ 0x65
 8014d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8014da2:	f106 35ff 	add.w	r5, r6, #4294967295
 8014da6:	6123      	str	r3, [r4, #16]
 8014da8:	d00c      	beq.n	8014dc4 <_scanf_float+0x350>
 8014daa:	2945      	cmp	r1, #69	@ 0x45
 8014dac:	d00a      	beq.n	8014dc4 <_scanf_float+0x350>
 8014dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014db2:	464a      	mov	r2, r9
 8014db4:	4640      	mov	r0, r8
 8014db6:	4798      	blx	r3
 8014db8:	6923      	ldr	r3, [r4, #16]
 8014dba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014dbe:	3b01      	subs	r3, #1
 8014dc0:	1eb5      	subs	r5, r6, #2
 8014dc2:	6123      	str	r3, [r4, #16]
 8014dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014dc8:	464a      	mov	r2, r9
 8014dca:	4640      	mov	r0, r8
 8014dcc:	4798      	blx	r3
 8014dce:	462e      	mov	r6, r5
 8014dd0:	6822      	ldr	r2, [r4, #0]
 8014dd2:	f012 0210 	ands.w	r2, r2, #16
 8014dd6:	d001      	beq.n	8014ddc <_scanf_float+0x368>
 8014dd8:	2000      	movs	r0, #0
 8014dda:	e68e      	b.n	8014afa <_scanf_float+0x86>
 8014ddc:	7032      	strb	r2, [r6, #0]
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8014de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014de8:	d123      	bne.n	8014e32 <_scanf_float+0x3be>
 8014dea:	9b02      	ldr	r3, [sp, #8]
 8014dec:	429f      	cmp	r7, r3
 8014dee:	d00a      	beq.n	8014e06 <_scanf_float+0x392>
 8014df0:	1bda      	subs	r2, r3, r7
 8014df2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8014df6:	429e      	cmp	r6, r3
 8014df8:	bf28      	it	cs
 8014dfa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8014dfe:	491e      	ldr	r1, [pc, #120]	@ (8014e78 <_scanf_float+0x404>)
 8014e00:	4630      	mov	r0, r6
 8014e02:	f000 f96f 	bl	80150e4 <siprintf>
 8014e06:	9901      	ldr	r1, [sp, #4]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4640      	mov	r0, r8
 8014e0c:	f002 fc96 	bl	801773c <_strtod_r>
 8014e10:	9b03      	ldr	r3, [sp, #12]
 8014e12:	6821      	ldr	r1, [r4, #0]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	f011 0f02 	tst.w	r1, #2
 8014e1a:	f103 0204 	add.w	r2, r3, #4
 8014e1e:	d015      	beq.n	8014e4c <_scanf_float+0x3d8>
 8014e20:	9903      	ldr	r1, [sp, #12]
 8014e22:	600a      	str	r2, [r1, #0]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	ed83 0b00 	vstr	d0, [r3]
 8014e2a:	68e3      	ldr	r3, [r4, #12]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	60e3      	str	r3, [r4, #12]
 8014e30:	e7d2      	b.n	8014dd8 <_scanf_float+0x364>
 8014e32:	9b04      	ldr	r3, [sp, #16]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d0e6      	beq.n	8014e06 <_scanf_float+0x392>
 8014e38:	9905      	ldr	r1, [sp, #20]
 8014e3a:	230a      	movs	r3, #10
 8014e3c:	3101      	adds	r1, #1
 8014e3e:	4640      	mov	r0, r8
 8014e40:	f7ff f9e2 	bl	8014208 <_strtol_r>
 8014e44:	9b04      	ldr	r3, [sp, #16]
 8014e46:	9e05      	ldr	r6, [sp, #20]
 8014e48:	1ac2      	subs	r2, r0, r3
 8014e4a:	e7d2      	b.n	8014df2 <_scanf_float+0x37e>
 8014e4c:	f011 0f04 	tst.w	r1, #4
 8014e50:	9903      	ldr	r1, [sp, #12]
 8014e52:	600a      	str	r2, [r1, #0]
 8014e54:	d1e6      	bne.n	8014e24 <_scanf_float+0x3b0>
 8014e56:	eeb4 0b40 	vcmp.f64	d0, d0
 8014e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5e:	681d      	ldr	r5, [r3, #0]
 8014e60:	d705      	bvc.n	8014e6e <_scanf_float+0x3fa>
 8014e62:	4806      	ldr	r0, [pc, #24]	@ (8014e7c <_scanf_float+0x408>)
 8014e64:	f000 fb02 	bl	801546c <nanf>
 8014e68:	ed85 0a00 	vstr	s0, [r5]
 8014e6c:	e7dd      	b.n	8014e2a <_scanf_float+0x3b6>
 8014e6e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014e72:	e7f9      	b.n	8014e68 <_scanf_float+0x3f4>
 8014e74:	2700      	movs	r7, #0
 8014e76:	e635      	b.n	8014ae4 <_scanf_float+0x70>
 8014e78:	0801bfed 	.word	0x0801bfed
 8014e7c:	0801c02d 	.word	0x0801c02d

08014e80 <std>:
 8014e80:	2300      	movs	r3, #0
 8014e82:	b510      	push	{r4, lr}
 8014e84:	4604      	mov	r4, r0
 8014e86:	e9c0 3300 	strd	r3, r3, [r0]
 8014e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e8e:	6083      	str	r3, [r0, #8]
 8014e90:	8181      	strh	r1, [r0, #12]
 8014e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e94:	81c2      	strh	r2, [r0, #14]
 8014e96:	6183      	str	r3, [r0, #24]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	2208      	movs	r2, #8
 8014e9c:	305c      	adds	r0, #92	@ 0x5c
 8014e9e:	f000 fa45 	bl	801532c <memset>
 8014ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed8 <std+0x58>)
 8014ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8014ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8014edc <std+0x5c>)
 8014ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee0 <std+0x60>)
 8014eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014eae:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee4 <std+0x64>)
 8014eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8014eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee8 <std+0x68>)
 8014eb4:	6224      	str	r4, [r4, #32]
 8014eb6:	429c      	cmp	r4, r3
 8014eb8:	d006      	beq.n	8014ec8 <std+0x48>
 8014eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014ebe:	4294      	cmp	r4, r2
 8014ec0:	d002      	beq.n	8014ec8 <std+0x48>
 8014ec2:	33d0      	adds	r3, #208	@ 0xd0
 8014ec4:	429c      	cmp	r4, r3
 8014ec6:	d105      	bne.n	8014ed4 <std+0x54>
 8014ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed0:	f000 baba 	b.w	8015448 <__retarget_lock_init_recursive>
 8014ed4:	bd10      	pop	{r4, pc}
 8014ed6:	bf00      	nop
 8014ed8:	08015129 	.word	0x08015129
 8014edc:	0801514b 	.word	0x0801514b
 8014ee0:	08015183 	.word	0x08015183
 8014ee4:	080151a7 	.word	0x080151a7
 8014ee8:	20008284 	.word	0x20008284

08014eec <stdio_exit_handler>:
 8014eec:	4a02      	ldr	r2, [pc, #8]	@ (8014ef8 <stdio_exit_handler+0xc>)
 8014eee:	4903      	ldr	r1, [pc, #12]	@ (8014efc <stdio_exit_handler+0x10>)
 8014ef0:	4803      	ldr	r0, [pc, #12]	@ (8014f00 <stdio_exit_handler+0x14>)
 8014ef2:	f000 b869 	b.w	8014fc8 <_fwalk_sglue>
 8014ef6:	bf00      	nop
 8014ef8:	20000040 	.word	0x20000040
 8014efc:	08017d85 	.word	0x08017d85
 8014f00:	20000050 	.word	0x20000050

08014f04 <cleanup_stdio>:
 8014f04:	6841      	ldr	r1, [r0, #4]
 8014f06:	4b0c      	ldr	r3, [pc, #48]	@ (8014f38 <cleanup_stdio+0x34>)
 8014f08:	4299      	cmp	r1, r3
 8014f0a:	b510      	push	{r4, lr}
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	d001      	beq.n	8014f14 <cleanup_stdio+0x10>
 8014f10:	f002 ff38 	bl	8017d84 <_fflush_r>
 8014f14:	68a1      	ldr	r1, [r4, #8]
 8014f16:	4b09      	ldr	r3, [pc, #36]	@ (8014f3c <cleanup_stdio+0x38>)
 8014f18:	4299      	cmp	r1, r3
 8014f1a:	d002      	beq.n	8014f22 <cleanup_stdio+0x1e>
 8014f1c:	4620      	mov	r0, r4
 8014f1e:	f002 ff31 	bl	8017d84 <_fflush_r>
 8014f22:	68e1      	ldr	r1, [r4, #12]
 8014f24:	4b06      	ldr	r3, [pc, #24]	@ (8014f40 <cleanup_stdio+0x3c>)
 8014f26:	4299      	cmp	r1, r3
 8014f28:	d004      	beq.n	8014f34 <cleanup_stdio+0x30>
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f30:	f002 bf28 	b.w	8017d84 <_fflush_r>
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	bf00      	nop
 8014f38:	20008284 	.word	0x20008284
 8014f3c:	200082ec 	.word	0x200082ec
 8014f40:	20008354 	.word	0x20008354

08014f44 <global_stdio_init.part.0>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	4b0b      	ldr	r3, [pc, #44]	@ (8014f74 <global_stdio_init.part.0+0x30>)
 8014f48:	4c0b      	ldr	r4, [pc, #44]	@ (8014f78 <global_stdio_init.part.0+0x34>)
 8014f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8014f7c <global_stdio_init.part.0+0x38>)
 8014f4c:	601a      	str	r2, [r3, #0]
 8014f4e:	4620      	mov	r0, r4
 8014f50:	2200      	movs	r2, #0
 8014f52:	2104      	movs	r1, #4
 8014f54:	f7ff ff94 	bl	8014e80 <std>
 8014f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	2109      	movs	r1, #9
 8014f60:	f7ff ff8e 	bl	8014e80 <std>
 8014f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f68:	2202      	movs	r2, #2
 8014f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f6e:	2112      	movs	r1, #18
 8014f70:	f7ff bf86 	b.w	8014e80 <std>
 8014f74:	200083bc 	.word	0x200083bc
 8014f78:	20008284 	.word	0x20008284
 8014f7c:	08014eed 	.word	0x08014eed

08014f80 <__sfp_lock_acquire>:
 8014f80:	4801      	ldr	r0, [pc, #4]	@ (8014f88 <__sfp_lock_acquire+0x8>)
 8014f82:	f000 ba62 	b.w	801544a <__retarget_lock_acquire_recursive>
 8014f86:	bf00      	nop
 8014f88:	200083c5 	.word	0x200083c5

08014f8c <__sfp_lock_release>:
 8014f8c:	4801      	ldr	r0, [pc, #4]	@ (8014f94 <__sfp_lock_release+0x8>)
 8014f8e:	f000 ba5d 	b.w	801544c <__retarget_lock_release_recursive>
 8014f92:	bf00      	nop
 8014f94:	200083c5 	.word	0x200083c5

08014f98 <__sinit>:
 8014f98:	b510      	push	{r4, lr}
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	f7ff fff0 	bl	8014f80 <__sfp_lock_acquire>
 8014fa0:	6a23      	ldr	r3, [r4, #32]
 8014fa2:	b11b      	cbz	r3, 8014fac <__sinit+0x14>
 8014fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fa8:	f7ff bff0 	b.w	8014f8c <__sfp_lock_release>
 8014fac:	4b04      	ldr	r3, [pc, #16]	@ (8014fc0 <__sinit+0x28>)
 8014fae:	6223      	str	r3, [r4, #32]
 8014fb0:	4b04      	ldr	r3, [pc, #16]	@ (8014fc4 <__sinit+0x2c>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1f5      	bne.n	8014fa4 <__sinit+0xc>
 8014fb8:	f7ff ffc4 	bl	8014f44 <global_stdio_init.part.0>
 8014fbc:	e7f2      	b.n	8014fa4 <__sinit+0xc>
 8014fbe:	bf00      	nop
 8014fc0:	08014f05 	.word	0x08014f05
 8014fc4:	200083bc 	.word	0x200083bc

08014fc8 <_fwalk_sglue>:
 8014fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fcc:	4607      	mov	r7, r0
 8014fce:	4688      	mov	r8, r1
 8014fd0:	4614      	mov	r4, r2
 8014fd2:	2600      	movs	r6, #0
 8014fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8014fdc:	d505      	bpl.n	8014fea <_fwalk_sglue+0x22>
 8014fde:	6824      	ldr	r4, [r4, #0]
 8014fe0:	2c00      	cmp	r4, #0
 8014fe2:	d1f7      	bne.n	8014fd4 <_fwalk_sglue+0xc>
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fea:	89ab      	ldrh	r3, [r5, #12]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d907      	bls.n	8015000 <_fwalk_sglue+0x38>
 8014ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	d003      	beq.n	8015000 <_fwalk_sglue+0x38>
 8014ff8:	4629      	mov	r1, r5
 8014ffa:	4638      	mov	r0, r7
 8014ffc:	47c0      	blx	r8
 8014ffe:	4306      	orrs	r6, r0
 8015000:	3568      	adds	r5, #104	@ 0x68
 8015002:	e7e9      	b.n	8014fd8 <_fwalk_sglue+0x10>

08015004 <iprintf>:
 8015004:	b40f      	push	{r0, r1, r2, r3}
 8015006:	b507      	push	{r0, r1, r2, lr}
 8015008:	4906      	ldr	r1, [pc, #24]	@ (8015024 <iprintf+0x20>)
 801500a:	ab04      	add	r3, sp, #16
 801500c:	6808      	ldr	r0, [r1, #0]
 801500e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015012:	6881      	ldr	r1, [r0, #8]
 8015014:	9301      	str	r3, [sp, #4]
 8015016:	f002 fd19 	bl	8017a4c <_vfiprintf_r>
 801501a:	b003      	add	sp, #12
 801501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015020:	b004      	add	sp, #16
 8015022:	4770      	bx	lr
 8015024:	2000004c 	.word	0x2000004c

08015028 <_puts_r>:
 8015028:	6a03      	ldr	r3, [r0, #32]
 801502a:	b570      	push	{r4, r5, r6, lr}
 801502c:	6884      	ldr	r4, [r0, #8]
 801502e:	4605      	mov	r5, r0
 8015030:	460e      	mov	r6, r1
 8015032:	b90b      	cbnz	r3, 8015038 <_puts_r+0x10>
 8015034:	f7ff ffb0 	bl	8014f98 <__sinit>
 8015038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801503a:	07db      	lsls	r3, r3, #31
 801503c:	d405      	bmi.n	801504a <_puts_r+0x22>
 801503e:	89a3      	ldrh	r3, [r4, #12]
 8015040:	0598      	lsls	r0, r3, #22
 8015042:	d402      	bmi.n	801504a <_puts_r+0x22>
 8015044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015046:	f000 fa00 	bl	801544a <__retarget_lock_acquire_recursive>
 801504a:	89a3      	ldrh	r3, [r4, #12]
 801504c:	0719      	lsls	r1, r3, #28
 801504e:	d502      	bpl.n	8015056 <_puts_r+0x2e>
 8015050:	6923      	ldr	r3, [r4, #16]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d135      	bne.n	80150c2 <_puts_r+0x9a>
 8015056:	4621      	mov	r1, r4
 8015058:	4628      	mov	r0, r5
 801505a:	f000 f8e7 	bl	801522c <__swsetup_r>
 801505e:	b380      	cbz	r0, 80150c2 <_puts_r+0x9a>
 8015060:	f04f 35ff 	mov.w	r5, #4294967295
 8015064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015066:	07da      	lsls	r2, r3, #31
 8015068:	d405      	bmi.n	8015076 <_puts_r+0x4e>
 801506a:	89a3      	ldrh	r3, [r4, #12]
 801506c:	059b      	lsls	r3, r3, #22
 801506e:	d402      	bmi.n	8015076 <_puts_r+0x4e>
 8015070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015072:	f000 f9eb 	bl	801544c <__retarget_lock_release_recursive>
 8015076:	4628      	mov	r0, r5
 8015078:	bd70      	pop	{r4, r5, r6, pc}
 801507a:	2b00      	cmp	r3, #0
 801507c:	da04      	bge.n	8015088 <_puts_r+0x60>
 801507e:	69a2      	ldr	r2, [r4, #24]
 8015080:	429a      	cmp	r2, r3
 8015082:	dc17      	bgt.n	80150b4 <_puts_r+0x8c>
 8015084:	290a      	cmp	r1, #10
 8015086:	d015      	beq.n	80150b4 <_puts_r+0x8c>
 8015088:	6823      	ldr	r3, [r4, #0]
 801508a:	1c5a      	adds	r2, r3, #1
 801508c:	6022      	str	r2, [r4, #0]
 801508e:	7019      	strb	r1, [r3, #0]
 8015090:	68a3      	ldr	r3, [r4, #8]
 8015092:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015096:	3b01      	subs	r3, #1
 8015098:	60a3      	str	r3, [r4, #8]
 801509a:	2900      	cmp	r1, #0
 801509c:	d1ed      	bne.n	801507a <_puts_r+0x52>
 801509e:	2b00      	cmp	r3, #0
 80150a0:	da11      	bge.n	80150c6 <_puts_r+0x9e>
 80150a2:	4622      	mov	r2, r4
 80150a4:	210a      	movs	r1, #10
 80150a6:	4628      	mov	r0, r5
 80150a8:	f000 f881 	bl	80151ae <__swbuf_r>
 80150ac:	3001      	adds	r0, #1
 80150ae:	d0d7      	beq.n	8015060 <_puts_r+0x38>
 80150b0:	250a      	movs	r5, #10
 80150b2:	e7d7      	b.n	8015064 <_puts_r+0x3c>
 80150b4:	4622      	mov	r2, r4
 80150b6:	4628      	mov	r0, r5
 80150b8:	f000 f879 	bl	80151ae <__swbuf_r>
 80150bc:	3001      	adds	r0, #1
 80150be:	d1e7      	bne.n	8015090 <_puts_r+0x68>
 80150c0:	e7ce      	b.n	8015060 <_puts_r+0x38>
 80150c2:	3e01      	subs	r6, #1
 80150c4:	e7e4      	b.n	8015090 <_puts_r+0x68>
 80150c6:	6823      	ldr	r3, [r4, #0]
 80150c8:	1c5a      	adds	r2, r3, #1
 80150ca:	6022      	str	r2, [r4, #0]
 80150cc:	220a      	movs	r2, #10
 80150ce:	701a      	strb	r2, [r3, #0]
 80150d0:	e7ee      	b.n	80150b0 <_puts_r+0x88>
	...

080150d4 <puts>:
 80150d4:	4b02      	ldr	r3, [pc, #8]	@ (80150e0 <puts+0xc>)
 80150d6:	4601      	mov	r1, r0
 80150d8:	6818      	ldr	r0, [r3, #0]
 80150da:	f7ff bfa5 	b.w	8015028 <_puts_r>
 80150de:	bf00      	nop
 80150e0:	2000004c 	.word	0x2000004c

080150e4 <siprintf>:
 80150e4:	b40e      	push	{r1, r2, r3}
 80150e6:	b510      	push	{r4, lr}
 80150e8:	b09d      	sub	sp, #116	@ 0x74
 80150ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80150ec:	9002      	str	r0, [sp, #8]
 80150ee:	9006      	str	r0, [sp, #24]
 80150f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150f4:	480a      	ldr	r0, [pc, #40]	@ (8015120 <siprintf+0x3c>)
 80150f6:	9107      	str	r1, [sp, #28]
 80150f8:	9104      	str	r1, [sp, #16]
 80150fa:	490a      	ldr	r1, [pc, #40]	@ (8015124 <siprintf+0x40>)
 80150fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015100:	9105      	str	r1, [sp, #20]
 8015102:	2400      	movs	r4, #0
 8015104:	a902      	add	r1, sp, #8
 8015106:	6800      	ldr	r0, [r0, #0]
 8015108:	9301      	str	r3, [sp, #4]
 801510a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801510c:	f002 fb78 	bl	8017800 <_svfiprintf_r>
 8015110:	9b02      	ldr	r3, [sp, #8]
 8015112:	701c      	strb	r4, [r3, #0]
 8015114:	b01d      	add	sp, #116	@ 0x74
 8015116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801511a:	b003      	add	sp, #12
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	2000004c 	.word	0x2000004c
 8015124:	ffff0208 	.word	0xffff0208

08015128 <__sread>:
 8015128:	b510      	push	{r4, lr}
 801512a:	460c      	mov	r4, r1
 801512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015130:	f000 f93c 	bl	80153ac <_read_r>
 8015134:	2800      	cmp	r0, #0
 8015136:	bfab      	itete	ge
 8015138:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801513a:	89a3      	ldrhlt	r3, [r4, #12]
 801513c:	181b      	addge	r3, r3, r0
 801513e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015142:	bfac      	ite	ge
 8015144:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015146:	81a3      	strhlt	r3, [r4, #12]
 8015148:	bd10      	pop	{r4, pc}

0801514a <__swrite>:
 801514a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801514e:	461f      	mov	r7, r3
 8015150:	898b      	ldrh	r3, [r1, #12]
 8015152:	05db      	lsls	r3, r3, #23
 8015154:	4605      	mov	r5, r0
 8015156:	460c      	mov	r4, r1
 8015158:	4616      	mov	r6, r2
 801515a:	d505      	bpl.n	8015168 <__swrite+0x1e>
 801515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015160:	2302      	movs	r3, #2
 8015162:	2200      	movs	r2, #0
 8015164:	f000 f910 	bl	8015388 <_lseek_r>
 8015168:	89a3      	ldrh	r3, [r4, #12]
 801516a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801516e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015172:	81a3      	strh	r3, [r4, #12]
 8015174:	4632      	mov	r2, r6
 8015176:	463b      	mov	r3, r7
 8015178:	4628      	mov	r0, r5
 801517a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801517e:	f000 b927 	b.w	80153d0 <_write_r>

08015182 <__sseek>:
 8015182:	b510      	push	{r4, lr}
 8015184:	460c      	mov	r4, r1
 8015186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801518a:	f000 f8fd 	bl	8015388 <_lseek_r>
 801518e:	1c43      	adds	r3, r0, #1
 8015190:	89a3      	ldrh	r3, [r4, #12]
 8015192:	bf15      	itete	ne
 8015194:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015196:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801519a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801519e:	81a3      	strheq	r3, [r4, #12]
 80151a0:	bf18      	it	ne
 80151a2:	81a3      	strhne	r3, [r4, #12]
 80151a4:	bd10      	pop	{r4, pc}

080151a6 <__sclose>:
 80151a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151aa:	f000 b8dd 	b.w	8015368 <_close_r>

080151ae <__swbuf_r>:
 80151ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151b0:	460e      	mov	r6, r1
 80151b2:	4614      	mov	r4, r2
 80151b4:	4605      	mov	r5, r0
 80151b6:	b118      	cbz	r0, 80151c0 <__swbuf_r+0x12>
 80151b8:	6a03      	ldr	r3, [r0, #32]
 80151ba:	b90b      	cbnz	r3, 80151c0 <__swbuf_r+0x12>
 80151bc:	f7ff feec 	bl	8014f98 <__sinit>
 80151c0:	69a3      	ldr	r3, [r4, #24]
 80151c2:	60a3      	str	r3, [r4, #8]
 80151c4:	89a3      	ldrh	r3, [r4, #12]
 80151c6:	071a      	lsls	r2, r3, #28
 80151c8:	d501      	bpl.n	80151ce <__swbuf_r+0x20>
 80151ca:	6923      	ldr	r3, [r4, #16]
 80151cc:	b943      	cbnz	r3, 80151e0 <__swbuf_r+0x32>
 80151ce:	4621      	mov	r1, r4
 80151d0:	4628      	mov	r0, r5
 80151d2:	f000 f82b 	bl	801522c <__swsetup_r>
 80151d6:	b118      	cbz	r0, 80151e0 <__swbuf_r+0x32>
 80151d8:	f04f 37ff 	mov.w	r7, #4294967295
 80151dc:	4638      	mov	r0, r7
 80151de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151e0:	6823      	ldr	r3, [r4, #0]
 80151e2:	6922      	ldr	r2, [r4, #16]
 80151e4:	1a98      	subs	r0, r3, r2
 80151e6:	6963      	ldr	r3, [r4, #20]
 80151e8:	b2f6      	uxtb	r6, r6
 80151ea:	4283      	cmp	r3, r0
 80151ec:	4637      	mov	r7, r6
 80151ee:	dc05      	bgt.n	80151fc <__swbuf_r+0x4e>
 80151f0:	4621      	mov	r1, r4
 80151f2:	4628      	mov	r0, r5
 80151f4:	f002 fdc6 	bl	8017d84 <_fflush_r>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	d1ed      	bne.n	80151d8 <__swbuf_r+0x2a>
 80151fc:	68a3      	ldr	r3, [r4, #8]
 80151fe:	3b01      	subs	r3, #1
 8015200:	60a3      	str	r3, [r4, #8]
 8015202:	6823      	ldr	r3, [r4, #0]
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	6022      	str	r2, [r4, #0]
 8015208:	701e      	strb	r6, [r3, #0]
 801520a:	6962      	ldr	r2, [r4, #20]
 801520c:	1c43      	adds	r3, r0, #1
 801520e:	429a      	cmp	r2, r3
 8015210:	d004      	beq.n	801521c <__swbuf_r+0x6e>
 8015212:	89a3      	ldrh	r3, [r4, #12]
 8015214:	07db      	lsls	r3, r3, #31
 8015216:	d5e1      	bpl.n	80151dc <__swbuf_r+0x2e>
 8015218:	2e0a      	cmp	r6, #10
 801521a:	d1df      	bne.n	80151dc <__swbuf_r+0x2e>
 801521c:	4621      	mov	r1, r4
 801521e:	4628      	mov	r0, r5
 8015220:	f002 fdb0 	bl	8017d84 <_fflush_r>
 8015224:	2800      	cmp	r0, #0
 8015226:	d0d9      	beq.n	80151dc <__swbuf_r+0x2e>
 8015228:	e7d6      	b.n	80151d8 <__swbuf_r+0x2a>
	...

0801522c <__swsetup_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4b29      	ldr	r3, [pc, #164]	@ (80152d4 <__swsetup_r+0xa8>)
 8015230:	4605      	mov	r5, r0
 8015232:	6818      	ldr	r0, [r3, #0]
 8015234:	460c      	mov	r4, r1
 8015236:	b118      	cbz	r0, 8015240 <__swsetup_r+0x14>
 8015238:	6a03      	ldr	r3, [r0, #32]
 801523a:	b90b      	cbnz	r3, 8015240 <__swsetup_r+0x14>
 801523c:	f7ff feac 	bl	8014f98 <__sinit>
 8015240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015244:	0719      	lsls	r1, r3, #28
 8015246:	d422      	bmi.n	801528e <__swsetup_r+0x62>
 8015248:	06da      	lsls	r2, r3, #27
 801524a:	d407      	bmi.n	801525c <__swsetup_r+0x30>
 801524c:	2209      	movs	r2, #9
 801524e:	602a      	str	r2, [r5, #0]
 8015250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015254:	81a3      	strh	r3, [r4, #12]
 8015256:	f04f 30ff 	mov.w	r0, #4294967295
 801525a:	e033      	b.n	80152c4 <__swsetup_r+0x98>
 801525c:	0758      	lsls	r0, r3, #29
 801525e:	d512      	bpl.n	8015286 <__swsetup_r+0x5a>
 8015260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015262:	b141      	cbz	r1, 8015276 <__swsetup_r+0x4a>
 8015264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015268:	4299      	cmp	r1, r3
 801526a:	d002      	beq.n	8015272 <__swsetup_r+0x46>
 801526c:	4628      	mov	r0, r5
 801526e:	f000 ff09 	bl	8016084 <_free_r>
 8015272:	2300      	movs	r3, #0
 8015274:	6363      	str	r3, [r4, #52]	@ 0x34
 8015276:	89a3      	ldrh	r3, [r4, #12]
 8015278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801527c:	81a3      	strh	r3, [r4, #12]
 801527e:	2300      	movs	r3, #0
 8015280:	6063      	str	r3, [r4, #4]
 8015282:	6923      	ldr	r3, [r4, #16]
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	89a3      	ldrh	r3, [r4, #12]
 8015288:	f043 0308 	orr.w	r3, r3, #8
 801528c:	81a3      	strh	r3, [r4, #12]
 801528e:	6923      	ldr	r3, [r4, #16]
 8015290:	b94b      	cbnz	r3, 80152a6 <__swsetup_r+0x7a>
 8015292:	89a3      	ldrh	r3, [r4, #12]
 8015294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801529c:	d003      	beq.n	80152a6 <__swsetup_r+0x7a>
 801529e:	4621      	mov	r1, r4
 80152a0:	4628      	mov	r0, r5
 80152a2:	f002 fdcf 	bl	8017e44 <__smakebuf_r>
 80152a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152aa:	f013 0201 	ands.w	r2, r3, #1
 80152ae:	d00a      	beq.n	80152c6 <__swsetup_r+0x9a>
 80152b0:	2200      	movs	r2, #0
 80152b2:	60a2      	str	r2, [r4, #8]
 80152b4:	6962      	ldr	r2, [r4, #20]
 80152b6:	4252      	negs	r2, r2
 80152b8:	61a2      	str	r2, [r4, #24]
 80152ba:	6922      	ldr	r2, [r4, #16]
 80152bc:	b942      	cbnz	r2, 80152d0 <__swsetup_r+0xa4>
 80152be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80152c2:	d1c5      	bne.n	8015250 <__swsetup_r+0x24>
 80152c4:	bd38      	pop	{r3, r4, r5, pc}
 80152c6:	0799      	lsls	r1, r3, #30
 80152c8:	bf58      	it	pl
 80152ca:	6962      	ldrpl	r2, [r4, #20]
 80152cc:	60a2      	str	r2, [r4, #8]
 80152ce:	e7f4      	b.n	80152ba <__swsetup_r+0x8e>
 80152d0:	2000      	movs	r0, #0
 80152d2:	e7f7      	b.n	80152c4 <__swsetup_r+0x98>
 80152d4:	2000004c 	.word	0x2000004c

080152d8 <memcmp>:
 80152d8:	b510      	push	{r4, lr}
 80152da:	3901      	subs	r1, #1
 80152dc:	4402      	add	r2, r0
 80152de:	4290      	cmp	r0, r2
 80152e0:	d101      	bne.n	80152e6 <memcmp+0xe>
 80152e2:	2000      	movs	r0, #0
 80152e4:	e005      	b.n	80152f2 <memcmp+0x1a>
 80152e6:	7803      	ldrb	r3, [r0, #0]
 80152e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80152ec:	42a3      	cmp	r3, r4
 80152ee:	d001      	beq.n	80152f4 <memcmp+0x1c>
 80152f0:	1b18      	subs	r0, r3, r4
 80152f2:	bd10      	pop	{r4, pc}
 80152f4:	3001      	adds	r0, #1
 80152f6:	e7f2      	b.n	80152de <memcmp+0x6>

080152f8 <memmove>:
 80152f8:	4288      	cmp	r0, r1
 80152fa:	b510      	push	{r4, lr}
 80152fc:	eb01 0402 	add.w	r4, r1, r2
 8015300:	d902      	bls.n	8015308 <memmove+0x10>
 8015302:	4284      	cmp	r4, r0
 8015304:	4623      	mov	r3, r4
 8015306:	d807      	bhi.n	8015318 <memmove+0x20>
 8015308:	1e43      	subs	r3, r0, #1
 801530a:	42a1      	cmp	r1, r4
 801530c:	d008      	beq.n	8015320 <memmove+0x28>
 801530e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015316:	e7f8      	b.n	801530a <memmove+0x12>
 8015318:	4402      	add	r2, r0
 801531a:	4601      	mov	r1, r0
 801531c:	428a      	cmp	r2, r1
 801531e:	d100      	bne.n	8015322 <memmove+0x2a>
 8015320:	bd10      	pop	{r4, pc}
 8015322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801532a:	e7f7      	b.n	801531c <memmove+0x24>

0801532c <memset>:
 801532c:	4402      	add	r2, r0
 801532e:	4603      	mov	r3, r0
 8015330:	4293      	cmp	r3, r2
 8015332:	d100      	bne.n	8015336 <memset+0xa>
 8015334:	4770      	bx	lr
 8015336:	f803 1b01 	strb.w	r1, [r3], #1
 801533a:	e7f9      	b.n	8015330 <memset+0x4>

0801533c <strncmp>:
 801533c:	b510      	push	{r4, lr}
 801533e:	b16a      	cbz	r2, 801535c <strncmp+0x20>
 8015340:	3901      	subs	r1, #1
 8015342:	1884      	adds	r4, r0, r2
 8015344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015348:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801534c:	429a      	cmp	r2, r3
 801534e:	d103      	bne.n	8015358 <strncmp+0x1c>
 8015350:	42a0      	cmp	r0, r4
 8015352:	d001      	beq.n	8015358 <strncmp+0x1c>
 8015354:	2a00      	cmp	r2, #0
 8015356:	d1f5      	bne.n	8015344 <strncmp+0x8>
 8015358:	1ad0      	subs	r0, r2, r3
 801535a:	bd10      	pop	{r4, pc}
 801535c:	4610      	mov	r0, r2
 801535e:	e7fc      	b.n	801535a <strncmp+0x1e>

08015360 <_localeconv_r>:
 8015360:	4800      	ldr	r0, [pc, #0]	@ (8015364 <_localeconv_r+0x4>)
 8015362:	4770      	bx	lr
 8015364:	2000018c 	.word	0x2000018c

08015368 <_close_r>:
 8015368:	b538      	push	{r3, r4, r5, lr}
 801536a:	4d06      	ldr	r5, [pc, #24]	@ (8015384 <_close_r+0x1c>)
 801536c:	2300      	movs	r3, #0
 801536e:	4604      	mov	r4, r0
 8015370:	4608      	mov	r0, r1
 8015372:	602b      	str	r3, [r5, #0]
 8015374:	f7ec f934 	bl	80015e0 <_close>
 8015378:	1c43      	adds	r3, r0, #1
 801537a:	d102      	bne.n	8015382 <_close_r+0x1a>
 801537c:	682b      	ldr	r3, [r5, #0]
 801537e:	b103      	cbz	r3, 8015382 <_close_r+0x1a>
 8015380:	6023      	str	r3, [r4, #0]
 8015382:	bd38      	pop	{r3, r4, r5, pc}
 8015384:	200083c0 	.word	0x200083c0

08015388 <_lseek_r>:
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	4d07      	ldr	r5, [pc, #28]	@ (80153a8 <_lseek_r+0x20>)
 801538c:	4604      	mov	r4, r0
 801538e:	4608      	mov	r0, r1
 8015390:	4611      	mov	r1, r2
 8015392:	2200      	movs	r2, #0
 8015394:	602a      	str	r2, [r5, #0]
 8015396:	461a      	mov	r2, r3
 8015398:	f7ec f949 	bl	800162e <_lseek>
 801539c:	1c43      	adds	r3, r0, #1
 801539e:	d102      	bne.n	80153a6 <_lseek_r+0x1e>
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	b103      	cbz	r3, 80153a6 <_lseek_r+0x1e>
 80153a4:	6023      	str	r3, [r4, #0]
 80153a6:	bd38      	pop	{r3, r4, r5, pc}
 80153a8:	200083c0 	.word	0x200083c0

080153ac <_read_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4d07      	ldr	r5, [pc, #28]	@ (80153cc <_read_r+0x20>)
 80153b0:	4604      	mov	r4, r0
 80153b2:	4608      	mov	r0, r1
 80153b4:	4611      	mov	r1, r2
 80153b6:	2200      	movs	r2, #0
 80153b8:	602a      	str	r2, [r5, #0]
 80153ba:	461a      	mov	r2, r3
 80153bc:	f7ec f8f3 	bl	80015a6 <_read>
 80153c0:	1c43      	adds	r3, r0, #1
 80153c2:	d102      	bne.n	80153ca <_read_r+0x1e>
 80153c4:	682b      	ldr	r3, [r5, #0]
 80153c6:	b103      	cbz	r3, 80153ca <_read_r+0x1e>
 80153c8:	6023      	str	r3, [r4, #0]
 80153ca:	bd38      	pop	{r3, r4, r5, pc}
 80153cc:	200083c0 	.word	0x200083c0

080153d0 <_write_r>:
 80153d0:	b538      	push	{r3, r4, r5, lr}
 80153d2:	4d07      	ldr	r5, [pc, #28]	@ (80153f0 <_write_r+0x20>)
 80153d4:	4604      	mov	r4, r0
 80153d6:	4608      	mov	r0, r1
 80153d8:	4611      	mov	r1, r2
 80153da:	2200      	movs	r2, #0
 80153dc:	602a      	str	r2, [r5, #0]
 80153de:	461a      	mov	r2, r3
 80153e0:	f7ec fb1a 	bl	8001a18 <_write>
 80153e4:	1c43      	adds	r3, r0, #1
 80153e6:	d102      	bne.n	80153ee <_write_r+0x1e>
 80153e8:	682b      	ldr	r3, [r5, #0]
 80153ea:	b103      	cbz	r3, 80153ee <_write_r+0x1e>
 80153ec:	6023      	str	r3, [r4, #0]
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	200083c0 	.word	0x200083c0

080153f4 <__errno>:
 80153f4:	4b01      	ldr	r3, [pc, #4]	@ (80153fc <__errno+0x8>)
 80153f6:	6818      	ldr	r0, [r3, #0]
 80153f8:	4770      	bx	lr
 80153fa:	bf00      	nop
 80153fc:	2000004c 	.word	0x2000004c

08015400 <__libc_init_array>:
 8015400:	b570      	push	{r4, r5, r6, lr}
 8015402:	4d0d      	ldr	r5, [pc, #52]	@ (8015438 <__libc_init_array+0x38>)
 8015404:	4c0d      	ldr	r4, [pc, #52]	@ (801543c <__libc_init_array+0x3c>)
 8015406:	1b64      	subs	r4, r4, r5
 8015408:	10a4      	asrs	r4, r4, #2
 801540a:	2600      	movs	r6, #0
 801540c:	42a6      	cmp	r6, r4
 801540e:	d109      	bne.n	8015424 <__libc_init_array+0x24>
 8015410:	4d0b      	ldr	r5, [pc, #44]	@ (8015440 <__libc_init_array+0x40>)
 8015412:	4c0c      	ldr	r4, [pc, #48]	@ (8015444 <__libc_init_array+0x44>)
 8015414:	f003 f978 	bl	8018708 <_init>
 8015418:	1b64      	subs	r4, r4, r5
 801541a:	10a4      	asrs	r4, r4, #2
 801541c:	2600      	movs	r6, #0
 801541e:	42a6      	cmp	r6, r4
 8015420:	d105      	bne.n	801542e <__libc_init_array+0x2e>
 8015422:	bd70      	pop	{r4, r5, r6, pc}
 8015424:	f855 3b04 	ldr.w	r3, [r5], #4
 8015428:	4798      	blx	r3
 801542a:	3601      	adds	r6, #1
 801542c:	e7ee      	b.n	801540c <__libc_init_array+0xc>
 801542e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015432:	4798      	blx	r3
 8015434:	3601      	adds	r6, #1
 8015436:	e7f2      	b.n	801541e <__libc_init_array+0x1e>
 8015438:	0801c3d0 	.word	0x0801c3d0
 801543c:	0801c3d0 	.word	0x0801c3d0
 8015440:	0801c3d0 	.word	0x0801c3d0
 8015444:	0801c3d4 	.word	0x0801c3d4

08015448 <__retarget_lock_init_recursive>:
 8015448:	4770      	bx	lr

0801544a <__retarget_lock_acquire_recursive>:
 801544a:	4770      	bx	lr

0801544c <__retarget_lock_release_recursive>:
 801544c:	4770      	bx	lr

0801544e <memcpy>:
 801544e:	440a      	add	r2, r1
 8015450:	4291      	cmp	r1, r2
 8015452:	f100 33ff 	add.w	r3, r0, #4294967295
 8015456:	d100      	bne.n	801545a <memcpy+0xc>
 8015458:	4770      	bx	lr
 801545a:	b510      	push	{r4, lr}
 801545c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015460:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015464:	4291      	cmp	r1, r2
 8015466:	d1f9      	bne.n	801545c <memcpy+0xe>
 8015468:	bd10      	pop	{r4, pc}
	...

0801546c <nanf>:
 801546c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015474 <nanf+0x8>
 8015470:	4770      	bx	lr
 8015472:	bf00      	nop
 8015474:	7fc00000 	.word	0x7fc00000

08015478 <__assert_func>:
 8015478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801547a:	4614      	mov	r4, r2
 801547c:	461a      	mov	r2, r3
 801547e:	4b09      	ldr	r3, [pc, #36]	@ (80154a4 <__assert_func+0x2c>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	4605      	mov	r5, r0
 8015484:	68d8      	ldr	r0, [r3, #12]
 8015486:	b14c      	cbz	r4, 801549c <__assert_func+0x24>
 8015488:	4b07      	ldr	r3, [pc, #28]	@ (80154a8 <__assert_func+0x30>)
 801548a:	9100      	str	r1, [sp, #0]
 801548c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015490:	4906      	ldr	r1, [pc, #24]	@ (80154ac <__assert_func+0x34>)
 8015492:	462b      	mov	r3, r5
 8015494:	f002 fc9e 	bl	8017dd4 <fiprintf>
 8015498:	f002 fd4a 	bl	8017f30 <abort>
 801549c:	4b04      	ldr	r3, [pc, #16]	@ (80154b0 <__assert_func+0x38>)
 801549e:	461c      	mov	r4, r3
 80154a0:	e7f3      	b.n	801548a <__assert_func+0x12>
 80154a2:	bf00      	nop
 80154a4:	2000004c 	.word	0x2000004c
 80154a8:	0801bff2 	.word	0x0801bff2
 80154ac:	0801bfff 	.word	0x0801bfff
 80154b0:	0801c02d 	.word	0x0801c02d

080154b4 <quorem>:
 80154b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b8:	6903      	ldr	r3, [r0, #16]
 80154ba:	690c      	ldr	r4, [r1, #16]
 80154bc:	42a3      	cmp	r3, r4
 80154be:	4607      	mov	r7, r0
 80154c0:	db7e      	blt.n	80155c0 <quorem+0x10c>
 80154c2:	3c01      	subs	r4, #1
 80154c4:	f101 0814 	add.w	r8, r1, #20
 80154c8:	00a3      	lsls	r3, r4, #2
 80154ca:	f100 0514 	add.w	r5, r0, #20
 80154ce:	9300      	str	r3, [sp, #0]
 80154d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80154d4:	9301      	str	r3, [sp, #4]
 80154d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80154da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80154de:	3301      	adds	r3, #1
 80154e0:	429a      	cmp	r2, r3
 80154e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80154e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80154ea:	d32e      	bcc.n	801554a <quorem+0x96>
 80154ec:	f04f 0a00 	mov.w	sl, #0
 80154f0:	46c4      	mov	ip, r8
 80154f2:	46ae      	mov	lr, r5
 80154f4:	46d3      	mov	fp, sl
 80154f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80154fa:	b298      	uxth	r0, r3
 80154fc:	fb06 a000 	mla	r0, r6, r0, sl
 8015500:	0c02      	lsrs	r2, r0, #16
 8015502:	0c1b      	lsrs	r3, r3, #16
 8015504:	fb06 2303 	mla	r3, r6, r3, r2
 8015508:	f8de 2000 	ldr.w	r2, [lr]
 801550c:	b280      	uxth	r0, r0
 801550e:	b292      	uxth	r2, r2
 8015510:	1a12      	subs	r2, r2, r0
 8015512:	445a      	add	r2, fp
 8015514:	f8de 0000 	ldr.w	r0, [lr]
 8015518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801551c:	b29b      	uxth	r3, r3
 801551e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015522:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015526:	b292      	uxth	r2, r2
 8015528:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801552c:	45e1      	cmp	r9, ip
 801552e:	f84e 2b04 	str.w	r2, [lr], #4
 8015532:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015536:	d2de      	bcs.n	80154f6 <quorem+0x42>
 8015538:	9b00      	ldr	r3, [sp, #0]
 801553a:	58eb      	ldr	r3, [r5, r3]
 801553c:	b92b      	cbnz	r3, 801554a <quorem+0x96>
 801553e:	9b01      	ldr	r3, [sp, #4]
 8015540:	3b04      	subs	r3, #4
 8015542:	429d      	cmp	r5, r3
 8015544:	461a      	mov	r2, r3
 8015546:	d32f      	bcc.n	80155a8 <quorem+0xf4>
 8015548:	613c      	str	r4, [r7, #16]
 801554a:	4638      	mov	r0, r7
 801554c:	f001 f956 	bl	80167fc <__mcmp>
 8015550:	2800      	cmp	r0, #0
 8015552:	db25      	blt.n	80155a0 <quorem+0xec>
 8015554:	4629      	mov	r1, r5
 8015556:	2000      	movs	r0, #0
 8015558:	f858 2b04 	ldr.w	r2, [r8], #4
 801555c:	f8d1 c000 	ldr.w	ip, [r1]
 8015560:	fa1f fe82 	uxth.w	lr, r2
 8015564:	fa1f f38c 	uxth.w	r3, ip
 8015568:	eba3 030e 	sub.w	r3, r3, lr
 801556c:	4403      	add	r3, r0
 801556e:	0c12      	lsrs	r2, r2, #16
 8015570:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015574:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015578:	b29b      	uxth	r3, r3
 801557a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801557e:	45c1      	cmp	r9, r8
 8015580:	f841 3b04 	str.w	r3, [r1], #4
 8015584:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015588:	d2e6      	bcs.n	8015558 <quorem+0xa4>
 801558a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801558e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015592:	b922      	cbnz	r2, 801559e <quorem+0xea>
 8015594:	3b04      	subs	r3, #4
 8015596:	429d      	cmp	r5, r3
 8015598:	461a      	mov	r2, r3
 801559a:	d30b      	bcc.n	80155b4 <quorem+0x100>
 801559c:	613c      	str	r4, [r7, #16]
 801559e:	3601      	adds	r6, #1
 80155a0:	4630      	mov	r0, r6
 80155a2:	b003      	add	sp, #12
 80155a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a8:	6812      	ldr	r2, [r2, #0]
 80155aa:	3b04      	subs	r3, #4
 80155ac:	2a00      	cmp	r2, #0
 80155ae:	d1cb      	bne.n	8015548 <quorem+0x94>
 80155b0:	3c01      	subs	r4, #1
 80155b2:	e7c6      	b.n	8015542 <quorem+0x8e>
 80155b4:	6812      	ldr	r2, [r2, #0]
 80155b6:	3b04      	subs	r3, #4
 80155b8:	2a00      	cmp	r2, #0
 80155ba:	d1ef      	bne.n	801559c <quorem+0xe8>
 80155bc:	3c01      	subs	r4, #1
 80155be:	e7ea      	b.n	8015596 <quorem+0xe2>
 80155c0:	2000      	movs	r0, #0
 80155c2:	e7ee      	b.n	80155a2 <quorem+0xee>
 80155c4:	0000      	movs	r0, r0
	...

080155c8 <_dtoa_r>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	ed2d 8b02 	vpush	{d8}
 80155d0:	69c7      	ldr	r7, [r0, #28]
 80155d2:	b091      	sub	sp, #68	@ 0x44
 80155d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80155d8:	ec55 4b10 	vmov	r4, r5, d0
 80155dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80155de:	9107      	str	r1, [sp, #28]
 80155e0:	4681      	mov	r9, r0
 80155e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80155e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80155e6:	b97f      	cbnz	r7, 8015608 <_dtoa_r+0x40>
 80155e8:	2010      	movs	r0, #16
 80155ea:	f000 fd95 	bl	8016118 <malloc>
 80155ee:	4602      	mov	r2, r0
 80155f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80155f4:	b920      	cbnz	r0, 8015600 <_dtoa_r+0x38>
 80155f6:	4ba0      	ldr	r3, [pc, #640]	@ (8015878 <_dtoa_r+0x2b0>)
 80155f8:	21ef      	movs	r1, #239	@ 0xef
 80155fa:	48a0      	ldr	r0, [pc, #640]	@ (801587c <_dtoa_r+0x2b4>)
 80155fc:	f7ff ff3c 	bl	8015478 <__assert_func>
 8015600:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015604:	6007      	str	r7, [r0, #0]
 8015606:	60c7      	str	r7, [r0, #12]
 8015608:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801560c:	6819      	ldr	r1, [r3, #0]
 801560e:	b159      	cbz	r1, 8015628 <_dtoa_r+0x60>
 8015610:	685a      	ldr	r2, [r3, #4]
 8015612:	604a      	str	r2, [r1, #4]
 8015614:	2301      	movs	r3, #1
 8015616:	4093      	lsls	r3, r2
 8015618:	608b      	str	r3, [r1, #8]
 801561a:	4648      	mov	r0, r9
 801561c:	f000 fe72 	bl	8016304 <_Bfree>
 8015620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015624:	2200      	movs	r2, #0
 8015626:	601a      	str	r2, [r3, #0]
 8015628:	1e2b      	subs	r3, r5, #0
 801562a:	bfbb      	ittet	lt
 801562c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015630:	9303      	strlt	r3, [sp, #12]
 8015632:	2300      	movge	r3, #0
 8015634:	2201      	movlt	r2, #1
 8015636:	bfac      	ite	ge
 8015638:	6033      	strge	r3, [r6, #0]
 801563a:	6032      	strlt	r2, [r6, #0]
 801563c:	4b90      	ldr	r3, [pc, #576]	@ (8015880 <_dtoa_r+0x2b8>)
 801563e:	9e03      	ldr	r6, [sp, #12]
 8015640:	43b3      	bics	r3, r6
 8015642:	d110      	bne.n	8015666 <_dtoa_r+0x9e>
 8015644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015646:	f242 730f 	movw	r3, #9999	@ 0x270f
 801564a:	6013      	str	r3, [r2, #0]
 801564c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8015650:	4323      	orrs	r3, r4
 8015652:	f000 84e6 	beq.w	8016022 <_dtoa_r+0xa5a>
 8015656:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015658:	4f8a      	ldr	r7, [pc, #552]	@ (8015884 <_dtoa_r+0x2bc>)
 801565a:	2b00      	cmp	r3, #0
 801565c:	f000 84e8 	beq.w	8016030 <_dtoa_r+0xa68>
 8015660:	1cfb      	adds	r3, r7, #3
 8015662:	f000 bce3 	b.w	801602c <_dtoa_r+0xa64>
 8015666:	ed9d 8b02 	vldr	d8, [sp, #8]
 801566a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015672:	d10a      	bne.n	801568a <_dtoa_r+0xc2>
 8015674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015676:	2301      	movs	r3, #1
 8015678:	6013      	str	r3, [r2, #0]
 801567a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801567c:	b113      	cbz	r3, 8015684 <_dtoa_r+0xbc>
 801567e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015680:	4b81      	ldr	r3, [pc, #516]	@ (8015888 <_dtoa_r+0x2c0>)
 8015682:	6013      	str	r3, [r2, #0]
 8015684:	4f81      	ldr	r7, [pc, #516]	@ (801588c <_dtoa_r+0x2c4>)
 8015686:	f000 bcd3 	b.w	8016030 <_dtoa_r+0xa68>
 801568a:	aa0e      	add	r2, sp, #56	@ 0x38
 801568c:	a90f      	add	r1, sp, #60	@ 0x3c
 801568e:	4648      	mov	r0, r9
 8015690:	eeb0 0b48 	vmov.f64	d0, d8
 8015694:	f001 f9d2 	bl	8016a3c <__d2b>
 8015698:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801569c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801569e:	9001      	str	r0, [sp, #4]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d045      	beq.n	8015730 <_dtoa_r+0x168>
 80156a4:	eeb0 7b48 	vmov.f64	d7, d8
 80156a8:	ee18 1a90 	vmov	r1, s17
 80156ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80156b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80156b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80156b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80156bc:	2500      	movs	r5, #0
 80156be:	ee07 1a90 	vmov	s15, r1
 80156c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80156c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015860 <_dtoa_r+0x298>
 80156ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80156ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015868 <_dtoa_r+0x2a0>
 80156d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80156d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8015870 <_dtoa_r+0x2a8>
 80156da:	ee07 3a90 	vmov	s15, r3
 80156de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80156e2:	eeb0 7b46 	vmov.f64	d7, d6
 80156e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80156ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80156ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80156f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f6:	ee16 8a90 	vmov	r8, s13
 80156fa:	d508      	bpl.n	801570e <_dtoa_r+0x146>
 80156fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015700:	eeb4 6b47 	vcmp.f64	d6, d7
 8015704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015708:	bf18      	it	ne
 801570a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801570e:	f1b8 0f16 	cmp.w	r8, #22
 8015712:	d82b      	bhi.n	801576c <_dtoa_r+0x1a4>
 8015714:	495e      	ldr	r1, [pc, #376]	@ (8015890 <_dtoa_r+0x2c8>)
 8015716:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801571a:	ed91 7b00 	vldr	d7, [r1]
 801571e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015726:	d501      	bpl.n	801572c <_dtoa_r+0x164>
 8015728:	f108 38ff 	add.w	r8, r8, #4294967295
 801572c:	2100      	movs	r1, #0
 801572e:	e01e      	b.n	801576e <_dtoa_r+0x1a6>
 8015730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015732:	4413      	add	r3, r2
 8015734:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8015738:	2920      	cmp	r1, #32
 801573a:	bfc1      	itttt	gt
 801573c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8015740:	408e      	lslgt	r6, r1
 8015742:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8015746:	fa24 f101 	lsrgt.w	r1, r4, r1
 801574a:	bfd6      	itet	le
 801574c:	f1c1 0120 	rsble	r1, r1, #32
 8015750:	4331      	orrgt	r1, r6
 8015752:	fa04 f101 	lslle.w	r1, r4, r1
 8015756:	ee07 1a90 	vmov	s15, r1
 801575a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801575e:	3b01      	subs	r3, #1
 8015760:	ee17 1a90 	vmov	r1, s15
 8015764:	2501      	movs	r5, #1
 8015766:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801576a:	e7a8      	b.n	80156be <_dtoa_r+0xf6>
 801576c:	2101      	movs	r1, #1
 801576e:	1ad2      	subs	r2, r2, r3
 8015770:	1e53      	subs	r3, r2, #1
 8015772:	9306      	str	r3, [sp, #24]
 8015774:	bf45      	ittet	mi
 8015776:	f1c2 0301 	rsbmi	r3, r2, #1
 801577a:	9304      	strmi	r3, [sp, #16]
 801577c:	2300      	movpl	r3, #0
 801577e:	2300      	movmi	r3, #0
 8015780:	bf4c      	ite	mi
 8015782:	9306      	strmi	r3, [sp, #24]
 8015784:	9304      	strpl	r3, [sp, #16]
 8015786:	f1b8 0f00 	cmp.w	r8, #0
 801578a:	910c      	str	r1, [sp, #48]	@ 0x30
 801578c:	db18      	blt.n	80157c0 <_dtoa_r+0x1f8>
 801578e:	9b06      	ldr	r3, [sp, #24]
 8015790:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8015794:	4443      	add	r3, r8
 8015796:	9306      	str	r3, [sp, #24]
 8015798:	2300      	movs	r3, #0
 801579a:	9a07      	ldr	r2, [sp, #28]
 801579c:	2a09      	cmp	r2, #9
 801579e:	d845      	bhi.n	801582c <_dtoa_r+0x264>
 80157a0:	2a05      	cmp	r2, #5
 80157a2:	bfc4      	itt	gt
 80157a4:	3a04      	subgt	r2, #4
 80157a6:	9207      	strgt	r2, [sp, #28]
 80157a8:	9a07      	ldr	r2, [sp, #28]
 80157aa:	f1a2 0202 	sub.w	r2, r2, #2
 80157ae:	bfcc      	ite	gt
 80157b0:	2400      	movgt	r4, #0
 80157b2:	2401      	movle	r4, #1
 80157b4:	2a03      	cmp	r2, #3
 80157b6:	d844      	bhi.n	8015842 <_dtoa_r+0x27a>
 80157b8:	e8df f002 	tbb	[pc, r2]
 80157bc:	0b173634 	.word	0x0b173634
 80157c0:	9b04      	ldr	r3, [sp, #16]
 80157c2:	2200      	movs	r2, #0
 80157c4:	eba3 0308 	sub.w	r3, r3, r8
 80157c8:	9304      	str	r3, [sp, #16]
 80157ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80157cc:	f1c8 0300 	rsb	r3, r8, #0
 80157d0:	e7e3      	b.n	801579a <_dtoa_r+0x1d2>
 80157d2:	2201      	movs	r2, #1
 80157d4:	9208      	str	r2, [sp, #32]
 80157d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157d8:	eb08 0b02 	add.w	fp, r8, r2
 80157dc:	f10b 0a01 	add.w	sl, fp, #1
 80157e0:	4652      	mov	r2, sl
 80157e2:	2a01      	cmp	r2, #1
 80157e4:	bfb8      	it	lt
 80157e6:	2201      	movlt	r2, #1
 80157e8:	e006      	b.n	80157f8 <_dtoa_r+0x230>
 80157ea:	2201      	movs	r2, #1
 80157ec:	9208      	str	r2, [sp, #32]
 80157ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80157f0:	2a00      	cmp	r2, #0
 80157f2:	dd29      	ble.n	8015848 <_dtoa_r+0x280>
 80157f4:	4693      	mov	fp, r2
 80157f6:	4692      	mov	sl, r2
 80157f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80157fc:	2100      	movs	r1, #0
 80157fe:	2004      	movs	r0, #4
 8015800:	f100 0614 	add.w	r6, r0, #20
 8015804:	4296      	cmp	r6, r2
 8015806:	d926      	bls.n	8015856 <_dtoa_r+0x28e>
 8015808:	6079      	str	r1, [r7, #4]
 801580a:	4648      	mov	r0, r9
 801580c:	9305      	str	r3, [sp, #20]
 801580e:	f000 fd39 	bl	8016284 <_Balloc>
 8015812:	9b05      	ldr	r3, [sp, #20]
 8015814:	4607      	mov	r7, r0
 8015816:	2800      	cmp	r0, #0
 8015818:	d13e      	bne.n	8015898 <_dtoa_r+0x2d0>
 801581a:	4b1e      	ldr	r3, [pc, #120]	@ (8015894 <_dtoa_r+0x2cc>)
 801581c:	4602      	mov	r2, r0
 801581e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015822:	e6ea      	b.n	80155fa <_dtoa_r+0x32>
 8015824:	2200      	movs	r2, #0
 8015826:	e7e1      	b.n	80157ec <_dtoa_r+0x224>
 8015828:	2200      	movs	r2, #0
 801582a:	e7d3      	b.n	80157d4 <_dtoa_r+0x20c>
 801582c:	2401      	movs	r4, #1
 801582e:	2200      	movs	r2, #0
 8015830:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8015834:	f04f 3bff 	mov.w	fp, #4294967295
 8015838:	2100      	movs	r1, #0
 801583a:	46da      	mov	sl, fp
 801583c:	2212      	movs	r2, #18
 801583e:	9109      	str	r1, [sp, #36]	@ 0x24
 8015840:	e7da      	b.n	80157f8 <_dtoa_r+0x230>
 8015842:	2201      	movs	r2, #1
 8015844:	9208      	str	r2, [sp, #32]
 8015846:	e7f5      	b.n	8015834 <_dtoa_r+0x26c>
 8015848:	f04f 0b01 	mov.w	fp, #1
 801584c:	46da      	mov	sl, fp
 801584e:	465a      	mov	r2, fp
 8015850:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8015854:	e7d0      	b.n	80157f8 <_dtoa_r+0x230>
 8015856:	3101      	adds	r1, #1
 8015858:	0040      	lsls	r0, r0, #1
 801585a:	e7d1      	b.n	8015800 <_dtoa_r+0x238>
 801585c:	f3af 8000 	nop.w
 8015860:	636f4361 	.word	0x636f4361
 8015864:	3fd287a7 	.word	0x3fd287a7
 8015868:	8b60c8b3 	.word	0x8b60c8b3
 801586c:	3fc68a28 	.word	0x3fc68a28
 8015870:	509f79fb 	.word	0x509f79fb
 8015874:	3fd34413 	.word	0x3fd34413
 8015878:	0801bf4a 	.word	0x0801bf4a
 801587c:	0801c03b 	.word	0x0801c03b
 8015880:	7ff00000 	.word	0x7ff00000
 8015884:	0801c037 	.word	0x0801c037
 8015888:	0801bfca 	.word	0x0801bfca
 801588c:	0801bfc9 	.word	0x0801bfc9
 8015890:	0801c2b0 	.word	0x0801c2b0
 8015894:	0801c093 	.word	0x0801c093
 8015898:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801589c:	f1ba 0f0e 	cmp.w	sl, #14
 80158a0:	6010      	str	r0, [r2, #0]
 80158a2:	d86e      	bhi.n	8015982 <_dtoa_r+0x3ba>
 80158a4:	2c00      	cmp	r4, #0
 80158a6:	d06c      	beq.n	8015982 <_dtoa_r+0x3ba>
 80158a8:	f1b8 0f00 	cmp.w	r8, #0
 80158ac:	f340 80b4 	ble.w	8015a18 <_dtoa_r+0x450>
 80158b0:	4ac8      	ldr	r2, [pc, #800]	@ (8015bd4 <_dtoa_r+0x60c>)
 80158b2:	f008 010f 	and.w	r1, r8, #15
 80158b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80158ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80158be:	ed92 7b00 	vldr	d7, [r2]
 80158c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80158c6:	f000 809b 	beq.w	8015a00 <_dtoa_r+0x438>
 80158ca:	4ac3      	ldr	r2, [pc, #780]	@ (8015bd8 <_dtoa_r+0x610>)
 80158cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80158d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80158d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80158d8:	f001 010f 	and.w	r1, r1, #15
 80158dc:	2203      	movs	r2, #3
 80158de:	48be      	ldr	r0, [pc, #760]	@ (8015bd8 <_dtoa_r+0x610>)
 80158e0:	2900      	cmp	r1, #0
 80158e2:	f040 808f 	bne.w	8015a04 <_dtoa_r+0x43c>
 80158e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80158ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80158ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80158f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80158f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80158f8:	2900      	cmp	r1, #0
 80158fa:	f000 80b3 	beq.w	8015a64 <_dtoa_r+0x49c>
 80158fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8015902:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590a:	f140 80ab 	bpl.w	8015a64 <_dtoa_r+0x49c>
 801590e:	f1ba 0f00 	cmp.w	sl, #0
 8015912:	f000 80a7 	beq.w	8015a64 <_dtoa_r+0x49c>
 8015916:	f1bb 0f00 	cmp.w	fp, #0
 801591a:	dd30      	ble.n	801597e <_dtoa_r+0x3b6>
 801591c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015920:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015924:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015928:	f108 31ff 	add.w	r1, r8, #4294967295
 801592c:	9105      	str	r1, [sp, #20]
 801592e:	3201      	adds	r2, #1
 8015930:	465c      	mov	r4, fp
 8015932:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015936:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801593a:	ee07 2a90 	vmov	s15, r2
 801593e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015942:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015946:	ee15 2a90 	vmov	r2, s11
 801594a:	ec51 0b15 	vmov	r0, r1, d5
 801594e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8015952:	2c00      	cmp	r4, #0
 8015954:	f040 808a 	bne.w	8015a6c <_dtoa_r+0x4a4>
 8015958:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801595c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015960:	ec41 0b17 	vmov	d7, r0, r1
 8015964:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801596c:	f300 826a 	bgt.w	8015e44 <_dtoa_r+0x87c>
 8015970:	eeb1 7b47 	vneg.f64	d7, d7
 8015974:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597c:	d423      	bmi.n	80159c6 <_dtoa_r+0x3fe>
 801597e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015982:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015984:	2a00      	cmp	r2, #0
 8015986:	f2c0 8129 	blt.w	8015bdc <_dtoa_r+0x614>
 801598a:	f1b8 0f0e 	cmp.w	r8, #14
 801598e:	f300 8125 	bgt.w	8015bdc <_dtoa_r+0x614>
 8015992:	4b90      	ldr	r3, [pc, #576]	@ (8015bd4 <_dtoa_r+0x60c>)
 8015994:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015998:	ed93 6b00 	vldr	d6, [r3]
 801599c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f280 80c8 	bge.w	8015b34 <_dtoa_r+0x56c>
 80159a4:	f1ba 0f00 	cmp.w	sl, #0
 80159a8:	f300 80c4 	bgt.w	8015b34 <_dtoa_r+0x56c>
 80159ac:	d10b      	bne.n	80159c6 <_dtoa_r+0x3fe>
 80159ae:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80159b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80159b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80159ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80159be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159c2:	f2c0 823c 	blt.w	8015e3e <_dtoa_r+0x876>
 80159c6:	2400      	movs	r4, #0
 80159c8:	4625      	mov	r5, r4
 80159ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159cc:	43db      	mvns	r3, r3
 80159ce:	9305      	str	r3, [sp, #20]
 80159d0:	463e      	mov	r6, r7
 80159d2:	f04f 0800 	mov.w	r8, #0
 80159d6:	4621      	mov	r1, r4
 80159d8:	4648      	mov	r0, r9
 80159da:	f000 fc93 	bl	8016304 <_Bfree>
 80159de:	2d00      	cmp	r5, #0
 80159e0:	f000 80a2 	beq.w	8015b28 <_dtoa_r+0x560>
 80159e4:	f1b8 0f00 	cmp.w	r8, #0
 80159e8:	d005      	beq.n	80159f6 <_dtoa_r+0x42e>
 80159ea:	45a8      	cmp	r8, r5
 80159ec:	d003      	beq.n	80159f6 <_dtoa_r+0x42e>
 80159ee:	4641      	mov	r1, r8
 80159f0:	4648      	mov	r0, r9
 80159f2:	f000 fc87 	bl	8016304 <_Bfree>
 80159f6:	4629      	mov	r1, r5
 80159f8:	4648      	mov	r0, r9
 80159fa:	f000 fc83 	bl	8016304 <_Bfree>
 80159fe:	e093      	b.n	8015b28 <_dtoa_r+0x560>
 8015a00:	2202      	movs	r2, #2
 8015a02:	e76c      	b.n	80158de <_dtoa_r+0x316>
 8015a04:	07cc      	lsls	r4, r1, #31
 8015a06:	d504      	bpl.n	8015a12 <_dtoa_r+0x44a>
 8015a08:	ed90 6b00 	vldr	d6, [r0]
 8015a0c:	3201      	adds	r2, #1
 8015a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a12:	1049      	asrs	r1, r1, #1
 8015a14:	3008      	adds	r0, #8
 8015a16:	e763      	b.n	80158e0 <_dtoa_r+0x318>
 8015a18:	d022      	beq.n	8015a60 <_dtoa_r+0x498>
 8015a1a:	f1c8 0100 	rsb	r1, r8, #0
 8015a1e:	4a6d      	ldr	r2, [pc, #436]	@ (8015bd4 <_dtoa_r+0x60c>)
 8015a20:	f001 000f 	and.w	r0, r1, #15
 8015a24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015a28:	ed92 7b00 	vldr	d7, [r2]
 8015a2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a34:	4868      	ldr	r0, [pc, #416]	@ (8015bd8 <_dtoa_r+0x610>)
 8015a36:	1109      	asrs	r1, r1, #4
 8015a38:	2400      	movs	r4, #0
 8015a3a:	2202      	movs	r2, #2
 8015a3c:	b929      	cbnz	r1, 8015a4a <_dtoa_r+0x482>
 8015a3e:	2c00      	cmp	r4, #0
 8015a40:	f43f af57 	beq.w	80158f2 <_dtoa_r+0x32a>
 8015a44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a48:	e753      	b.n	80158f2 <_dtoa_r+0x32a>
 8015a4a:	07ce      	lsls	r6, r1, #31
 8015a4c:	d505      	bpl.n	8015a5a <_dtoa_r+0x492>
 8015a4e:	ed90 6b00 	vldr	d6, [r0]
 8015a52:	3201      	adds	r2, #1
 8015a54:	2401      	movs	r4, #1
 8015a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a5a:	1049      	asrs	r1, r1, #1
 8015a5c:	3008      	adds	r0, #8
 8015a5e:	e7ed      	b.n	8015a3c <_dtoa_r+0x474>
 8015a60:	2202      	movs	r2, #2
 8015a62:	e746      	b.n	80158f2 <_dtoa_r+0x32a>
 8015a64:	f8cd 8014 	str.w	r8, [sp, #20]
 8015a68:	4654      	mov	r4, sl
 8015a6a:	e762      	b.n	8015932 <_dtoa_r+0x36a>
 8015a6c:	4a59      	ldr	r2, [pc, #356]	@ (8015bd4 <_dtoa_r+0x60c>)
 8015a6e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8015a72:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015a76:	9a08      	ldr	r2, [sp, #32]
 8015a78:	ec41 0b17 	vmov	d7, r0, r1
 8015a7c:	443c      	add	r4, r7
 8015a7e:	b34a      	cbz	r2, 8015ad4 <_dtoa_r+0x50c>
 8015a80:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8015a84:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015a88:	463e      	mov	r6, r7
 8015a8a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015a8e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015a92:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015a96:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015a9a:	ee14 2a90 	vmov	r2, s9
 8015a9e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015aa2:	3230      	adds	r2, #48	@ 0x30
 8015aa4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015aa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab0:	f806 2b01 	strb.w	r2, [r6], #1
 8015ab4:	d438      	bmi.n	8015b28 <_dtoa_r+0x560>
 8015ab6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015aba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac2:	d46e      	bmi.n	8015ba2 <_dtoa_r+0x5da>
 8015ac4:	42a6      	cmp	r6, r4
 8015ac6:	f43f af5a 	beq.w	801597e <_dtoa_r+0x3b6>
 8015aca:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015ace:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015ad2:	e7e0      	b.n	8015a96 <_dtoa_r+0x4ce>
 8015ad4:	4621      	mov	r1, r4
 8015ad6:	463e      	mov	r6, r7
 8015ad8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015adc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015ae0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015ae4:	ee14 2a90 	vmov	r2, s9
 8015ae8:	3230      	adds	r2, #48	@ 0x30
 8015aea:	f806 2b01 	strb.w	r2, [r6], #1
 8015aee:	42a6      	cmp	r6, r4
 8015af0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015af4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015af8:	d119      	bne.n	8015b2e <_dtoa_r+0x566>
 8015afa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8015afe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015b02:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b0a:	dc4a      	bgt.n	8015ba2 <_dtoa_r+0x5da>
 8015b0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015b10:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b18:	f57f af31 	bpl.w	801597e <_dtoa_r+0x3b6>
 8015b1c:	460e      	mov	r6, r1
 8015b1e:	3901      	subs	r1, #1
 8015b20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015b24:	2b30      	cmp	r3, #48	@ 0x30
 8015b26:	d0f9      	beq.n	8015b1c <_dtoa_r+0x554>
 8015b28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015b2c:	e027      	b.n	8015b7e <_dtoa_r+0x5b6>
 8015b2e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015b32:	e7d5      	b.n	8015ae0 <_dtoa_r+0x518>
 8015b34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015b38:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8015b3c:	463e      	mov	r6, r7
 8015b3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015b42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015b46:	ee15 3a10 	vmov	r3, s10
 8015b4a:	3330      	adds	r3, #48	@ 0x30
 8015b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8015b50:	1bf3      	subs	r3, r6, r7
 8015b52:	459a      	cmp	sl, r3
 8015b54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015b58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015b5c:	d132      	bne.n	8015bc4 <_dtoa_r+0x5fc>
 8015b5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015b62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6a:	dc18      	bgt.n	8015b9e <_dtoa_r+0x5d6>
 8015b6c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b74:	d103      	bne.n	8015b7e <_dtoa_r+0x5b6>
 8015b76:	ee15 3a10 	vmov	r3, s10
 8015b7a:	07db      	lsls	r3, r3, #31
 8015b7c:	d40f      	bmi.n	8015b9e <_dtoa_r+0x5d6>
 8015b7e:	9901      	ldr	r1, [sp, #4]
 8015b80:	4648      	mov	r0, r9
 8015b82:	f000 fbbf 	bl	8016304 <_Bfree>
 8015b86:	2300      	movs	r3, #0
 8015b88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b8a:	7033      	strb	r3, [r6, #0]
 8015b8c:	f108 0301 	add.w	r3, r8, #1
 8015b90:	6013      	str	r3, [r2, #0]
 8015b92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	f000 824b 	beq.w	8016030 <_dtoa_r+0xa68>
 8015b9a:	601e      	str	r6, [r3, #0]
 8015b9c:	e248      	b.n	8016030 <_dtoa_r+0xa68>
 8015b9e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015ba2:	4633      	mov	r3, r6
 8015ba4:	461e      	mov	r6, r3
 8015ba6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015baa:	2a39      	cmp	r2, #57	@ 0x39
 8015bac:	d106      	bne.n	8015bbc <_dtoa_r+0x5f4>
 8015bae:	429f      	cmp	r7, r3
 8015bb0:	d1f8      	bne.n	8015ba4 <_dtoa_r+0x5dc>
 8015bb2:	9a05      	ldr	r2, [sp, #20]
 8015bb4:	3201      	adds	r2, #1
 8015bb6:	9205      	str	r2, [sp, #20]
 8015bb8:	2230      	movs	r2, #48	@ 0x30
 8015bba:	703a      	strb	r2, [r7, #0]
 8015bbc:	781a      	ldrb	r2, [r3, #0]
 8015bbe:	3201      	adds	r2, #1
 8015bc0:	701a      	strb	r2, [r3, #0]
 8015bc2:	e7b1      	b.n	8015b28 <_dtoa_r+0x560>
 8015bc4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015bc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd0:	d1b5      	bne.n	8015b3e <_dtoa_r+0x576>
 8015bd2:	e7d4      	b.n	8015b7e <_dtoa_r+0x5b6>
 8015bd4:	0801c2b0 	.word	0x0801c2b0
 8015bd8:	0801c288 	.word	0x0801c288
 8015bdc:	9908      	ldr	r1, [sp, #32]
 8015bde:	2900      	cmp	r1, #0
 8015be0:	f000 80e9 	beq.w	8015db6 <_dtoa_r+0x7ee>
 8015be4:	9907      	ldr	r1, [sp, #28]
 8015be6:	2901      	cmp	r1, #1
 8015be8:	f300 80cb 	bgt.w	8015d82 <_dtoa_r+0x7ba>
 8015bec:	2d00      	cmp	r5, #0
 8015bee:	f000 80c4 	beq.w	8015d7a <_dtoa_r+0x7b2>
 8015bf2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8015bf6:	9e04      	ldr	r6, [sp, #16]
 8015bf8:	461c      	mov	r4, r3
 8015bfa:	9305      	str	r3, [sp, #20]
 8015bfc:	9b04      	ldr	r3, [sp, #16]
 8015bfe:	4413      	add	r3, r2
 8015c00:	9304      	str	r3, [sp, #16]
 8015c02:	9b06      	ldr	r3, [sp, #24]
 8015c04:	2101      	movs	r1, #1
 8015c06:	4413      	add	r3, r2
 8015c08:	4648      	mov	r0, r9
 8015c0a:	9306      	str	r3, [sp, #24]
 8015c0c:	f000 fc78 	bl	8016500 <__i2b>
 8015c10:	9b05      	ldr	r3, [sp, #20]
 8015c12:	4605      	mov	r5, r0
 8015c14:	b166      	cbz	r6, 8015c30 <_dtoa_r+0x668>
 8015c16:	9a06      	ldr	r2, [sp, #24]
 8015c18:	2a00      	cmp	r2, #0
 8015c1a:	dd09      	ble.n	8015c30 <_dtoa_r+0x668>
 8015c1c:	42b2      	cmp	r2, r6
 8015c1e:	9904      	ldr	r1, [sp, #16]
 8015c20:	bfa8      	it	ge
 8015c22:	4632      	movge	r2, r6
 8015c24:	1a89      	subs	r1, r1, r2
 8015c26:	9104      	str	r1, [sp, #16]
 8015c28:	9906      	ldr	r1, [sp, #24]
 8015c2a:	1ab6      	subs	r6, r6, r2
 8015c2c:	1a8a      	subs	r2, r1, r2
 8015c2e:	9206      	str	r2, [sp, #24]
 8015c30:	b30b      	cbz	r3, 8015c76 <_dtoa_r+0x6ae>
 8015c32:	9a08      	ldr	r2, [sp, #32]
 8015c34:	2a00      	cmp	r2, #0
 8015c36:	f000 80c5 	beq.w	8015dc4 <_dtoa_r+0x7fc>
 8015c3a:	2c00      	cmp	r4, #0
 8015c3c:	f000 80bf 	beq.w	8015dbe <_dtoa_r+0x7f6>
 8015c40:	4629      	mov	r1, r5
 8015c42:	4622      	mov	r2, r4
 8015c44:	4648      	mov	r0, r9
 8015c46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015c48:	f000 fd12 	bl	8016670 <__pow5mult>
 8015c4c:	9a01      	ldr	r2, [sp, #4]
 8015c4e:	4601      	mov	r1, r0
 8015c50:	4605      	mov	r5, r0
 8015c52:	4648      	mov	r0, r9
 8015c54:	f000 fc6a 	bl	801652c <__multiply>
 8015c58:	9901      	ldr	r1, [sp, #4]
 8015c5a:	9005      	str	r0, [sp, #20]
 8015c5c:	4648      	mov	r0, r9
 8015c5e:	f000 fb51 	bl	8016304 <_Bfree>
 8015c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015c64:	1b1b      	subs	r3, r3, r4
 8015c66:	f000 80b0 	beq.w	8015dca <_dtoa_r+0x802>
 8015c6a:	9905      	ldr	r1, [sp, #20]
 8015c6c:	461a      	mov	r2, r3
 8015c6e:	4648      	mov	r0, r9
 8015c70:	f000 fcfe 	bl	8016670 <__pow5mult>
 8015c74:	9001      	str	r0, [sp, #4]
 8015c76:	2101      	movs	r1, #1
 8015c78:	4648      	mov	r0, r9
 8015c7a:	f000 fc41 	bl	8016500 <__i2b>
 8015c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015c80:	4604      	mov	r4, r0
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f000 81da 	beq.w	801603c <_dtoa_r+0xa74>
 8015c88:	461a      	mov	r2, r3
 8015c8a:	4601      	mov	r1, r0
 8015c8c:	4648      	mov	r0, r9
 8015c8e:	f000 fcef 	bl	8016670 <__pow5mult>
 8015c92:	9b07      	ldr	r3, [sp, #28]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	4604      	mov	r4, r0
 8015c98:	f300 80a0 	bgt.w	8015ddc <_dtoa_r+0x814>
 8015c9c:	9b02      	ldr	r3, [sp, #8]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	f040 8096 	bne.w	8015dd0 <_dtoa_r+0x808>
 8015ca4:	9b03      	ldr	r3, [sp, #12]
 8015ca6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015caa:	2a00      	cmp	r2, #0
 8015cac:	f040 8092 	bne.w	8015dd4 <_dtoa_r+0x80c>
 8015cb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015cb4:	0d12      	lsrs	r2, r2, #20
 8015cb6:	0512      	lsls	r2, r2, #20
 8015cb8:	2a00      	cmp	r2, #0
 8015cba:	f000 808d 	beq.w	8015dd8 <_dtoa_r+0x810>
 8015cbe:	9b04      	ldr	r3, [sp, #16]
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	9304      	str	r3, [sp, #16]
 8015cc4:	9b06      	ldr	r3, [sp, #24]
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	9306      	str	r3, [sp, #24]
 8015cca:	2301      	movs	r3, #1
 8015ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	f000 81b9 	beq.w	8016048 <_dtoa_r+0xa80>
 8015cd6:	6922      	ldr	r2, [r4, #16]
 8015cd8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015cdc:	6910      	ldr	r0, [r2, #16]
 8015cde:	f000 fbc3 	bl	8016468 <__hi0bits>
 8015ce2:	f1c0 0020 	rsb	r0, r0, #32
 8015ce6:	9b06      	ldr	r3, [sp, #24]
 8015ce8:	4418      	add	r0, r3
 8015cea:	f010 001f 	ands.w	r0, r0, #31
 8015cee:	f000 8081 	beq.w	8015df4 <_dtoa_r+0x82c>
 8015cf2:	f1c0 0220 	rsb	r2, r0, #32
 8015cf6:	2a04      	cmp	r2, #4
 8015cf8:	dd73      	ble.n	8015de2 <_dtoa_r+0x81a>
 8015cfa:	9b04      	ldr	r3, [sp, #16]
 8015cfc:	f1c0 001c 	rsb	r0, r0, #28
 8015d00:	4403      	add	r3, r0
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	9b06      	ldr	r3, [sp, #24]
 8015d06:	4406      	add	r6, r0
 8015d08:	4403      	add	r3, r0
 8015d0a:	9306      	str	r3, [sp, #24]
 8015d0c:	9b04      	ldr	r3, [sp, #16]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	dd05      	ble.n	8015d1e <_dtoa_r+0x756>
 8015d12:	9901      	ldr	r1, [sp, #4]
 8015d14:	461a      	mov	r2, r3
 8015d16:	4648      	mov	r0, r9
 8015d18:	f000 fd04 	bl	8016724 <__lshift>
 8015d1c:	9001      	str	r0, [sp, #4]
 8015d1e:	9b06      	ldr	r3, [sp, #24]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	dd05      	ble.n	8015d30 <_dtoa_r+0x768>
 8015d24:	4621      	mov	r1, r4
 8015d26:	461a      	mov	r2, r3
 8015d28:	4648      	mov	r0, r9
 8015d2a:	f000 fcfb 	bl	8016724 <__lshift>
 8015d2e:	4604      	mov	r4, r0
 8015d30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d060      	beq.n	8015df8 <_dtoa_r+0x830>
 8015d36:	9801      	ldr	r0, [sp, #4]
 8015d38:	4621      	mov	r1, r4
 8015d3a:	f000 fd5f 	bl	80167fc <__mcmp>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	da5a      	bge.n	8015df8 <_dtoa_r+0x830>
 8015d42:	f108 33ff 	add.w	r3, r8, #4294967295
 8015d46:	9305      	str	r3, [sp, #20]
 8015d48:	9901      	ldr	r1, [sp, #4]
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	220a      	movs	r2, #10
 8015d4e:	4648      	mov	r0, r9
 8015d50:	f000 fafa 	bl	8016348 <__multadd>
 8015d54:	9b08      	ldr	r3, [sp, #32]
 8015d56:	9001      	str	r0, [sp, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	f000 8177 	beq.w	801604c <_dtoa_r+0xa84>
 8015d5e:	4629      	mov	r1, r5
 8015d60:	2300      	movs	r3, #0
 8015d62:	220a      	movs	r2, #10
 8015d64:	4648      	mov	r0, r9
 8015d66:	f000 faef 	bl	8016348 <__multadd>
 8015d6a:	f1bb 0f00 	cmp.w	fp, #0
 8015d6e:	4605      	mov	r5, r0
 8015d70:	dc6e      	bgt.n	8015e50 <_dtoa_r+0x888>
 8015d72:	9b07      	ldr	r3, [sp, #28]
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	dc48      	bgt.n	8015e0a <_dtoa_r+0x842>
 8015d78:	e06a      	b.n	8015e50 <_dtoa_r+0x888>
 8015d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015d80:	e739      	b.n	8015bf6 <_dtoa_r+0x62e>
 8015d82:	f10a 34ff 	add.w	r4, sl, #4294967295
 8015d86:	42a3      	cmp	r3, r4
 8015d88:	db07      	blt.n	8015d9a <_dtoa_r+0x7d2>
 8015d8a:	f1ba 0f00 	cmp.w	sl, #0
 8015d8e:	eba3 0404 	sub.w	r4, r3, r4
 8015d92:	db0b      	blt.n	8015dac <_dtoa_r+0x7e4>
 8015d94:	9e04      	ldr	r6, [sp, #16]
 8015d96:	4652      	mov	r2, sl
 8015d98:	e72f      	b.n	8015bfa <_dtoa_r+0x632>
 8015d9a:	1ae2      	subs	r2, r4, r3
 8015d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015d9e:	9e04      	ldr	r6, [sp, #16]
 8015da0:	4413      	add	r3, r2
 8015da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8015da4:	4652      	mov	r2, sl
 8015da6:	4623      	mov	r3, r4
 8015da8:	2400      	movs	r4, #0
 8015daa:	e726      	b.n	8015bfa <_dtoa_r+0x632>
 8015dac:	9a04      	ldr	r2, [sp, #16]
 8015dae:	eba2 060a 	sub.w	r6, r2, sl
 8015db2:	2200      	movs	r2, #0
 8015db4:	e721      	b.n	8015bfa <_dtoa_r+0x632>
 8015db6:	9e04      	ldr	r6, [sp, #16]
 8015db8:	9d08      	ldr	r5, [sp, #32]
 8015dba:	461c      	mov	r4, r3
 8015dbc:	e72a      	b.n	8015c14 <_dtoa_r+0x64c>
 8015dbe:	9a01      	ldr	r2, [sp, #4]
 8015dc0:	9205      	str	r2, [sp, #20]
 8015dc2:	e752      	b.n	8015c6a <_dtoa_r+0x6a2>
 8015dc4:	9901      	ldr	r1, [sp, #4]
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	e751      	b.n	8015c6e <_dtoa_r+0x6a6>
 8015dca:	9b05      	ldr	r3, [sp, #20]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	e752      	b.n	8015c76 <_dtoa_r+0x6ae>
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	e77b      	b.n	8015ccc <_dtoa_r+0x704>
 8015dd4:	9b02      	ldr	r3, [sp, #8]
 8015dd6:	e779      	b.n	8015ccc <_dtoa_r+0x704>
 8015dd8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015dda:	e778      	b.n	8015cce <_dtoa_r+0x706>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015de0:	e779      	b.n	8015cd6 <_dtoa_r+0x70e>
 8015de2:	d093      	beq.n	8015d0c <_dtoa_r+0x744>
 8015de4:	9b04      	ldr	r3, [sp, #16]
 8015de6:	321c      	adds	r2, #28
 8015de8:	4413      	add	r3, r2
 8015dea:	9304      	str	r3, [sp, #16]
 8015dec:	9b06      	ldr	r3, [sp, #24]
 8015dee:	4416      	add	r6, r2
 8015df0:	4413      	add	r3, r2
 8015df2:	e78a      	b.n	8015d0a <_dtoa_r+0x742>
 8015df4:	4602      	mov	r2, r0
 8015df6:	e7f5      	b.n	8015de4 <_dtoa_r+0x81c>
 8015df8:	f1ba 0f00 	cmp.w	sl, #0
 8015dfc:	f8cd 8014 	str.w	r8, [sp, #20]
 8015e00:	46d3      	mov	fp, sl
 8015e02:	dc21      	bgt.n	8015e48 <_dtoa_r+0x880>
 8015e04:	9b07      	ldr	r3, [sp, #28]
 8015e06:	2b02      	cmp	r3, #2
 8015e08:	dd1e      	ble.n	8015e48 <_dtoa_r+0x880>
 8015e0a:	f1bb 0f00 	cmp.w	fp, #0
 8015e0e:	f47f addc 	bne.w	80159ca <_dtoa_r+0x402>
 8015e12:	4621      	mov	r1, r4
 8015e14:	465b      	mov	r3, fp
 8015e16:	2205      	movs	r2, #5
 8015e18:	4648      	mov	r0, r9
 8015e1a:	f000 fa95 	bl	8016348 <__multadd>
 8015e1e:	4601      	mov	r1, r0
 8015e20:	4604      	mov	r4, r0
 8015e22:	9801      	ldr	r0, [sp, #4]
 8015e24:	f000 fcea 	bl	80167fc <__mcmp>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	f77f adce 	ble.w	80159ca <_dtoa_r+0x402>
 8015e2e:	463e      	mov	r6, r7
 8015e30:	2331      	movs	r3, #49	@ 0x31
 8015e32:	f806 3b01 	strb.w	r3, [r6], #1
 8015e36:	9b05      	ldr	r3, [sp, #20]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	9305      	str	r3, [sp, #20]
 8015e3c:	e5c9      	b.n	80159d2 <_dtoa_r+0x40a>
 8015e3e:	f8cd 8014 	str.w	r8, [sp, #20]
 8015e42:	4654      	mov	r4, sl
 8015e44:	4625      	mov	r5, r4
 8015e46:	e7f2      	b.n	8015e2e <_dtoa_r+0x866>
 8015e48:	9b08      	ldr	r3, [sp, #32]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f000 8102 	beq.w	8016054 <_dtoa_r+0xa8c>
 8015e50:	2e00      	cmp	r6, #0
 8015e52:	dd05      	ble.n	8015e60 <_dtoa_r+0x898>
 8015e54:	4629      	mov	r1, r5
 8015e56:	4632      	mov	r2, r6
 8015e58:	4648      	mov	r0, r9
 8015e5a:	f000 fc63 	bl	8016724 <__lshift>
 8015e5e:	4605      	mov	r5, r0
 8015e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d058      	beq.n	8015f18 <_dtoa_r+0x950>
 8015e66:	6869      	ldr	r1, [r5, #4]
 8015e68:	4648      	mov	r0, r9
 8015e6a:	f000 fa0b 	bl	8016284 <_Balloc>
 8015e6e:	4606      	mov	r6, r0
 8015e70:	b928      	cbnz	r0, 8015e7e <_dtoa_r+0x8b6>
 8015e72:	4b82      	ldr	r3, [pc, #520]	@ (801607c <_dtoa_r+0xab4>)
 8015e74:	4602      	mov	r2, r0
 8015e76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015e7a:	f7ff bbbe 	b.w	80155fa <_dtoa_r+0x32>
 8015e7e:	692a      	ldr	r2, [r5, #16]
 8015e80:	3202      	adds	r2, #2
 8015e82:	0092      	lsls	r2, r2, #2
 8015e84:	f105 010c 	add.w	r1, r5, #12
 8015e88:	300c      	adds	r0, #12
 8015e8a:	f7ff fae0 	bl	801544e <memcpy>
 8015e8e:	2201      	movs	r2, #1
 8015e90:	4631      	mov	r1, r6
 8015e92:	4648      	mov	r0, r9
 8015e94:	f000 fc46 	bl	8016724 <__lshift>
 8015e98:	1c7b      	adds	r3, r7, #1
 8015e9a:	9304      	str	r3, [sp, #16]
 8015e9c:	eb07 030b 	add.w	r3, r7, fp
 8015ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ea2:	9b02      	ldr	r3, [sp, #8]
 8015ea4:	f003 0301 	and.w	r3, r3, #1
 8015ea8:	46a8      	mov	r8, r5
 8015eaa:	9308      	str	r3, [sp, #32]
 8015eac:	4605      	mov	r5, r0
 8015eae:	9b04      	ldr	r3, [sp, #16]
 8015eb0:	9801      	ldr	r0, [sp, #4]
 8015eb2:	4621      	mov	r1, r4
 8015eb4:	f103 3bff 	add.w	fp, r3, #4294967295
 8015eb8:	f7ff fafc 	bl	80154b4 <quorem>
 8015ebc:	4641      	mov	r1, r8
 8015ebe:	9002      	str	r0, [sp, #8]
 8015ec0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8015ec4:	9801      	ldr	r0, [sp, #4]
 8015ec6:	f000 fc99 	bl	80167fc <__mcmp>
 8015eca:	462a      	mov	r2, r5
 8015ecc:	9006      	str	r0, [sp, #24]
 8015ece:	4621      	mov	r1, r4
 8015ed0:	4648      	mov	r0, r9
 8015ed2:	f000 fcaf 	bl	8016834 <__mdiff>
 8015ed6:	68c2      	ldr	r2, [r0, #12]
 8015ed8:	4606      	mov	r6, r0
 8015eda:	b9fa      	cbnz	r2, 8015f1c <_dtoa_r+0x954>
 8015edc:	4601      	mov	r1, r0
 8015ede:	9801      	ldr	r0, [sp, #4]
 8015ee0:	f000 fc8c 	bl	80167fc <__mcmp>
 8015ee4:	4602      	mov	r2, r0
 8015ee6:	4631      	mov	r1, r6
 8015ee8:	4648      	mov	r0, r9
 8015eea:	920a      	str	r2, [sp, #40]	@ 0x28
 8015eec:	f000 fa0a 	bl	8016304 <_Bfree>
 8015ef0:	9b07      	ldr	r3, [sp, #28]
 8015ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015ef4:	9e04      	ldr	r6, [sp, #16]
 8015ef6:	ea42 0103 	orr.w	r1, r2, r3
 8015efa:	9b08      	ldr	r3, [sp, #32]
 8015efc:	4319      	orrs	r1, r3
 8015efe:	d10f      	bne.n	8015f20 <_dtoa_r+0x958>
 8015f00:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015f04:	d028      	beq.n	8015f58 <_dtoa_r+0x990>
 8015f06:	9b06      	ldr	r3, [sp, #24]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	dd02      	ble.n	8015f12 <_dtoa_r+0x94a>
 8015f0c:	9b02      	ldr	r3, [sp, #8]
 8015f0e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8015f12:	f88b a000 	strb.w	sl, [fp]
 8015f16:	e55e      	b.n	80159d6 <_dtoa_r+0x40e>
 8015f18:	4628      	mov	r0, r5
 8015f1a:	e7bd      	b.n	8015e98 <_dtoa_r+0x8d0>
 8015f1c:	2201      	movs	r2, #1
 8015f1e:	e7e2      	b.n	8015ee6 <_dtoa_r+0x91e>
 8015f20:	9b06      	ldr	r3, [sp, #24]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	db04      	blt.n	8015f30 <_dtoa_r+0x968>
 8015f26:	9907      	ldr	r1, [sp, #28]
 8015f28:	430b      	orrs	r3, r1
 8015f2a:	9908      	ldr	r1, [sp, #32]
 8015f2c:	430b      	orrs	r3, r1
 8015f2e:	d120      	bne.n	8015f72 <_dtoa_r+0x9aa>
 8015f30:	2a00      	cmp	r2, #0
 8015f32:	ddee      	ble.n	8015f12 <_dtoa_r+0x94a>
 8015f34:	9901      	ldr	r1, [sp, #4]
 8015f36:	2201      	movs	r2, #1
 8015f38:	4648      	mov	r0, r9
 8015f3a:	f000 fbf3 	bl	8016724 <__lshift>
 8015f3e:	4621      	mov	r1, r4
 8015f40:	9001      	str	r0, [sp, #4]
 8015f42:	f000 fc5b 	bl	80167fc <__mcmp>
 8015f46:	2800      	cmp	r0, #0
 8015f48:	dc03      	bgt.n	8015f52 <_dtoa_r+0x98a>
 8015f4a:	d1e2      	bne.n	8015f12 <_dtoa_r+0x94a>
 8015f4c:	f01a 0f01 	tst.w	sl, #1
 8015f50:	d0df      	beq.n	8015f12 <_dtoa_r+0x94a>
 8015f52:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015f56:	d1d9      	bne.n	8015f0c <_dtoa_r+0x944>
 8015f58:	2339      	movs	r3, #57	@ 0x39
 8015f5a:	f88b 3000 	strb.w	r3, [fp]
 8015f5e:	4633      	mov	r3, r6
 8015f60:	461e      	mov	r6, r3
 8015f62:	3b01      	subs	r3, #1
 8015f64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015f68:	2a39      	cmp	r2, #57	@ 0x39
 8015f6a:	d052      	beq.n	8016012 <_dtoa_r+0xa4a>
 8015f6c:	3201      	adds	r2, #1
 8015f6e:	701a      	strb	r2, [r3, #0]
 8015f70:	e531      	b.n	80159d6 <_dtoa_r+0x40e>
 8015f72:	2a00      	cmp	r2, #0
 8015f74:	dd07      	ble.n	8015f86 <_dtoa_r+0x9be>
 8015f76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015f7a:	d0ed      	beq.n	8015f58 <_dtoa_r+0x990>
 8015f7c:	f10a 0301 	add.w	r3, sl, #1
 8015f80:	f88b 3000 	strb.w	r3, [fp]
 8015f84:	e527      	b.n	80159d6 <_dtoa_r+0x40e>
 8015f86:	9b04      	ldr	r3, [sp, #16]
 8015f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f8a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d029      	beq.n	8015fe6 <_dtoa_r+0xa1e>
 8015f92:	9901      	ldr	r1, [sp, #4]
 8015f94:	2300      	movs	r3, #0
 8015f96:	220a      	movs	r2, #10
 8015f98:	4648      	mov	r0, r9
 8015f9a:	f000 f9d5 	bl	8016348 <__multadd>
 8015f9e:	45a8      	cmp	r8, r5
 8015fa0:	9001      	str	r0, [sp, #4]
 8015fa2:	f04f 0300 	mov.w	r3, #0
 8015fa6:	f04f 020a 	mov.w	r2, #10
 8015faa:	4641      	mov	r1, r8
 8015fac:	4648      	mov	r0, r9
 8015fae:	d107      	bne.n	8015fc0 <_dtoa_r+0x9f8>
 8015fb0:	f000 f9ca 	bl	8016348 <__multadd>
 8015fb4:	4680      	mov	r8, r0
 8015fb6:	4605      	mov	r5, r0
 8015fb8:	9b04      	ldr	r3, [sp, #16]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	9304      	str	r3, [sp, #16]
 8015fbe:	e776      	b.n	8015eae <_dtoa_r+0x8e6>
 8015fc0:	f000 f9c2 	bl	8016348 <__multadd>
 8015fc4:	4629      	mov	r1, r5
 8015fc6:	4680      	mov	r8, r0
 8015fc8:	2300      	movs	r3, #0
 8015fca:	220a      	movs	r2, #10
 8015fcc:	4648      	mov	r0, r9
 8015fce:	f000 f9bb 	bl	8016348 <__multadd>
 8015fd2:	4605      	mov	r5, r0
 8015fd4:	e7f0      	b.n	8015fb8 <_dtoa_r+0x9f0>
 8015fd6:	f1bb 0f00 	cmp.w	fp, #0
 8015fda:	bfcc      	ite	gt
 8015fdc:	465e      	movgt	r6, fp
 8015fde:	2601      	movle	r6, #1
 8015fe0:	443e      	add	r6, r7
 8015fe2:	f04f 0800 	mov.w	r8, #0
 8015fe6:	9901      	ldr	r1, [sp, #4]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	4648      	mov	r0, r9
 8015fec:	f000 fb9a 	bl	8016724 <__lshift>
 8015ff0:	4621      	mov	r1, r4
 8015ff2:	9001      	str	r0, [sp, #4]
 8015ff4:	f000 fc02 	bl	80167fc <__mcmp>
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	dcb0      	bgt.n	8015f5e <_dtoa_r+0x996>
 8015ffc:	d102      	bne.n	8016004 <_dtoa_r+0xa3c>
 8015ffe:	f01a 0f01 	tst.w	sl, #1
 8016002:	d1ac      	bne.n	8015f5e <_dtoa_r+0x996>
 8016004:	4633      	mov	r3, r6
 8016006:	461e      	mov	r6, r3
 8016008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801600c:	2a30      	cmp	r2, #48	@ 0x30
 801600e:	d0fa      	beq.n	8016006 <_dtoa_r+0xa3e>
 8016010:	e4e1      	b.n	80159d6 <_dtoa_r+0x40e>
 8016012:	429f      	cmp	r7, r3
 8016014:	d1a4      	bne.n	8015f60 <_dtoa_r+0x998>
 8016016:	9b05      	ldr	r3, [sp, #20]
 8016018:	3301      	adds	r3, #1
 801601a:	9305      	str	r3, [sp, #20]
 801601c:	2331      	movs	r3, #49	@ 0x31
 801601e:	703b      	strb	r3, [r7, #0]
 8016020:	e4d9      	b.n	80159d6 <_dtoa_r+0x40e>
 8016022:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016024:	4f16      	ldr	r7, [pc, #88]	@ (8016080 <_dtoa_r+0xab8>)
 8016026:	b11b      	cbz	r3, 8016030 <_dtoa_r+0xa68>
 8016028:	f107 0308 	add.w	r3, r7, #8
 801602c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801602e:	6013      	str	r3, [r2, #0]
 8016030:	4638      	mov	r0, r7
 8016032:	b011      	add	sp, #68	@ 0x44
 8016034:	ecbd 8b02 	vpop	{d8}
 8016038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603c:	9b07      	ldr	r3, [sp, #28]
 801603e:	2b01      	cmp	r3, #1
 8016040:	f77f ae2c 	ble.w	8015c9c <_dtoa_r+0x6d4>
 8016044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016046:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016048:	2001      	movs	r0, #1
 801604a:	e64c      	b.n	8015ce6 <_dtoa_r+0x71e>
 801604c:	f1bb 0f00 	cmp.w	fp, #0
 8016050:	f77f aed8 	ble.w	8015e04 <_dtoa_r+0x83c>
 8016054:	463e      	mov	r6, r7
 8016056:	9801      	ldr	r0, [sp, #4]
 8016058:	4621      	mov	r1, r4
 801605a:	f7ff fa2b 	bl	80154b4 <quorem>
 801605e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016062:	f806 ab01 	strb.w	sl, [r6], #1
 8016066:	1bf2      	subs	r2, r6, r7
 8016068:	4593      	cmp	fp, r2
 801606a:	ddb4      	ble.n	8015fd6 <_dtoa_r+0xa0e>
 801606c:	9901      	ldr	r1, [sp, #4]
 801606e:	2300      	movs	r3, #0
 8016070:	220a      	movs	r2, #10
 8016072:	4648      	mov	r0, r9
 8016074:	f000 f968 	bl	8016348 <__multadd>
 8016078:	9001      	str	r0, [sp, #4]
 801607a:	e7ec      	b.n	8016056 <_dtoa_r+0xa8e>
 801607c:	0801c093 	.word	0x0801c093
 8016080:	0801c02e 	.word	0x0801c02e

08016084 <_free_r>:
 8016084:	b538      	push	{r3, r4, r5, lr}
 8016086:	4605      	mov	r5, r0
 8016088:	2900      	cmp	r1, #0
 801608a:	d041      	beq.n	8016110 <_free_r+0x8c>
 801608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016090:	1f0c      	subs	r4, r1, #4
 8016092:	2b00      	cmp	r3, #0
 8016094:	bfb8      	it	lt
 8016096:	18e4      	addlt	r4, r4, r3
 8016098:	f000 f8e8 	bl	801626c <__malloc_lock>
 801609c:	4a1d      	ldr	r2, [pc, #116]	@ (8016114 <_free_r+0x90>)
 801609e:	6813      	ldr	r3, [r2, #0]
 80160a0:	b933      	cbnz	r3, 80160b0 <_free_r+0x2c>
 80160a2:	6063      	str	r3, [r4, #4]
 80160a4:	6014      	str	r4, [r2, #0]
 80160a6:	4628      	mov	r0, r5
 80160a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160ac:	f000 b8e4 	b.w	8016278 <__malloc_unlock>
 80160b0:	42a3      	cmp	r3, r4
 80160b2:	d908      	bls.n	80160c6 <_free_r+0x42>
 80160b4:	6820      	ldr	r0, [r4, #0]
 80160b6:	1821      	adds	r1, r4, r0
 80160b8:	428b      	cmp	r3, r1
 80160ba:	bf01      	itttt	eq
 80160bc:	6819      	ldreq	r1, [r3, #0]
 80160be:	685b      	ldreq	r3, [r3, #4]
 80160c0:	1809      	addeq	r1, r1, r0
 80160c2:	6021      	streq	r1, [r4, #0]
 80160c4:	e7ed      	b.n	80160a2 <_free_r+0x1e>
 80160c6:	461a      	mov	r2, r3
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	b10b      	cbz	r3, 80160d0 <_free_r+0x4c>
 80160cc:	42a3      	cmp	r3, r4
 80160ce:	d9fa      	bls.n	80160c6 <_free_r+0x42>
 80160d0:	6811      	ldr	r1, [r2, #0]
 80160d2:	1850      	adds	r0, r2, r1
 80160d4:	42a0      	cmp	r0, r4
 80160d6:	d10b      	bne.n	80160f0 <_free_r+0x6c>
 80160d8:	6820      	ldr	r0, [r4, #0]
 80160da:	4401      	add	r1, r0
 80160dc:	1850      	adds	r0, r2, r1
 80160de:	4283      	cmp	r3, r0
 80160e0:	6011      	str	r1, [r2, #0]
 80160e2:	d1e0      	bne.n	80160a6 <_free_r+0x22>
 80160e4:	6818      	ldr	r0, [r3, #0]
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	6053      	str	r3, [r2, #4]
 80160ea:	4408      	add	r0, r1
 80160ec:	6010      	str	r0, [r2, #0]
 80160ee:	e7da      	b.n	80160a6 <_free_r+0x22>
 80160f0:	d902      	bls.n	80160f8 <_free_r+0x74>
 80160f2:	230c      	movs	r3, #12
 80160f4:	602b      	str	r3, [r5, #0]
 80160f6:	e7d6      	b.n	80160a6 <_free_r+0x22>
 80160f8:	6820      	ldr	r0, [r4, #0]
 80160fa:	1821      	adds	r1, r4, r0
 80160fc:	428b      	cmp	r3, r1
 80160fe:	bf04      	itt	eq
 8016100:	6819      	ldreq	r1, [r3, #0]
 8016102:	685b      	ldreq	r3, [r3, #4]
 8016104:	6063      	str	r3, [r4, #4]
 8016106:	bf04      	itt	eq
 8016108:	1809      	addeq	r1, r1, r0
 801610a:	6021      	streq	r1, [r4, #0]
 801610c:	6054      	str	r4, [r2, #4]
 801610e:	e7ca      	b.n	80160a6 <_free_r+0x22>
 8016110:	bd38      	pop	{r3, r4, r5, pc}
 8016112:	bf00      	nop
 8016114:	200083cc 	.word	0x200083cc

08016118 <malloc>:
 8016118:	4b02      	ldr	r3, [pc, #8]	@ (8016124 <malloc+0xc>)
 801611a:	4601      	mov	r1, r0
 801611c:	6818      	ldr	r0, [r3, #0]
 801611e:	f000 b825 	b.w	801616c <_malloc_r>
 8016122:	bf00      	nop
 8016124:	2000004c 	.word	0x2000004c

08016128 <sbrk_aligned>:
 8016128:	b570      	push	{r4, r5, r6, lr}
 801612a:	4e0f      	ldr	r6, [pc, #60]	@ (8016168 <sbrk_aligned+0x40>)
 801612c:	460c      	mov	r4, r1
 801612e:	6831      	ldr	r1, [r6, #0]
 8016130:	4605      	mov	r5, r0
 8016132:	b911      	cbnz	r1, 801613a <sbrk_aligned+0x12>
 8016134:	f001 fee4 	bl	8017f00 <_sbrk_r>
 8016138:	6030      	str	r0, [r6, #0]
 801613a:	4621      	mov	r1, r4
 801613c:	4628      	mov	r0, r5
 801613e:	f001 fedf 	bl	8017f00 <_sbrk_r>
 8016142:	1c43      	adds	r3, r0, #1
 8016144:	d103      	bne.n	801614e <sbrk_aligned+0x26>
 8016146:	f04f 34ff 	mov.w	r4, #4294967295
 801614a:	4620      	mov	r0, r4
 801614c:	bd70      	pop	{r4, r5, r6, pc}
 801614e:	1cc4      	adds	r4, r0, #3
 8016150:	f024 0403 	bic.w	r4, r4, #3
 8016154:	42a0      	cmp	r0, r4
 8016156:	d0f8      	beq.n	801614a <sbrk_aligned+0x22>
 8016158:	1a21      	subs	r1, r4, r0
 801615a:	4628      	mov	r0, r5
 801615c:	f001 fed0 	bl	8017f00 <_sbrk_r>
 8016160:	3001      	adds	r0, #1
 8016162:	d1f2      	bne.n	801614a <sbrk_aligned+0x22>
 8016164:	e7ef      	b.n	8016146 <sbrk_aligned+0x1e>
 8016166:	bf00      	nop
 8016168:	200083c8 	.word	0x200083c8

0801616c <_malloc_r>:
 801616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016170:	1ccd      	adds	r5, r1, #3
 8016172:	f025 0503 	bic.w	r5, r5, #3
 8016176:	3508      	adds	r5, #8
 8016178:	2d0c      	cmp	r5, #12
 801617a:	bf38      	it	cc
 801617c:	250c      	movcc	r5, #12
 801617e:	2d00      	cmp	r5, #0
 8016180:	4606      	mov	r6, r0
 8016182:	db01      	blt.n	8016188 <_malloc_r+0x1c>
 8016184:	42a9      	cmp	r1, r5
 8016186:	d904      	bls.n	8016192 <_malloc_r+0x26>
 8016188:	230c      	movs	r3, #12
 801618a:	6033      	str	r3, [r6, #0]
 801618c:	2000      	movs	r0, #0
 801618e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016268 <_malloc_r+0xfc>
 8016196:	f000 f869 	bl	801626c <__malloc_lock>
 801619a:	f8d8 3000 	ldr.w	r3, [r8]
 801619e:	461c      	mov	r4, r3
 80161a0:	bb44      	cbnz	r4, 80161f4 <_malloc_r+0x88>
 80161a2:	4629      	mov	r1, r5
 80161a4:	4630      	mov	r0, r6
 80161a6:	f7ff ffbf 	bl	8016128 <sbrk_aligned>
 80161aa:	1c43      	adds	r3, r0, #1
 80161ac:	4604      	mov	r4, r0
 80161ae:	d158      	bne.n	8016262 <_malloc_r+0xf6>
 80161b0:	f8d8 4000 	ldr.w	r4, [r8]
 80161b4:	4627      	mov	r7, r4
 80161b6:	2f00      	cmp	r7, #0
 80161b8:	d143      	bne.n	8016242 <_malloc_r+0xd6>
 80161ba:	2c00      	cmp	r4, #0
 80161bc:	d04b      	beq.n	8016256 <_malloc_r+0xea>
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	4639      	mov	r1, r7
 80161c2:	4630      	mov	r0, r6
 80161c4:	eb04 0903 	add.w	r9, r4, r3
 80161c8:	f001 fe9a 	bl	8017f00 <_sbrk_r>
 80161cc:	4581      	cmp	r9, r0
 80161ce:	d142      	bne.n	8016256 <_malloc_r+0xea>
 80161d0:	6821      	ldr	r1, [r4, #0]
 80161d2:	1a6d      	subs	r5, r5, r1
 80161d4:	4629      	mov	r1, r5
 80161d6:	4630      	mov	r0, r6
 80161d8:	f7ff ffa6 	bl	8016128 <sbrk_aligned>
 80161dc:	3001      	adds	r0, #1
 80161de:	d03a      	beq.n	8016256 <_malloc_r+0xea>
 80161e0:	6823      	ldr	r3, [r4, #0]
 80161e2:	442b      	add	r3, r5
 80161e4:	6023      	str	r3, [r4, #0]
 80161e6:	f8d8 3000 	ldr.w	r3, [r8]
 80161ea:	685a      	ldr	r2, [r3, #4]
 80161ec:	bb62      	cbnz	r2, 8016248 <_malloc_r+0xdc>
 80161ee:	f8c8 7000 	str.w	r7, [r8]
 80161f2:	e00f      	b.n	8016214 <_malloc_r+0xa8>
 80161f4:	6822      	ldr	r2, [r4, #0]
 80161f6:	1b52      	subs	r2, r2, r5
 80161f8:	d420      	bmi.n	801623c <_malloc_r+0xd0>
 80161fa:	2a0b      	cmp	r2, #11
 80161fc:	d917      	bls.n	801622e <_malloc_r+0xc2>
 80161fe:	1961      	adds	r1, r4, r5
 8016200:	42a3      	cmp	r3, r4
 8016202:	6025      	str	r5, [r4, #0]
 8016204:	bf18      	it	ne
 8016206:	6059      	strne	r1, [r3, #4]
 8016208:	6863      	ldr	r3, [r4, #4]
 801620a:	bf08      	it	eq
 801620c:	f8c8 1000 	streq.w	r1, [r8]
 8016210:	5162      	str	r2, [r4, r5]
 8016212:	604b      	str	r3, [r1, #4]
 8016214:	4630      	mov	r0, r6
 8016216:	f000 f82f 	bl	8016278 <__malloc_unlock>
 801621a:	f104 000b 	add.w	r0, r4, #11
 801621e:	1d23      	adds	r3, r4, #4
 8016220:	f020 0007 	bic.w	r0, r0, #7
 8016224:	1ac2      	subs	r2, r0, r3
 8016226:	bf1c      	itt	ne
 8016228:	1a1b      	subne	r3, r3, r0
 801622a:	50a3      	strne	r3, [r4, r2]
 801622c:	e7af      	b.n	801618e <_malloc_r+0x22>
 801622e:	6862      	ldr	r2, [r4, #4]
 8016230:	42a3      	cmp	r3, r4
 8016232:	bf0c      	ite	eq
 8016234:	f8c8 2000 	streq.w	r2, [r8]
 8016238:	605a      	strne	r2, [r3, #4]
 801623a:	e7eb      	b.n	8016214 <_malloc_r+0xa8>
 801623c:	4623      	mov	r3, r4
 801623e:	6864      	ldr	r4, [r4, #4]
 8016240:	e7ae      	b.n	80161a0 <_malloc_r+0x34>
 8016242:	463c      	mov	r4, r7
 8016244:	687f      	ldr	r7, [r7, #4]
 8016246:	e7b6      	b.n	80161b6 <_malloc_r+0x4a>
 8016248:	461a      	mov	r2, r3
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	42a3      	cmp	r3, r4
 801624e:	d1fb      	bne.n	8016248 <_malloc_r+0xdc>
 8016250:	2300      	movs	r3, #0
 8016252:	6053      	str	r3, [r2, #4]
 8016254:	e7de      	b.n	8016214 <_malloc_r+0xa8>
 8016256:	230c      	movs	r3, #12
 8016258:	6033      	str	r3, [r6, #0]
 801625a:	4630      	mov	r0, r6
 801625c:	f000 f80c 	bl	8016278 <__malloc_unlock>
 8016260:	e794      	b.n	801618c <_malloc_r+0x20>
 8016262:	6005      	str	r5, [r0, #0]
 8016264:	e7d6      	b.n	8016214 <_malloc_r+0xa8>
 8016266:	bf00      	nop
 8016268:	200083cc 	.word	0x200083cc

0801626c <__malloc_lock>:
 801626c:	4801      	ldr	r0, [pc, #4]	@ (8016274 <__malloc_lock+0x8>)
 801626e:	f7ff b8ec 	b.w	801544a <__retarget_lock_acquire_recursive>
 8016272:	bf00      	nop
 8016274:	200083c4 	.word	0x200083c4

08016278 <__malloc_unlock>:
 8016278:	4801      	ldr	r0, [pc, #4]	@ (8016280 <__malloc_unlock+0x8>)
 801627a:	f7ff b8e7 	b.w	801544c <__retarget_lock_release_recursive>
 801627e:	bf00      	nop
 8016280:	200083c4 	.word	0x200083c4

08016284 <_Balloc>:
 8016284:	b570      	push	{r4, r5, r6, lr}
 8016286:	69c6      	ldr	r6, [r0, #28]
 8016288:	4604      	mov	r4, r0
 801628a:	460d      	mov	r5, r1
 801628c:	b976      	cbnz	r6, 80162ac <_Balloc+0x28>
 801628e:	2010      	movs	r0, #16
 8016290:	f7ff ff42 	bl	8016118 <malloc>
 8016294:	4602      	mov	r2, r0
 8016296:	61e0      	str	r0, [r4, #28]
 8016298:	b920      	cbnz	r0, 80162a4 <_Balloc+0x20>
 801629a:	4b18      	ldr	r3, [pc, #96]	@ (80162fc <_Balloc+0x78>)
 801629c:	4818      	ldr	r0, [pc, #96]	@ (8016300 <_Balloc+0x7c>)
 801629e:	216b      	movs	r1, #107	@ 0x6b
 80162a0:	f7ff f8ea 	bl	8015478 <__assert_func>
 80162a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162a8:	6006      	str	r6, [r0, #0]
 80162aa:	60c6      	str	r6, [r0, #12]
 80162ac:	69e6      	ldr	r6, [r4, #28]
 80162ae:	68f3      	ldr	r3, [r6, #12]
 80162b0:	b183      	cbz	r3, 80162d4 <_Balloc+0x50>
 80162b2:	69e3      	ldr	r3, [r4, #28]
 80162b4:	68db      	ldr	r3, [r3, #12]
 80162b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80162ba:	b9b8      	cbnz	r0, 80162ec <_Balloc+0x68>
 80162bc:	2101      	movs	r1, #1
 80162be:	fa01 f605 	lsl.w	r6, r1, r5
 80162c2:	1d72      	adds	r2, r6, #5
 80162c4:	0092      	lsls	r2, r2, #2
 80162c6:	4620      	mov	r0, r4
 80162c8:	f001 fe39 	bl	8017f3e <_calloc_r>
 80162cc:	b160      	cbz	r0, 80162e8 <_Balloc+0x64>
 80162ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80162d2:	e00e      	b.n	80162f2 <_Balloc+0x6e>
 80162d4:	2221      	movs	r2, #33	@ 0x21
 80162d6:	2104      	movs	r1, #4
 80162d8:	4620      	mov	r0, r4
 80162da:	f001 fe30 	bl	8017f3e <_calloc_r>
 80162de:	69e3      	ldr	r3, [r4, #28]
 80162e0:	60f0      	str	r0, [r6, #12]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d1e4      	bne.n	80162b2 <_Balloc+0x2e>
 80162e8:	2000      	movs	r0, #0
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
 80162ec:	6802      	ldr	r2, [r0, #0]
 80162ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80162f2:	2300      	movs	r3, #0
 80162f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80162f8:	e7f7      	b.n	80162ea <_Balloc+0x66>
 80162fa:	bf00      	nop
 80162fc:	0801bf4a 	.word	0x0801bf4a
 8016300:	0801c0a4 	.word	0x0801c0a4

08016304 <_Bfree>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	69c6      	ldr	r6, [r0, #28]
 8016308:	4605      	mov	r5, r0
 801630a:	460c      	mov	r4, r1
 801630c:	b976      	cbnz	r6, 801632c <_Bfree+0x28>
 801630e:	2010      	movs	r0, #16
 8016310:	f7ff ff02 	bl	8016118 <malloc>
 8016314:	4602      	mov	r2, r0
 8016316:	61e8      	str	r0, [r5, #28]
 8016318:	b920      	cbnz	r0, 8016324 <_Bfree+0x20>
 801631a:	4b09      	ldr	r3, [pc, #36]	@ (8016340 <_Bfree+0x3c>)
 801631c:	4809      	ldr	r0, [pc, #36]	@ (8016344 <_Bfree+0x40>)
 801631e:	218f      	movs	r1, #143	@ 0x8f
 8016320:	f7ff f8aa 	bl	8015478 <__assert_func>
 8016324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016328:	6006      	str	r6, [r0, #0]
 801632a:	60c6      	str	r6, [r0, #12]
 801632c:	b13c      	cbz	r4, 801633e <_Bfree+0x3a>
 801632e:	69eb      	ldr	r3, [r5, #28]
 8016330:	6862      	ldr	r2, [r4, #4]
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016338:	6021      	str	r1, [r4, #0]
 801633a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801633e:	bd70      	pop	{r4, r5, r6, pc}
 8016340:	0801bf4a 	.word	0x0801bf4a
 8016344:	0801c0a4 	.word	0x0801c0a4

08016348 <__multadd>:
 8016348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801634c:	690d      	ldr	r5, [r1, #16]
 801634e:	4607      	mov	r7, r0
 8016350:	460c      	mov	r4, r1
 8016352:	461e      	mov	r6, r3
 8016354:	f101 0c14 	add.w	ip, r1, #20
 8016358:	2000      	movs	r0, #0
 801635a:	f8dc 3000 	ldr.w	r3, [ip]
 801635e:	b299      	uxth	r1, r3
 8016360:	fb02 6101 	mla	r1, r2, r1, r6
 8016364:	0c1e      	lsrs	r6, r3, #16
 8016366:	0c0b      	lsrs	r3, r1, #16
 8016368:	fb02 3306 	mla	r3, r2, r6, r3
 801636c:	b289      	uxth	r1, r1
 801636e:	3001      	adds	r0, #1
 8016370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016374:	4285      	cmp	r5, r0
 8016376:	f84c 1b04 	str.w	r1, [ip], #4
 801637a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801637e:	dcec      	bgt.n	801635a <__multadd+0x12>
 8016380:	b30e      	cbz	r6, 80163c6 <__multadd+0x7e>
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	42ab      	cmp	r3, r5
 8016386:	dc19      	bgt.n	80163bc <__multadd+0x74>
 8016388:	6861      	ldr	r1, [r4, #4]
 801638a:	4638      	mov	r0, r7
 801638c:	3101      	adds	r1, #1
 801638e:	f7ff ff79 	bl	8016284 <_Balloc>
 8016392:	4680      	mov	r8, r0
 8016394:	b928      	cbnz	r0, 80163a2 <__multadd+0x5a>
 8016396:	4602      	mov	r2, r0
 8016398:	4b0c      	ldr	r3, [pc, #48]	@ (80163cc <__multadd+0x84>)
 801639a:	480d      	ldr	r0, [pc, #52]	@ (80163d0 <__multadd+0x88>)
 801639c:	21ba      	movs	r1, #186	@ 0xba
 801639e:	f7ff f86b 	bl	8015478 <__assert_func>
 80163a2:	6922      	ldr	r2, [r4, #16]
 80163a4:	3202      	adds	r2, #2
 80163a6:	f104 010c 	add.w	r1, r4, #12
 80163aa:	0092      	lsls	r2, r2, #2
 80163ac:	300c      	adds	r0, #12
 80163ae:	f7ff f84e 	bl	801544e <memcpy>
 80163b2:	4621      	mov	r1, r4
 80163b4:	4638      	mov	r0, r7
 80163b6:	f7ff ffa5 	bl	8016304 <_Bfree>
 80163ba:	4644      	mov	r4, r8
 80163bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80163c0:	3501      	adds	r5, #1
 80163c2:	615e      	str	r6, [r3, #20]
 80163c4:	6125      	str	r5, [r4, #16]
 80163c6:	4620      	mov	r0, r4
 80163c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163cc:	0801c093 	.word	0x0801c093
 80163d0:	0801c0a4 	.word	0x0801c0a4

080163d4 <__s2b>:
 80163d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d8:	460c      	mov	r4, r1
 80163da:	4615      	mov	r5, r2
 80163dc:	461f      	mov	r7, r3
 80163de:	2209      	movs	r2, #9
 80163e0:	3308      	adds	r3, #8
 80163e2:	4606      	mov	r6, r0
 80163e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80163e8:	2100      	movs	r1, #0
 80163ea:	2201      	movs	r2, #1
 80163ec:	429a      	cmp	r2, r3
 80163ee:	db09      	blt.n	8016404 <__s2b+0x30>
 80163f0:	4630      	mov	r0, r6
 80163f2:	f7ff ff47 	bl	8016284 <_Balloc>
 80163f6:	b940      	cbnz	r0, 801640a <__s2b+0x36>
 80163f8:	4602      	mov	r2, r0
 80163fa:	4b19      	ldr	r3, [pc, #100]	@ (8016460 <__s2b+0x8c>)
 80163fc:	4819      	ldr	r0, [pc, #100]	@ (8016464 <__s2b+0x90>)
 80163fe:	21d3      	movs	r1, #211	@ 0xd3
 8016400:	f7ff f83a 	bl	8015478 <__assert_func>
 8016404:	0052      	lsls	r2, r2, #1
 8016406:	3101      	adds	r1, #1
 8016408:	e7f0      	b.n	80163ec <__s2b+0x18>
 801640a:	9b08      	ldr	r3, [sp, #32]
 801640c:	6143      	str	r3, [r0, #20]
 801640e:	2d09      	cmp	r5, #9
 8016410:	f04f 0301 	mov.w	r3, #1
 8016414:	6103      	str	r3, [r0, #16]
 8016416:	dd16      	ble.n	8016446 <__s2b+0x72>
 8016418:	f104 0909 	add.w	r9, r4, #9
 801641c:	46c8      	mov	r8, r9
 801641e:	442c      	add	r4, r5
 8016420:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016424:	4601      	mov	r1, r0
 8016426:	3b30      	subs	r3, #48	@ 0x30
 8016428:	220a      	movs	r2, #10
 801642a:	4630      	mov	r0, r6
 801642c:	f7ff ff8c 	bl	8016348 <__multadd>
 8016430:	45a0      	cmp	r8, r4
 8016432:	d1f5      	bne.n	8016420 <__s2b+0x4c>
 8016434:	f1a5 0408 	sub.w	r4, r5, #8
 8016438:	444c      	add	r4, r9
 801643a:	1b2d      	subs	r5, r5, r4
 801643c:	1963      	adds	r3, r4, r5
 801643e:	42bb      	cmp	r3, r7
 8016440:	db04      	blt.n	801644c <__s2b+0x78>
 8016442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016446:	340a      	adds	r4, #10
 8016448:	2509      	movs	r5, #9
 801644a:	e7f6      	b.n	801643a <__s2b+0x66>
 801644c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016450:	4601      	mov	r1, r0
 8016452:	3b30      	subs	r3, #48	@ 0x30
 8016454:	220a      	movs	r2, #10
 8016456:	4630      	mov	r0, r6
 8016458:	f7ff ff76 	bl	8016348 <__multadd>
 801645c:	e7ee      	b.n	801643c <__s2b+0x68>
 801645e:	bf00      	nop
 8016460:	0801c093 	.word	0x0801c093
 8016464:	0801c0a4 	.word	0x0801c0a4

08016468 <__hi0bits>:
 8016468:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801646c:	4603      	mov	r3, r0
 801646e:	bf36      	itet	cc
 8016470:	0403      	lslcc	r3, r0, #16
 8016472:	2000      	movcs	r0, #0
 8016474:	2010      	movcc	r0, #16
 8016476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801647a:	bf3c      	itt	cc
 801647c:	021b      	lslcc	r3, r3, #8
 801647e:	3008      	addcc	r0, #8
 8016480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016484:	bf3c      	itt	cc
 8016486:	011b      	lslcc	r3, r3, #4
 8016488:	3004      	addcc	r0, #4
 801648a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801648e:	bf3c      	itt	cc
 8016490:	009b      	lslcc	r3, r3, #2
 8016492:	3002      	addcc	r0, #2
 8016494:	2b00      	cmp	r3, #0
 8016496:	db05      	blt.n	80164a4 <__hi0bits+0x3c>
 8016498:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801649c:	f100 0001 	add.w	r0, r0, #1
 80164a0:	bf08      	it	eq
 80164a2:	2020      	moveq	r0, #32
 80164a4:	4770      	bx	lr

080164a6 <__lo0bits>:
 80164a6:	6803      	ldr	r3, [r0, #0]
 80164a8:	4602      	mov	r2, r0
 80164aa:	f013 0007 	ands.w	r0, r3, #7
 80164ae:	d00b      	beq.n	80164c8 <__lo0bits+0x22>
 80164b0:	07d9      	lsls	r1, r3, #31
 80164b2:	d421      	bmi.n	80164f8 <__lo0bits+0x52>
 80164b4:	0798      	lsls	r0, r3, #30
 80164b6:	bf49      	itett	mi
 80164b8:	085b      	lsrmi	r3, r3, #1
 80164ba:	089b      	lsrpl	r3, r3, #2
 80164bc:	2001      	movmi	r0, #1
 80164be:	6013      	strmi	r3, [r2, #0]
 80164c0:	bf5c      	itt	pl
 80164c2:	6013      	strpl	r3, [r2, #0]
 80164c4:	2002      	movpl	r0, #2
 80164c6:	4770      	bx	lr
 80164c8:	b299      	uxth	r1, r3
 80164ca:	b909      	cbnz	r1, 80164d0 <__lo0bits+0x2a>
 80164cc:	0c1b      	lsrs	r3, r3, #16
 80164ce:	2010      	movs	r0, #16
 80164d0:	b2d9      	uxtb	r1, r3
 80164d2:	b909      	cbnz	r1, 80164d8 <__lo0bits+0x32>
 80164d4:	3008      	adds	r0, #8
 80164d6:	0a1b      	lsrs	r3, r3, #8
 80164d8:	0719      	lsls	r1, r3, #28
 80164da:	bf04      	itt	eq
 80164dc:	091b      	lsreq	r3, r3, #4
 80164de:	3004      	addeq	r0, #4
 80164e0:	0799      	lsls	r1, r3, #30
 80164e2:	bf04      	itt	eq
 80164e4:	089b      	lsreq	r3, r3, #2
 80164e6:	3002      	addeq	r0, #2
 80164e8:	07d9      	lsls	r1, r3, #31
 80164ea:	d403      	bmi.n	80164f4 <__lo0bits+0x4e>
 80164ec:	085b      	lsrs	r3, r3, #1
 80164ee:	f100 0001 	add.w	r0, r0, #1
 80164f2:	d003      	beq.n	80164fc <__lo0bits+0x56>
 80164f4:	6013      	str	r3, [r2, #0]
 80164f6:	4770      	bx	lr
 80164f8:	2000      	movs	r0, #0
 80164fa:	4770      	bx	lr
 80164fc:	2020      	movs	r0, #32
 80164fe:	4770      	bx	lr

08016500 <__i2b>:
 8016500:	b510      	push	{r4, lr}
 8016502:	460c      	mov	r4, r1
 8016504:	2101      	movs	r1, #1
 8016506:	f7ff febd 	bl	8016284 <_Balloc>
 801650a:	4602      	mov	r2, r0
 801650c:	b928      	cbnz	r0, 801651a <__i2b+0x1a>
 801650e:	4b05      	ldr	r3, [pc, #20]	@ (8016524 <__i2b+0x24>)
 8016510:	4805      	ldr	r0, [pc, #20]	@ (8016528 <__i2b+0x28>)
 8016512:	f240 1145 	movw	r1, #325	@ 0x145
 8016516:	f7fe ffaf 	bl	8015478 <__assert_func>
 801651a:	2301      	movs	r3, #1
 801651c:	6144      	str	r4, [r0, #20]
 801651e:	6103      	str	r3, [r0, #16]
 8016520:	bd10      	pop	{r4, pc}
 8016522:	bf00      	nop
 8016524:	0801c093 	.word	0x0801c093
 8016528:	0801c0a4 	.word	0x0801c0a4

0801652c <__multiply>:
 801652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016530:	4617      	mov	r7, r2
 8016532:	690a      	ldr	r2, [r1, #16]
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	429a      	cmp	r2, r3
 8016538:	bfa8      	it	ge
 801653a:	463b      	movge	r3, r7
 801653c:	4689      	mov	r9, r1
 801653e:	bfa4      	itt	ge
 8016540:	460f      	movge	r7, r1
 8016542:	4699      	movge	r9, r3
 8016544:	693d      	ldr	r5, [r7, #16]
 8016546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	6879      	ldr	r1, [r7, #4]
 801654e:	eb05 060a 	add.w	r6, r5, sl
 8016552:	42b3      	cmp	r3, r6
 8016554:	b085      	sub	sp, #20
 8016556:	bfb8      	it	lt
 8016558:	3101      	addlt	r1, #1
 801655a:	f7ff fe93 	bl	8016284 <_Balloc>
 801655e:	b930      	cbnz	r0, 801656e <__multiply+0x42>
 8016560:	4602      	mov	r2, r0
 8016562:	4b41      	ldr	r3, [pc, #260]	@ (8016668 <__multiply+0x13c>)
 8016564:	4841      	ldr	r0, [pc, #260]	@ (801666c <__multiply+0x140>)
 8016566:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801656a:	f7fe ff85 	bl	8015478 <__assert_func>
 801656e:	f100 0414 	add.w	r4, r0, #20
 8016572:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016576:	4623      	mov	r3, r4
 8016578:	2200      	movs	r2, #0
 801657a:	4573      	cmp	r3, lr
 801657c:	d320      	bcc.n	80165c0 <__multiply+0x94>
 801657e:	f107 0814 	add.w	r8, r7, #20
 8016582:	f109 0114 	add.w	r1, r9, #20
 8016586:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801658a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801658e:	9302      	str	r3, [sp, #8]
 8016590:	1beb      	subs	r3, r5, r7
 8016592:	3b15      	subs	r3, #21
 8016594:	f023 0303 	bic.w	r3, r3, #3
 8016598:	3304      	adds	r3, #4
 801659a:	3715      	adds	r7, #21
 801659c:	42bd      	cmp	r5, r7
 801659e:	bf38      	it	cc
 80165a0:	2304      	movcc	r3, #4
 80165a2:	9301      	str	r3, [sp, #4]
 80165a4:	9b02      	ldr	r3, [sp, #8]
 80165a6:	9103      	str	r1, [sp, #12]
 80165a8:	428b      	cmp	r3, r1
 80165aa:	d80c      	bhi.n	80165c6 <__multiply+0x9a>
 80165ac:	2e00      	cmp	r6, #0
 80165ae:	dd03      	ble.n	80165b8 <__multiply+0x8c>
 80165b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d055      	beq.n	8016664 <__multiply+0x138>
 80165b8:	6106      	str	r6, [r0, #16]
 80165ba:	b005      	add	sp, #20
 80165bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c0:	f843 2b04 	str.w	r2, [r3], #4
 80165c4:	e7d9      	b.n	801657a <__multiply+0x4e>
 80165c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80165ca:	f1ba 0f00 	cmp.w	sl, #0
 80165ce:	d01f      	beq.n	8016610 <__multiply+0xe4>
 80165d0:	46c4      	mov	ip, r8
 80165d2:	46a1      	mov	r9, r4
 80165d4:	2700      	movs	r7, #0
 80165d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80165da:	f8d9 3000 	ldr.w	r3, [r9]
 80165de:	fa1f fb82 	uxth.w	fp, r2
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80165e8:	443b      	add	r3, r7
 80165ea:	f8d9 7000 	ldr.w	r7, [r9]
 80165ee:	0c12      	lsrs	r2, r2, #16
 80165f0:	0c3f      	lsrs	r7, r7, #16
 80165f2:	fb0a 7202 	mla	r2, sl, r2, r7
 80165f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016600:	4565      	cmp	r5, ip
 8016602:	f849 3b04 	str.w	r3, [r9], #4
 8016606:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801660a:	d8e4      	bhi.n	80165d6 <__multiply+0xaa>
 801660c:	9b01      	ldr	r3, [sp, #4]
 801660e:	50e7      	str	r7, [r4, r3]
 8016610:	9b03      	ldr	r3, [sp, #12]
 8016612:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016616:	3104      	adds	r1, #4
 8016618:	f1b9 0f00 	cmp.w	r9, #0
 801661c:	d020      	beq.n	8016660 <__multiply+0x134>
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	4647      	mov	r7, r8
 8016622:	46a4      	mov	ip, r4
 8016624:	f04f 0a00 	mov.w	sl, #0
 8016628:	f8b7 b000 	ldrh.w	fp, [r7]
 801662c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016630:	fb09 220b 	mla	r2, r9, fp, r2
 8016634:	4452      	add	r2, sl
 8016636:	b29b      	uxth	r3, r3
 8016638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801663c:	f84c 3b04 	str.w	r3, [ip], #4
 8016640:	f857 3b04 	ldr.w	r3, [r7], #4
 8016644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016648:	f8bc 3000 	ldrh.w	r3, [ip]
 801664c:	fb09 330a 	mla	r3, r9, sl, r3
 8016650:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016654:	42bd      	cmp	r5, r7
 8016656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801665a:	d8e5      	bhi.n	8016628 <__multiply+0xfc>
 801665c:	9a01      	ldr	r2, [sp, #4]
 801665e:	50a3      	str	r3, [r4, r2]
 8016660:	3404      	adds	r4, #4
 8016662:	e79f      	b.n	80165a4 <__multiply+0x78>
 8016664:	3e01      	subs	r6, #1
 8016666:	e7a1      	b.n	80165ac <__multiply+0x80>
 8016668:	0801c093 	.word	0x0801c093
 801666c:	0801c0a4 	.word	0x0801c0a4

08016670 <__pow5mult>:
 8016670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016674:	4615      	mov	r5, r2
 8016676:	f012 0203 	ands.w	r2, r2, #3
 801667a:	4607      	mov	r7, r0
 801667c:	460e      	mov	r6, r1
 801667e:	d007      	beq.n	8016690 <__pow5mult+0x20>
 8016680:	4c25      	ldr	r4, [pc, #148]	@ (8016718 <__pow5mult+0xa8>)
 8016682:	3a01      	subs	r2, #1
 8016684:	2300      	movs	r3, #0
 8016686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801668a:	f7ff fe5d 	bl	8016348 <__multadd>
 801668e:	4606      	mov	r6, r0
 8016690:	10ad      	asrs	r5, r5, #2
 8016692:	d03d      	beq.n	8016710 <__pow5mult+0xa0>
 8016694:	69fc      	ldr	r4, [r7, #28]
 8016696:	b97c      	cbnz	r4, 80166b8 <__pow5mult+0x48>
 8016698:	2010      	movs	r0, #16
 801669a:	f7ff fd3d 	bl	8016118 <malloc>
 801669e:	4602      	mov	r2, r0
 80166a0:	61f8      	str	r0, [r7, #28]
 80166a2:	b928      	cbnz	r0, 80166b0 <__pow5mult+0x40>
 80166a4:	4b1d      	ldr	r3, [pc, #116]	@ (801671c <__pow5mult+0xac>)
 80166a6:	481e      	ldr	r0, [pc, #120]	@ (8016720 <__pow5mult+0xb0>)
 80166a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80166ac:	f7fe fee4 	bl	8015478 <__assert_func>
 80166b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80166b4:	6004      	str	r4, [r0, #0]
 80166b6:	60c4      	str	r4, [r0, #12]
 80166b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80166bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80166c0:	b94c      	cbnz	r4, 80166d6 <__pow5mult+0x66>
 80166c2:	f240 2171 	movw	r1, #625	@ 0x271
 80166c6:	4638      	mov	r0, r7
 80166c8:	f7ff ff1a 	bl	8016500 <__i2b>
 80166cc:	2300      	movs	r3, #0
 80166ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80166d2:	4604      	mov	r4, r0
 80166d4:	6003      	str	r3, [r0, #0]
 80166d6:	f04f 0900 	mov.w	r9, #0
 80166da:	07eb      	lsls	r3, r5, #31
 80166dc:	d50a      	bpl.n	80166f4 <__pow5mult+0x84>
 80166de:	4631      	mov	r1, r6
 80166e0:	4622      	mov	r2, r4
 80166e2:	4638      	mov	r0, r7
 80166e4:	f7ff ff22 	bl	801652c <__multiply>
 80166e8:	4631      	mov	r1, r6
 80166ea:	4680      	mov	r8, r0
 80166ec:	4638      	mov	r0, r7
 80166ee:	f7ff fe09 	bl	8016304 <_Bfree>
 80166f2:	4646      	mov	r6, r8
 80166f4:	106d      	asrs	r5, r5, #1
 80166f6:	d00b      	beq.n	8016710 <__pow5mult+0xa0>
 80166f8:	6820      	ldr	r0, [r4, #0]
 80166fa:	b938      	cbnz	r0, 801670c <__pow5mult+0x9c>
 80166fc:	4622      	mov	r2, r4
 80166fe:	4621      	mov	r1, r4
 8016700:	4638      	mov	r0, r7
 8016702:	f7ff ff13 	bl	801652c <__multiply>
 8016706:	6020      	str	r0, [r4, #0]
 8016708:	f8c0 9000 	str.w	r9, [r0]
 801670c:	4604      	mov	r4, r0
 801670e:	e7e4      	b.n	80166da <__pow5mult+0x6a>
 8016710:	4630      	mov	r0, r6
 8016712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016716:	bf00      	nop
 8016718:	0801c27c 	.word	0x0801c27c
 801671c:	0801bf4a 	.word	0x0801bf4a
 8016720:	0801c0a4 	.word	0x0801c0a4

08016724 <__lshift>:
 8016724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016728:	460c      	mov	r4, r1
 801672a:	6849      	ldr	r1, [r1, #4]
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016732:	68a3      	ldr	r3, [r4, #8]
 8016734:	4607      	mov	r7, r0
 8016736:	4691      	mov	r9, r2
 8016738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801673c:	f108 0601 	add.w	r6, r8, #1
 8016740:	42b3      	cmp	r3, r6
 8016742:	db0b      	blt.n	801675c <__lshift+0x38>
 8016744:	4638      	mov	r0, r7
 8016746:	f7ff fd9d 	bl	8016284 <_Balloc>
 801674a:	4605      	mov	r5, r0
 801674c:	b948      	cbnz	r0, 8016762 <__lshift+0x3e>
 801674e:	4602      	mov	r2, r0
 8016750:	4b28      	ldr	r3, [pc, #160]	@ (80167f4 <__lshift+0xd0>)
 8016752:	4829      	ldr	r0, [pc, #164]	@ (80167f8 <__lshift+0xd4>)
 8016754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016758:	f7fe fe8e 	bl	8015478 <__assert_func>
 801675c:	3101      	adds	r1, #1
 801675e:	005b      	lsls	r3, r3, #1
 8016760:	e7ee      	b.n	8016740 <__lshift+0x1c>
 8016762:	2300      	movs	r3, #0
 8016764:	f100 0114 	add.w	r1, r0, #20
 8016768:	f100 0210 	add.w	r2, r0, #16
 801676c:	4618      	mov	r0, r3
 801676e:	4553      	cmp	r3, sl
 8016770:	db33      	blt.n	80167da <__lshift+0xb6>
 8016772:	6920      	ldr	r0, [r4, #16]
 8016774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016778:	f104 0314 	add.w	r3, r4, #20
 801677c:	f019 091f 	ands.w	r9, r9, #31
 8016780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016788:	d02b      	beq.n	80167e2 <__lshift+0xbe>
 801678a:	f1c9 0e20 	rsb	lr, r9, #32
 801678e:	468a      	mov	sl, r1
 8016790:	2200      	movs	r2, #0
 8016792:	6818      	ldr	r0, [r3, #0]
 8016794:	fa00 f009 	lsl.w	r0, r0, r9
 8016798:	4310      	orrs	r0, r2
 801679a:	f84a 0b04 	str.w	r0, [sl], #4
 801679e:	f853 2b04 	ldr.w	r2, [r3], #4
 80167a2:	459c      	cmp	ip, r3
 80167a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80167a8:	d8f3      	bhi.n	8016792 <__lshift+0x6e>
 80167aa:	ebac 0304 	sub.w	r3, ip, r4
 80167ae:	3b15      	subs	r3, #21
 80167b0:	f023 0303 	bic.w	r3, r3, #3
 80167b4:	3304      	adds	r3, #4
 80167b6:	f104 0015 	add.w	r0, r4, #21
 80167ba:	4560      	cmp	r0, ip
 80167bc:	bf88      	it	hi
 80167be:	2304      	movhi	r3, #4
 80167c0:	50ca      	str	r2, [r1, r3]
 80167c2:	b10a      	cbz	r2, 80167c8 <__lshift+0xa4>
 80167c4:	f108 0602 	add.w	r6, r8, #2
 80167c8:	3e01      	subs	r6, #1
 80167ca:	4638      	mov	r0, r7
 80167cc:	612e      	str	r6, [r5, #16]
 80167ce:	4621      	mov	r1, r4
 80167d0:	f7ff fd98 	bl	8016304 <_Bfree>
 80167d4:	4628      	mov	r0, r5
 80167d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167da:	f842 0f04 	str.w	r0, [r2, #4]!
 80167de:	3301      	adds	r3, #1
 80167e0:	e7c5      	b.n	801676e <__lshift+0x4a>
 80167e2:	3904      	subs	r1, #4
 80167e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80167e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80167ec:	459c      	cmp	ip, r3
 80167ee:	d8f9      	bhi.n	80167e4 <__lshift+0xc0>
 80167f0:	e7ea      	b.n	80167c8 <__lshift+0xa4>
 80167f2:	bf00      	nop
 80167f4:	0801c093 	.word	0x0801c093
 80167f8:	0801c0a4 	.word	0x0801c0a4

080167fc <__mcmp>:
 80167fc:	690a      	ldr	r2, [r1, #16]
 80167fe:	4603      	mov	r3, r0
 8016800:	6900      	ldr	r0, [r0, #16]
 8016802:	1a80      	subs	r0, r0, r2
 8016804:	b530      	push	{r4, r5, lr}
 8016806:	d10e      	bne.n	8016826 <__mcmp+0x2a>
 8016808:	3314      	adds	r3, #20
 801680a:	3114      	adds	r1, #20
 801680c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801681c:	4295      	cmp	r5, r2
 801681e:	d003      	beq.n	8016828 <__mcmp+0x2c>
 8016820:	d205      	bcs.n	801682e <__mcmp+0x32>
 8016822:	f04f 30ff 	mov.w	r0, #4294967295
 8016826:	bd30      	pop	{r4, r5, pc}
 8016828:	42a3      	cmp	r3, r4
 801682a:	d3f3      	bcc.n	8016814 <__mcmp+0x18>
 801682c:	e7fb      	b.n	8016826 <__mcmp+0x2a>
 801682e:	2001      	movs	r0, #1
 8016830:	e7f9      	b.n	8016826 <__mcmp+0x2a>
	...

08016834 <__mdiff>:
 8016834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016838:	4689      	mov	r9, r1
 801683a:	4606      	mov	r6, r0
 801683c:	4611      	mov	r1, r2
 801683e:	4648      	mov	r0, r9
 8016840:	4614      	mov	r4, r2
 8016842:	f7ff ffdb 	bl	80167fc <__mcmp>
 8016846:	1e05      	subs	r5, r0, #0
 8016848:	d112      	bne.n	8016870 <__mdiff+0x3c>
 801684a:	4629      	mov	r1, r5
 801684c:	4630      	mov	r0, r6
 801684e:	f7ff fd19 	bl	8016284 <_Balloc>
 8016852:	4602      	mov	r2, r0
 8016854:	b928      	cbnz	r0, 8016862 <__mdiff+0x2e>
 8016856:	4b3f      	ldr	r3, [pc, #252]	@ (8016954 <__mdiff+0x120>)
 8016858:	f240 2137 	movw	r1, #567	@ 0x237
 801685c:	483e      	ldr	r0, [pc, #248]	@ (8016958 <__mdiff+0x124>)
 801685e:	f7fe fe0b 	bl	8015478 <__assert_func>
 8016862:	2301      	movs	r3, #1
 8016864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016868:	4610      	mov	r0, r2
 801686a:	b003      	add	sp, #12
 801686c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016870:	bfbc      	itt	lt
 8016872:	464b      	movlt	r3, r9
 8016874:	46a1      	movlt	r9, r4
 8016876:	4630      	mov	r0, r6
 8016878:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801687c:	bfba      	itte	lt
 801687e:	461c      	movlt	r4, r3
 8016880:	2501      	movlt	r5, #1
 8016882:	2500      	movge	r5, #0
 8016884:	f7ff fcfe 	bl	8016284 <_Balloc>
 8016888:	4602      	mov	r2, r0
 801688a:	b918      	cbnz	r0, 8016894 <__mdiff+0x60>
 801688c:	4b31      	ldr	r3, [pc, #196]	@ (8016954 <__mdiff+0x120>)
 801688e:	f240 2145 	movw	r1, #581	@ 0x245
 8016892:	e7e3      	b.n	801685c <__mdiff+0x28>
 8016894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016898:	6926      	ldr	r6, [r4, #16]
 801689a:	60c5      	str	r5, [r0, #12]
 801689c:	f109 0310 	add.w	r3, r9, #16
 80168a0:	f109 0514 	add.w	r5, r9, #20
 80168a4:	f104 0e14 	add.w	lr, r4, #20
 80168a8:	f100 0b14 	add.w	fp, r0, #20
 80168ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80168b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80168b4:	9301      	str	r3, [sp, #4]
 80168b6:	46d9      	mov	r9, fp
 80168b8:	f04f 0c00 	mov.w	ip, #0
 80168bc:	9b01      	ldr	r3, [sp, #4]
 80168be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80168c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80168c6:	9301      	str	r3, [sp, #4]
 80168c8:	fa1f f38a 	uxth.w	r3, sl
 80168cc:	4619      	mov	r1, r3
 80168ce:	b283      	uxth	r3, r0
 80168d0:	1acb      	subs	r3, r1, r3
 80168d2:	0c00      	lsrs	r0, r0, #16
 80168d4:	4463      	add	r3, ip
 80168d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80168da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80168de:	b29b      	uxth	r3, r3
 80168e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80168e4:	4576      	cmp	r6, lr
 80168e6:	f849 3b04 	str.w	r3, [r9], #4
 80168ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80168ee:	d8e5      	bhi.n	80168bc <__mdiff+0x88>
 80168f0:	1b33      	subs	r3, r6, r4
 80168f2:	3b15      	subs	r3, #21
 80168f4:	f023 0303 	bic.w	r3, r3, #3
 80168f8:	3415      	adds	r4, #21
 80168fa:	3304      	adds	r3, #4
 80168fc:	42a6      	cmp	r6, r4
 80168fe:	bf38      	it	cc
 8016900:	2304      	movcc	r3, #4
 8016902:	441d      	add	r5, r3
 8016904:	445b      	add	r3, fp
 8016906:	461e      	mov	r6, r3
 8016908:	462c      	mov	r4, r5
 801690a:	4544      	cmp	r4, r8
 801690c:	d30e      	bcc.n	801692c <__mdiff+0xf8>
 801690e:	f108 0103 	add.w	r1, r8, #3
 8016912:	1b49      	subs	r1, r1, r5
 8016914:	f021 0103 	bic.w	r1, r1, #3
 8016918:	3d03      	subs	r5, #3
 801691a:	45a8      	cmp	r8, r5
 801691c:	bf38      	it	cc
 801691e:	2100      	movcc	r1, #0
 8016920:	440b      	add	r3, r1
 8016922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016926:	b191      	cbz	r1, 801694e <__mdiff+0x11a>
 8016928:	6117      	str	r7, [r2, #16]
 801692a:	e79d      	b.n	8016868 <__mdiff+0x34>
 801692c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016930:	46e6      	mov	lr, ip
 8016932:	0c08      	lsrs	r0, r1, #16
 8016934:	fa1c fc81 	uxtah	ip, ip, r1
 8016938:	4471      	add	r1, lr
 801693a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801693e:	b289      	uxth	r1, r1
 8016940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016944:	f846 1b04 	str.w	r1, [r6], #4
 8016948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801694c:	e7dd      	b.n	801690a <__mdiff+0xd6>
 801694e:	3f01      	subs	r7, #1
 8016950:	e7e7      	b.n	8016922 <__mdiff+0xee>
 8016952:	bf00      	nop
 8016954:	0801c093 	.word	0x0801c093
 8016958:	0801c0a4 	.word	0x0801c0a4

0801695c <__ulp>:
 801695c:	b082      	sub	sp, #8
 801695e:	ed8d 0b00 	vstr	d0, [sp]
 8016962:	9a01      	ldr	r2, [sp, #4]
 8016964:	4b0f      	ldr	r3, [pc, #60]	@ (80169a4 <__ulp+0x48>)
 8016966:	4013      	ands	r3, r2
 8016968:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801696c:	2b00      	cmp	r3, #0
 801696e:	dc08      	bgt.n	8016982 <__ulp+0x26>
 8016970:	425b      	negs	r3, r3
 8016972:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016976:	ea4f 5223 	mov.w	r2, r3, asr #20
 801697a:	da04      	bge.n	8016986 <__ulp+0x2a>
 801697c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016980:	4113      	asrs	r3, r2
 8016982:	2200      	movs	r2, #0
 8016984:	e008      	b.n	8016998 <__ulp+0x3c>
 8016986:	f1a2 0314 	sub.w	r3, r2, #20
 801698a:	2b1e      	cmp	r3, #30
 801698c:	bfda      	itte	le
 801698e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016992:	40da      	lsrle	r2, r3
 8016994:	2201      	movgt	r2, #1
 8016996:	2300      	movs	r3, #0
 8016998:	4619      	mov	r1, r3
 801699a:	4610      	mov	r0, r2
 801699c:	ec41 0b10 	vmov	d0, r0, r1
 80169a0:	b002      	add	sp, #8
 80169a2:	4770      	bx	lr
 80169a4:	7ff00000 	.word	0x7ff00000

080169a8 <__b2d>:
 80169a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169ac:	6906      	ldr	r6, [r0, #16]
 80169ae:	f100 0814 	add.w	r8, r0, #20
 80169b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80169b6:	1f37      	subs	r7, r6, #4
 80169b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80169bc:	4610      	mov	r0, r2
 80169be:	f7ff fd53 	bl	8016468 <__hi0bits>
 80169c2:	f1c0 0320 	rsb	r3, r0, #32
 80169c6:	280a      	cmp	r0, #10
 80169c8:	600b      	str	r3, [r1, #0]
 80169ca:	491b      	ldr	r1, [pc, #108]	@ (8016a38 <__b2d+0x90>)
 80169cc:	dc15      	bgt.n	80169fa <__b2d+0x52>
 80169ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80169d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80169d6:	45b8      	cmp	r8, r7
 80169d8:	ea43 0501 	orr.w	r5, r3, r1
 80169dc:	bf34      	ite	cc
 80169de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80169e2:	2300      	movcs	r3, #0
 80169e4:	3015      	adds	r0, #21
 80169e6:	fa02 f000 	lsl.w	r0, r2, r0
 80169ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80169ee:	4303      	orrs	r3, r0
 80169f0:	461c      	mov	r4, r3
 80169f2:	ec45 4b10 	vmov	d0, r4, r5
 80169f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169fa:	45b8      	cmp	r8, r7
 80169fc:	bf3a      	itte	cc
 80169fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016a02:	f1a6 0708 	subcc.w	r7, r6, #8
 8016a06:	2300      	movcs	r3, #0
 8016a08:	380b      	subs	r0, #11
 8016a0a:	d012      	beq.n	8016a32 <__b2d+0x8a>
 8016a0c:	f1c0 0120 	rsb	r1, r0, #32
 8016a10:	fa23 f401 	lsr.w	r4, r3, r1
 8016a14:	4082      	lsls	r2, r0
 8016a16:	4322      	orrs	r2, r4
 8016a18:	4547      	cmp	r7, r8
 8016a1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016a1e:	bf8c      	ite	hi
 8016a20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016a24:	2200      	movls	r2, #0
 8016a26:	4083      	lsls	r3, r0
 8016a28:	40ca      	lsrs	r2, r1
 8016a2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	e7de      	b.n	80169f0 <__b2d+0x48>
 8016a32:	ea42 0501 	orr.w	r5, r2, r1
 8016a36:	e7db      	b.n	80169f0 <__b2d+0x48>
 8016a38:	3ff00000 	.word	0x3ff00000

08016a3c <__d2b>:
 8016a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a40:	460f      	mov	r7, r1
 8016a42:	2101      	movs	r1, #1
 8016a44:	ec59 8b10 	vmov	r8, r9, d0
 8016a48:	4616      	mov	r6, r2
 8016a4a:	f7ff fc1b 	bl	8016284 <_Balloc>
 8016a4e:	4604      	mov	r4, r0
 8016a50:	b930      	cbnz	r0, 8016a60 <__d2b+0x24>
 8016a52:	4602      	mov	r2, r0
 8016a54:	4b23      	ldr	r3, [pc, #140]	@ (8016ae4 <__d2b+0xa8>)
 8016a56:	4824      	ldr	r0, [pc, #144]	@ (8016ae8 <__d2b+0xac>)
 8016a58:	f240 310f 	movw	r1, #783	@ 0x30f
 8016a5c:	f7fe fd0c 	bl	8015478 <__assert_func>
 8016a60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016a64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a68:	b10d      	cbz	r5, 8016a6e <__d2b+0x32>
 8016a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	f1b8 0300 	subs.w	r3, r8, #0
 8016a74:	d023      	beq.n	8016abe <__d2b+0x82>
 8016a76:	4668      	mov	r0, sp
 8016a78:	9300      	str	r3, [sp, #0]
 8016a7a:	f7ff fd14 	bl	80164a6 <__lo0bits>
 8016a7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016a82:	b1d0      	cbz	r0, 8016aba <__d2b+0x7e>
 8016a84:	f1c0 0320 	rsb	r3, r0, #32
 8016a88:	fa02 f303 	lsl.w	r3, r2, r3
 8016a8c:	430b      	orrs	r3, r1
 8016a8e:	40c2      	lsrs	r2, r0
 8016a90:	6163      	str	r3, [r4, #20]
 8016a92:	9201      	str	r2, [sp, #4]
 8016a94:	9b01      	ldr	r3, [sp, #4]
 8016a96:	61a3      	str	r3, [r4, #24]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	bf0c      	ite	eq
 8016a9c:	2201      	moveq	r2, #1
 8016a9e:	2202      	movne	r2, #2
 8016aa0:	6122      	str	r2, [r4, #16]
 8016aa2:	b1a5      	cbz	r5, 8016ace <__d2b+0x92>
 8016aa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016aa8:	4405      	add	r5, r0
 8016aaa:	603d      	str	r5, [r7, #0]
 8016aac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016ab0:	6030      	str	r0, [r6, #0]
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	b003      	add	sp, #12
 8016ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aba:	6161      	str	r1, [r4, #20]
 8016abc:	e7ea      	b.n	8016a94 <__d2b+0x58>
 8016abe:	a801      	add	r0, sp, #4
 8016ac0:	f7ff fcf1 	bl	80164a6 <__lo0bits>
 8016ac4:	9b01      	ldr	r3, [sp, #4]
 8016ac6:	6163      	str	r3, [r4, #20]
 8016ac8:	3020      	adds	r0, #32
 8016aca:	2201      	movs	r2, #1
 8016acc:	e7e8      	b.n	8016aa0 <__d2b+0x64>
 8016ace:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ad2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8016ad6:	6038      	str	r0, [r7, #0]
 8016ad8:	6918      	ldr	r0, [r3, #16]
 8016ada:	f7ff fcc5 	bl	8016468 <__hi0bits>
 8016ade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016ae2:	e7e5      	b.n	8016ab0 <__d2b+0x74>
 8016ae4:	0801c093 	.word	0x0801c093
 8016ae8:	0801c0a4 	.word	0x0801c0a4

08016aec <__ratio>:
 8016aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	4688      	mov	r8, r1
 8016af2:	4669      	mov	r1, sp
 8016af4:	4681      	mov	r9, r0
 8016af6:	f7ff ff57 	bl	80169a8 <__b2d>
 8016afa:	a901      	add	r1, sp, #4
 8016afc:	4640      	mov	r0, r8
 8016afe:	ec55 4b10 	vmov	r4, r5, d0
 8016b02:	f7ff ff51 	bl	80169a8 <__b2d>
 8016b06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016b0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016b0e:	1ad2      	subs	r2, r2, r3
 8016b10:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016b14:	1a5b      	subs	r3, r3, r1
 8016b16:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8016b1a:	ec57 6b10 	vmov	r6, r7, d0
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	bfd6      	itet	le
 8016b22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b26:	462a      	movgt	r2, r5
 8016b28:	463a      	movle	r2, r7
 8016b2a:	46ab      	mov	fp, r5
 8016b2c:	46a2      	mov	sl, r4
 8016b2e:	bfce      	itee	gt
 8016b30:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016b34:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016b38:	ee00 3a90 	vmovle	s1, r3
 8016b3c:	ec4b ab17 	vmov	d7, sl, fp
 8016b40:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016b44:	b003      	add	sp, #12
 8016b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b4a <__copybits>:
 8016b4a:	3901      	subs	r1, #1
 8016b4c:	b570      	push	{r4, r5, r6, lr}
 8016b4e:	1149      	asrs	r1, r1, #5
 8016b50:	6914      	ldr	r4, [r2, #16]
 8016b52:	3101      	adds	r1, #1
 8016b54:	f102 0314 	add.w	r3, r2, #20
 8016b58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b60:	1f05      	subs	r5, r0, #4
 8016b62:	42a3      	cmp	r3, r4
 8016b64:	d30c      	bcc.n	8016b80 <__copybits+0x36>
 8016b66:	1aa3      	subs	r3, r4, r2
 8016b68:	3b11      	subs	r3, #17
 8016b6a:	f023 0303 	bic.w	r3, r3, #3
 8016b6e:	3211      	adds	r2, #17
 8016b70:	42a2      	cmp	r2, r4
 8016b72:	bf88      	it	hi
 8016b74:	2300      	movhi	r3, #0
 8016b76:	4418      	add	r0, r3
 8016b78:	2300      	movs	r3, #0
 8016b7a:	4288      	cmp	r0, r1
 8016b7c:	d305      	bcc.n	8016b8a <__copybits+0x40>
 8016b7e:	bd70      	pop	{r4, r5, r6, pc}
 8016b80:	f853 6b04 	ldr.w	r6, [r3], #4
 8016b84:	f845 6f04 	str.w	r6, [r5, #4]!
 8016b88:	e7eb      	b.n	8016b62 <__copybits+0x18>
 8016b8a:	f840 3b04 	str.w	r3, [r0], #4
 8016b8e:	e7f4      	b.n	8016b7a <__copybits+0x30>

08016b90 <__any_on>:
 8016b90:	f100 0214 	add.w	r2, r0, #20
 8016b94:	6900      	ldr	r0, [r0, #16]
 8016b96:	114b      	asrs	r3, r1, #5
 8016b98:	4298      	cmp	r0, r3
 8016b9a:	b510      	push	{r4, lr}
 8016b9c:	db11      	blt.n	8016bc2 <__any_on+0x32>
 8016b9e:	dd0a      	ble.n	8016bb6 <__any_on+0x26>
 8016ba0:	f011 011f 	ands.w	r1, r1, #31
 8016ba4:	d007      	beq.n	8016bb6 <__any_on+0x26>
 8016ba6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016baa:	fa24 f001 	lsr.w	r0, r4, r1
 8016bae:	fa00 f101 	lsl.w	r1, r0, r1
 8016bb2:	428c      	cmp	r4, r1
 8016bb4:	d10b      	bne.n	8016bce <__any_on+0x3e>
 8016bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d803      	bhi.n	8016bc6 <__any_on+0x36>
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	bd10      	pop	{r4, pc}
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	e7f7      	b.n	8016bb6 <__any_on+0x26>
 8016bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016bca:	2900      	cmp	r1, #0
 8016bcc:	d0f5      	beq.n	8016bba <__any_on+0x2a>
 8016bce:	2001      	movs	r0, #1
 8016bd0:	e7f6      	b.n	8016bc0 <__any_on+0x30>

08016bd2 <sulp>:
 8016bd2:	b570      	push	{r4, r5, r6, lr}
 8016bd4:	4604      	mov	r4, r0
 8016bd6:	460d      	mov	r5, r1
 8016bd8:	4616      	mov	r6, r2
 8016bda:	ec45 4b10 	vmov	d0, r4, r5
 8016bde:	f7ff febd 	bl	801695c <__ulp>
 8016be2:	b17e      	cbz	r6, 8016c04 <sulp+0x32>
 8016be4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016be8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	dd09      	ble.n	8016c04 <sulp+0x32>
 8016bf0:	051b      	lsls	r3, r3, #20
 8016bf2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016bfc:	ec41 0b17 	vmov	d7, r0, r1
 8016c00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c08 <_strtod_l>:
 8016c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c0c:	ed2d 8b0a 	vpush	{d8-d12}
 8016c10:	b097      	sub	sp, #92	@ 0x5c
 8016c12:	4688      	mov	r8, r1
 8016c14:	920e      	str	r2, [sp, #56]	@ 0x38
 8016c16:	2200      	movs	r2, #0
 8016c18:	9212      	str	r2, [sp, #72]	@ 0x48
 8016c1a:	9005      	str	r0, [sp, #20]
 8016c1c:	f04f 0a00 	mov.w	sl, #0
 8016c20:	f04f 0b00 	mov.w	fp, #0
 8016c24:	460a      	mov	r2, r1
 8016c26:	9211      	str	r2, [sp, #68]	@ 0x44
 8016c28:	7811      	ldrb	r1, [r2, #0]
 8016c2a:	292b      	cmp	r1, #43	@ 0x2b
 8016c2c:	d04c      	beq.n	8016cc8 <_strtod_l+0xc0>
 8016c2e:	d839      	bhi.n	8016ca4 <_strtod_l+0x9c>
 8016c30:	290d      	cmp	r1, #13
 8016c32:	d833      	bhi.n	8016c9c <_strtod_l+0x94>
 8016c34:	2908      	cmp	r1, #8
 8016c36:	d833      	bhi.n	8016ca0 <_strtod_l+0x98>
 8016c38:	2900      	cmp	r1, #0
 8016c3a:	d03c      	beq.n	8016cb6 <_strtod_l+0xae>
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	9208      	str	r2, [sp, #32]
 8016c40:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016c42:	782a      	ldrb	r2, [r5, #0]
 8016c44:	2a30      	cmp	r2, #48	@ 0x30
 8016c46:	f040 80b7 	bne.w	8016db8 <_strtod_l+0x1b0>
 8016c4a:	786a      	ldrb	r2, [r5, #1]
 8016c4c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016c50:	2a58      	cmp	r2, #88	@ 0x58
 8016c52:	d170      	bne.n	8016d36 <_strtod_l+0x12e>
 8016c54:	9302      	str	r3, [sp, #8]
 8016c56:	9b08      	ldr	r3, [sp, #32]
 8016c58:	9301      	str	r3, [sp, #4]
 8016c5a:	ab12      	add	r3, sp, #72	@ 0x48
 8016c5c:	9300      	str	r3, [sp, #0]
 8016c5e:	4a90      	ldr	r2, [pc, #576]	@ (8016ea0 <_strtod_l+0x298>)
 8016c60:	9805      	ldr	r0, [sp, #20]
 8016c62:	ab13      	add	r3, sp, #76	@ 0x4c
 8016c64:	a911      	add	r1, sp, #68	@ 0x44
 8016c66:	f001 f9e5 	bl	8018034 <__gethex>
 8016c6a:	f010 060f 	ands.w	r6, r0, #15
 8016c6e:	4604      	mov	r4, r0
 8016c70:	d005      	beq.n	8016c7e <_strtod_l+0x76>
 8016c72:	2e06      	cmp	r6, #6
 8016c74:	d12a      	bne.n	8016ccc <_strtod_l+0xc4>
 8016c76:	3501      	adds	r5, #1
 8016c78:	2300      	movs	r3, #0
 8016c7a:	9511      	str	r5, [sp, #68]	@ 0x44
 8016c7c:	9308      	str	r3, [sp, #32]
 8016c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f040 8537 	bne.w	80176f4 <_strtod_l+0xaec>
 8016c86:	9b08      	ldr	r3, [sp, #32]
 8016c88:	ec4b ab10 	vmov	d0, sl, fp
 8016c8c:	b1cb      	cbz	r3, 8016cc2 <_strtod_l+0xba>
 8016c8e:	eeb1 0b40 	vneg.f64	d0, d0
 8016c92:	b017      	add	sp, #92	@ 0x5c
 8016c94:	ecbd 8b0a 	vpop	{d8-d12}
 8016c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9c:	2920      	cmp	r1, #32
 8016c9e:	d1cd      	bne.n	8016c3c <_strtod_l+0x34>
 8016ca0:	3201      	adds	r2, #1
 8016ca2:	e7c0      	b.n	8016c26 <_strtod_l+0x1e>
 8016ca4:	292d      	cmp	r1, #45	@ 0x2d
 8016ca6:	d1c9      	bne.n	8016c3c <_strtod_l+0x34>
 8016ca8:	2101      	movs	r1, #1
 8016caa:	9108      	str	r1, [sp, #32]
 8016cac:	1c51      	adds	r1, r2, #1
 8016cae:	9111      	str	r1, [sp, #68]	@ 0x44
 8016cb0:	7852      	ldrb	r2, [r2, #1]
 8016cb2:	2a00      	cmp	r2, #0
 8016cb4:	d1c4      	bne.n	8016c40 <_strtod_l+0x38>
 8016cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cb8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f040 8517 	bne.w	80176f0 <_strtod_l+0xae8>
 8016cc2:	ec4b ab10 	vmov	d0, sl, fp
 8016cc6:	e7e4      	b.n	8016c92 <_strtod_l+0x8a>
 8016cc8:	2100      	movs	r1, #0
 8016cca:	e7ee      	b.n	8016caa <_strtod_l+0xa2>
 8016ccc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016cce:	b13a      	cbz	r2, 8016ce0 <_strtod_l+0xd8>
 8016cd0:	2135      	movs	r1, #53	@ 0x35
 8016cd2:	a814      	add	r0, sp, #80	@ 0x50
 8016cd4:	f7ff ff39 	bl	8016b4a <__copybits>
 8016cd8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016cda:	9805      	ldr	r0, [sp, #20]
 8016cdc:	f7ff fb12 	bl	8016304 <_Bfree>
 8016ce0:	1e73      	subs	r3, r6, #1
 8016ce2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016ce4:	2b04      	cmp	r3, #4
 8016ce6:	d806      	bhi.n	8016cf6 <_strtod_l+0xee>
 8016ce8:	e8df f003 	tbb	[pc, r3]
 8016cec:	201d0314 	.word	0x201d0314
 8016cf0:	14          	.byte	0x14
 8016cf1:	00          	.byte	0x00
 8016cf2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016cf6:	05e3      	lsls	r3, r4, #23
 8016cf8:	bf48      	it	mi
 8016cfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d02:	0d1b      	lsrs	r3, r3, #20
 8016d04:	051b      	lsls	r3, r3, #20
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d1b9      	bne.n	8016c7e <_strtod_l+0x76>
 8016d0a:	f7fe fb73 	bl	80153f4 <__errno>
 8016d0e:	2322      	movs	r3, #34	@ 0x22
 8016d10:	6003      	str	r3, [r0, #0]
 8016d12:	e7b4      	b.n	8016c7e <_strtod_l+0x76>
 8016d14:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016d18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016d1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016d20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d24:	e7e7      	b.n	8016cf6 <_strtod_l+0xee>
 8016d26:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016ea8 <_strtod_l+0x2a0>
 8016d2a:	e7e4      	b.n	8016cf6 <_strtod_l+0xee>
 8016d2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016d30:	f04f 3aff 	mov.w	sl, #4294967295
 8016d34:	e7df      	b.n	8016cf6 <_strtod_l+0xee>
 8016d36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d38:	1c5a      	adds	r2, r3, #1
 8016d3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d3c:	785b      	ldrb	r3, [r3, #1]
 8016d3e:	2b30      	cmp	r3, #48	@ 0x30
 8016d40:	d0f9      	beq.n	8016d36 <_strtod_l+0x12e>
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d09b      	beq.n	8016c7e <_strtod_l+0x76>
 8016d46:	2301      	movs	r3, #1
 8016d48:	9307      	str	r3, [sp, #28]
 8016d4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016d4e:	2300      	movs	r3, #0
 8016d50:	9306      	str	r3, [sp, #24]
 8016d52:	4699      	mov	r9, r3
 8016d54:	461d      	mov	r5, r3
 8016d56:	220a      	movs	r2, #10
 8016d58:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016d5a:	7804      	ldrb	r4, [r0, #0]
 8016d5c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016d60:	b2d9      	uxtb	r1, r3
 8016d62:	2909      	cmp	r1, #9
 8016d64:	d92a      	bls.n	8016dbc <_strtod_l+0x1b4>
 8016d66:	494f      	ldr	r1, [pc, #316]	@ (8016ea4 <_strtod_l+0x29c>)
 8016d68:	2201      	movs	r2, #1
 8016d6a:	f7fe fae7 	bl	801533c <strncmp>
 8016d6e:	b398      	cbz	r0, 8016dd8 <_strtod_l+0x1d0>
 8016d70:	2000      	movs	r0, #0
 8016d72:	4622      	mov	r2, r4
 8016d74:	462b      	mov	r3, r5
 8016d76:	4607      	mov	r7, r0
 8016d78:	4601      	mov	r1, r0
 8016d7a:	2a65      	cmp	r2, #101	@ 0x65
 8016d7c:	d001      	beq.n	8016d82 <_strtod_l+0x17a>
 8016d7e:	2a45      	cmp	r2, #69	@ 0x45
 8016d80:	d118      	bne.n	8016db4 <_strtod_l+0x1ac>
 8016d82:	b91b      	cbnz	r3, 8016d8c <_strtod_l+0x184>
 8016d84:	9b07      	ldr	r3, [sp, #28]
 8016d86:	4303      	orrs	r3, r0
 8016d88:	d095      	beq.n	8016cb6 <_strtod_l+0xae>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016d90:	f108 0201 	add.w	r2, r8, #1
 8016d94:	9211      	str	r2, [sp, #68]	@ 0x44
 8016d96:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016d9a:	2a2b      	cmp	r2, #43	@ 0x2b
 8016d9c:	d074      	beq.n	8016e88 <_strtod_l+0x280>
 8016d9e:	2a2d      	cmp	r2, #45	@ 0x2d
 8016da0:	d07a      	beq.n	8016e98 <_strtod_l+0x290>
 8016da2:	f04f 0e00 	mov.w	lr, #0
 8016da6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016daa:	2c09      	cmp	r4, #9
 8016dac:	f240 8082 	bls.w	8016eb4 <_strtod_l+0x2ac>
 8016db0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016db4:	2400      	movs	r4, #0
 8016db6:	e09d      	b.n	8016ef4 <_strtod_l+0x2ec>
 8016db8:	2300      	movs	r3, #0
 8016dba:	e7c5      	b.n	8016d48 <_strtod_l+0x140>
 8016dbc:	2d08      	cmp	r5, #8
 8016dbe:	bfc8      	it	gt
 8016dc0:	9906      	ldrgt	r1, [sp, #24]
 8016dc2:	f100 0001 	add.w	r0, r0, #1
 8016dc6:	bfca      	itet	gt
 8016dc8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016dcc:	fb02 3909 	mlale	r9, r2, r9, r3
 8016dd0:	9306      	strgt	r3, [sp, #24]
 8016dd2:	3501      	adds	r5, #1
 8016dd4:	9011      	str	r0, [sp, #68]	@ 0x44
 8016dd6:	e7bf      	b.n	8016d58 <_strtod_l+0x150>
 8016dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016dda:	1c5a      	adds	r2, r3, #1
 8016ddc:	9211      	str	r2, [sp, #68]	@ 0x44
 8016dde:	785a      	ldrb	r2, [r3, #1]
 8016de0:	b3bd      	cbz	r5, 8016e52 <_strtod_l+0x24a>
 8016de2:	4607      	mov	r7, r0
 8016de4:	462b      	mov	r3, r5
 8016de6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016dea:	2909      	cmp	r1, #9
 8016dec:	d912      	bls.n	8016e14 <_strtod_l+0x20c>
 8016dee:	2101      	movs	r1, #1
 8016df0:	e7c3      	b.n	8016d7a <_strtod_l+0x172>
 8016df2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016df4:	1c5a      	adds	r2, r3, #1
 8016df6:	9211      	str	r2, [sp, #68]	@ 0x44
 8016df8:	785a      	ldrb	r2, [r3, #1]
 8016dfa:	3001      	adds	r0, #1
 8016dfc:	2a30      	cmp	r2, #48	@ 0x30
 8016dfe:	d0f8      	beq.n	8016df2 <_strtod_l+0x1ea>
 8016e00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016e04:	2b08      	cmp	r3, #8
 8016e06:	f200 847a 	bhi.w	80176fe <_strtod_l+0xaf6>
 8016e0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e0e:	4607      	mov	r7, r0
 8016e10:	2000      	movs	r0, #0
 8016e12:	4603      	mov	r3, r0
 8016e14:	3a30      	subs	r2, #48	@ 0x30
 8016e16:	f100 0101 	add.w	r1, r0, #1
 8016e1a:	d014      	beq.n	8016e46 <_strtod_l+0x23e>
 8016e1c:	440f      	add	r7, r1
 8016e1e:	469c      	mov	ip, r3
 8016e20:	f04f 0e0a 	mov.w	lr, #10
 8016e24:	f10c 0401 	add.w	r4, ip, #1
 8016e28:	1ae6      	subs	r6, r4, r3
 8016e2a:	42b1      	cmp	r1, r6
 8016e2c:	dc13      	bgt.n	8016e56 <_strtod_l+0x24e>
 8016e2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016e32:	1819      	adds	r1, r3, r0
 8016e34:	2908      	cmp	r1, #8
 8016e36:	f103 0301 	add.w	r3, r3, #1
 8016e3a:	4403      	add	r3, r0
 8016e3c:	dc19      	bgt.n	8016e72 <_strtod_l+0x26a>
 8016e3e:	210a      	movs	r1, #10
 8016e40:	fb01 2909 	mla	r9, r1, r9, r2
 8016e44:	2100      	movs	r1, #0
 8016e46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016e48:	1c50      	adds	r0, r2, #1
 8016e4a:	9011      	str	r0, [sp, #68]	@ 0x44
 8016e4c:	7852      	ldrb	r2, [r2, #1]
 8016e4e:	4608      	mov	r0, r1
 8016e50:	e7c9      	b.n	8016de6 <_strtod_l+0x1de>
 8016e52:	4628      	mov	r0, r5
 8016e54:	e7d2      	b.n	8016dfc <_strtod_l+0x1f4>
 8016e56:	f1bc 0f08 	cmp.w	ip, #8
 8016e5a:	dc03      	bgt.n	8016e64 <_strtod_l+0x25c>
 8016e5c:	fb0e f909 	mul.w	r9, lr, r9
 8016e60:	46a4      	mov	ip, r4
 8016e62:	e7df      	b.n	8016e24 <_strtod_l+0x21c>
 8016e64:	2c10      	cmp	r4, #16
 8016e66:	bfde      	ittt	le
 8016e68:	9e06      	ldrle	r6, [sp, #24]
 8016e6a:	fb0e f606 	mulle.w	r6, lr, r6
 8016e6e:	9606      	strle	r6, [sp, #24]
 8016e70:	e7f6      	b.n	8016e60 <_strtod_l+0x258>
 8016e72:	290f      	cmp	r1, #15
 8016e74:	bfdf      	itttt	le
 8016e76:	9806      	ldrle	r0, [sp, #24]
 8016e78:	210a      	movle	r1, #10
 8016e7a:	fb01 2200 	mlale	r2, r1, r0, r2
 8016e7e:	9206      	strle	r2, [sp, #24]
 8016e80:	e7e0      	b.n	8016e44 <_strtod_l+0x23c>
 8016e82:	2700      	movs	r7, #0
 8016e84:	2101      	movs	r1, #1
 8016e86:	e77d      	b.n	8016d84 <_strtod_l+0x17c>
 8016e88:	f04f 0e00 	mov.w	lr, #0
 8016e8c:	f108 0202 	add.w	r2, r8, #2
 8016e90:	9211      	str	r2, [sp, #68]	@ 0x44
 8016e92:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016e96:	e786      	b.n	8016da6 <_strtod_l+0x19e>
 8016e98:	f04f 0e01 	mov.w	lr, #1
 8016e9c:	e7f6      	b.n	8016e8c <_strtod_l+0x284>
 8016e9e:	bf00      	nop
 8016ea0:	0801c38c 	.word	0x0801c38c
 8016ea4:	0801c0fd 	.word	0x0801c0fd
 8016ea8:	7ff00000 	.word	0x7ff00000
 8016eac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016eae:	1c54      	adds	r4, r2, #1
 8016eb0:	9411      	str	r4, [sp, #68]	@ 0x44
 8016eb2:	7852      	ldrb	r2, [r2, #1]
 8016eb4:	2a30      	cmp	r2, #48	@ 0x30
 8016eb6:	d0f9      	beq.n	8016eac <_strtod_l+0x2a4>
 8016eb8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016ebc:	2c08      	cmp	r4, #8
 8016ebe:	f63f af79 	bhi.w	8016db4 <_strtod_l+0x1ac>
 8016ec2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016ec6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ec8:	9209      	str	r2, [sp, #36]	@ 0x24
 8016eca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ecc:	1c54      	adds	r4, r2, #1
 8016ece:	9411      	str	r4, [sp, #68]	@ 0x44
 8016ed0:	7852      	ldrb	r2, [r2, #1]
 8016ed2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8016ed6:	2e09      	cmp	r6, #9
 8016ed8:	d937      	bls.n	8016f4a <_strtod_l+0x342>
 8016eda:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8016edc:	1ba4      	subs	r4, r4, r6
 8016ede:	2c08      	cmp	r4, #8
 8016ee0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016ee4:	dc02      	bgt.n	8016eec <_strtod_l+0x2e4>
 8016ee6:	4564      	cmp	r4, ip
 8016ee8:	bfa8      	it	ge
 8016eea:	4664      	movge	r4, ip
 8016eec:	f1be 0f00 	cmp.w	lr, #0
 8016ef0:	d000      	beq.n	8016ef4 <_strtod_l+0x2ec>
 8016ef2:	4264      	negs	r4, r4
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d14d      	bne.n	8016f94 <_strtod_l+0x38c>
 8016ef8:	9b07      	ldr	r3, [sp, #28]
 8016efa:	4318      	orrs	r0, r3
 8016efc:	f47f aebf 	bne.w	8016c7e <_strtod_l+0x76>
 8016f00:	2900      	cmp	r1, #0
 8016f02:	f47f aed8 	bne.w	8016cb6 <_strtod_l+0xae>
 8016f06:	2a69      	cmp	r2, #105	@ 0x69
 8016f08:	d027      	beq.n	8016f5a <_strtod_l+0x352>
 8016f0a:	dc24      	bgt.n	8016f56 <_strtod_l+0x34e>
 8016f0c:	2a49      	cmp	r2, #73	@ 0x49
 8016f0e:	d024      	beq.n	8016f5a <_strtod_l+0x352>
 8016f10:	2a4e      	cmp	r2, #78	@ 0x4e
 8016f12:	f47f aed0 	bne.w	8016cb6 <_strtod_l+0xae>
 8016f16:	4997      	ldr	r1, [pc, #604]	@ (8017174 <_strtod_l+0x56c>)
 8016f18:	a811      	add	r0, sp, #68	@ 0x44
 8016f1a:	f001 faad 	bl	8018478 <__match>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	f43f aec9 	beq.w	8016cb6 <_strtod_l+0xae>
 8016f24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f26:	781b      	ldrb	r3, [r3, #0]
 8016f28:	2b28      	cmp	r3, #40	@ 0x28
 8016f2a:	d12d      	bne.n	8016f88 <_strtod_l+0x380>
 8016f2c:	4992      	ldr	r1, [pc, #584]	@ (8017178 <_strtod_l+0x570>)
 8016f2e:	aa14      	add	r2, sp, #80	@ 0x50
 8016f30:	a811      	add	r0, sp, #68	@ 0x44
 8016f32:	f001 fab5 	bl	80184a0 <__hexnan>
 8016f36:	2805      	cmp	r0, #5
 8016f38:	d126      	bne.n	8016f88 <_strtod_l+0x380>
 8016f3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f3c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016f40:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016f44:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016f48:	e699      	b.n	8016c7e <_strtod_l+0x76>
 8016f4a:	240a      	movs	r4, #10
 8016f4c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016f50:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016f54:	e7b9      	b.n	8016eca <_strtod_l+0x2c2>
 8016f56:	2a6e      	cmp	r2, #110	@ 0x6e
 8016f58:	e7db      	b.n	8016f12 <_strtod_l+0x30a>
 8016f5a:	4988      	ldr	r1, [pc, #544]	@ (801717c <_strtod_l+0x574>)
 8016f5c:	a811      	add	r0, sp, #68	@ 0x44
 8016f5e:	f001 fa8b 	bl	8018478 <__match>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	f43f aea7 	beq.w	8016cb6 <_strtod_l+0xae>
 8016f68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f6a:	4985      	ldr	r1, [pc, #532]	@ (8017180 <_strtod_l+0x578>)
 8016f6c:	3b01      	subs	r3, #1
 8016f6e:	a811      	add	r0, sp, #68	@ 0x44
 8016f70:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f72:	f001 fa81 	bl	8018478 <__match>
 8016f76:	b910      	cbnz	r0, 8016f7e <_strtod_l+0x376>
 8016f78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f7a:	3301      	adds	r3, #1
 8016f7c:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f7e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8017194 <_strtod_l+0x58c>
 8016f82:	f04f 0a00 	mov.w	sl, #0
 8016f86:	e67a      	b.n	8016c7e <_strtod_l+0x76>
 8016f88:	487e      	ldr	r0, [pc, #504]	@ (8017184 <_strtod_l+0x57c>)
 8016f8a:	f000 ffc9 	bl	8017f20 <nan>
 8016f8e:	ec5b ab10 	vmov	sl, fp, d0
 8016f92:	e674      	b.n	8016c7e <_strtod_l+0x76>
 8016f94:	ee07 9a90 	vmov	s15, r9
 8016f98:	1be2      	subs	r2, r4, r7
 8016f9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f9e:	2d00      	cmp	r5, #0
 8016fa0:	bf08      	it	eq
 8016fa2:	461d      	moveq	r5, r3
 8016fa4:	2b10      	cmp	r3, #16
 8016fa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016fa8:	461a      	mov	r2, r3
 8016faa:	bfa8      	it	ge
 8016fac:	2210      	movge	r2, #16
 8016fae:	2b09      	cmp	r3, #9
 8016fb0:	ec5b ab17 	vmov	sl, fp, d7
 8016fb4:	dc15      	bgt.n	8016fe2 <_strtod_l+0x3da>
 8016fb6:	1be1      	subs	r1, r4, r7
 8016fb8:	2900      	cmp	r1, #0
 8016fba:	f43f ae60 	beq.w	8016c7e <_strtod_l+0x76>
 8016fbe:	eba4 0107 	sub.w	r1, r4, r7
 8016fc2:	dd72      	ble.n	80170aa <_strtod_l+0x4a2>
 8016fc4:	2916      	cmp	r1, #22
 8016fc6:	dc59      	bgt.n	801707c <_strtod_l+0x474>
 8016fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8017188 <_strtod_l+0x580>)
 8016fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fd0:	ed93 7b00 	vldr	d7, [r3]
 8016fd4:	ec4b ab16 	vmov	d6, sl, fp
 8016fd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016fdc:	ec5b ab17 	vmov	sl, fp, d7
 8016fe0:	e64d      	b.n	8016c7e <_strtod_l+0x76>
 8016fe2:	4969      	ldr	r1, [pc, #420]	@ (8017188 <_strtod_l+0x580>)
 8016fe4:	eddd 6a06 	vldr	s13, [sp, #24]
 8016fe8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016fec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016ff0:	2b0f      	cmp	r3, #15
 8016ff2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016ff6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016ffa:	ec5b ab16 	vmov	sl, fp, d6
 8016ffe:	ddda      	ble.n	8016fb6 <_strtod_l+0x3ae>
 8017000:	1a9a      	subs	r2, r3, r2
 8017002:	1be1      	subs	r1, r4, r7
 8017004:	440a      	add	r2, r1
 8017006:	2a00      	cmp	r2, #0
 8017008:	f340 8094 	ble.w	8017134 <_strtod_l+0x52c>
 801700c:	f012 000f 	ands.w	r0, r2, #15
 8017010:	d00a      	beq.n	8017028 <_strtod_l+0x420>
 8017012:	495d      	ldr	r1, [pc, #372]	@ (8017188 <_strtod_l+0x580>)
 8017014:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017018:	ed91 7b00 	vldr	d7, [r1]
 801701c:	ec4b ab16 	vmov	d6, sl, fp
 8017020:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017024:	ec5b ab17 	vmov	sl, fp, d7
 8017028:	f032 020f 	bics.w	r2, r2, #15
 801702c:	d073      	beq.n	8017116 <_strtod_l+0x50e>
 801702e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8017032:	dd47      	ble.n	80170c4 <_strtod_l+0x4bc>
 8017034:	2400      	movs	r4, #0
 8017036:	4625      	mov	r5, r4
 8017038:	9407      	str	r4, [sp, #28]
 801703a:	4626      	mov	r6, r4
 801703c:	9a05      	ldr	r2, [sp, #20]
 801703e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8017194 <_strtod_l+0x58c>
 8017042:	2322      	movs	r3, #34	@ 0x22
 8017044:	6013      	str	r3, [r2, #0]
 8017046:	f04f 0a00 	mov.w	sl, #0
 801704a:	9b07      	ldr	r3, [sp, #28]
 801704c:	2b00      	cmp	r3, #0
 801704e:	f43f ae16 	beq.w	8016c7e <_strtod_l+0x76>
 8017052:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017054:	9805      	ldr	r0, [sp, #20]
 8017056:	f7ff f955 	bl	8016304 <_Bfree>
 801705a:	9805      	ldr	r0, [sp, #20]
 801705c:	4631      	mov	r1, r6
 801705e:	f7ff f951 	bl	8016304 <_Bfree>
 8017062:	9805      	ldr	r0, [sp, #20]
 8017064:	4629      	mov	r1, r5
 8017066:	f7ff f94d 	bl	8016304 <_Bfree>
 801706a:	9907      	ldr	r1, [sp, #28]
 801706c:	9805      	ldr	r0, [sp, #20]
 801706e:	f7ff f949 	bl	8016304 <_Bfree>
 8017072:	9805      	ldr	r0, [sp, #20]
 8017074:	4621      	mov	r1, r4
 8017076:	f7ff f945 	bl	8016304 <_Bfree>
 801707a:	e600      	b.n	8016c7e <_strtod_l+0x76>
 801707c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8017080:	1be0      	subs	r0, r4, r7
 8017082:	4281      	cmp	r1, r0
 8017084:	dbbc      	blt.n	8017000 <_strtod_l+0x3f8>
 8017086:	4a40      	ldr	r2, [pc, #256]	@ (8017188 <_strtod_l+0x580>)
 8017088:	f1c3 030f 	rsb	r3, r3, #15
 801708c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017090:	ed91 7b00 	vldr	d7, [r1]
 8017094:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017096:	ec4b ab16 	vmov	d6, sl, fp
 801709a:	1acb      	subs	r3, r1, r3
 801709c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80170a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80170a4:	ed92 6b00 	vldr	d6, [r2]
 80170a8:	e796      	b.n	8016fd8 <_strtod_l+0x3d0>
 80170aa:	3116      	adds	r1, #22
 80170ac:	dba8      	blt.n	8017000 <_strtod_l+0x3f8>
 80170ae:	4b36      	ldr	r3, [pc, #216]	@ (8017188 <_strtod_l+0x580>)
 80170b0:	1b3c      	subs	r4, r7, r4
 80170b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80170b6:	ed94 7b00 	vldr	d7, [r4]
 80170ba:	ec4b ab16 	vmov	d6, sl, fp
 80170be:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80170c2:	e78b      	b.n	8016fdc <_strtod_l+0x3d4>
 80170c4:	2000      	movs	r0, #0
 80170c6:	ec4b ab17 	vmov	d7, sl, fp
 80170ca:	4e30      	ldr	r6, [pc, #192]	@ (801718c <_strtod_l+0x584>)
 80170cc:	1112      	asrs	r2, r2, #4
 80170ce:	4601      	mov	r1, r0
 80170d0:	2a01      	cmp	r2, #1
 80170d2:	dc23      	bgt.n	801711c <_strtod_l+0x514>
 80170d4:	b108      	cbz	r0, 80170da <_strtod_l+0x4d2>
 80170d6:	ec5b ab17 	vmov	sl, fp, d7
 80170da:	4a2c      	ldr	r2, [pc, #176]	@ (801718c <_strtod_l+0x584>)
 80170dc:	482c      	ldr	r0, [pc, #176]	@ (8017190 <_strtod_l+0x588>)
 80170de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80170e2:	ed92 7b00 	vldr	d7, [r2]
 80170e6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80170ea:	ec4b ab16 	vmov	d6, sl, fp
 80170ee:	4a29      	ldr	r2, [pc, #164]	@ (8017194 <_strtod_l+0x58c>)
 80170f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80170f4:	ee17 1a90 	vmov	r1, s15
 80170f8:	400a      	ands	r2, r1
 80170fa:	4282      	cmp	r2, r0
 80170fc:	ec5b ab17 	vmov	sl, fp, d7
 8017100:	d898      	bhi.n	8017034 <_strtod_l+0x42c>
 8017102:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8017106:	4282      	cmp	r2, r0
 8017108:	bf86      	itte	hi
 801710a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8017198 <_strtod_l+0x590>
 801710e:	f04f 3aff 	movhi.w	sl, #4294967295
 8017112:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8017116:	2200      	movs	r2, #0
 8017118:	9206      	str	r2, [sp, #24]
 801711a:	e076      	b.n	801720a <_strtod_l+0x602>
 801711c:	f012 0f01 	tst.w	r2, #1
 8017120:	d004      	beq.n	801712c <_strtod_l+0x524>
 8017122:	ed96 6b00 	vldr	d6, [r6]
 8017126:	2001      	movs	r0, #1
 8017128:	ee27 7b06 	vmul.f64	d7, d7, d6
 801712c:	3101      	adds	r1, #1
 801712e:	1052      	asrs	r2, r2, #1
 8017130:	3608      	adds	r6, #8
 8017132:	e7cd      	b.n	80170d0 <_strtod_l+0x4c8>
 8017134:	d0ef      	beq.n	8017116 <_strtod_l+0x50e>
 8017136:	4252      	negs	r2, r2
 8017138:	f012 000f 	ands.w	r0, r2, #15
 801713c:	d00a      	beq.n	8017154 <_strtod_l+0x54c>
 801713e:	4912      	ldr	r1, [pc, #72]	@ (8017188 <_strtod_l+0x580>)
 8017140:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017144:	ed91 7b00 	vldr	d7, [r1]
 8017148:	ec4b ab16 	vmov	d6, sl, fp
 801714c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017150:	ec5b ab17 	vmov	sl, fp, d7
 8017154:	1112      	asrs	r2, r2, #4
 8017156:	d0de      	beq.n	8017116 <_strtod_l+0x50e>
 8017158:	2a1f      	cmp	r2, #31
 801715a:	dd1f      	ble.n	801719c <_strtod_l+0x594>
 801715c:	2400      	movs	r4, #0
 801715e:	4625      	mov	r5, r4
 8017160:	9407      	str	r4, [sp, #28]
 8017162:	4626      	mov	r6, r4
 8017164:	9a05      	ldr	r2, [sp, #20]
 8017166:	2322      	movs	r3, #34	@ 0x22
 8017168:	f04f 0a00 	mov.w	sl, #0
 801716c:	f04f 0b00 	mov.w	fp, #0
 8017170:	6013      	str	r3, [r2, #0]
 8017172:	e76a      	b.n	801704a <_strtod_l+0x442>
 8017174:	0801bfc6 	.word	0x0801bfc6
 8017178:	0801c378 	.word	0x0801c378
 801717c:	0801bfbe 	.word	0x0801bfbe
 8017180:	0801c031 	.word	0x0801c031
 8017184:	0801c02d 	.word	0x0801c02d
 8017188:	0801c2b0 	.word	0x0801c2b0
 801718c:	0801c288 	.word	0x0801c288
 8017190:	7ca00000 	.word	0x7ca00000
 8017194:	7ff00000 	.word	0x7ff00000
 8017198:	7fefffff 	.word	0x7fefffff
 801719c:	f012 0110 	ands.w	r1, r2, #16
 80171a0:	bf18      	it	ne
 80171a2:	216a      	movne	r1, #106	@ 0x6a
 80171a4:	9106      	str	r1, [sp, #24]
 80171a6:	ec4b ab17 	vmov	d7, sl, fp
 80171aa:	49af      	ldr	r1, [pc, #700]	@ (8017468 <_strtod_l+0x860>)
 80171ac:	2000      	movs	r0, #0
 80171ae:	07d6      	lsls	r6, r2, #31
 80171b0:	d504      	bpl.n	80171bc <_strtod_l+0x5b4>
 80171b2:	ed91 6b00 	vldr	d6, [r1]
 80171b6:	2001      	movs	r0, #1
 80171b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80171bc:	1052      	asrs	r2, r2, #1
 80171be:	f101 0108 	add.w	r1, r1, #8
 80171c2:	d1f4      	bne.n	80171ae <_strtod_l+0x5a6>
 80171c4:	b108      	cbz	r0, 80171ca <_strtod_l+0x5c2>
 80171c6:	ec5b ab17 	vmov	sl, fp, d7
 80171ca:	9a06      	ldr	r2, [sp, #24]
 80171cc:	b1b2      	cbz	r2, 80171fc <_strtod_l+0x5f4>
 80171ce:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80171d2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80171d6:	2a00      	cmp	r2, #0
 80171d8:	4658      	mov	r0, fp
 80171da:	dd0f      	ble.n	80171fc <_strtod_l+0x5f4>
 80171dc:	2a1f      	cmp	r2, #31
 80171de:	dd55      	ble.n	801728c <_strtod_l+0x684>
 80171e0:	2a34      	cmp	r2, #52	@ 0x34
 80171e2:	bfde      	ittt	le
 80171e4:	f04f 32ff 	movle.w	r2, #4294967295
 80171e8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80171ec:	408a      	lslle	r2, r1
 80171ee:	f04f 0a00 	mov.w	sl, #0
 80171f2:	bfcc      	ite	gt
 80171f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80171f8:	ea02 0b00 	andle.w	fp, r2, r0
 80171fc:	ec4b ab17 	vmov	d7, sl, fp
 8017200:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017208:	d0a8      	beq.n	801715c <_strtod_l+0x554>
 801720a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801720c:	9805      	ldr	r0, [sp, #20]
 801720e:	f8cd 9000 	str.w	r9, [sp]
 8017212:	462a      	mov	r2, r5
 8017214:	f7ff f8de 	bl	80163d4 <__s2b>
 8017218:	9007      	str	r0, [sp, #28]
 801721a:	2800      	cmp	r0, #0
 801721c:	f43f af0a 	beq.w	8017034 <_strtod_l+0x42c>
 8017220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017222:	1b3f      	subs	r7, r7, r4
 8017224:	2b00      	cmp	r3, #0
 8017226:	bfb4      	ite	lt
 8017228:	463b      	movlt	r3, r7
 801722a:	2300      	movge	r3, #0
 801722c:	930a      	str	r3, [sp, #40]	@ 0x28
 801722e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017230:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8017458 <_strtod_l+0x850>
 8017234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017238:	2400      	movs	r4, #0
 801723a:	930d      	str	r3, [sp, #52]	@ 0x34
 801723c:	4625      	mov	r5, r4
 801723e:	9b07      	ldr	r3, [sp, #28]
 8017240:	9805      	ldr	r0, [sp, #20]
 8017242:	6859      	ldr	r1, [r3, #4]
 8017244:	f7ff f81e 	bl	8016284 <_Balloc>
 8017248:	4606      	mov	r6, r0
 801724a:	2800      	cmp	r0, #0
 801724c:	f43f aef6 	beq.w	801703c <_strtod_l+0x434>
 8017250:	9b07      	ldr	r3, [sp, #28]
 8017252:	691a      	ldr	r2, [r3, #16]
 8017254:	ec4b ab19 	vmov	d9, sl, fp
 8017258:	3202      	adds	r2, #2
 801725a:	f103 010c 	add.w	r1, r3, #12
 801725e:	0092      	lsls	r2, r2, #2
 8017260:	300c      	adds	r0, #12
 8017262:	f7fe f8f4 	bl	801544e <memcpy>
 8017266:	eeb0 0b49 	vmov.f64	d0, d9
 801726a:	9805      	ldr	r0, [sp, #20]
 801726c:	aa14      	add	r2, sp, #80	@ 0x50
 801726e:	a913      	add	r1, sp, #76	@ 0x4c
 8017270:	f7ff fbe4 	bl	8016a3c <__d2b>
 8017274:	9012      	str	r0, [sp, #72]	@ 0x48
 8017276:	2800      	cmp	r0, #0
 8017278:	f43f aee0 	beq.w	801703c <_strtod_l+0x434>
 801727c:	9805      	ldr	r0, [sp, #20]
 801727e:	2101      	movs	r1, #1
 8017280:	f7ff f93e 	bl	8016500 <__i2b>
 8017284:	4605      	mov	r5, r0
 8017286:	b940      	cbnz	r0, 801729a <_strtod_l+0x692>
 8017288:	2500      	movs	r5, #0
 801728a:	e6d7      	b.n	801703c <_strtod_l+0x434>
 801728c:	f04f 31ff 	mov.w	r1, #4294967295
 8017290:	fa01 f202 	lsl.w	r2, r1, r2
 8017294:	ea02 0a0a 	and.w	sl, r2, sl
 8017298:	e7b0      	b.n	80171fc <_strtod_l+0x5f4>
 801729a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801729c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801729e:	2f00      	cmp	r7, #0
 80172a0:	bfab      	itete	ge
 80172a2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80172a4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80172a6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80172aa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80172ae:	bfac      	ite	ge
 80172b0:	eb07 0903 	addge.w	r9, r7, r3
 80172b4:	eba3 0807 	sublt.w	r8, r3, r7
 80172b8:	9b06      	ldr	r3, [sp, #24]
 80172ba:	1aff      	subs	r7, r7, r3
 80172bc:	4417      	add	r7, r2
 80172be:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80172c2:	4a6a      	ldr	r2, [pc, #424]	@ (801746c <_strtod_l+0x864>)
 80172c4:	3f01      	subs	r7, #1
 80172c6:	4297      	cmp	r7, r2
 80172c8:	da51      	bge.n	801736e <_strtod_l+0x766>
 80172ca:	1bd1      	subs	r1, r2, r7
 80172cc:	291f      	cmp	r1, #31
 80172ce:	eba3 0301 	sub.w	r3, r3, r1
 80172d2:	f04f 0201 	mov.w	r2, #1
 80172d6:	dc3e      	bgt.n	8017356 <_strtod_l+0x74e>
 80172d8:	408a      	lsls	r2, r1
 80172da:	920c      	str	r2, [sp, #48]	@ 0x30
 80172dc:	2200      	movs	r2, #0
 80172de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80172e0:	eb09 0703 	add.w	r7, r9, r3
 80172e4:	4498      	add	r8, r3
 80172e6:	9b06      	ldr	r3, [sp, #24]
 80172e8:	45b9      	cmp	r9, r7
 80172ea:	4498      	add	r8, r3
 80172ec:	464b      	mov	r3, r9
 80172ee:	bfa8      	it	ge
 80172f0:	463b      	movge	r3, r7
 80172f2:	4543      	cmp	r3, r8
 80172f4:	bfa8      	it	ge
 80172f6:	4643      	movge	r3, r8
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	bfc2      	ittt	gt
 80172fc:	1aff      	subgt	r7, r7, r3
 80172fe:	eba8 0803 	subgt.w	r8, r8, r3
 8017302:	eba9 0903 	subgt.w	r9, r9, r3
 8017306:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017308:	2b00      	cmp	r3, #0
 801730a:	dd16      	ble.n	801733a <_strtod_l+0x732>
 801730c:	4629      	mov	r1, r5
 801730e:	9805      	ldr	r0, [sp, #20]
 8017310:	461a      	mov	r2, r3
 8017312:	f7ff f9ad 	bl	8016670 <__pow5mult>
 8017316:	4605      	mov	r5, r0
 8017318:	2800      	cmp	r0, #0
 801731a:	d0b5      	beq.n	8017288 <_strtod_l+0x680>
 801731c:	4601      	mov	r1, r0
 801731e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017320:	9805      	ldr	r0, [sp, #20]
 8017322:	f7ff f903 	bl	801652c <__multiply>
 8017326:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017328:	2800      	cmp	r0, #0
 801732a:	f43f ae87 	beq.w	801703c <_strtod_l+0x434>
 801732e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017330:	9805      	ldr	r0, [sp, #20]
 8017332:	f7fe ffe7 	bl	8016304 <_Bfree>
 8017336:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017338:	9312      	str	r3, [sp, #72]	@ 0x48
 801733a:	2f00      	cmp	r7, #0
 801733c:	dc1b      	bgt.n	8017376 <_strtod_l+0x76e>
 801733e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017340:	2b00      	cmp	r3, #0
 8017342:	dd21      	ble.n	8017388 <_strtod_l+0x780>
 8017344:	4631      	mov	r1, r6
 8017346:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017348:	9805      	ldr	r0, [sp, #20]
 801734a:	f7ff f991 	bl	8016670 <__pow5mult>
 801734e:	4606      	mov	r6, r0
 8017350:	b9d0      	cbnz	r0, 8017388 <_strtod_l+0x780>
 8017352:	2600      	movs	r6, #0
 8017354:	e672      	b.n	801703c <_strtod_l+0x434>
 8017356:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801735a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801735e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017362:	37e2      	adds	r7, #226	@ 0xe2
 8017364:	fa02 f107 	lsl.w	r1, r2, r7
 8017368:	910b      	str	r1, [sp, #44]	@ 0x2c
 801736a:	920c      	str	r2, [sp, #48]	@ 0x30
 801736c:	e7b8      	b.n	80172e0 <_strtod_l+0x6d8>
 801736e:	2200      	movs	r2, #0
 8017370:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017372:	2201      	movs	r2, #1
 8017374:	e7f9      	b.n	801736a <_strtod_l+0x762>
 8017376:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017378:	9805      	ldr	r0, [sp, #20]
 801737a:	463a      	mov	r2, r7
 801737c:	f7ff f9d2 	bl	8016724 <__lshift>
 8017380:	9012      	str	r0, [sp, #72]	@ 0x48
 8017382:	2800      	cmp	r0, #0
 8017384:	d1db      	bne.n	801733e <_strtod_l+0x736>
 8017386:	e659      	b.n	801703c <_strtod_l+0x434>
 8017388:	f1b8 0f00 	cmp.w	r8, #0
 801738c:	dd07      	ble.n	801739e <_strtod_l+0x796>
 801738e:	4631      	mov	r1, r6
 8017390:	9805      	ldr	r0, [sp, #20]
 8017392:	4642      	mov	r2, r8
 8017394:	f7ff f9c6 	bl	8016724 <__lshift>
 8017398:	4606      	mov	r6, r0
 801739a:	2800      	cmp	r0, #0
 801739c:	d0d9      	beq.n	8017352 <_strtod_l+0x74a>
 801739e:	f1b9 0f00 	cmp.w	r9, #0
 80173a2:	dd08      	ble.n	80173b6 <_strtod_l+0x7ae>
 80173a4:	4629      	mov	r1, r5
 80173a6:	9805      	ldr	r0, [sp, #20]
 80173a8:	464a      	mov	r2, r9
 80173aa:	f7ff f9bb 	bl	8016724 <__lshift>
 80173ae:	4605      	mov	r5, r0
 80173b0:	2800      	cmp	r0, #0
 80173b2:	f43f ae43 	beq.w	801703c <_strtod_l+0x434>
 80173b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80173b8:	9805      	ldr	r0, [sp, #20]
 80173ba:	4632      	mov	r2, r6
 80173bc:	f7ff fa3a 	bl	8016834 <__mdiff>
 80173c0:	4604      	mov	r4, r0
 80173c2:	2800      	cmp	r0, #0
 80173c4:	f43f ae3a 	beq.w	801703c <_strtod_l+0x434>
 80173c8:	2300      	movs	r3, #0
 80173ca:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80173ce:	60c3      	str	r3, [r0, #12]
 80173d0:	4629      	mov	r1, r5
 80173d2:	f7ff fa13 	bl	80167fc <__mcmp>
 80173d6:	2800      	cmp	r0, #0
 80173d8:	da4c      	bge.n	8017474 <_strtod_l+0x86c>
 80173da:	ea58 080a 	orrs.w	r8, r8, sl
 80173de:	d172      	bne.n	80174c6 <_strtod_l+0x8be>
 80173e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d16e      	bne.n	80174c6 <_strtod_l+0x8be>
 80173e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80173ec:	0d1b      	lsrs	r3, r3, #20
 80173ee:	051b      	lsls	r3, r3, #20
 80173f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80173f4:	d967      	bls.n	80174c6 <_strtod_l+0x8be>
 80173f6:	6963      	ldr	r3, [r4, #20]
 80173f8:	b913      	cbnz	r3, 8017400 <_strtod_l+0x7f8>
 80173fa:	6923      	ldr	r3, [r4, #16]
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	dd62      	ble.n	80174c6 <_strtod_l+0x8be>
 8017400:	4621      	mov	r1, r4
 8017402:	2201      	movs	r2, #1
 8017404:	9805      	ldr	r0, [sp, #20]
 8017406:	f7ff f98d 	bl	8016724 <__lshift>
 801740a:	4629      	mov	r1, r5
 801740c:	4604      	mov	r4, r0
 801740e:	f7ff f9f5 	bl	80167fc <__mcmp>
 8017412:	2800      	cmp	r0, #0
 8017414:	dd57      	ble.n	80174c6 <_strtod_l+0x8be>
 8017416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801741a:	9a06      	ldr	r2, [sp, #24]
 801741c:	0d1b      	lsrs	r3, r3, #20
 801741e:	051b      	lsls	r3, r3, #20
 8017420:	2a00      	cmp	r2, #0
 8017422:	d06e      	beq.n	8017502 <_strtod_l+0x8fa>
 8017424:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017428:	d86b      	bhi.n	8017502 <_strtod_l+0x8fa>
 801742a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801742e:	f67f ae99 	bls.w	8017164 <_strtod_l+0x55c>
 8017432:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8017460 <_strtod_l+0x858>
 8017436:	ec4b ab16 	vmov	d6, sl, fp
 801743a:	4b0d      	ldr	r3, [pc, #52]	@ (8017470 <_strtod_l+0x868>)
 801743c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017440:	ee17 2a90 	vmov	r2, s15
 8017444:	4013      	ands	r3, r2
 8017446:	ec5b ab17 	vmov	sl, fp, d7
 801744a:	2b00      	cmp	r3, #0
 801744c:	f47f ae01 	bne.w	8017052 <_strtod_l+0x44a>
 8017450:	9a05      	ldr	r2, [sp, #20]
 8017452:	2322      	movs	r3, #34	@ 0x22
 8017454:	6013      	str	r3, [r2, #0]
 8017456:	e5fc      	b.n	8017052 <_strtod_l+0x44a>
 8017458:	ffc00000 	.word	0xffc00000
 801745c:	41dfffff 	.word	0x41dfffff
 8017460:	00000000 	.word	0x00000000
 8017464:	39500000 	.word	0x39500000
 8017468:	0801c3a0 	.word	0x0801c3a0
 801746c:	fffffc02 	.word	0xfffffc02
 8017470:	7ff00000 	.word	0x7ff00000
 8017474:	46d9      	mov	r9, fp
 8017476:	d15d      	bne.n	8017534 <_strtod_l+0x92c>
 8017478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801747c:	f1b8 0f00 	cmp.w	r8, #0
 8017480:	d02a      	beq.n	80174d8 <_strtod_l+0x8d0>
 8017482:	4aa9      	ldr	r2, [pc, #676]	@ (8017728 <_strtod_l+0xb20>)
 8017484:	4293      	cmp	r3, r2
 8017486:	d12a      	bne.n	80174de <_strtod_l+0x8d6>
 8017488:	9b06      	ldr	r3, [sp, #24]
 801748a:	4652      	mov	r2, sl
 801748c:	b1fb      	cbz	r3, 80174ce <_strtod_l+0x8c6>
 801748e:	4ba7      	ldr	r3, [pc, #668]	@ (801772c <_strtod_l+0xb24>)
 8017490:	ea0b 0303 	and.w	r3, fp, r3
 8017494:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8017498:	f04f 31ff 	mov.w	r1, #4294967295
 801749c:	d81a      	bhi.n	80174d4 <_strtod_l+0x8cc>
 801749e:	0d1b      	lsrs	r3, r3, #20
 80174a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80174a4:	fa01 f303 	lsl.w	r3, r1, r3
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d118      	bne.n	80174de <_strtod_l+0x8d6>
 80174ac:	4ba0      	ldr	r3, [pc, #640]	@ (8017730 <_strtod_l+0xb28>)
 80174ae:	4599      	cmp	r9, r3
 80174b0:	d102      	bne.n	80174b8 <_strtod_l+0x8b0>
 80174b2:	3201      	adds	r2, #1
 80174b4:	f43f adc2 	beq.w	801703c <_strtod_l+0x434>
 80174b8:	4b9c      	ldr	r3, [pc, #624]	@ (801772c <_strtod_l+0xb24>)
 80174ba:	ea09 0303 	and.w	r3, r9, r3
 80174be:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80174c2:	f04f 0a00 	mov.w	sl, #0
 80174c6:	9b06      	ldr	r3, [sp, #24]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d1b2      	bne.n	8017432 <_strtod_l+0x82a>
 80174cc:	e5c1      	b.n	8017052 <_strtod_l+0x44a>
 80174ce:	f04f 33ff 	mov.w	r3, #4294967295
 80174d2:	e7e9      	b.n	80174a8 <_strtod_l+0x8a0>
 80174d4:	460b      	mov	r3, r1
 80174d6:	e7e7      	b.n	80174a8 <_strtod_l+0x8a0>
 80174d8:	ea53 030a 	orrs.w	r3, r3, sl
 80174dc:	d09b      	beq.n	8017416 <_strtod_l+0x80e>
 80174de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80174e0:	b1c3      	cbz	r3, 8017514 <_strtod_l+0x90c>
 80174e2:	ea13 0f09 	tst.w	r3, r9
 80174e6:	d0ee      	beq.n	80174c6 <_strtod_l+0x8be>
 80174e8:	9a06      	ldr	r2, [sp, #24]
 80174ea:	4650      	mov	r0, sl
 80174ec:	4659      	mov	r1, fp
 80174ee:	f1b8 0f00 	cmp.w	r8, #0
 80174f2:	d013      	beq.n	801751c <_strtod_l+0x914>
 80174f4:	f7ff fb6d 	bl	8016bd2 <sulp>
 80174f8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80174fc:	ec5b ab17 	vmov	sl, fp, d7
 8017500:	e7e1      	b.n	80174c6 <_strtod_l+0x8be>
 8017502:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8017506:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801750a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801750e:	f04f 3aff 	mov.w	sl, #4294967295
 8017512:	e7d8      	b.n	80174c6 <_strtod_l+0x8be>
 8017514:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017516:	ea13 0f0a 	tst.w	r3, sl
 801751a:	e7e4      	b.n	80174e6 <_strtod_l+0x8de>
 801751c:	f7ff fb59 	bl	8016bd2 <sulp>
 8017520:	ee39 0b40 	vsub.f64	d0, d9, d0
 8017524:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752c:	ec5b ab10 	vmov	sl, fp, d0
 8017530:	d1c9      	bne.n	80174c6 <_strtod_l+0x8be>
 8017532:	e617      	b.n	8017164 <_strtod_l+0x55c>
 8017534:	4629      	mov	r1, r5
 8017536:	4620      	mov	r0, r4
 8017538:	f7ff fad8 	bl	8016aec <__ratio>
 801753c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017540:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017548:	d85d      	bhi.n	8017606 <_strtod_l+0x9fe>
 801754a:	f1b8 0f00 	cmp.w	r8, #0
 801754e:	d164      	bne.n	801761a <_strtod_l+0xa12>
 8017550:	f1ba 0f00 	cmp.w	sl, #0
 8017554:	d14b      	bne.n	80175ee <_strtod_l+0x9e6>
 8017556:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801755a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801755e:	2b00      	cmp	r3, #0
 8017560:	d160      	bne.n	8017624 <_strtod_l+0xa1c>
 8017562:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8017566:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756e:	d401      	bmi.n	8017574 <_strtod_l+0x96c>
 8017570:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017574:	eeb1 ab48 	vneg.f64	d10, d8
 8017578:	486c      	ldr	r0, [pc, #432]	@ (801772c <_strtod_l+0xb24>)
 801757a:	496e      	ldr	r1, [pc, #440]	@ (8017734 <_strtod_l+0xb2c>)
 801757c:	ea09 0700 	and.w	r7, r9, r0
 8017580:	428f      	cmp	r7, r1
 8017582:	ec53 2b1a 	vmov	r2, r3, d10
 8017586:	d17d      	bne.n	8017684 <_strtod_l+0xa7c>
 8017588:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801758c:	ec4b ab1c 	vmov	d12, sl, fp
 8017590:	eeb0 0b4c 	vmov.f64	d0, d12
 8017594:	f7ff f9e2 	bl	801695c <__ulp>
 8017598:	4864      	ldr	r0, [pc, #400]	@ (801772c <_strtod_l+0xb24>)
 801759a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801759e:	ee1c 3a90 	vmov	r3, s25
 80175a2:	4a65      	ldr	r2, [pc, #404]	@ (8017738 <_strtod_l+0xb30>)
 80175a4:	ea03 0100 	and.w	r1, r3, r0
 80175a8:	4291      	cmp	r1, r2
 80175aa:	ec5b ab1c 	vmov	sl, fp, d12
 80175ae:	d93c      	bls.n	801762a <_strtod_l+0xa22>
 80175b0:	ee19 2a90 	vmov	r2, s19
 80175b4:	4b5e      	ldr	r3, [pc, #376]	@ (8017730 <_strtod_l+0xb28>)
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d104      	bne.n	80175c4 <_strtod_l+0x9bc>
 80175ba:	ee19 3a10 	vmov	r3, s18
 80175be:	3301      	adds	r3, #1
 80175c0:	f43f ad3c 	beq.w	801703c <_strtod_l+0x434>
 80175c4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8017730 <_strtod_l+0xb28>
 80175c8:	f04f 3aff 	mov.w	sl, #4294967295
 80175cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80175ce:	9805      	ldr	r0, [sp, #20]
 80175d0:	f7fe fe98 	bl	8016304 <_Bfree>
 80175d4:	9805      	ldr	r0, [sp, #20]
 80175d6:	4631      	mov	r1, r6
 80175d8:	f7fe fe94 	bl	8016304 <_Bfree>
 80175dc:	9805      	ldr	r0, [sp, #20]
 80175de:	4629      	mov	r1, r5
 80175e0:	f7fe fe90 	bl	8016304 <_Bfree>
 80175e4:	9805      	ldr	r0, [sp, #20]
 80175e6:	4621      	mov	r1, r4
 80175e8:	f7fe fe8c 	bl	8016304 <_Bfree>
 80175ec:	e627      	b.n	801723e <_strtod_l+0x636>
 80175ee:	f1ba 0f01 	cmp.w	sl, #1
 80175f2:	d103      	bne.n	80175fc <_strtod_l+0x9f4>
 80175f4:	f1bb 0f00 	cmp.w	fp, #0
 80175f8:	f43f adb4 	beq.w	8017164 <_strtod_l+0x55c>
 80175fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017600:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017604:	e7b8      	b.n	8017578 <_strtod_l+0x970>
 8017606:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801760a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801760e:	f1b8 0f00 	cmp.w	r8, #0
 8017612:	d0af      	beq.n	8017574 <_strtod_l+0x96c>
 8017614:	eeb0 ab48 	vmov.f64	d10, d8
 8017618:	e7ae      	b.n	8017578 <_strtod_l+0x970>
 801761a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801761e:	eeb0 8b4a 	vmov.f64	d8, d10
 8017622:	e7a9      	b.n	8017578 <_strtod_l+0x970>
 8017624:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017628:	e7a6      	b.n	8017578 <_strtod_l+0x970>
 801762a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801762e:	9b06      	ldr	r3, [sp, #24]
 8017630:	46d9      	mov	r9, fp
 8017632:	2b00      	cmp	r3, #0
 8017634:	d1ca      	bne.n	80175cc <_strtod_l+0x9c4>
 8017636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801763a:	0d1b      	lsrs	r3, r3, #20
 801763c:	051b      	lsls	r3, r3, #20
 801763e:	429f      	cmp	r7, r3
 8017640:	d1c4      	bne.n	80175cc <_strtod_l+0x9c4>
 8017642:	ec51 0b18 	vmov	r0, r1, d8
 8017646:	f7e9 f827 	bl	8000698 <__aeabi_d2lz>
 801764a:	f7e8 ffdf 	bl	800060c <__aeabi_l2d>
 801764e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8017652:	ec41 0b17 	vmov	d7, r0, r1
 8017656:	ea49 090a 	orr.w	r9, r9, sl
 801765a:	ea59 0908 	orrs.w	r9, r9, r8
 801765e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017662:	d03c      	beq.n	80176de <_strtod_l+0xad6>
 8017664:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017710 <_strtod_l+0xb08>
 8017668:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017670:	f53f acef 	bmi.w	8017052 <_strtod_l+0x44a>
 8017674:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8017718 <_strtod_l+0xb10>
 8017678:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017680:	dda4      	ble.n	80175cc <_strtod_l+0x9c4>
 8017682:	e4e6      	b.n	8017052 <_strtod_l+0x44a>
 8017684:	9906      	ldr	r1, [sp, #24]
 8017686:	b1e1      	cbz	r1, 80176c2 <_strtod_l+0xaba>
 8017688:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801768c:	d819      	bhi.n	80176c2 <_strtod_l+0xaba>
 801768e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017696:	d811      	bhi.n	80176bc <_strtod_l+0xab4>
 8017698:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801769c:	ee18 3a10 	vmov	r3, s16
 80176a0:	2b01      	cmp	r3, #1
 80176a2:	bf38      	it	cc
 80176a4:	2301      	movcc	r3, #1
 80176a6:	ee08 3a10 	vmov	s16, r3
 80176aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80176ae:	f1b8 0f00 	cmp.w	r8, #0
 80176b2:	d111      	bne.n	80176d8 <_strtod_l+0xad0>
 80176b4:	eeb1 7b48 	vneg.f64	d7, d8
 80176b8:	ec53 2b17 	vmov	r2, r3, d7
 80176bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80176c0:	1bcb      	subs	r3, r1, r7
 80176c2:	eeb0 0b49 	vmov.f64	d0, d9
 80176c6:	ec43 2b1a 	vmov	d10, r2, r3
 80176ca:	f7ff f947 	bl	801695c <__ulp>
 80176ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80176d2:	ec5b ab19 	vmov	sl, fp, d9
 80176d6:	e7aa      	b.n	801762e <_strtod_l+0xa26>
 80176d8:	eeb0 7b48 	vmov.f64	d7, d8
 80176dc:	e7ec      	b.n	80176b8 <_strtod_l+0xab0>
 80176de:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8017720 <_strtod_l+0xb18>
 80176e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80176e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176ea:	f57f af6f 	bpl.w	80175cc <_strtod_l+0x9c4>
 80176ee:	e4b0      	b.n	8017052 <_strtod_l+0x44a>
 80176f0:	2300      	movs	r3, #0
 80176f2:	9308      	str	r3, [sp, #32]
 80176f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80176f8:	6013      	str	r3, [r2, #0]
 80176fa:	f7ff bac4 	b.w	8016c86 <_strtod_l+0x7e>
 80176fe:	2a65      	cmp	r2, #101	@ 0x65
 8017700:	f43f abbf 	beq.w	8016e82 <_strtod_l+0x27a>
 8017704:	2a45      	cmp	r2, #69	@ 0x45
 8017706:	f43f abbc 	beq.w	8016e82 <_strtod_l+0x27a>
 801770a:	2101      	movs	r1, #1
 801770c:	f7ff bbf4 	b.w	8016ef8 <_strtod_l+0x2f0>
 8017710:	94a03595 	.word	0x94a03595
 8017714:	3fdfffff 	.word	0x3fdfffff
 8017718:	35afe535 	.word	0x35afe535
 801771c:	3fe00000 	.word	0x3fe00000
 8017720:	94a03595 	.word	0x94a03595
 8017724:	3fcfffff 	.word	0x3fcfffff
 8017728:	000fffff 	.word	0x000fffff
 801772c:	7ff00000 	.word	0x7ff00000
 8017730:	7fefffff 	.word	0x7fefffff
 8017734:	7fe00000 	.word	0x7fe00000
 8017738:	7c9fffff 	.word	0x7c9fffff

0801773c <_strtod_r>:
 801773c:	4b01      	ldr	r3, [pc, #4]	@ (8017744 <_strtod_r+0x8>)
 801773e:	f7ff ba63 	b.w	8016c08 <_strtod_l>
 8017742:	bf00      	nop
 8017744:	2000009c 	.word	0x2000009c

08017748 <__ssputs_r>:
 8017748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801774c:	688e      	ldr	r6, [r1, #8]
 801774e:	461f      	mov	r7, r3
 8017750:	42be      	cmp	r6, r7
 8017752:	680b      	ldr	r3, [r1, #0]
 8017754:	4682      	mov	sl, r0
 8017756:	460c      	mov	r4, r1
 8017758:	4690      	mov	r8, r2
 801775a:	d82d      	bhi.n	80177b8 <__ssputs_r+0x70>
 801775c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017764:	d026      	beq.n	80177b4 <__ssputs_r+0x6c>
 8017766:	6965      	ldr	r5, [r4, #20]
 8017768:	6909      	ldr	r1, [r1, #16]
 801776a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801776e:	eba3 0901 	sub.w	r9, r3, r1
 8017772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017776:	1c7b      	adds	r3, r7, #1
 8017778:	444b      	add	r3, r9
 801777a:	106d      	asrs	r5, r5, #1
 801777c:	429d      	cmp	r5, r3
 801777e:	bf38      	it	cc
 8017780:	461d      	movcc	r5, r3
 8017782:	0553      	lsls	r3, r2, #21
 8017784:	d527      	bpl.n	80177d6 <__ssputs_r+0x8e>
 8017786:	4629      	mov	r1, r5
 8017788:	f7fe fcf0 	bl	801616c <_malloc_r>
 801778c:	4606      	mov	r6, r0
 801778e:	b360      	cbz	r0, 80177ea <__ssputs_r+0xa2>
 8017790:	6921      	ldr	r1, [r4, #16]
 8017792:	464a      	mov	r2, r9
 8017794:	f7fd fe5b 	bl	801544e <memcpy>
 8017798:	89a3      	ldrh	r3, [r4, #12]
 801779a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801779e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177a2:	81a3      	strh	r3, [r4, #12]
 80177a4:	6126      	str	r6, [r4, #16]
 80177a6:	6165      	str	r5, [r4, #20]
 80177a8:	444e      	add	r6, r9
 80177aa:	eba5 0509 	sub.w	r5, r5, r9
 80177ae:	6026      	str	r6, [r4, #0]
 80177b0:	60a5      	str	r5, [r4, #8]
 80177b2:	463e      	mov	r6, r7
 80177b4:	42be      	cmp	r6, r7
 80177b6:	d900      	bls.n	80177ba <__ssputs_r+0x72>
 80177b8:	463e      	mov	r6, r7
 80177ba:	6820      	ldr	r0, [r4, #0]
 80177bc:	4632      	mov	r2, r6
 80177be:	4641      	mov	r1, r8
 80177c0:	f7fd fd9a 	bl	80152f8 <memmove>
 80177c4:	68a3      	ldr	r3, [r4, #8]
 80177c6:	1b9b      	subs	r3, r3, r6
 80177c8:	60a3      	str	r3, [r4, #8]
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	4433      	add	r3, r6
 80177ce:	6023      	str	r3, [r4, #0]
 80177d0:	2000      	movs	r0, #0
 80177d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d6:	462a      	mov	r2, r5
 80177d8:	f000 ff0f 	bl	80185fa <_realloc_r>
 80177dc:	4606      	mov	r6, r0
 80177de:	2800      	cmp	r0, #0
 80177e0:	d1e0      	bne.n	80177a4 <__ssputs_r+0x5c>
 80177e2:	6921      	ldr	r1, [r4, #16]
 80177e4:	4650      	mov	r0, sl
 80177e6:	f7fe fc4d 	bl	8016084 <_free_r>
 80177ea:	230c      	movs	r3, #12
 80177ec:	f8ca 3000 	str.w	r3, [sl]
 80177f0:	89a3      	ldrh	r3, [r4, #12]
 80177f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177f6:	81a3      	strh	r3, [r4, #12]
 80177f8:	f04f 30ff 	mov.w	r0, #4294967295
 80177fc:	e7e9      	b.n	80177d2 <__ssputs_r+0x8a>
	...

08017800 <_svfiprintf_r>:
 8017800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017804:	4698      	mov	r8, r3
 8017806:	898b      	ldrh	r3, [r1, #12]
 8017808:	061b      	lsls	r3, r3, #24
 801780a:	b09d      	sub	sp, #116	@ 0x74
 801780c:	4607      	mov	r7, r0
 801780e:	460d      	mov	r5, r1
 8017810:	4614      	mov	r4, r2
 8017812:	d510      	bpl.n	8017836 <_svfiprintf_r+0x36>
 8017814:	690b      	ldr	r3, [r1, #16]
 8017816:	b973      	cbnz	r3, 8017836 <_svfiprintf_r+0x36>
 8017818:	2140      	movs	r1, #64	@ 0x40
 801781a:	f7fe fca7 	bl	801616c <_malloc_r>
 801781e:	6028      	str	r0, [r5, #0]
 8017820:	6128      	str	r0, [r5, #16]
 8017822:	b930      	cbnz	r0, 8017832 <_svfiprintf_r+0x32>
 8017824:	230c      	movs	r3, #12
 8017826:	603b      	str	r3, [r7, #0]
 8017828:	f04f 30ff 	mov.w	r0, #4294967295
 801782c:	b01d      	add	sp, #116	@ 0x74
 801782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017832:	2340      	movs	r3, #64	@ 0x40
 8017834:	616b      	str	r3, [r5, #20]
 8017836:	2300      	movs	r3, #0
 8017838:	9309      	str	r3, [sp, #36]	@ 0x24
 801783a:	2320      	movs	r3, #32
 801783c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017840:	f8cd 800c 	str.w	r8, [sp, #12]
 8017844:	2330      	movs	r3, #48	@ 0x30
 8017846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80179e4 <_svfiprintf_r+0x1e4>
 801784a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801784e:	f04f 0901 	mov.w	r9, #1
 8017852:	4623      	mov	r3, r4
 8017854:	469a      	mov	sl, r3
 8017856:	f813 2b01 	ldrb.w	r2, [r3], #1
 801785a:	b10a      	cbz	r2, 8017860 <_svfiprintf_r+0x60>
 801785c:	2a25      	cmp	r2, #37	@ 0x25
 801785e:	d1f9      	bne.n	8017854 <_svfiprintf_r+0x54>
 8017860:	ebba 0b04 	subs.w	fp, sl, r4
 8017864:	d00b      	beq.n	801787e <_svfiprintf_r+0x7e>
 8017866:	465b      	mov	r3, fp
 8017868:	4622      	mov	r2, r4
 801786a:	4629      	mov	r1, r5
 801786c:	4638      	mov	r0, r7
 801786e:	f7ff ff6b 	bl	8017748 <__ssputs_r>
 8017872:	3001      	adds	r0, #1
 8017874:	f000 80a7 	beq.w	80179c6 <_svfiprintf_r+0x1c6>
 8017878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801787a:	445a      	add	r2, fp
 801787c:	9209      	str	r2, [sp, #36]	@ 0x24
 801787e:	f89a 3000 	ldrb.w	r3, [sl]
 8017882:	2b00      	cmp	r3, #0
 8017884:	f000 809f 	beq.w	80179c6 <_svfiprintf_r+0x1c6>
 8017888:	2300      	movs	r3, #0
 801788a:	f04f 32ff 	mov.w	r2, #4294967295
 801788e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017892:	f10a 0a01 	add.w	sl, sl, #1
 8017896:	9304      	str	r3, [sp, #16]
 8017898:	9307      	str	r3, [sp, #28]
 801789a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801789e:	931a      	str	r3, [sp, #104]	@ 0x68
 80178a0:	4654      	mov	r4, sl
 80178a2:	2205      	movs	r2, #5
 80178a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178a8:	484e      	ldr	r0, [pc, #312]	@ (80179e4 <_svfiprintf_r+0x1e4>)
 80178aa:	f7e8 fcc9 	bl	8000240 <memchr>
 80178ae:	9a04      	ldr	r2, [sp, #16]
 80178b0:	b9d8      	cbnz	r0, 80178ea <_svfiprintf_r+0xea>
 80178b2:	06d0      	lsls	r0, r2, #27
 80178b4:	bf44      	itt	mi
 80178b6:	2320      	movmi	r3, #32
 80178b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178bc:	0711      	lsls	r1, r2, #28
 80178be:	bf44      	itt	mi
 80178c0:	232b      	movmi	r3, #43	@ 0x2b
 80178c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80178c6:	f89a 3000 	ldrb.w	r3, [sl]
 80178ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80178cc:	d015      	beq.n	80178fa <_svfiprintf_r+0xfa>
 80178ce:	9a07      	ldr	r2, [sp, #28]
 80178d0:	4654      	mov	r4, sl
 80178d2:	2000      	movs	r0, #0
 80178d4:	f04f 0c0a 	mov.w	ip, #10
 80178d8:	4621      	mov	r1, r4
 80178da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178de:	3b30      	subs	r3, #48	@ 0x30
 80178e0:	2b09      	cmp	r3, #9
 80178e2:	d94b      	bls.n	801797c <_svfiprintf_r+0x17c>
 80178e4:	b1b0      	cbz	r0, 8017914 <_svfiprintf_r+0x114>
 80178e6:	9207      	str	r2, [sp, #28]
 80178e8:	e014      	b.n	8017914 <_svfiprintf_r+0x114>
 80178ea:	eba0 0308 	sub.w	r3, r0, r8
 80178ee:	fa09 f303 	lsl.w	r3, r9, r3
 80178f2:	4313      	orrs	r3, r2
 80178f4:	9304      	str	r3, [sp, #16]
 80178f6:	46a2      	mov	sl, r4
 80178f8:	e7d2      	b.n	80178a0 <_svfiprintf_r+0xa0>
 80178fa:	9b03      	ldr	r3, [sp, #12]
 80178fc:	1d19      	adds	r1, r3, #4
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	9103      	str	r1, [sp, #12]
 8017902:	2b00      	cmp	r3, #0
 8017904:	bfbb      	ittet	lt
 8017906:	425b      	neglt	r3, r3
 8017908:	f042 0202 	orrlt.w	r2, r2, #2
 801790c:	9307      	strge	r3, [sp, #28]
 801790e:	9307      	strlt	r3, [sp, #28]
 8017910:	bfb8      	it	lt
 8017912:	9204      	strlt	r2, [sp, #16]
 8017914:	7823      	ldrb	r3, [r4, #0]
 8017916:	2b2e      	cmp	r3, #46	@ 0x2e
 8017918:	d10a      	bne.n	8017930 <_svfiprintf_r+0x130>
 801791a:	7863      	ldrb	r3, [r4, #1]
 801791c:	2b2a      	cmp	r3, #42	@ 0x2a
 801791e:	d132      	bne.n	8017986 <_svfiprintf_r+0x186>
 8017920:	9b03      	ldr	r3, [sp, #12]
 8017922:	1d1a      	adds	r2, r3, #4
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	9203      	str	r2, [sp, #12]
 8017928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801792c:	3402      	adds	r4, #2
 801792e:	9305      	str	r3, [sp, #20]
 8017930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80179f4 <_svfiprintf_r+0x1f4>
 8017934:	7821      	ldrb	r1, [r4, #0]
 8017936:	2203      	movs	r2, #3
 8017938:	4650      	mov	r0, sl
 801793a:	f7e8 fc81 	bl	8000240 <memchr>
 801793e:	b138      	cbz	r0, 8017950 <_svfiprintf_r+0x150>
 8017940:	9b04      	ldr	r3, [sp, #16]
 8017942:	eba0 000a 	sub.w	r0, r0, sl
 8017946:	2240      	movs	r2, #64	@ 0x40
 8017948:	4082      	lsls	r2, r0
 801794a:	4313      	orrs	r3, r2
 801794c:	3401      	adds	r4, #1
 801794e:	9304      	str	r3, [sp, #16]
 8017950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017954:	4824      	ldr	r0, [pc, #144]	@ (80179e8 <_svfiprintf_r+0x1e8>)
 8017956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801795a:	2206      	movs	r2, #6
 801795c:	f7e8 fc70 	bl	8000240 <memchr>
 8017960:	2800      	cmp	r0, #0
 8017962:	d036      	beq.n	80179d2 <_svfiprintf_r+0x1d2>
 8017964:	4b21      	ldr	r3, [pc, #132]	@ (80179ec <_svfiprintf_r+0x1ec>)
 8017966:	bb1b      	cbnz	r3, 80179b0 <_svfiprintf_r+0x1b0>
 8017968:	9b03      	ldr	r3, [sp, #12]
 801796a:	3307      	adds	r3, #7
 801796c:	f023 0307 	bic.w	r3, r3, #7
 8017970:	3308      	adds	r3, #8
 8017972:	9303      	str	r3, [sp, #12]
 8017974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017976:	4433      	add	r3, r6
 8017978:	9309      	str	r3, [sp, #36]	@ 0x24
 801797a:	e76a      	b.n	8017852 <_svfiprintf_r+0x52>
 801797c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017980:	460c      	mov	r4, r1
 8017982:	2001      	movs	r0, #1
 8017984:	e7a8      	b.n	80178d8 <_svfiprintf_r+0xd8>
 8017986:	2300      	movs	r3, #0
 8017988:	3401      	adds	r4, #1
 801798a:	9305      	str	r3, [sp, #20]
 801798c:	4619      	mov	r1, r3
 801798e:	f04f 0c0a 	mov.w	ip, #10
 8017992:	4620      	mov	r0, r4
 8017994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017998:	3a30      	subs	r2, #48	@ 0x30
 801799a:	2a09      	cmp	r2, #9
 801799c:	d903      	bls.n	80179a6 <_svfiprintf_r+0x1a6>
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d0c6      	beq.n	8017930 <_svfiprintf_r+0x130>
 80179a2:	9105      	str	r1, [sp, #20]
 80179a4:	e7c4      	b.n	8017930 <_svfiprintf_r+0x130>
 80179a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80179aa:	4604      	mov	r4, r0
 80179ac:	2301      	movs	r3, #1
 80179ae:	e7f0      	b.n	8017992 <_svfiprintf_r+0x192>
 80179b0:	ab03      	add	r3, sp, #12
 80179b2:	9300      	str	r3, [sp, #0]
 80179b4:	462a      	mov	r2, r5
 80179b6:	4b0e      	ldr	r3, [pc, #56]	@ (80179f0 <_svfiprintf_r+0x1f0>)
 80179b8:	a904      	add	r1, sp, #16
 80179ba:	4638      	mov	r0, r7
 80179bc:	f7fc fcb4 	bl	8014328 <_printf_float>
 80179c0:	1c42      	adds	r2, r0, #1
 80179c2:	4606      	mov	r6, r0
 80179c4:	d1d6      	bne.n	8017974 <_svfiprintf_r+0x174>
 80179c6:	89ab      	ldrh	r3, [r5, #12]
 80179c8:	065b      	lsls	r3, r3, #25
 80179ca:	f53f af2d 	bmi.w	8017828 <_svfiprintf_r+0x28>
 80179ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80179d0:	e72c      	b.n	801782c <_svfiprintf_r+0x2c>
 80179d2:	ab03      	add	r3, sp, #12
 80179d4:	9300      	str	r3, [sp, #0]
 80179d6:	462a      	mov	r2, r5
 80179d8:	4b05      	ldr	r3, [pc, #20]	@ (80179f0 <_svfiprintf_r+0x1f0>)
 80179da:	a904      	add	r1, sp, #16
 80179dc:	4638      	mov	r0, r7
 80179de:	f7fc ff2b 	bl	8014838 <_printf_i>
 80179e2:	e7ed      	b.n	80179c0 <_svfiprintf_r+0x1c0>
 80179e4:	0801c0ff 	.word	0x0801c0ff
 80179e8:	0801c109 	.word	0x0801c109
 80179ec:	08014329 	.word	0x08014329
 80179f0:	08017749 	.word	0x08017749
 80179f4:	0801c105 	.word	0x0801c105

080179f8 <__sfputc_r>:
 80179f8:	6893      	ldr	r3, [r2, #8]
 80179fa:	3b01      	subs	r3, #1
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	b410      	push	{r4}
 8017a00:	6093      	str	r3, [r2, #8]
 8017a02:	da08      	bge.n	8017a16 <__sfputc_r+0x1e>
 8017a04:	6994      	ldr	r4, [r2, #24]
 8017a06:	42a3      	cmp	r3, r4
 8017a08:	db01      	blt.n	8017a0e <__sfputc_r+0x16>
 8017a0a:	290a      	cmp	r1, #10
 8017a0c:	d103      	bne.n	8017a16 <__sfputc_r+0x1e>
 8017a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a12:	f7fd bbcc 	b.w	80151ae <__swbuf_r>
 8017a16:	6813      	ldr	r3, [r2, #0]
 8017a18:	1c58      	adds	r0, r3, #1
 8017a1a:	6010      	str	r0, [r2, #0]
 8017a1c:	7019      	strb	r1, [r3, #0]
 8017a1e:	4608      	mov	r0, r1
 8017a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a24:	4770      	bx	lr

08017a26 <__sfputs_r>:
 8017a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a28:	4606      	mov	r6, r0
 8017a2a:	460f      	mov	r7, r1
 8017a2c:	4614      	mov	r4, r2
 8017a2e:	18d5      	adds	r5, r2, r3
 8017a30:	42ac      	cmp	r4, r5
 8017a32:	d101      	bne.n	8017a38 <__sfputs_r+0x12>
 8017a34:	2000      	movs	r0, #0
 8017a36:	e007      	b.n	8017a48 <__sfputs_r+0x22>
 8017a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a3c:	463a      	mov	r2, r7
 8017a3e:	4630      	mov	r0, r6
 8017a40:	f7ff ffda 	bl	80179f8 <__sfputc_r>
 8017a44:	1c43      	adds	r3, r0, #1
 8017a46:	d1f3      	bne.n	8017a30 <__sfputs_r+0xa>
 8017a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a4c <_vfiprintf_r>:
 8017a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a50:	460d      	mov	r5, r1
 8017a52:	b09d      	sub	sp, #116	@ 0x74
 8017a54:	4614      	mov	r4, r2
 8017a56:	4698      	mov	r8, r3
 8017a58:	4606      	mov	r6, r0
 8017a5a:	b118      	cbz	r0, 8017a64 <_vfiprintf_r+0x18>
 8017a5c:	6a03      	ldr	r3, [r0, #32]
 8017a5e:	b90b      	cbnz	r3, 8017a64 <_vfiprintf_r+0x18>
 8017a60:	f7fd fa9a 	bl	8014f98 <__sinit>
 8017a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a66:	07d9      	lsls	r1, r3, #31
 8017a68:	d405      	bmi.n	8017a76 <_vfiprintf_r+0x2a>
 8017a6a:	89ab      	ldrh	r3, [r5, #12]
 8017a6c:	059a      	lsls	r2, r3, #22
 8017a6e:	d402      	bmi.n	8017a76 <_vfiprintf_r+0x2a>
 8017a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017a72:	f7fd fcea 	bl	801544a <__retarget_lock_acquire_recursive>
 8017a76:	89ab      	ldrh	r3, [r5, #12]
 8017a78:	071b      	lsls	r3, r3, #28
 8017a7a:	d501      	bpl.n	8017a80 <_vfiprintf_r+0x34>
 8017a7c:	692b      	ldr	r3, [r5, #16]
 8017a7e:	b99b      	cbnz	r3, 8017aa8 <_vfiprintf_r+0x5c>
 8017a80:	4629      	mov	r1, r5
 8017a82:	4630      	mov	r0, r6
 8017a84:	f7fd fbd2 	bl	801522c <__swsetup_r>
 8017a88:	b170      	cbz	r0, 8017aa8 <_vfiprintf_r+0x5c>
 8017a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017a8c:	07dc      	lsls	r4, r3, #31
 8017a8e:	d504      	bpl.n	8017a9a <_vfiprintf_r+0x4e>
 8017a90:	f04f 30ff 	mov.w	r0, #4294967295
 8017a94:	b01d      	add	sp, #116	@ 0x74
 8017a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9a:	89ab      	ldrh	r3, [r5, #12]
 8017a9c:	0598      	lsls	r0, r3, #22
 8017a9e:	d4f7      	bmi.n	8017a90 <_vfiprintf_r+0x44>
 8017aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017aa2:	f7fd fcd3 	bl	801544c <__retarget_lock_release_recursive>
 8017aa6:	e7f3      	b.n	8017a90 <_vfiprintf_r+0x44>
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8017aac:	2320      	movs	r3, #32
 8017aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ab6:	2330      	movs	r3, #48	@ 0x30
 8017ab8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017c68 <_vfiprintf_r+0x21c>
 8017abc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ac0:	f04f 0901 	mov.w	r9, #1
 8017ac4:	4623      	mov	r3, r4
 8017ac6:	469a      	mov	sl, r3
 8017ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017acc:	b10a      	cbz	r2, 8017ad2 <_vfiprintf_r+0x86>
 8017ace:	2a25      	cmp	r2, #37	@ 0x25
 8017ad0:	d1f9      	bne.n	8017ac6 <_vfiprintf_r+0x7a>
 8017ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8017ad6:	d00b      	beq.n	8017af0 <_vfiprintf_r+0xa4>
 8017ad8:	465b      	mov	r3, fp
 8017ada:	4622      	mov	r2, r4
 8017adc:	4629      	mov	r1, r5
 8017ade:	4630      	mov	r0, r6
 8017ae0:	f7ff ffa1 	bl	8017a26 <__sfputs_r>
 8017ae4:	3001      	adds	r0, #1
 8017ae6:	f000 80a7 	beq.w	8017c38 <_vfiprintf_r+0x1ec>
 8017aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017aec:	445a      	add	r2, fp
 8017aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8017af0:	f89a 3000 	ldrb.w	r3, [sl]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	f000 809f 	beq.w	8017c38 <_vfiprintf_r+0x1ec>
 8017afa:	2300      	movs	r3, #0
 8017afc:	f04f 32ff 	mov.w	r2, #4294967295
 8017b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b04:	f10a 0a01 	add.w	sl, sl, #1
 8017b08:	9304      	str	r3, [sp, #16]
 8017b0a:	9307      	str	r3, [sp, #28]
 8017b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b12:	4654      	mov	r4, sl
 8017b14:	2205      	movs	r2, #5
 8017b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b1a:	4853      	ldr	r0, [pc, #332]	@ (8017c68 <_vfiprintf_r+0x21c>)
 8017b1c:	f7e8 fb90 	bl	8000240 <memchr>
 8017b20:	9a04      	ldr	r2, [sp, #16]
 8017b22:	b9d8      	cbnz	r0, 8017b5c <_vfiprintf_r+0x110>
 8017b24:	06d1      	lsls	r1, r2, #27
 8017b26:	bf44      	itt	mi
 8017b28:	2320      	movmi	r3, #32
 8017b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b2e:	0713      	lsls	r3, r2, #28
 8017b30:	bf44      	itt	mi
 8017b32:	232b      	movmi	r3, #43	@ 0x2b
 8017b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b38:	f89a 3000 	ldrb.w	r3, [sl]
 8017b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b3e:	d015      	beq.n	8017b6c <_vfiprintf_r+0x120>
 8017b40:	9a07      	ldr	r2, [sp, #28]
 8017b42:	4654      	mov	r4, sl
 8017b44:	2000      	movs	r0, #0
 8017b46:	f04f 0c0a 	mov.w	ip, #10
 8017b4a:	4621      	mov	r1, r4
 8017b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b50:	3b30      	subs	r3, #48	@ 0x30
 8017b52:	2b09      	cmp	r3, #9
 8017b54:	d94b      	bls.n	8017bee <_vfiprintf_r+0x1a2>
 8017b56:	b1b0      	cbz	r0, 8017b86 <_vfiprintf_r+0x13a>
 8017b58:	9207      	str	r2, [sp, #28]
 8017b5a:	e014      	b.n	8017b86 <_vfiprintf_r+0x13a>
 8017b5c:	eba0 0308 	sub.w	r3, r0, r8
 8017b60:	fa09 f303 	lsl.w	r3, r9, r3
 8017b64:	4313      	orrs	r3, r2
 8017b66:	9304      	str	r3, [sp, #16]
 8017b68:	46a2      	mov	sl, r4
 8017b6a:	e7d2      	b.n	8017b12 <_vfiprintf_r+0xc6>
 8017b6c:	9b03      	ldr	r3, [sp, #12]
 8017b6e:	1d19      	adds	r1, r3, #4
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	9103      	str	r1, [sp, #12]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	bfbb      	ittet	lt
 8017b78:	425b      	neglt	r3, r3
 8017b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8017b7e:	9307      	strge	r3, [sp, #28]
 8017b80:	9307      	strlt	r3, [sp, #28]
 8017b82:	bfb8      	it	lt
 8017b84:	9204      	strlt	r2, [sp, #16]
 8017b86:	7823      	ldrb	r3, [r4, #0]
 8017b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b8a:	d10a      	bne.n	8017ba2 <_vfiprintf_r+0x156>
 8017b8c:	7863      	ldrb	r3, [r4, #1]
 8017b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b90:	d132      	bne.n	8017bf8 <_vfiprintf_r+0x1ac>
 8017b92:	9b03      	ldr	r3, [sp, #12]
 8017b94:	1d1a      	adds	r2, r3, #4
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	9203      	str	r2, [sp, #12]
 8017b9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b9e:	3402      	adds	r4, #2
 8017ba0:	9305      	str	r3, [sp, #20]
 8017ba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017c78 <_vfiprintf_r+0x22c>
 8017ba6:	7821      	ldrb	r1, [r4, #0]
 8017ba8:	2203      	movs	r2, #3
 8017baa:	4650      	mov	r0, sl
 8017bac:	f7e8 fb48 	bl	8000240 <memchr>
 8017bb0:	b138      	cbz	r0, 8017bc2 <_vfiprintf_r+0x176>
 8017bb2:	9b04      	ldr	r3, [sp, #16]
 8017bb4:	eba0 000a 	sub.w	r0, r0, sl
 8017bb8:	2240      	movs	r2, #64	@ 0x40
 8017bba:	4082      	lsls	r2, r0
 8017bbc:	4313      	orrs	r3, r2
 8017bbe:	3401      	adds	r4, #1
 8017bc0:	9304      	str	r3, [sp, #16]
 8017bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc6:	4829      	ldr	r0, [pc, #164]	@ (8017c6c <_vfiprintf_r+0x220>)
 8017bc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017bcc:	2206      	movs	r2, #6
 8017bce:	f7e8 fb37 	bl	8000240 <memchr>
 8017bd2:	2800      	cmp	r0, #0
 8017bd4:	d03f      	beq.n	8017c56 <_vfiprintf_r+0x20a>
 8017bd6:	4b26      	ldr	r3, [pc, #152]	@ (8017c70 <_vfiprintf_r+0x224>)
 8017bd8:	bb1b      	cbnz	r3, 8017c22 <_vfiprintf_r+0x1d6>
 8017bda:	9b03      	ldr	r3, [sp, #12]
 8017bdc:	3307      	adds	r3, #7
 8017bde:	f023 0307 	bic.w	r3, r3, #7
 8017be2:	3308      	adds	r3, #8
 8017be4:	9303      	str	r3, [sp, #12]
 8017be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017be8:	443b      	add	r3, r7
 8017bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bec:	e76a      	b.n	8017ac4 <_vfiprintf_r+0x78>
 8017bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bf2:	460c      	mov	r4, r1
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	e7a8      	b.n	8017b4a <_vfiprintf_r+0xfe>
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	3401      	adds	r4, #1
 8017bfc:	9305      	str	r3, [sp, #20]
 8017bfe:	4619      	mov	r1, r3
 8017c00:	f04f 0c0a 	mov.w	ip, #10
 8017c04:	4620      	mov	r0, r4
 8017c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c0a:	3a30      	subs	r2, #48	@ 0x30
 8017c0c:	2a09      	cmp	r2, #9
 8017c0e:	d903      	bls.n	8017c18 <_vfiprintf_r+0x1cc>
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d0c6      	beq.n	8017ba2 <_vfiprintf_r+0x156>
 8017c14:	9105      	str	r1, [sp, #20]
 8017c16:	e7c4      	b.n	8017ba2 <_vfiprintf_r+0x156>
 8017c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c1c:	4604      	mov	r4, r0
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e7f0      	b.n	8017c04 <_vfiprintf_r+0x1b8>
 8017c22:	ab03      	add	r3, sp, #12
 8017c24:	9300      	str	r3, [sp, #0]
 8017c26:	462a      	mov	r2, r5
 8017c28:	4b12      	ldr	r3, [pc, #72]	@ (8017c74 <_vfiprintf_r+0x228>)
 8017c2a:	a904      	add	r1, sp, #16
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	f7fc fb7b 	bl	8014328 <_printf_float>
 8017c32:	4607      	mov	r7, r0
 8017c34:	1c78      	adds	r0, r7, #1
 8017c36:	d1d6      	bne.n	8017be6 <_vfiprintf_r+0x19a>
 8017c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c3a:	07d9      	lsls	r1, r3, #31
 8017c3c:	d405      	bmi.n	8017c4a <_vfiprintf_r+0x1fe>
 8017c3e:	89ab      	ldrh	r3, [r5, #12]
 8017c40:	059a      	lsls	r2, r3, #22
 8017c42:	d402      	bmi.n	8017c4a <_vfiprintf_r+0x1fe>
 8017c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c46:	f7fd fc01 	bl	801544c <__retarget_lock_release_recursive>
 8017c4a:	89ab      	ldrh	r3, [r5, #12]
 8017c4c:	065b      	lsls	r3, r3, #25
 8017c4e:	f53f af1f 	bmi.w	8017a90 <_vfiprintf_r+0x44>
 8017c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c54:	e71e      	b.n	8017a94 <_vfiprintf_r+0x48>
 8017c56:	ab03      	add	r3, sp, #12
 8017c58:	9300      	str	r3, [sp, #0]
 8017c5a:	462a      	mov	r2, r5
 8017c5c:	4b05      	ldr	r3, [pc, #20]	@ (8017c74 <_vfiprintf_r+0x228>)
 8017c5e:	a904      	add	r1, sp, #16
 8017c60:	4630      	mov	r0, r6
 8017c62:	f7fc fde9 	bl	8014838 <_printf_i>
 8017c66:	e7e4      	b.n	8017c32 <_vfiprintf_r+0x1e6>
 8017c68:	0801c0ff 	.word	0x0801c0ff
 8017c6c:	0801c109 	.word	0x0801c109
 8017c70:	08014329 	.word	0x08014329
 8017c74:	08017a27 	.word	0x08017a27
 8017c78:	0801c105 	.word	0x0801c105

08017c7c <__sflush_r>:
 8017c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c84:	0716      	lsls	r6, r2, #28
 8017c86:	4605      	mov	r5, r0
 8017c88:	460c      	mov	r4, r1
 8017c8a:	d454      	bmi.n	8017d36 <__sflush_r+0xba>
 8017c8c:	684b      	ldr	r3, [r1, #4]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	dc02      	bgt.n	8017c98 <__sflush_r+0x1c>
 8017c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	dd48      	ble.n	8017d2a <__sflush_r+0xae>
 8017c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c9a:	2e00      	cmp	r6, #0
 8017c9c:	d045      	beq.n	8017d2a <__sflush_r+0xae>
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ca4:	682f      	ldr	r7, [r5, #0]
 8017ca6:	6a21      	ldr	r1, [r4, #32]
 8017ca8:	602b      	str	r3, [r5, #0]
 8017caa:	d030      	beq.n	8017d0e <__sflush_r+0x92>
 8017cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	0759      	lsls	r1, r3, #29
 8017cb2:	d505      	bpl.n	8017cc0 <__sflush_r+0x44>
 8017cb4:	6863      	ldr	r3, [r4, #4]
 8017cb6:	1ad2      	subs	r2, r2, r3
 8017cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017cba:	b10b      	cbz	r3, 8017cc0 <__sflush_r+0x44>
 8017cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017cbe:	1ad2      	subs	r2, r2, r3
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017cc4:	6a21      	ldr	r1, [r4, #32]
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	47b0      	blx	r6
 8017cca:	1c43      	adds	r3, r0, #1
 8017ccc:	89a3      	ldrh	r3, [r4, #12]
 8017cce:	d106      	bne.n	8017cde <__sflush_r+0x62>
 8017cd0:	6829      	ldr	r1, [r5, #0]
 8017cd2:	291d      	cmp	r1, #29
 8017cd4:	d82b      	bhi.n	8017d2e <__sflush_r+0xb2>
 8017cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8017d80 <__sflush_r+0x104>)
 8017cd8:	40ca      	lsrs	r2, r1
 8017cda:	07d6      	lsls	r6, r2, #31
 8017cdc:	d527      	bpl.n	8017d2e <__sflush_r+0xb2>
 8017cde:	2200      	movs	r2, #0
 8017ce0:	6062      	str	r2, [r4, #4]
 8017ce2:	04d9      	lsls	r1, r3, #19
 8017ce4:	6922      	ldr	r2, [r4, #16]
 8017ce6:	6022      	str	r2, [r4, #0]
 8017ce8:	d504      	bpl.n	8017cf4 <__sflush_r+0x78>
 8017cea:	1c42      	adds	r2, r0, #1
 8017cec:	d101      	bne.n	8017cf2 <__sflush_r+0x76>
 8017cee:	682b      	ldr	r3, [r5, #0]
 8017cf0:	b903      	cbnz	r3, 8017cf4 <__sflush_r+0x78>
 8017cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8017cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017cf6:	602f      	str	r7, [r5, #0]
 8017cf8:	b1b9      	cbz	r1, 8017d2a <__sflush_r+0xae>
 8017cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017cfe:	4299      	cmp	r1, r3
 8017d00:	d002      	beq.n	8017d08 <__sflush_r+0x8c>
 8017d02:	4628      	mov	r0, r5
 8017d04:	f7fe f9be 	bl	8016084 <_free_r>
 8017d08:	2300      	movs	r3, #0
 8017d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d0c:	e00d      	b.n	8017d2a <__sflush_r+0xae>
 8017d0e:	2301      	movs	r3, #1
 8017d10:	4628      	mov	r0, r5
 8017d12:	47b0      	blx	r6
 8017d14:	4602      	mov	r2, r0
 8017d16:	1c50      	adds	r0, r2, #1
 8017d18:	d1c9      	bne.n	8017cae <__sflush_r+0x32>
 8017d1a:	682b      	ldr	r3, [r5, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d0c6      	beq.n	8017cae <__sflush_r+0x32>
 8017d20:	2b1d      	cmp	r3, #29
 8017d22:	d001      	beq.n	8017d28 <__sflush_r+0xac>
 8017d24:	2b16      	cmp	r3, #22
 8017d26:	d11e      	bne.n	8017d66 <__sflush_r+0xea>
 8017d28:	602f      	str	r7, [r5, #0]
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	e022      	b.n	8017d74 <__sflush_r+0xf8>
 8017d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d32:	b21b      	sxth	r3, r3
 8017d34:	e01b      	b.n	8017d6e <__sflush_r+0xf2>
 8017d36:	690f      	ldr	r7, [r1, #16]
 8017d38:	2f00      	cmp	r7, #0
 8017d3a:	d0f6      	beq.n	8017d2a <__sflush_r+0xae>
 8017d3c:	0793      	lsls	r3, r2, #30
 8017d3e:	680e      	ldr	r6, [r1, #0]
 8017d40:	bf08      	it	eq
 8017d42:	694b      	ldreq	r3, [r1, #20]
 8017d44:	600f      	str	r7, [r1, #0]
 8017d46:	bf18      	it	ne
 8017d48:	2300      	movne	r3, #0
 8017d4a:	eba6 0807 	sub.w	r8, r6, r7
 8017d4e:	608b      	str	r3, [r1, #8]
 8017d50:	f1b8 0f00 	cmp.w	r8, #0
 8017d54:	dde9      	ble.n	8017d2a <__sflush_r+0xae>
 8017d56:	6a21      	ldr	r1, [r4, #32]
 8017d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017d5a:	4643      	mov	r3, r8
 8017d5c:	463a      	mov	r2, r7
 8017d5e:	4628      	mov	r0, r5
 8017d60:	47b0      	blx	r6
 8017d62:	2800      	cmp	r0, #0
 8017d64:	dc08      	bgt.n	8017d78 <__sflush_r+0xfc>
 8017d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d6e:	81a3      	strh	r3, [r4, #12]
 8017d70:	f04f 30ff 	mov.w	r0, #4294967295
 8017d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d78:	4407      	add	r7, r0
 8017d7a:	eba8 0800 	sub.w	r8, r8, r0
 8017d7e:	e7e7      	b.n	8017d50 <__sflush_r+0xd4>
 8017d80:	20400001 	.word	0x20400001

08017d84 <_fflush_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	690b      	ldr	r3, [r1, #16]
 8017d88:	4605      	mov	r5, r0
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	b913      	cbnz	r3, 8017d94 <_fflush_r+0x10>
 8017d8e:	2500      	movs	r5, #0
 8017d90:	4628      	mov	r0, r5
 8017d92:	bd38      	pop	{r3, r4, r5, pc}
 8017d94:	b118      	cbz	r0, 8017d9e <_fflush_r+0x1a>
 8017d96:	6a03      	ldr	r3, [r0, #32]
 8017d98:	b90b      	cbnz	r3, 8017d9e <_fflush_r+0x1a>
 8017d9a:	f7fd f8fd 	bl	8014f98 <__sinit>
 8017d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d0f3      	beq.n	8017d8e <_fflush_r+0xa>
 8017da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017da8:	07d0      	lsls	r0, r2, #31
 8017daa:	d404      	bmi.n	8017db6 <_fflush_r+0x32>
 8017dac:	0599      	lsls	r1, r3, #22
 8017dae:	d402      	bmi.n	8017db6 <_fflush_r+0x32>
 8017db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017db2:	f7fd fb4a 	bl	801544a <__retarget_lock_acquire_recursive>
 8017db6:	4628      	mov	r0, r5
 8017db8:	4621      	mov	r1, r4
 8017dba:	f7ff ff5f 	bl	8017c7c <__sflush_r>
 8017dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017dc0:	07da      	lsls	r2, r3, #31
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	d4e4      	bmi.n	8017d90 <_fflush_r+0xc>
 8017dc6:	89a3      	ldrh	r3, [r4, #12]
 8017dc8:	059b      	lsls	r3, r3, #22
 8017dca:	d4e1      	bmi.n	8017d90 <_fflush_r+0xc>
 8017dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017dce:	f7fd fb3d 	bl	801544c <__retarget_lock_release_recursive>
 8017dd2:	e7dd      	b.n	8017d90 <_fflush_r+0xc>

08017dd4 <fiprintf>:
 8017dd4:	b40e      	push	{r1, r2, r3}
 8017dd6:	b503      	push	{r0, r1, lr}
 8017dd8:	4601      	mov	r1, r0
 8017dda:	ab03      	add	r3, sp, #12
 8017ddc:	4805      	ldr	r0, [pc, #20]	@ (8017df4 <fiprintf+0x20>)
 8017dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017de2:	6800      	ldr	r0, [r0, #0]
 8017de4:	9301      	str	r3, [sp, #4]
 8017de6:	f7ff fe31 	bl	8017a4c <_vfiprintf_r>
 8017dea:	b002      	add	sp, #8
 8017dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8017df0:	b003      	add	sp, #12
 8017df2:	4770      	bx	lr
 8017df4:	2000004c 	.word	0x2000004c

08017df8 <__swhatbuf_r>:
 8017df8:	b570      	push	{r4, r5, r6, lr}
 8017dfa:	460c      	mov	r4, r1
 8017dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e00:	2900      	cmp	r1, #0
 8017e02:	b096      	sub	sp, #88	@ 0x58
 8017e04:	4615      	mov	r5, r2
 8017e06:	461e      	mov	r6, r3
 8017e08:	da0d      	bge.n	8017e26 <__swhatbuf_r+0x2e>
 8017e0a:	89a3      	ldrh	r3, [r4, #12]
 8017e0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017e10:	f04f 0100 	mov.w	r1, #0
 8017e14:	bf14      	ite	ne
 8017e16:	2340      	movne	r3, #64	@ 0x40
 8017e18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017e1c:	2000      	movs	r0, #0
 8017e1e:	6031      	str	r1, [r6, #0]
 8017e20:	602b      	str	r3, [r5, #0]
 8017e22:	b016      	add	sp, #88	@ 0x58
 8017e24:	bd70      	pop	{r4, r5, r6, pc}
 8017e26:	466a      	mov	r2, sp
 8017e28:	f000 f848 	bl	8017ebc <_fstat_r>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	dbec      	blt.n	8017e0a <__swhatbuf_r+0x12>
 8017e30:	9901      	ldr	r1, [sp, #4]
 8017e32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017e36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017e3a:	4259      	negs	r1, r3
 8017e3c:	4159      	adcs	r1, r3
 8017e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e42:	e7eb      	b.n	8017e1c <__swhatbuf_r+0x24>

08017e44 <__smakebuf_r>:
 8017e44:	898b      	ldrh	r3, [r1, #12]
 8017e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e48:	079d      	lsls	r5, r3, #30
 8017e4a:	4606      	mov	r6, r0
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	d507      	bpl.n	8017e60 <__smakebuf_r+0x1c>
 8017e50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e54:	6023      	str	r3, [r4, #0]
 8017e56:	6123      	str	r3, [r4, #16]
 8017e58:	2301      	movs	r3, #1
 8017e5a:	6163      	str	r3, [r4, #20]
 8017e5c:	b003      	add	sp, #12
 8017e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e60:	ab01      	add	r3, sp, #4
 8017e62:	466a      	mov	r2, sp
 8017e64:	f7ff ffc8 	bl	8017df8 <__swhatbuf_r>
 8017e68:	9f00      	ldr	r7, [sp, #0]
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	4630      	mov	r0, r6
 8017e70:	f7fe f97c 	bl	801616c <_malloc_r>
 8017e74:	b948      	cbnz	r0, 8017e8a <__smakebuf_r+0x46>
 8017e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e7a:	059a      	lsls	r2, r3, #22
 8017e7c:	d4ee      	bmi.n	8017e5c <__smakebuf_r+0x18>
 8017e7e:	f023 0303 	bic.w	r3, r3, #3
 8017e82:	f043 0302 	orr.w	r3, r3, #2
 8017e86:	81a3      	strh	r3, [r4, #12]
 8017e88:	e7e2      	b.n	8017e50 <__smakebuf_r+0xc>
 8017e8a:	89a3      	ldrh	r3, [r4, #12]
 8017e8c:	6020      	str	r0, [r4, #0]
 8017e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e92:	81a3      	strh	r3, [r4, #12]
 8017e94:	9b01      	ldr	r3, [sp, #4]
 8017e96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e9a:	b15b      	cbz	r3, 8017eb4 <__smakebuf_r+0x70>
 8017e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f000 f81d 	bl	8017ee0 <_isatty_r>
 8017ea6:	b128      	cbz	r0, 8017eb4 <__smakebuf_r+0x70>
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	f023 0303 	bic.w	r3, r3, #3
 8017eae:	f043 0301 	orr.w	r3, r3, #1
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	89a3      	ldrh	r3, [r4, #12]
 8017eb6:	431d      	orrs	r5, r3
 8017eb8:	81a5      	strh	r5, [r4, #12]
 8017eba:	e7cf      	b.n	8017e5c <__smakebuf_r+0x18>

08017ebc <_fstat_r>:
 8017ebc:	b538      	push	{r3, r4, r5, lr}
 8017ebe:	4d07      	ldr	r5, [pc, #28]	@ (8017edc <_fstat_r+0x20>)
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	4608      	mov	r0, r1
 8017ec6:	4611      	mov	r1, r2
 8017ec8:	602b      	str	r3, [r5, #0]
 8017eca:	f7e9 fb95 	bl	80015f8 <_fstat>
 8017ece:	1c43      	adds	r3, r0, #1
 8017ed0:	d102      	bne.n	8017ed8 <_fstat_r+0x1c>
 8017ed2:	682b      	ldr	r3, [r5, #0]
 8017ed4:	b103      	cbz	r3, 8017ed8 <_fstat_r+0x1c>
 8017ed6:	6023      	str	r3, [r4, #0]
 8017ed8:	bd38      	pop	{r3, r4, r5, pc}
 8017eda:	bf00      	nop
 8017edc:	200083c0 	.word	0x200083c0

08017ee0 <_isatty_r>:
 8017ee0:	b538      	push	{r3, r4, r5, lr}
 8017ee2:	4d06      	ldr	r5, [pc, #24]	@ (8017efc <_isatty_r+0x1c>)
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	4604      	mov	r4, r0
 8017ee8:	4608      	mov	r0, r1
 8017eea:	602b      	str	r3, [r5, #0]
 8017eec:	f7e9 fb94 	bl	8001618 <_isatty>
 8017ef0:	1c43      	adds	r3, r0, #1
 8017ef2:	d102      	bne.n	8017efa <_isatty_r+0x1a>
 8017ef4:	682b      	ldr	r3, [r5, #0]
 8017ef6:	b103      	cbz	r3, 8017efa <_isatty_r+0x1a>
 8017ef8:	6023      	str	r3, [r4, #0]
 8017efa:	bd38      	pop	{r3, r4, r5, pc}
 8017efc:	200083c0 	.word	0x200083c0

08017f00 <_sbrk_r>:
 8017f00:	b538      	push	{r3, r4, r5, lr}
 8017f02:	4d06      	ldr	r5, [pc, #24]	@ (8017f1c <_sbrk_r+0x1c>)
 8017f04:	2300      	movs	r3, #0
 8017f06:	4604      	mov	r4, r0
 8017f08:	4608      	mov	r0, r1
 8017f0a:	602b      	str	r3, [r5, #0]
 8017f0c:	f7e9 fb9c 	bl	8001648 <_sbrk>
 8017f10:	1c43      	adds	r3, r0, #1
 8017f12:	d102      	bne.n	8017f1a <_sbrk_r+0x1a>
 8017f14:	682b      	ldr	r3, [r5, #0]
 8017f16:	b103      	cbz	r3, 8017f1a <_sbrk_r+0x1a>
 8017f18:	6023      	str	r3, [r4, #0]
 8017f1a:	bd38      	pop	{r3, r4, r5, pc}
 8017f1c:	200083c0 	.word	0x200083c0

08017f20 <nan>:
 8017f20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017f28 <nan+0x8>
 8017f24:	4770      	bx	lr
 8017f26:	bf00      	nop
 8017f28:	00000000 	.word	0x00000000
 8017f2c:	7ff80000 	.word	0x7ff80000

08017f30 <abort>:
 8017f30:	b508      	push	{r3, lr}
 8017f32:	2006      	movs	r0, #6
 8017f34:	f000 fbc4 	bl	80186c0 <raise>
 8017f38:	2001      	movs	r0, #1
 8017f3a:	f7e9 fb29 	bl	8001590 <_exit>

08017f3e <_calloc_r>:
 8017f3e:	b570      	push	{r4, r5, r6, lr}
 8017f40:	fba1 5402 	umull	r5, r4, r1, r2
 8017f44:	b934      	cbnz	r4, 8017f54 <_calloc_r+0x16>
 8017f46:	4629      	mov	r1, r5
 8017f48:	f7fe f910 	bl	801616c <_malloc_r>
 8017f4c:	4606      	mov	r6, r0
 8017f4e:	b928      	cbnz	r0, 8017f5c <_calloc_r+0x1e>
 8017f50:	4630      	mov	r0, r6
 8017f52:	bd70      	pop	{r4, r5, r6, pc}
 8017f54:	220c      	movs	r2, #12
 8017f56:	6002      	str	r2, [r0, #0]
 8017f58:	2600      	movs	r6, #0
 8017f5a:	e7f9      	b.n	8017f50 <_calloc_r+0x12>
 8017f5c:	462a      	mov	r2, r5
 8017f5e:	4621      	mov	r1, r4
 8017f60:	f7fd f9e4 	bl	801532c <memset>
 8017f64:	e7f4      	b.n	8017f50 <_calloc_r+0x12>

08017f66 <rshift>:
 8017f66:	6903      	ldr	r3, [r0, #16]
 8017f68:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f70:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017f74:	f100 0414 	add.w	r4, r0, #20
 8017f78:	dd45      	ble.n	8018006 <rshift+0xa0>
 8017f7a:	f011 011f 	ands.w	r1, r1, #31
 8017f7e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017f82:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017f86:	d10c      	bne.n	8017fa2 <rshift+0x3c>
 8017f88:	f100 0710 	add.w	r7, r0, #16
 8017f8c:	4629      	mov	r1, r5
 8017f8e:	42b1      	cmp	r1, r6
 8017f90:	d334      	bcc.n	8017ffc <rshift+0x96>
 8017f92:	1a9b      	subs	r3, r3, r2
 8017f94:	009b      	lsls	r3, r3, #2
 8017f96:	1eea      	subs	r2, r5, #3
 8017f98:	4296      	cmp	r6, r2
 8017f9a:	bf38      	it	cc
 8017f9c:	2300      	movcc	r3, #0
 8017f9e:	4423      	add	r3, r4
 8017fa0:	e015      	b.n	8017fce <rshift+0x68>
 8017fa2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017fa6:	f1c1 0820 	rsb	r8, r1, #32
 8017faa:	40cf      	lsrs	r7, r1
 8017fac:	f105 0e04 	add.w	lr, r5, #4
 8017fb0:	46a1      	mov	r9, r4
 8017fb2:	4576      	cmp	r6, lr
 8017fb4:	46f4      	mov	ip, lr
 8017fb6:	d815      	bhi.n	8017fe4 <rshift+0x7e>
 8017fb8:	1a9a      	subs	r2, r3, r2
 8017fba:	0092      	lsls	r2, r2, #2
 8017fbc:	3a04      	subs	r2, #4
 8017fbe:	3501      	adds	r5, #1
 8017fc0:	42ae      	cmp	r6, r5
 8017fc2:	bf38      	it	cc
 8017fc4:	2200      	movcc	r2, #0
 8017fc6:	18a3      	adds	r3, r4, r2
 8017fc8:	50a7      	str	r7, [r4, r2]
 8017fca:	b107      	cbz	r7, 8017fce <rshift+0x68>
 8017fcc:	3304      	adds	r3, #4
 8017fce:	1b1a      	subs	r2, r3, r4
 8017fd0:	42a3      	cmp	r3, r4
 8017fd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017fd6:	bf08      	it	eq
 8017fd8:	2300      	moveq	r3, #0
 8017fda:	6102      	str	r2, [r0, #16]
 8017fdc:	bf08      	it	eq
 8017fde:	6143      	streq	r3, [r0, #20]
 8017fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fe4:	f8dc c000 	ldr.w	ip, [ip]
 8017fe8:	fa0c fc08 	lsl.w	ip, ip, r8
 8017fec:	ea4c 0707 	orr.w	r7, ip, r7
 8017ff0:	f849 7b04 	str.w	r7, [r9], #4
 8017ff4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ff8:	40cf      	lsrs	r7, r1
 8017ffa:	e7da      	b.n	8017fb2 <rshift+0x4c>
 8017ffc:	f851 cb04 	ldr.w	ip, [r1], #4
 8018000:	f847 cf04 	str.w	ip, [r7, #4]!
 8018004:	e7c3      	b.n	8017f8e <rshift+0x28>
 8018006:	4623      	mov	r3, r4
 8018008:	e7e1      	b.n	8017fce <rshift+0x68>

0801800a <__hexdig_fun>:
 801800a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801800e:	2b09      	cmp	r3, #9
 8018010:	d802      	bhi.n	8018018 <__hexdig_fun+0xe>
 8018012:	3820      	subs	r0, #32
 8018014:	b2c0      	uxtb	r0, r0
 8018016:	4770      	bx	lr
 8018018:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801801c:	2b05      	cmp	r3, #5
 801801e:	d801      	bhi.n	8018024 <__hexdig_fun+0x1a>
 8018020:	3847      	subs	r0, #71	@ 0x47
 8018022:	e7f7      	b.n	8018014 <__hexdig_fun+0xa>
 8018024:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8018028:	2b05      	cmp	r3, #5
 801802a:	d801      	bhi.n	8018030 <__hexdig_fun+0x26>
 801802c:	3827      	subs	r0, #39	@ 0x27
 801802e:	e7f1      	b.n	8018014 <__hexdig_fun+0xa>
 8018030:	2000      	movs	r0, #0
 8018032:	4770      	bx	lr

08018034 <__gethex>:
 8018034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018038:	b085      	sub	sp, #20
 801803a:	468a      	mov	sl, r1
 801803c:	9302      	str	r3, [sp, #8]
 801803e:	680b      	ldr	r3, [r1, #0]
 8018040:	9001      	str	r0, [sp, #4]
 8018042:	4690      	mov	r8, r2
 8018044:	1c9c      	adds	r4, r3, #2
 8018046:	46a1      	mov	r9, r4
 8018048:	f814 0b01 	ldrb.w	r0, [r4], #1
 801804c:	2830      	cmp	r0, #48	@ 0x30
 801804e:	d0fa      	beq.n	8018046 <__gethex+0x12>
 8018050:	eba9 0303 	sub.w	r3, r9, r3
 8018054:	f1a3 0b02 	sub.w	fp, r3, #2
 8018058:	f7ff ffd7 	bl	801800a <__hexdig_fun>
 801805c:	4605      	mov	r5, r0
 801805e:	2800      	cmp	r0, #0
 8018060:	d168      	bne.n	8018134 <__gethex+0x100>
 8018062:	49a0      	ldr	r1, [pc, #640]	@ (80182e4 <__gethex+0x2b0>)
 8018064:	2201      	movs	r2, #1
 8018066:	4648      	mov	r0, r9
 8018068:	f7fd f968 	bl	801533c <strncmp>
 801806c:	4607      	mov	r7, r0
 801806e:	2800      	cmp	r0, #0
 8018070:	d167      	bne.n	8018142 <__gethex+0x10e>
 8018072:	f899 0001 	ldrb.w	r0, [r9, #1]
 8018076:	4626      	mov	r6, r4
 8018078:	f7ff ffc7 	bl	801800a <__hexdig_fun>
 801807c:	2800      	cmp	r0, #0
 801807e:	d062      	beq.n	8018146 <__gethex+0x112>
 8018080:	4623      	mov	r3, r4
 8018082:	7818      	ldrb	r0, [r3, #0]
 8018084:	2830      	cmp	r0, #48	@ 0x30
 8018086:	4699      	mov	r9, r3
 8018088:	f103 0301 	add.w	r3, r3, #1
 801808c:	d0f9      	beq.n	8018082 <__gethex+0x4e>
 801808e:	f7ff ffbc 	bl	801800a <__hexdig_fun>
 8018092:	fab0 f580 	clz	r5, r0
 8018096:	096d      	lsrs	r5, r5, #5
 8018098:	f04f 0b01 	mov.w	fp, #1
 801809c:	464a      	mov	r2, r9
 801809e:	4616      	mov	r6, r2
 80180a0:	3201      	adds	r2, #1
 80180a2:	7830      	ldrb	r0, [r6, #0]
 80180a4:	f7ff ffb1 	bl	801800a <__hexdig_fun>
 80180a8:	2800      	cmp	r0, #0
 80180aa:	d1f8      	bne.n	801809e <__gethex+0x6a>
 80180ac:	498d      	ldr	r1, [pc, #564]	@ (80182e4 <__gethex+0x2b0>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	4630      	mov	r0, r6
 80180b2:	f7fd f943 	bl	801533c <strncmp>
 80180b6:	2800      	cmp	r0, #0
 80180b8:	d13f      	bne.n	801813a <__gethex+0x106>
 80180ba:	b944      	cbnz	r4, 80180ce <__gethex+0x9a>
 80180bc:	1c74      	adds	r4, r6, #1
 80180be:	4622      	mov	r2, r4
 80180c0:	4616      	mov	r6, r2
 80180c2:	3201      	adds	r2, #1
 80180c4:	7830      	ldrb	r0, [r6, #0]
 80180c6:	f7ff ffa0 	bl	801800a <__hexdig_fun>
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d1f8      	bne.n	80180c0 <__gethex+0x8c>
 80180ce:	1ba4      	subs	r4, r4, r6
 80180d0:	00a7      	lsls	r7, r4, #2
 80180d2:	7833      	ldrb	r3, [r6, #0]
 80180d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80180d8:	2b50      	cmp	r3, #80	@ 0x50
 80180da:	d13e      	bne.n	801815a <__gethex+0x126>
 80180dc:	7873      	ldrb	r3, [r6, #1]
 80180de:	2b2b      	cmp	r3, #43	@ 0x2b
 80180e0:	d033      	beq.n	801814a <__gethex+0x116>
 80180e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80180e4:	d034      	beq.n	8018150 <__gethex+0x11c>
 80180e6:	1c71      	adds	r1, r6, #1
 80180e8:	2400      	movs	r4, #0
 80180ea:	7808      	ldrb	r0, [r1, #0]
 80180ec:	f7ff ff8d 	bl	801800a <__hexdig_fun>
 80180f0:	1e43      	subs	r3, r0, #1
 80180f2:	b2db      	uxtb	r3, r3
 80180f4:	2b18      	cmp	r3, #24
 80180f6:	d830      	bhi.n	801815a <__gethex+0x126>
 80180f8:	f1a0 0210 	sub.w	r2, r0, #16
 80180fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018100:	f7ff ff83 	bl	801800a <__hexdig_fun>
 8018104:	f100 3cff 	add.w	ip, r0, #4294967295
 8018108:	fa5f fc8c 	uxtb.w	ip, ip
 801810c:	f1bc 0f18 	cmp.w	ip, #24
 8018110:	f04f 030a 	mov.w	r3, #10
 8018114:	d91e      	bls.n	8018154 <__gethex+0x120>
 8018116:	b104      	cbz	r4, 801811a <__gethex+0xe6>
 8018118:	4252      	negs	r2, r2
 801811a:	4417      	add	r7, r2
 801811c:	f8ca 1000 	str.w	r1, [sl]
 8018120:	b1ed      	cbz	r5, 801815e <__gethex+0x12a>
 8018122:	f1bb 0f00 	cmp.w	fp, #0
 8018126:	bf0c      	ite	eq
 8018128:	2506      	moveq	r5, #6
 801812a:	2500      	movne	r5, #0
 801812c:	4628      	mov	r0, r5
 801812e:	b005      	add	sp, #20
 8018130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018134:	2500      	movs	r5, #0
 8018136:	462c      	mov	r4, r5
 8018138:	e7b0      	b.n	801809c <__gethex+0x68>
 801813a:	2c00      	cmp	r4, #0
 801813c:	d1c7      	bne.n	80180ce <__gethex+0x9a>
 801813e:	4627      	mov	r7, r4
 8018140:	e7c7      	b.n	80180d2 <__gethex+0x9e>
 8018142:	464e      	mov	r6, r9
 8018144:	462f      	mov	r7, r5
 8018146:	2501      	movs	r5, #1
 8018148:	e7c3      	b.n	80180d2 <__gethex+0x9e>
 801814a:	2400      	movs	r4, #0
 801814c:	1cb1      	adds	r1, r6, #2
 801814e:	e7cc      	b.n	80180ea <__gethex+0xb6>
 8018150:	2401      	movs	r4, #1
 8018152:	e7fb      	b.n	801814c <__gethex+0x118>
 8018154:	fb03 0002 	mla	r0, r3, r2, r0
 8018158:	e7ce      	b.n	80180f8 <__gethex+0xc4>
 801815a:	4631      	mov	r1, r6
 801815c:	e7de      	b.n	801811c <__gethex+0xe8>
 801815e:	eba6 0309 	sub.w	r3, r6, r9
 8018162:	3b01      	subs	r3, #1
 8018164:	4629      	mov	r1, r5
 8018166:	2b07      	cmp	r3, #7
 8018168:	dc0a      	bgt.n	8018180 <__gethex+0x14c>
 801816a:	9801      	ldr	r0, [sp, #4]
 801816c:	f7fe f88a 	bl	8016284 <_Balloc>
 8018170:	4604      	mov	r4, r0
 8018172:	b940      	cbnz	r0, 8018186 <__gethex+0x152>
 8018174:	4b5c      	ldr	r3, [pc, #368]	@ (80182e8 <__gethex+0x2b4>)
 8018176:	4602      	mov	r2, r0
 8018178:	21e4      	movs	r1, #228	@ 0xe4
 801817a:	485c      	ldr	r0, [pc, #368]	@ (80182ec <__gethex+0x2b8>)
 801817c:	f7fd f97c 	bl	8015478 <__assert_func>
 8018180:	3101      	adds	r1, #1
 8018182:	105b      	asrs	r3, r3, #1
 8018184:	e7ef      	b.n	8018166 <__gethex+0x132>
 8018186:	f100 0a14 	add.w	sl, r0, #20
 801818a:	2300      	movs	r3, #0
 801818c:	4655      	mov	r5, sl
 801818e:	469b      	mov	fp, r3
 8018190:	45b1      	cmp	r9, r6
 8018192:	d337      	bcc.n	8018204 <__gethex+0x1d0>
 8018194:	f845 bb04 	str.w	fp, [r5], #4
 8018198:	eba5 050a 	sub.w	r5, r5, sl
 801819c:	10ad      	asrs	r5, r5, #2
 801819e:	6125      	str	r5, [r4, #16]
 80181a0:	4658      	mov	r0, fp
 80181a2:	f7fe f961 	bl	8016468 <__hi0bits>
 80181a6:	016d      	lsls	r5, r5, #5
 80181a8:	f8d8 6000 	ldr.w	r6, [r8]
 80181ac:	1a2d      	subs	r5, r5, r0
 80181ae:	42b5      	cmp	r5, r6
 80181b0:	dd54      	ble.n	801825c <__gethex+0x228>
 80181b2:	1bad      	subs	r5, r5, r6
 80181b4:	4629      	mov	r1, r5
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7fe fcea 	bl	8016b90 <__any_on>
 80181bc:	4681      	mov	r9, r0
 80181be:	b178      	cbz	r0, 80181e0 <__gethex+0x1ac>
 80181c0:	1e6b      	subs	r3, r5, #1
 80181c2:	1159      	asrs	r1, r3, #5
 80181c4:	f003 021f 	and.w	r2, r3, #31
 80181c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80181cc:	f04f 0901 	mov.w	r9, #1
 80181d0:	fa09 f202 	lsl.w	r2, r9, r2
 80181d4:	420a      	tst	r2, r1
 80181d6:	d003      	beq.n	80181e0 <__gethex+0x1ac>
 80181d8:	454b      	cmp	r3, r9
 80181da:	dc36      	bgt.n	801824a <__gethex+0x216>
 80181dc:	f04f 0902 	mov.w	r9, #2
 80181e0:	4629      	mov	r1, r5
 80181e2:	4620      	mov	r0, r4
 80181e4:	f7ff febf 	bl	8017f66 <rshift>
 80181e8:	442f      	add	r7, r5
 80181ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80181ee:	42bb      	cmp	r3, r7
 80181f0:	da42      	bge.n	8018278 <__gethex+0x244>
 80181f2:	9801      	ldr	r0, [sp, #4]
 80181f4:	4621      	mov	r1, r4
 80181f6:	f7fe f885 	bl	8016304 <_Bfree>
 80181fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181fc:	2300      	movs	r3, #0
 80181fe:	6013      	str	r3, [r2, #0]
 8018200:	25a3      	movs	r5, #163	@ 0xa3
 8018202:	e793      	b.n	801812c <__gethex+0xf8>
 8018204:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8018208:	2a2e      	cmp	r2, #46	@ 0x2e
 801820a:	d012      	beq.n	8018232 <__gethex+0x1fe>
 801820c:	2b20      	cmp	r3, #32
 801820e:	d104      	bne.n	801821a <__gethex+0x1e6>
 8018210:	f845 bb04 	str.w	fp, [r5], #4
 8018214:	f04f 0b00 	mov.w	fp, #0
 8018218:	465b      	mov	r3, fp
 801821a:	7830      	ldrb	r0, [r6, #0]
 801821c:	9303      	str	r3, [sp, #12]
 801821e:	f7ff fef4 	bl	801800a <__hexdig_fun>
 8018222:	9b03      	ldr	r3, [sp, #12]
 8018224:	f000 000f 	and.w	r0, r0, #15
 8018228:	4098      	lsls	r0, r3
 801822a:	ea4b 0b00 	orr.w	fp, fp, r0
 801822e:	3304      	adds	r3, #4
 8018230:	e7ae      	b.n	8018190 <__gethex+0x15c>
 8018232:	45b1      	cmp	r9, r6
 8018234:	d8ea      	bhi.n	801820c <__gethex+0x1d8>
 8018236:	492b      	ldr	r1, [pc, #172]	@ (80182e4 <__gethex+0x2b0>)
 8018238:	9303      	str	r3, [sp, #12]
 801823a:	2201      	movs	r2, #1
 801823c:	4630      	mov	r0, r6
 801823e:	f7fd f87d 	bl	801533c <strncmp>
 8018242:	9b03      	ldr	r3, [sp, #12]
 8018244:	2800      	cmp	r0, #0
 8018246:	d1e1      	bne.n	801820c <__gethex+0x1d8>
 8018248:	e7a2      	b.n	8018190 <__gethex+0x15c>
 801824a:	1ea9      	subs	r1, r5, #2
 801824c:	4620      	mov	r0, r4
 801824e:	f7fe fc9f 	bl	8016b90 <__any_on>
 8018252:	2800      	cmp	r0, #0
 8018254:	d0c2      	beq.n	80181dc <__gethex+0x1a8>
 8018256:	f04f 0903 	mov.w	r9, #3
 801825a:	e7c1      	b.n	80181e0 <__gethex+0x1ac>
 801825c:	da09      	bge.n	8018272 <__gethex+0x23e>
 801825e:	1b75      	subs	r5, r6, r5
 8018260:	4621      	mov	r1, r4
 8018262:	9801      	ldr	r0, [sp, #4]
 8018264:	462a      	mov	r2, r5
 8018266:	f7fe fa5d 	bl	8016724 <__lshift>
 801826a:	1b7f      	subs	r7, r7, r5
 801826c:	4604      	mov	r4, r0
 801826e:	f100 0a14 	add.w	sl, r0, #20
 8018272:	f04f 0900 	mov.w	r9, #0
 8018276:	e7b8      	b.n	80181ea <__gethex+0x1b6>
 8018278:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801827c:	42bd      	cmp	r5, r7
 801827e:	dd6f      	ble.n	8018360 <__gethex+0x32c>
 8018280:	1bed      	subs	r5, r5, r7
 8018282:	42ae      	cmp	r6, r5
 8018284:	dc34      	bgt.n	80182f0 <__gethex+0x2bc>
 8018286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801828a:	2b02      	cmp	r3, #2
 801828c:	d022      	beq.n	80182d4 <__gethex+0x2a0>
 801828e:	2b03      	cmp	r3, #3
 8018290:	d024      	beq.n	80182dc <__gethex+0x2a8>
 8018292:	2b01      	cmp	r3, #1
 8018294:	d115      	bne.n	80182c2 <__gethex+0x28e>
 8018296:	42ae      	cmp	r6, r5
 8018298:	d113      	bne.n	80182c2 <__gethex+0x28e>
 801829a:	2e01      	cmp	r6, #1
 801829c:	d10b      	bne.n	80182b6 <__gethex+0x282>
 801829e:	9a02      	ldr	r2, [sp, #8]
 80182a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182a4:	6013      	str	r3, [r2, #0]
 80182a6:	2301      	movs	r3, #1
 80182a8:	6123      	str	r3, [r4, #16]
 80182aa:	f8ca 3000 	str.w	r3, [sl]
 80182ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182b0:	2562      	movs	r5, #98	@ 0x62
 80182b2:	601c      	str	r4, [r3, #0]
 80182b4:	e73a      	b.n	801812c <__gethex+0xf8>
 80182b6:	1e71      	subs	r1, r6, #1
 80182b8:	4620      	mov	r0, r4
 80182ba:	f7fe fc69 	bl	8016b90 <__any_on>
 80182be:	2800      	cmp	r0, #0
 80182c0:	d1ed      	bne.n	801829e <__gethex+0x26a>
 80182c2:	9801      	ldr	r0, [sp, #4]
 80182c4:	4621      	mov	r1, r4
 80182c6:	f7fe f81d 	bl	8016304 <_Bfree>
 80182ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182cc:	2300      	movs	r3, #0
 80182ce:	6013      	str	r3, [r2, #0]
 80182d0:	2550      	movs	r5, #80	@ 0x50
 80182d2:	e72b      	b.n	801812c <__gethex+0xf8>
 80182d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d1f3      	bne.n	80182c2 <__gethex+0x28e>
 80182da:	e7e0      	b.n	801829e <__gethex+0x26a>
 80182dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d1dd      	bne.n	801829e <__gethex+0x26a>
 80182e2:	e7ee      	b.n	80182c2 <__gethex+0x28e>
 80182e4:	0801c0fd 	.word	0x0801c0fd
 80182e8:	0801c093 	.word	0x0801c093
 80182ec:	0801c118 	.word	0x0801c118
 80182f0:	1e6f      	subs	r7, r5, #1
 80182f2:	f1b9 0f00 	cmp.w	r9, #0
 80182f6:	d130      	bne.n	801835a <__gethex+0x326>
 80182f8:	b127      	cbz	r7, 8018304 <__gethex+0x2d0>
 80182fa:	4639      	mov	r1, r7
 80182fc:	4620      	mov	r0, r4
 80182fe:	f7fe fc47 	bl	8016b90 <__any_on>
 8018302:	4681      	mov	r9, r0
 8018304:	117a      	asrs	r2, r7, #5
 8018306:	2301      	movs	r3, #1
 8018308:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801830c:	f007 071f 	and.w	r7, r7, #31
 8018310:	40bb      	lsls	r3, r7
 8018312:	4213      	tst	r3, r2
 8018314:	4629      	mov	r1, r5
 8018316:	4620      	mov	r0, r4
 8018318:	bf18      	it	ne
 801831a:	f049 0902 	orrne.w	r9, r9, #2
 801831e:	f7ff fe22 	bl	8017f66 <rshift>
 8018322:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8018326:	1b76      	subs	r6, r6, r5
 8018328:	2502      	movs	r5, #2
 801832a:	f1b9 0f00 	cmp.w	r9, #0
 801832e:	d047      	beq.n	80183c0 <__gethex+0x38c>
 8018330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018334:	2b02      	cmp	r3, #2
 8018336:	d015      	beq.n	8018364 <__gethex+0x330>
 8018338:	2b03      	cmp	r3, #3
 801833a:	d017      	beq.n	801836c <__gethex+0x338>
 801833c:	2b01      	cmp	r3, #1
 801833e:	d109      	bne.n	8018354 <__gethex+0x320>
 8018340:	f019 0f02 	tst.w	r9, #2
 8018344:	d006      	beq.n	8018354 <__gethex+0x320>
 8018346:	f8da 3000 	ldr.w	r3, [sl]
 801834a:	ea49 0903 	orr.w	r9, r9, r3
 801834e:	f019 0f01 	tst.w	r9, #1
 8018352:	d10e      	bne.n	8018372 <__gethex+0x33e>
 8018354:	f045 0510 	orr.w	r5, r5, #16
 8018358:	e032      	b.n	80183c0 <__gethex+0x38c>
 801835a:	f04f 0901 	mov.w	r9, #1
 801835e:	e7d1      	b.n	8018304 <__gethex+0x2d0>
 8018360:	2501      	movs	r5, #1
 8018362:	e7e2      	b.n	801832a <__gethex+0x2f6>
 8018364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018366:	f1c3 0301 	rsb	r3, r3, #1
 801836a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801836c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801836e:	2b00      	cmp	r3, #0
 8018370:	d0f0      	beq.n	8018354 <__gethex+0x320>
 8018372:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018376:	f104 0314 	add.w	r3, r4, #20
 801837a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801837e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018382:	f04f 0c00 	mov.w	ip, #0
 8018386:	4618      	mov	r0, r3
 8018388:	f853 2b04 	ldr.w	r2, [r3], #4
 801838c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018390:	d01b      	beq.n	80183ca <__gethex+0x396>
 8018392:	3201      	adds	r2, #1
 8018394:	6002      	str	r2, [r0, #0]
 8018396:	2d02      	cmp	r5, #2
 8018398:	f104 0314 	add.w	r3, r4, #20
 801839c:	d13c      	bne.n	8018418 <__gethex+0x3e4>
 801839e:	f8d8 2000 	ldr.w	r2, [r8]
 80183a2:	3a01      	subs	r2, #1
 80183a4:	42b2      	cmp	r2, r6
 80183a6:	d109      	bne.n	80183bc <__gethex+0x388>
 80183a8:	1171      	asrs	r1, r6, #5
 80183aa:	2201      	movs	r2, #1
 80183ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183b0:	f006 061f 	and.w	r6, r6, #31
 80183b4:	fa02 f606 	lsl.w	r6, r2, r6
 80183b8:	421e      	tst	r6, r3
 80183ba:	d13a      	bne.n	8018432 <__gethex+0x3fe>
 80183bc:	f045 0520 	orr.w	r5, r5, #32
 80183c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183c2:	601c      	str	r4, [r3, #0]
 80183c4:	9b02      	ldr	r3, [sp, #8]
 80183c6:	601f      	str	r7, [r3, #0]
 80183c8:	e6b0      	b.n	801812c <__gethex+0xf8>
 80183ca:	4299      	cmp	r1, r3
 80183cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80183d0:	d8d9      	bhi.n	8018386 <__gethex+0x352>
 80183d2:	68a3      	ldr	r3, [r4, #8]
 80183d4:	459b      	cmp	fp, r3
 80183d6:	db17      	blt.n	8018408 <__gethex+0x3d4>
 80183d8:	6861      	ldr	r1, [r4, #4]
 80183da:	9801      	ldr	r0, [sp, #4]
 80183dc:	3101      	adds	r1, #1
 80183de:	f7fd ff51 	bl	8016284 <_Balloc>
 80183e2:	4681      	mov	r9, r0
 80183e4:	b918      	cbnz	r0, 80183ee <__gethex+0x3ba>
 80183e6:	4b1a      	ldr	r3, [pc, #104]	@ (8018450 <__gethex+0x41c>)
 80183e8:	4602      	mov	r2, r0
 80183ea:	2184      	movs	r1, #132	@ 0x84
 80183ec:	e6c5      	b.n	801817a <__gethex+0x146>
 80183ee:	6922      	ldr	r2, [r4, #16]
 80183f0:	3202      	adds	r2, #2
 80183f2:	f104 010c 	add.w	r1, r4, #12
 80183f6:	0092      	lsls	r2, r2, #2
 80183f8:	300c      	adds	r0, #12
 80183fa:	f7fd f828 	bl	801544e <memcpy>
 80183fe:	4621      	mov	r1, r4
 8018400:	9801      	ldr	r0, [sp, #4]
 8018402:	f7fd ff7f 	bl	8016304 <_Bfree>
 8018406:	464c      	mov	r4, r9
 8018408:	6923      	ldr	r3, [r4, #16]
 801840a:	1c5a      	adds	r2, r3, #1
 801840c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018410:	6122      	str	r2, [r4, #16]
 8018412:	2201      	movs	r2, #1
 8018414:	615a      	str	r2, [r3, #20]
 8018416:	e7be      	b.n	8018396 <__gethex+0x362>
 8018418:	6922      	ldr	r2, [r4, #16]
 801841a:	455a      	cmp	r2, fp
 801841c:	dd0b      	ble.n	8018436 <__gethex+0x402>
 801841e:	2101      	movs	r1, #1
 8018420:	4620      	mov	r0, r4
 8018422:	f7ff fda0 	bl	8017f66 <rshift>
 8018426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801842a:	3701      	adds	r7, #1
 801842c:	42bb      	cmp	r3, r7
 801842e:	f6ff aee0 	blt.w	80181f2 <__gethex+0x1be>
 8018432:	2501      	movs	r5, #1
 8018434:	e7c2      	b.n	80183bc <__gethex+0x388>
 8018436:	f016 061f 	ands.w	r6, r6, #31
 801843a:	d0fa      	beq.n	8018432 <__gethex+0x3fe>
 801843c:	4453      	add	r3, sl
 801843e:	f1c6 0620 	rsb	r6, r6, #32
 8018442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018446:	f7fe f80f 	bl	8016468 <__hi0bits>
 801844a:	42b0      	cmp	r0, r6
 801844c:	dbe7      	blt.n	801841e <__gethex+0x3ea>
 801844e:	e7f0      	b.n	8018432 <__gethex+0x3fe>
 8018450:	0801c093 	.word	0x0801c093

08018454 <L_shift>:
 8018454:	f1c2 0208 	rsb	r2, r2, #8
 8018458:	0092      	lsls	r2, r2, #2
 801845a:	b570      	push	{r4, r5, r6, lr}
 801845c:	f1c2 0620 	rsb	r6, r2, #32
 8018460:	6843      	ldr	r3, [r0, #4]
 8018462:	6804      	ldr	r4, [r0, #0]
 8018464:	fa03 f506 	lsl.w	r5, r3, r6
 8018468:	432c      	orrs	r4, r5
 801846a:	40d3      	lsrs	r3, r2
 801846c:	6004      	str	r4, [r0, #0]
 801846e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018472:	4288      	cmp	r0, r1
 8018474:	d3f4      	bcc.n	8018460 <L_shift+0xc>
 8018476:	bd70      	pop	{r4, r5, r6, pc}

08018478 <__match>:
 8018478:	b530      	push	{r4, r5, lr}
 801847a:	6803      	ldr	r3, [r0, #0]
 801847c:	3301      	adds	r3, #1
 801847e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018482:	b914      	cbnz	r4, 801848a <__match+0x12>
 8018484:	6003      	str	r3, [r0, #0]
 8018486:	2001      	movs	r0, #1
 8018488:	bd30      	pop	{r4, r5, pc}
 801848a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801848e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8018492:	2d19      	cmp	r5, #25
 8018494:	bf98      	it	ls
 8018496:	3220      	addls	r2, #32
 8018498:	42a2      	cmp	r2, r4
 801849a:	d0f0      	beq.n	801847e <__match+0x6>
 801849c:	2000      	movs	r0, #0
 801849e:	e7f3      	b.n	8018488 <__match+0x10>

080184a0 <__hexnan>:
 80184a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a4:	680b      	ldr	r3, [r1, #0]
 80184a6:	6801      	ldr	r1, [r0, #0]
 80184a8:	115e      	asrs	r6, r3, #5
 80184aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80184ae:	f013 031f 	ands.w	r3, r3, #31
 80184b2:	b087      	sub	sp, #28
 80184b4:	bf18      	it	ne
 80184b6:	3604      	addne	r6, #4
 80184b8:	2500      	movs	r5, #0
 80184ba:	1f37      	subs	r7, r6, #4
 80184bc:	4682      	mov	sl, r0
 80184be:	4690      	mov	r8, r2
 80184c0:	9301      	str	r3, [sp, #4]
 80184c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80184c6:	46b9      	mov	r9, r7
 80184c8:	463c      	mov	r4, r7
 80184ca:	9502      	str	r5, [sp, #8]
 80184cc:	46ab      	mov	fp, r5
 80184ce:	784a      	ldrb	r2, [r1, #1]
 80184d0:	1c4b      	adds	r3, r1, #1
 80184d2:	9303      	str	r3, [sp, #12]
 80184d4:	b342      	cbz	r2, 8018528 <__hexnan+0x88>
 80184d6:	4610      	mov	r0, r2
 80184d8:	9105      	str	r1, [sp, #20]
 80184da:	9204      	str	r2, [sp, #16]
 80184dc:	f7ff fd95 	bl	801800a <__hexdig_fun>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	d151      	bne.n	8018588 <__hexnan+0xe8>
 80184e4:	9a04      	ldr	r2, [sp, #16]
 80184e6:	9905      	ldr	r1, [sp, #20]
 80184e8:	2a20      	cmp	r2, #32
 80184ea:	d818      	bhi.n	801851e <__hexnan+0x7e>
 80184ec:	9b02      	ldr	r3, [sp, #8]
 80184ee:	459b      	cmp	fp, r3
 80184f0:	dd13      	ble.n	801851a <__hexnan+0x7a>
 80184f2:	454c      	cmp	r4, r9
 80184f4:	d206      	bcs.n	8018504 <__hexnan+0x64>
 80184f6:	2d07      	cmp	r5, #7
 80184f8:	dc04      	bgt.n	8018504 <__hexnan+0x64>
 80184fa:	462a      	mov	r2, r5
 80184fc:	4649      	mov	r1, r9
 80184fe:	4620      	mov	r0, r4
 8018500:	f7ff ffa8 	bl	8018454 <L_shift>
 8018504:	4544      	cmp	r4, r8
 8018506:	d952      	bls.n	80185ae <__hexnan+0x10e>
 8018508:	2300      	movs	r3, #0
 801850a:	f1a4 0904 	sub.w	r9, r4, #4
 801850e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018512:	f8cd b008 	str.w	fp, [sp, #8]
 8018516:	464c      	mov	r4, r9
 8018518:	461d      	mov	r5, r3
 801851a:	9903      	ldr	r1, [sp, #12]
 801851c:	e7d7      	b.n	80184ce <__hexnan+0x2e>
 801851e:	2a29      	cmp	r2, #41	@ 0x29
 8018520:	d157      	bne.n	80185d2 <__hexnan+0x132>
 8018522:	3102      	adds	r1, #2
 8018524:	f8ca 1000 	str.w	r1, [sl]
 8018528:	f1bb 0f00 	cmp.w	fp, #0
 801852c:	d051      	beq.n	80185d2 <__hexnan+0x132>
 801852e:	454c      	cmp	r4, r9
 8018530:	d206      	bcs.n	8018540 <__hexnan+0xa0>
 8018532:	2d07      	cmp	r5, #7
 8018534:	dc04      	bgt.n	8018540 <__hexnan+0xa0>
 8018536:	462a      	mov	r2, r5
 8018538:	4649      	mov	r1, r9
 801853a:	4620      	mov	r0, r4
 801853c:	f7ff ff8a 	bl	8018454 <L_shift>
 8018540:	4544      	cmp	r4, r8
 8018542:	d936      	bls.n	80185b2 <__hexnan+0x112>
 8018544:	f1a8 0204 	sub.w	r2, r8, #4
 8018548:	4623      	mov	r3, r4
 801854a:	f853 1b04 	ldr.w	r1, [r3], #4
 801854e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018552:	429f      	cmp	r7, r3
 8018554:	d2f9      	bcs.n	801854a <__hexnan+0xaa>
 8018556:	1b3b      	subs	r3, r7, r4
 8018558:	f023 0303 	bic.w	r3, r3, #3
 801855c:	3304      	adds	r3, #4
 801855e:	3401      	adds	r4, #1
 8018560:	3e03      	subs	r6, #3
 8018562:	42b4      	cmp	r4, r6
 8018564:	bf88      	it	hi
 8018566:	2304      	movhi	r3, #4
 8018568:	4443      	add	r3, r8
 801856a:	2200      	movs	r2, #0
 801856c:	f843 2b04 	str.w	r2, [r3], #4
 8018570:	429f      	cmp	r7, r3
 8018572:	d2fb      	bcs.n	801856c <__hexnan+0xcc>
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	b91b      	cbnz	r3, 8018580 <__hexnan+0xe0>
 8018578:	4547      	cmp	r7, r8
 801857a:	d128      	bne.n	80185ce <__hexnan+0x12e>
 801857c:	2301      	movs	r3, #1
 801857e:	603b      	str	r3, [r7, #0]
 8018580:	2005      	movs	r0, #5
 8018582:	b007      	add	sp, #28
 8018584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018588:	3501      	adds	r5, #1
 801858a:	2d08      	cmp	r5, #8
 801858c:	f10b 0b01 	add.w	fp, fp, #1
 8018590:	dd06      	ble.n	80185a0 <__hexnan+0x100>
 8018592:	4544      	cmp	r4, r8
 8018594:	d9c1      	bls.n	801851a <__hexnan+0x7a>
 8018596:	2300      	movs	r3, #0
 8018598:	f844 3c04 	str.w	r3, [r4, #-4]
 801859c:	2501      	movs	r5, #1
 801859e:	3c04      	subs	r4, #4
 80185a0:	6822      	ldr	r2, [r4, #0]
 80185a2:	f000 000f 	and.w	r0, r0, #15
 80185a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185aa:	6020      	str	r0, [r4, #0]
 80185ac:	e7b5      	b.n	801851a <__hexnan+0x7a>
 80185ae:	2508      	movs	r5, #8
 80185b0:	e7b3      	b.n	801851a <__hexnan+0x7a>
 80185b2:	9b01      	ldr	r3, [sp, #4]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d0dd      	beq.n	8018574 <__hexnan+0xd4>
 80185b8:	f1c3 0320 	rsb	r3, r3, #32
 80185bc:	f04f 32ff 	mov.w	r2, #4294967295
 80185c0:	40da      	lsrs	r2, r3
 80185c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80185c6:	4013      	ands	r3, r2
 80185c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80185cc:	e7d2      	b.n	8018574 <__hexnan+0xd4>
 80185ce:	3f04      	subs	r7, #4
 80185d0:	e7d0      	b.n	8018574 <__hexnan+0xd4>
 80185d2:	2004      	movs	r0, #4
 80185d4:	e7d5      	b.n	8018582 <__hexnan+0xe2>

080185d6 <__ascii_mbtowc>:
 80185d6:	b082      	sub	sp, #8
 80185d8:	b901      	cbnz	r1, 80185dc <__ascii_mbtowc+0x6>
 80185da:	a901      	add	r1, sp, #4
 80185dc:	b142      	cbz	r2, 80185f0 <__ascii_mbtowc+0x1a>
 80185de:	b14b      	cbz	r3, 80185f4 <__ascii_mbtowc+0x1e>
 80185e0:	7813      	ldrb	r3, [r2, #0]
 80185e2:	600b      	str	r3, [r1, #0]
 80185e4:	7812      	ldrb	r2, [r2, #0]
 80185e6:	1e10      	subs	r0, r2, #0
 80185e8:	bf18      	it	ne
 80185ea:	2001      	movne	r0, #1
 80185ec:	b002      	add	sp, #8
 80185ee:	4770      	bx	lr
 80185f0:	4610      	mov	r0, r2
 80185f2:	e7fb      	b.n	80185ec <__ascii_mbtowc+0x16>
 80185f4:	f06f 0001 	mvn.w	r0, #1
 80185f8:	e7f8      	b.n	80185ec <__ascii_mbtowc+0x16>

080185fa <_realloc_r>:
 80185fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185fe:	4607      	mov	r7, r0
 8018600:	4614      	mov	r4, r2
 8018602:	460d      	mov	r5, r1
 8018604:	b921      	cbnz	r1, 8018610 <_realloc_r+0x16>
 8018606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801860a:	4611      	mov	r1, r2
 801860c:	f7fd bdae 	b.w	801616c <_malloc_r>
 8018610:	b92a      	cbnz	r2, 801861e <_realloc_r+0x24>
 8018612:	f7fd fd37 	bl	8016084 <_free_r>
 8018616:	4625      	mov	r5, r4
 8018618:	4628      	mov	r0, r5
 801861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801861e:	f000 f86b 	bl	80186f8 <_malloc_usable_size_r>
 8018622:	4284      	cmp	r4, r0
 8018624:	4606      	mov	r6, r0
 8018626:	d802      	bhi.n	801862e <_realloc_r+0x34>
 8018628:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801862c:	d8f4      	bhi.n	8018618 <_realloc_r+0x1e>
 801862e:	4621      	mov	r1, r4
 8018630:	4638      	mov	r0, r7
 8018632:	f7fd fd9b 	bl	801616c <_malloc_r>
 8018636:	4680      	mov	r8, r0
 8018638:	b908      	cbnz	r0, 801863e <_realloc_r+0x44>
 801863a:	4645      	mov	r5, r8
 801863c:	e7ec      	b.n	8018618 <_realloc_r+0x1e>
 801863e:	42b4      	cmp	r4, r6
 8018640:	4622      	mov	r2, r4
 8018642:	4629      	mov	r1, r5
 8018644:	bf28      	it	cs
 8018646:	4632      	movcs	r2, r6
 8018648:	f7fc ff01 	bl	801544e <memcpy>
 801864c:	4629      	mov	r1, r5
 801864e:	4638      	mov	r0, r7
 8018650:	f7fd fd18 	bl	8016084 <_free_r>
 8018654:	e7f1      	b.n	801863a <_realloc_r+0x40>

08018656 <__ascii_wctomb>:
 8018656:	4603      	mov	r3, r0
 8018658:	4608      	mov	r0, r1
 801865a:	b141      	cbz	r1, 801866e <__ascii_wctomb+0x18>
 801865c:	2aff      	cmp	r2, #255	@ 0xff
 801865e:	d904      	bls.n	801866a <__ascii_wctomb+0x14>
 8018660:	228a      	movs	r2, #138	@ 0x8a
 8018662:	601a      	str	r2, [r3, #0]
 8018664:	f04f 30ff 	mov.w	r0, #4294967295
 8018668:	4770      	bx	lr
 801866a:	700a      	strb	r2, [r1, #0]
 801866c:	2001      	movs	r0, #1
 801866e:	4770      	bx	lr

08018670 <_raise_r>:
 8018670:	291f      	cmp	r1, #31
 8018672:	b538      	push	{r3, r4, r5, lr}
 8018674:	4605      	mov	r5, r0
 8018676:	460c      	mov	r4, r1
 8018678:	d904      	bls.n	8018684 <_raise_r+0x14>
 801867a:	2316      	movs	r3, #22
 801867c:	6003      	str	r3, [r0, #0]
 801867e:	f04f 30ff 	mov.w	r0, #4294967295
 8018682:	bd38      	pop	{r3, r4, r5, pc}
 8018684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018686:	b112      	cbz	r2, 801868e <_raise_r+0x1e>
 8018688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801868c:	b94b      	cbnz	r3, 80186a2 <_raise_r+0x32>
 801868e:	4628      	mov	r0, r5
 8018690:	f000 f830 	bl	80186f4 <_getpid_r>
 8018694:	4622      	mov	r2, r4
 8018696:	4601      	mov	r1, r0
 8018698:	4628      	mov	r0, r5
 801869a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801869e:	f000 b817 	b.w	80186d0 <_kill_r>
 80186a2:	2b01      	cmp	r3, #1
 80186a4:	d00a      	beq.n	80186bc <_raise_r+0x4c>
 80186a6:	1c59      	adds	r1, r3, #1
 80186a8:	d103      	bne.n	80186b2 <_raise_r+0x42>
 80186aa:	2316      	movs	r3, #22
 80186ac:	6003      	str	r3, [r0, #0]
 80186ae:	2001      	movs	r0, #1
 80186b0:	e7e7      	b.n	8018682 <_raise_r+0x12>
 80186b2:	2100      	movs	r1, #0
 80186b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80186b8:	4620      	mov	r0, r4
 80186ba:	4798      	blx	r3
 80186bc:	2000      	movs	r0, #0
 80186be:	e7e0      	b.n	8018682 <_raise_r+0x12>

080186c0 <raise>:
 80186c0:	4b02      	ldr	r3, [pc, #8]	@ (80186cc <raise+0xc>)
 80186c2:	4601      	mov	r1, r0
 80186c4:	6818      	ldr	r0, [r3, #0]
 80186c6:	f7ff bfd3 	b.w	8018670 <_raise_r>
 80186ca:	bf00      	nop
 80186cc:	2000004c 	.word	0x2000004c

080186d0 <_kill_r>:
 80186d0:	b538      	push	{r3, r4, r5, lr}
 80186d2:	4d07      	ldr	r5, [pc, #28]	@ (80186f0 <_kill_r+0x20>)
 80186d4:	2300      	movs	r3, #0
 80186d6:	4604      	mov	r4, r0
 80186d8:	4608      	mov	r0, r1
 80186da:	4611      	mov	r1, r2
 80186dc:	602b      	str	r3, [r5, #0]
 80186de:	f7e8 ff45 	bl	800156c <_kill>
 80186e2:	1c43      	adds	r3, r0, #1
 80186e4:	d102      	bne.n	80186ec <_kill_r+0x1c>
 80186e6:	682b      	ldr	r3, [r5, #0]
 80186e8:	b103      	cbz	r3, 80186ec <_kill_r+0x1c>
 80186ea:	6023      	str	r3, [r4, #0]
 80186ec:	bd38      	pop	{r3, r4, r5, pc}
 80186ee:	bf00      	nop
 80186f0:	200083c0 	.word	0x200083c0

080186f4 <_getpid_r>:
 80186f4:	f7e8 bf32 	b.w	800155c <_getpid>

080186f8 <_malloc_usable_size_r>:
 80186f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80186fc:	1f18      	subs	r0, r3, #4
 80186fe:	2b00      	cmp	r3, #0
 8018700:	bfbc      	itt	lt
 8018702:	580b      	ldrlt	r3, [r1, r0]
 8018704:	18c0      	addlt	r0, r0, r3
 8018706:	4770      	bx	lr

08018708 <_init>:
 8018708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801870a:	bf00      	nop
 801870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801870e:	bc08      	pop	{r3}
 8018710:	469e      	mov	lr, r3
 8018712:	4770      	bx	lr

08018714 <_fini>:
 8018714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018716:	bf00      	nop
 8018718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801871a:	bc08      	pop	{r3}
 801871c:	469e      	mov	lr, r3
 801871e:	4770      	bx	lr
