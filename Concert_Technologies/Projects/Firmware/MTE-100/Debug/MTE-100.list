
MTE-100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172a8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c00  080174a8  080174a8  000184a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0a8  0801b0a8  0001d348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b0a8  0801b0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0b0  0801b0b0  0001d348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0b0  0801b0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b0b4  0801b0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0801b0b8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000208  0801b2c0  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a8  0801b360  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007f68  20000348  0801b400  0001d348  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082b0  0801b400  0001e2b0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001d348  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e47b  00000000  00000000  0001d376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005e2b  00000000  00000000  0003b7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  00041620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001228  00000000  00000000  00042d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036624  00000000  00000000  00043f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002938a  00000000  00000000  0007a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109230  00000000  00000000  000a38de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001acb0e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006dd8  00000000  00000000  001acb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  001b392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000348 	.word	0x20000348
 800021c:	00000000 	.word	0x00000000
 8000220:	08017490 	.word	0x08017490

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000034c 	.word	0x2000034c
 800023c:	08017490 	.word	0x08017490

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <MX_CAN1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a10:	2206      	movs	r2, #6
 8000a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a2a:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a56:	f001 f80b 	bl	8001a70 <HAL_CAN_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 fb02 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000364 	.word	0x20000364
 8000a6c:	40006400 	.word	0x40006400

08000a70 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_CAN_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000ac2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_CAN_MspInit+0x84>)
 8000ae0:	f002 fb52 	bl	8003188 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40006400 	.word	0x40006400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <can_init>:
 * @Função    : can_init
 * @Descrição : Inicializa os parâmetros e variáveis referentes ao protocolo CAN quando houver.
 * @Parâmetros: Não há
 */
void can_init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <can_reception>:
 * @Função    : can_reception
 * @Descrição : Recebe e processa os dados recebidos via protocolo CAN.
 * @Parâmetros: Não há
 */
void can_reception(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	mte100.data.altura       = ((payload_id_can_0x100[0] << 8) | payload_id_can_0x100[1]);
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <can_reception+0x94>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <can_reception+0x94>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <can_reception+0x98>)
 8000b26:	809a      	strh	r2, [r3, #4]
	mte100.data.peso		 = ((payload_id_can_0x100[2] << 8) | payload_id_can_0x100[3]);
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <can_reception+0x94>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <can_reception+0x94>)
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <can_reception+0x98>)
 8000b40:	80da      	strh	r2, [r3, #6]
	mte100.data.status_flags = payload_id_can_0x100[4];
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <can_reception+0x94>)
 8000b44:	791a      	ldrb	r2, [r3, #4]
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <can_reception+0x98>)
 8000b48:	721a      	strb	r2, [r3, #8]

	mte100.data.tensao       = (uint8_t) (payload_id_can_0x200[0] * 0.5);
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <can_reception+0x9c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b56:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b62:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b66:	793b      	ldrb	r3, [r7, #4]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <can_reception+0x98>)
 8000b6c:	725a      	strb	r2, [r3, #9]
	mte100.data.horimetro	 = ((payload_id_can_0x200[4] << 24) | (payload_id_can_0x200[5] << 16) |(payload_id_can_0x200[6] << 8) | payload_id_can_0x200[7]);
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <can_reception+0x9c>)
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	061a      	lsls	r2, r3, #24
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <can_reception+0x9c>)
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <can_reception+0x9c>)
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <can_reception+0x9c>)
 8000b86:	79d2      	ldrb	r2, [r2, #7]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <can_reception+0x98>)
 8000b8e:	60da      	str	r2, [r3, #12]

}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000394 	.word	0x20000394
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <can_simulation_transmition>:
 * @Descrição : Simula a recepção do protocolo CAN selecionando 4 pacotes diferentes disponíveis.
 * @Parâmetros:
 * 		- packet_num: recebe o valor que indica qual pacote deve ser selecionado
 */
void can_simulation_transmition(uint8_t packet_num)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	switch (packet_num)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	f200 80cf 	bhi.w	8000d58 <can_simulation_transmition+0x1b0>
 8000bba:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc0 <can_simulation_transmition+0x18>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000c95 	.word	0x08000c95
 8000bcc:	08000cf7 	.word	0x08000cf7
	{
		case 0:
			payload_id_can_0x100[0] = 0x16; // altura_msb
 8000bd0:	4b64      	ldr	r3, [pc, #400]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd2:	2216      	movs	r2, #22
 8000bd4:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x03; // altura_lsb
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x04; // peso_msb
 8000bdc:	4b61      	ldr	r3, [pc, #388]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xE9; // peso_lsb
 8000be2:	4b60      	ldr	r3, [pc, #384]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000be4:	22e9      	movs	r2, #233	@ 0xe9
 8000be6:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x07; // status_flags
 8000be8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000bee:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x60; // tensao
 8000c00:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c02:	2260      	movs	r2, #96	@ 0x60
 8000c04:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c0c:	4b56      	ldr	r3, [pc, #344]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c12:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c18:	4b53      	ldr	r3, [pc, #332]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2A; // horimetro 1
 8000c24:	4b50      	ldr	r3, [pc, #320]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c26:	222a      	movs	r2, #42	@ 0x2a
 8000c28:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x62; // horimetro 0 lsb
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c2c:	2262      	movs	r2, #98	@ 0x62
 8000c2e:	721a      	strb	r2, [r3, #8]
		break;
 8000c30:	e092      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 1:
			payload_id_can_0x100[0] = 0x17; // altura_msb
 8000c32:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c34:	2217      	movs	r2, #23
 8000c36:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x04; // altura_lsb
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x05; // peso_msb
 8000c3e:	4b49      	ldr	r3, [pc, #292]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c40:	2205      	movs	r2, #5
 8000c42:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEA; // peso_lsb
 8000c44:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c46:	22ea      	movs	r2, #234	@ 0xea
 8000c48:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x06; // status_flags
 8000c4a:	4b46      	ldr	r3, [pc, #280]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000c50:	4b44      	ldr	r3, [pc, #272]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000c56:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000c5c:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x62; // tensao
 8000c62:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c64:	2262      	movs	r2, #98	@ 0x62
 8000c66:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c68:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2B; // horimetro 1
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c88:	222b      	movs	r2, #43	@ 0x2b
 8000c8a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x63; // horimetro 0 lsb
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	721a      	strb	r2, [r3, #8]
		break;
 8000c92:	e061      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 2:
			payload_id_can_0x100[0] = 0x18; // altura_msb
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c96:	2218      	movs	r2, #24
 8000c98:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x05; // altura_lsb
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x06; // peso_msb
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEB; // peso_lsb
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca8:	22eb      	movs	r2, #235	@ 0xeb
 8000caa:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x05; // status_flags
 8000cac:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cae:	2205      	movs	r2, #5
 8000cb0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x64; // tensao
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cc6:	2264      	movs	r2, #100	@ 0x64
 8000cc8:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2C; // horimetro 1
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cea:	222c      	movs	r2, #44	@ 0x2c
 8000cec:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x64; // horimetro 0 lsb
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cf0:	2264      	movs	r2, #100	@ 0x64
 8000cf2:	721a      	strb	r2, [r3, #8]
		break;
 8000cf4:	e030      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 3:
			payload_id_can_0x100[0] = 0x19; // altura_msb
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cf8:	2219      	movs	r2, #25
 8000cfa:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x06; // altura_lsb
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x07; // peso_msb
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEC; // peso_lsb
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d0a:	22ec      	movs	r2, #236	@ 0xec
 8000d0c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x04; // status_flags
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x66; // tensao
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d28:	2266      	movs	r2, #102	@ 0x66
 8000d2a:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2D; // horimetro 1
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d4c:	222d      	movs	r2, #45	@ 0x2d
 8000d4e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x65; // horimetro 0 lsb
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d52:	2265      	movs	r2, #101	@ 0x65
 8000d54:	721a      	strb	r2, [r3, #8]
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a22      	ldr	r2, [pc, #136]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_TERM_N_GPIO_Port, CAN_TERM_N_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dd2:	f002 fb85 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000dde:	f002 fb7f 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_TERM_N_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_N_Pin;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_TERM_N_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dfc:	f002 f9c4 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000e1a:	f002 f9b5 	bl	8003188 <HAL_GPIO_Init>

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <led_init>:
 * @Função    : led_init
 * @Descrição : Inicializa o LED em nível lógico baixo e configura a flag de toggle LED para nível lógico baixo.
 * @Parâmetros: Não há
 */
void led_init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	LED_STATUS_LOW();
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <led_init+0x1c>)
 8000e40:	f002 fb4e 	bl	80034e0 <HAL_GPIO_WritePin>
	mte100.led.toggle  = false;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <led_init+0x20>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	709a      	strb	r2, [r3, #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020800 	.word	0x40020800
 8000e54:	20000394 	.word	0x20000394

08000e58 <led_idle_>:
 * @Função    : led_idle_
 * @Descrição : Mantém o LED apagado enquanto aguarda o recebimento dos dados da CAN ou transmissão via MQTT.
 * @Parâmetros: Não há
 */
void led_idle_(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	LED_STATUS_LOW();
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e62:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <led_idle_+0x1c>)
 8000e64:	f002 fb3c 	bl	80034e0 <HAL_GPIO_WritePin>
	mte100.led.toggle = false;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <led_idle_+0x20>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	709a      	strb	r2, [r3, #2]
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020800 	.word	0x40020800
 8000e78:	20000394 	.word	0x20000394

08000e7c <led_rx_data_can>:
 * @Função    : led_rx_data_can
 * @Descrição : Realiza o toggle do LED indicando o recepção dos dados via protocolo CAN.
 * @Parâmetros: Não há
 */
void led_rx_data_can(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <led_rx_data_can+0x20>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <led_rx_data_can+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000e88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <led_rx_data_can+0x24>)
 8000e8e:	f002 fb40 	bl	8003512 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000e92:	4b02      	ldr	r3, [pc, #8]	@ (8000e9c <led_rx_data_can+0x20>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	709a      	strb	r2, [r3, #2]
	}
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000394 	.word	0x20000394
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <led_tx_transmit_data_mqtt>:
 * @Função    : led_tx_transmit_data_mqtt
 * @Descrição : Realiza o toggle do LED indicando o transmissão dos dados via tópico MQTT.
 * @Parâmetros: Não há
 */
void led_tx_transmit_data_mqtt(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <led_tx_transmit_data_mqtt+0x20>)
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <led_tx_transmit_data_mqtt+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000eb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <led_tx_transmit_data_mqtt+0x24>)
 8000eb6:	f002 fb2c 	bl	8003512 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000eba:	4b02      	ldr	r3, [pc, #8]	@ (8000ec4 <led_tx_transmit_data_mqtt+0x20>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	709a      	strb	r2, [r3, #2]
	}

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000394 	.word	0x20000394
 8000ec8:	40020800 	.word	0x40020800

08000ecc <led_handle>:
 * @Função    : led_handle
 * @Descrição : Manipula o LED de acordo com o seu estado.
 * @Parâmetros: Não há
 */
void led_handle(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	switch (mte100.led.state)
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <led_handle+0x40>)
 8000ed2:	785b      	ldrb	r3, [r3, #1]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d817      	bhi.n	8000f08 <led_handle+0x3c>
 8000ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee0 <led_handle+0x14>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000ef1 	.word	0x08000ef1
 8000ee4:	08000ef7 	.word	0x08000ef7
 8000ee8:	08000efd 	.word	0x08000efd
 8000eec:	08000f03 	.word	0x08000f03
	{
		case led_initialization:
			led_init();
 8000ef0:	f7ff ffa0 	bl	8000e34 <led_init>
		break;
 8000ef4:	e008      	b.n	8000f08 <led_handle+0x3c>

		case led_idle:
			led_idle_();
 8000ef6:	f7ff ffaf 	bl	8000e58 <led_idle_>
			break;
 8000efa:	e005      	b.n	8000f08 <led_handle+0x3c>

		case led_receive_data_can:
			led_rx_data_can();
 8000efc:	f7ff ffbe 	bl	8000e7c <led_rx_data_can>
			break;
 8000f00:	e002      	b.n	8000f08 <led_handle+0x3c>

		case led_transmit_data_mqtt:
			led_tx_transmit_data_mqtt();
 8000f02:	f7ff ffcf 	bl	8000ea4 <led_tx_transmit_data_mqtt>
			break;
 8000f06:	bf00      	nop
	}
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000394 	.word	0x20000394

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f14:	f000 f87c 	bl	8001010 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fd29 	bl	800196e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f80a 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff ff24 	bl	8000d6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f24:	f7ff fd6e 	bl	8000a04 <MX_CAN1_Init>
  MX_LWIP_Init();
 8000f28:	f002 ffca 	bl	8003ec0 <MX_LWIP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Chamada da aplicação
	  mte100_main();
 8000f2c:	f000 f9dc 	bl	80012e8 <mte100_main>
 8000f30:	e7fc      	b.n	8000f2c <main+0x1c>
	...

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2234      	movs	r2, #52	@ 0x34
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f013 f823 	bl	8013f8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <SystemClock_Config+0xd4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001008 <SystemClock_Config+0xd4>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f64:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <SystemClock_Config+0xd4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <SystemClock_Config+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <SystemClock_Config+0xd8>)
 8000f76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <SystemClock_Config+0xd8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f90:	2310      	movs	r3, #16
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f94:	2302      	movs	r3, #2
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fa0:	23d8      	movs	r3, #216	@ 0xd8
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fb17 	bl	80035e8 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fc0:	f000 f852 	bl	8001068 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f002 fac0 	bl	8003548 <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fce:	f000 f84b 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fda7 	bl	8003b44 <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ffc:	f000 f834 	bl	8001068 <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	@ 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001022:	f000 ff07 	bl	8001e34 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001026:	2301      	movs	r3, #1
 8001028:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800102a:	2300      	movs	r3, #0
 800102c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001032:	231f      	movs	r3, #31
 8001034:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001036:	2387      	movs	r3, #135	@ 0x87
 8001038:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800103a:	2300      	movs	r3, #0
 800103c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800103e:	2300      	movs	r3, #0
 8001040:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001042:	2301      	movs	r3, #1
 8001044:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001046:	2301      	movs	r3, #1
 8001048:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001052:	463b      	mov	r3, r7
 8001054:	4618      	mov	r0, r3
 8001056:	f000 ff25 	bl	8001ea4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800105a:	2004      	movs	r0, #4
 800105c:	f000 ff02 	bl	8001e64 <HAL_MPU_Enable>

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <mqtt_init>:
 * @Função    : mqtt_init
 * @Descrição : Define o IP do broker e realiza a conexão do cliente ao tópico MQTT.
 * @Parâmetros: Não há
 */
void mqtt_init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af02      	add	r7, sp, #8
	mqtt_set_broker();
 800107a:	f000 f81f 	bl	80010bc <mqtt_set_broker>
	err_t err = mqtt_client_connect(client, &mqtt_server_ip, MQTT_BROKER_PORT, mqtt_connection_cb, 0, NULL);
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <mqtt_init+0x3c>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <mqtt_init+0x40>)
 800108c:	f240 725b 	movw	r2, #1883	@ 0x75b
 8001090:	4909      	ldr	r1, [pc, #36]	@ (80010b8 <mqtt_init+0x44>)
 8001092:	f004 fcdd 	bl	8005a50 <mqtt_client_connect>
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]

	if(err != ERR_OK)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <mqtt_init+0x32>
	{
		mte100_error_handler();
 80010a2:	f000 f957 	bl	8001354 <mte100_error_handler>
	}
	else
	{

	}
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000038c 	.word	0x2000038c
 80010b4:	08001149 	.word	0x08001149
 80010b8:	20000390 	.word	0x20000390

080010bc <mqtt_set_broker>:
 * @Função    : mqtt_set_broker
 * @Descrição : Configura o IP do broker e cria a instância do cliente MQTT.
 * @Parâmetros: Não há
 */
void mqtt_set_broker(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	// Configura IP do broker
	ipaddr_aton(MQTT_BROKER_IP, &mqtt_server_ip);
 80010c0:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <mqtt_set_broker+0x28>)
 80010c2:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <mqtt_set_broker+0x2c>)
 80010c4:	f010 fecc 	bl	8011e60 <ip4addr_aton>

	client = mqtt_client_new();
 80010c8:	f004 fcb8 	bl	8005a3c <mqtt_client_new>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <mqtt_set_broker+0x30>)
 80010d0:	6013      	str	r3, [r2, #0]

	if(client == NULL)
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <mqtt_set_broker+0x30>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <mqtt_set_broker+0x22>
	{
		Error_Handler();
 80010da:	f7ff ffc5 	bl	8001068 <Error_Handler>
	}
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000390 	.word	0x20000390
 80010e8:	080174a8 	.word	0x080174a8
 80010ec:	2000038c 	.word	0x2000038c

080010f0 <mqtt_publish_data>:
 * @Função    :  mqtt_publish_data
 * @Descrição : Responsável por montar o JSON e enviá-lo ao broker MQTT.
 * @Parâmetros: Não há
 */
void mqtt_publish_data(void)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af04      	add	r7, sp, #16
	mqtt_create_json_protocol();
 80010f6:	f000 f837 	bl	8001168 <mqtt_create_json_protocol>

	err_t result = mqtt_publish(client, MQTT_TOPIC, mte100.mqtt.payload, strlen((char *)mte100.mqtt.payload), 0, 0, NULL, NULL);
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <mqtt_publish_data+0x4c>)
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	4810      	ldr	r0, [pc, #64]	@ (8001140 <mqtt_publish_data+0x50>)
 8001100:	f7ff f8ee 	bl	80002e0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29b      	uxth	r3, r3
 8001108:	2200      	movs	r2, #0
 800110a:	9203      	str	r2, [sp, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	9202      	str	r2, [sp, #8]
 8001110:	2200      	movs	r2, #0
 8001112:	9201      	str	r2, [sp, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <mqtt_publish_data+0x50>)
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <mqtt_publish_data+0x54>)
 800111c:	4620      	mov	r0, r4
 800111e:	f004 fbb9 	bl	8005894 <mqtt_publish>
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]

	if(result == ERR_OK)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <mqtt_publish_data+0x42>
	{
	}
	else
	{
		mte100_error_handler();
 800112e:	f000 f911 	bl	8001354 <mte100_error_handler>
	}
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	2000038c 	.word	0x2000038c
 8001140:	200003a5 	.word	0x200003a5
 8001144:	080174bc 	.word	0x080174bc

08001148 <mqtt_connection_cb>:
 * 		- arg   : usado para passar contexto extra
 * 		- status: indica o resultado da tentativa de conexão
 *
 */
void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
	if(status == MQTT_CONNECT_ACCEPTED)
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <mqtt_connection_cb+0x18>
	{
	}
	else
	{
		mte100_error_handler();
 800115c:	f000 f8fa 	bl	8001354 <mte100_error_handler>
	}
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <mqtt_create_json_protocol>:
 * @Função    : mqtt_create_json_protocol
 * @Descrição : Cria a string de acordo com o protocol JSON.
 * @Parâmetros: Não há
 */
void mqtt_create_json_protocol(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af08      	add	r7, sp, #32
    char motor_ligado[6]   = {};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	809a      	strh	r2, [r3, #4]
    char cesto_nivelado[6] = {};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	809a      	strh	r2, [r3, #4]
    char sobrecarga[6]     = {};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	809a      	strh	r2, [r3, #4]

    float altura  = mte100.data.altura / 1000;
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <mqtt_create_json_protocol+0x114>)
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	4a3c      	ldr	r2, [pc, #240]	@ (8001280 <mqtt_create_json_protocol+0x118>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	b29b      	uxth	r3, r3
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    uint16_t peso = mte100.data.peso;
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <mqtt_create_json_protocol+0x114>)
 80011a6:	88db      	ldrh	r3, [r3, #6]
 80011a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    float tensao = (float)mte100.data.tensao;
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <mqtt_create_json_protocol+0x114>)
 80011ac:	7a5b      	ldrb	r3, [r3, #9]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b6:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t horimetro = mte100.data.horimetro;
 80011ba:	4b30      	ldr	r3, [pc, #192]	@ (800127c <mqtt_create_json_protocol+0x114>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	61bb      	str	r3, [r7, #24]


    // Motor ligado
    if(payload_id_can_0x100[4] == true)
 80011c0:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <mqtt_create_json_protocol+0x11c>)
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <mqtt_create_json_protocol+0x72>
    {
         strcpy(motor_ligado,"true");
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001288 <mqtt_create_json_protocol+0x120>)
 80011ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d2:	6018      	str	r0, [r3, #0]
 80011d4:	3304      	adds	r3, #4
 80011d6:	7019      	strb	r1, [r3, #0]
 80011d8:	e007      	b.n	80011ea <mqtt_create_json_protocol+0x82>
    }
    else
    {
        strcpy(motor_ligado,"false");
 80011da:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <mqtt_create_json_protocol+0x124>)
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e4:	6018      	str	r0, [r3, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	8019      	strh	r1, [r3, #0]
    }

    // Cesto Nivelado
    if(payload_id_can_0x100[4] == true)
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <mqtt_create_json_protocol+0x11c>)
 80011ec:	791b      	ldrb	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <mqtt_create_json_protocol+0x9c>
    {
         strcpy(cesto_nivelado,"true");
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <mqtt_create_json_protocol+0x120>)
 80011f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fc:	6018      	str	r0, [r3, #0]
 80011fe:	3304      	adds	r3, #4
 8001200:	7019      	strb	r1, [r3, #0]
 8001202:	e007      	b.n	8001214 <mqtt_create_json_protocol+0xac>
    }
    else
    {
        strcpy(cesto_nivelado,"false");
 8001204:	4a21      	ldr	r2, [pc, #132]	@ (800128c <mqtt_create_json_protocol+0x124>)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	6018      	str	r0, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	8019      	strh	r1, [r3, #0]
    }

    // Sobrecarga
    if(payload_id_can_0x100[4] == true)
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <mqtt_create_json_protocol+0x11c>)
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <mqtt_create_json_protocol+0xc4>
    {
         strcpy(sobrecarga,"true");
 800121c:	463b      	mov	r3, r7
 800121e:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <mqtt_create_json_protocol+0x120>)
 8001220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001224:	6018      	str	r0, [r3, #0]
 8001226:	3304      	adds	r3, #4
 8001228:	7019      	strb	r1, [r3, #0]
 800122a:	e006      	b.n	800123a <mqtt_create_json_protocol+0xd2>
    }
    else
    {
        strcpy(sobrecarga,"false");
 800122c:	4a17      	ldr	r2, [pc, #92]	@ (800128c <mqtt_create_json_protocol+0x124>)
 800122e:	463b      	mov	r3, r7
 8001230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001234:	6018      	str	r0, [r3, #0]
 8001236:	3304      	adds	r3, #4
 8001238:	8019      	strh	r1, [r3, #0]
    }


    sprintf((char *)mte100.mqtt.payload,
 800123a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800123e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001242:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001244:	edd7 7a07 	vldr	s15, [r7, #28]
 8001248:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124c:	463a      	mov	r2, r7
 800124e:	9207      	str	r2, [sp, #28]
 8001250:	f107 0208 	add.w	r2, r7, #8
 8001254:	9206      	str	r2, [sp, #24]
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	9205      	str	r2, [sp, #20]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	9204      	str	r2, [sp, #16]
 8001260:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	ec53 2b16 	vmov	r2, r3, d6
 800126a:	4909      	ldr	r1, [pc, #36]	@ (8001290 <mqtt_create_json_protocol+0x128>)
 800126c:	4809      	ldr	r0, [pc, #36]	@ (8001294 <mqtt_create_json_protocol+0x12c>)
 800126e:	f012 fdff 	bl	8013e70 <siprintf>
        "\"motor_ligado\":%s,"
        "\"cesto_nivelado\":%s,"
        "\"sobrecarga\":%s"
        "}",
        altura, peso, tensao, horimetro, motor_ligado, cesto_nivelado, sobrecarga);
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000394 	.word	0x20000394
 8001280:	10624dd3 	.word	0x10624dd3
 8001284:	20000000 	.word	0x20000000
 8001288:	080174ec 	.word	0x080174ec
 800128c:	080174f4 	.word	0x080174f4
 8001290:	080174fc 	.word	0x080174fc
 8001294:	200003a5 	.word	0x200003a5

08001298 <mqtt_transmission>:
 * @Função    : mqtt_transmission
 * @Descrição : Realiza a transmissão dos dados via tópico MQTT.
 * @Parâmetros: Não há
 */
void mqtt_transmission(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	MX_LWIP_Process();
 800129c:	f002 fe62 	bl	8003f64 <MX_LWIP_Process>

	if(mte100.mqtt.transmit == true)
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <mqtt_transmission+0x20>)
 80012a2:	7c1b      	ldrb	r3, [r3, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <mqtt_transmission+0x1a>
	{
		mqtt_publish_data();
 80012a8:	f7ff ff22 	bl	80010f0 <mqtt_publish_data>
		mte100.mqtt.transmit = false;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <mqtt_transmission+0x20>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	741a      	strb	r2, [r3, #16]
	}
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000394 	.word	0x20000394

080012bc <mte100_init>:
 * @Descrição : Inicializa os estados das máquinas de estado da aplicação e o LED.
 * 			    Inicializa se necessário as variáveis do protocolo CAN.
 * @Parâmetros: Não há
 */
void mte100_init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	//Inicializa o protocolo CAN
	can_init();
 80012c0:	f7ff fc1a 	bl	8000af8 <can_init>

	mte100.led.state  = led_initialization;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <mte100_init+0x18>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	705a      	strb	r2, [r3, #1]

	// Inicializa a variável que habilita a transmissão com "false"
	mte100.mqtt.transmit = false;
 80012ca:	4b02      	ldr	r3, [pc, #8]	@ (80012d4 <mte100_init+0x18>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	741a      	strb	r2, [r3, #16]
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000394 	.word	0x20000394

080012d8 <mte100_idle_>:
 * @Descrição : Não realiza nenhuma rotina aguardanddo a recepção dos dados via protocolo CAN
 * 			    e a transmissão do protocolo JSON via tópico MQTT.
 * @Parâmetros: Não há
 */
void mte100_idle_(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <mte100_main>:
 * @Descrição : Rotina em que toda aplicação é realizada, recebendo os dados via CAN e transmitindo via MQTT.
 * 			    Também manipula dos LEDs.
 * @Parâmetros: Não há
 */
void mte100_main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	switch (mte100.state)
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <mte100_main+0x68>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d828      	bhi.n	8001346 <mte100_main+0x5e>
 80012f4:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <mte100_main+0x14>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	08001311 	.word	0x08001311
 8001300:	0800131d 	.word	0x0800131d
 8001304:	08001329 	.word	0x08001329
 8001308:	0800132f 	.word	0x0800132f
 800130c:	0800133b 	.word	0x0800133b
	{
		case mte100_initialization:
			mte100_init();
 8001310:	f7ff ffd4 	bl	80012bc <mte100_init>
			mte100.state = mte100_set_broker_IP;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <mte100_main+0x68>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
		break;
 800131a:	e014      	b.n	8001346 <mte100_main+0x5e>

		case mte100_set_broker_IP:
			mqtt_init();
 800131c:	f7ff feaa 	bl	8001074 <mqtt_init>
			mte100.state = mte100_idle;
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <mte100_main+0x68>)
 8001322:	2202      	movs	r2, #2
 8001324:	701a      	strb	r2, [r3, #0]
		break;
 8001326:	e00e      	b.n	8001346 <mte100_main+0x5e>

		case mte100_idle:
			mte100_idle_();
 8001328:	f7ff ffd6 	bl	80012d8 <mte100_idle_>
		break;
 800132c:	e00b      	b.n	8001346 <mte100_main+0x5e>

		case mte100_reception_can:
			can_reception();
 800132e:	f7ff fbeb 	bl	8000b08 <can_reception>
			mte100.state = mte100_idle;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <mte100_main+0x68>)
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
		break;
 8001338:	e005      	b.n	8001346 <mte100_main+0x5e>

		case mte100_transmission_json:
			mqtt_transmission();
 800133a:	f7ff ffad 	bl	8001298 <mqtt_transmission>
			mte100.state = mte100_idle;
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <mte100_main+0x68>)
 8001340:	2202      	movs	r2, #2
 8001342:	701a      	strb	r2, [r3, #0]
		break;
 8001344:	bf00      	nop
	}

	led_handle();
 8001346:	f7ff fdc1 	bl	8000ecc <led_handle>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000394 	.word	0x20000394

08001354 <mte100_error_handler>:
 * @Função    : mte100_error_handler
 * @Descrição : Em caso de erro/falha, essa função manipula o LED para pisca a cada 100 ms.
 * @Parâmetros: Não há
 */
void mte100_error_handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	while(true)
	{
		LED_STATUS_TOGGLE();
 8001358:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800135c:	4803      	ldr	r0, [pc, #12]	@ (800136c <mte100_error_handler+0x18>)
 800135e:	f002 f8d8 	bl	8003512 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001362:	2064      	movs	r0, #100	@ 0x64
 8001364:	f000 fb60 	bl	8001a28 <HAL_Delay>
		LED_STATUS_TOGGLE();
 8001368:	bf00      	nop
 800136a:	e7f5      	b.n	8001358 <mte100_error_handler+0x4>
 800136c:	40020800 	.word	0x40020800

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x44>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_MspInit+0x44>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x44>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t packet_num = 0;
	static uint8_t led_counter = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 faea 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // Verifica se a interrupção é do TIM1
  	count_millissecond_can++;
 8001414:	4b48      	ldr	r3, [pc, #288]	@ (8001538 <SysTick_Handler+0x12c>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <SysTick_Handler+0x12c>)
 800141e:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_receive_data_can)
 8001420:	4b46      	ldr	r3, [pc, #280]	@ (800153c <SysTick_Handler+0x130>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d11f      	bne.n	8001468 <SysTick_Handler+0x5c>
	{
		if(count_millissecond_can % 100 == 0)
 8001428:	4b43      	ldr	r3, [pc, #268]	@ (8001538 <SysTick_Handler+0x12c>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	4a44      	ldr	r2, [pc, #272]	@ (8001540 <SysTick_Handler+0x134>)
 800142e:	fba2 1203 	umull	r1, r2, r2, r3
 8001432:	0952      	lsrs	r2, r2, #5
 8001434:	2164      	movs	r1, #100	@ 0x64
 8001436:	fb01 f202 	mul.w	r2, r1, r2
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <SysTick_Handler+0x48>
		{
			mte100.led.toggle = true;
 8001442:	4b3e      	ldr	r3, [pc, #248]	@ (800153c <SysTick_Handler+0x130>)
 8001444:	2201      	movs	r2, #1
 8001446:	709a      	strb	r2, [r3, #2]
			led_counter++;
 8001448:	4b3e      	ldr	r3, [pc, #248]	@ (8001544 <SysTick_Handler+0x138>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <SysTick_Handler+0x138>)
 8001452:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 1)
 8001454:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <SysTick_Handler+0x138>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d905      	bls.n	8001468 <SysTick_Handler+0x5c>
		{
			mte100.led.state = led_idle;
 800145c:	4b37      	ldr	r3, [pc, #220]	@ (800153c <SysTick_Handler+0x130>)
 800145e:	2201      	movs	r2, #1
 8001460:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <SysTick_Handler+0x138>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
		}
	}

	// A cada 2 segundos é habilitado o estado "run" para que se seja realizado a transmissão dos dados via CAN
	if (count_millissecond_can > 1999)
 8001468:	4b33      	ldr	r3, [pc, #204]	@ (8001538 <SysTick_Handler+0x12c>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001470:	d311      	bcc.n	8001496 <SysTick_Handler+0x8a>
	{
		can_simulation_transmition(packet_num);
 8001472:	4b35      	ldr	r3, [pc, #212]	@ (8001548 <SysTick_Handler+0x13c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb96 	bl	8000ba8 <can_simulation_transmition>

		mte100.state = mte100_reception_can;
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <SysTick_Handler+0x130>)
 800147e:	2203      	movs	r2, #3
 8001480:	701a      	strb	r2, [r3, #0]
		count_millissecond_can = 0;
 8001482:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <SysTick_Handler+0x12c>)
 8001484:	2200      	movs	r2, #0
 8001486:	801a      	strh	r2, [r3, #0]

		if(packet_num)
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <SysTick_Handler+0x13c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <SysTick_Handler+0x8a>
		{
			packet_num = 0;
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <SysTick_Handler+0x13c>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
		}

	}

	/* Utilizado para controlar o tempo de transmissão do pacote MQTT a cada 5 minutos */
	count_millissecond_mqtt++;
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <SysTick_Handler+0x140>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <SysTick_Handler+0x140>)
 80014a0:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_transmit_data_mqtt)
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <SysTick_Handler+0x130>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d11f      	bne.n	80014ea <SysTick_Handler+0xde>
	{
		if(count_millissecond_mqtt % 100 == 0)
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <SysTick_Handler+0x140>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <SysTick_Handler+0x134>)
 80014b0:	fba2 1203 	umull	r1, r2, r2, r3
 80014b4:	0952      	lsrs	r2, r2, #5
 80014b6:	2164      	movs	r1, #100	@ 0x64
 80014b8:	fb01 f202 	mul.w	r2, r1, r2
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d108      	bne.n	80014d6 <SysTick_Handler+0xca>
		{
			mte100.led.toggle = true;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	@ (800153c <SysTick_Handler+0x130>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	709a      	strb	r2, [r3, #2]
			led_counter++;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <SysTick_Handler+0x138>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <SysTick_Handler+0x138>)
 80014d4:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 3)
 80014d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <SysTick_Handler+0x138>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d905      	bls.n	80014ea <SysTick_Handler+0xde>
		{
			mte100.led.state = led_idle;
 80014de:	4b17      	ldr	r3, [pc, #92]	@ (800153c <SysTick_Handler+0x130>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <SysTick_Handler+0x138>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(count_millissecond_mqtt > 999)
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SysTick_Handler+0x140>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014f2:	d31f      	bcc.n	8001534 <SysTick_Handler+0x128>
	{
		count_second_mqtt++;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <SysTick_Handler+0x144>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <SysTick_Handler+0x144>)
 80014fe:	801a      	strh	r2, [r3, #0]
		count_millissecond_mqtt = 0;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SysTick_Handler+0x140>)
 8001502:	2200      	movs	r2, #0
 8001504:	801a      	strh	r2, [r3, #0]

		if(count_second_mqtt > 59)
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <SysTick_Handler+0x144>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b3b      	cmp	r3, #59	@ 0x3b
 800150c:	d912      	bls.n	8001534 <SysTick_Handler+0x128>
		{
			count_minute_mqtt++;
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <SysTick_Handler+0x148>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <SysTick_Handler+0x148>)
 8001518:	801a      	strh	r2, [r3, #0]

			if(count_minute_mqtt > 5)
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <SysTick_Handler+0x148>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d908      	bls.n	8001534 <SysTick_Handler+0x128>
			{
				mte100.state = mte100_transmission_json;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <SysTick_Handler+0x130>)
 8001524:	2204      	movs	r2, #4
 8001526:	701a      	strb	r2, [r3, #0]
				mte100.mqtt.transmit = true;
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Handler+0x130>)
 800152a:	2201      	movs	r2, #1
 800152c:	741a      	strb	r2, [r3, #16]
				mte100.led.state = led_transmit_data_mqtt;
 800152e:	4b03      	ldr	r3, [pc, #12]	@ (800153c <SysTick_Handler+0x130>)
 8001530:	2203      	movs	r2, #3
 8001532:	705a      	strb	r2, [r3, #1]
			}
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200004a8 	.word	0x200004a8
 800153c:	20000394 	.word	0x20000394
 8001540:	51eb851f 	.word	0x51eb851f
 8001544:	200004b0 	.word	0x200004b0
 8001548:	200004b1 	.word	0x200004b1
 800154c:	200004aa 	.word	0x200004aa
 8001550:	200004ac 	.word	0x200004ac
 8001554:	200004ae 	.word	0x200004ae

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <_kill+0x20>)
 8001574:	2216      	movs	r2, #22
 8001576:	601a      	str	r2, [r3, #0]
  return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	200082a0 	.word	0x200082a0

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe5 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159e:	bf00      	nop
 80015a0:	e7fd      	b.n	800159e <_exit+0x12>

080015a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e00a      	b.n	80015ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b4:	f3af 8000 	nop.w
 80015b8:	4601      	mov	r1, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	60ba      	str	r2, [r7, #8]
 80015c0:	b2ca      	uxtb	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbf0      	blt.n	80015b4 <_read+0x12>
  }

  return len;
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e009      	b.n	8001602 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	60ba      	str	r2, [r7, #8]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	429a      	cmp	r2, r3
 8001608:	dbf1      	blt.n	80015ee <_write+0x12>
  }
  return len;
 800160a:	687b      	ldr	r3, [r7, #4]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_close>:

int _close(int file)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800163c:	605a      	str	r2, [r3, #4]
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_isatty>:

int _isatty(int file)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	@ (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d205      	bcs.n	80016b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <_sbrk+0x6c>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20080000 	.word	0x20080000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	200004b4 	.word	0x200004b4
 80016e4:	200082b0 	.word	0x200082b0
 80016e8:	200082a0 	.word	0x200082a0

080016ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <SystemInit+0x20>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <SystemInit+0x20>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <Reset_Handler>:
 8001710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001748 <LoopFillZerobss+0xe>
 8001714:	f7ff ffea 	bl	80016ec <SystemInit>
 8001718:	480c      	ldr	r0, [pc, #48]	@ (800174c <LoopFillZerobss+0x12>)
 800171a:	490d      	ldr	r1, [pc, #52]	@ (8001750 <LoopFillZerobss+0x16>)
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <LoopFillZerobss+0x1a>)
 800171e:	2300      	movs	r3, #0
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:
 8001722:	58d4      	ldr	r4, [r2, r3]
 8001724:	50c4      	str	r4, [r0, r3]
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:
 8001728:	18c4      	adds	r4, r0, r3
 800172a:	428c      	cmp	r4, r1
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <LoopFillZerobss+0x1e>)
 8001730:	4c0a      	ldr	r4, [pc, #40]	@ (800175c <LoopFillZerobss+0x22>)
 8001732:	2300      	movs	r3, #0
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:
 800173a:	42a2      	cmp	r2, r4
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>
 800173e:	f012 fc91 	bl	8014064 <__libc_init_array>
 8001742:	f7ff fbe5 	bl	8000f10 <main>
 8001746:	4770      	bx	lr
 8001748:	20080000 	.word	0x20080000
 800174c:	20000000 	.word	0x20000000
 8001750:	20000208 	.word	0x20000208
 8001754:	0801b0b8 	.word	0x0801b0b8
 8001758:	20000348 	.word	0x20000348
 800175c:	200082b0 	.word	0x200082b0

08001760 <ADC_IRQHandler>:
 8001760:	e7fe      	b.n	8001760 <ADC_IRQHandler>

08001762 <LAN8742_RegisterBusIO>:
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <LAN8742_RegisterBusIO+0x28>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <LAN8742_RegisterBusIO+0x28>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <LAN8742_RegisterBusIO+0x28>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <LAN8742_RegisterBusIO+0x2e>
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e014      	b.n	80017ba <LAN8742_RegisterBusIO+0x58>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	2300      	movs	r3, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LAN8742_Init>:
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d139      	bne.n	8001856 <LAN8742_Init+0x90>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <LAN8742_Init+0x2a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4798      	blx	r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2220      	movs	r2, #32
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e01c      	b.n	8001836 <LAN8742_Init+0x70>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	2112      	movs	r1, #18
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	4798      	blx	r3
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	da03      	bge.n	8001818 <LAN8742_Init+0x52>
 8001810:	f06f 0304 	mvn.w	r3, #4
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	e00b      	b.n	8001830 <LAN8742_Init+0x6a>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	d105      	bne.n	8001830 <LAN8742_Init+0x6a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e005      	b.n	800183c <LAN8742_Init+0x76>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2b1f      	cmp	r3, #31
 800183a:	d9df      	bls.n	80017fc <LAN8742_Init+0x36>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b1f      	cmp	r3, #31
 8001842:	d902      	bls.n	800184a <LAN8742_Init+0x84>
 8001844:	f06f 0302 	mvn.w	r3, #2
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <LAN8742_Init+0x90>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <LAN8742_GetLinkState>:
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6810      	ldr	r0, [r2, #0]
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	2101      	movs	r1, #1
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	da02      	bge.n	8001888 <LAN8742_GetLinkState+0x28>
 8001882:	f06f 0304 	mvn.w	r3, #4
 8001886:	e06e      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6810      	ldr	r0, [r2, #0]
 8001890:	f107 020c 	add.w	r2, r7, #12
 8001894:	2101      	movs	r1, #1
 8001896:	4798      	blx	r3
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	da02      	bge.n	80018a4 <LAN8742_GetLinkState+0x44>
 800189e:	f06f 0304 	mvn.w	r3, #4
 80018a2:	e060      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <LAN8742_GetLinkState+0x52>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e059      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6810      	ldr	r0, [r2, #0]
 80018ba:	f107 020c 	add.w	r2, r7, #12
 80018be:	2100      	movs	r1, #0
 80018c0:	4798      	blx	r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da02      	bge.n	80018ce <LAN8742_GetLinkState+0x6e>
 80018c8:	f06f 0304 	mvn.w	r3, #4
 80018cc:	e04b      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d11b      	bne.n	8001910 <LAN8742_GetLinkState+0xb0>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <LAN8742_GetLinkState+0x90>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <LAN8742_GetLinkState+0x90>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e03a      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <LAN8742_GetLinkState+0x9e>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e033      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <LAN8742_GetLinkState+0xac>
 8001908:	2304      	movs	r3, #4
 800190a:	e02c      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 800190c:	2305      	movs	r3, #5
 800190e:	e02a      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6810      	ldr	r0, [r2, #0]
 8001918:	f107 020c 	add.w	r2, r7, #12
 800191c:	211f      	movs	r1, #31
 800191e:	4798      	blx	r3
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	da02      	bge.n	800192c <LAN8742_GetLinkState+0xcc>
 8001926:	f06f 0304 	mvn.w	r3, #4
 800192a:	e01c      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <LAN8742_GetLinkState+0xda>
 8001936:	2306      	movs	r3, #6
 8001938:	e015      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 031c 	and.w	r3, r3, #28
 8001940:	2b18      	cmp	r3, #24
 8001942:	d101      	bne.n	8001948 <LAN8742_GetLinkState+0xe8>
 8001944:	2302      	movs	r3, #2
 8001946:	e00e      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 031c 	and.w	r3, r3, #28
 800194e:	2b08      	cmp	r3, #8
 8001950:	d101      	bne.n	8001956 <LAN8742_GetLinkState+0xf6>
 8001952:	2303      	movs	r3, #3
 8001954:	e007      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 031c 	and.w	r3, r3, #28
 800195c:	2b14      	cmp	r3, #20
 800195e:	d101      	bne.n	8001964 <LAN8742_GetLinkState+0x104>
 8001960:	2304      	movs	r3, #4
 8001962:	e000      	b.n	8001966 <LAN8742_GetLinkState+0x106>
 8001964:	2305      	movs	r3, #5
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001972:	2003      	movs	r0, #3
 8001974:	f000 fa2a 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001978:	200f      	movs	r0, #15
 800197a:	f000 f805 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197e:	f7ff fcf7 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fa37 	bl	8001e1a <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 fa0d 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000010 	.word	0x20000010
 80019e0:	20000018 	.word	0x20000018
 80019e4:	20000014 	.word	0x20000014

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000018 	.word	0x20000018
 8001a0c:	200004b8 	.word	0x200004b8

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200004b8 	.word	0x200004b8

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000018 	.word	0x20000018

08001a70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0ed      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe ffee 	bl	8000a70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa4:	f7ff ffb4 	bl	8001a10 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aaa:	e012      	b.n	8001ad2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aac:	f7ff ffb0 	bl	8001a10 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d90b      	bls.n	8001ad2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2205      	movs	r2, #5
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0c5      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0e5      	beq.n	8001aac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0202 	bic.w	r2, r2, #2
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001af0:	f7ff ff8e 	bl	8001a10 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af6:	e012      	b.n	8001b1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001af8:	f7ff ff8a 	bl	8001a10 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b0a      	cmp	r3, #10
 8001b04:	d90b      	bls.n	8001b1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09f      	b.n	8001c5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e5      	bne.n	8001af8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7e5b      	ldrb	r3, [r3, #25]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e9b      	ldrb	r3, [r3, #26]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0220 	bic.w	r2, r2, #32
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7edb      	ldrb	r3, [r3, #27]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0210 	bic.w	r2, r2, #16
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	7f1b      	ldrb	r3, [r3, #28]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d108      	bne.n	8001bee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0208 	orr.w	r2, r2, #8
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0208 	bic.w	r2, r2, #8
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7f5b      	ldrb	r3, [r3, #29]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d108      	bne.n	8001c18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0204 	orr.w	r2, r2, #4
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e007      	b.n	8001c28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <__NVIC_SetPriorityGrouping+0x40>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	05fa0000 	.word	0x05fa0000

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	@ 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff47 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff5c 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffb0 	bl	8001d88 <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e38:	f3bf 8f5f 	dmb	sy
}
 8001e3c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_MPU_Disable+0x28>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	4a06      	ldr	r2, [pc, #24]	@ (8001e5c <HAL_MPU_Disable+0x28>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_MPU_Disable+0x2c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00
 8001e60:	e000ed90 	.word	0xe000ed90

08001e64 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <HAL_MPU_Enable+0x38>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_MPU_Enable+0x3c>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_MPU_Enable+0x3c>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e80:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e82:	f3bf 8f4f 	dsb	sy
}
 8001e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e88:	f3bf 8f6f 	isb	sy
}
 8001e8c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed90 	.word	0xe000ed90
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	785a      	ldrb	r2, [r3, #1]
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_MPU_ConfigRegion+0x7c>)
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_MPU_ConfigRegion+0x7c>)
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_MPU_ConfigRegion+0x7c>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ec0:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_MPU_ConfigRegion+0x7c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7b1b      	ldrb	r3, [r3, #12]
 8001ecc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7adb      	ldrb	r3, [r3, #11]
 8001ed2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7a9b      	ldrb	r3, [r3, #10]
 8001eda:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7b5b      	ldrb	r3, [r3, #13]
 8001ee2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7b9b      	ldrb	r3, [r3, #14]
 8001eea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7bdb      	ldrb	r3, [r3, #15]
 8001ef2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ef4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7a5b      	ldrb	r3, [r3, #9]
 8001efa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7a1b      	ldrb	r3, [r3, #8]
 8001f02:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f04:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f0e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f10:	6113      	str	r3, [r2, #16]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed90 	.word	0xe000ed90

08001f24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e086      	b.n	8002044 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f002 f9fb 	bl	8004344 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800204c <HAL_ETH_Init+0x128>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a3e      	ldr	r2, [pc, #248]	@ (800204c <HAL_ETH_Init+0x128>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800204c <HAL_ETH_Init+0x128>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f66:	4b3a      	ldr	r3, [pc, #232]	@ (8002050 <HAL_ETH_Init+0x12c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4a39      	ldr	r2, [pc, #228]	@ (8002050 <HAL_ETH_Init+0x12c>)
 8001f6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f72:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <HAL_ETH_Init+0x12c>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4935      	ldr	r1, [pc, #212]	@ (8002050 <HAL_ETH_Init+0x12c>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f80:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <HAL_ETH_Init+0x12c>)
 8001f82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f9c:	f7ff fd38 	bl	8001a10 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fa2:	e011      	b.n	8001fc8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fa4:	f7ff fd34 	bl	8001a10 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fb2:	d909      	bls.n	8001fc8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	22e0      	movs	r2, #224	@ 0xe0
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e03d      	b.n	8002044 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e4      	bne.n	8001fa4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fe18 	bl	8002c10 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fec3 	bl	8002d6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 ff19 	bl	8002e1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fe81 	bl	8002cfc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_ETH_Init+0x130>)
 8002018:	430b      	orrs	r3, r1
 800201a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800202e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2210      	movs	r2, #16
 800203e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	00020060 	.word	0x00020060

08002058 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002066:	2b10      	cmp	r3, #16
 8002068:	d150      	bne.n	800210c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f9f9 	bl	8002470 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0208 	orr.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff fcc6 	bl	8001a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0204 	orr.w	r2, r2, #4
 80020b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff fcb3 	bl	8001a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fc3c 	bl	8002948 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020fe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d14a      	bne.n	80021be <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002142:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002146:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800215e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002178:	2001      	movs	r0, #1
 800217a:	f7ff fc55 	bl	8001a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fbde 	bl	8002948 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0208 	bic.w	r2, r2, #8
 800219a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7ff fc3f 	bl	8001a28 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2210      	movs	r2, #16
 80021b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
  }
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e07c      	b.n	80022e8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021f4:	2b40      	cmp	r3, #64	@ 0x40
 80021f6:	d176      	bne.n	80022e6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80021f8:	2200      	movs	r2, #0
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 fe7d 	bl	8002efc <ETH_Prepare_Tx_Descriptors>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	f043 0202 	orr.w	r2, r3, #2
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e065      	b.n	80022e8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800221c:	f3bf 8f4f 	dsb	sy
}
 8002220:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3206      	adds	r2, #6
 800222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223e:	2b03      	cmp	r3, #3
 8002240:	d904      	bls.n	800224c <HAL_ETH_Transmit+0x84>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002246:	1f1a      	subs	r2, r3, #4
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3106      	adds	r1, #6
 8002258:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800225c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002260:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002262:	f7ff fbd5 	bl	8001a10 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002268:	e037      	b.n	80022da <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d011      	beq.n	80022a0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f043 0208 	orr.w	r2, r3, #8
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e023      	b.n	80022e8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a6:	d018      	beq.n	80022da <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022a8:	f7ff fbb2 	bl	8001a10 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d302      	bcc.n	80022be <HAL_ETH_Transmit+0xf6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022d4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e006      	b.n	80022e8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dbc3      	blt.n	800226a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
  }
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0a4      	b.n	8002466 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002322:	2b40      	cmp	r3, #64	@ 0x40
 8002324:	d001      	beq.n	800232a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e09d      	b.n	8002466 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	3212      	adds	r2, #18
 8002336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002340:	f1c3 0304 	rsb	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002346:	e066      	b.n	8002416 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <HAL_ETH_ReadData+0x88>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03c      	beq.n	80023f2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800239a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f002 f959 	bl	8004688 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	441a      	add	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2200      	movs	r2, #0
 80023f0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d902      	bls.n	8002404 <HAL_ETH_ReadData+0x114>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b04      	subs	r3, #4
 8002402:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	3212      	adds	r2, #18
 800240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800241a:	2b00      	cmp	r3, #0
 800241c:	db06      	blt.n	800242c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d202      	bcs.n	800242c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d08d      	beq.n	8002348 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	441a      	add	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f815 	bl	8002470 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	e000      	b.n	8002466 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800247c:	2301      	movs	r3, #1
 800247e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002484:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	3212      	adds	r2, #18
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002496:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002498:	e042      	b.n	8002520 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d112      	bne.n	80024c8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 f8be 	bl	8004628 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	74fb      	strb	r3, [r7, #19]
 80024b6:	e007      	b.n	80024c8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	461a      	mov	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	461a      	mov	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d028      	beq.n	8002520 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <ETH_UpdateDescriptor+0x104>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6053      	str	r3, [r2, #4]
 80024e2:	e005      	b.n	80024f0 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	3301      	adds	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d902      	bls.n	800250e <ETH_UpdateDescriptor+0x9e>
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	3b04      	subs	r3, #4
 800250c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	3212      	adds	r2, #18
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	617b      	str	r3, [r7, #20]
      desccount--;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	3b01      	subs	r3, #1
 800251e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <ETH_UpdateDescriptor+0xbc>
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1b6      	bne.n	800249a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	d01a      	beq.n	800256c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3303      	adds	r3, #3
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002540:	f3bf 8f5f 	dmb	sy
}
 8002544:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6919      	ldr	r1, [r3, #16]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	18ca      	adds	r2, r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800255e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800256c:	bf00      	nop
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	80004000 	.word	0x80004000

08002578 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 031c 	and.w	r3, r3, #28
 8002594:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	02db      	lsls	r3, r3, #11
 800259a:	b29b      	uxth	r3, r3
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	019b      	lsls	r3, r3, #6
 80025a6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80025c8:	f7ff fa22 	bl	8001a10 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025ce:	e00d      	b.n	80025ec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80025d0:	f7ff fa1e 	bl	8001a10 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025de:	d301      	bcc.n	80025e4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e010      	b.n	8002606 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ec      	bne.n	80025d0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 031c 	and.w	r3, r3, #28
 800262a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	02db      	lsls	r3, r3, #11
 8002630:	b29b      	uxth	r3, r3
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7ff f9d2 	bl	8001a10 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800266e:	e00d      	b.n	800268c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002670:	f7ff f9ce 	bl	8001a10 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267e:	d301      	bcc.n	8002684 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e009      	b.n	8002698 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ec      	bne.n	8002670 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0e6      	b.n	8002882 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	b29a      	uxth	r2, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00b      	b.n	80028ba <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d105      	bne.n	80028b8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f870 	bl	8002994 <ETH_SetMACConfig>

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 031c 	bic.w	r3, r3, #28
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028dc:	f001 fae4 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 80028e0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <HAL_ETH_SetMDIOClockRange+0x74>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d804      	bhi.n	80028f4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e019      	b.n	8002928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_ETH_SetMDIOClockRange+0x78>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d204      	bcs.n	8002906 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f043 030c 	orr.w	r3, r3, #12
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e010      	b.n	8002928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d90c      	bls.n	8002928 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d804      	bhi.n	8002920 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e003      	b.n	8002928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f043 0310 	orr.w	r3, r3, #16
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	611a      	str	r2, [r3, #16]
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	02160ebf 	.word	0x02160ebf
 800293c:	03938700 	.word	0x03938700
 8002940:	05f5e0ff 	.word	0x05f5e0ff
 8002944:	08f0d17f 	.word	0x08f0d17f

08002948 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800296a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002978:	2001      	movs	r0, #1
 800297a:	f7ff f855 	bl	8001a28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002988:	6193      	str	r3, [r2, #24]
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <ETH_SetMACConfig+0x164>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7b9b      	ldrb	r3, [r3, #14]
 80029b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	7c12      	ldrb	r2, [r2, #16]
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d102      	bne.n	80029c2 <ETH_SetMACConfig+0x2e>
 80029bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029c0:	e000      	b.n	80029c4 <ETH_SetMACConfig+0x30>
 80029c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80029c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	7c52      	ldrb	r2, [r2, #17]
 80029ca:	2a00      	cmp	r2, #0
 80029cc:	d102      	bne.n	80029d4 <ETH_SetMACConfig+0x40>
 80029ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80029d2:	e000      	b.n	80029d6 <ETH_SetMACConfig+0x42>
 80029d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	7fdb      	ldrb	r3, [r3, #31]
 80029e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	7f92      	ldrb	r2, [r2, #30]
 80029f0:	2a00      	cmp	r2, #0
 80029f2:	d102      	bne.n	80029fa <ETH_SetMACConfig+0x66>
 80029f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029f8:	e000      	b.n	80029fc <ETH_SetMACConfig+0x68>
 80029fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80029fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	7f1b      	ldrb	r3, [r3, #28]
 8002a02:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a04:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	791b      	ldrb	r3, [r3, #4]
 8002a10:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d102      	bne.n	8002a24 <ETH_SetMACConfig+0x90>
 8002a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a22:	e000      	b.n	8002a26 <ETH_SetMACConfig+0x92>
 8002a24:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	7bdb      	ldrb	r3, [r3, #15]
 8002a2c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a2e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a3c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7fe ffe6 	bl	8001a28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a7a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a82:	2a00      	cmp	r2, #0
 8002a84:	d101      	bne.n	8002a8a <ETH_SetMACConfig+0xf6>
 8002a86:	2280      	movs	r2, #128	@ 0x80
 8002a88:	e000      	b.n	8002a8c <ETH_SetMACConfig+0xf8>
 8002a8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a8c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a9a:	2a01      	cmp	r2, #1
 8002a9c:	d101      	bne.n	8002aa2 <ETH_SetMACConfig+0x10e>
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	e000      	b.n	8002aa4 <ETH_SetMACConfig+0x110>
 8002aa2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002aa4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002aac:	2a01      	cmp	r2, #1
 8002aae:	d101      	bne.n	8002ab4 <ETH_SetMACConfig+0x120>
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	e000      	b.n	8002ab6 <ETH_SetMACConfig+0x122>
 8002ab4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002abe:	2a01      	cmp	r2, #1
 8002ac0:	d101      	bne.n	8002ac6 <ETH_SetMACConfig+0x132>
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	e000      	b.n	8002ac8 <ETH_SetMACConfig+0x134>
 8002ac6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe ffa1 	bl	8001a28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	fd20810f 	.word	0xfd20810f

08002afc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <ETH_SetDMAConfig+0x110>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	7b1b      	ldrb	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <ETH_SetDMAConfig+0x2c>
 8002b22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b26:	e000      	b.n	8002b2a <ETH_SetDMAConfig+0x2e>
 8002b28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7b5b      	ldrb	r3, [r3, #13]
 8002b2e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b30:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	7f52      	ldrb	r2, [r2, #29]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d102      	bne.n	8002b40 <ETH_SetDMAConfig+0x44>
 8002b3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b3e:	e000      	b.n	8002b42 <ETH_SetDMAConfig+0x46>
 8002b40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7b9b      	ldrb	r3, [r3, #14]
 8002b48:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b4a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	7f1b      	ldrb	r3, [r3, #28]
 8002b56:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	7f9b      	ldrb	r3, [r3, #30]
 8002b5e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b60:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b6e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b70:	4313      	orrs	r3, r2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b80:	461a      	mov	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7fe ff48 	bl	8001a28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bb0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002bb6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bbc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bc4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002bc6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bd4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002be2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f7fe ff19 	bl	8001a28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfe:	461a      	mov	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	f8de3f23 	.word	0xf8de3f23

08002c10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0a6      	sub	sp, #152	@ 0x98
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c52:	2300      	movs	r3, #0
 8002c54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fe7f 	bl	8002994 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ccc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cd0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cd6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	4619      	mov	r1, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff05 	bl	8002afc <ETH_SetDMAConfig>
}
 8002cf2:	bf00      	nop
 8002cf4:	3798      	adds	r7, #152	@ 0x98
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3305      	adds	r3, #5
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	3204      	adds	r2, #4
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <ETH_MACAddressConfig+0x68>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3303      	adds	r3, #3
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	061a      	lsls	r2, r3, #24
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3302      	adds	r3, #2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	4313      	orrs	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <ETH_MACAddressConfig+0x6c>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6013      	str	r3, [r2, #0]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40028040 	.word	0x40028040
 8002d68:	40028044 	.word	0x40028044

08002d6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e03e      	b.n	8002df8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	3206      	adds	r2, #6
 8002dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d80c      	bhi.n	8002ddc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68d9      	ldr	r1, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	e004      	b.n	8002de6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3301      	adds	r3, #1
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d9bd      	bls.n	8002d7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e10:	611a      	str	r2, [r3, #16]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e048      	b.n	8002ebe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	3212      	adds	r2, #18
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d80c      	bhi.n	8002eae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6919      	ldr	r1, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	e004      	b.n	8002eb8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d9b3      	bls.n	8002e2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eee:	60da      	str	r2, [r3, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b091      	sub	sp, #68	@ 0x44
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f3e:	d007      	beq.n	8002f50 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f44:	3304      	adds	r3, #4
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f50:	2302      	movs	r3, #2
 8002f52:	e111      	b.n	8003178 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	3301      	adds	r3, #1
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4b86      	ldr	r3, [pc, #536]	@ (8003184 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002fd6:	e082      	b.n	80030de <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e005      	b.n	8003004 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003006:	3301      	adds	r3, #1
 8003008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800300a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800300c:	2b03      	cmp	r3, #3
 800300e:	d902      	bls.n	8003016 <ETH_Prepare_Tx_Descriptors+0x11a>
 8003010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003012:	3b04      	subs	r3, #4
 8003014:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800301a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800302c:	d007      	beq.n	800303e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800302e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003032:	3304      	adds	r3, #4
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d029      	beq.n	8003092 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800304c:	2300      	movs	r3, #0
 800304e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003050:	e019      	b.n	8003086 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003052:	f3bf 8f5f 	dmb	sy
}
 8003056:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003062:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	3301      	adds	r3, #1
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306c:	2b03      	cmp	r3, #3
 800306e:	d902      	bls.n	8003076 <ETH_Prepare_Tx_Descriptors+0x17a>
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	3b04      	subs	r3, #4
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800307a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003082:	3301      	adds	r3, #1
 8003084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003086:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308a:	429a      	cmp	r2, r3
 800308c:	d3e1      	bcc.n	8003052 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	e072      	b.n	8003178 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800309a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	3301      	adds	r3, #1
 80030a2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80030a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80030b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <ETH_Prepare_Tx_Descriptors+0x288>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030be:	6852      	ldr	r2, [r2, #4]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	3301      	adds	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80030cc:	f3bf 8f5f 	dmb	sy
}
 80030d0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80030de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f47f af78 	bne.w	8002fd8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e005      	b.n	8003108 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800311e:	f3bf 8f5f 	dmb	sy
}
 8003122:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003138:	3304      	adds	r3, #4
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003144:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003146:	f3ef 8310 	mrs	r3, PRIMASK
 800314a:	613b      	str	r3, [r7, #16]
  return(result);
 800314c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	2301      	movs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	4413      	add	r3, r2
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3744      	adds	r7, #68	@ 0x44
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	ffffe000 	.word	0xffffe000

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e175      	b.n	8003494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8164 	bne.w	800348e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <HAL_GPIO_Init+0x56>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d130      	bne.n	8003240 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d017      	beq.n	800327c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80be 	beq.w	800348e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <HAL_GPIO_Init+0x324>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003316:	4a65      	ldr	r2, [pc, #404]	@ (80034ac <HAL_GPIO_Init+0x324>)
 8003318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800331c:	6453      	str	r3, [r2, #68]	@ 0x44
 800331e:	4b63      	ldr	r3, [pc, #396]	@ (80034ac <HAL_GPIO_Init+0x324>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332a:	4a61      	ldr	r2, [pc, #388]	@ (80034b0 <HAL_GPIO_Init+0x328>)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	@ (80034b4 <HAL_GPIO_Init+0x32c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d037      	beq.n	80033c6 <HAL_GPIO_Init+0x23e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a57      	ldr	r2, [pc, #348]	@ (80034b8 <HAL_GPIO_Init+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0x23a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a56      	ldr	r2, [pc, #344]	@ (80034bc <HAL_GPIO_Init+0x334>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x236>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a55      	ldr	r2, [pc, #340]	@ (80034c0 <HAL_GPIO_Init+0x338>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x232>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a54      	ldr	r2, [pc, #336]	@ (80034c4 <HAL_GPIO_Init+0x33c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x22e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a53      	ldr	r2, [pc, #332]	@ (80034c8 <HAL_GPIO_Init+0x340>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_GPIO_Init+0x344>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x226>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a51      	ldr	r2, [pc, #324]	@ (80034d0 <HAL_GPIO_Init+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x222>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a50      	ldr	r2, [pc, #320]	@ (80034d4 <HAL_GPIO_Init+0x34c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x21e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4f      	ldr	r2, [pc, #316]	@ (80034d8 <HAL_GPIO_Init+0x350>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x21a>
 800339e:	2309      	movs	r3, #9
 80033a0:	e012      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a2:	230a      	movs	r3, #10
 80033a4:	e010      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e00e      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c6:	2300      	movs	r3, #0
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033d8:	4935      	ldr	r1, [pc, #212]	@ (80034b0 <HAL_GPIO_Init+0x328>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e6:	4b3d      	ldr	r3, [pc, #244]	@ (80034dc <HAL_GPIO_Init+0x354>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340a:	4a34      	ldr	r2, [pc, #208]	@ (80034dc <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003410:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <HAL_GPIO_Init+0x354>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003434:	4a29      	ldr	r2, [pc, #164]	@ (80034dc <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800343a:	4b28      	ldr	r3, [pc, #160]	@ (80034dc <HAL_GPIO_Init+0x354>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800345e:	4a1f      	ldr	r2, [pc, #124]	@ (80034dc <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003464:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_GPIO_Init+0x354>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003488:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	f67f ae86 	bls.w	80031a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3724      	adds	r7, #36	@ 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40021400 	.word	0x40021400
 80034cc:	40021800 	.word	0x40021800
 80034d0:	40021c00 	.word	0x40021c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022400 	.word	0x40022400
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003524:	887a      	ldrh	r2, [r7, #2]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4013      	ands	r3, r2
 800352a:	041a      	lsls	r2, r3, #16
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43d9      	mvns	r1, r3
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	619a      	str	r2, [r3, #24]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	@ 0x40
 800355e:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003576:	f7fe fa4b 	bl	8001a10 <HAL_GetTick>
 800357a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800357c:	e009      	b.n	8003592 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800357e:	f7fe fa47 	bl	8001a10 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800358c:	d901      	bls.n	8003592 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e022      	b.n	80035d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003592:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800359e:	d1ee      	bne.n	800357e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035a0:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0f      	ldr	r2, [pc, #60]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ac:	f7fe fa30 	bl	8001a10 <HAL_GetTick>
 80035b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035b2:	e009      	b.n	80035c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035b4:	f7fe fa2c 	bl	8001a10 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035c2:	d901      	bls.n	80035c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e007      	b.n	80035d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035d4:	d1ee      	bne.n	80035b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40007000 	.word	0x40007000

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e29b      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8087 	beq.w	800371a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800360c:	4b96      	ldr	r3, [pc, #600]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b04      	cmp	r3, #4
 8003616:	d00c      	beq.n	8003632 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003618:	4b93      	ldr	r3, [pc, #588]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d112      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
 8003624:	4b90      	ldr	r3, [pc, #576]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003630:	d10b      	bne.n	800364a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003632:	4b8d      	ldr	r3, [pc, #564]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d06c      	beq.n	8003718 <HAL_RCC_OscConfig+0x130>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d168      	bne.n	8003718 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e275      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x7a>
 8003654:	4b84      	ldr	r3, [pc, #528]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a83      	ldr	r2, [pc, #524]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800365a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e02e      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x9c>
 800366a:	4b7f      	ldr	r3, [pc, #508]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7e      	ldr	r2, [pc, #504]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b7c      	ldr	r3, [pc, #496]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7b      	ldr	r2, [pc, #492]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800367c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e01d      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 800368e:	4b76      	ldr	r3, [pc, #472]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a75      	ldr	r2, [pc, #468]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b73      	ldr	r3, [pc, #460]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a72      	ldr	r2, [pc, #456]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0xd8>
 80036a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f9a2 	bl	8001a10 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fe f99e 	bl	8001a10 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	@ 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e229      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	4b61      	ldr	r3, [pc, #388]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe f98e 	bl	8001a10 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe f98a 	bl	8001a10 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e215      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	4b57      	ldr	r3, [pc, #348]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x110>
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d069      	beq.n	80037fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003726:	4b50      	ldr	r3, [pc, #320]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b4d      	ldr	r3, [pc, #308]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b08      	cmp	r3, #8
 800373c:	d11c      	bne.n	8003778 <HAL_RCC_OscConfig+0x190>
 800373e:	4b4a      	ldr	r3, [pc, #296]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x17a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e1e9      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b41      	ldr	r3, [pc, #260]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	493d      	ldr	r1, [pc, #244]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003776:	e040      	b.n	80037fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d023      	beq.n	80037c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003780:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a38      	ldr	r2, [pc, #224]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe f940 	bl	8001a10 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe f93c 	bl	8001a10 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1c7      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a6:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4929      	ldr	r1, [pc, #164]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
 80037c6:	e018      	b.n	80037fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c8:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a26      	ldr	r2, [pc, #152]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe f91c 	bl	8001a10 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7fe f918 	bl	8001a10 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1a3      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d038      	beq.n	8003878 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d019      	beq.n	8003842 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003812:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fe f8f9 	bl	8001a10 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003822:	f7fe f8f5 	bl	8001a10 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e180      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003834:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x23a>
 8003840:	e01a      	b.n	8003878 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003846:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fe f8df 	bl	8001a10 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003856:	f7fe f8db 	bl	8001a10 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d903      	bls.n	800386c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e166      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
 8003868:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b92      	ldr	r3, [pc, #584]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ee      	bne.n	8003856 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a4 	beq.w	80039ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003886:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10d      	bne.n	80038ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b89      	ldr	r3, [pc, #548]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	4a88      	ldr	r2, [pc, #544]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	@ 0x40
 800389e:	4b86      	ldr	r3, [pc, #536]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ae:	4b83      	ldr	r3, [pc, #524]	@ (8003abc <HAL_RCC_OscConfig+0x4d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d118      	bne.n	80038ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038ba:	4b80      	ldr	r3, [pc, #512]	@ (8003abc <HAL_RCC_OscConfig+0x4d4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a7f      	ldr	r2, [pc, #508]	@ (8003abc <HAL_RCC_OscConfig+0x4d4>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c6:	f7fe f8a3 	bl	8001a10 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ce:	f7fe f89f 	bl	8001a10 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b64      	cmp	r3, #100	@ 0x64
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e12a      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e0:	4b76      	ldr	r3, [pc, #472]	@ (8003abc <HAL_RCC_OscConfig+0x4d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x31a>
 80038f4:	4b70      	ldr	r3, [pc, #448]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	4a6f      	ldr	r2, [pc, #444]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003900:	e02d      	b.n	800395e <HAL_RCC_OscConfig+0x376>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x33c>
 800390a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	@ 0x70
 8003916:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	4a67      	ldr	r2, [pc, #412]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	@ 0x70
 8003922:	e01c      	b.n	800395e <HAL_RCC_OscConfig+0x376>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d10c      	bne.n	8003946 <HAL_RCC_OscConfig+0x35e>
 800392c:	4b62      	ldr	r3, [pc, #392]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a61      	ldr	r2, [pc, #388]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003932:	f043 0304 	orr.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	@ 0x70
 8003944:	e00b      	b.n	800395e <HAL_RCC_OscConfig+0x376>
 8003946:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 800394c:	f023 0301 	bic.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
 8003952:	4b59      	ldr	r3, [pc, #356]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003956:	4a58      	ldr	r2, [pc, #352]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d015      	beq.n	8003992 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fe f853 	bl	8001a10 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fe f84f 	bl	8001a10 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0d8      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ee      	beq.n	800396e <HAL_RCC_OscConfig+0x386>
 8003990:	e014      	b.n	80039bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fe f83d 	bl	8001a10 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fe f839 	bl	8001a10 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0c2      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b0:	4b41      	ldr	r3, [pc, #260]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ee      	bne.n	800399a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80ae 	beq.w	8003b34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d8:	4b37      	ldr	r3, [pc, #220]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d06d      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d14b      	bne.n	8003a84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ec:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a31      	ldr	r2, [pc, #196]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 80039f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fe f80a 	bl	8001a10 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe f806 	bl	8001a10 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e091      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	491b      	ldr	r1, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b19      	ldr	r3, [pc, #100]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a18      	ldr	r2, [pc, #96]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd ffd8 	bl	8001a10 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd ffd4 	bl	8001a10 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e05f      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x47c>
 8003a82:	e057      	b.n	8003b34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a84:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd ffbe 	bl	8001a10 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd ffba 	bl	8001a10 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e045      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4b0>
 8003ab6:	e03d      	b.n	8003b34 <HAL_RCC_OscConfig+0x54c>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b40 <HAL_RCC_OscConfig+0x558>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d030      	beq.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d129      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d122      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d119      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d10f      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0d0      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b67      	ldr	r3, [pc, #412]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 020f 	bic.w	r2, r3, #15
 8003b72:	4965      	ldr	r1, [pc, #404]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d040      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b41      	ldr	r3, [pc, #260]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e073      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4936      	ldr	r1, [pc, #216]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fd feea 	bl	8001a10 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fd fee6 	bl	8001a10 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e053      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d210      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 020f 	bic.w	r2, r3, #15
 8003c7e:	4922      	ldr	r1, [pc, #136]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <HAL_RCC_ClockConfig+0x1cc>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	@ (8003d14 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_ClockConfig+0x1d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fe46 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	0801ab14 	.word	0x0801ab14
 8003d14:	20000010 	.word	0x20000010
 8003d18:	20000014 	.word	0x20000014

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b090      	sub	sp, #64	@ 0x40
 8003d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d28:	2300      	movs	r3, #0
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d34:	4b59      	ldr	r3, [pc, #356]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x40>
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	f200 80a1 	bhi.w	8003e88 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d4e:	e09b      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d54:	e09b      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d56:	4b53      	ldr	r3, [pc, #332]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d5a:	e098      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d66:	4b4d      	ldr	r3, [pc, #308]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d028      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d72:	4b4a      	ldr	r3, [pc, #296]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	2200      	movs	r2, #0
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d84:	2100      	movs	r1, #0
 8003d86:	4b47      	ldr	r3, [pc, #284]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d88:	fb03 f201 	mul.w	r2, r3, r1
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	4a43      	ldr	r2, [pc, #268]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d96:	fba0 1202 	umull	r1, r2, r0, r2
 8003d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da2:	4413      	add	r3, r2
 8003da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2200      	movs	r2, #0
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	61fa      	str	r2, [r7, #28]
 8003dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003db6:	f7fc fc57 	bl	8000668 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc2:	e053      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc4:	4b35      	ldr	r3, [pc, #212]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	099b      	lsrs	r3, r3, #6
 8003dca:	2200      	movs	r2, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	617a      	str	r2, [r7, #20]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dd6:	f04f 0b00 	mov.w	fp, #0
 8003dda:	4652      	mov	r2, sl
 8003ddc:	465b      	mov	r3, fp
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	0159      	lsls	r1, r3, #5
 8003de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dec:	0150      	lsls	r0, r2, #5
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	ebb2 080a 	subs.w	r8, r2, sl
 8003df6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e0e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e12:	eb63 0509 	sbc.w	r5, r3, r9
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	00eb      	lsls	r3, r5, #3
 8003e20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e24:	00e2      	lsls	r2, r4, #3
 8003e26:	4614      	mov	r4, r2
 8003e28:	461d      	mov	r5, r3
 8003e2a:	eb14 030a 	adds.w	r3, r4, sl
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	eb45 030b 	adc.w	r3, r5, fp
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e42:	4629      	mov	r1, r5
 8003e44:	028b      	lsls	r3, r1, #10
 8003e46:	4621      	mov	r1, r4
 8003e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	028a      	lsls	r2, r1, #10
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	2200      	movs	r2, #0
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	60fa      	str	r2, [r7, #12]
 8003e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e60:	f7fc fc02 	bl	8000668 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3740      	adds	r7, #64	@ 0x40
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	017d7840 	.word	0x017d7840

08003ea8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000010 	.word	0x20000010

08003ec0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003ec6:	f002 f86e 	bl	8005fa6 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <MX_LWIP_Init+0x54>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003ed0:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <MX_LWIP_Init+0x58>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	@ (8003f1c <MX_LWIP_Init+0x5c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003edc:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <MX_LWIP_Init+0x60>)
 8003ede:	9302      	str	r3, [sp, #8]
 8003ee0:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <MX_LWIP_Init+0x64>)
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <MX_LWIP_Init+0x5c>)
 8003eea:	4a0b      	ldr	r2, [pc, #44]	@ (8003f18 <MX_LWIP_Init+0x58>)
 8003eec:	4909      	ldr	r1, [pc, #36]	@ (8003f14 <MX_LWIP_Init+0x54>)
 8003eee:	480e      	ldr	r0, [pc, #56]	@ (8003f28 <MX_LWIP_Init+0x68>)
 8003ef0:	f002 fd68 	bl	80069c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ef4:	480c      	ldr	r0, [pc, #48]	@ (8003f28 <MX_LWIP_Init+0x68>)
 8003ef6:	f002 ff1f 	bl	8006d38 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003efa:	480b      	ldr	r0, [pc, #44]	@ (8003f28 <MX_LWIP_Init+0x68>)
 8003efc:	f002 ff2c 	bl	8006d58 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003f00:	490a      	ldr	r1, [pc, #40]	@ (8003f2c <MX_LWIP_Init+0x6c>)
 8003f02:	4809      	ldr	r0, [pc, #36]	@ (8003f28 <MX_LWIP_Init+0x68>)
 8003f04:	f003 f82e 	bl	8006f64 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003f08:	4807      	ldr	r0, [pc, #28]	@ (8003f28 <MX_LWIP_Init+0x68>)
 8003f0a:	f00b f8c5 	bl	800f098 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	200004f8 	.word	0x200004f8
 8003f18:	200004fc 	.word	0x200004fc
 8003f1c:	20000500 	.word	0x20000500
 8003f20:	08012d31 	.word	0x08012d31
 8003f24:	080042a5 	.word	0x080042a5
 8003f28:	200004c0 	.word	0x200004c0
 8003f2c:	08003f81 	.word	0x08003f81

08003f30 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003f38:	f7fd fd6a 	bl	8001a10 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <Ethernet_Link_Periodic_Handle+0x30>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b63      	cmp	r3, #99	@ 0x63
 8003f46:	d907      	bls.n	8003f58 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003f48:	f7fd fd62 	bl	8001a10 <HAL_GetTick>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <Ethernet_Link_Periodic_Handle+0x30>)
 8003f50:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fadc 	bl	8004510 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003f58:	bf00      	nop
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200004bc 	.word	0x200004bc

08003f64 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003f68:	4804      	ldr	r0, [pc, #16]	@ (8003f7c <MX_LWIP_Process+0x18>)
 8003f6a:	f000 f97b 	bl	8004264 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003f6e:	f00a f817 	bl	800dfa0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003f72:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <MX_LWIP_Process+0x18>)
 8003f74:	f7ff ffdc 	bl	8003f30 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200004c0 	.word	0x200004c0

08003f80 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <SCB_InvalidateDCache_by_Addr>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003faa:	f3bf 8f4f 	dsb	sy
}
 8003fae:	bf00      	nop
    while (op_size > 0) {
 8003fb0:	e00b      	b.n	8003fca <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	dcf0      	bgt.n	8003fb2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd0:	f3bf 8f4f 	dsb	sy
}
 8003fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fd6:	f3bf 8f6f 	isb	sy
}
 8003fda:	bf00      	nop
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ff8:	4b44      	ldr	r3, [pc, #272]	@ (800410c <low_level_init+0x120>)
 8003ffa:	4a45      	ldr	r2, [pc, #276]	@ (8004110 <low_level_init+0x124>)
 8003ffc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003ffe:	2300      	movs	r3, #0
 8004000:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004006:	23e1      	movs	r3, #225	@ 0xe1
 8004008:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800400a:	2300      	movs	r3, #0
 800400c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800400e:	2300      	movs	r3, #0
 8004010:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004012:	2300      	movs	r3, #0
 8004014:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004016:	4a3d      	ldr	r2, [pc, #244]	@ (800410c <low_level_init+0x120>)
 8004018:	f107 0308 	add.w	r3, r7, #8
 800401c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800401e:	4b3b      	ldr	r3, [pc, #236]	@ (800410c <low_level_init+0x120>)
 8004020:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004024:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004026:	4b39      	ldr	r3, [pc, #228]	@ (800410c <low_level_init+0x120>)
 8004028:	4a3a      	ldr	r2, [pc, #232]	@ (8004114 <low_level_init+0x128>)
 800402a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800402c:	4b37      	ldr	r3, [pc, #220]	@ (800410c <low_level_init+0x120>)
 800402e:	4a3a      	ldr	r2, [pc, #232]	@ (8004118 <low_level_init+0x12c>)
 8004030:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004032:	4b36      	ldr	r3, [pc, #216]	@ (800410c <low_level_init+0x120>)
 8004034:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004038:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800403a:	4834      	ldr	r0, [pc, #208]	@ (800410c <low_level_init+0x120>)
 800403c:	f7fd ff72 	bl	8001f24 <HAL_ETH_Init>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004044:	2238      	movs	r2, #56	@ 0x38
 8004046:	2100      	movs	r1, #0
 8004048:	4834      	ldr	r0, [pc, #208]	@ (800411c <low_level_init+0x130>)
 800404a:	f00f ffa0 	bl	8013f8e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800404e:	4b33      	ldr	r3, [pc, #204]	@ (800411c <low_level_init+0x130>)
 8004050:	2221      	movs	r2, #33	@ 0x21
 8004052:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004054:	4b31      	ldr	r3, [pc, #196]	@ (800411c <low_level_init+0x130>)
 8004056:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800405a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800405c:	4b2f      	ldr	r3, [pc, #188]	@ (800411c <low_level_init+0x130>)
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004062:	482f      	ldr	r0, [pc, #188]	@ (8004120 <low_level_init+0x134>)
 8004064:	f002 fb76 	bl	8006754 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2206      	movs	r2, #6
 800406c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004070:	4b26      	ldr	r3, [pc, #152]	@ (800410c <low_level_init+0x120>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800407c:	4b23      	ldr	r3, [pc, #140]	@ (800410c <low_level_init+0x120>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	785a      	ldrb	r2, [r3, #1]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004088:	4b20      	ldr	r3, [pc, #128]	@ (800410c <low_level_init+0x120>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	789a      	ldrb	r2, [r3, #2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004094:	4b1d      	ldr	r3, [pc, #116]	@ (800410c <low_level_init+0x120>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	78da      	ldrb	r2, [r3, #3]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040a0:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <low_level_init+0x120>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	791a      	ldrb	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040ac:	4b17      	ldr	r3, [pc, #92]	@ (800410c <low_level_init+0x120>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	795a      	ldrb	r2, [r3, #5]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80040be:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040c6:	f043 030a 	orr.w	r3, r3, #10
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80040d2:	4914      	ldr	r1, [pc, #80]	@ (8004124 <low_level_init+0x138>)
 80040d4:	4814      	ldr	r0, [pc, #80]	@ (8004128 <low_level_init+0x13c>)
 80040d6:	f7fd fb44 	bl	8001762 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80040da:	4813      	ldr	r0, [pc, #76]	@ (8004128 <low_level_init+0x13c>)
 80040dc:	f7fd fb73 	bl	80017c6 <LAN8742_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f002 ff0c 	bl	8006f04 <netif_set_link_down>
    netif_set_down(netif);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f002 fe9f 	bl	8006e30 <netif_set_down>
 80040f2:	e008      	b.n	8004106 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa08 	bl	8004510 <ethernet_link_check_state>
 8004100:	e001      	b.n	8004106 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8004102:	f7fc ffb1 	bl	8001068 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20004e90 	.word	0x20004e90
 8004110:	40028000 	.word	0x40028000
 8004114:	200002a8 	.word	0x200002a8
 8004118:	20000208 	.word	0x20000208
 800411c:	20004f40 	.word	0x20004f40
 8004120:	0801ab24 	.word	0x0801ab24
 8004124:	2000001c 	.word	0x2000001c
 8004128:	20004f78 	.word	0x20004f78

0800412c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b092      	sub	sp, #72	@ 0x48
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	2230      	movs	r2, #48	@ 0x30
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f00f ff1e 	bl	8013f8e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004152:	f107 030c 	add.w	r3, r7, #12
 8004156:	2230      	movs	r2, #48	@ 0x30
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f00f ff17 	bl	8013f8e <memset>

  for(q = p; q != NULL; q = q->next)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	643b      	str	r3, [r7, #64]	@ 0x40
 8004164:	e045      	b.n	80041f2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004168:	2b03      	cmp	r3, #3
 800416a:	d902      	bls.n	8004172 <low_level_output+0x46>
      return ERR_IF;
 800416c:	f06f 030b 	mvn.w	r3, #11
 8004170:	e055      	b.n	800421e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004178:	4613      	mov	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3348      	adds	r3, #72	@ 0x48
 8004182:	443b      	add	r3, r7
 8004184:	3b3c      	subs	r3, #60	@ 0x3c
 8004186:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800418a:	895b      	ldrh	r3, [r3, #10]
 800418c:	4619      	mov	r1, r3
 800418e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	3348      	adds	r3, #72	@ 0x48
 800419a:	443b      	add	r3, r7
 800419c:	3b38      	subs	r3, #56	@ 0x38
 800419e:	6019      	str	r1, [r3, #0]

    if(i>0)
 80041a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80041a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a8:	1e5a      	subs	r2, r3, #1
 80041aa:	f107 000c 	add.w	r0, r7, #12
 80041ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041b0:	460b      	mov	r3, r1
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	440b      	add	r3, r1
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	18c1      	adds	r1, r0, r3
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	3348      	adds	r3, #72	@ 0x48
 80041c4:	443b      	add	r3, r7
 80041c6:	3b34      	subs	r3, #52	@ 0x34
 80041c8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80041d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3348      	adds	r3, #72	@ 0x48
 80041de:	443b      	add	r3, r7
 80041e0:	3b34      	subs	r3, #52	@ 0x34
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80041e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e8:	3301      	adds	r3, #1
 80041ea:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80041ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1b6      	bne.n	8004166 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	891b      	ldrh	r3, [r3, #8]
 80041fc:	461a      	mov	r2, r3
 80041fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <low_level_output+0xfc>)
 8004200:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004202:	4a09      	ldr	r2, [pc, #36]	@ (8004228 <low_level_output+0xfc>)
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800420a:	4a07      	ldr	r2, [pc, #28]	@ (8004228 <low_level_output+0xfc>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004210:	2214      	movs	r2, #20
 8004212:	4905      	ldr	r1, [pc, #20]	@ (8004228 <low_level_output+0xfc>)
 8004214:	4805      	ldr	r0, [pc, #20]	@ (800422c <low_level_output+0x100>)
 8004216:	f7fd ffd7 	bl	80021c8 <HAL_ETH_Transmit>

  return errval;
 800421a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800421e:	4618      	mov	r0, r3
 8004220:	3748      	adds	r7, #72	@ 0x48
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20004f40 	.word	0x20004f40
 800422c:	20004e90 	.word	0x20004e90

08004230 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <low_level_input+0x2c>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	4619      	mov	r1, r3
 800424a:	4805      	ldr	r0, [pc, #20]	@ (8004260 <low_level_input+0x30>)
 800424c:	f7fe f850 	bl	80022f0 <HAL_ETH_ReadData>
  }

  return p;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20004e8c 	.word	0x20004e8c
 8004260:	20004e90 	.word	0x20004e90

08004264 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffdd 	bl	8004230 <low_level_input>
 8004276:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	4798      	blx	r3
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f003 f9e8 	bl	8007664 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ea      	bne.n	8004270 <ethernetif_input+0xc>
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <ethernetif_init+0x1c>
 80042b2:	4b0e      	ldr	r3, [pc, #56]	@ (80042ec <ethernetif_init+0x48>)
 80042b4:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80042b8:	490d      	ldr	r1, [pc, #52]	@ (80042f0 <ethernetif_init+0x4c>)
 80042ba:	480e      	ldr	r0, [pc, #56]	@ (80042f4 <ethernetif_init+0x50>)
 80042bc:	f00f fdc6 	bl	8013e4c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2273      	movs	r2, #115	@ 0x73
 80042c4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2274      	movs	r2, #116	@ 0x74
 80042cc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a09      	ldr	r2, [pc, #36]	@ (80042f8 <ethernetif_init+0x54>)
 80042d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a08      	ldr	r2, [pc, #32]	@ (80042fc <ethernetif_init+0x58>)
 80042da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fe85 	bl	8003fec <low_level_init>

  return ERR_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	08017574 	.word	0x08017574
 80042f0:	08017590 	.word	0x08017590
 80042f4:	080175a0 	.word	0x080175a0
 80042f8:	08010f59 	.word	0x08010f59
 80042fc:	0800412d 	.word	0x0800412d

08004300 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	4807      	ldr	r0, [pc, #28]	@ (800432c <pbuf_free_custom+0x2c>)
 8004310:	f002 fb02 	bl	8006918 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <pbuf_free_custom+0x30>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d102      	bne.n	8004322 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800431c:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <pbuf_free_custom+0x30>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
  }
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	0801ab24 	.word	0x0801ab24
 8004330:	20004e8c 	.word	0x20004e8c

08004334 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004338:	f7fd fb6a 	bl	8001a10 <HAL_GetTick>
 800433c:	4603      	mov	r3, r0
}
 800433e:	4618      	mov	r0, r3
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08e      	sub	sp, #56	@ 0x38
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a3f      	ldr	r2, [pc, #252]	@ (8004460 <HAL_ETH_MspInit+0x11c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d178      	bne.n	8004458 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004366:	4b3f      	ldr	r3, [pc, #252]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	4a3e      	ldr	r2, [pc, #248]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004370:	6313      	str	r3, [r2, #48]	@ 0x30
 8004372:	4b3c      	ldr	r3, [pc, #240]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	4b39      	ldr	r3, [pc, #228]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	4a38      	ldr	r2, [pc, #224]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 8004384:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004388:	6313      	str	r3, [r2, #48]	@ 0x30
 800438a:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4b33      	ldr	r3, [pc, #204]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	4a32      	ldr	r2, [pc, #200]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 800439c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a2:	4b30      	ldr	r3, [pc, #192]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c6:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d2:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043de:	4b21      	ldr	r3, [pc, #132]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <HAL_ETH_MspInit+0x120>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80043f6:	2332      	movs	r3, #50	@ 0x32
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004402:	2303      	movs	r3, #3
 8004404:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004406:	230b      	movs	r3, #11
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800440e:	4619      	mov	r1, r3
 8004410:	4815      	ldr	r0, [pc, #84]	@ (8004468 <HAL_ETH_MspInit+0x124>)
 8004412:	f7fe feb9 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004416:	2386      	movs	r3, #134	@ 0x86
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441a:	2302      	movs	r3, #2
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004422:	2303      	movs	r3, #3
 8004424:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004426:	230b      	movs	r3, #11
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800442e:	4619      	mov	r1, r3
 8004430:	480e      	ldr	r0, [pc, #56]	@ (800446c <HAL_ETH_MspInit+0x128>)
 8004432:	f7fe fea9 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004436:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004448:	230b      	movs	r3, #11
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004450:	4619      	mov	r1, r3
 8004452:	4807      	ldr	r0, [pc, #28]	@ (8004470 <HAL_ETH_MspInit+0x12c>)
 8004454:	f7fe fe98 	bl	8003188 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004458:	bf00      	nop
 800445a:	3738      	adds	r7, #56	@ 0x38
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40028000 	.word	0x40028000
 8004464:	40023800 	.word	0x40023800
 8004468:	40020800 	.word	0x40020800
 800446c:	40020000 	.word	0x40020000
 8004470:	40020400 	.word	0x40020400

08004474 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004478:	4802      	ldr	r0, [pc, #8]	@ (8004484 <ETH_PHY_IO_Init+0x10>)
 800447a:	f7fe fa23 	bl	80028c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20004e90 	.word	0x20004e90

08004488 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return 0;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	4807      	ldr	r0, [pc, #28]	@ (80044c8 <ETH_PHY_IO_ReadReg+0x30>)
 80044ac:	f7fe f864 	bl	8002578 <HAL_ETH_ReadPHYRegister>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	e000      	b.n	80044be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20004e90 	.word	0x20004e90

080044cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	4807      	ldr	r0, [pc, #28]	@ (80044fc <ETH_PHY_IO_WriteReg+0x30>)
 80044e0:	f7fe f895 	bl	800260e <HAL_ETH_WritePHYRegister>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	e000      	b.n	80044f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20004e90 	.word	0x20004e90

08004500 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004504:	f7fd fa84 	bl	8001a10 <HAL_GetTick>
 8004508:	4603      	mov	r3, r0
}
 800450a:	4618      	mov	r0, r3
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0a0      	sub	sp, #128	@ 0x80
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	2264      	movs	r2, #100	@ 0x64
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f00f fd34 	bl	8013f8e <memset>
  int32_t PHYLinkState = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800452e:	2300      	movs	r3, #0
 8004530:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004532:	2300      	movs	r3, #0
 8004534:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004536:	483a      	ldr	r0, [pc, #232]	@ (8004620 <ethernet_link_check_state+0x110>)
 8004538:	f7fd f992 	bl	8001860 <LAN8742_GetLinkState>
 800453c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <ethernet_link_check_state+0x5a>
 8004550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004552:	2b01      	cmp	r3, #1
 8004554:	dc09      	bgt.n	800456a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004556:	4833      	ldr	r0, [pc, #204]	@ (8004624 <ethernet_link_check_state+0x114>)
 8004558:	f7fd fddd 	bl	8002116 <HAL_ETH_Stop>
    netif_set_down(netif);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f002 fc67 	bl	8006e30 <netif_set_down>
    netif_set_link_down(netif);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f002 fcce 	bl	8006f04 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004568:	e055      	b.n	8004616 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d14e      	bne.n	8004616 <ethernet_link_check_state+0x106>
 8004578:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800457a:	2b01      	cmp	r3, #1
 800457c:	dd4b      	ble.n	8004616 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800457e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004580:	3b02      	subs	r3, #2
 8004582:	2b03      	cmp	r3, #3
 8004584:	d82a      	bhi.n	80045dc <ethernet_link_check_state+0xcc>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <ethernet_link_check_state+0x7c>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045af 	.word	0x080045af
 8004594:	080045bf 	.word	0x080045bf
 8004598:	080045cf 	.word	0x080045cf
      duplex = ETH_FULLDUPLEX_MODE;
 800459c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80045a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045ac:	e017      	b.n	80045de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80045b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80045b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045b8:	2301      	movs	r3, #1
 80045ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045bc:	e00f      	b.n	80045de <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80045be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045c2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80045c4:	2300      	movs	r3, #0
 80045c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045cc:	e007      	b.n	80045de <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80045d2:	2300      	movs	r3, #0
 80045d4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045d6:	2301      	movs	r3, #1
 80045d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045da:	e000      	b.n	80045de <ethernet_link_check_state+0xce>
      break;
 80045dc:	bf00      	nop
    if(linkchanged)
 80045de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80045e4:	f107 030c 	add.w	r3, r7, #12
 80045e8:	4619      	mov	r1, r3
 80045ea:	480e      	ldr	r0, [pc, #56]	@ (8004624 <ethernet_link_check_state+0x114>)
 80045ec:	f7fe f858 	bl	80026a0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80045f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80045f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80045f8:	f107 030c 	add.w	r3, r7, #12
 80045fc:	4619      	mov	r1, r3
 80045fe:	4809      	ldr	r0, [pc, #36]	@ (8004624 <ethernet_link_check_state+0x114>)
 8004600:	f7fe f945 	bl	800288e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004604:	4807      	ldr	r0, [pc, #28]	@ (8004624 <ethernet_link_check_state+0x114>)
 8004606:	f7fd fd27 	bl	8002058 <HAL_ETH_Start>
      netif_set_up(netif);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f002 fba4 	bl	8006d58 <netif_set_up>
      netif_set_link_up(netif);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f002 fc3f 	bl	8006e94 <netif_set_link_up>
}
 8004616:	bf00      	nop
 8004618:	3780      	adds	r7, #128	@ 0x80
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20004f78 	.word	0x20004f78
 8004624:	20004e90 	.word	0x20004e90

08004628 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af02      	add	r7, sp, #8
 800462e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004630:	4812      	ldr	r0, [pc, #72]	@ (800467c <HAL_ETH_RxAllocateCallback+0x54>)
 8004632:	f002 f903 	bl	800683c <memp_malloc_pool>
 8004636:	60f8      	str	r0, [r7, #12]
  if (p)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f103 0220 	add.w	r2, r3, #32
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <HAL_ETH_RxAllocateCallback+0x58>)
 800464c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004656:	9201      	str	r2, [sp, #4]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2241      	movs	r2, #65	@ 0x41
 800465e:	2100      	movs	r1, #0
 8004660:	2000      	movs	r0, #0
 8004662:	f002 fe45 	bl	80072f0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004666:	e005      	b.n	8004674 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_ETH_RxAllocateCallback+0x5c>)
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0801ab24 	.word	0x0801ab24
 8004680:	08004301 	.word	0x08004301
 8004684:	20004e8c 	.word	0x20004e8c

08004688 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3b20      	subs	r3, #32
 80046a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2200      	movs	r2, #0
 80046b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	887a      	ldrh	r2, [r7, #2]
 80046b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	69fa      	ldr	r2, [r7, #28]
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e003      	b.n	80046d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	e009      	b.n	80046f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	891a      	ldrh	r2, [r3, #8]
 80046e4:	887b      	ldrh	r3, [r7, #2]
 80046e6:	4413      	add	r3, r2
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f2      	bne.n	80046e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fc48 	bl	8003f94 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004704:	bf00      	nop
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	88db      	ldrh	r3, [r3, #6]
 8004718:	3301      	adds	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	88db      	ldrh	r3, [r3, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d105      	bne.n	8004734 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	88db      	ldrh	r3, [r3, #6]
 800472c:	3301      	adds	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	88db      	ldrh	r3, [r3, #6]
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	711a      	strb	r2, [r3, #4]
  rb->put++;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	2bff      	cmp	r3, #255	@ 0xff
 8004770:	d902      	bls.n	8004778 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	801a      	strh	r2, [r3, #0]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	885b      	ldrh	r3, [r3, #2]
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	3304      	adds	r3, #4
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	2bff      	cmp	r3, #255	@ 0xff
 80047b4:	d905      	bls.n	80047c2 <mqtt_ringbuf_advance_get_idx+0x1e>
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <mqtt_ringbuf_advance_get_idx+0x4c>)
 80047b8:	22cb      	movs	r2, #203	@ 0xcb
 80047ba:	490e      	ldr	r1, [pc, #56]	@ (80047f4 <mqtt_ringbuf_advance_get_idx+0x50>)
 80047bc:	480e      	ldr	r0, [pc, #56]	@ (80047f8 <mqtt_ringbuf_advance_get_idx+0x54>)
 80047be:	f00f fb45 	bl	8013e4c <iprintf>

  rb->get += len;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	885a      	ldrh	r2, [r3, #2]
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	4413      	add	r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	885b      	ldrh	r3, [r3, #2]
 80047d4:	2bff      	cmp	r3, #255	@ 0xff
 80047d6:	d906      	bls.n	80047e6 <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	885b      	ldrh	r3, [r3, #2]
 80047dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	805a      	strh	r2, [r3, #2]
  }
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	080175c8 	.word	0x080175c8
 80047f4:	08017600 	.word	0x08017600
 80047f8:	08017640 	.word	0x08017640

080047fc <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	885b      	ldrh	r3, [r3, #2]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004818:	d303      	bcc.n	8004822 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004820:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	b29b      	uxth	r3, r3
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffda 	bl	80047fc <mqtt_ringbuf_len>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	885b      	ldrh	r3, [r3, #2]
 8004850:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004854:	429a      	cmp	r2, r3
 8004856:	da04      	bge.n	8004862 <mqtt_output_send+0x2e>
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ffcf 	bl	80047fc <mqtt_ringbuf_len>
 800485e:	4603      	mov	r3, r0
 8004860:	e004      	b.n	800486c <mqtt_output_send+0x38>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	885b      	ldrh	r3, [r3, #2]
 8004866:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800486a:	b29b      	uxth	r3, r3
 800486c:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004874:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <mqtt_output_send+0x54>
 800487c:	4b44      	ldr	r3, [pc, #272]	@ (8004990 <mqtt_output_send+0x15c>)
 800487e:	22f0      	movs	r2, #240	@ 0xf0
 8004880:	4944      	ldr	r1, [pc, #272]	@ (8004994 <mqtt_output_send+0x160>)
 8004882:	4845      	ldr	r0, [pc, #276]	@ (8004998 <mqtt_output_send+0x164>)
 8004884:	f00f fae2 	bl	8013e4c <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8004888:	89bb      	ldrh	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d07c      	beq.n	8004988 <mqtt_output_send+0x154>
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d079      	beq.n	8004988 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8004894:	89ba      	ldrh	r2, [r7, #12]
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	429a      	cmp	r2, r3
 800489a:	d90d      	bls.n	80048b8 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ffab 	bl	80047fc <mqtt_ringbuf_len>
 80048a6:	4603      	mov	r3, r0
 80048a8:	461a      	mov	r2, r3
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bf34      	ite	cc
 80048b0:	2301      	movcc	r3, #1
 80048b2:	2300      	movcs	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff63 	bl	8004784 <mqtt_ringbuf_get_ptr>
 80048be:	4601      	mov	r1, r0
 80048c0:	7bbb      	ldrb	r3, [r7, #14]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <mqtt_output_send+0x96>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e000      	b.n	80048cc <mqtt_output_send+0x98>
 80048ca:	2301      	movs	r3, #1
 80048cc:	89ba      	ldrh	r2, [r7, #12]
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f007 fcc6 	bl	800c260 <tcp_write>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80048d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d146      	bne.n	800496e <mqtt_output_send+0x13a>
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d043      	beq.n	800496e <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80048e6:	89bb      	ldrh	r3, [r7, #12]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff5a 	bl	80047a4 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80048f6:	461c      	mov	r4, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ff7f 	bl	80047fc <mqtt_ringbuf_len>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	885b      	ldrh	r3, [r3, #2]
 8004906:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800490a:	429a      	cmp	r2, r3
 800490c:	da04      	bge.n	8004918 <mqtt_output_send+0xe4>
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff74 	bl	80047fc <mqtt_ringbuf_len>
 8004914:	4603      	mov	r3, r0
 8004916:	e003      	b.n	8004920 <mqtt_output_send+0xec>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	885b      	ldrh	r3, [r3, #2]
 800491c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004920:	42a3      	cmp	r3, r4
 8004922:	dd03      	ble.n	800492c <mqtt_output_send+0xf8>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800492a:	e014      	b.n	8004956 <mqtt_output_send+0x122>
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff65 	bl	80047fc <mqtt_ringbuf_len>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	885b      	ldrh	r3, [r3, #2]
 800493a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800493e:	429a      	cmp	r2, r3
 8004940:	da04      	bge.n	800494c <mqtt_output_send+0x118>
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ff5a 	bl	80047fc <mqtt_ringbuf_len>
 8004948:	4603      	mov	r3, r0
 800494a:	e004      	b.n	8004956 <mqtt_output_send+0x122>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	885b      	ldrh	r3, [r3, #2]
 8004950:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004954:	b29b      	uxth	r3, r3
 8004956:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff13 	bl	8004784 <mqtt_ringbuf_get_ptr>
 800495e:	4601      	mov	r1, r0
 8004960:	89ba      	ldrh	r2, [r7, #12]
 8004962:	2301      	movs	r3, #1
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	f007 fc7b 	bl	800c260 <tcp_write>
 800496a:	4603      	mov	r3, r0
 800496c:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800496e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8004976:	89bb      	ldrh	r3, [r7, #12]
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff12 	bl	80047a4 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8004980:	6838      	ldr	r0, [r7, #0]
 8004982:	f008 fa57 	bl	800ce34 <tcp_output>
 8004986:	e000      	b.n	800498a <mqtt_output_send+0x156>
    return;
 8004988:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	bd90      	pop	{r4, r7, pc}
 8004990:	080175c8 	.word	0x080175c8
 8004994:	08017668 	.word	0x08017668
 8004998:	08017640 	.word	0x08017640

0800499c <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <mqtt_create_request+0x28>
 80049b6:	4b19      	ldr	r3, [pc, #100]	@ (8004a1c <mqtt_create_request+0x80>)
 80049b8:	f240 1223 	movw	r2, #291	@ 0x123
 80049bc:	4918      	ldr	r1, [pc, #96]	@ (8004a20 <mqtt_create_request+0x84>)
 80049be:	4819      	ldr	r0, [pc, #100]	@ (8004a24 <mqtt_create_request+0x88>)
 80049c0:	f00f fa44 	bl	8013e4c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	74fb      	strb	r3, [r7, #19]
 80049c8:	e01f      	b.n	8004a0a <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80049ca:	7cfb      	ldrb	r3, [r7, #19]
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	440b      	add	r3, r1
 80049dc:	429a      	cmp	r2, r3
 80049de:	d111      	bne.n	8004a04 <mqtt_create_request+0x68>
      r = &r_objs[n];
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	819a      	strh	r2, [r3, #12]
      break;
 8004a02:	e006      	b.n	8004a12 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	3301      	adds	r3, #1
 8004a08:	74fb      	strb	r3, [r7, #19]
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d8db      	bhi.n	80049ca <mqtt_create_request+0x2e>
    }
  }
  return r;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	080175c8 	.word	0x080175c8
 8004a20:	08017688 	.word	0x08017688
 8004a24:	08017640 	.word	0x08017640

08004a28 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <mqtt_append_request+0x26>
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <mqtt_append_request+0x88>)
 8004a42:	f240 123f 	movw	r2, #319	@ 0x13f
 8004a46:	491b      	ldr	r1, [pc, #108]	@ (8004ab4 <mqtt_append_request+0x8c>)
 8004a48:	481b      	ldr	r0, [pc, #108]	@ (8004ab8 <mqtt_append_request+0x90>)
 8004a4a:	f00f f9ff 	bl	8013e4c <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e00a      	b.n	8004a6c <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	89da      	ldrh	r2, [r3, #14]
 8004a5a:	8a7b      	ldrh	r3, [r7, #18]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	827b      	strh	r3, [r7, #18]
    head = iter;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f1      	bne.n	8004a56 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8004a72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a76:	2b1e      	cmp	r3, #30
 8004a78:	dd06      	ble.n	8004a88 <mqtt_append_request+0x60>
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <mqtt_append_request+0x88>)
 8004a7c:	f240 1247 	movw	r2, #327	@ 0x147
 8004a80:	490e      	ldr	r1, [pc, #56]	@ (8004abc <mqtt_append_request+0x94>)
 8004a82:	480d      	ldr	r0, [pc, #52]	@ (8004ab8 <mqtt_append_request+0x90>)
 8004a84:	f00f f9e2 	bl	8013e4c <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8004a88:	8a7b      	ldrh	r3, [r7, #18]
 8004a8a:	f1c3 031e 	rsb	r3, r3, #30
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <mqtt_append_request+0x7a>
    *tail = r;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8004aa0:	e002      	b.n	8004aa8 <mqtt_append_request+0x80>
    head->next = r;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	080175c8 	.word	0x080175c8
 8004ab4:	080176ac 	.word	0x080176ac
 8004ab8:	08017640 	.word	0x08017640
 8004abc:	080176d0 	.word	0x080176d0

08004ac0 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <mqtt_delete_request+0x14>
    r->next = r;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	601a      	str	r2, [r3, #0]
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <mqtt_take_request+0x28>
 8004afa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b78 <mqtt_take_request+0x98>)
 8004afc:	f240 1267 	movw	r2, #359	@ 0x167
 8004b00:	491e      	ldr	r1, [pc, #120]	@ (8004b7c <mqtt_take_request+0x9c>)
 8004b02:	481f      	ldr	r0, [pc, #124]	@ (8004b80 <mqtt_take_request+0xa0>)
 8004b04:	f00f f9a2 	bl	8013e4c <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e009      	b.n	8004b24 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	899b      	ldrh	r3, [r3, #12]
 8004b14:	887a      	ldrh	r2, [r7, #2]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d008      	beq.n	8004b2c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f2      	bne.n	8004b10 <mqtt_take_request+0x30>
 8004b2a:	e000      	b.n	8004b2e <mqtt_take_request+0x4e>
      break;
 8004b2c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01c      	beq.n	8004b6e <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <mqtt_take_request+0x64>
      *tail = iter->next;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e003      	b.n	8004b4c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d009      	beq.n	8004b68 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	89d9      	ldrh	r1, [r3, #14]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	89da      	ldrh	r2, [r3, #14]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	440a      	add	r2, r1
 8004b64:	b292      	uxth	r2, r2
 8004b66:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	080175c8 	.word	0x080175c8
 8004b7c:	08017708 	.word	0x08017708
 8004b80:	08017640 	.word	0x08017640

08004b84 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <mqtt_request_time_elapsed+0x20>
 8004b96:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <mqtt_request_time_elapsed+0x98>)
 8004b98:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 8004b9c:	4920      	ldr	r1, [pc, #128]	@ (8004c20 <mqtt_request_time_elapsed+0x9c>)
 8004b9e:	4821      	ldr	r0, [pc, #132]	@ (8004c24 <mqtt_request_time_elapsed+0xa0>)
 8004ba0:	f00f f954 	bl	8013e4c <iprintf>
  r = *tail;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8004baa:	e02c      	b.n	8004c06 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	89db      	ldrh	r3, [r3, #14]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d31c      	bcc.n	8004bf2 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	89db      	ldrh	r3, [r3, #14]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6892      	ldr	r2, [r2, #8]
 8004bdc:	f06f 0102 	mvn.w	r1, #2
 8004be0:	4610      	mov	r0, r2
 8004be2:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff ff6b 	bl	8004ac0 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e009      	b.n	8004c06 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	89da      	ldrh	r2, [r3, #14]
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	81da      	strh	r2, [r3, #14]
      t = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <mqtt_request_time_elapsed+0x8e>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1cc      	bne.n	8004bac <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	080175c8 	.word	0x080175c8
 8004c20:	08017728 	.word	0x08017728
 8004c24:	08017640 	.word	0x08017640

08004c28 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <mqtt_clear_requests+0x1c>
 8004c36:	4b0e      	ldr	r3, [pc, #56]	@ (8004c70 <mqtt_clear_requests+0x48>)
 8004c38:	f240 12a7 	movw	r2, #423	@ 0x1a7
 8004c3c:	490d      	ldr	r1, [pc, #52]	@ (8004c74 <mqtt_clear_requests+0x4c>)
 8004c3e:	480e      	ldr	r0, [pc, #56]	@ (8004c78 <mqtt_clear_requests+0x50>)
 8004c40:	f00f f904 	bl	8013e4c <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e007      	b.n	8004c5c <mqtt_clear_requests+0x34>
    next = iter->next;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff34 	bl	8004ac0 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f4      	bne.n	8004c4c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	080175c8 	.word	0x080175c8
 8004c74:	08017750 	.word	0x08017750
 8004c78:	08017640 	.word	0x08017640

08004c7c <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <mqtt_init_requests+0x1e>
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <mqtt_init_requests+0x50>)
 8004c8e:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8004c92:	490f      	ldr	r1, [pc, #60]	@ (8004cd0 <mqtt_init_requests+0x54>)
 8004c94:	480f      	ldr	r0, [pc, #60]	@ (8004cd4 <mqtt_init_requests+0x58>)
 8004c96:	f00f f8d9 	bl	8013e4c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
 8004c9e:	e00b      	b.n	8004cb8 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	011a      	lsls	r2, r3, #4
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	440b      	add	r3, r1
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	440a      	add	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d8ef      	bhi.n	8004ca0 <mqtt_init_requests+0x24>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	080175c8 	.word	0x080175c8
 8004cd0:	08017774 	.word	0x08017774
 8004cd4:	08017640 	.word	0x08017640

08004cd8 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fd2b 	bl	8004744 <mqtt_ringbuf_put>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fd19 	bl	8004744 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fd13 	bl	8004744 <mqtt_ringbuf_put>
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b086      	sub	sp, #24
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	4613      	mov	r3, r2
 8004d32:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8004d34:	2300      	movs	r3, #0
 8004d36:	82fb      	strh	r3, [r7, #22]
 8004d38:	e00a      	b.n	8004d50 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4413      	add	r3, r2
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff fcfd 	bl	8004744 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004d4a:	8afb      	ldrh	r3, [r7, #22]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	82fb      	strh	r3, [r7, #22]
 8004d50:	8afa      	ldrh	r2, [r7, #22]
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d3f0      	bcc.n	8004d3a <mqtt_output_append_buf+0x14>
  }
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b086      	sub	sp, #24
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	4619      	mov	r1, r3
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff fce2 	bl	8004744 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fcdc 	bl	8004744 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	82fb      	strh	r3, [r7, #22]
 8004d90:	e00a      	b.n	8004da8 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4413      	add	r3, r2
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff fcd1 	bl	8004744 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004da2:	8afb      	ldrh	r3, [r7, #22]
 8004da4:	3301      	adds	r3, #1
 8004da6:	82fb      	strh	r3, [r7, #22]
 8004da8:	8afa      	ldrh	r2, [r7, #22]
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d3f0      	bcc.n	8004d92 <mqtt_output_append_string+0x30>
  }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4603      	mov	r3, r0
 8004dca:	70fb      	strb	r3, [r7, #3]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70bb      	strb	r3, [r7, #2]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8004dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	b25a      	sxtb	r2, r3
 8004ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	b25b      	sxtb	r3, r3
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b25a      	sxtb	r2, r3
 8004dee:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	b25b      	sxtb	r3, r3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	b25a      	sxtb	r2, r3
 8004e00:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff60 	bl	8004cd8 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8004e18:	8abb      	ldrh	r3, [r7, #20]
 8004e1a:	b25b      	sxtb	r3, r3
 8004e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e20:	b25b      	sxtb	r3, r3
 8004e22:	8aba      	ldrh	r2, [r7, #20]
 8004e24:	2a7f      	cmp	r2, #127	@ 0x7f
 8004e26:	d902      	bls.n	8004e2e <mqtt_output_append_fixed_header+0x74>
 8004e28:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004e2c:	e000      	b.n	8004e30 <mqtt_output_append_fixed_header+0x76>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b25b      	sxtb	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff4d 	bl	8004cd8 <mqtt_output_append_u8>
    r_length >>= 7;
 8004e3e:	8abb      	ldrh	r3, [r7, #20]
 8004e40:	09db      	lsrs	r3, r3, #7
 8004e42:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8004e44:	8abb      	ldrh	r3, [r7, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <mqtt_output_append_fixed_header+0x5e>
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8004e54:	b590      	push	{r4, r7, lr}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8004e60:	887b      	ldrh	r3, [r7, #2]
 8004e62:	3301      	adds	r3, #1
 8004e64:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <mqtt_output_check_space+0x26>
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004eac <mqtt_output_check_space+0x58>)
 8004e6e:	f240 2207 	movw	r2, #519	@ 0x207
 8004e72:	490f      	ldr	r1, [pc, #60]	@ (8004eb0 <mqtt_output_check_space+0x5c>)
 8004e74:	480f      	ldr	r0, [pc, #60]	@ (8004eb4 <mqtt_output_check_space+0x60>)
 8004e76:	f00e ffe9 	bl	8013e4c <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f6      	bne.n	8004e7a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8004e8c:	89fc      	ldrh	r4, [r7, #14]
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fcb4 	bl	80047fc <mqtt_ringbuf_len>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	bfd4      	ite	le
 8004e9e:	2301      	movle	r3, #1
 8004ea0:	2300      	movgt	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd90      	pop	{r4, r7, pc}
 8004eac:	080175c8 	.word	0x080175c8
 8004eb0:	08017798 	.word	0x08017798
 8004eb4:	08017640 	.word	0x08017640

08004eb8 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <mqtt_close+0x20>
 8004eca:	4b27      	ldr	r3, [pc, #156]	@ (8004f68 <mqtt_close+0xb0>)
 8004ecc:	f240 221b 	movw	r2, #539	@ 0x21b
 8004ed0:	4926      	ldr	r1, [pc, #152]	@ (8004f6c <mqtt_close+0xb4>)
 8004ed2:	4827      	ldr	r0, [pc, #156]	@ (8004f70 <mqtt_close+0xb8>)
 8004ed4:	f00e ffba 	bl	8013e4c <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d024      	beq.n	8004f2a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f004 faa8 	bl	800943c <tcp_recv>
    altcp_err(client->conn,  NULL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f004 fae6 	bl	80094c4 <tcp_err>
    altcp_sent(client->conn, NULL);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 fabe 	bl	8009480 <tcp_sent>
    res = altcp_close(client->conn);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f003 f8bd 	bl	8008088 <tcp_close>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f003 f99c 	bl	800825c <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fe7a 	bl	8004c28 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	480f      	ldr	r0, [pc, #60]	@ (8004f74 <mqtt_close+0xbc>)
 8004f38:	f008 fff8 	bl	800df2c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7a9b      	ldrb	r3, [r3, #10]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6911      	ldr	r1, [r2, #16]
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
    }
  }
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	080175c8 	.word	0x080175c8
 8004f6c:	080177bc 	.word	0x080177bc
 8004f70:	08017640 	.word	0x08017640
 8004f74:	08004f79 	.word	0x08004f79

08004f78 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <mqtt_cyclic_timer+0x24>
 8004f8e:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <mqtt_cyclic_timer+0x120>)
 8004f90:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8004f94:	4941      	ldr	r1, [pc, #260]	@ (800509c <mqtt_cyclic_timer+0x124>)
 8004f96:	4842      	ldr	r0, [pc, #264]	@ (80050a0 <mqtt_cyclic_timer+0x128>)
 8004f98:	f00e ff58 	bl	8013e4c <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	7a9b      	ldrb	r3, [r3, #10]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d115      	bne.n	8004fd0 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	2b63      	cmp	r3, #99	@ 0x63
 8004fbe:	dd5e      	ble.n	800507e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004fc0:	f240 1101 	movw	r1, #257	@ 0x101
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7ff ff77 	bl	8004eb8 <mqtt_close>
      restart_timer = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e056      	b.n	800507e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	7a9b      	ldrb	r3, [r3, #10]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d150      	bne.n	800507a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	2105      	movs	r1, #5
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fdd0 	bl	8004b84 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	885b      	ldrh	r3, [r3, #2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d048      	beq.n	800507e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	889b      	ldrh	r3, [r3, #4]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	889b      	ldrh	r3, [r3, #4]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	441a      	add	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	885b      	ldrh	r3, [r3, #2]
 8005008:	4619      	mov	r1, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	885b      	ldrh	r3, [r3, #2]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	440b      	add	r3, r1
 8005014:	429a      	cmp	r2, r3
 8005016:	dd06      	ble.n	8005026 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8005018:	f240 1101 	movw	r1, #257	@ 0x101
 800501c:	68b8      	ldr	r0, [r7, #8]
 800501e:	f7ff ff4b 	bl	8004eb8 <mqtt_close>
        restart_timer = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	8852      	ldrh	r2, [r2, #2]
 8005036:	4293      	cmp	r3, r2
 8005038:	db18      	blt.n	800506c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	33ec      	adds	r3, #236	@ 0xec
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff07 	bl	8004e54 <mqtt_output_check_space>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d018      	beq.n	800507e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005052:	2300      	movs	r3, #0
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	2300      	movs	r3, #0
 800505c:	2200      	movs	r2, #0
 800505e:	210c      	movs	r1, #12
 8005060:	f7ff feab 	bl	8004dba <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e008      	b.n	800507e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e001      	b.n	800507e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	4907      	ldr	r1, [pc, #28]	@ (80050a4 <mqtt_cyclic_timer+0x12c>)
 8005088:	f241 3088 	movw	r0, #5000	@ 0x1388
 800508c:	f008 ff28 	bl	800dee0 <sys_timeout>
  }
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	080175c8 	.word	0x080175c8
 800509c:	080177d8 	.word	0x080177d8
 80050a0:	08017640 	.word	0x08017640
 80050a4:	08004f79 	.word	0x08004f79

080050a8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	70fb      	strb	r3, [r7, #3]
 80050ba:	460b      	mov	r3, r1
 80050bc:	803b      	strh	r3, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	33ec      	adds	r3, #236	@ 0xec
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fec1 	bl	8004e54 <mqtt_output_check_space>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01c      	beq.n	8005112 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80050de:	78bb      	ldrb	r3, [r7, #2]
 80050e0:	78f9      	ldrb	r1, [r7, #3]
 80050e2:	2202      	movs	r2, #2
 80050e4:	9201      	str	r2, [sp, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	9200      	str	r2, [sp, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f7ff fe65 	bl	8004dba <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	33ec      	adds	r3, #236	@ 0xec
 80050f4:	883a      	ldrh	r2, [r7, #0]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fdfc 	bl	8004cf6 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7ff fb92 	bl	8004834 <mqtt_output_send>
 8005110:	e001      	b.n	8005116 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8005112:	23ff      	movs	r3, #255	@ 0xff
 8005114:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 8005116:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	460b      	mov	r3, r1
 800512c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6890      	ldr	r0, [r2, #8]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	2a02      	cmp	r2, #2
 8005142:	d801      	bhi.n	8005148 <mqtt_incomming_suback+0x26>
 8005144:	2200      	movs	r2, #0
 8005146:	e001      	b.n	800514c <mqtt_incomming_suback+0x2a>
 8005148:	f06f 020c 	mvn.w	r2, #12
 800514c:	4611      	mov	r1, r2
 800514e:	4798      	blx	r3
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b08f      	sub	sp, #60	@ 0x3c
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	72fb      	strb	r3, [r7, #11]
 8005166:	4613      	mov	r3, r2
 8005168:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800516a:	2300      	movs	r3, #0
 800516c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	4413      	add	r3, r2
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800517a:	7afb      	ldrb	r3, [r7, #11]
 800517c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u16_t pkt_id = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005196:	2b7f      	cmp	r3, #127	@ 0x7f
 8005198:	d906      	bls.n	80051a8 <mqtt_message_received+0x50>
 800519a:	4b9a      	ldr	r3, [pc, #616]	@ (8005404 <mqtt_message_received+0x2ac>)
 800519c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80051a0:	4999      	ldr	r1, [pc, #612]	@ (8005408 <mqtt_message_received+0x2b0>)
 80051a2:	489a      	ldr	r0, [pc, #616]	@ (800540c <mqtt_message_received+0x2b4>)
 80051a4:	f00e fe52 	bl	8013e4c <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80051a8:	7afa      	ldrb	r2, [r7, #11]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d906      	bls.n	80051c0 <mqtt_message_received+0x68>
 80051b2:	4b94      	ldr	r3, [pc, #592]	@ (8005404 <mqtt_message_received+0x2ac>)
 80051b4:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 80051b8:	4995      	ldr	r1, [pc, #596]	@ (8005410 <mqtt_message_received+0x2b8>)
 80051ba:	4894      	ldr	r0, [pc, #592]	@ (800540c <mqtt_message_received+0x2b4>)
 80051bc:	f00e fe46 	bl	8013e4c <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80051c0:	7afa      	ldrb	r2, [r7, #11]
 80051c2:	893b      	ldrh	r3, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	dd09      	ble.n	80051de <mqtt_message_received+0x86>
 80051ca:	4b8e      	ldr	r3, [pc, #568]	@ (8005404 <mqtt_message_received+0x2ac>)
 80051cc:	f240 22ad 	movw	r2, #685	@ 0x2ad
 80051d0:	4990      	ldr	r1, [pc, #576]	@ (8005414 <mqtt_message_received+0x2bc>)
 80051d2:	488e      	ldr	r0, [pc, #568]	@ (800540c <mqtt_message_received+0x2b4>)
 80051d4:	f00e fe3a 	bl	8013e4c <iprintf>
 80051d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051dc:	e16a      	b.n	80054b4 <mqtt_message_received+0x35c>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 80051de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d123      	bne.n	800522e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	7a9b      	ldrb	r3, [r3, #10]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	f040 814d 	bne.w	800548a <mqtt_message_received+0x332>
      if (length < 2) {
 80051f0:	893b      	ldrh	r3, [r7, #8]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f240 814b 	bls.w	800548e <mqtt_message_received+0x336>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80051f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fa:	3301      	adds	r3, #1
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8005200:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005202:	2b00      	cmp	r3, #0
 8005204:	f040 8141 	bne.w	800548a <mqtt_message_received+0x332>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2203      	movs	r2, #3
 8005212:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8136 	beq.w	800548a <mqtt_message_received+0x332>
          client->connect_cb(client, client->connect_arg, res);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	6911      	ldr	r1, [r2, #16]
 8005226:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	4798      	blx	r3
 800522c:	e12d      	b.n	800548a <mqtt_message_received+0x332>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800522e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005232:	2b0d      	cmp	r3, #13
 8005234:	f000 8129 	beq.w	800548a <mqtt_message_received+0x332>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8005238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800523c:	2b03      	cmp	r3, #3
 800523e:	f040 80bd 	bne.w	80053bc <mqtt_message_received+0x264>
    u16_t payload_offset = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	86bb      	strh	r3, [r7, #52]	@ 0x34
    u16_t payload_length = length;
 8005246:	893b      	ldrh	r3, [r7, #8]
 8005248:	867b      	strh	r3, [r7, #50]	@ 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8005250:	105b      	asrs	r3, r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	d87a      	bhi.n	8005358 <mqtt_message_received+0x200>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <mqtt_message_received+0x114>
 8005268:	2302      	movs	r3, #2
 800526a:	e000      	b.n	800526e <mqtt_message_received+0x116>
 800526c:	2300      	movs	r3, #0
 800526e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8005270:	8bbb      	ldrh	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	893b      	ldrh	r3, [r7, #8]
 8005276:	429a      	cmp	r2, r3
 8005278:	f280 810b 	bge.w	8005492 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8005282:	8b7b      	ldrh	r3, [r7, #26]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	b29b      	uxth	r3, r3
 8005288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528a:	3201      	adds	r2, #1
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	4413      	add	r3, r2
 8005290:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8005292:	8b7a      	ldrh	r2, [r7, #26]
 8005294:	8939      	ldrh	r1, [r7, #8]
 8005296:	8bbb      	ldrh	r3, [r7, #28]
 8005298:	3302      	adds	r3, #2
 800529a:	1acb      	subs	r3, r1, r3
 800529c:	429a      	cmp	r2, r3
 800529e:	f300 80fa 	bgt.w	8005496 <mqtt_message_received+0x33e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80052a2:	8b7a      	ldrh	r2, [r7, #26]
 80052a4:	8bbb      	ldrh	r3, [r7, #28]
 80052a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a8:	1acb      	subs	r3, r1, r3
 80052aa:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	f200 80f2 	bhi.w	8005496 <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	3302      	adds	r3, #2
 80052b6:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80052b8:	8b7b      	ldrh	r3, [r7, #26]
 80052ba:	3302      	adds	r3, #2
 80052bc:	863b      	strh	r3, [r7, #48]	@ 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80052be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052c0:	7ffa      	ldrb	r2, [r7, #31]
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d001      	beq.n	80052ca <mqtt_message_received+0x172>
 80052c6:	2202      	movs	r2, #2
 80052c8:	e000      	b.n	80052cc <mqtt_message_received+0x174>
 80052ca:	2201      	movs	r2, #1
 80052cc:	4413      	add	r3, r2
 80052ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f0c0 80e2 	bcc.w	800549a <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 80052d6:	7ffb      	ldrb	r3, [r7, #31]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d018      	beq.n	800530e <mqtt_message_received+0x1b6>
        if (length < after_topic + 2U) {
 80052dc:	893a      	ldrh	r2, [r7, #8]
 80052de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052e0:	3302      	adds	r3, #2
 80052e2:	429a      	cmp	r2, r3
 80052e4:	f0c0 80db 	bcc.w	800549e <mqtt_message_received+0x346>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80052e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ec:	4413      	add	r3, r2
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80052f6:	3201      	adds	r2, #1
 80052f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052fa:	440a      	add	r2, r1
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8005306:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005308:	3302      	adds	r3, #2
 800530a:	863b      	strh	r3, [r7, #48]	@ 0x30
 800530c:	e002      	b.n	8005314 <mqtt_message_received+0x1bc>
      } else {
        client->inpub_pkt_id = 0;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 8005314:	8b7b      	ldrh	r3, [r7, #26]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800531e:	8b7b      	ldrh	r3, [r7, #26]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8005328:	893a      	ldrh	r2, [r7, #8]
 800532a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	867b      	strh	r3, [r7, #50]	@ 0x32
      payload_offset = after_topic;
 8005330:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005332:	86bb      	strh	r3, [r7, #52]	@ 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <mqtt_message_received+0x1f6>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8005344:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	440a      	add	r2, r1
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800534e:	8b7b      	ldrh	r3, [r7, #26]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	7cfa      	ldrb	r2, [r7, #19]
 8005356:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8005358:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <mqtt_message_received+0x20e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f040 8092 	bne.w	800548a <mqtt_message_received+0x332>
      if (length < (size_t)(payload_offset + payload_length)) {
 8005366:	893b      	ldrh	r3, [r7, #8]
 8005368:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 800536a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800536c:	440a      	add	r2, r1
 800536e:	4293      	cmp	r3, r2
 8005370:	f0c0 8097 	bcc.w	80054a2 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800537c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800537e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005380:	18d1      	adds	r1, r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005390:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d178      	bne.n	800548a <mqtt_message_received+0x332>
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d075      	beq.n	800548a <mqtt_message_received+0x332>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800539e:	7ffb      	ldrb	r3, [r7, #31]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <mqtt_message_received+0x250>
 80053a4:	2304      	movs	r3, #4
 80053a6:	e000      	b.n	80053aa <mqtt_message_received+0x252>
 80053a8:	2305      	movs	r3, #5
 80053aa:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	891a      	ldrh	r2, [r3, #8]
 80053b0:	7cb9      	ldrb	r1, [r7, #18]
 80053b2:	2300      	movs	r3, #0
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fe77 	bl	80050a8 <pub_ack_rec_rel_response>
 80053ba:	e066      	b.n	800548a <mqtt_message_received+0x332>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 80053c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c6:	3301      	adds	r3, #1
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ce:	4313      	orrs	r3, r2
 80053d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (pkt_id == 0) {
 80053d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d066      	beq.n	80054a6 <mqtt_message_received+0x34e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80053d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053dc:	2b05      	cmp	r3, #5
 80053de:	d106      	bne.n	80053ee <mqtt_message_received+0x296>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80053e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053e2:	2301      	movs	r3, #1
 80053e4:	2106      	movs	r1, #6
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fe5e 	bl	80050a8 <pub_ack_rec_rel_response>
 80053ec:	e04d      	b.n	800548a <mqtt_message_received+0x332>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80053ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d110      	bne.n	8005418 <mqtt_message_received+0x2c0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80053f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053f8:	2300      	movs	r3, #0
 80053fa:	2107      	movs	r1, #7
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fe53 	bl	80050a8 <pub_ack_rec_rel_response>
 8005402:	e042      	b.n	800548a <mqtt_message_received+0x332>
 8005404:	080175c8 	.word	0x080175c8
 8005408:	080177fc 	.word	0x080177fc
 800540c:	08017640 	.word	0x08017640
 8005410:	0801782c 	.word	0x0801782c
 8005414:	08017850 	.word	0x08017850

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8005418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800541c:	2b09      	cmp	r3, #9
 800541e:	d00b      	beq.n	8005438 <mqtt_message_received+0x2e0>
 8005420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005424:	2b0b      	cmp	r3, #11
 8005426:	d007      	beq.n	8005438 <mqtt_message_received+0x2e0>
 8005428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800542c:	2b07      	cmp	r3, #7
 800542e:	d003      	beq.n	8005438 <mqtt_message_received+0x2e0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8005430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005434:	2b04      	cmp	r3, #4
 8005436:	d138      	bne.n	80054aa <mqtt_message_received+0x352>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3318      	adds	r3, #24
 800543c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fb4d 	bl	8004ae0 <mqtt_take_request>
 8005446:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <mqtt_message_received+0x330>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800544e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005452:	2b09      	cmp	r3, #9
 8005454:	d10a      	bne.n	800546c <mqtt_message_received+0x314>
          if (length < 3) {
 8005456:	893b      	ldrh	r3, [r7, #8]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d928      	bls.n	80054ae <mqtt_message_received+0x356>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	3302      	adds	r3, #2
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	6a38      	ldr	r0, [r7, #32]
 8005466:	f7ff fe5c 	bl	8005122 <mqtt_incomming_suback>
 800546a:	e00a      	b.n	8005482 <mqtt_message_received+0x32a>
          }
        } else if (r->cb != NULL) {
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d006      	beq.n	8005482 <mqtt_message_received+0x32a>
          r->cb(r->arg, ERR_OK);
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	6892      	ldr	r2, [r2, #8]
 800547c:	2100      	movs	r1, #0
 800547e:	4610      	mov	r0, r2
 8005480:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8005482:	6a38      	ldr	r0, [r7, #32]
 8005484:	f7ff fb1c 	bl	8004ac0 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8005488:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800548a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800548c:	e012      	b.n	80054b4 <mqtt_message_received+0x35c>
        goto out_disconnect;
 800548e:	bf00      	nop
 8005490:	e00e      	b.n	80054b0 <mqtt_message_received+0x358>
        goto out_disconnect;
 8005492:	bf00      	nop
 8005494:	e00c      	b.n	80054b0 <mqtt_message_received+0x358>
        goto out_disconnect;
 8005496:	bf00      	nop
 8005498:	e00a      	b.n	80054b0 <mqtt_message_received+0x358>
        goto out_disconnect;
 800549a:	bf00      	nop
 800549c:	e008      	b.n	80054b0 <mqtt_message_received+0x358>
          goto out_disconnect;
 800549e:	bf00      	nop
 80054a0:	e006      	b.n	80054b0 <mqtt_message_received+0x358>
        goto out_disconnect;
 80054a2:	bf00      	nop
 80054a4:	e004      	b.n	80054b0 <mqtt_message_received+0x358>
      goto out_disconnect;
 80054a6:	bf00      	nop
 80054a8:	e002      	b.n	80054b0 <mqtt_message_received+0x358>
      goto out_disconnect;
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <mqtt_message_received+0x358>
            goto out_disconnect;
 80054ae:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80054b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	373c      	adds	r7, #60	@ 0x3c
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd90      	pop	{r4, r7, pc}

080054bc <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80054d6:	e0be      	b.n	8005656 <mqtt_parse_incoming+0x19a>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d903      	bls.n	80054e6 <mqtt_parse_incoming+0x2a>
 80054de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da4d      	bge.n	8005582 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80054e6:	7dfa      	ldrb	r2, [r7, #23]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d206      	bcs.n	80054fe <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80054fa:	75bb      	strb	r3, [r7, #22]
 80054fc:	e012      	b.n	8005524 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80054fe:	8bfb      	ldrh	r3, [r7, #30]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	83fa      	strh	r2, [r7, #30]
 8005504:	4619      	mov	r1, r3
 8005506:	6838      	ldr	r0, [r7, #0]
 8005508:	f002 fb74 	bl	8007bf4 <pbuf_get_at>
 800550c:	4603      	mov	r3, r0
 800550e:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005514:	1c59      	adds	r1, r3, #1
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6691      	str	r1, [r2, #104]	@ 0x68
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	7dba      	ldrb	r2, [r7, #22]
 8005520:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      }
      fixed_hdr_idx++;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	3301      	adds	r3, #1
 8005528:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f240 8091 	bls.w	8005654 <mqtt_parse_incoming+0x198>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8005532:	7dbb      	ldrb	r3, [r7, #22]
 8005534:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	1e9a      	subs	r2, r3, #2
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800554c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005550:	2b00      	cmp	r3, #0
 8005552:	db7f      	blt.n	8005654 <mqtt_parse_incoming+0x198>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800555a:	7df9      	ldrb	r1, [r7, #23]
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fdf9 	bl	8005158 <mqtt_message_received>
            client->msg_idx = 0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	669a      	str	r2, [r3, #104]	@ 0x68
            fixed_hdr_idx = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
      if (fixed_hdr_idx >= 2) {
 8005570:	e070      	b.n	8005654 <mqtt_parse_incoming+0x198>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8005572:	7dfa      	ldrb	r2, [r7, #23]
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	441a      	add	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8005580:	e068      	b.n	8005654 <mqtt_parse_incoming+0x198>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	7dfa      	ldrb	r2, [r7, #23]
 800558c:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 8005590:	fbb3 f1f2 	udiv	r1, r3, r2
 8005594:	fb01 f202 	mul.w	r2, r1, r2
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	b29a      	uxth	r2, r3
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	891a      	ldrh	r2, [r3, #8]
 80055a8:	8bfb      	ldrh	r3, [r7, #30]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d905      	bls.n	80055c2 <mqtt_parse_incoming+0x106>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	891a      	ldrh	r2, [r3, #8]
 80055ba:	8bfb      	ldrh	r3, [r7, #30]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	b29b      	uxth	r3, r3
 80055c0:	e001      	b.n	80055c6 <mqtt_parse_incoming+0x10a>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80055c8:	8a7b      	ldrh	r3, [r7, #18]
 80055ca:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80055ce:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 80055d0:	8aba      	ldrh	r2, [r7, #20]
 80055d2:	8a3b      	ldrh	r3, [r7, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d901      	bls.n	80055dc <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 80055d8:	8a3b      	ldrh	r3, [r7, #16]
 80055da:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 80055e2:	8a7b      	ldrh	r3, [r7, #18]
 80055e4:	18d1      	adds	r1, r2, r3
 80055e6:	8bfb      	ldrh	r3, [r7, #30]
 80055e8:	8aba      	ldrh	r2, [r7, #20]
 80055ea:	6838      	ldr	r0, [r7, #0]
 80055ec:	f002 fa34 	bl	8007a58 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80055f4:	8abb      	ldrh	r3, [r7, #20]
 80055f6:	441a      	add	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	669a      	str	r2, [r3, #104]	@ 0x68
      in_offset += cpy_len;
 80055fc:	8bfa      	ldrh	r2, [r7, #30]
 80055fe:	8abb      	ldrh	r3, [r7, #20]
 8005600:	4413      	add	r3, r2
 8005602:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8005604:	8abb      	ldrh	r3, [r7, #20]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <mqtt_parse_incoming+0x15e>
 8005612:	8aba      	ldrh	r2, [r7, #20]
 8005614:	8a3b      	ldrh	r3, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d11d      	bne.n	8005656 <mqtt_parse_incoming+0x19a>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800561a:	8a7a      	ldrh	r2, [r7, #18]
 800561c:	8abb      	ldrh	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	b29b      	uxth	r3, r3
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	b29a      	uxth	r2, r3
 800562a:	7df9      	ldrb	r1, [r7, #23]
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fd92 	bl	8005158 <mqtt_message_received>
 8005634:	4603      	mov	r3, r0
 8005636:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8005638:	89fb      	ldrh	r3, [r7, #14]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <mqtt_parse_incoming+0x186>
          return res;
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	e010      	b.n	8005664 <mqtt_parse_incoming+0x1a8>
        }
        if (msg_rem_len == 0) {
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <mqtt_parse_incoming+0x19a>
          /* Reset parser state */
          client->msg_idx = 0;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	669a      	str	r2, [r3, #104]	@ 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	75fb      	strb	r3, [r7, #23]
 8005652:	e000      	b.n	8005656 <mqtt_parse_incoming+0x19a>
      if (fixed_hdr_idx >= 2) {
 8005654:	bf00      	nop
  while (p->tot_len > in_offset) {
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	891b      	ldrh	r3, [r3, #8]
 800565a:	8bfa      	ldrh	r2, [r7, #30]
 800565c:	429a      	cmp	r2, r3
 800565e:	f4ff af3b 	bcc.w	80054d8 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <mqtt_tcp_recv_cb+0x26>
 8005684:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <mqtt_tcp_recv_cb+0xac>)
 8005686:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800568a:	4924      	ldr	r1, [pc, #144]	@ (800571c <mqtt_tcp_recv_cb+0xb0>)
 800568c:	4824      	ldr	r0, [pc, #144]	@ (8005720 <mqtt_tcp_recv_cb+0xb4>)
 800568e:	f00e fbdd 	bl	8013e4c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d006      	beq.n	80056aa <mqtt_tcp_recv_cb+0x3e>
 800569c:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <mqtt_tcp_recv_cb+0xac>)
 800569e:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80056a2:	4920      	ldr	r1, [pc, #128]	@ (8005724 <mqtt_tcp_recv_cb+0xb8>)
 80056a4:	481e      	ldr	r0, [pc, #120]	@ (8005720 <mqtt_tcp_recv_cb+0xb4>)
 80056a6:	f00e fbd1 	bl	8013e4c <iprintf>

  if (p == NULL) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80056b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056b4:	6978      	ldr	r0, [r7, #20]
 80056b6:	f7ff fbff 	bl	8004eb8 <mqtt_close>
 80056ba:	e027      	b.n	800570c <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80056bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 ffcd 	bl	8007664 <pbuf_free>
      return err;
 80056ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ce:	e01e      	b.n	800570e <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	891b      	ldrh	r3, [r3, #8]
 80056d4:	4619      	mov	r1, r3
 80056d6:	68b8      	ldr	r0, [r7, #8]
 80056d8:	f002 febe 	bl	8008458 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	f7ff feec 	bl	80054bc <mqtt_parse_incoming>
 80056e4:	4603      	mov	r3, r0
 80056e6:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 ffbb 	bl	8007664 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80056ee:	8a7b      	ldrh	r3, [r7, #18]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6978      	ldr	r0, [r7, #20]
 80056fa:	f7ff fbdd 	bl	8004eb8 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	885b      	ldrh	r3, [r3, #2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	080175c8 	.word	0x080175c8
 800571c:	08017868 	.word	0x08017868
 8005720:	08017640 	.word	0x08017640
 8005724:	0801788c 	.word	0x0801788c

08005728 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	7a9b      	ldrb	r3, [r3, #10]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d127      	bne.n	8005792 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2200      	movs	r2, #0
 8005746:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2200      	movs	r2, #0
 800574c:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800574e:	e00d      	b.n	800576c <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	2100      	movs	r1, #0
 8005762:	4610      	mov	r0, r2
 8005764:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f7ff f9aa 	bl	8004ac0 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3318      	adds	r3, #24
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f9b4 	bl	8004ae0 <mqtt_take_request>
 8005778:	6138      	str	r0, [r7, #16]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e7      	bne.n	8005750 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7ff f851 	bl	8004834 <mqtt_output_send>
  }
  return ERR_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <mqtt_tcp_err_cb+0x24>
 80057b2:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <mqtt_tcp_err_cb+0x3c>)
 80057b4:	f240 32f6 	movw	r2, #1014	@ 0x3f6
 80057b8:	4908      	ldr	r1, [pc, #32]	@ (80057dc <mqtt_tcp_err_cb+0x40>)
 80057ba:	4809      	ldr	r0, [pc, #36]	@ (80057e0 <mqtt_tcp_err_cb+0x44>)
 80057bc:	f00e fb46 	bl	8013e4c <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80057c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff fb74 	bl	8004eb8 <mqtt_close>
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	080175c8 	.word	0x080175c8
 80057dc:	080178b4 	.word	0x080178b4
 80057e0:	08017640 	.word	0x08017640

080057e4 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	7a9b      	ldrb	r3, [r3, #10]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d105      	bne.n	8005806 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	33ec      	adds	r3, #236	@ 0xec
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff f817 	bl	8004834 <mqtt_output_send>
  }
  return ERR_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8005822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	e025      	b.n	800587c <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8005836:	4913      	ldr	r1, [pc, #76]	@ (8005884 <mqtt_tcp_connect_cb+0x74>)
 8005838:	68b8      	ldr	r0, [r7, #8]
 800583a:	f003 fdff 	bl	800943c <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800583e:	4912      	ldr	r1, [pc, #72]	@ (8005888 <mqtt_tcp_connect_cb+0x78>)
 8005840:	68b8      	ldr	r0, [r7, #8]
 8005842:	f003 fe1d 	bl	8009480 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8005846:	2202      	movs	r2, #2
 8005848:	4910      	ldr	r1, [pc, #64]	@ (800588c <mqtt_tcp_connect_cb+0x7c>)
 800584a:	68b8      	ldr	r0, [r7, #8]
 800584c:	f003 fe5c 	bl	8009508 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2202      	movs	r2, #2
 8005854:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	490d      	ldr	r1, [pc, #52]	@ (8005890 <mqtt_tcp_connect_cb+0x80>)
 800585a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800585e:	f008 fb3f 	bl	800dee0 <sys_timeout>
  client->cyclic_tick = 0;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f7fe ffdd 	bl	8004834 <mqtt_output_send>

  return ERR_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	0800566d 	.word	0x0800566d
 8005888:	08005729 	.word	0x08005729
 800588c:	080057e5 	.word	0x080057e5
 8005890:	08004f79 	.word	0x08004f79

08005894 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	@ 0x30
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <mqtt_publish+0x22>
 80058a8:	4b5d      	ldr	r3, [pc, #372]	@ (8005a20 <mqtt_publish+0x18c>)
 80058aa:	f240 4254 	movw	r2, #1108	@ 0x454
 80058ae:	495d      	ldr	r1, [pc, #372]	@ (8005a24 <mqtt_publish+0x190>)
 80058b0:	485d      	ldr	r0, [pc, #372]	@ (8005a28 <mqtt_publish+0x194>)
 80058b2:	f00e facb 	bl	8013e4c <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <mqtt_publish+0x36>
 80058bc:	4b58      	ldr	r3, [pc, #352]	@ (8005a20 <mqtt_publish+0x18c>)
 80058be:	f240 4255 	movw	r2, #1109	@ 0x455
 80058c2:	495a      	ldr	r1, [pc, #360]	@ (8005a2c <mqtt_publish+0x198>)
 80058c4:	4858      	ldr	r0, [pc, #352]	@ (8005a28 <mqtt_publish+0x194>)
 80058c6:	f00e fac1 	bl	8013e4c <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	7a9b      	ldrb	r3, [r3, #10]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <mqtt_publish+0x52>
 80058d2:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <mqtt_publish+0x18c>)
 80058d4:	f240 4256 	movw	r2, #1110	@ 0x456
 80058d8:	4955      	ldr	r1, [pc, #340]	@ (8005a30 <mqtt_publish+0x19c>)
 80058da:	4853      	ldr	r0, [pc, #332]	@ (8005a28 <mqtt_publish+0x194>)
 80058dc:	f00e fab6 	bl	8013e4c <iprintf>
 80058e0:	f06f 030a 	mvn.w	r3, #10
 80058e4:	e097      	b.n	8005a16 <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7fa fcfa 	bl	80002e0 <strlen>
 80058ec:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d909      	bls.n	800590c <mqtt_publish+0x78>
 80058f8:	4b49      	ldr	r3, [pc, #292]	@ (8005a20 <mqtt_publish+0x18c>)
 80058fa:	f240 4259 	movw	r2, #1113	@ 0x459
 80058fe:	494d      	ldr	r1, [pc, #308]	@ (8005a34 <mqtt_publish+0x1a0>)
 8005900:	4849      	ldr	r0, [pc, #292]	@ (8005a28 <mqtt_publish+0x194>)
 8005902:	f00e faa3 	bl	8013e4c <iprintf>
 8005906:	f06f 030f 	mvn.w	r3, #15
 800590a:	e084      	b.n	8005a16 <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8005910:	8b7b      	ldrh	r3, [r7, #26]
 8005912:	1c9a      	adds	r2, r3, #2
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	4413      	add	r3, r2
 8005918:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800591a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <mqtt_publish+0xa0>
    total_len += 2;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	3302      	adds	r3, #2
 8005926:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7fe feef 	bl	800470c <msg_generate_packet_id>
 800592e:	4603      	mov	r3, r0
 8005930:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005932:	e001      	b.n	8005938 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593e:	d309      	bcc.n	8005954 <mqtt_publish+0xc0>
 8005940:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <mqtt_publish+0x18c>)
 8005942:	f240 4265 	movw	r2, #1125	@ 0x465
 8005946:	493c      	ldr	r1, [pc, #240]	@ (8005a38 <mqtt_publish+0x1a4>)
 8005948:	4837      	ldr	r0, [pc, #220]	@ (8005a28 <mqtt_publish+0x194>)
 800594a:	f00e fa7f 	bl	8013e4c <iprintf>
 800594e:	f06f 030f 	mvn.w	r3, #15
 8005952:	e060      	b.n	8005a16 <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f103 001c 	add.w	r0, r3, #28
 800595e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	2104      	movs	r1, #4
 8005968:	f7ff f818 	bl	800499c <mqtt_create_request>
 800596c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <mqtt_publish+0xe6>
    return ERR_MEM;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	e04d      	b.n	8005a16 <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	33ec      	adds	r3, #236	@ 0xec
 800597e:	8b3a      	ldrh	r2, [r7, #24]
 8005980:	4611      	mov	r1, r2
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fa66 	bl	8004e54 <mqtt_output_check_space>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d105      	bne.n	800599a <mqtt_publish+0x106>
    mqtt_delete_request(r);
 800598e:	6978      	ldr	r0, [r7, #20]
 8005990:	f7ff f896 	bl	8004ac0 <mqtt_delete_request>
    return ERR_MEM;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	e03d      	b.n	8005a16 <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80059a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80059a4:	8b3b      	ldrh	r3, [r7, #24]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	2200      	movs	r2, #0
 80059b2:	2103      	movs	r1, #3
 80059b4:	f7ff fa01 	bl	8004dba <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	33ec      	adds	r3, #236	@ 0xec
 80059bc:	8b7a      	ldrh	r2, [r7, #26]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f9ce 	bl	8004d62 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80059c6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	33ec      	adds	r3, #236	@ 0xec
 80059d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff f98d 	bl	8004cf6 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <mqtt_publish+0x162>
 80059e2:	887b      	ldrh	r3, [r7, #2]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d006      	beq.n	80059f6 <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	33ec      	adds	r3, #236	@ 0xec
 80059ec:	887a      	ldrh	r2, [r7, #2]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff f998 	bl	8004d26 <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3318      	adds	r3, #24
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff f813 	bl	8004a28 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f7fe ff10 	bl	8004834 <mqtt_output_send>
  return ERR_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3728      	adds	r7, #40	@ 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	080175c8 	.word	0x080175c8
 8005a24:	080178d4 	.word	0x080178d4
 8005a28:	08017640 	.word	0x08017640
 8005a2c:	080178f4 	.word	0x080178f4
 8005a30:	08017910 	.word	0x08017910
 8005a34:	08017930 	.word	0x08017930
 8005a38:	08017954 	.word	0x08017954

08005a3c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8005a40:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8005a44:	2001      	movs	r0, #1
 8005a46:	f000 fe5d 	bl	8006704 <mem_calloc>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	@ 0x30
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8005a60:	230a      	movs	r3, #10
 8005a62:	84bb      	strh	r3, [r7, #36]	@ 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	83fb      	strh	r3, [r7, #30]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <mqtt_client_connect+0x42>
 8005a84:	4b9e      	ldr	r3, [pc, #632]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005a86:	f240 520f 	movw	r2, #1295	@ 0x50f
 8005a8a:	499e      	ldr	r1, [pc, #632]	@ (8005d04 <mqtt_client_connect+0x2b4>)
 8005a8c:	489e      	ldr	r0, [pc, #632]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005a8e:	f00e f9dd 	bl	8013e4c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <mqtt_client_connect+0x56>
 8005a98:	4b99      	ldr	r3, [pc, #612]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005a9a:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8005a9e:	499b      	ldr	r1, [pc, #620]	@ (8005d0c <mqtt_client_connect+0x2bc>)
 8005aa0:	4899      	ldr	r0, [pc, #612]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005aa2:	f00e f9d3 	bl	8013e4c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <mqtt_client_connect+0x6a>
 8005aac:	4b94      	ldr	r3, [pc, #592]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005aae:	f240 5211 	movw	r2, #1297	@ 0x511
 8005ab2:	4997      	ldr	r1, [pc, #604]	@ (8005d10 <mqtt_client_connect+0x2c0>)
 8005ab4:	4894      	ldr	r0, [pc, #592]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005ab6:	f00e f9c9 	bl	8013e4c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <mqtt_client_connect+0x80>
 8005ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005ac4:	f240 5212 	movw	r2, #1298	@ 0x512
 8005ac8:	4992      	ldr	r1, [pc, #584]	@ (8005d14 <mqtt_client_connect+0x2c4>)
 8005aca:	488f      	ldr	r0, [pc, #572]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005acc:	f00e f9be 	bl	8013e4c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	7a9b      	ldrb	r3, [r3, #10]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8005ad8:	f06f 0309 	mvn.w	r3, #9
 8005adc:	e21f      	b.n	8005f1e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8005ade:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f00e fa52 	bl	8013f8e <memset>
  client->connect_arg = arg;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aee:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8005af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af8:	899a      	ldrh	r2, [r3, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	331c      	adds	r3, #28
 8005b02:	2104      	movs	r1, #4
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff f8b9 	bl	8004c7c <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d074      	beq.n	8005bfc <mqtt_client_connect+0x1ac>
 8005b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d070      	beq.n	8005bfc <mqtt_client_connect+0x1ac>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8005b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	7e1b      	ldrb	r3, [r3, #24]
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f003 0318 	and.w	r3, r3, #24
 8005b34:	b25a      	sxtb	r2, r3
 8005b36:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (client_info->will_retain) {
 8005b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b44:	7e5b      	ldrb	r3, [r3, #25]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <mqtt_client_connect+0x106>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8005b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    len = strlen(client_info->will_topic);
 8005b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fa fbc0 	bl	80002e0 <strlen>
 8005b60:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2bff      	cmp	r3, #255	@ 0xff
 8005b66:	d909      	bls.n	8005b7c <mqtt_client_connect+0x12c>
 8005b68:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005b6a:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 8005b6e:	496a      	ldr	r1, [pc, #424]	@ (8005d18 <mqtt_client_connect+0x2c8>)
 8005b70:	4865      	ldr	r0, [pc, #404]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005b72:	f00e f96b 	bl	8013e4c <iprintf>
 8005b76:	f06f 0305 	mvn.w	r3, #5
 8005b7a:	e1d0      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <mqtt_client_connect+0x146>
 8005b82:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005b84:	f240 5229 	movw	r2, #1321	@ 0x529
 8005b88:	4964      	ldr	r1, [pc, #400]	@ (8005d1c <mqtt_client_connect+0x2cc>)
 8005b8a:	485f      	ldr	r0, [pc, #380]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005b8c:	f00e f95e 	bl	8013e4c <iprintf>
 8005b90:	f06f 0305 	mvn.w	r3, #5
 8005b94:	e1c3      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    len = strlen(client_info->will_msg);
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fa fb9d 	bl	80002e0 <strlen>
 8005ba6:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2bff      	cmp	r3, #255	@ 0xff
 8005bac:	d909      	bls.n	8005bc2 <mqtt_client_connect+0x172>
 8005bae:	4b54      	ldr	r3, [pc, #336]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005bb0:	f240 522c 	movw	r2, #1324	@ 0x52c
 8005bb4:	495a      	ldr	r1, [pc, #360]	@ (8005d20 <mqtt_client_connect+0x2d0>)
 8005bb6:	4854      	ldr	r0, [pc, #336]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005bb8:	f00e f948 	bl	8013e4c <iprintf>
 8005bbc:	f06f 0305 	mvn.w	r3, #5
 8005bc0:	e1ad      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8005bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bca:	1c9a      	adds	r2, r3, #2
 8005bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005bd0:	4413      	add	r3, r2
 8005bd2:	1c9a      	adds	r2, r3, #2
 8005bd4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bd8:	4413      	add	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be2:	d309      	bcc.n	8005bf8 <mqtt_client_connect+0x1a8>
 8005be4:	4b46      	ldr	r3, [pc, #280]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005be6:	f240 522f 	movw	r2, #1327	@ 0x52f
 8005bea:	494e      	ldr	r1, [pc, #312]	@ (8005d24 <mqtt_client_connect+0x2d4>)
 8005bec:	4846      	ldr	r0, [pc, #280]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005bee:	f00e f92d 	bl	8013e4c <iprintf>
 8005bf2:	f06f 0305 	mvn.w	r3, #5
 8005bf6:	e192      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_user != NULL) {
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03d      	beq.n	8005c80 <mqtt_client_connect+0x230>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8005c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_user);
 8005c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fb63 	bl	80002e0 <strlen>
 8005c1a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d309      	bcc.n	8005c38 <mqtt_client_connect+0x1e8>
 8005c24:	4b36      	ldr	r3, [pc, #216]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005c26:	f240 5235 	movw	r2, #1333	@ 0x535
 8005c2a:	493f      	ldr	r1, [pc, #252]	@ (8005d28 <mqtt_client_connect+0x2d8>)
 8005c2c:	4836      	ldr	r0, [pc, #216]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005c2e:	f00e f90d 	bl	8013e4c <iprintf>
 8005c32:	f06f 0305 	mvn.w	r3, #5
 8005c36:	e172      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <mqtt_client_connect+0x202>
 8005c3e:	4b30      	ldr	r3, [pc, #192]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005c40:	f240 5236 	movw	r2, #1334	@ 0x536
 8005c44:	4939      	ldr	r1, [pc, #228]	@ (8005d2c <mqtt_client_connect+0x2dc>)
 8005c46:	4830      	ldr	r0, [pc, #192]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005c48:	f00e f900 	bl	8013e4c <iprintf>
 8005c4c:	f06f 0305 	mvn.w	r3, #5
 8005c50:	e165      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8005c56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	8bfb      	ldrh	r3, [r7, #30]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c66:	d309      	bcc.n	8005c7c <mqtt_client_connect+0x22c>
 8005c68:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005c6a:	f240 5239 	movw	r2, #1337	@ 0x539
 8005c6e:	492d      	ldr	r1, [pc, #180]	@ (8005d24 <mqtt_client_connect+0x2d4>)
 8005c70:	4825      	ldr	r0, [pc, #148]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005c72:	f00e f8eb 	bl	8013e4c <iprintf>
 8005c76:	f06f 0305 	mvn.w	r3, #5
 8005c7a:	e150      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_pass != NULL) {
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d059      	beq.n	8005d3c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8005c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_pass);
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fb21 	bl	80002e0 <strlen>
 8005c9e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca6:	d309      	bcc.n	8005cbc <mqtt_client_connect+0x26c>
 8005ca8:	4b15      	ldr	r3, [pc, #84]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005caa:	f240 523f 	movw	r2, #1343	@ 0x53f
 8005cae:	4920      	ldr	r1, [pc, #128]	@ (8005d30 <mqtt_client_connect+0x2e0>)
 8005cb0:	4815      	ldr	r0, [pc, #84]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005cb2:	f00e f8cb 	bl	8013e4c <iprintf>
 8005cb6:	f06f 0305 	mvn.w	r3, #5
 8005cba:	e130      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <mqtt_client_connect+0x286>
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005cc4:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8005cc8:	491a      	ldr	r1, [pc, #104]	@ (8005d34 <mqtt_client_connect+0x2e4>)
 8005cca:	480f      	ldr	r0, [pc, #60]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005ccc:	f00e f8be 	bl	8013e4c <iprintf>
 8005cd0:	f06f 0305 	mvn.w	r3, #5
 8005cd4:	e123      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8005cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cdc:	1c9a      	adds	r2, r3, #2
 8005cde:	8bbb      	ldrh	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cea:	d325      	bcc.n	8005d38 <mqtt_client_connect+0x2e8>
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <mqtt_client_connect+0x2b0>)
 8005cee:	f240 5243 	movw	r2, #1347	@ 0x543
 8005cf2:	490c      	ldr	r1, [pc, #48]	@ (8005d24 <mqtt_client_connect+0x2d4>)
 8005cf4:	4804      	ldr	r0, [pc, #16]	@ (8005d08 <mqtt_client_connect+0x2b8>)
 8005cf6:	f00e f8a9 	bl	8013e4c <iprintf>
 8005cfa:	f06f 0305 	mvn.w	r3, #5
 8005cfe:	e10e      	b.n	8005f1e <mqtt_client_connect+0x4ce>
 8005d00:	080175c8 	.word	0x080175c8
 8005d04:	08017a48 	.word	0x08017a48
 8005d08:	08017640 	.word	0x08017640
 8005d0c:	08017a6c 	.word	0x08017a6c
 8005d10:	08017a94 	.word	0x08017a94
 8005d14:	08017ac0 	.word	0x08017ac0
 8005d18:	08017af4 	.word	0x08017af4
 8005d1c:	08017b34 	.word	0x08017b34
 8005d20:	08017b74 	.word	0x08017b74
 8005d24:	08017bb0 	.word	0x08017bb0
 8005d28:	08017be0 	.word	0x08017be0
 8005d2c:	08017c20 	.word	0x08017c20
 8005d30:	08017c64 	.word	0x08017c64
 8005d34:	08017ca4 	.word	0x08017ca4
    remaining_length = (u16_t)len;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8005d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d40:	f043 0302 	orr.w	r3, r3, #2
 8005d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  len = strlen(client_info->client_id);
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fa fac7 	bl	80002e0 <strlen>
 8005d52:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d5a:	d309      	bcc.n	8005d70 <mqtt_client_connect+0x320>
 8005d5c:	4b72      	ldr	r3, [pc, #456]	@ (8005f28 <mqtt_client_connect+0x4d8>)
 8005d5e:	f240 524b 	movw	r2, #1355	@ 0x54b
 8005d62:	4972      	ldr	r1, [pc, #456]	@ (8005f2c <mqtt_client_connect+0x4dc>)
 8005d64:	4872      	ldr	r0, [pc, #456]	@ (8005f30 <mqtt_client_connect+0x4e0>)
 8005d66:	f00e f871 	bl	8013e4c <iprintf>
 8005d6a:	f06f 0305 	mvn.w	r3, #5
 8005d6e:	e0d6      	b.n	8005f1e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8005d74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d84:	d309      	bcc.n	8005d9a <mqtt_client_connect+0x34a>
 8005d86:	4b68      	ldr	r3, [pc, #416]	@ (8005f28 <mqtt_client_connect+0x4d8>)
 8005d88:	f240 524e 	movw	r2, #1358	@ 0x54e
 8005d8c:	4969      	ldr	r1, [pc, #420]	@ (8005f34 <mqtt_client_connect+0x4e4>)
 8005d8e:	4868      	ldr	r0, [pc, #416]	@ (8005f30 <mqtt_client_connect+0x4e0>)
 8005d90:	f00e f85c 	bl	8013e4c <iprintf>
 8005d94:	f06f 0305 	mvn.w	r3, #5
 8005d98:	e0c1      	b.n	8005f1e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	33ec      	adds	r3, #236	@ 0xec
 8005da2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff f854 	bl	8004e54 <mqtt_output_check_space>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <mqtt_client_connect+0x368>
    return ERR_MEM;
 8005db2:	f04f 33ff 	mov.w	r3, #4294967295
 8005db6:	e0b2      	b.n	8005f1e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8005db8:	2000      	movs	r0, #0
 8005dba:	f003 fb1f 	bl	80093fc <tcp_new_ip_type>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <mqtt_client_connect+0x382>
    return ERR_MEM;
 8005dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd0:	e0a5      	b.n	8005f1e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f003 fb1d 	bl	8009418 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	4954      	ldr	r1, [pc, #336]	@ (8005f38 <mqtt_client_connect+0x4e8>)
 8005de6:	4618      	mov	r0, r3
 8005de8:	f002 fa44 	bl	8008274 <tcp_bind>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8005df2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8084 	bne.w	8005f04 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68d8      	ldr	r0, [r3, #12]
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	4b4e      	ldr	r3, [pc, #312]	@ (8005f3c <mqtt_client_connect+0x4ec>)
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	f002 fbbd 	bl	8008584 <tcp_connect>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8005e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d177      	bne.n	8005f08 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4948      	ldr	r1, [pc, #288]	@ (8005f40 <mqtt_client_connect+0x4f0>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f003 fb50 	bl	80094c4 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	f7fe ffbc 	bl	8004dba <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	33ec      	adds	r3, #236	@ 0xec
 8005e46:	2204      	movs	r2, #4
 8005e48:	493e      	ldr	r1, [pc, #248]	@ (8005f44 <mqtt_client_connect+0x4f4>)
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe ff89 	bl	8004d62 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	33ec      	adds	r3, #236	@ 0xec
 8005e54:	2104      	movs	r1, #4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe ff3e 	bl	8004cd8 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	33ec      	adds	r3, #236	@ 0xec
 8005e60:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e64:	4611      	mov	r1, r2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe ff36 	bl	8004cd8 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e74:	899b      	ldrh	r3, [r3, #12]
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f7fe ff3c 	bl	8004cf6 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	8afa      	ldrh	r2, [r7, #22]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f7fe ff69 	bl	8004d62 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8005e90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d015      	beq.n	8005ec8 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	f7fe ff58 	bl	8004d62 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005ec0:	b292      	uxth	r2, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f7fe ff4d 	bl	8004d62 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8005ec8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da08      	bge.n	8005ee2 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	8bfa      	ldrh	r2, [r7, #30]
 8005edc:	4619      	mov	r1, r3
 8005ede:	f7fe ff40 	bl	8004d62 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8005ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	8bba      	ldrh	r2, [r7, #28]
 8005efa:	4619      	mov	r1, r3
 8005efc:	f7fe ff31 	bl	8004d62 <mqtt_output_append_string>
  }
  return ERR_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e00c      	b.n	8005f1e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 8005f04:	bf00      	nop
 8005f06:	e000      	b.n	8005f0a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 8005f08:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f002 f9a4 	bl	800825c <tcp_abort>
  client->conn = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	60da      	str	r2, [r3, #12]
  return err;
 8005f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3728      	adds	r7, #40	@ 0x28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	080175c8 	.word	0x080175c8
 8005f2c:	08017ce8 	.word	0x08017ce8
 8005f30:	08017640 	.word	0x08017640
 8005f34:	08017bb0 	.word	0x08017bb0
 8005f38:	0801ac10 	.word	0x0801ac10
 8005f3c:	08005811 	.word	0x08005811
 8005f40:	0800579d 	.word	0x0800579d
 8005f44:	08017d24 	.word	0x08017d24

08005f48 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	b21a      	sxth	r2, r3
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	4313      	orrs	r3, r2
 8005f64:	b21b      	sxth	r3, r3
 8005f66:	b29b      	uxth	r3, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	061a      	lsls	r2, r3, #24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0e1b      	lsrs	r3, r3, #24
 8005f98:	4313      	orrs	r3, r2
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005fb0:	f000 f8d4 	bl	800615c <mem_init>
  memp_init();
 8005fb4:	f000 fbfe 	bl	80067b4 <memp_init>
  pbuf_init();
  netif_init();
 8005fb8:	f000 fcfc 	bl	80069b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005fbc:	f008 f832 	bl	800e024 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005fc0:	f001 fe52 	bl	8007c68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005fc4:	f007 ff6a 	bl	800de9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005fda:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <ptr_to_mem+0x20>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	4413      	add	r3, r2
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20004fb0 	.word	0x20004fb0

08005ff4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005ffc:	4b05      	ldr	r3, [pc, #20]	@ (8006014 <mem_to_ptr+0x20>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	b29b      	uxth	r3, r3
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20004fb0 	.word	0x20004fb0

08006018 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006020:	4b45      	ldr	r3, [pc, #276]	@ (8006138 <plug_holes+0x120>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d206      	bcs.n	8006038 <plug_holes+0x20>
 800602a:	4b44      	ldr	r3, [pc, #272]	@ (800613c <plug_holes+0x124>)
 800602c:	f240 12df 	movw	r2, #479	@ 0x1df
 8006030:	4943      	ldr	r1, [pc, #268]	@ (8006140 <plug_holes+0x128>)
 8006032:	4844      	ldr	r0, [pc, #272]	@ (8006144 <plug_holes+0x12c>)
 8006034:	f00d ff0a 	bl	8013e4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006038:	4b43      	ldr	r3, [pc, #268]	@ (8006148 <plug_holes+0x130>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d306      	bcc.n	8006050 <plug_holes+0x38>
 8006042:	4b3e      	ldr	r3, [pc, #248]	@ (800613c <plug_holes+0x124>)
 8006044:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006048:	4940      	ldr	r1, [pc, #256]	@ (800614c <plug_holes+0x134>)
 800604a:	483e      	ldr	r0, [pc, #248]	@ (8006144 <plug_holes+0x12c>)
 800604c:	f00d fefe 	bl	8013e4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	791b      	ldrb	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <plug_holes+0x4e>
 8006058:	4b38      	ldr	r3, [pc, #224]	@ (800613c <plug_holes+0x124>)
 800605a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800605e:	493c      	ldr	r1, [pc, #240]	@ (8006150 <plug_holes+0x138>)
 8006060:	4838      	ldr	r0, [pc, #224]	@ (8006144 <plug_holes+0x12c>)
 8006062:	f00d fef3 	bl	8013e4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800606e:	d906      	bls.n	800607e <plug_holes+0x66>
 8006070:	4b32      	ldr	r3, [pc, #200]	@ (800613c <plug_holes+0x124>)
 8006072:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006076:	4937      	ldr	r1, [pc, #220]	@ (8006154 <plug_holes+0x13c>)
 8006078:	4832      	ldr	r0, [pc, #200]	@ (8006144 <plug_holes+0x12c>)
 800607a:	f00d fee7 	bl	8013e4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ffa4 	bl	8005fd0 <ptr_to_mem>
 8006088:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d024      	beq.n	80060dc <plug_holes+0xc4>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d120      	bne.n	80060dc <plug_holes+0xc4>
 800609a:	4b2b      	ldr	r3, [pc, #172]	@ (8006148 <plug_holes+0x130>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d01b      	beq.n	80060dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80060a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006158 <plug_holes+0x140>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d102      	bne.n	80060b4 <plug_holes+0x9c>
      lfree = mem;
 80060ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006158 <plug_holes+0x140>)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	881a      	ldrh	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060c4:	d00a      	beq.n	80060dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff ff80 	bl	8005fd0 <ptr_to_mem>
 80060d0:	4604      	mov	r4, r0
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff ff8e 	bl	8005ff4 <mem_to_ptr>
 80060d8:	4603      	mov	r3, r0
 80060da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff ff75 	bl	8005fd0 <ptr_to_mem>
 80060e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d01f      	beq.n	8006130 <plug_holes+0x118>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	791b      	ldrb	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11b      	bne.n	8006130 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80060f8:	4b17      	ldr	r3, [pc, #92]	@ (8006158 <plug_holes+0x140>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d102      	bne.n	8006108 <plug_holes+0xf0>
      lfree = pmem;
 8006102:	4a15      	ldr	r2, [pc, #84]	@ (8006158 <plug_holes+0x140>)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	881a      	ldrh	r2, [r3, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006118:	d00a      	beq.n	8006130 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff56 	bl	8005fd0 <ptr_to_mem>
 8006124:	4604      	mov	r4, r0
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	f7ff ff64 	bl	8005ff4 <mem_to_ptr>
 800612c:	4603      	mov	r3, r0
 800612e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	20004fb0 	.word	0x20004fb0
 800613c:	08017d78 	.word	0x08017d78
 8006140:	08017da8 	.word	0x08017da8
 8006144:	08017dc0 	.word	0x08017dc0
 8006148:	20004fb4 	.word	0x20004fb4
 800614c:	08017de8 	.word	0x08017de8
 8006150:	08017e04 	.word	0x08017e04
 8006154:	08017e20 	.word	0x08017e20
 8006158:	20004fb8 	.word	0x20004fb8

0800615c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006162:	4b16      	ldr	r3, [pc, #88]	@ (80061bc <mem_init+0x60>)
 8006164:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <mem_init+0x64>)
 8006166:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006168:	4b14      	ldr	r3, [pc, #80]	@ (80061bc <mem_init+0x60>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006174:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006182:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006186:	f7ff ff23 	bl	8005fd0 <ptr_to_mem>
 800618a:	4603      	mov	r3, r0
 800618c:	4a0d      	ldr	r2, [pc, #52]	@ (80061c4 <mem_init+0x68>)
 800618e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <mem_init+0x68>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006198:	4b0a      	ldr	r3, [pc, #40]	@ (80061c4 <mem_init+0x68>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80061a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80061a2:	4b08      	ldr	r3, [pc, #32]	@ (80061c4 <mem_init+0x68>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80061aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80061ac:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <mem_init+0x60>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a05      	ldr	r2, [pc, #20]	@ (80061c8 <mem_init+0x6c>)
 80061b2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20004fb0 	.word	0x20004fb0
 80061c0:	20048000 	.word	0x20048000
 80061c4:	20004fb4 	.word	0x20004fb4
 80061c8:	20004fb8 	.word	0x20004fb8

080061cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff ff0d 	bl	8005ff4 <mem_to_ptr>
 80061da:	4603      	mov	r3, r0
 80061dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fef4 	bl	8005fd0 <ptr_to_mem>
 80061e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	885b      	ldrh	r3, [r3, #2]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff feee 	bl	8005fd0 <ptr_to_mem>
 80061f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061fe:	d818      	bhi.n	8006232 <mem_link_valid+0x66>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	885b      	ldrh	r3, [r3, #2]
 8006204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006208:	d813      	bhi.n	8006232 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800620e:	8afa      	ldrh	r2, [r7, #22]
 8006210:	429a      	cmp	r2, r3
 8006212:	d004      	beq.n	800621e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	8afa      	ldrh	r2, [r7, #22]
 800621a:	429a      	cmp	r2, r3
 800621c:	d109      	bne.n	8006232 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800621e:	4b08      	ldr	r3, [pc, #32]	@ (8006240 <mem_link_valid+0x74>)
 8006220:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	429a      	cmp	r2, r3
 8006226:	d006      	beq.n	8006236 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	885b      	ldrh	r3, [r3, #2]
 800622c:	8afa      	ldrh	r2, [r7, #22]
 800622e:	429a      	cmp	r2, r3
 8006230:	d001      	beq.n	8006236 <mem_link_valid+0x6a>
    return 0;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <mem_link_valid+0x6c>
  }
  return 1;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20004fb4 	.word	0x20004fb4

08006244 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04c      	beq.n	80062ec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <mem_free+0xb0>)
 800625e:	f240 2273 	movw	r2, #627	@ 0x273
 8006262:	4925      	ldr	r1, [pc, #148]	@ (80062f8 <mem_free+0xb4>)
 8006264:	4825      	ldr	r0, [pc, #148]	@ (80062fc <mem_free+0xb8>)
 8006266:	f00d fdf1 	bl	8013e4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800626a:	e040      	b.n	80062ee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3b08      	subs	r3, #8
 8006270:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006272:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <mem_free+0xbc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	429a      	cmp	r2, r3
 800627a:	d306      	bcc.n	800628a <mem_free+0x46>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f103 020c 	add.w	r2, r3, #12
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <mem_free+0xc0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d907      	bls.n	800629a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <mem_free+0xb0>)
 800628c:	f240 227f 	movw	r2, #639	@ 0x27f
 8006290:	491d      	ldr	r1, [pc, #116]	@ (8006308 <mem_free+0xc4>)
 8006292:	481a      	ldr	r0, [pc, #104]	@ (80062fc <mem_free+0xb8>)
 8006294:	f00d fdda 	bl	8013e4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006298:	e029      	b.n	80062ee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	791b      	ldrb	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80062a2:	4b14      	ldr	r3, [pc, #80]	@ (80062f4 <mem_free+0xb0>)
 80062a4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80062a8:	4918      	ldr	r1, [pc, #96]	@ (800630c <mem_free+0xc8>)
 80062aa:	4814      	ldr	r0, [pc, #80]	@ (80062fc <mem_free+0xb8>)
 80062ac:	f00d fdce 	bl	8013e4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80062b0:	e01d      	b.n	80062ee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff ff8a 	bl	80061cc <mem_link_valid>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80062be:	4b0d      	ldr	r3, [pc, #52]	@ (80062f4 <mem_free+0xb0>)
 80062c0:	f240 2295 	movw	r2, #661	@ 0x295
 80062c4:	4912      	ldr	r1, [pc, #72]	@ (8006310 <mem_free+0xcc>)
 80062c6:	480d      	ldr	r0, [pc, #52]	@ (80062fc <mem_free+0xb8>)
 80062c8:	f00d fdc0 	bl	8013e4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80062cc:	e00f      	b.n	80062ee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80062d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006314 <mem_free+0xd0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d202      	bcs.n	80062e4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80062de:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <mem_free+0xd0>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff fe97 	bl	8006018 <plug_holes>
 80062ea:	e000      	b.n	80062ee <mem_free+0xaa>
    return;
 80062ec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	08017d78 	.word	0x08017d78
 80062f8:	08017e4c 	.word	0x08017e4c
 80062fc:	08017dc0 	.word	0x08017dc0
 8006300:	20004fb0 	.word	0x20004fb0
 8006304:	20004fb4 	.word	0x20004fb4
 8006308:	08017e70 	.word	0x08017e70
 800630c:	08017e8c 	.word	0x08017e8c
 8006310:	08017eb4 	.word	0x08017eb4
 8006314:	20004fb8 	.word	0x20004fb8

08006318 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	3303      	adds	r3, #3
 8006328:	b29b      	uxth	r3, r3
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006330:	8bfb      	ldrh	r3, [r7, #30]
 8006332:	2b0b      	cmp	r3, #11
 8006334:	d801      	bhi.n	800633a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006336:	230c      	movs	r3, #12
 8006338:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800633a:	8bfb      	ldrh	r3, [r7, #30]
 800633c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006340:	d803      	bhi.n	800634a <mem_trim+0x32>
 8006342:	8bfa      	ldrh	r2, [r7, #30]
 8006344:	887b      	ldrh	r3, [r7, #2]
 8006346:	429a      	cmp	r2, r3
 8006348:	d201      	bcs.n	800634e <mem_trim+0x36>
    return NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	e0cc      	b.n	80064e8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800634e:	4b68      	ldr	r3, [pc, #416]	@ (80064f0 <mem_trim+0x1d8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d304      	bcc.n	8006362 <mem_trim+0x4a>
 8006358:	4b66      	ldr	r3, [pc, #408]	@ (80064f4 <mem_trim+0x1dc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	429a      	cmp	r2, r3
 8006360:	d306      	bcc.n	8006370 <mem_trim+0x58>
 8006362:	4b65      	ldr	r3, [pc, #404]	@ (80064f8 <mem_trim+0x1e0>)
 8006364:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006368:	4964      	ldr	r1, [pc, #400]	@ (80064fc <mem_trim+0x1e4>)
 800636a:	4865      	ldr	r0, [pc, #404]	@ (8006500 <mem_trim+0x1e8>)
 800636c:	f00d fd6e 	bl	8013e4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006370:	4b5f      	ldr	r3, [pc, #380]	@ (80064f0 <mem_trim+0x1d8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d304      	bcc.n	8006384 <mem_trim+0x6c>
 800637a:	4b5e      	ldr	r3, [pc, #376]	@ (80064f4 <mem_trim+0x1dc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d301      	bcc.n	8006388 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	e0af      	b.n	80064e8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3b08      	subs	r3, #8
 800638c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800638e:	69b8      	ldr	r0, [r7, #24]
 8006390:	f7ff fe30 	bl	8005ff4 <mem_to_ptr>
 8006394:	4603      	mov	r3, r0
 8006396:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	8afb      	ldrh	r3, [r7, #22]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b08      	subs	r3, #8
 80063a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80063a6:	8bfa      	ldrh	r2, [r7, #30]
 80063a8:	8abb      	ldrh	r3, [r7, #20]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d906      	bls.n	80063bc <mem_trim+0xa4>
 80063ae:	4b52      	ldr	r3, [pc, #328]	@ (80064f8 <mem_trim+0x1e0>)
 80063b0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80063b4:	4953      	ldr	r1, [pc, #332]	@ (8006504 <mem_trim+0x1ec>)
 80063b6:	4852      	ldr	r0, [pc, #328]	@ (8006500 <mem_trim+0x1e8>)
 80063b8:	f00d fd48 	bl	8013e4c <iprintf>
  if (newsize > size) {
 80063bc:	8bfa      	ldrh	r2, [r7, #30]
 80063be:	8abb      	ldrh	r3, [r7, #20]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d901      	bls.n	80063c8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e08f      	b.n	80064e8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80063c8:	8bfa      	ldrh	r2, [r7, #30]
 80063ca:	8abb      	ldrh	r3, [r7, #20]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d101      	bne.n	80063d4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	e089      	b.n	80064e8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fdf9 	bl	8005fd0 <ptr_to_mem>
 80063de:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	791b      	ldrb	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13f      	bne.n	8006468 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063f0:	d106      	bne.n	8006400 <mem_trim+0xe8>
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <mem_trim+0x1e0>)
 80063f4:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80063f8:	4943      	ldr	r1, [pc, #268]	@ (8006508 <mem_trim+0x1f0>)
 80063fa:	4841      	ldr	r0, [pc, #260]	@ (8006500 <mem_trim+0x1e8>)
 80063fc:	f00d fd26 	bl	8013e4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006406:	8afa      	ldrh	r2, [r7, #22]
 8006408:	8bfb      	ldrh	r3, [r7, #30]
 800640a:	4413      	add	r3, r2
 800640c:	b29b      	uxth	r3, r3
 800640e:	3308      	adds	r3, #8
 8006410:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006412:	4b3e      	ldr	r3, [pc, #248]	@ (800650c <mem_trim+0x1f4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d106      	bne.n	800642a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fdd6 	bl	8005fd0 <ptr_to_mem>
 8006424:	4603      	mov	r3, r0
 8006426:	4a39      	ldr	r2, [pc, #228]	@ (800650c <mem_trim+0x1f4>)
 8006428:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800642a:	89fb      	ldrh	r3, [r7, #14]
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff fdcf 	bl	8005fd0 <ptr_to_mem>
 8006432:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2200      	movs	r2, #0
 8006438:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	89ba      	ldrh	r2, [r7, #12]
 800643e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	8afa      	ldrh	r2, [r7, #22]
 8006444:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	89fa      	ldrh	r2, [r7, #14]
 800644a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006454:	d047      	beq.n	80064e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fdb8 	bl	8005fd0 <ptr_to_mem>
 8006460:	4602      	mov	r2, r0
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	8053      	strh	r3, [r2, #2]
 8006466:	e03e      	b.n	80064e6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006468:	8bfb      	ldrh	r3, [r7, #30]
 800646a:	f103 0214 	add.w	r2, r3, #20
 800646e:	8abb      	ldrh	r3, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	d838      	bhi.n	80064e6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006474:	8afa      	ldrh	r2, [r7, #22]
 8006476:	8bfb      	ldrh	r3, [r7, #30]
 8006478:	4413      	add	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	3308      	adds	r3, #8
 800647e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006488:	d106      	bne.n	8006498 <mem_trim+0x180>
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <mem_trim+0x1e0>)
 800648c:	f240 3216 	movw	r2, #790	@ 0x316
 8006490:	491d      	ldr	r1, [pc, #116]	@ (8006508 <mem_trim+0x1f0>)
 8006492:	481b      	ldr	r0, [pc, #108]	@ (8006500 <mem_trim+0x1e8>)
 8006494:	f00d fcda 	bl	8013e4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006498:	89fb      	ldrh	r3, [r7, #14]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fd98 	bl	8005fd0 <ptr_to_mem>
 80064a0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80064a2:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <mem_trim+0x1f4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d202      	bcs.n	80064b2 <mem_trim+0x19a>
      lfree = mem2;
 80064ac:	4a17      	ldr	r2, [pc, #92]	@ (800650c <mem_trim+0x1f4>)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2200      	movs	r2, #0
 80064b6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	8afa      	ldrh	r2, [r7, #22]
 80064c4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	89fa      	ldrh	r2, [r7, #14]
 80064ca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d4:	d007      	beq.n	80064e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fd78 	bl	8005fd0 <ptr_to_mem>
 80064e0:	4602      	mov	r2, r0
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80064e6:	687b      	ldr	r3, [r7, #4]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20004fb0 	.word	0x20004fb0
 80064f4:	20004fb4 	.word	0x20004fb4
 80064f8:	08017d78 	.word	0x08017d78
 80064fc:	08017ee8 	.word	0x08017ee8
 8006500:	08017dc0 	.word	0x08017dc0
 8006504:	08017f00 	.word	0x08017f00
 8006508:	08017f20 	.word	0x08017f20
 800650c:	20004fb8 	.word	0x20004fb8

08006510 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <mem_malloc+0x14>
    return NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	e0d9      	b.n	80066d8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	3303      	adds	r3, #3
 8006528:	b29b      	uxth	r3, r3
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006530:	8bbb      	ldrh	r3, [r7, #28]
 8006532:	2b0b      	cmp	r3, #11
 8006534:	d801      	bhi.n	800653a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006536:	230c      	movs	r3, #12
 8006538:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800653a:	8bbb      	ldrh	r3, [r7, #28]
 800653c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006540:	d803      	bhi.n	800654a <mem_malloc+0x3a>
 8006542:	8bba      	ldrh	r2, [r7, #28]
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	429a      	cmp	r2, r3
 8006548:	d201      	bcs.n	800654e <mem_malloc+0x3e>
    return NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	e0c4      	b.n	80066d8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800654e:	4b64      	ldr	r3, [pc, #400]	@ (80066e0 <mem_malloc+0x1d0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fd4e 	bl	8005ff4 <mem_to_ptr>
 8006558:	4603      	mov	r3, r0
 800655a:	83fb      	strh	r3, [r7, #30]
 800655c:	e0b4      	b.n	80066c8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fd35 	bl	8005fd0 <ptr_to_mem>
 8006566:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	791b      	ldrb	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 80a4 	bne.w	80066ba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	461a      	mov	r2, r3
 8006578:	8bfb      	ldrh	r3, [r7, #30]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f1a3 0208 	sub.w	r2, r3, #8
 8006580:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006582:	429a      	cmp	r2, r3
 8006584:	f0c0 8099 	bcc.w	80066ba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	8bfb      	ldrh	r3, [r7, #30]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f1a3 0208 	sub.w	r2, r3, #8
 8006596:	8bbb      	ldrh	r3, [r7, #28]
 8006598:	3314      	adds	r3, #20
 800659a:	429a      	cmp	r2, r3
 800659c:	d333      	bcc.n	8006606 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800659e:	8bfa      	ldrh	r2, [r7, #30]
 80065a0:	8bbb      	ldrh	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3308      	adds	r3, #8
 80065a8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80065aa:	8a7b      	ldrh	r3, [r7, #18]
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065b0:	d106      	bne.n	80065c0 <mem_malloc+0xb0>
 80065b2:	4b4c      	ldr	r3, [pc, #304]	@ (80066e4 <mem_malloc+0x1d4>)
 80065b4:	f240 3287 	movw	r2, #903	@ 0x387
 80065b8:	494b      	ldr	r1, [pc, #300]	@ (80066e8 <mem_malloc+0x1d8>)
 80065ba:	484c      	ldr	r0, [pc, #304]	@ (80066ec <mem_malloc+0x1dc>)
 80065bc:	f00d fc46 	bl	8013e4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80065c0:	8a7b      	ldrh	r3, [r7, #18]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fd04 	bl	8005fd0 <ptr_to_mem>
 80065c8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	881a      	ldrh	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8bfa      	ldrh	r2, [r7, #30]
 80065dc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	8a7a      	ldrh	r2, [r7, #18]
 80065e2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2201      	movs	r2, #1
 80065e8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065f2:	d00b      	beq.n	800660c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fce9 	bl	8005fd0 <ptr_to_mem>
 80065fe:	4602      	mov	r2, r0
 8006600:	8a7b      	ldrh	r3, [r7, #18]
 8006602:	8053      	strh	r3, [r2, #2]
 8006604:	e002      	b.n	800660c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2201      	movs	r2, #1
 800660a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800660c:	4b34      	ldr	r3, [pc, #208]	@ (80066e0 <mem_malloc+0x1d0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	429a      	cmp	r2, r3
 8006614:	d127      	bne.n	8006666 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006616:	4b32      	ldr	r3, [pc, #200]	@ (80066e0 <mem_malloc+0x1d0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800661c:	e005      	b.n	800662a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fcd4 	bl	8005fd0 <ptr_to_mem>
 8006628:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <mem_malloc+0x12c>
 8006632:	4b2f      	ldr	r3, [pc, #188]	@ (80066f0 <mem_malloc+0x1e0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	429a      	cmp	r2, r3
 800663a:	d1f0      	bne.n	800661e <mem_malloc+0x10e>
          }
          lfree = cur;
 800663c:	4a28      	ldr	r2, [pc, #160]	@ (80066e0 <mem_malloc+0x1d0>)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006642:	4b27      	ldr	r3, [pc, #156]	@ (80066e0 <mem_malloc+0x1d0>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b2a      	ldr	r3, [pc, #168]	@ (80066f0 <mem_malloc+0x1e0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d00b      	beq.n	8006666 <mem_malloc+0x156>
 800664e:	4b24      	ldr	r3, [pc, #144]	@ (80066e0 <mem_malloc+0x1d0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	791b      	ldrb	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <mem_malloc+0x156>
 8006658:	4b22      	ldr	r3, [pc, #136]	@ (80066e4 <mem_malloc+0x1d4>)
 800665a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800665e:	4925      	ldr	r1, [pc, #148]	@ (80066f4 <mem_malloc+0x1e4>)
 8006660:	4822      	ldr	r0, [pc, #136]	@ (80066ec <mem_malloc+0x1dc>)
 8006662:	f00d fbf3 	bl	8013e4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006666:	8bba      	ldrh	r2, [r7, #28]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4413      	add	r3, r2
 800666c:	3308      	adds	r3, #8
 800666e:	4a20      	ldr	r2, [pc, #128]	@ (80066f0 <mem_malloc+0x1e0>)
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	4293      	cmp	r3, r2
 8006674:	d906      	bls.n	8006684 <mem_malloc+0x174>
 8006676:	4b1b      	ldr	r3, [pc, #108]	@ (80066e4 <mem_malloc+0x1d4>)
 8006678:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800667c:	491e      	ldr	r1, [pc, #120]	@ (80066f8 <mem_malloc+0x1e8>)
 800667e:	481b      	ldr	r0, [pc, #108]	@ (80066ec <mem_malloc+0x1dc>)
 8006680:	f00d fbe4 	bl	8013e4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d006      	beq.n	800669c <mem_malloc+0x18c>
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <mem_malloc+0x1d4>)
 8006690:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006694:	4919      	ldr	r1, [pc, #100]	@ (80066fc <mem_malloc+0x1ec>)
 8006696:	4815      	ldr	r0, [pc, #84]	@ (80066ec <mem_malloc+0x1dc>)
 8006698:	f00d fbd8 	bl	8013e4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d006      	beq.n	80066b4 <mem_malloc+0x1a4>
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <mem_malloc+0x1d4>)
 80066a8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80066ac:	4914      	ldr	r1, [pc, #80]	@ (8006700 <mem_malloc+0x1f0>)
 80066ae:	480f      	ldr	r0, [pc, #60]	@ (80066ec <mem_malloc+0x1dc>)
 80066b0:	f00d fbcc 	bl	8013e4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3308      	adds	r3, #8
 80066b8:	e00e      	b.n	80066d8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80066ba:	8bfb      	ldrh	r3, [r7, #30]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fc87 	bl	8005fd0 <ptr_to_mem>
 80066c2:	4603      	mov	r3, r0
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80066c8:	8bfa      	ldrh	r2, [r7, #30]
 80066ca:	8bbb      	ldrh	r3, [r7, #28]
 80066cc:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 80066d0:	429a      	cmp	r2, r3
 80066d2:	f4ff af44 	bcc.w	800655e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20004fb8 	.word	0x20004fb8
 80066e4:	08017d78 	.word	0x08017d78
 80066e8:	08017f20 	.word	0x08017f20
 80066ec:	08017dc0 	.word	0x08017dc0
 80066f0:	20004fb4 	.word	0x20004fb4
 80066f4:	08017f34 	.word	0x08017f34
 80066f8:	08017f50 	.word	0x08017f50
 80066fc:	08017f80 	.word	0x08017f80
 8006700:	08017fb0 	.word	0x08017fb0

08006704 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	460a      	mov	r2, r1
 800670e:	80fb      	strh	r3, [r7, #6]
 8006710:	4613      	mov	r3, r2
 8006712:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8006714:	88fb      	ldrh	r3, [r7, #6]
 8006716:	88ba      	ldrh	r2, [r7, #4]
 8006718:	fb02 f303 	mul.w	r3, r2, r3
 800671c:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	b29b      	uxth	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4293      	cmp	r3, r2
 8006728:	d001      	beq.n	800672e <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	e00e      	b.n	800674c <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	b29b      	uxth	r3, r3
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff feec 	bl	8006510 <mem_malloc>
 8006738:	60b8      	str	r0, [r7, #8]
  if (p) {
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	2100      	movs	r1, #0
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f00d fc22 	bl	8013f8e <memset>
  }
  return p;
 800674a:	68bb      	ldr	r3, [r7, #8]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	3303      	adds	r3, #3
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e011      	b.n	800679a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	461a      	mov	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	dbe7      	blt.n	8006776 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80067ba:	2300      	movs	r3, #0
 80067bc:	80fb      	strh	r3, [r7, #6]
 80067be:	e009      	b.n	80067d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	4a08      	ldr	r2, [pc, #32]	@ (80067e4 <memp_init+0x30>)
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ffc3 	bl	8006754 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	3301      	adds	r3, #1
 80067d2:	80fb      	strh	r3, [r7, #6]
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d9f2      	bls.n	80067c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80067da:	bf00      	nop
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	0801ab9c 	.word	0x0801ab9c

080067e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d012      	beq.n	8006824 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d006      	beq.n	8006820 <do_memp_malloc_pool+0x38>
 8006812:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <do_memp_malloc_pool+0x48>)
 8006814:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006818:	4906      	ldr	r1, [pc, #24]	@ (8006834 <do_memp_malloc_pool+0x4c>)
 800681a:	4807      	ldr	r0, [pc, #28]	@ (8006838 <do_memp_malloc_pool+0x50>)
 800681c:	f00d fb16 	bl	8013e4c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e000      	b.n	8006826 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	08017fd4 	.word	0x08017fd4
 8006834:	08018004 	.word	0x08018004
 8006838:	08018028 	.word	0x08018028

0800683c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <memp_malloc_pool+0x1c>
 800684a:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <memp_malloc_pool+0x38>)
 800684c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006850:	4909      	ldr	r1, [pc, #36]	@ (8006878 <memp_malloc_pool+0x3c>)
 8006852:	480a      	ldr	r0, [pc, #40]	@ (800687c <memp_malloc_pool+0x40>)
 8006854:	f00d fafa 	bl	8013e4c <iprintf>
  if (desc == NULL) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <memp_malloc_pool+0x26>
    return NULL;
 800685e:	2300      	movs	r3, #0
 8006860:	e003      	b.n	800686a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ffc0 	bl	80067e8 <do_memp_malloc_pool>
 8006868:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08017fd4 	.word	0x08017fd4
 8006878:	08018050 	.word	0x08018050
 800687c:	08018028 	.word	0x08018028

08006880 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d908      	bls.n	80068a2 <memp_malloc+0x22>
 8006890:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <memp_malloc+0x3c>)
 8006892:	f240 1257 	movw	r2, #343	@ 0x157
 8006896:	490a      	ldr	r1, [pc, #40]	@ (80068c0 <memp_malloc+0x40>)
 8006898:	480a      	ldr	r0, [pc, #40]	@ (80068c4 <memp_malloc+0x44>)
 800689a:	f00d fad7 	bl	8013e4c <iprintf>
 800689e:	2300      	movs	r3, #0
 80068a0:	e008      	b.n	80068b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	4a08      	ldr	r2, [pc, #32]	@ (80068c8 <memp_malloc+0x48>)
 80068a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff ff9c 	bl	80067e8 <do_memp_malloc_pool>
 80068b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08017fd4 	.word	0x08017fd4
 80068c0:	08018064 	.word	0x08018064
 80068c4:	08018028 	.word	0x08018028
 80068c8:	0801ab9c 	.word	0x0801ab9c

080068cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <do_memp_free_pool+0x22>
 80068e0:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <do_memp_free_pool+0x40>)
 80068e2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80068e6:	490a      	ldr	r1, [pc, #40]	@ (8006910 <do_memp_free_pool+0x44>)
 80068e8:	480a      	ldr	r0, [pc, #40]	@ (8006914 <do_memp_free_pool+0x48>)
 80068ea:	f00d faaf 	bl	8013e4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08017fd4 	.word	0x08017fd4
 8006910:	08018084 	.word	0x08018084
 8006914:	08018028 	.word	0x08018028

08006918 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <memp_free_pool+0x1e>
 8006928:	4b0a      	ldr	r3, [pc, #40]	@ (8006954 <memp_free_pool+0x3c>)
 800692a:	f240 1295 	movw	r2, #405	@ 0x195
 800692e:	490a      	ldr	r1, [pc, #40]	@ (8006958 <memp_free_pool+0x40>)
 8006930:	480a      	ldr	r0, [pc, #40]	@ (800695c <memp_free_pool+0x44>)
 8006932:	f00d fa8b 	bl	8013e4c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <memp_free_pool+0x34>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff ffc1 	bl	80068cc <do_memp_free_pool>
 800694a:	e000      	b.n	800694e <memp_free_pool+0x36>
    return;
 800694c:	bf00      	nop
}
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08017fd4 	.word	0x08017fd4
 8006958:	08018050 	.word	0x08018050
 800695c:	08018028 	.word	0x08018028

08006960 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	6039      	str	r1, [r7, #0]
 800696a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	2b08      	cmp	r3, #8
 8006970:	d907      	bls.n	8006982 <memp_free+0x22>
 8006972:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <memp_free+0x44>)
 8006974:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006978:	490b      	ldr	r1, [pc, #44]	@ (80069a8 <memp_free+0x48>)
 800697a:	480c      	ldr	r0, [pc, #48]	@ (80069ac <memp_free+0x4c>)
 800697c:	f00d fa66 	bl	8013e4c <iprintf>
 8006980:	e00c      	b.n	800699c <memp_free+0x3c>

  if (mem == NULL) {
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <memp_free+0x50>)
 800698c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff ff9a 	bl	80068cc <do_memp_free_pool>
 8006998:	e000      	b.n	800699c <memp_free+0x3c>
    return;
 800699a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	08017fd4 	.word	0x08017fd4
 80069a8:	080180a4 	.word	0x080180a4
 80069ac:	08018028 	.word	0x08018028
 80069b0:	0801ab9c 	.word	0x0801ab9c

080069b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d108      	bne.n	80069ea <netif_add+0x26>
 80069d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <netif_add+0x184>)
 80069da:	f240 1227 	movw	r2, #295	@ 0x127
 80069de:	495b      	ldr	r1, [pc, #364]	@ (8006b4c <netif_add+0x188>)
 80069e0:	485b      	ldr	r0, [pc, #364]	@ (8006b50 <netif_add+0x18c>)
 80069e2:	f00d fa33 	bl	8013e4c <iprintf>
 80069e6:	2300      	movs	r3, #0
 80069e8:	e0a9      	b.n	8006b3e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d108      	bne.n	8006a02 <netif_add+0x3e>
 80069f0:	4b55      	ldr	r3, [pc, #340]	@ (8006b48 <netif_add+0x184>)
 80069f2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80069f6:	4957      	ldr	r1, [pc, #348]	@ (8006b54 <netif_add+0x190>)
 80069f8:	4855      	ldr	r0, [pc, #340]	@ (8006b50 <netif_add+0x18c>)
 80069fa:	f00d fa27 	bl	8013e4c <iprintf>
 80069fe:	2300      	movs	r3, #0
 8006a00:	e09d      	b.n	8006b3e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006a08:	4b53      	ldr	r3, [pc, #332]	@ (8006b58 <netif_add+0x194>)
 8006a0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006a12:	4b51      	ldr	r3, [pc, #324]	@ (8006b58 <netif_add+0x194>)
 8006a14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006a1c:	4b4e      	ldr	r3, [pc, #312]	@ (8006b58 <netif_add+0x194>)
 8006a1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a49      	ldr	r2, [pc, #292]	@ (8006b5c <netif_add+0x198>)
 8006a36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3324      	adds	r3, #36	@ 0x24
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f00d fa9d 	bl	8013f8e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a3a      	ldr	r2, [r7, #32]
 8006a5e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006a60:	4b3f      	ldr	r3, [pc, #252]	@ (8006b60 <netif_add+0x19c>)
 8006a62:	781a      	ldrb	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a6e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f914 	bl	8006ca4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <netif_add+0xc8>
    return NULL;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e058      	b.n	8006b3e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a92:	2bff      	cmp	r3, #255	@ 0xff
 8006a94:	d103      	bne.n	8006a9e <netif_add+0xda>
        netif->num = 0;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006aa2:	4b30      	ldr	r3, [pc, #192]	@ (8006b64 <netif_add+0x1a0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e02b      	b.n	8006b02 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d106      	bne.n	8006ac0 <netif_add+0xfc>
 8006ab2:	4b25      	ldr	r3, [pc, #148]	@ (8006b48 <netif_add+0x184>)
 8006ab4:	f240 128b 	movw	r2, #395	@ 0x18b
 8006ab8:	492b      	ldr	r1, [pc, #172]	@ (8006b68 <netif_add+0x1a4>)
 8006aba:	4825      	ldr	r0, [pc, #148]	@ (8006b50 <netif_add+0x18c>)
 8006abc:	f00d f9c6 	bl	8013e4c <iprintf>
        num_netifs++;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2bff      	cmp	r3, #255	@ 0xff
 8006aca:	dd06      	ble.n	8006ada <netif_add+0x116>
 8006acc:	4b1e      	ldr	r3, [pc, #120]	@ (8006b48 <netif_add+0x184>)
 8006ace:	f240 128d 	movw	r2, #397	@ 0x18d
 8006ad2:	4926      	ldr	r1, [pc, #152]	@ (8006b6c <netif_add+0x1a8>)
 8006ad4:	481e      	ldr	r0, [pc, #120]	@ (8006b50 <netif_add+0x18c>)
 8006ad6:	f00d f9b9 	bl	8013e4c <iprintf>
        if (netif2->num == netif->num) {
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d108      	bne.n	8006afc <netif_add+0x138>
          netif->num++;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006af0:	3301      	adds	r3, #1
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8006afa:	e005      	b.n	8006b08 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1d0      	bne.n	8006aaa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1be      	bne.n	8006a8c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b14:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b16:	d103      	bne.n	8006b20 <netif_add+0x15c>
    netif_num = 0;
 8006b18:	4b11      	ldr	r3, [pc, #68]	@ (8006b60 <netif_add+0x19c>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e006      	b.n	8006b2e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b26:	3301      	adds	r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <netif_add+0x19c>)
 8006b2c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <netif_add+0x1a0>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006b36:	4a0b      	ldr	r2, [pc, #44]	@ (8006b64 <netif_add+0x1a0>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	080180c0 	.word	0x080180c0
 8006b4c:	08018154 	.word	0x08018154
 8006b50:	08018110 	.word	0x08018110
 8006b54:	08018170 	.word	0x08018170
 8006b58:	0801ac10 	.word	0x0801ac10
 8006b5c:	08006f87 	.word	0x08006f87
 8006b60:	20007fd0 	.word	0x20007fd0
 8006b64:	20007fc8 	.word	0x20007fc8
 8006b68:	08018194 	.word	0x08018194
 8006b6c:	080181a8 	.word	0x080181a8

08006b70 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f002 fe69 	bl	8009854 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f007 fed9 	bl	800e93c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006b8a:	bf00      	nop
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <netif_do_set_ipaddr+0x20>
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <netif_do_set_ipaddr+0x88>)
 8006ba8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006bac:	491c      	ldr	r1, [pc, #112]	@ (8006c20 <netif_do_set_ipaddr+0x8c>)
 8006bae:	481d      	ldr	r0, [pc, #116]	@ (8006c24 <netif_do_set_ipaddr+0x90>)
 8006bb0:	f00d f94c 	bl	8013e4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <netif_do_set_ipaddr+0x34>
 8006bba:	4b18      	ldr	r3, [pc, #96]	@ (8006c1c <netif_do_set_ipaddr+0x88>)
 8006bbc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006bc0:	4917      	ldr	r1, [pc, #92]	@ (8006c20 <netif_do_set_ipaddr+0x8c>)
 8006bc2:	4818      	ldr	r0, [pc, #96]	@ (8006c24 <netif_do_set_ipaddr+0x90>)
 8006bc4:	f00d f942 	bl	8013e4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d01c      	beq.n	8006c10 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3304      	adds	r3, #4
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006be6:	f107 0314 	add.w	r3, r7, #20
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ffbf 	bl	8006b70 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <netif_do_set_ipaddr+0x6a>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	e000      	b.n	8006c00 <netif_do_set_ipaddr+0x6c>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006c04:	2101      	movs	r1, #1
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f8d2 	bl	8006db0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	080180c0 	.word	0x080180c0
 8006c20:	080181d8 	.word	0x080181d8
 8006c24:	08018110 	.word	0x08018110

08006c28 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d00a      	beq.n	8006c58 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <netif_do_set_netmask+0x26>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	e000      	b.n	8006c50 <netif_do_set_netmask+0x28>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d00a      	beq.n	8006c96 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <netif_do_set_gw+0x26>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	e000      	b.n	8006c8e <netif_do_set_gw+0x28>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d34 <netif_set_addr+0x90>)
 8006cc2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006cca:	4b1a      	ldr	r3, [pc, #104]	@ (8006d34 <netif_set_addr+0x90>)
 8006ccc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006cd4:	4b17      	ldr	r3, [pc, #92]	@ (8006d34 <netif_set_addr+0x90>)
 8006cd6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <netif_set_addr+0x42>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <netif_set_addr+0x46>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <netif_set_addr+0x48>
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006cf4:	f107 0310 	add.w	r3, r7, #16
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff ff49 	bl	8006b94 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff ff8e 	bl	8006c28 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ffa8 	bl	8006c66 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006d1c:	f107 0310 	add.w	r3, r7, #16
 8006d20:	461a      	mov	r2, r3
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff ff35 	bl	8006b94 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006d2a:	bf00      	nop
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	0801ac10 	.word	0x0801ac10

08006d38 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <netif_set_default+0x1c>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20007fcc 	.word	0x20007fcc

08006d58 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <netif_set_up+0x1e>
 8006d66:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <netif_set_up+0x4c>)
 8006d68:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006d6c:	490e      	ldr	r1, [pc, #56]	@ (8006da8 <netif_set_up+0x50>)
 8006d6e:	480f      	ldr	r0, [pc, #60]	@ (8006dac <netif_set_up+0x54>)
 8006d70:	f00d f86c 	bl	8013e4c <iprintf>
 8006d74:	e013      	b.n	8006d9e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10c      	bne.n	8006d9e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006d96:	2103      	movs	r1, #3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f809 	bl	8006db0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	080180c0 	.word	0x080180c0
 8006da8:	08018248 	.word	0x08018248
 8006dac:	08018110 	.word	0x08018110

08006db0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <netif_issue_reports+0x20>
 8006dc2:	4b18      	ldr	r3, [pc, #96]	@ (8006e24 <netif_issue_reports+0x74>)
 8006dc4:	f240 326d 	movw	r2, #877	@ 0x36d
 8006dc8:	4917      	ldr	r1, [pc, #92]	@ (8006e28 <netif_issue_reports+0x78>)
 8006dca:	4818      	ldr	r0, [pc, #96]	@ (8006e2c <netif_issue_reports+0x7c>)
 8006dcc:	f00d f83e 	bl	8013e4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01e      	beq.n	8006e1c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006de4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d017      	beq.n	8006e1c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f00a fb8d 	bl	8011534 <etharp_request>
 8006e1a:	e000      	b.n	8006e1e <netif_issue_reports+0x6e>
    return;
 8006e1c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	080180c0 	.word	0x080180c0
 8006e28:	08018264 	.word	0x08018264
 8006e2c:	08018110 	.word	0x08018110

08006e30 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d107      	bne.n	8006e4e <netif_set_down+0x1e>
 8006e3e:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <netif_set_down+0x58>)
 8006e40:	f240 329b 	movw	r2, #923	@ 0x39b
 8006e44:	4911      	ldr	r1, [pc, #68]	@ (8006e8c <netif_set_down+0x5c>)
 8006e46:	4812      	ldr	r0, [pc, #72]	@ (8006e90 <netif_set_down+0x60>)
 8006e48:	f00d f800 	bl	8013e4c <iprintf>
 8006e4c:	e019      	b.n	8006e82 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f009 ff13 	bl	8010ca8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	080180c0 	.word	0x080180c0
 8006e8c:	08018288 	.word	0x08018288
 8006e90:	08018110 	.word	0x08018110

08006e94 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <netif_set_link_up+0x1e>
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <netif_set_link_up+0x64>)
 8006ea4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006ea8:	4914      	ldr	r1, [pc, #80]	@ (8006efc <netif_set_link_up+0x68>)
 8006eaa:	4815      	ldr	r0, [pc, #84]	@ (8006f00 <netif_set_link_up+0x6c>)
 8006eac:	f00c ffce 	bl	8013e4c <iprintf>
 8006eb0:	e01e      	b.n	8006ef0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d117      	bne.n	8006ef0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ec6:	f043 0304 	orr.w	r3, r3, #4
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f008 f95e 	bl	800f194 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006ed8:	2103      	movs	r1, #3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff ff68 	bl	8006db0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <netif_set_link_up+0x5c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	080180c0 	.word	0x080180c0
 8006efc:	080182a8 	.word	0x080182a8
 8006f00:	08018110 	.word	0x08018110

08006f04 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d107      	bne.n	8006f22 <netif_set_link_down+0x1e>
 8006f12:	4b11      	ldr	r3, [pc, #68]	@ (8006f58 <netif_set_link_down+0x54>)
 8006f14:	f240 4206 	movw	r2, #1030	@ 0x406
 8006f18:	4910      	ldr	r1, [pc, #64]	@ (8006f5c <netif_set_link_down+0x58>)
 8006f1a:	4811      	ldr	r0, [pc, #68]	@ (8006f60 <netif_set_link_down+0x5c>)
 8006f1c:	f00c ff96 	bl	8013e4c <iprintf>
 8006f20:	e017      	b.n	8006f52 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f36:	f023 0304 	bic.w	r3, r3, #4
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <netif_set_link_down+0x4e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	080180c0 	.word	0x080180c0
 8006f5c:	080182cc 	.word	0x080182cc
 8006f60:	08018110 	.word	0x08018110

08006f64 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	61da      	str	r2, [r3, #28]
  }
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006f92:	f06f 030b 	mvn.w	r3, #11
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d013      	beq.n	8006fdc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <netif_get_by_index+0x48>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e00c      	b.n	8006fd6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	79fa      	ldrb	r2, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d101      	bne.n	8006fd0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e006      	b.n	8006fde <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ef      	bne.n	8006fbc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20007fc8 	.word	0x20007fc8

08006ff0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8007028 <pbuf_free_ooseq+0x38>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <pbuf_free_ooseq+0x3c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	607b      	str	r3, [r7, #4]
 8007002:	e00a      	b.n	800701a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f002 fc5f 	bl	80098d0 <tcp_free_ooseq>
      return;
 8007012:	e005      	b.n	8007020 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1f1      	bne.n	8007004 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20007fd1 	.word	0x20007fd1
 800702c:	20007fe0 	.word	0x20007fe0

08007030 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007034:	4b03      	ldr	r3, [pc, #12]	@ (8007044 <pbuf_pool_is_empty+0x14>)
 8007036:	2201      	movs	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20007fd1 	.word	0x20007fd1

08007048 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4611      	mov	r1, r2
 8007054:	461a      	mov	r2, r3
 8007056:	460b      	mov	r3, r1
 8007058:	80fb      	strh	r3, [r7, #6]
 800705a:	4613      	mov	r3, r2
 800705c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	88fa      	ldrh	r2, [r7, #6]
 800706e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88ba      	ldrh	r2, [r7, #4]
 8007074:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007076:	8b3b      	ldrh	r3, [r7, #24]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	7f3a      	ldrb	r2, [r7, #28]
 8007082:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	73da      	strb	r2, [r3, #15]
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	4603      	mov	r3, r0
 80070a4:	71fb      	strb	r3, [r7, #7]
 80070a6:	460b      	mov	r3, r1
 80070a8:	80bb      	strh	r3, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80070b2:	887b      	ldrh	r3, [r7, #2]
 80070b4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80070b8:	d07f      	beq.n	80071ba <pbuf_alloc+0x11e>
 80070ba:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80070be:	f300 80c8 	bgt.w	8007252 <pbuf_alloc+0x1b6>
 80070c2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80070c6:	d010      	beq.n	80070ea <pbuf_alloc+0x4e>
 80070c8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80070cc:	f300 80c1 	bgt.w	8007252 <pbuf_alloc+0x1b6>
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d002      	beq.n	80070da <pbuf_alloc+0x3e>
 80070d4:	2b41      	cmp	r3, #65	@ 0x41
 80070d6:	f040 80bc 	bne.w	8007252 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	88bb      	ldrh	r3, [r7, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	2000      	movs	r0, #0
 80070e2:	f000 f8d1 	bl	8007288 <pbuf_alloc_reference>
 80070e6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80070e8:	e0bd      	b.n	8007266 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80070f2:	88bb      	ldrh	r3, [r7, #4]
 80070f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80070f6:	2008      	movs	r0, #8
 80070f8:	f7ff fbc2 	bl	8006880 <memp_malloc>
 80070fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007104:	f7ff ff94 	bl	8007030 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <pbuf_alloc+0x78>
            pbuf_free(p);
 800710e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007110:	f000 faa8 	bl	8007664 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007114:	2300      	movs	r3, #0
 8007116:	e0a7      	b.n	8007268 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800711a:	3303      	adds	r3, #3
 800711c:	b29b      	uxth	r3, r3
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	b29b      	uxth	r3, r3
 8007124:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007128:	b29b      	uxth	r3, r3
 800712a:	8b7a      	ldrh	r2, [r7, #26]
 800712c:	4293      	cmp	r3, r2
 800712e:	bf28      	it	cs
 8007130:	4613      	movcs	r3, r2
 8007132:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007134:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007136:	3310      	adds	r3, #16
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	3303      	adds	r3, #3
 800713e:	f023 0303 	bic.w	r3, r3, #3
 8007142:	4618      	mov	r0, r3
 8007144:	89f9      	ldrh	r1, [r7, #14]
 8007146:	8b7a      	ldrh	r2, [r7, #26]
 8007148:	2300      	movs	r3, #0
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	887b      	ldrh	r3, [r7, #2]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	460b      	mov	r3, r1
 8007152:	4601      	mov	r1, r0
 8007154:	6938      	ldr	r0, [r7, #16]
 8007156:	f7ff ff77 	bl	8007048 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f003 0303 	and.w	r3, r3, #3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d006      	beq.n	8007174 <pbuf_alloc+0xd8>
 8007166:	4b42      	ldr	r3, [pc, #264]	@ (8007270 <pbuf_alloc+0x1d4>)
 8007168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800716c:	4941      	ldr	r1, [pc, #260]	@ (8007274 <pbuf_alloc+0x1d8>)
 800716e:	4842      	ldr	r0, [pc, #264]	@ (8007278 <pbuf_alloc+0x1dc>)
 8007170:	f00c fe6c 	bl	8013e4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007176:	3303      	adds	r3, #3
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007180:	d106      	bne.n	8007190 <pbuf_alloc+0xf4>
 8007182:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <pbuf_alloc+0x1d4>)
 8007184:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007188:	493c      	ldr	r1, [pc, #240]	@ (800727c <pbuf_alloc+0x1e0>)
 800718a:	483b      	ldr	r0, [pc, #236]	@ (8007278 <pbuf_alloc+0x1dc>)
 800718c:	f00c fe5e 	bl	8013e4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
 800719a:	e002      	b.n	80071a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80071a6:	8b7a      	ldrh	r2, [r7, #26]
 80071a8:	89fb      	ldrh	r3, [r7, #14]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80071b2:	8b7b      	ldrh	r3, [r7, #26]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d19e      	bne.n	80070f6 <pbuf_alloc+0x5a>
      break;
 80071b8:	e055      	b.n	8007266 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80071ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071bc:	3303      	adds	r3, #3
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f023 0303 	bic.w	r3, r3, #3
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	88bb      	ldrh	r3, [r7, #4]
 80071c8:	3303      	adds	r3, #3
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f023 0303 	bic.w	r3, r3, #3
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80071d6:	8b3b      	ldrh	r3, [r7, #24]
 80071d8:	3310      	adds	r3, #16
 80071da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80071dc:	8b3a      	ldrh	r2, [r7, #24]
 80071de:	88bb      	ldrh	r3, [r7, #4]
 80071e0:	3303      	adds	r3, #3
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d306      	bcc.n	80071f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80071ea:	8afa      	ldrh	r2, [r7, #22]
 80071ec:	88bb      	ldrh	r3, [r7, #4]
 80071ee:	3303      	adds	r3, #3
 80071f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d201      	bcs.n	80071fc <pbuf_alloc+0x160>
        return NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e035      	b.n	8007268 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80071fc:	8afb      	ldrh	r3, [r7, #22]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff f986 	bl	8006510 <mem_malloc>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <pbuf_alloc+0x174>
        return NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	e02b      	b.n	8007268 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007210:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007212:	3310      	adds	r3, #16
 8007214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007216:	4413      	add	r3, r2
 8007218:	3303      	adds	r3, #3
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	4618      	mov	r0, r3
 8007220:	88b9      	ldrh	r1, [r7, #4]
 8007222:	88ba      	ldrh	r2, [r7, #4]
 8007224:	2300      	movs	r3, #0
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	887b      	ldrh	r3, [r7, #2]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	460b      	mov	r3, r1
 800722e:	4601      	mov	r1, r0
 8007230:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007232:	f7ff ff09 	bl	8007048 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <pbuf_alloc+0x1c8>
 8007242:	4b0b      	ldr	r3, [pc, #44]	@ (8007270 <pbuf_alloc+0x1d4>)
 8007244:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007248:	490d      	ldr	r1, [pc, #52]	@ (8007280 <pbuf_alloc+0x1e4>)
 800724a:	480b      	ldr	r0, [pc, #44]	@ (8007278 <pbuf_alloc+0x1dc>)
 800724c:	f00c fdfe 	bl	8013e4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007250:	e008      	b.n	8007264 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007252:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <pbuf_alloc+0x1d4>)
 8007254:	f240 1227 	movw	r2, #295	@ 0x127
 8007258:	490a      	ldr	r1, [pc, #40]	@ (8007284 <pbuf_alloc+0x1e8>)
 800725a:	4807      	ldr	r0, [pc, #28]	@ (8007278 <pbuf_alloc+0x1dc>)
 800725c:	f00c fdf6 	bl	8013e4c <iprintf>
      return NULL;
 8007260:	2300      	movs	r3, #0
 8007262:	e001      	b.n	8007268 <pbuf_alloc+0x1cc>
      break;
 8007264:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007268:	4618      	mov	r0, r3
 800726a:	3728      	adds	r7, #40	@ 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	080182f0 	.word	0x080182f0
 8007274:	08018320 	.word	0x08018320
 8007278:	08018350 	.word	0x08018350
 800727c:	08018378 	.word	0x08018378
 8007280:	080183ac 	.word	0x080183ac
 8007284:	080183d8 	.word	0x080183d8

08007288 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	807b      	strh	r3, [r7, #2]
 8007294:	4613      	mov	r3, r2
 8007296:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007298:	883b      	ldrh	r3, [r7, #0]
 800729a:	2b41      	cmp	r3, #65	@ 0x41
 800729c:	d009      	beq.n	80072b2 <pbuf_alloc_reference+0x2a>
 800729e:	883b      	ldrh	r3, [r7, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d006      	beq.n	80072b2 <pbuf_alloc_reference+0x2a>
 80072a4:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <pbuf_alloc_reference+0x5c>)
 80072a6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80072aa:	490f      	ldr	r1, [pc, #60]	@ (80072e8 <pbuf_alloc_reference+0x60>)
 80072ac:	480f      	ldr	r0, [pc, #60]	@ (80072ec <pbuf_alloc_reference+0x64>)
 80072ae:	f00c fdcd 	bl	8013e4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80072b2:	2007      	movs	r0, #7
 80072b4:	f7ff fae4 	bl	8006880 <memp_malloc>
 80072b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e00b      	b.n	80072dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80072c4:	8879      	ldrh	r1, [r7, #2]
 80072c6:	887a      	ldrh	r2, [r7, #2]
 80072c8:	2300      	movs	r3, #0
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	883b      	ldrh	r3, [r7, #0]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	460b      	mov	r3, r1
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff feb7 	bl	8007048 <pbuf_init_alloced_pbuf>
  return p;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	080182f0 	.word	0x080182f0
 80072e8:	080183f4 	.word	0x080183f4
 80072ec:	08018350 	.word	0x08018350

080072f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	460b      	mov	r3, r1
 80072fe:	81bb      	strh	r3, [r7, #12]
 8007300:	4613      	mov	r3, r2
 8007302:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007308:	8a7b      	ldrh	r3, [r7, #18]
 800730a:	3303      	adds	r3, #3
 800730c:	f023 0203 	bic.w	r2, r3, #3
 8007310:	89bb      	ldrh	r3, [r7, #12]
 8007312:	441a      	add	r2, r3
 8007314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007316:	429a      	cmp	r2, r3
 8007318:	d901      	bls.n	800731e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	e018      	b.n	8007350 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007324:	8a7b      	ldrh	r3, [r7, #18]
 8007326:	3303      	adds	r3, #3
 8007328:	f023 0303 	bic.w	r3, r3, #3
 800732c:	6a3a      	ldr	r2, [r7, #32]
 800732e:	4413      	add	r3, r2
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e001      	b.n	8007338 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	89b9      	ldrh	r1, [r7, #12]
 800733c:	89ba      	ldrh	r2, [r7, #12]
 800733e:	2302      	movs	r3, #2
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	897b      	ldrh	r3, [r7, #10]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	460b      	mov	r3, r1
 8007348:	6979      	ldr	r1, [r7, #20]
 800734a:	f7ff fe7d 	bl	8007048 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800734e:	687b      	ldr	r3, [r7, #4]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <pbuf_realloc+0x20>
 800736a:	4b3a      	ldr	r3, [pc, #232]	@ (8007454 <pbuf_realloc+0xfc>)
 800736c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007370:	4939      	ldr	r1, [pc, #228]	@ (8007458 <pbuf_realloc+0x100>)
 8007372:	483a      	ldr	r0, [pc, #232]	@ (800745c <pbuf_realloc+0x104>)
 8007374:	f00c fd6a 	bl	8013e4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	891b      	ldrh	r3, [r3, #8]
 800737c:	887a      	ldrh	r2, [r7, #2]
 800737e:	429a      	cmp	r2, r3
 8007380:	d263      	bcs.n	800744a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	891a      	ldrh	r2, [r3, #8]
 8007386:	887b      	ldrh	r3, [r7, #2]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800738c:	887b      	ldrh	r3, [r7, #2]
 800738e:	817b      	strh	r3, [r7, #10]
  q = p;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007394:	e018      	b.n	80073c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	895b      	ldrh	r3, [r3, #10]
 800739a:	897a      	ldrh	r2, [r7, #10]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	891a      	ldrh	r2, [r3, #8]
 80073a4:	893b      	ldrh	r3, [r7, #8]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <pbuf_realloc+0x70>
 80073ba:	4b26      	ldr	r3, [pc, #152]	@ (8007454 <pbuf_realloc+0xfc>)
 80073bc:	f240 12af 	movw	r2, #431	@ 0x1af
 80073c0:	4927      	ldr	r1, [pc, #156]	@ (8007460 <pbuf_realloc+0x108>)
 80073c2:	4826      	ldr	r0, [pc, #152]	@ (800745c <pbuf_realloc+0x104>)
 80073c4:	f00c fd42 	bl	8013e4c <iprintf>
  while (rem_len > q->len) {
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	895b      	ldrh	r3, [r3, #10]
 80073cc:	897a      	ldrh	r2, [r7, #10]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d8e1      	bhi.n	8007396 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	7b1b      	ldrb	r3, [r3, #12]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d121      	bne.n	8007422 <pbuf_realloc+0xca>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	895b      	ldrh	r3, [r3, #10]
 80073e2:	897a      	ldrh	r2, [r7, #10]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d01c      	beq.n	8007422 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	7b5b      	ldrb	r3, [r3, #13]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d116      	bne.n	8007422 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	897b      	ldrh	r3, [r7, #10]
 8007400:	4413      	add	r3, r2
 8007402:	b29b      	uxth	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7fe ff86 	bl	8006318 <mem_trim>
 800740c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <pbuf_realloc+0xca>
 8007414:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <pbuf_realloc+0xfc>)
 8007416:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800741a:	4912      	ldr	r1, [pc, #72]	@ (8007464 <pbuf_realloc+0x10c>)
 800741c:	480f      	ldr	r0, [pc, #60]	@ (800745c <pbuf_realloc+0x104>)
 800741e:	f00c fd15 	bl	8013e4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	897a      	ldrh	r2, [r7, #10]
 8007426:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	895a      	ldrh	r2, [r3, #10]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f000 f911 	bl	8007664 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	e000      	b.n	800744c <pbuf_realloc+0xf4>
    return;
 800744a:	bf00      	nop

}
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	080182f0 	.word	0x080182f0
 8007458:	08018408 	.word	0x08018408
 800745c:	08018350 	.word	0x08018350
 8007460:	08018420 	.word	0x08018420
 8007464:	08018438 	.word	0x08018438

08007468 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <pbuf_add_header_impl+0x22>
 800747c:	4b2b      	ldr	r3, [pc, #172]	@ (800752c <pbuf_add_header_impl+0xc4>)
 800747e:	f240 12df 	movw	r2, #479	@ 0x1df
 8007482:	492b      	ldr	r1, [pc, #172]	@ (8007530 <pbuf_add_header_impl+0xc8>)
 8007484:	482b      	ldr	r0, [pc, #172]	@ (8007534 <pbuf_add_header_impl+0xcc>)
 8007486:	f00c fce1 	bl	8013e4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <pbuf_add_header_impl+0x30>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007496:	d301      	bcc.n	800749c <pbuf_add_header_impl+0x34>
    return 1;
 8007498:	2301      	movs	r3, #1
 800749a:	e043      	b.n	8007524 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e03e      	b.n	8007524 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	891a      	ldrh	r2, [r3, #8]
 80074ae:	8a7b      	ldrh	r3, [r7, #18]
 80074b0:	4413      	add	r3, r2
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	8a7a      	ldrh	r2, [r7, #18]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d901      	bls.n	80074be <pbuf_add_header_impl+0x56>
    return 1;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e032      	b.n	8007524 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	7b1b      	ldrb	r3, [r3, #12]
 80074c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80074c4:	8a3b      	ldrh	r3, [r7, #16]
 80074c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00c      	beq.n	80074e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	425b      	negs	r3, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3310      	adds	r3, #16
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d20d      	bcs.n	8007500 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e01d      	b.n	8007524 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	425b      	negs	r3, r3
 80074f6:	4413      	add	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e001      	b.n	8007500 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e011      	b.n	8007524 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	895a      	ldrh	r2, [r3, #10]
 800750a:	8a7b      	ldrh	r3, [r7, #18]
 800750c:	4413      	add	r3, r2
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	891a      	ldrh	r2, [r3, #8]
 8007518:	8a7b      	ldrh	r3, [r7, #18]
 800751a:	4413      	add	r3, r2
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	811a      	strh	r2, [r3, #8]


  return 0;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	080182f0 	.word	0x080182f0
 8007530:	08018454 	.word	0x08018454
 8007534:	08018350 	.word	0x08018350

08007538 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007542:	2200      	movs	r2, #0
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff ff8e 	bl	8007468 <pbuf_add_header_impl>
 800754c:	4603      	mov	r3, r0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <pbuf_remove_header+0x1e>
 8007568:	4b20      	ldr	r3, [pc, #128]	@ (80075ec <pbuf_remove_header+0x94>)
 800756a:	f240 224b 	movw	r2, #587	@ 0x24b
 800756e:	4920      	ldr	r1, [pc, #128]	@ (80075f0 <pbuf_remove_header+0x98>)
 8007570:	4820      	ldr	r0, [pc, #128]	@ (80075f4 <pbuf_remove_header+0x9c>)
 8007572:	f00c fc6b 	bl	8013e4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <pbuf_remove_header+0x2c>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007582:	d301      	bcc.n	8007588 <pbuf_remove_header+0x30>
    return 1;
 8007584:	2301      	movs	r3, #1
 8007586:	e02c      	b.n	80075e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <pbuf_remove_header+0x3a>
    return 0;
 800758e:	2300      	movs	r3, #0
 8007590:	e027      	b.n	80075e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	895b      	ldrh	r3, [r3, #10]
 800759a:	89fa      	ldrh	r2, [r7, #14]
 800759c:	429a      	cmp	r2, r3
 800759e:	d908      	bls.n	80075b2 <pbuf_remove_header+0x5a>
 80075a0:	4b12      	ldr	r3, [pc, #72]	@ (80075ec <pbuf_remove_header+0x94>)
 80075a2:	f240 2255 	movw	r2, #597	@ 0x255
 80075a6:	4914      	ldr	r1, [pc, #80]	@ (80075f8 <pbuf_remove_header+0xa0>)
 80075a8:	4812      	ldr	r0, [pc, #72]	@ (80075f4 <pbuf_remove_header+0x9c>)
 80075aa:	f00c fc4f 	bl	8013e4c <iprintf>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e017      	b.n	80075e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	441a      	add	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	895a      	ldrh	r2, [r3, #10]
 80075c8:	89fb      	ldrh	r3, [r7, #14]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	891a      	ldrh	r2, [r3, #8]
 80075d6:	89fb      	ldrh	r3, [r7, #14]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	080182f0 	.word	0x080182f0
 80075f0:	08018454 	.word	0x08018454
 80075f4:	08018350 	.word	0x08018350
 80075f8:	08018460 	.word	0x08018460

080075fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
 8007608:	4613      	mov	r3, r2
 800760a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800760c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007610:	2b00      	cmp	r3, #0
 8007612:	da08      	bge.n	8007626 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007614:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007618:	425b      	negs	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff9b 	bl	8007558 <pbuf_remove_header>
 8007622:	4603      	mov	r3, r0
 8007624:	e007      	b.n	8007636 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007626:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800762a:	787a      	ldrb	r2, [r7, #1]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff1a 	bl	8007468 <pbuf_add_header_impl>
 8007634:	4603      	mov	r3, r0
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800764a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800764e:	2201      	movs	r2, #1
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ffd2 	bl	80075fc <pbuf_header_impl>
 8007658:	4603      	mov	r3, r0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <pbuf_free+0x22>
 8007678:	4b38      	ldr	r3, [pc, #224]	@ (800775c <pbuf_free+0xf8>)
 800767a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800767e:	4938      	ldr	r1, [pc, #224]	@ (8007760 <pbuf_free+0xfc>)
 8007680:	4838      	ldr	r0, [pc, #224]	@ (8007764 <pbuf_free+0x100>)
 8007682:	f00c fbe3 	bl	8013e4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007686:	2300      	movs	r3, #0
 8007688:	e063      	b.n	8007752 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800768e:	e05c      	b.n	800774a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	7b9b      	ldrb	r3, [r3, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <pbuf_free+0x42>
 8007698:	4b30      	ldr	r3, [pc, #192]	@ (800775c <pbuf_free+0xf8>)
 800769a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800769e:	4932      	ldr	r1, [pc, #200]	@ (8007768 <pbuf_free+0x104>)
 80076a0:	4830      	ldr	r0, [pc, #192]	@ (8007764 <pbuf_free+0x100>)
 80076a2:	f00c fbd3 	bl	8013e4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7b9b      	ldrb	r3, [r3, #14]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	739a      	strb	r2, [r3, #14]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7b9b      	ldrb	r3, [r3, #14]
 80076b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d143      	bne.n	8007746 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7b1b      	ldrb	r3, [r3, #12]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	7b5b      	ldrb	r3, [r3, #13]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <pbuf_free+0x90>
 80076e6:	4b1d      	ldr	r3, [pc, #116]	@ (800775c <pbuf_free+0xf8>)
 80076e8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80076ec:	491f      	ldr	r1, [pc, #124]	@ (800776c <pbuf_free+0x108>)
 80076ee:	481d      	ldr	r0, [pc, #116]	@ (8007764 <pbuf_free+0x100>)
 80076f0:	f00c fbac 	bl	8013e4c <iprintf>
        pc->custom_free_function(p);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
 80076fc:	e01d      	b.n	800773a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d104      	bne.n	800770e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	2008      	movs	r0, #8
 8007708:	f7ff f92a 	bl	8006960 <memp_free>
 800770c:	e015      	b.n	800773a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d104      	bne.n	800771e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	2007      	movs	r0, #7
 8007718:	f7ff f922 	bl	8006960 <memp_free>
 800771c:	e00d      	b.n	800773a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <pbuf_free+0xc8>
          mem_free(p);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7fe fd8d 	bl	8006244 <mem_free>
 800772a:	e006      	b.n	800773a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800772c:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <pbuf_free+0xf8>)
 800772e:	f240 320f 	movw	r2, #783	@ 0x30f
 8007732:	490f      	ldr	r1, [pc, #60]	@ (8007770 <pbuf_free+0x10c>)
 8007734:	480b      	ldr	r0, [pc, #44]	@ (8007764 <pbuf_free+0x100>)
 8007736:	f00c fb89 	bl	8013e4c <iprintf>
        }
      }
      count++;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	e001      	b.n	800774a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d19f      	bne.n	8007690 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	080182f0 	.word	0x080182f0
 8007760:	08018454 	.word	0x08018454
 8007764:	08018350 	.word	0x08018350
 8007768:	08018480 	.word	0x08018480
 800776c:	08018498 	.word	0x08018498
 8007770:	080184bc 	.word	0x080184bc

08007774 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007780:	e005      	b.n	800778e <pbuf_clen+0x1a>
    ++len;
 8007782:	89fb      	ldrh	r3, [r7, #14]
 8007784:	3301      	adds	r3, #1
 8007786:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f6      	bne.n	8007782 <pbuf_clen+0xe>
  }
  return len;
 8007794:	89fb      	ldrh	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
	...

080077a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	7b9b      	ldrb	r3, [r3, #14]
 80077b6:	3301      	adds	r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7b9b      	ldrb	r3, [r3, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <pbuf_ref+0x30>
 80077c6:	4b05      	ldr	r3, [pc, #20]	@ (80077dc <pbuf_ref+0x38>)
 80077c8:	f240 3242 	movw	r2, #834	@ 0x342
 80077cc:	4904      	ldr	r1, [pc, #16]	@ (80077e0 <pbuf_ref+0x3c>)
 80077ce:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <pbuf_ref+0x40>)
 80077d0:	f00c fb3c 	bl	8013e4c <iprintf>
  }
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	080182f0 	.word	0x080182f0
 80077e0:	080184d0 	.word	0x080184d0
 80077e4:	08018350 	.word	0x08018350

080077e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <pbuf_cat+0x16>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <pbuf_cat+0x26>
 80077fe:	4b20      	ldr	r3, [pc, #128]	@ (8007880 <pbuf_cat+0x98>)
 8007800:	f240 3259 	movw	r2, #857	@ 0x359
 8007804:	491f      	ldr	r1, [pc, #124]	@ (8007884 <pbuf_cat+0x9c>)
 8007806:	4820      	ldr	r0, [pc, #128]	@ (8007888 <pbuf_cat+0xa0>)
 8007808:	f00c fb20 	bl	8013e4c <iprintf>
 800780c:	e034      	b.n	8007878 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e00a      	b.n	800782a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	891a      	ldrh	r2, [r3, #8]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	891b      	ldrh	r3, [r3, #8]
 800781c:	4413      	add	r3, r2
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f0      	bne.n	8007814 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	891a      	ldrh	r2, [r3, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	895b      	ldrh	r3, [r3, #10]
 800783a:	429a      	cmp	r2, r3
 800783c:	d006      	beq.n	800784c <pbuf_cat+0x64>
 800783e:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <pbuf_cat+0x98>)
 8007840:	f240 3262 	movw	r2, #866	@ 0x362
 8007844:	4911      	ldr	r1, [pc, #68]	@ (800788c <pbuf_cat+0xa4>)
 8007846:	4810      	ldr	r0, [pc, #64]	@ (8007888 <pbuf_cat+0xa0>)
 8007848:	f00c fb00 	bl	8013e4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <pbuf_cat+0x7a>
 8007854:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <pbuf_cat+0x98>)
 8007856:	f240 3263 	movw	r2, #867	@ 0x363
 800785a:	490d      	ldr	r1, [pc, #52]	@ (8007890 <pbuf_cat+0xa8>)
 800785c:	480a      	ldr	r0, [pc, #40]	@ (8007888 <pbuf_cat+0xa0>)
 800785e:	f00c faf5 	bl	8013e4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	891a      	ldrh	r2, [r3, #8]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	891b      	ldrh	r3, [r3, #8]
 800786a:	4413      	add	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	080182f0 	.word	0x080182f0
 8007884:	080184e4 	.word	0x080184e4
 8007888:	08018350 	.word	0x08018350
 800788c:	0801851c 	.word	0x0801851c
 8007890:	0801854c 	.word	0x0801854c

08007894 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff ffa1 	bl	80077e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80078a6:	6838      	ldr	r0, [r7, #0]
 80078a8:	f7ff ff7c 	bl	80077a4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d008      	beq.n	80078de <pbuf_copy+0x2a>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <pbuf_copy+0x2a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	891a      	ldrh	r2, [r3, #8]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	891b      	ldrh	r3, [r3, #8]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d209      	bcs.n	80078f2 <pbuf_copy+0x3e>
 80078de:	4b57      	ldr	r3, [pc, #348]	@ (8007a3c <pbuf_copy+0x188>)
 80078e0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80078e4:	4956      	ldr	r1, [pc, #344]	@ (8007a40 <pbuf_copy+0x18c>)
 80078e6:	4857      	ldr	r0, [pc, #348]	@ (8007a44 <pbuf_copy+0x190>)
 80078e8:	f00c fab0 	bl	8013e4c <iprintf>
 80078ec:	f06f 030f 	mvn.w	r3, #15
 80078f0:	e09f      	b.n	8007a32 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	895b      	ldrh	r3, [r3, #10]
 80078f6:	461a      	mov	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	895b      	ldrh	r3, [r3, #10]
 8007900:	4619      	mov	r1, r3
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1acb      	subs	r3, r1, r3
 8007906:	429a      	cmp	r2, r3
 8007908:	d306      	bcc.n	8007918 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	895b      	ldrh	r3, [r3, #10]
 800790e:	461a      	mov	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e005      	b.n	8007924 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	895b      	ldrh	r3, [r3, #10]
 800791c:	461a      	mov	r2, r3
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	18d0      	adds	r0, r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	4413      	add	r3, r2
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4619      	mov	r1, r3
 8007938:	f00c fbbb 	bl	80140b2 <memcpy>
    offset_to += len;
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	895b      	ldrh	r3, [r3, #10]
 8007950:	461a      	mov	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4293      	cmp	r3, r2
 8007956:	d906      	bls.n	8007966 <pbuf_copy+0xb2>
 8007958:	4b38      	ldr	r3, [pc, #224]	@ (8007a3c <pbuf_copy+0x188>)
 800795a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800795e:	493a      	ldr	r1, [pc, #232]	@ (8007a48 <pbuf_copy+0x194>)
 8007960:	4838      	ldr	r0, [pc, #224]	@ (8007a44 <pbuf_copy+0x190>)
 8007962:	f00c fa73 	bl	8013e4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	895b      	ldrh	r3, [r3, #10]
 800796a:	461a      	mov	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4293      	cmp	r3, r2
 8007970:	d906      	bls.n	8007980 <pbuf_copy+0xcc>
 8007972:	4b32      	ldr	r3, [pc, #200]	@ (8007a3c <pbuf_copy+0x188>)
 8007974:	f240 32da 	movw	r2, #986	@ 0x3da
 8007978:	4934      	ldr	r1, [pc, #208]	@ (8007a4c <pbuf_copy+0x198>)
 800797a:	4832      	ldr	r0, [pc, #200]	@ (8007a44 <pbuf_copy+0x190>)
 800797c:	f00c fa66 	bl	8013e4c <iprintf>
    if (offset_from >= p_from->len) {
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	895b      	ldrh	r3, [r3, #10]
 8007984:	461a      	mov	r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4293      	cmp	r3, r2
 800798a:	d304      	bcc.n	8007996 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	895b      	ldrh	r3, [r3, #10]
 800799a:	461a      	mov	r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4293      	cmp	r3, r2
 80079a0:	d114      	bne.n	80079cc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10c      	bne.n	80079cc <pbuf_copy+0x118>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <pbuf_copy+0x118>
 80079b8:	4b20      	ldr	r3, [pc, #128]	@ (8007a3c <pbuf_copy+0x188>)
 80079ba:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80079be:	4924      	ldr	r1, [pc, #144]	@ (8007a50 <pbuf_copy+0x19c>)
 80079c0:	4820      	ldr	r0, [pc, #128]	@ (8007a44 <pbuf_copy+0x190>)
 80079c2:	f00c fa43 	bl	8013e4c <iprintf>
 80079c6:	f06f 030f 	mvn.w	r3, #15
 80079ca:	e032      	b.n	8007a32 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d013      	beq.n	80079fa <pbuf_copy+0x146>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	895a      	ldrh	r2, [r3, #10]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	891b      	ldrh	r3, [r3, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d10d      	bne.n	80079fa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <pbuf_copy+0x146>
 80079e6:	4b15      	ldr	r3, [pc, #84]	@ (8007a3c <pbuf_copy+0x188>)
 80079e8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80079ec:	4919      	ldr	r1, [pc, #100]	@ (8007a54 <pbuf_copy+0x1a0>)
 80079ee:	4815      	ldr	r0, [pc, #84]	@ (8007a44 <pbuf_copy+0x190>)
 80079f0:	f00c fa2c 	bl	8013e4c <iprintf>
 80079f4:	f06f 0305 	mvn.w	r3, #5
 80079f8:	e01b      	b.n	8007a32 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d013      	beq.n	8007a28 <pbuf_copy+0x174>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	895a      	ldrh	r2, [r3, #10]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	891b      	ldrh	r3, [r3, #8]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d10d      	bne.n	8007a28 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <pbuf_copy+0x174>
 8007a14:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <pbuf_copy+0x188>)
 8007a16:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007a1a:	490e      	ldr	r1, [pc, #56]	@ (8007a54 <pbuf_copy+0x1a0>)
 8007a1c:	4809      	ldr	r0, [pc, #36]	@ (8007a44 <pbuf_copy+0x190>)
 8007a1e:	f00c fa15 	bl	8013e4c <iprintf>
 8007a22:	f06f 0305 	mvn.w	r3, #5
 8007a26:	e004      	b.n	8007a32 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f47f af61 	bne.w	80078f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	080182f0 	.word	0x080182f0
 8007a40:	08018598 	.word	0x08018598
 8007a44:	08018350 	.word	0x08018350
 8007a48:	080185c8 	.word	0x080185c8
 8007a4c:	080185e0 	.word	0x080185e0
 8007a50:	080185fc 	.word	0x080185fc
 8007a54:	0801860c 	.word	0x0801860c

08007a58 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	80fb      	strh	r3, [r7, #6]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <pbuf_copy_partial+0x36>
 8007a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007b2c <pbuf_copy_partial+0xd4>)
 8007a7e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007a82:	492b      	ldr	r1, [pc, #172]	@ (8007b30 <pbuf_copy_partial+0xd8>)
 8007a84:	482b      	ldr	r0, [pc, #172]	@ (8007b34 <pbuf_copy_partial+0xdc>)
 8007a86:	f00c f9e1 	bl	8013e4c <iprintf>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e04a      	b.n	8007b24 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d108      	bne.n	8007aa6 <pbuf_copy_partial+0x4e>
 8007a94:	4b25      	ldr	r3, [pc, #148]	@ (8007b2c <pbuf_copy_partial+0xd4>)
 8007a96:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007a9a:	4927      	ldr	r1, [pc, #156]	@ (8007b38 <pbuf_copy_partial+0xe0>)
 8007a9c:	4825      	ldr	r0, [pc, #148]	@ (8007b34 <pbuf_copy_partial+0xdc>)
 8007a9e:	f00c f9d5 	bl	8013e4c <iprintf>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e03e      	b.n	8007b24 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e034      	b.n	8007b16 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007aac:	88bb      	ldrh	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <pbuf_copy_partial+0x70>
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	895b      	ldrh	r3, [r3, #10]
 8007ab6:	88ba      	ldrh	r2, [r7, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d305      	bcc.n	8007ac8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	895b      	ldrh	r3, [r3, #10]
 8007ac0:	88ba      	ldrh	r2, [r7, #4]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	80bb      	strh	r3, [r7, #4]
 8007ac6:	e023      	b.n	8007b10 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	895a      	ldrh	r2, [r3, #10]
 8007acc:	88bb      	ldrh	r3, [r7, #4]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007ad2:	8b3a      	ldrh	r2, [r7, #24]
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d901      	bls.n	8007ade <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ade:	8b7b      	ldrh	r3, [r7, #26]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	18d0      	adds	r0, r2, r3
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	88bb      	ldrh	r3, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	8b3a      	ldrh	r2, [r7, #24]
 8007aee:	4619      	mov	r1, r3
 8007af0:	f00c fadf 	bl	80140b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007af4:	8afa      	ldrh	r2, [r7, #22]
 8007af6:	8b3b      	ldrh	r3, [r7, #24]
 8007af8:	4413      	add	r3, r2
 8007afa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007afc:	8b7a      	ldrh	r2, [r7, #26]
 8007afe:	8b3b      	ldrh	r3, [r7, #24]
 8007b00:	4413      	add	r3, r2
 8007b02:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007b04:	88fa      	ldrh	r2, [r7, #6]
 8007b06:	8b3b      	ldrh	r3, [r7, #24]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	88fb      	ldrh	r3, [r7, #6]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <pbuf_copy_partial+0xca>
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1c4      	bne.n	8007aac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007b22:	8afb      	ldrh	r3, [r7, #22]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	080182f0 	.word	0x080182f0
 8007b30:	08018638 	.word	0x08018638
 8007b34:	08018350 	.word	0x08018350
 8007b38:	08018658 	.word	0x08018658

08007b3c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	460b      	mov	r3, r1
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8007b4a:	897b      	ldrh	r3, [r7, #10]
 8007b4c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007b52:	e007      	b.n	8007b64 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	895b      	ldrh	r3, [r3, #10]
 8007b58:	8afa      	ldrh	r2, [r7, #22]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <pbuf_skip_const+0x38>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	895b      	ldrh	r3, [r3, #10]
 8007b6e:	8afa      	ldrh	r2, [r7, #22]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d2ef      	bcs.n	8007b54 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8afa      	ldrh	r2, [r7, #22]
 8007b7e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8007b80:	693b      	ldr	r3, [r7, #16]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	603a      	str	r2, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	8919      	ldrh	r1, [r3, #8]
 8007ba4:	88ba      	ldrh	r2, [r7, #4]
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fa77 	bl	800709c <pbuf_alloc>
 8007bae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <pbuf_clone+0x2a>
    return NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e011      	b.n	8007bde <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff fe79 	bl	80078b4 <pbuf_copy>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007bc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <pbuf_clone+0x4c>
 8007bce:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <pbuf_clone+0x58>)
 8007bd0:	f240 5224 	movw	r2, #1316	@ 0x524
 8007bd4:	4905      	ldr	r1, [pc, #20]	@ (8007bec <pbuf_clone+0x5c>)
 8007bd6:	4806      	ldr	r0, [pc, #24]	@ (8007bf0 <pbuf_clone+0x60>)
 8007bd8:	f00c f938 	bl	8013e4c <iprintf>
  return q;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	080182f0 	.word	0x080182f0
 8007bec:	08018764 	.word	0x08018764
 8007bf0:	08018350 	.word	0x08018350

08007bf4 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007c00:	887b      	ldrh	r3, [r7, #2]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f80c 	bl	8007c22 <pbuf_try_get_at>
 8007c0a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	db02      	blt.n	8007c18 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	e000      	b.n	8007c1a <pbuf_get_at+0x26>
  }
  return 0;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007c2e:	f107 020a 	add.w	r2, r7, #10
 8007c32:	887b      	ldrh	r3, [r7, #2]
 8007c34:	4619      	mov	r1, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff80 	bl	8007b3c <pbuf_skip_const>
 8007c3c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <pbuf_try_get_at+0x38>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	895a      	ldrh	r2, [r3, #10]
 8007c48:	897b      	ldrh	r3, [r7, #10]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d905      	bls.n	8007c5a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	897a      	ldrh	r2, [r7, #10]
 8007c54:	4413      	add	r3, r2
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	e001      	b.n	8007c5e <pbuf_try_get_at+0x3c>
  }
  return -1;
 8007c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007c6c:	f00b f936 	bl	8012edc <rand>
 8007c70:	4603      	mov	r3, r0
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	4b01      	ldr	r3, [pc, #4]	@ (8007c88 <tcp_init+0x20>)
 8007c82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007c84:	bf00      	nop
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000030 	.word	0x20000030

08007c8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7d1b      	ldrb	r3, [r3, #20]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d105      	bne.n	8007ca8 <tcp_free+0x1c>
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <tcp_free+0x2c>)
 8007c9e:	22d4      	movs	r2, #212	@ 0xd4
 8007ca0:	4906      	ldr	r1, [pc, #24]	@ (8007cbc <tcp_free+0x30>)
 8007ca2:	4807      	ldr	r0, [pc, #28]	@ (8007cc0 <tcp_free+0x34>)
 8007ca4:	f00c f8d2 	bl	8013e4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	2001      	movs	r0, #1
 8007cac:	f7fe fe58 	bl	8006960 <memp_free>
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	080187f0 	.word	0x080187f0
 8007cbc:	08018820 	.word	0x08018820
 8007cc0:	08018834 	.word	0x08018834

08007cc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7d1b      	ldrb	r3, [r3, #20]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d105      	bne.n	8007ce0 <tcp_free_listen+0x1c>
 8007cd4:	4b06      	ldr	r3, [pc, #24]	@ (8007cf0 <tcp_free_listen+0x2c>)
 8007cd6:	22df      	movs	r2, #223	@ 0xdf
 8007cd8:	4906      	ldr	r1, [pc, #24]	@ (8007cf4 <tcp_free_listen+0x30>)
 8007cda:	4807      	ldr	r0, [pc, #28]	@ (8007cf8 <tcp_free_listen+0x34>)
 8007cdc:	f00c f8b6 	bl	8013e4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	2002      	movs	r0, #2
 8007ce4:	f7fe fe3c 	bl	8006960 <memp_free>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	080187f0 	.word	0x080187f0
 8007cf4:	0801885c 	.word	0x0801885c
 8007cf8:	08018834 	.word	0x08018834

08007cfc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007d00:	f001 f89a 	bl	8008e38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007d04:	4b07      	ldr	r3, [pc, #28]	@ (8007d24 <tcp_tmr+0x28>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <tcp_tmr+0x28>)
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	4b04      	ldr	r3, [pc, #16]	@ (8007d24 <tcp_tmr+0x28>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007d1c:	f000 fd4a 	bl	80087b4 <tcp_slowtmr>
  }
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20007fe9 	.word	0x20007fe9

08007d28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <tcp_remove_listener+0x1c>
 8007d38:	4b0d      	ldr	r3, [pc, #52]	@ (8007d70 <tcp_remove_listener+0x48>)
 8007d3a:	22ff      	movs	r2, #255	@ 0xff
 8007d3c:	490d      	ldr	r1, [pc, #52]	@ (8007d74 <tcp_remove_listener+0x4c>)
 8007d3e:	480e      	ldr	r0, [pc, #56]	@ (8007d78 <tcp_remove_listener+0x50>)
 8007d40:	f00c f884 	bl	8013e4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e00a      	b.n	8007d60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d102      	bne.n	8007d5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f1      	bne.n	8007d4a <tcp_remove_listener+0x22>
    }
  }
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	080187f0 	.word	0x080187f0
 8007d74:	08018878 	.word	0x08018878
 8007d78:	08018834 	.word	0x08018834

08007d7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <tcp_listen_closed+0x1c>
 8007d8a:	4b14      	ldr	r3, [pc, #80]	@ (8007ddc <tcp_listen_closed+0x60>)
 8007d8c:	f240 1211 	movw	r2, #273	@ 0x111
 8007d90:	4913      	ldr	r1, [pc, #76]	@ (8007de0 <tcp_listen_closed+0x64>)
 8007d92:	4814      	ldr	r0, [pc, #80]	@ (8007de4 <tcp_listen_closed+0x68>)
 8007d94:	f00c f85a 	bl	8013e4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7d1b      	ldrb	r3, [r3, #20]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d006      	beq.n	8007dae <tcp_listen_closed+0x32>
 8007da0:	4b0e      	ldr	r3, [pc, #56]	@ (8007ddc <tcp_listen_closed+0x60>)
 8007da2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007da6:	4910      	ldr	r1, [pc, #64]	@ (8007de8 <tcp_listen_closed+0x6c>)
 8007da8:	480e      	ldr	r0, [pc, #56]	@ (8007de4 <tcp_listen_closed+0x68>)
 8007daa:	f00c f84f 	bl	8013e4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007dae:	2301      	movs	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	e00b      	b.n	8007dcc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007db4:	4a0d      	ldr	r2, [pc, #52]	@ (8007dec <tcp_listen_closed+0x70>)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ffb1 	bl	8007d28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d9f0      	bls.n	8007db4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	080187f0 	.word	0x080187f0
 8007de0:	080188a0 	.word	0x080188a0
 8007de4:	08018834 	.word	0x08018834
 8007de8:	080188ac 	.word	0x080188ac
 8007dec:	0801abd8 	.word	0x0801abd8

08007df0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007df0:	b5b0      	push	{r4, r5, r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <tcp_close_shutdown+0x20>
 8007e02:	4b63      	ldr	r3, [pc, #396]	@ (8007f90 <tcp_close_shutdown+0x1a0>)
 8007e04:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007e08:	4962      	ldr	r1, [pc, #392]	@ (8007f94 <tcp_close_shutdown+0x1a4>)
 8007e0a:	4863      	ldr	r0, [pc, #396]	@ (8007f98 <tcp_close_shutdown+0x1a8>)
 8007e0c:	f00c f81e 	bl	8013e4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d066      	beq.n	8007ee4 <tcp_close_shutdown+0xf4>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7d1b      	ldrb	r3, [r3, #20]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d003      	beq.n	8007e26 <tcp_close_shutdown+0x36>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7d1b      	ldrb	r3, [r3, #20]
 8007e22:	2b07      	cmp	r3, #7
 8007e24:	d15e      	bne.n	8007ee4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <tcp_close_shutdown+0x48>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e36:	d055      	beq.n	8007ee4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8b5b      	ldrh	r3, [r3, #26]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <tcp_close_shutdown+0x62>
 8007e44:	4b52      	ldr	r3, [pc, #328]	@ (8007f90 <tcp_close_shutdown+0x1a0>)
 8007e46:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007e4a:	4954      	ldr	r1, [pc, #336]	@ (8007f9c <tcp_close_shutdown+0x1ac>)
 8007e4c:	4852      	ldr	r0, [pc, #328]	@ (8007f98 <tcp_close_shutdown+0x1a8>)
 8007e4e:	f00b fffd 	bl	8013e4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007e5a:	687d      	ldr	r5, [r7, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	8ad2      	ldrh	r2, [r2, #22]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	8b09      	ldrh	r1, [r1, #24]
 8007e68:	9102      	str	r1, [sp, #8]
 8007e6a:	9201      	str	r2, [sp, #4]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	462b      	mov	r3, r5
 8007e70:	4622      	mov	r2, r4
 8007e72:	4601      	mov	r1, r0
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f005 fd91 	bl	800d99c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fb74 	bl	8009568 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007e80:	4b47      	ldr	r3, [pc, #284]	@ (8007fa0 <tcp_close_shutdown+0x1b0>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d105      	bne.n	8007e96 <tcp_close_shutdown+0xa6>
 8007e8a:	4b45      	ldr	r3, [pc, #276]	@ (8007fa0 <tcp_close_shutdown+0x1b0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	4a43      	ldr	r2, [pc, #268]	@ (8007fa0 <tcp_close_shutdown+0x1b0>)
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	e013      	b.n	8007ebe <tcp_close_shutdown+0xce>
 8007e96:	4b42      	ldr	r3, [pc, #264]	@ (8007fa0 <tcp_close_shutdown+0x1b0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	e00c      	b.n	8007eb8 <tcp_close_shutdown+0xc8>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d104      	bne.n	8007eb2 <tcp_close_shutdown+0xc2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	60da      	str	r2, [r3, #12]
 8007eb0:	e005      	b.n	8007ebe <tcp_close_shutdown+0xce>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1ef      	bne.n	8007e9e <tcp_close_shutdown+0xae>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	4b37      	ldr	r3, [pc, #220]	@ (8007fa4 <tcp_close_shutdown+0x1b4>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007eca:	4b37      	ldr	r3, [pc, #220]	@ (8007fa8 <tcp_close_shutdown+0x1b8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d102      	bne.n	8007eda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007ed4:	f004 f808 	bl	800bee8 <tcp_trigger_input_pcb_close>
 8007ed8:	e002      	b.n	8007ee0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fed6 	bl	8007c8c <tcp_free>
      }
      return ERR_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e050      	b.n	8007f86 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7d1b      	ldrb	r3, [r3, #20]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d03b      	beq.n	8007f64 <tcp_close_shutdown+0x174>
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	dc44      	bgt.n	8007f7a <tcp_close_shutdown+0x18a>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <tcp_close_shutdown+0x10a>
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d02a      	beq.n	8007f4e <tcp_close_shutdown+0x15e>
 8007ef8:	e03f      	b.n	8007f7a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8adb      	ldrh	r3, [r3, #22]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d021      	beq.n	8007f46 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007f02:	4b2a      	ldr	r3, [pc, #168]	@ (8007fac <tcp_close_shutdown+0x1bc>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d105      	bne.n	8007f18 <tcp_close_shutdown+0x128>
 8007f0c:	4b27      	ldr	r3, [pc, #156]	@ (8007fac <tcp_close_shutdown+0x1bc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	4a26      	ldr	r2, [pc, #152]	@ (8007fac <tcp_close_shutdown+0x1bc>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e013      	b.n	8007f40 <tcp_close_shutdown+0x150>
 8007f18:	4b24      	ldr	r3, [pc, #144]	@ (8007fac <tcp_close_shutdown+0x1bc>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	e00c      	b.n	8007f3a <tcp_close_shutdown+0x14a>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d104      	bne.n	8007f34 <tcp_close_shutdown+0x144>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68da      	ldr	r2, [r3, #12]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e005      	b.n	8007f40 <tcp_close_shutdown+0x150>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	60bb      	str	r3, [r7, #8]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1ef      	bne.n	8007f20 <tcp_close_shutdown+0x130>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fea0 	bl	8007c8c <tcp_free>
      break;
 8007f4c:	e01a      	b.n	8007f84 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff ff14 	bl	8007d7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	4816      	ldr	r0, [pc, #88]	@ (8007fb0 <tcp_close_shutdown+0x1c0>)
 8007f58:	f001 fb56 	bl	8009608 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff feb1 	bl	8007cc4 <tcp_free_listen>
      break;
 8007f62:	e00f      	b.n	8007f84 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	480e      	ldr	r0, [pc, #56]	@ (8007fa0 <tcp_close_shutdown+0x1b0>)
 8007f68:	f001 fb4e 	bl	8009608 <tcp_pcb_remove>
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa4 <tcp_close_shutdown+0x1b4>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fe8a 	bl	8007c8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007f78:	e004      	b.n	8007f84 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f81a 	bl	8007fb4 <tcp_close_shutdown_fin>
 8007f80:	4603      	mov	r3, r0
 8007f82:	e000      	b.n	8007f86 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	080187f0 	.word	0x080187f0
 8007f94:	080188c4 	.word	0x080188c4
 8007f98:	08018834 	.word	0x08018834
 8007f9c:	080188e4 	.word	0x080188e4
 8007fa0:	20007fe0 	.word	0x20007fe0
 8007fa4:	20007fe8 	.word	0x20007fe8
 8007fa8:	20008020 	.word	0x20008020
 8007fac:	20007fd8 	.word	0x20007fd8
 8007fb0:	20007fdc 	.word	0x20007fdc

08007fb4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <tcp_close_shutdown_fin+0x1c>
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800807c <tcp_close_shutdown_fin+0xc8>)
 8007fc4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007fc8:	492d      	ldr	r1, [pc, #180]	@ (8008080 <tcp_close_shutdown_fin+0xcc>)
 8007fca:	482e      	ldr	r0, [pc, #184]	@ (8008084 <tcp_close_shutdown_fin+0xd0>)
 8007fcc:	f00b ff3e 	bl	8013e4c <iprintf>

  switch (pcb->state) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7d1b      	ldrb	r3, [r3, #20]
 8007fd4:	2b07      	cmp	r3, #7
 8007fd6:	d020      	beq.n	800801a <tcp_close_shutdown_fin+0x66>
 8007fd8:	2b07      	cmp	r3, #7
 8007fda:	dc2b      	bgt.n	8008034 <tcp_close_shutdown_fin+0x80>
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d002      	beq.n	8007fe6 <tcp_close_shutdown_fin+0x32>
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d00d      	beq.n	8008000 <tcp_close_shutdown_fin+0x4c>
 8007fe4:	e026      	b.n	8008034 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f004 fde6 	bl	800cbb8 <tcp_send_fin>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11f      	bne.n	8008038 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2205      	movs	r2, #5
 8007ffc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007ffe:	e01b      	b.n	8008038 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f004 fdd9 	bl	800cbb8 <tcp_send_fin>
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800800a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d114      	bne.n	800803c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2205      	movs	r2, #5
 8008016:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008018:	e010      	b.n	800803c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f004 fdcc 	bl	800cbb8 <tcp_send_fin>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2209      	movs	r2, #9
 8008030:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008032:	e005      	b.n	8008040 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e01c      	b.n	8008072 <tcp_close_shutdown_fin+0xbe>
      break;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <tcp_close_shutdown_fin+0x8e>
      break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <tcp_close_shutdown_fin+0x8e>
      break;
 8008040:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f004 fef2 	bl	800ce34 <tcp_output>
 8008050:	e00d      	b.n	800806e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d108      	bne.n	800806e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8b5b      	ldrh	r3, [r3, #26]
 8008060:	f043 0308 	orr.w	r3, r3, #8
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e001      	b.n	8008072 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800806e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	080187f0 	.word	0x080187f0
 8008080:	080188a0 	.word	0x080188a0
 8008084:	08018834 	.word	0x08018834

08008088 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <tcp_close+0x22>
 8008096:	4b0f      	ldr	r3, [pc, #60]	@ (80080d4 <tcp_close+0x4c>)
 8008098:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800809c:	490e      	ldr	r1, [pc, #56]	@ (80080d8 <tcp_close+0x50>)
 800809e:	480f      	ldr	r0, [pc, #60]	@ (80080dc <tcp_close+0x54>)
 80080a0:	f00b fed4 	bl	8013e4c <iprintf>
 80080a4:	f06f 030f 	mvn.w	r3, #15
 80080a8:	e00f      	b.n	80080ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7d1b      	ldrb	r3, [r3, #20]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d006      	beq.n	80080c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	8b5b      	ldrh	r3, [r3, #26]
 80080b6:	f043 0310 	orr.w	r3, r3, #16
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80080c0:	2101      	movs	r1, #1
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7ff fe94 	bl	8007df0 <tcp_close_shutdown>
 80080c8:	4603      	mov	r3, r0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	080187f0 	.word	0x080187f0
 80080d8:	08018900 	.word	0x08018900
 80080dc:	08018834 	.word	0x08018834

080080e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08e      	sub	sp, #56	@ 0x38
 80080e4:	af04      	add	r7, sp, #16
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <tcp_abandon+0x20>
 80080f0:	4b52      	ldr	r3, [pc, #328]	@ (800823c <tcp_abandon+0x15c>)
 80080f2:	f240 223d 	movw	r2, #573	@ 0x23d
 80080f6:	4952      	ldr	r1, [pc, #328]	@ (8008240 <tcp_abandon+0x160>)
 80080f8:	4852      	ldr	r0, [pc, #328]	@ (8008244 <tcp_abandon+0x164>)
 80080fa:	f00b fea7 	bl	8013e4c <iprintf>
 80080fe:	e099      	b.n	8008234 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	7d1b      	ldrb	r3, [r3, #20]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d106      	bne.n	8008116 <tcp_abandon+0x36>
 8008108:	4b4c      	ldr	r3, [pc, #304]	@ (800823c <tcp_abandon+0x15c>)
 800810a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800810e:	494e      	ldr	r1, [pc, #312]	@ (8008248 <tcp_abandon+0x168>)
 8008110:	484c      	ldr	r0, [pc, #304]	@ (8008244 <tcp_abandon+0x164>)
 8008112:	f00b fe9b 	bl	8013e4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7d1b      	ldrb	r3, [r3, #20]
 800811a:	2b0a      	cmp	r3, #10
 800811c:	d107      	bne.n	800812e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	484a      	ldr	r0, [pc, #296]	@ (800824c <tcp_abandon+0x16c>)
 8008122:	f001 fa71 	bl	8009608 <tcp_pcb_remove>
    tcp_free(pcb);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fdb0 	bl	8007c8c <tcp_free>
 800812c:	e082      	b.n	8008234 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008132:	2300      	movs	r3, #0
 8008134:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008148:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7d1b      	ldrb	r3, [r3, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d126      	bne.n	80081a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8adb      	ldrh	r3, [r3, #22]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d02e      	beq.n	80081be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008160:	4b3b      	ldr	r3, [pc, #236]	@ (8008250 <tcp_abandon+0x170>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d105      	bne.n	8008176 <tcp_abandon+0x96>
 800816a:	4b39      	ldr	r3, [pc, #228]	@ (8008250 <tcp_abandon+0x170>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4a37      	ldr	r2, [pc, #220]	@ (8008250 <tcp_abandon+0x170>)
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	e013      	b.n	800819e <tcp_abandon+0xbe>
 8008176:	4b36      	ldr	r3, [pc, #216]	@ (8008250 <tcp_abandon+0x170>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	e00c      	b.n	8008198 <tcp_abandon+0xb8>
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d104      	bne.n	8008192 <tcp_abandon+0xb2>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	60da      	str	r2, [r3, #12]
 8008190:	e005      	b.n	800819e <tcp_abandon+0xbe>
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1ef      	bne.n	800817e <tcp_abandon+0x9e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	60da      	str	r2, [r3, #12]
 80081a4:	e00b      	b.n	80081be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8adb      	ldrh	r3, [r3, #22]
 80081ae:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4828      	ldr	r0, [pc, #160]	@ (8008254 <tcp_abandon+0x174>)
 80081b4:	f001 fa28 	bl	8009608 <tcp_pcb_remove>
 80081b8:	4b27      	ldr	r3, [pc, #156]	@ (8008258 <tcp_abandon+0x178>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 ff14 	bl	8008ff8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 ff0b 	bl	8008ff8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d004      	beq.n	80081f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 ff02 	bl	8008ff8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	8b12      	ldrh	r2, [r2, #24]
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	460b      	mov	r3, r1
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	69b9      	ldr	r1, [r7, #24]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f005 fbc2 	bl	800d99c <tcp_rst>
    }
    last_state = pcb->state;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7d1b      	ldrb	r3, [r3, #20]
 800821c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fd34 	bl	8007c8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <tcp_abandon+0x154>
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f06f 010c 	mvn.w	r1, #12
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	4798      	blx	r3
  }
}
 8008234:	3728      	adds	r7, #40	@ 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	080187f0 	.word	0x080187f0
 8008240:	08018934 	.word	0x08018934
 8008244:	08018834 	.word	0x08018834
 8008248:	08018950 	.word	0x08018950
 800824c:	20007fe4 	.word	0x20007fe4
 8008250:	20007fd8 	.word	0x20007fd8
 8008254:	20007fe0 	.word	0x20007fe0
 8008258:	20007fe8 	.word	0x20007fe8

0800825c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008264:	2101      	movs	r1, #1
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff ff3a 	bl	80080e0 <tcp_abandon>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008282:	2304      	movs	r3, #4
 8008284:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800828c:	4b3e      	ldr	r3, [pc, #248]	@ (8008388 <tcp_bind+0x114>)
 800828e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d109      	bne.n	80082aa <tcp_bind+0x36>
 8008296:	4b3d      	ldr	r3, [pc, #244]	@ (800838c <tcp_bind+0x118>)
 8008298:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800829c:	493c      	ldr	r1, [pc, #240]	@ (8008390 <tcp_bind+0x11c>)
 800829e:	483d      	ldr	r0, [pc, #244]	@ (8008394 <tcp_bind+0x120>)
 80082a0:	f00b fdd4 	bl	8013e4c <iprintf>
 80082a4:	f06f 030f 	mvn.w	r3, #15
 80082a8:	e06a      	b.n	8008380 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	7d1b      	ldrb	r3, [r3, #20]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <tcp_bind+0x52>
 80082b2:	4b36      	ldr	r3, [pc, #216]	@ (800838c <tcp_bind+0x118>)
 80082b4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80082b8:	4937      	ldr	r1, [pc, #220]	@ (8008398 <tcp_bind+0x124>)
 80082ba:	4836      	ldr	r0, [pc, #216]	@ (8008394 <tcp_bind+0x120>)
 80082bc:	f00b fdc6 	bl	8013e4c <iprintf>
 80082c0:	f06f 0305 	mvn.w	r3, #5
 80082c4:	e05c      	b.n	8008380 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80082cc:	f000 f914 	bl	80084f8 <tcp_new_port>
 80082d0:	4603      	mov	r3, r0
 80082d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d135      	bne.n	8008346 <tcp_bind+0xd2>
      return ERR_BUF;
 80082da:	f06f 0301 	mvn.w	r3, #1
 80082de:	e04f      	b.n	8008380 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
 80082e4:	e02b      	b.n	800833e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80082e6:	4a2d      	ldr	r2, [pc, #180]	@ (800839c <tcp_bind+0x128>)
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	61bb      	str	r3, [r7, #24]
 80082f2:	e01e      	b.n	8008332 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	8adb      	ldrh	r3, [r3, #22]
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d116      	bne.n	800832c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80082fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008300:	2b00      	cmp	r3, #0
 8008302:	d010      	beq.n	8008326 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <tcp_bind+0xb2>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008322:	429a      	cmp	r2, r3
 8008324:	d102      	bne.n	800832c <tcp_bind+0xb8>
              return ERR_USE;
 8008326:	f06f 0307 	mvn.w	r3, #7
 800832a:	e029      	b.n	8008380 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1dd      	bne.n	80082f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	429a      	cmp	r2, r3
 8008344:	dbcf      	blt.n	80082e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <tcp_bind+0xf2>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <tcp_bind+0xec>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	e000      	b.n	8008362 <tcp_bind+0xee>
 8008360:	2300      	movs	r3, #0
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	88fa      	ldrh	r2, [r7, #6]
 800836a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800836c:	4b0c      	ldr	r3, [pc, #48]	@ (80083a0 <tcp_bind+0x12c>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	4a0a      	ldr	r2, [pc, #40]	@ (80083a0 <tcp_bind+0x12c>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	f005 fccf 	bl	800dd1c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	0801ac10 	.word	0x0801ac10
 800838c:	080187f0 	.word	0x080187f0
 8008390:	08018984 	.word	0x08018984
 8008394:	08018834 	.word	0x08018834
 8008398:	0801899c 	.word	0x0801899c
 800839c:	0801abd8 	.word	0x0801abd8
 80083a0:	20007fd8 	.word	0x20007fd8

080083a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <tcp_update_rcv_ann_wnd+0x1c>
 80083b2:	4b25      	ldr	r3, [pc, #148]	@ (8008448 <tcp_update_rcv_ann_wnd+0xa4>)
 80083b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80083b8:	4924      	ldr	r1, [pc, #144]	@ (800844c <tcp_update_rcv_ann_wnd+0xa8>)
 80083ba:	4825      	ldr	r0, [pc, #148]	@ (8008450 <tcp_update_rcv_ann_wnd+0xac>)
 80083bc:	f00b fd46 	bl	8013e4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80083c8:	4413      	add	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80083d4:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80083d8:	bf28      	it	cs
 80083da:	f44f 6200 	movcs.w	r2, #2048	@ 0x800
 80083de:	b292      	uxth	r2, r2
 80083e0:	4413      	add	r3, r2
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db08      	blt.n	80083fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	e020      	b.n	800843e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	dd03      	ble.n	8008412 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008410:	e014      	b.n	800843c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008424:	d306      	bcc.n	8008434 <tcp_update_rcv_ann_wnd+0x90>
 8008426:	4b08      	ldr	r3, [pc, #32]	@ (8008448 <tcp_update_rcv_ann_wnd+0xa4>)
 8008428:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800842c:	4909      	ldr	r1, [pc, #36]	@ (8008454 <tcp_update_rcv_ann_wnd+0xb0>)
 800842e:	4808      	ldr	r0, [pc, #32]	@ (8008450 <tcp_update_rcv_ann_wnd+0xac>)
 8008430:	f00b fd0c 	bl	8013e4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800843c:	2300      	movs	r3, #0
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	080187f0 	.word	0x080187f0
 800844c:	08018a4c 	.word	0x08018a4c
 8008450:	08018834 	.word	0x08018834
 8008454:	08018a70 	.word	0x08018a70

08008458 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d107      	bne.n	800847a <tcp_recved+0x22>
 800846a:	4b1f      	ldr	r3, [pc, #124]	@ (80084e8 <tcp_recved+0x90>)
 800846c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008470:	491e      	ldr	r1, [pc, #120]	@ (80084ec <tcp_recved+0x94>)
 8008472:	481f      	ldr	r0, [pc, #124]	@ (80084f0 <tcp_recved+0x98>)
 8008474:	f00b fcea 	bl	8013e4c <iprintf>
 8008478:	e032      	b.n	80084e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7d1b      	ldrb	r3, [r3, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d106      	bne.n	8008490 <tcp_recved+0x38>
 8008482:	4b19      	ldr	r3, [pc, #100]	@ (80084e8 <tcp_recved+0x90>)
 8008484:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008488:	491a      	ldr	r1, [pc, #104]	@ (80084f4 <tcp_recved+0x9c>)
 800848a:	4819      	ldr	r0, [pc, #100]	@ (80084f0 <tcp_recved+0x98>)
 800848c:	f00b fcde 	bl	8013e4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008494:	887b      	ldrh	r3, [r7, #2]
 8008496:	4413      	add	r3, r2
 8008498:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084a0:	d804      	bhi.n	80084ac <tcp_recved+0x54>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084a6:	89fa      	ldrh	r2, [r7, #14]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d204      	bcs.n	80084b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80084b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80084b4:	e002      	b.n	80084bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	89fa      	ldrh	r2, [r7, #14]
 80084ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff ff71 	bl	80083a4 <tcp_update_rcv_ann_wnd>
 80084c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ca:	d309      	bcc.n	80084e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8b5b      	ldrh	r3, [r3, #26]
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f004 fcaa 	bl	800ce34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	080187f0 	.word	0x080187f0
 80084ec:	08018a8c 	.word	0x08018a8c
 80084f0:	08018834 	.word	0x08018834
 80084f4:	08018aa4 	.word	0x08018aa4

080084f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008502:	4b1e      	ldr	r3, [pc, #120]	@ (800857c <tcp_new_port+0x84>)
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	4b1c      	ldr	r3, [pc, #112]	@ (800857c <tcp_new_port+0x84>)
 800850c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800850e:	4b1b      	ldr	r3, [pc, #108]	@ (800857c <tcp_new_port+0x84>)
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008516:	4293      	cmp	r3, r2
 8008518:	d103      	bne.n	8008522 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800851a:	4b18      	ldr	r3, [pc, #96]	@ (800857c <tcp_new_port+0x84>)
 800851c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008520:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008522:	2300      	movs	r3, #0
 8008524:	71fb      	strb	r3, [r7, #7]
 8008526:	e01e      	b.n	8008566 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <tcp_new_port+0x88>)
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	e011      	b.n	800855a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	8ada      	ldrh	r2, [r3, #22]
 800853a:	4b10      	ldr	r3, [pc, #64]	@ (800857c <tcp_new_port+0x84>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	d108      	bne.n	8008554 <tcp_new_port+0x5c>
        n++;
 8008542:	88bb      	ldrh	r3, [r7, #4]
 8008544:	3301      	adds	r3, #1
 8008546:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008548:	88bb      	ldrh	r3, [r7, #4]
 800854a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800854e:	d3d8      	bcc.n	8008502 <tcp_new_port+0xa>
          return 0;
 8008550:	2300      	movs	r3, #0
 8008552:	e00d      	b.n	8008570 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	603b      	str	r3, [r7, #0]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1ea      	bne.n	8008536 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	3301      	adds	r3, #1
 8008564:	71fb      	strb	r3, [r7, #7]
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	2b03      	cmp	r3, #3
 800856a:	d9dd      	bls.n	8008528 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800856c:	4b03      	ldr	r3, [pc, #12]	@ (800857c <tcp_new_port+0x84>)
 800856e:	881b      	ldrh	r3, [r3, #0]
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000030 	.word	0x20000030
 8008580:	0801abd8 	.word	0x0801abd8

08008584 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08a      	sub	sp, #40	@ 0x28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	603b      	str	r3, [r7, #0]
 8008590:	4613      	mov	r3, r2
 8008592:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <tcp_connect+0x2e>
 800859e:	4b7d      	ldr	r3, [pc, #500]	@ (8008794 <tcp_connect+0x210>)
 80085a0:	f240 4235 	movw	r2, #1077	@ 0x435
 80085a4:	497c      	ldr	r1, [pc, #496]	@ (8008798 <tcp_connect+0x214>)
 80085a6:	487d      	ldr	r0, [pc, #500]	@ (800879c <tcp_connect+0x218>)
 80085a8:	f00b fc50 	bl	8013e4c <iprintf>
 80085ac:	f06f 030f 	mvn.w	r3, #15
 80085b0:	e0ec      	b.n	800878c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d109      	bne.n	80085cc <tcp_connect+0x48>
 80085b8:	4b76      	ldr	r3, [pc, #472]	@ (8008794 <tcp_connect+0x210>)
 80085ba:	f240 4236 	movw	r2, #1078	@ 0x436
 80085be:	4978      	ldr	r1, [pc, #480]	@ (80087a0 <tcp_connect+0x21c>)
 80085c0:	4876      	ldr	r0, [pc, #472]	@ (800879c <tcp_connect+0x218>)
 80085c2:	f00b fc43 	bl	8013e4c <iprintf>
 80085c6:	f06f 030f 	mvn.w	r3, #15
 80085ca:	e0df      	b.n	800878c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	7d1b      	ldrb	r3, [r3, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d009      	beq.n	80085e8 <tcp_connect+0x64>
 80085d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008794 <tcp_connect+0x210>)
 80085d6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80085da:	4972      	ldr	r1, [pc, #456]	@ (80087a4 <tcp_connect+0x220>)
 80085dc:	486f      	ldr	r0, [pc, #444]	@ (800879c <tcp_connect+0x218>)
 80085de:	f00b fc35 	bl	8013e4c <iprintf>
 80085e2:	f06f 0309 	mvn.w	r3, #9
 80085e6:	e0d1      	b.n	800878c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <tcp_connect+0x70>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	e000      	b.n	80085f6 <tcp_connect+0x72>
 80085f4:	2300      	movs	r3, #0
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	88fa      	ldrh	r2, [r7, #6]
 80085fe:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	7a1b      	ldrb	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d006      	beq.n	8008616 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7a1b      	ldrb	r3, [r3, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fcc9 	bl	8006fa4 <netif_get_by_index>
 8008612:	6278      	str	r0, [r7, #36]	@ 0x24
 8008614:	e005      	b.n	8008622 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3304      	adds	r3, #4
 800861a:	4618      	mov	r0, r3
 800861c:	f009 f92a 	bl	8011874 <ip4_route>
 8008620:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d102      	bne.n	800862e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8008628:	f06f 0303 	mvn.w	r3, #3
 800862c:	e0ae      	b.n	800878c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <tcp_connect+0xb8>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d111      	bne.n	8008660 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <tcp_connect+0xc4>
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	3304      	adds	r3, #4
 8008646:	e000      	b.n	800864a <tcp_connect+0xc6>
 8008648:	2300      	movs	r3, #0
 800864a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d102      	bne.n	8008658 <tcp_connect+0xd4>
      return ERR_RTE;
 8008652:	f06f 0303 	mvn.w	r3, #3
 8008656:	e099      	b.n	800878c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8adb      	ldrh	r3, [r3, #22]
 8008664:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8adb      	ldrh	r3, [r3, #22]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10c      	bne.n	8008688 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800866e:	f7ff ff43 	bl	80084f8 <tcp_new_port>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8adb      	ldrh	r3, [r3, #22]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <tcp_connect+0x104>
      return ERR_BUF;
 8008682:	f06f 0301 	mvn.w	r3, #1
 8008686:	e081      	b.n	800878c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f001 f851 	bl	8009730 <tcp_next_iss>
 800868e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	1e5a      	subs	r2, r3, #1
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80086dc:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3304      	adds	r3, #4
 80086e6:	461a      	mov	r2, r3
 80086e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086ea:	f001 f847 	bl	800977c <tcp_eff_send_mss_netif>
 80086ee:	4603      	mov	r3, r0
 80086f0:	461a      	mov	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8008706:	2102      	movs	r1, #2
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f004 faa5 	bl	800cc58 <tcp_enqueue_flags>
 800870e:	4603      	mov	r3, r0
 8008710:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8008712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d136      	bne.n	8008788 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2202      	movs	r2, #2
 800871e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008720:	8b7b      	ldrh	r3, [r7, #26]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d021      	beq.n	800876a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008726:	4b20      	ldr	r3, [pc, #128]	@ (80087a8 <tcp_connect+0x224>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	429a      	cmp	r2, r3
 800872e:	d105      	bne.n	800873c <tcp_connect+0x1b8>
 8008730:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <tcp_connect+0x224>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <tcp_connect+0x224>)
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e013      	b.n	8008764 <tcp_connect+0x1e0>
 800873c:	4b1a      	ldr	r3, [pc, #104]	@ (80087a8 <tcp_connect+0x224>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	e00c      	b.n	800875e <tcp_connect+0x1da>
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	429a      	cmp	r2, r3
 800874c:	d104      	bne.n	8008758 <tcp_connect+0x1d4>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e005      	b.n	8008764 <tcp_connect+0x1e0>
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	623b      	str	r3, [r7, #32]
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1ef      	bne.n	8008744 <tcp_connect+0x1c0>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800876a:	4b10      	ldr	r3, [pc, #64]	@ (80087ac <tcp_connect+0x228>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	60da      	str	r2, [r3, #12]
 8008772:	4a0e      	ldr	r2, [pc, #56]	@ (80087ac <tcp_connect+0x228>)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	f005 fad0 	bl	800dd1c <tcp_timer_needed>
 800877c:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <tcp_connect+0x22c>)
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f004 fb56 	bl	800ce34 <tcp_output>
  }
  return ret;
 8008788:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3728      	adds	r7, #40	@ 0x28
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	080187f0 	.word	0x080187f0
 8008798:	08018acc 	.word	0x08018acc
 800879c:	08018834 	.word	0x08018834
 80087a0:	08018ae8 	.word	0x08018ae8
 80087a4:	08018b04 	.word	0x08018b04
 80087a8:	20007fd8 	.word	0x20007fd8
 80087ac:	20007fe0 	.word	0x20007fe0
 80087b0:	20007fe8 	.word	0x20007fe8

080087b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80087b4:	b5b0      	push	{r4, r5, r7, lr}
 80087b6:	b090      	sub	sp, #64	@ 0x40
 80087b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80087c0:	4b95      	ldr	r3, [pc, #596]	@ (8008a18 <tcp_slowtmr+0x264>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	4a94      	ldr	r2, [pc, #592]	@ (8008a18 <tcp_slowtmr+0x264>)
 80087c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80087ca:	4b94      	ldr	r3, [pc, #592]	@ (8008a1c <tcp_slowtmr+0x268>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	4b92      	ldr	r3, [pc, #584]	@ (8008a1c <tcp_slowtmr+0x268>)
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e000      	b.n	80087da <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80087d8:	bf00      	nop
  prev = NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80087de:	4b90      	ldr	r3, [pc, #576]	@ (8008a20 <tcp_slowtmr+0x26c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80087e4:	e29d      	b.n	8008d22 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	7d1b      	ldrb	r3, [r3, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <tcp_slowtmr+0x48>
 80087ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008a24 <tcp_slowtmr+0x270>)
 80087f0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80087f4:	498c      	ldr	r1, [pc, #560]	@ (8008a28 <tcp_slowtmr+0x274>)
 80087f6:	488d      	ldr	r0, [pc, #564]	@ (8008a2c <tcp_slowtmr+0x278>)
 80087f8:	f00b fb28 	bl	8013e4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80087fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fe:	7d1b      	ldrb	r3, [r3, #20]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <tcp_slowtmr+0x5e>
 8008804:	4b87      	ldr	r3, [pc, #540]	@ (8008a24 <tcp_slowtmr+0x270>)
 8008806:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800880a:	4989      	ldr	r1, [pc, #548]	@ (8008a30 <tcp_slowtmr+0x27c>)
 800880c:	4887      	ldr	r0, [pc, #540]	@ (8008a2c <tcp_slowtmr+0x278>)
 800880e:	f00b fb1d 	bl	8013e4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008814:	7d1b      	ldrb	r3, [r3, #20]
 8008816:	2b0a      	cmp	r3, #10
 8008818:	d106      	bne.n	8008828 <tcp_slowtmr+0x74>
 800881a:	4b82      	ldr	r3, [pc, #520]	@ (8008a24 <tcp_slowtmr+0x270>)
 800881c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008820:	4984      	ldr	r1, [pc, #528]	@ (8008a34 <tcp_slowtmr+0x280>)
 8008822:	4882      	ldr	r0, [pc, #520]	@ (8008a2c <tcp_slowtmr+0x278>)
 8008824:	f00b fb12 	bl	8013e4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	7f9a      	ldrb	r2, [r3, #30]
 800882c:	4b7b      	ldr	r3, [pc, #492]	@ (8008a1c <tcp_slowtmr+0x268>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d105      	bne.n	8008840 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008836:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800883e:	e270      	b.n	8008d22 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008840:	4b76      	ldr	r3, [pc, #472]	@ (8008a1c <tcp_slowtmr+0x268>)
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008846:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008856:	7d1b      	ldrb	r3, [r3, #20]
 8008858:	2b02      	cmp	r3, #2
 800885a:	d10a      	bne.n	8008872 <tcp_slowtmr+0xbe>
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008862:	2b05      	cmp	r3, #5
 8008864:	d905      	bls.n	8008872 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800886a:	3301      	adds	r3, #1
 800886c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008870:	e11e      	b.n	8008ab0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008878:	2b0b      	cmp	r3, #11
 800887a:	d905      	bls.n	8008888 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800887c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008880:	3301      	adds	r3, #1
 8008882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008886:	e113      	b.n	8008ab0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800888e:	2b00      	cmp	r3, #0
 8008890:	d075      	beq.n	800897e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008896:	2b00      	cmp	r3, #0
 8008898:	d006      	beq.n	80088a8 <tcp_slowtmr+0xf4>
 800889a:	4b62      	ldr	r3, [pc, #392]	@ (8008a24 <tcp_slowtmr+0x270>)
 800889c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80088a0:	4965      	ldr	r1, [pc, #404]	@ (8008a38 <tcp_slowtmr+0x284>)
 80088a2:	4862      	ldr	r0, [pc, #392]	@ (8008a2c <tcp_slowtmr+0x278>)
 80088a4:	f00b fad2 	bl	8013e4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <tcp_slowtmr+0x10a>
 80088b0:	4b5c      	ldr	r3, [pc, #368]	@ (8008a24 <tcp_slowtmr+0x270>)
 80088b2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80088b6:	4961      	ldr	r1, [pc, #388]	@ (8008a3c <tcp_slowtmr+0x288>)
 80088b8:	485c      	ldr	r0, [pc, #368]	@ (8008a2c <tcp_slowtmr+0x278>)
 80088ba:	f00b fac7 	bl	8013e4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80088be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	d905      	bls.n	80088d4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80088c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088cc:	3301      	adds	r3, #1
 80088ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088d2:	e0ed      	b.n	8008ab0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80088d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80088da:	3b01      	subs	r3, #1
 80088dc:	4a58      	ldr	r2, [pc, #352]	@ (8008a40 <tcp_slowtmr+0x28c>)
 80088de:	5cd3      	ldrb	r3, [r2, r3]
 80088e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80088e8:	7c7a      	ldrb	r2, [r7, #17]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d907      	bls.n	80088fe <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80088f4:	3301      	adds	r3, #1
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008904:	7c7a      	ldrb	r2, [r7, #17]
 8008906:	429a      	cmp	r2, r3
 8008908:	f200 80d2 	bhi.w	8008ab0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800890c:	2301      	movs	r3, #1
 800890e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008916:	2b00      	cmp	r3, #0
 8008918:	d108      	bne.n	800892c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800891a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800891c:	f005 f930 	bl	800db80 <tcp_zero_window_probe>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d014      	beq.n	8008950 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8008926:	2300      	movs	r3, #0
 8008928:	623b      	str	r3, [r7, #32]
 800892a:	e011      	b.n	8008950 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008932:	4619      	mov	r1, r3
 8008934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008936:	f003 fff7 	bl	800c928 <tcp_split_unsent_seg>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d107      	bne.n	8008950 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008942:	f004 fa77 	bl	800ce34 <tcp_output>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80ac 	beq.w	8008ab0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008966:	2b06      	cmp	r3, #6
 8008968:	f200 80a2 	bhi.w	8008ab0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008972:	3301      	adds	r3, #1
 8008974:	b2da      	uxtb	r2, r3
 8008976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008978:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800897c:	e098      	b.n	8008ab0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	db0f      	blt.n	80089a8 <tcp_slowtmr+0x1f4>
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800898e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008992:	4293      	cmp	r3, r2
 8008994:	d008      	beq.n	80089a8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008998:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800899c:	b29b      	uxth	r3, r3
 800899e:	3301      	adds	r3, #1
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	b21a      	sxth	r2, r3
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80089ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80089b4:	429a      	cmp	r2, r3
 80089b6:	db7b      	blt.n	8008ab0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80089b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089ba:	f004 fd2f 	bl	800d41c <tcp_rexmit_rto_prepare>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <tcp_slowtmr+0x220>
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d171      	bne.n	8008ab0 <tcp_slowtmr+0x2fc>
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d06d      	beq.n	8008ab0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	7d1b      	ldrb	r3, [r3, #20]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d03a      	beq.n	8008a52 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089e2:	2b0c      	cmp	r3, #12
 80089e4:	bf28      	it	cs
 80089e6:	230c      	movcs	r3, #12
 80089e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80089ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089f0:	10db      	asrs	r3, r3, #3
 80089f2:	b21b      	sxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80089fc:	4413      	add	r3, r2
 80089fe:	7efa      	ldrb	r2, [r7, #27]
 8008a00:	4910      	ldr	r1, [pc, #64]	@ (8008a44 <tcp_slowtmr+0x290>)
 8008a02:	5c8a      	ldrb	r2, [r1, r2]
 8008a04:	4093      	lsls	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	dc1a      	bgt.n	8008a48 <tcp_slowtmr+0x294>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	b21a      	sxth	r2, r3
 8008a16:	e019      	b.n	8008a4c <tcp_slowtmr+0x298>
 8008a18:	20007fd4 	.word	0x20007fd4
 8008a1c:	20007fea 	.word	0x20007fea
 8008a20:	20007fe0 	.word	0x20007fe0
 8008a24:	080187f0 	.word	0x080187f0
 8008a28:	08018b34 	.word	0x08018b34
 8008a2c:	08018834 	.word	0x08018834
 8008a30:	08018b60 	.word	0x08018b60
 8008a34:	08018b8c 	.word	0x08018b8c
 8008a38:	08018bbc 	.word	0x08018bbc
 8008a3c:	08018bf0 	.word	0x08018bf0
 8008a40:	0801abd0 	.word	0x0801abd0
 8008a44:	0801abc0 	.word	0x0801abc0
 8008a48:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2200      	movs	r2, #0
 8008a56:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a64:	4293      	cmp	r3, r2
 8008a66:	bf28      	it	cs
 8008a68:	4613      	movcs	r3, r2
 8008a6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008a6c:	8a7b      	ldrh	r3, [r7, #18]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d206      	bcs.n	8008a98 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008aaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008aac:	f004 fd26 	bl	800d4fc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	7d1b      	ldrb	r3, [r3, #20]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d111      	bne.n	8008adc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aba:	8b5b      	ldrh	r3, [r3, #26]
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00b      	beq.n	8008adc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aca:	6a1b      	ldr	r3, [r3, #32]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b28      	cmp	r3, #40	@ 0x28
 8008ad0:	d904      	bls.n	8008adc <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	7a5b      	ldrb	r3, [r3, #9]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d04a      	beq.n	8008b7e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	d003      	beq.n	8008af8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d142      	bne.n	8008b7e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008af8:	4b8f      	ldr	r3, [pc, #572]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b04:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b08:	4b8c      	ldr	r3, [pc, #560]	@ (8008d3c <tcp_slowtmr+0x588>)
 8008b0a:	440b      	add	r3, r1
 8008b0c:	498c      	ldr	r1, [pc, #560]	@ (8008d40 <tcp_slowtmr+0x58c>)
 8008b0e:	fba1 1303 	umull	r1, r3, r1, r3
 8008b12:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d90a      	bls.n	8008b2e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008b22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b26:	3301      	adds	r3, #1
 8008b28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b2c:	e027      	b.n	8008b7e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b2e:	4b82      	ldr	r3, [pc, #520]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b40:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008b44:	4618      	mov	r0, r3
 8008b46:	4b7f      	ldr	r3, [pc, #508]	@ (8008d44 <tcp_slowtmr+0x590>)
 8008b48:	fb00 f303 	mul.w	r3, r0, r3
 8008b4c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008b4e:	497c      	ldr	r1, [pc, #496]	@ (8008d40 <tcp_slowtmr+0x58c>)
 8008b50:	fba1 1303 	umull	r1, r3, r1, r3
 8008b54:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d911      	bls.n	8008b7e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008b5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b5c:	f004 ffd0 	bl	800db00 <tcp_keepalive>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008b66:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d107      	bne.n	8008b7e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008b74:	3301      	adds	r3, #1
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d011      	beq.n	8008baa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008b86:	4b6c      	ldr	r3, [pc, #432]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008b96:	4619      	mov	r1, r3
 8008b98:	460b      	mov	r3, r1
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	440b      	add	r3, r1
 8008b9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d302      	bcc.n	8008baa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008ba4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ba6:	f000 fe93 	bl	80098d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bac:	7d1b      	ldrb	r3, [r3, #20]
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d10b      	bne.n	8008bca <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bb2:	4b61      	ldr	r3, [pc, #388]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b28      	cmp	r3, #40	@ 0x28
 8008bbe:	d904      	bls.n	8008bca <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bcc:	7d1b      	ldrb	r3, [r3, #20]
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d10b      	bne.n	8008bea <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008bd2:	4b59      	ldr	r3, [pc, #356]	@ (8008d38 <tcp_slowtmr+0x584>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	2bf0      	cmp	r3, #240	@ 0xf0
 8008bde:	d904      	bls.n	8008bea <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008be4:	3301      	adds	r3, #1
 8008be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d060      	beq.n	8008cb4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bfc:	f000 fcb4 	bl	8009568 <tcp_pcb_purge>
      if (prev != NULL) {
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d010      	beq.n	8008c28 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c06:	4b50      	ldr	r3, [pc, #320]	@ (8008d48 <tcp_slowtmr+0x594>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d106      	bne.n	8008c1e <tcp_slowtmr+0x46a>
 8008c10:	4b4e      	ldr	r3, [pc, #312]	@ (8008d4c <tcp_slowtmr+0x598>)
 8008c12:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008c16:	494e      	ldr	r1, [pc, #312]	@ (8008d50 <tcp_slowtmr+0x59c>)
 8008c18:	484e      	ldr	r0, [pc, #312]	@ (8008d54 <tcp_slowtmr+0x5a0>)
 8008c1a:	f00b f917 	bl	8013e4c <iprintf>
        prev->next = pcb->next;
 8008c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	60da      	str	r2, [r3, #12]
 8008c26:	e00f      	b.n	8008c48 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c28:	4b47      	ldr	r3, [pc, #284]	@ (8008d48 <tcp_slowtmr+0x594>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d006      	beq.n	8008c40 <tcp_slowtmr+0x48c>
 8008c32:	4b46      	ldr	r3, [pc, #280]	@ (8008d4c <tcp_slowtmr+0x598>)
 8008c34:	f240 5271 	movw	r2, #1393	@ 0x571
 8008c38:	4947      	ldr	r1, [pc, #284]	@ (8008d58 <tcp_slowtmr+0x5a4>)
 8008c3a:	4846      	ldr	r0, [pc, #280]	@ (8008d54 <tcp_slowtmr+0x5a0>)
 8008c3c:	f00b f906 	bl	8013e4c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	4a40      	ldr	r2, [pc, #256]	@ (8008d48 <tcp_slowtmr+0x594>)
 8008c46:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008c48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d013      	beq.n	8008c78 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c52:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c56:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c58:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c60:	8ad2      	ldrh	r2, [r2, #22]
 8008c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c64:	8b09      	ldrh	r1, [r1, #24]
 8008c66:	9102      	str	r1, [sp, #8]
 8008c68:	9201      	str	r2, [sp, #4]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	4622      	mov	r2, r4
 8008c70:	4601      	mov	r1, r0
 8008c72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c74:	f004 fe92 	bl	800d99c <tcp_rst>
      err_arg = pcb->callback_arg;
 8008c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	7d1b      	ldrb	r3, [r3, #20]
 8008c82:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008c8e:	6838      	ldr	r0, [r7, #0]
 8008c90:	f7fe fffc 	bl	8007c8c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008c94:	4b31      	ldr	r3, [pc, #196]	@ (8008d5c <tcp_slowtmr+0x5a8>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <tcp_slowtmr+0x4f6>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f06f 010c 	mvn.w	r1, #12
 8008ca6:	68b8      	ldr	r0, [r7, #8]
 8008ca8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008caa:	4b2c      	ldr	r3, [pc, #176]	@ (8008d5c <tcp_slowtmr+0x5a8>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d037      	beq.n	8008d22 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008cb2:	e592      	b.n	80087da <tcp_slowtmr+0x26>
      prev = pcb;
 8008cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc0:	7f1b      	ldrb	r3, [r3, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ccc:	7f1a      	ldrb	r2, [r3, #28]
 8008cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd0:	7f5b      	ldrb	r3, [r3, #29]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d325      	bcc.n	8008d22 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd8:	2200      	movs	r2, #0
 8008cda:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d5c <tcp_slowtmr+0x5a8>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <tcp_slowtmr+0x550>
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cf4:	6912      	ldr	r2, [r2, #16]
 8008cf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008d02:	e002      	b.n	8008d0a <tcp_slowtmr+0x556>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008d0a:	4b14      	ldr	r3, [pc, #80]	@ (8008d5c <tcp_slowtmr+0x5a8>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f47f ad62 	bne.w	80087d8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d14:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d102      	bne.n	8008d22 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d1e:	f004 f889 	bl	800ce34 <tcp_output>
  while (pcb != NULL) {
 8008d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f47f ad5e 	bne.w	80087e6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d60 <tcp_slowtmr+0x5ac>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008d34:	e069      	b.n	8008e0a <tcp_slowtmr+0x656>
 8008d36:	bf00      	nop
 8008d38:	20007fd4 	.word	0x20007fd4
 8008d3c:	000a4cb8 	.word	0x000a4cb8
 8008d40:	10624dd3 	.word	0x10624dd3
 8008d44:	000124f8 	.word	0x000124f8
 8008d48:	20007fe0 	.word	0x20007fe0
 8008d4c:	080187f0 	.word	0x080187f0
 8008d50:	08018c28 	.word	0x08018c28
 8008d54:	08018834 	.word	0x08018834
 8008d58:	08018c54 	.word	0x08018c54
 8008d5c:	20007fe8 	.word	0x20007fe8
 8008d60:	20007fe4 	.word	0x20007fe4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d66:	7d1b      	ldrb	r3, [r3, #20]
 8008d68:	2b0a      	cmp	r3, #10
 8008d6a:	d006      	beq.n	8008d7a <tcp_slowtmr+0x5c6>
 8008d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8008e1c <tcp_slowtmr+0x668>)
 8008d6e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008d72:	492b      	ldr	r1, [pc, #172]	@ (8008e20 <tcp_slowtmr+0x66c>)
 8008d74:	482b      	ldr	r0, [pc, #172]	@ (8008e24 <tcp_slowtmr+0x670>)
 8008d76:	f00b f869 	bl	8013e4c <iprintf>
    pcb_remove = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008d80:	4b29      	ldr	r3, [pc, #164]	@ (8008e28 <tcp_slowtmr+0x674>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2bf0      	cmp	r3, #240	@ 0xf0
 8008d8c:	d904      	bls.n	8008d98 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d92:	3301      	adds	r3, #1
 8008d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02f      	beq.n	8008e00 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008da0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008da2:	f000 fbe1 	bl	8009568 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d010      	beq.n	8008dce <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008dac:	4b1f      	ldr	r3, [pc, #124]	@ (8008e2c <tcp_slowtmr+0x678>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d106      	bne.n	8008dc4 <tcp_slowtmr+0x610>
 8008db6:	4b19      	ldr	r3, [pc, #100]	@ (8008e1c <tcp_slowtmr+0x668>)
 8008db8:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008dbc:	491c      	ldr	r1, [pc, #112]	@ (8008e30 <tcp_slowtmr+0x67c>)
 8008dbe:	4819      	ldr	r0, [pc, #100]	@ (8008e24 <tcp_slowtmr+0x670>)
 8008dc0:	f00b f844 	bl	8013e4c <iprintf>
        prev->next = pcb->next;
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	60da      	str	r2, [r3, #12]
 8008dcc:	e00f      	b.n	8008dee <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008dce:	4b17      	ldr	r3, [pc, #92]	@ (8008e2c <tcp_slowtmr+0x678>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d006      	beq.n	8008de6 <tcp_slowtmr+0x632>
 8008dd8:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <tcp_slowtmr+0x668>)
 8008dda:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008dde:	4915      	ldr	r1, [pc, #84]	@ (8008e34 <tcp_slowtmr+0x680>)
 8008de0:	4810      	ldr	r0, [pc, #64]	@ (8008e24 <tcp_slowtmr+0x670>)
 8008de2:	f00b f833 	bl	8013e4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	4a10      	ldr	r2, [pc, #64]	@ (8008e2c <tcp_slowtmr+0x678>)
 8008dec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008df8:	69f8      	ldr	r0, [r7, #28]
 8008dfa:	f7fe ff47 	bl	8007c8c <tcp_free>
 8008dfe:	e004      	b.n	8008e0a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1a9      	bne.n	8008d64 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	3730      	adds	r7, #48	@ 0x30
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bdb0      	pop	{r4, r5, r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	080187f0 	.word	0x080187f0
 8008e20:	08018c80 	.word	0x08018c80
 8008e24:	08018834 	.word	0x08018834
 8008e28:	20007fd4 	.word	0x20007fd4
 8008e2c:	20007fe4 	.word	0x20007fe4
 8008e30:	08018cb0 	.word	0x08018cb0
 8008e34:	08018cd8 	.word	0x08018cd8

08008e38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ef4 <tcp_fasttmr+0xbc>)
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef4 <tcp_fasttmr+0xbc>)
 8008e48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef8 <tcp_fasttmr+0xc0>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008e50:	e048      	b.n	8008ee4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7f9a      	ldrb	r2, [r3, #30]
 8008e56:	4b27      	ldr	r3, [pc, #156]	@ (8008ef4 <tcp_fasttmr+0xbc>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d03f      	beq.n	8008ede <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008e5e:	4b25      	ldr	r3, [pc, #148]	@ (8008ef4 <tcp_fasttmr+0xbc>)
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	8b5b      	ldrh	r3, [r3, #26]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8b5b      	ldrh	r3, [r3, #26]
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f003 ffd7 	bl	800ce34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8b5b      	ldrh	r3, [r3, #26]
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8b5b      	ldrh	r3, [r3, #26]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	8b5b      	ldrh	r3, [r3, #26]
 8008ea4:	f023 0308 	bic.w	r3, r3, #8
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff f880 	bl	8007fb4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8008efc <tcp_fasttmr+0xc4>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f819 	bl	8008f00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008ece:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <tcp_fasttmr+0xc4>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d000      	beq.n	8008ed8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008ed6:	e7b8      	b.n	8008e4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	e002      	b.n	8008ee4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1b3      	bne.n	8008e52 <tcp_fasttmr+0x1a>
    }
  }
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20007fea 	.word	0x20007fea
 8008ef8:	20007fe0 	.word	0x20007fe0
 8008efc:	20007fe8 	.word	0x20007fe8

08008f00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f00:	b590      	push	{r4, r7, lr}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <tcp_process_refused_data+0x22>
 8008f0e:	4b37      	ldr	r3, [pc, #220]	@ (8008fec <tcp_process_refused_data+0xec>)
 8008f10:	f240 6209 	movw	r2, #1545	@ 0x609
 8008f14:	4936      	ldr	r1, [pc, #216]	@ (8008ff0 <tcp_process_refused_data+0xf0>)
 8008f16:	4837      	ldr	r0, [pc, #220]	@ (8008ff4 <tcp_process_refused_data+0xf4>)
 8008f18:	f00a ff98 	bl	8013e4c <iprintf>
 8008f1c:	f06f 030f 	mvn.w	r3, #15
 8008f20:	e060      	b.n	8008fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f26:	7b5b      	ldrb	r3, [r3, #13]
 8008f28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00b      	beq.n	8008f58 <tcp_process_refused_data+0x58>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6918      	ldr	r0, [r3, #16]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	47a0      	blx	r4
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
 8008f56:	e007      	b.n	8008f68 <tcp_process_refused_data+0x68>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f000 f8a4 	bl	80090ac <tcp_recv_null>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d12a      	bne.n	8008fc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d033      	beq.n	8008fe2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f82:	d005      	beq.n	8008f90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f88:	3301      	adds	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <tcp_process_refused_data+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6918      	ldr	r0, [r3, #16]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	47a0      	blx	r4
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
 8008fb0:	e001      	b.n	8008fb6 <tcp_process_refused_data+0xb6>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fba:	f113 0f0d 	cmn.w	r3, #13
 8008fbe:	d110      	bne.n	8008fe2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008fc0:	f06f 030c 	mvn.w	r3, #12
 8008fc4:	e00e      	b.n	8008fe4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fca:	f113 0f0d 	cmn.w	r3, #13
 8008fce:	d102      	bne.n	8008fd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008fd0:	f06f 030c 	mvn.w	r3, #12
 8008fd4:	e006      	b.n	8008fe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008fdc:	f06f 0304 	mvn.w	r3, #4
 8008fe0:	e000      	b.n	8008fe4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd90      	pop	{r4, r7, pc}
 8008fec:	080187f0 	.word	0x080187f0
 8008ff0:	08018d00 	.word	0x08018d00
 8008ff4:	08018834 	.word	0x08018834

08008ff8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009000:	e007      	b.n	8009012 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f80a 	bl	8009022 <tcp_seg_free>
    seg = next;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1f4      	bne.n	8009002 <tcp_segs_free+0xa>
  }
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fb11 	bl	8007664 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	2003      	movs	r0, #3
 8009046:	f7fd fc8b 	bl	8006960 <memp_free>
  }
}
 800904a:	bf00      	nop
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d106      	bne.n	8009070 <tcp_seg_copy+0x1c>
 8009062:	4b0f      	ldr	r3, [pc, #60]	@ (80090a0 <tcp_seg_copy+0x4c>)
 8009064:	f240 6282 	movw	r2, #1666	@ 0x682
 8009068:	490e      	ldr	r1, [pc, #56]	@ (80090a4 <tcp_seg_copy+0x50>)
 800906a:	480f      	ldr	r0, [pc, #60]	@ (80090a8 <tcp_seg_copy+0x54>)
 800906c:	f00a feee 	bl	8013e4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009070:	2003      	movs	r0, #3
 8009072:	f7fd fc05 	bl	8006880 <memp_malloc>
 8009076:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <tcp_seg_copy+0x2e>
    return NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	e00a      	b.n	8009098 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009082:	2210      	movs	r2, #16
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f00b f813 	bl	80140b2 <memcpy>
  pbuf_ref(cseg->p);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fb87 	bl	80077a4 <pbuf_ref>
  return cseg;
 8009096:	68fb      	ldr	r3, [r7, #12]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	080187f0 	.word	0x080187f0
 80090a4:	08018d44 	.word	0x08018d44
 80090a8:	08018834 	.word	0x08018834

080090ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d109      	bne.n	80090d4 <tcp_recv_null+0x28>
 80090c0:	4b12      	ldr	r3, [pc, #72]	@ (800910c <tcp_recv_null+0x60>)
 80090c2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80090c6:	4912      	ldr	r1, [pc, #72]	@ (8009110 <tcp_recv_null+0x64>)
 80090c8:	4812      	ldr	r0, [pc, #72]	@ (8009114 <tcp_recv_null+0x68>)
 80090ca:	f00a febf 	bl	8013e4c <iprintf>
 80090ce:	f06f 030f 	mvn.w	r3, #15
 80090d2:	e016      	b.n	8009102 <tcp_recv_null+0x56>

  if (p != NULL) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	891b      	ldrh	r3, [r3, #8]
 80090de:	4619      	mov	r1, r3
 80090e0:	68b8      	ldr	r0, [r7, #8]
 80090e2:	f7ff f9b9 	bl	8008458 <tcp_recved>
    pbuf_free(p);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7fe fabc 	bl	8007664 <pbuf_free>
 80090ec:	e008      	b.n	8009100 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80090ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80090f6:	68b8      	ldr	r0, [r7, #8]
 80090f8:	f7fe ffc6 	bl	8008088 <tcp_close>
 80090fc:	4603      	mov	r3, r0
 80090fe:	e000      	b.n	8009102 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	080187f0 	.word	0x080187f0
 8009110:	08018d60 	.word	0x08018d60
 8009114:	08018834 	.word	0x08018834

08009118 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	db01      	blt.n	800912e <tcp_kill_prio+0x16>
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	e000      	b.n	8009130 <tcp_kill_prio+0x18>
 800912e:	237f      	movs	r3, #127	@ 0x7f
 8009130:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d034      	beq.n	80091a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	3b01      	subs	r3, #1
 800913c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009146:	4b19      	ldr	r3, [pc, #100]	@ (80091ac <tcp_kill_prio+0x94>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e01f      	b.n	800918e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	7d5b      	ldrb	r3, [r3, #21]
 8009152:	7afa      	ldrb	r2, [r7, #11]
 8009154:	429a      	cmp	r2, r3
 8009156:	d80c      	bhi.n	8009172 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800915c:	7afa      	ldrb	r2, [r7, #11]
 800915e:	429a      	cmp	r2, r3
 8009160:	d112      	bne.n	8009188 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <tcp_kill_prio+0x98>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	429a      	cmp	r2, r3
 8009170:	d80a      	bhi.n	8009188 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009172:	4b0f      	ldr	r3, [pc, #60]	@ (80091b0 <tcp_kill_prio+0x98>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	7d5b      	ldrb	r3, [r3, #21]
 8009186:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1dc      	bne.n	800914e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800919a:	6938      	ldr	r0, [r7, #16]
 800919c:	f7ff f85e 	bl	800825c <tcp_abort>
 80091a0:	e000      	b.n	80091a4 <tcp_kill_prio+0x8c>
    return;
 80091a2:	bf00      	nop
  }
}
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20007fe0 	.word	0x20007fe0
 80091b0:	20007fd4 	.word	0x20007fd4

080091b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d009      	beq.n	80091d8 <tcp_kill_state+0x24>
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d006      	beq.n	80091d8 <tcp_kill_state+0x24>
 80091ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009234 <tcp_kill_state+0x80>)
 80091cc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80091d0:	4919      	ldr	r1, [pc, #100]	@ (8009238 <tcp_kill_state+0x84>)
 80091d2:	481a      	ldr	r0, [pc, #104]	@ (800923c <tcp_kill_state+0x88>)
 80091d4:	f00a fe3a 	bl	8013e4c <iprintf>

  inactivity = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091e0:	4b17      	ldr	r3, [pc, #92]	@ (8009240 <tcp_kill_state+0x8c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	617b      	str	r3, [r7, #20]
 80091e6:	e017      	b.n	8009218 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	7d1b      	ldrb	r3, [r3, #20]
 80091ec:	79fa      	ldrb	r2, [r7, #7]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d10f      	bne.n	8009212 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80091f2:	4b14      	ldr	r3, [pc, #80]	@ (8009244 <tcp_kill_state+0x90>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d807      	bhi.n	8009212 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009202:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <tcp_kill_state+0x90>)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e4      	bne.n	80091e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009224:	2100      	movs	r1, #0
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f7fe ff5a 	bl	80080e0 <tcp_abandon>
  }
}
 800922c:	bf00      	nop
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	080187f0 	.word	0x080187f0
 8009238:	08018d7c 	.word	0x08018d7c
 800923c:	08018834 	.word	0x08018834
 8009240:	20007fe0 	.word	0x20007fe0
 8009244:	20007fd4 	.word	0x20007fd4

08009248 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009256:	4b12      	ldr	r3, [pc, #72]	@ (80092a0 <tcp_kill_timewait+0x58>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e012      	b.n	8009284 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800925e:	4b11      	ldr	r3, [pc, #68]	@ (80092a4 <tcp_kill_timewait+0x5c>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	429a      	cmp	r2, r3
 800926c:	d807      	bhi.n	800927e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <tcp_kill_timewait+0x5c>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e9      	bne.n	800925e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009290:	68b8      	ldr	r0, [r7, #8]
 8009292:	f7fe ffe3 	bl	800825c <tcp_abort>
  }
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20007fe4 	.word	0x20007fe4
 80092a4:	20007fd4 	.word	0x20007fd4

080092a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80092ae:	4b10      	ldr	r3, [pc, #64]	@ (80092f0 <tcp_handle_closepend+0x48>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80092b4:	e014      	b.n	80092e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8b5b      	ldrh	r3, [r3, #26]
 80092c0:	f003 0308 	and.w	r3, r3, #8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d009      	beq.n	80092dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8b5b      	ldrh	r3, [r3, #26]
 80092cc:	f023 0308 	bic.w	r3, r3, #8
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7fe fe6c 	bl	8007fb4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e7      	bne.n	80092b6 <tcp_handle_closepend+0xe>
  }
}
 80092e6:	bf00      	nop
 80092e8:	bf00      	nop
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20007fe0 	.word	0x20007fe0

080092f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092fe:	2001      	movs	r0, #1
 8009300:	f7fd fabe 	bl	8006880 <memp_malloc>
 8009304:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d126      	bne.n	800935a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800930c:	f7ff ffcc 	bl	80092a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009310:	f7ff ff9a 	bl	8009248 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009314:	2001      	movs	r0, #1
 8009316:	f7fd fab3 	bl	8006880 <memp_malloc>
 800931a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d11b      	bne.n	800935a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009322:	2009      	movs	r0, #9
 8009324:	f7ff ff46 	bl	80091b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009328:	2001      	movs	r0, #1
 800932a:	f7fd faa9 	bl	8006880 <memp_malloc>
 800932e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d111      	bne.n	800935a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009336:	2008      	movs	r0, #8
 8009338:	f7ff ff3c 	bl	80091b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800933c:	2001      	movs	r0, #1
 800933e:	f7fd fa9f 	bl	8006880 <memp_malloc>
 8009342:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d107      	bne.n	800935a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff fee3 	bl	8009118 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009352:	2001      	movs	r0, #1
 8009354:	f7fd fa94 	bl	8006880 <memp_malloc>
 8009358:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d03f      	beq.n	80093e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009360:	229c      	movs	r2, #156	@ 0x9c
 8009362:	2100      	movs	r1, #0
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f00a fe12 	bl	8013f8e <memset>
    pcb->prio = prio;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	79fa      	ldrb	r2, [r7, #7]
 800936e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009376:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009380:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	22ff      	movs	r2, #255	@ 0xff
 800938e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009396:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2206      	movs	r2, #6
 800939c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2206      	movs	r2, #6
 80093a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80093ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <tcp_alloc+0xf8>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80093be:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <tcp_alloc+0xfc>)
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80093cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4a08      	ldr	r2, [pc, #32]	@ (80093f4 <tcp_alloc+0x100>)
 80093d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4a07      	ldr	r2, [pc, #28]	@ (80093f8 <tcp_alloc+0x104>)
 80093dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80093e0:	68fb      	ldr	r3, [r7, #12]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20007fd4 	.word	0x20007fd4
 80093f0:	20007fea 	.word	0x20007fea
 80093f4:	080090ad 	.word	0x080090ad
 80093f8:	006ddd00 	.word	0x006ddd00

080093fc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009406:	2040      	movs	r0, #64	@ 0x40
 8009408:	f7ff ff74 	bl	80092f4 <tcp_alloc>
 800940c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800940e:	68fb      	ldr	r3, [r7, #12]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	611a      	str	r2, [r3, #16]
  }
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
	...

0800943c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00e      	beq.n	800946a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7d1b      	ldrb	r3, [r3, #20]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d106      	bne.n	8009462 <tcp_recv+0x26>
 8009454:	4b07      	ldr	r3, [pc, #28]	@ (8009474 <tcp_recv+0x38>)
 8009456:	f240 72df 	movw	r2, #2015	@ 0x7df
 800945a:	4907      	ldr	r1, [pc, #28]	@ (8009478 <tcp_recv+0x3c>)
 800945c:	4807      	ldr	r0, [pc, #28]	@ (800947c <tcp_recv+0x40>)
 800945e:	f00a fcf5 	bl	8013e4c <iprintf>
    pcb->recv = recv;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	080187f0 	.word	0x080187f0
 8009478:	08018d8c 	.word	0x08018d8c
 800947c:	08018834 	.word	0x08018834

08009480 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	7d1b      	ldrb	r3, [r3, #20]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d106      	bne.n	80094a6 <tcp_sent+0x26>
 8009498:	4b07      	ldr	r3, [pc, #28]	@ (80094b8 <tcp_sent+0x38>)
 800949a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800949e:	4907      	ldr	r1, [pc, #28]	@ (80094bc <tcp_sent+0x3c>)
 80094a0:	4807      	ldr	r0, [pc, #28]	@ (80094c0 <tcp_sent+0x40>)
 80094a2:	f00a fcd3 	bl	8013e4c <iprintf>
    pcb->sent = sent;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	080187f0 	.word	0x080187f0
 80094bc:	08018db4 	.word	0x08018db4
 80094c0:	08018834 	.word	0x08018834

080094c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7d1b      	ldrb	r3, [r3, #20]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d106      	bne.n	80094ea <tcp_err+0x26>
 80094dc:	4b07      	ldr	r3, [pc, #28]	@ (80094fc <tcp_err+0x38>)
 80094de:	f640 020d 	movw	r2, #2061	@ 0x80d
 80094e2:	4907      	ldr	r1, [pc, #28]	@ (8009500 <tcp_err+0x3c>)
 80094e4:	4807      	ldr	r0, [pc, #28]	@ (8009504 <tcp_err+0x40>)
 80094e6:	f00a fcb1 	bl	8013e4c <iprintf>
    pcb->errf = err;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	080187f0 	.word	0x080187f0
 8009500:	08018ddc 	.word	0x08018ddc
 8009504:	08018834 	.word	0x08018834

08009508 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d107      	bne.n	800952c <tcp_poll+0x24>
 800951c:	4b0e      	ldr	r3, [pc, #56]	@ (8009558 <tcp_poll+0x50>)
 800951e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8009522:	490e      	ldr	r1, [pc, #56]	@ (800955c <tcp_poll+0x54>)
 8009524:	480e      	ldr	r0, [pc, #56]	@ (8009560 <tcp_poll+0x58>)
 8009526:	f00a fc91 	bl	8013e4c <iprintf>
 800952a:	e011      	b.n	8009550 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d106      	bne.n	8009542 <tcp_poll+0x3a>
 8009534:	4b08      	ldr	r3, [pc, #32]	@ (8009558 <tcp_poll+0x50>)
 8009536:	f640 023e 	movw	r2, #2110	@ 0x83e
 800953a:	490a      	ldr	r1, [pc, #40]	@ (8009564 <tcp_poll+0x5c>)
 800953c:	4808      	ldr	r0, [pc, #32]	@ (8009560 <tcp_poll+0x58>)
 800953e:	f00a fc85 	bl	8013e4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	79fa      	ldrb	r2, [r7, #7]
 800954e:	775a      	strb	r2, [r3, #29]
}
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	080187f0 	.word	0x080187f0
 800955c:	08018e04 	.word	0x08018e04
 8009560:	08018834 	.word	0x08018834
 8009564:	08018e1c 	.word	0x08018e1c

08009568 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d107      	bne.n	8009586 <tcp_pcb_purge+0x1e>
 8009576:	4b21      	ldr	r3, [pc, #132]	@ (80095fc <tcp_pcb_purge+0x94>)
 8009578:	f640 0251 	movw	r2, #2129	@ 0x851
 800957c:	4920      	ldr	r1, [pc, #128]	@ (8009600 <tcp_pcb_purge+0x98>)
 800957e:	4821      	ldr	r0, [pc, #132]	@ (8009604 <tcp_pcb_purge+0x9c>)
 8009580:	f00a fc64 	bl	8013e4c <iprintf>
 8009584:	e037      	b.n	80095f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7d1b      	ldrb	r3, [r3, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d033      	beq.n	80095f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009592:	2b0a      	cmp	r3, #10
 8009594:	d02f      	beq.n	80095f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800959a:	2b01      	cmp	r3, #1
 800959c:	d02b      	beq.n	80095f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe f85a 	bl	8007664 <pbuf_free>
      pcb->refused_data = NULL;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d002      	beq.n	80095c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f986 	bl	80098d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fd11 	bl	8008ff8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff fd0c 	bl	8008ff8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	080187f0 	.word	0x080187f0
 8009600:	08018e3c 	.word	0x08018e3c
 8009604:	08018834 	.word	0x08018834

08009608 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <tcp_pcb_remove+0x1e>
 8009618:	4b3e      	ldr	r3, [pc, #248]	@ (8009714 <tcp_pcb_remove+0x10c>)
 800961a:	f640 0283 	movw	r2, #2179	@ 0x883
 800961e:	493e      	ldr	r1, [pc, #248]	@ (8009718 <tcp_pcb_remove+0x110>)
 8009620:	483e      	ldr	r0, [pc, #248]	@ (800971c <tcp_pcb_remove+0x114>)
 8009622:	f00a fc13 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <tcp_pcb_remove+0x32>
 800962c:	4b39      	ldr	r3, [pc, #228]	@ (8009714 <tcp_pcb_remove+0x10c>)
 800962e:	f640 0284 	movw	r2, #2180	@ 0x884
 8009632:	493b      	ldr	r1, [pc, #236]	@ (8009720 <tcp_pcb_remove+0x118>)
 8009634:	4839      	ldr	r0, [pc, #228]	@ (800971c <tcp_pcb_remove+0x114>)
 8009636:	f00a fc09 	bl	8013e4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d105      	bne.n	8009650 <tcp_pcb_remove+0x48>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	e013      	b.n	8009678 <tcp_pcb_remove+0x70>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e00c      	b.n	8009672 <tcp_pcb_remove+0x6a>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d104      	bne.n	800966c <tcp_pcb_remove+0x64>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60da      	str	r2, [r3, #12]
 800966a:	e005      	b.n	8009678 <tcp_pcb_remove+0x70>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1ef      	bne.n	8009658 <tcp_pcb_remove+0x50>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2200      	movs	r2, #0
 800967c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800967e:	6838      	ldr	r0, [r7, #0]
 8009680:	f7ff ff72 	bl	8009568 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	7d1b      	ldrb	r3, [r3, #20]
 8009688:	2b0a      	cmp	r3, #10
 800968a:	d013      	beq.n	80096b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009690:	2b01      	cmp	r3, #1
 8009692:	d00f      	beq.n	80096b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	8b5b      	ldrh	r3, [r3, #26]
 8009698:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800969c:	2b00      	cmp	r3, #0
 800969e:	d009      	beq.n	80096b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	8b5b      	ldrh	r3, [r3, #26]
 80096a4:	f043 0302 	orr.w	r3, r3, #2
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80096ae:	6838      	ldr	r0, [r7, #0]
 80096b0:	f003 fbc0 	bl	800ce34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	7d1b      	ldrb	r3, [r3, #20]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d020      	beq.n	80096fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d006      	beq.n	80096d2 <tcp_pcb_remove+0xca>
 80096c4:	4b13      	ldr	r3, [pc, #76]	@ (8009714 <tcp_pcb_remove+0x10c>)
 80096c6:	f640 0293 	movw	r2, #2195	@ 0x893
 80096ca:	4916      	ldr	r1, [pc, #88]	@ (8009724 <tcp_pcb_remove+0x11c>)
 80096cc:	4813      	ldr	r0, [pc, #76]	@ (800971c <tcp_pcb_remove+0x114>)
 80096ce:	f00a fbbd 	bl	8013e4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d006      	beq.n	80096e8 <tcp_pcb_remove+0xe0>
 80096da:	4b0e      	ldr	r3, [pc, #56]	@ (8009714 <tcp_pcb_remove+0x10c>)
 80096dc:	f640 0294 	movw	r2, #2196	@ 0x894
 80096e0:	4911      	ldr	r1, [pc, #68]	@ (8009728 <tcp_pcb_remove+0x120>)
 80096e2:	480e      	ldr	r0, [pc, #56]	@ (800971c <tcp_pcb_remove+0x114>)
 80096e4:	f00a fbb2 	bl	8013e4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d006      	beq.n	80096fe <tcp_pcb_remove+0xf6>
 80096f0:	4b08      	ldr	r3, [pc, #32]	@ (8009714 <tcp_pcb_remove+0x10c>)
 80096f2:	f640 0296 	movw	r2, #2198	@ 0x896
 80096f6:	490d      	ldr	r1, [pc, #52]	@ (800972c <tcp_pcb_remove+0x124>)
 80096f8:	4808      	ldr	r0, [pc, #32]	@ (800971c <tcp_pcb_remove+0x114>)
 80096fa:	f00a fba7 	bl	8013e4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2200      	movs	r2, #0
 8009708:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	080187f0 	.word	0x080187f0
 8009718:	08018e58 	.word	0x08018e58
 800971c:	08018834 	.word	0x08018834
 8009720:	08018e74 	.word	0x08018e74
 8009724:	08018e94 	.word	0x08018e94
 8009728:	08018eac 	.word	0x08018eac
 800972c:	08018ec8 	.word	0x08018ec8

08009730 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d106      	bne.n	800974c <tcp_next_iss+0x1c>
 800973e:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <tcp_next_iss+0x38>)
 8009740:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009744:	4909      	ldr	r1, [pc, #36]	@ (800976c <tcp_next_iss+0x3c>)
 8009746:	480a      	ldr	r0, [pc, #40]	@ (8009770 <tcp_next_iss+0x40>)
 8009748:	f00a fb80 	bl	8013e4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800974c:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <tcp_next_iss+0x44>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	4b09      	ldr	r3, [pc, #36]	@ (8009778 <tcp_next_iss+0x48>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4413      	add	r3, r2
 8009756:	4a07      	ldr	r2, [pc, #28]	@ (8009774 <tcp_next_iss+0x44>)
 8009758:	6013      	str	r3, [r2, #0]
  return iss;
 800975a:	4b06      	ldr	r3, [pc, #24]	@ (8009774 <tcp_next_iss+0x44>)
 800975c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800975e:	4618      	mov	r0, r3
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	080187f0 	.word	0x080187f0
 800976c:	08018ee0 	.word	0x08018ee0
 8009770:	08018834 	.word	0x08018834
 8009774:	20000034 	.word	0x20000034
 8009778:	20007fd4 	.word	0x20007fd4

0800977c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <tcp_eff_send_mss_netif+0x22>
 8009790:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <tcp_eff_send_mss_netif+0x68>)
 8009792:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8009796:	4914      	ldr	r1, [pc, #80]	@ (80097e8 <tcp_eff_send_mss_netif+0x6c>)
 8009798:	4814      	ldr	r0, [pc, #80]	@ (80097ec <tcp_eff_send_mss_netif+0x70>)
 800979a:	f00a fb57 	bl	8013e4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80097a4:	89fb      	ldrh	r3, [r7, #14]
 80097a6:	e019      	b.n	80097dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80097ae:	8afb      	ldrh	r3, [r7, #22]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d012      	beq.n	80097da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80097b4:	2328      	movs	r3, #40	@ 0x28
 80097b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80097b8:	8afa      	ldrh	r2, [r7, #22]
 80097ba:	8abb      	ldrh	r3, [r7, #20]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d904      	bls.n	80097ca <tcp_eff_send_mss_netif+0x4e>
 80097c0:	8afa      	ldrh	r2, [r7, #22]
 80097c2:	8abb      	ldrh	r3, [r7, #20]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	e000      	b.n	80097cc <tcp_eff_send_mss_netif+0x50>
 80097ca:	2300      	movs	r3, #0
 80097cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80097ce:	8a7a      	ldrh	r2, [r7, #18]
 80097d0:	89fb      	ldrh	r3, [r7, #14]
 80097d2:	4293      	cmp	r3, r2
 80097d4:	bf28      	it	cs
 80097d6:	4613      	movcs	r3, r2
 80097d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80097da:	89fb      	ldrh	r3, [r7, #14]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	080187f0 	.word	0x080187f0
 80097e8:	08018efc 	.word	0x08018efc
 80097ec:	08018834 	.word	0x08018834

080097f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d119      	bne.n	8009838 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009804:	4b10      	ldr	r3, [pc, #64]	@ (8009848 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009806:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800980a:	4910      	ldr	r1, [pc, #64]	@ (800984c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800980c:	4810      	ldr	r0, [pc, #64]	@ (8009850 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800980e:	f00a fb1d 	bl	8013e4c <iprintf>

  while (pcb != NULL) {
 8009812:	e011      	b.n	8009838 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d108      	bne.n	8009832 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7fe fd18 	bl	800825c <tcp_abort>
      pcb = next;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e002      	b.n	8009838 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1ea      	bne.n	8009814 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	080187f0 	.word	0x080187f0
 800984c:	08018f24 	.word	0x08018f24
 8009850:	08018834 	.word	0x08018834

08009854 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d02a      	beq.n	80098ba <tcp_netif_ip_addr_changed+0x66>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d026      	beq.n	80098ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800986c:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <tcp_netif_ip_addr_changed+0x70>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ffbc 	bl	80097f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009878:	4b13      	ldr	r3, [pc, #76]	@ (80098c8 <tcp_netif_ip_addr_changed+0x74>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff ffb6 	bl	80097f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d017      	beq.n	80098ba <tcp_netif_ip_addr_changed+0x66>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d013      	beq.n	80098ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009892:	4b0e      	ldr	r3, [pc, #56]	@ (80098cc <tcp_netif_ip_addr_changed+0x78>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	e00c      	b.n	80098b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d103      	bne.n	80098ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1ef      	bne.n	800989a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80098ba:	bf00      	nop
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20007fe0 	.word	0x20007fe0
 80098c8:	20007fd8 	.word	0x20007fd8
 80098cc:	20007fdc 	.word	0x20007fdc

080098d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d007      	beq.n	80098f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff fb87 	bl	8008ff8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80098f8:	b590      	push	{r4, r7, lr}
 80098fa:	b08d      	sub	sp, #52	@ 0x34
 80098fc:	af04      	add	r7, sp, #16
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <tcp_input+0x1c>
 8009908:	4b9b      	ldr	r3, [pc, #620]	@ (8009b78 <tcp_input+0x280>)
 800990a:	2283      	movs	r2, #131	@ 0x83
 800990c:	499b      	ldr	r1, [pc, #620]	@ (8009b7c <tcp_input+0x284>)
 800990e:	489c      	ldr	r0, [pc, #624]	@ (8009b80 <tcp_input+0x288>)
 8009910:	f00a fa9c 	bl	8013e4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a9a      	ldr	r2, [pc, #616]	@ (8009b84 <tcp_input+0x28c>)
 800991a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	895b      	ldrh	r3, [r3, #10]
 8009920:	2b13      	cmp	r3, #19
 8009922:	f240 83d1 	bls.w	800a0c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009926:	4b98      	ldr	r3, [pc, #608]	@ (8009b88 <tcp_input+0x290>)
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	4a97      	ldr	r2, [pc, #604]	@ (8009b88 <tcp_input+0x290>)
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f008 fa53 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	f040 83c7 	bne.w	800a0cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800993e:	4b92      	ldr	r3, [pc, #584]	@ (8009b88 <tcp_input+0x290>)
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009946:	2be0      	cmp	r3, #224	@ 0xe0
 8009948:	f000 83c0 	beq.w	800a0cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800994c:	4b8d      	ldr	r3, [pc, #564]	@ (8009b84 <tcp_input+0x28c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	899b      	ldrh	r3, [r3, #12]
 8009952:	b29b      	uxth	r3, r3
 8009954:	4618      	mov	r0, r3
 8009956:	f7fc faf7 	bl	8005f48 <lwip_htons>
 800995a:	4603      	mov	r3, r0
 800995c:	0b1b      	lsrs	r3, r3, #12
 800995e:	b29b      	uxth	r3, r3
 8009960:	b2db      	uxtb	r3, r3
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009966:	7cbb      	ldrb	r3, [r7, #18]
 8009968:	2b13      	cmp	r3, #19
 800996a:	f240 83b1 	bls.w	800a0d0 <tcp_input+0x7d8>
 800996e:	7cbb      	ldrb	r3, [r7, #18]
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	891b      	ldrh	r3, [r3, #8]
 8009976:	429a      	cmp	r2, r3
 8009978:	f200 83aa 	bhi.w	800a0d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800997c:	7cbb      	ldrb	r3, [r7, #18]
 800997e:	b29b      	uxth	r3, r3
 8009980:	3b14      	subs	r3, #20
 8009982:	b29a      	uxth	r2, r3
 8009984:	4b81      	ldr	r3, [pc, #516]	@ (8009b8c <tcp_input+0x294>)
 8009986:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009988:	4b81      	ldr	r3, [pc, #516]	@ (8009b90 <tcp_input+0x298>)
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	895a      	ldrh	r2, [r3, #10]
 8009992:	7cbb      	ldrb	r3, [r7, #18]
 8009994:	b29b      	uxth	r3, r3
 8009996:	429a      	cmp	r2, r3
 8009998:	d309      	bcc.n	80099ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800999a:	4b7c      	ldr	r3, [pc, #496]	@ (8009b8c <tcp_input+0x294>)
 800999c:	881a      	ldrh	r2, [r3, #0]
 800999e:	4b7d      	ldr	r3, [pc, #500]	@ (8009b94 <tcp_input+0x29c>)
 80099a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80099a2:	7cbb      	ldrb	r3, [r7, #18]
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7fd fdd6 	bl	8007558 <pbuf_remove_header>
 80099ac:	e04e      	b.n	8009a4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <tcp_input+0xca>
 80099b6:	4b70      	ldr	r3, [pc, #448]	@ (8009b78 <tcp_input+0x280>)
 80099b8:	22c2      	movs	r2, #194	@ 0xc2
 80099ba:	4977      	ldr	r1, [pc, #476]	@ (8009b98 <tcp_input+0x2a0>)
 80099bc:	4870      	ldr	r0, [pc, #448]	@ (8009b80 <tcp_input+0x288>)
 80099be:	f00a fa45 	bl	8013e4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80099c2:	2114      	movs	r1, #20
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fd fdc7 	bl	8007558 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	895a      	ldrh	r2, [r3, #10]
 80099ce:	4b71      	ldr	r3, [pc, #452]	@ (8009b94 <tcp_input+0x29c>)
 80099d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80099d2:	4b6e      	ldr	r3, [pc, #440]	@ (8009b8c <tcp_input+0x294>)
 80099d4:	881a      	ldrh	r2, [r3, #0]
 80099d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009b94 <tcp_input+0x29c>)
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80099de:	4b6d      	ldr	r3, [pc, #436]	@ (8009b94 <tcp_input+0x29c>)
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fd fdb7 	bl	8007558 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	895b      	ldrh	r3, [r3, #10]
 80099f0:	8a3a      	ldrh	r2, [r7, #16]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	f200 836e 	bhi.w	800a0d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	4a64      	ldr	r2, [pc, #400]	@ (8009b90 <tcp_input+0x298>)
 8009a00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	8a3a      	ldrh	r2, [r7, #16]
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fd fda4 	bl	8007558 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	891a      	ldrh	r2, [r3, #8]
 8009a14:	8a3b      	ldrh	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	895b      	ldrh	r3, [r3, #10]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <tcp_input+0x13a>
 8009a26:	4b54      	ldr	r3, [pc, #336]	@ (8009b78 <tcp_input+0x280>)
 8009a28:	22df      	movs	r2, #223	@ 0xdf
 8009a2a:	495c      	ldr	r1, [pc, #368]	@ (8009b9c <tcp_input+0x2a4>)
 8009a2c:	4854      	ldr	r0, [pc, #336]	@ (8009b80 <tcp_input+0x288>)
 8009a2e:	f00a fa0d 	bl	8013e4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	891a      	ldrh	r2, [r3, #8]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	891b      	ldrh	r3, [r3, #8]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d005      	beq.n	8009a4c <tcp_input+0x154>
 8009a40:	4b4d      	ldr	r3, [pc, #308]	@ (8009b78 <tcp_input+0x280>)
 8009a42:	22e0      	movs	r2, #224	@ 0xe0
 8009a44:	4956      	ldr	r1, [pc, #344]	@ (8009ba0 <tcp_input+0x2a8>)
 8009a46:	484e      	ldr	r0, [pc, #312]	@ (8009b80 <tcp_input+0x288>)
 8009a48:	f00a fa00 	bl	8013e4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8009b84 <tcp_input+0x28c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4a4b      	ldr	r2, [pc, #300]	@ (8009b84 <tcp_input+0x28c>)
 8009a56:	6814      	ldr	r4, [r2, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fc fa75 	bl	8005f48 <lwip_htons>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009a62:	4b48      	ldr	r3, [pc, #288]	@ (8009b84 <tcp_input+0x28c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	885b      	ldrh	r3, [r3, #2]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4a46      	ldr	r2, [pc, #280]	@ (8009b84 <tcp_input+0x28c>)
 8009a6c:	6814      	ldr	r4, [r2, #0]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fc fa6a 	bl	8005f48 <lwip_htons>
 8009a74:	4603      	mov	r3, r0
 8009a76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009a78:	4b42      	ldr	r3, [pc, #264]	@ (8009b84 <tcp_input+0x28c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	4a41      	ldr	r2, [pc, #260]	@ (8009b84 <tcp_input+0x28c>)
 8009a80:	6814      	ldr	r4, [r2, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fc fa76 	bl	8005f74 <lwip_htonl>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	6863      	ldr	r3, [r4, #4]
 8009a8e:	4a45      	ldr	r2, [pc, #276]	@ (8009ba4 <tcp_input+0x2ac>)
 8009a90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009a92:	4b3c      	ldr	r3, [pc, #240]	@ (8009b84 <tcp_input+0x28c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	4a3a      	ldr	r2, [pc, #232]	@ (8009b84 <tcp_input+0x28c>)
 8009a9a:	6814      	ldr	r4, [r2, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fc fa69 	bl	8005f74 <lwip_htonl>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	4a3f      	ldr	r2, [pc, #252]	@ (8009ba8 <tcp_input+0x2b0>)
 8009aaa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009aac:	4b35      	ldr	r3, [pc, #212]	@ (8009b84 <tcp_input+0x28c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	89db      	ldrh	r3, [r3, #14]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	4a33      	ldr	r2, [pc, #204]	@ (8009b84 <tcp_input+0x28c>)
 8009ab6:	6814      	ldr	r4, [r2, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fc fa45 	bl	8005f48 <lwip_htons>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009ac2:	4b30      	ldr	r3, [pc, #192]	@ (8009b84 <tcp_input+0x28c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	899b      	ldrh	r3, [r3, #12]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fc fa3c 	bl	8005f48 <lwip_htons>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4b34      	ldr	r3, [pc, #208]	@ (8009bac <tcp_input+0x2b4>)
 8009adc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	891a      	ldrh	r2, [r3, #8]
 8009ae2:	4b33      	ldr	r3, [pc, #204]	@ (8009bb0 <tcp_input+0x2b8>)
 8009ae4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009ae6:	4b31      	ldr	r3, [pc, #196]	@ (8009bac <tcp_input+0x2b4>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00c      	beq.n	8009b0c <tcp_input+0x214>
    tcplen++;
 8009af2:	4b2f      	ldr	r3, [pc, #188]	@ (8009bb0 <tcp_input+0x2b8>)
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb0 <tcp_input+0x2b8>)
 8009afc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	891a      	ldrh	r2, [r3, #8]
 8009b02:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb0 <tcp_input+0x2b8>)
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	f200 82e6 	bhi.w	800a0d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b10:	4b28      	ldr	r3, [pc, #160]	@ (8009bb4 <tcp_input+0x2bc>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	61fb      	str	r3, [r7, #28]
 8009b16:	e09d      	b.n	8009c54 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	7d1b      	ldrb	r3, [r3, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <tcp_input+0x234>
 8009b20:	4b15      	ldr	r3, [pc, #84]	@ (8009b78 <tcp_input+0x280>)
 8009b22:	22fb      	movs	r2, #251	@ 0xfb
 8009b24:	4924      	ldr	r1, [pc, #144]	@ (8009bb8 <tcp_input+0x2c0>)
 8009b26:	4816      	ldr	r0, [pc, #88]	@ (8009b80 <tcp_input+0x288>)
 8009b28:	f00a f990 	bl	8013e4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	7d1b      	ldrb	r3, [r3, #20]
 8009b30:	2b0a      	cmp	r3, #10
 8009b32:	d105      	bne.n	8009b40 <tcp_input+0x248>
 8009b34:	4b10      	ldr	r3, [pc, #64]	@ (8009b78 <tcp_input+0x280>)
 8009b36:	22fc      	movs	r2, #252	@ 0xfc
 8009b38:	4920      	ldr	r1, [pc, #128]	@ (8009bbc <tcp_input+0x2c4>)
 8009b3a:	4811      	ldr	r0, [pc, #68]	@ (8009b80 <tcp_input+0x288>)
 8009b3c:	f00a f986 	bl	8013e4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	7d1b      	ldrb	r3, [r3, #20]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d105      	bne.n	8009b54 <tcp_input+0x25c>
 8009b48:	4b0b      	ldr	r3, [pc, #44]	@ (8009b78 <tcp_input+0x280>)
 8009b4a:	22fd      	movs	r2, #253	@ 0xfd
 8009b4c:	491c      	ldr	r1, [pc, #112]	@ (8009bc0 <tcp_input+0x2c8>)
 8009b4e:	480c      	ldr	r0, [pc, #48]	@ (8009b80 <tcp_input+0x288>)
 8009b50:	f00a f97c 	bl	8013e4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	7a1b      	ldrb	r3, [r3, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d033      	beq.n	8009bc4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	7a1a      	ldrb	r2, [r3, #8]
 8009b60:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <tcp_input+0x290>)
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b68:	3301      	adds	r3, #1
 8009b6a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d029      	beq.n	8009bc4 <tcp_input+0x2cc>
      prev = pcb;
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	61bb      	str	r3, [r7, #24]
      continue;
 8009b74:	e06b      	b.n	8009c4e <tcp_input+0x356>
 8009b76:	bf00      	nop
 8009b78:	08018f58 	.word	0x08018f58
 8009b7c:	08018f8c 	.word	0x08018f8c
 8009b80:	08018fa4 	.word	0x08018fa4
 8009b84:	20007ffc 	.word	0x20007ffc
 8009b88:	20004f98 	.word	0x20004f98
 8009b8c:	20008000 	.word	0x20008000
 8009b90:	20008004 	.word	0x20008004
 8009b94:	20008002 	.word	0x20008002
 8009b98:	08018fcc 	.word	0x08018fcc
 8009b9c:	08018fdc 	.word	0x08018fdc
 8009ba0:	08018fe8 	.word	0x08018fe8
 8009ba4:	2000800c 	.word	0x2000800c
 8009ba8:	20008010 	.word	0x20008010
 8009bac:	20008018 	.word	0x20008018
 8009bb0:	20008016 	.word	0x20008016
 8009bb4:	20007fe0 	.word	0x20007fe0
 8009bb8:	08019008 	.word	0x08019008
 8009bbc:	08019030 	.word	0x08019030
 8009bc0:	0801905c 	.word	0x0801905c
    }

    if (pcb->remote_port == tcphdr->src &&
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	8b1a      	ldrh	r2, [r3, #24]
 8009bc8:	4b72      	ldr	r3, [pc, #456]	@ (8009d94 <tcp_input+0x49c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d13a      	bne.n	8009c4a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	8ada      	ldrh	r2, [r3, #22]
 8009bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8009d94 <tcp_input+0x49c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d132      	bne.n	8009c4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	4b6b      	ldr	r3, [pc, #428]	@ (8009d98 <tcp_input+0x4a0>)
 8009bea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d12c      	bne.n	8009c4a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b68      	ldr	r3, [pc, #416]	@ (8009d98 <tcp_input+0x4a0>)
 8009bf6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d126      	bne.n	8009c4a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d106      	bne.n	8009c14 <tcp_input+0x31c>
 8009c06:	4b65      	ldr	r3, [pc, #404]	@ (8009d9c <tcp_input+0x4a4>)
 8009c08:	f240 120d 	movw	r2, #269	@ 0x10d
 8009c0c:	4964      	ldr	r1, [pc, #400]	@ (8009da0 <tcp_input+0x4a8>)
 8009c0e:	4865      	ldr	r0, [pc, #404]	@ (8009da4 <tcp_input+0x4ac>)
 8009c10:	f00a f91c 	bl	8013e4c <iprintf>
      if (prev != NULL) {
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <tcp_input+0x338>
        prev->next = pcb->next;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009c22:	4b61      	ldr	r3, [pc, #388]	@ (8009da8 <tcp_input+0x4b0>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8009da8 <tcp_input+0x4b0>)
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d111      	bne.n	8009c5e <tcp_input+0x366>
 8009c3a:	4b58      	ldr	r3, [pc, #352]	@ (8009d9c <tcp_input+0x4a4>)
 8009c3c:	f240 1215 	movw	r2, #277	@ 0x115
 8009c40:	495a      	ldr	r1, [pc, #360]	@ (8009dac <tcp_input+0x4b4>)
 8009c42:	4858      	ldr	r0, [pc, #352]	@ (8009da4 <tcp_input+0x4ac>)
 8009c44:	f00a f902 	bl	8013e4c <iprintf>
      break;
 8009c48:	e009      	b.n	8009c5e <tcp_input+0x366>
    }
    prev = pcb;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	61fb      	str	r3, [r7, #28]
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f47f af5e 	bne.w	8009b18 <tcp_input+0x220>
 8009c5c:	e000      	b.n	8009c60 <tcp_input+0x368>
      break;
 8009c5e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f040 80aa 	bne.w	8009dbc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c68:	4b51      	ldr	r3, [pc, #324]	@ (8009db0 <tcp_input+0x4b8>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	e03f      	b.n	8009cf0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	7d1b      	ldrb	r3, [r3, #20]
 8009c74:	2b0a      	cmp	r3, #10
 8009c76:	d006      	beq.n	8009c86 <tcp_input+0x38e>
 8009c78:	4b48      	ldr	r3, [pc, #288]	@ (8009d9c <tcp_input+0x4a4>)
 8009c7a:	f240 121f 	movw	r2, #287	@ 0x11f
 8009c7e:	494d      	ldr	r1, [pc, #308]	@ (8009db4 <tcp_input+0x4bc>)
 8009c80:	4848      	ldr	r0, [pc, #288]	@ (8009da4 <tcp_input+0x4ac>)
 8009c82:	f00a f8e3 	bl	8013e4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	7a1b      	ldrb	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	7a1a      	ldrb	r2, [r3, #8]
 8009c92:	4b41      	ldr	r3, [pc, #260]	@ (8009d98 <tcp_input+0x4a0>)
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d122      	bne.n	8009ce8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	8b1a      	ldrh	r2, [r3, #24]
 8009ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8009d94 <tcp_input+0x49c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d11b      	bne.n	8009cea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	8ada      	ldrh	r2, [r3, #22]
 8009cb6:	4b37      	ldr	r3, [pc, #220]	@ (8009d94 <tcp_input+0x49c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	885b      	ldrh	r3, [r3, #2]
 8009cbc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d113      	bne.n	8009cea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	4b34      	ldr	r3, [pc, #208]	@ (8009d98 <tcp_input+0x4a0>)
 8009cc8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d10d      	bne.n	8009cea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <tcp_input+0x4a0>)
 8009cd4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d107      	bne.n	8009cea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009cda:	69f8      	ldr	r0, [r7, #28]
 8009cdc:	f000 fb56 	bl	800a38c <tcp_timewait_input>
        }
        pbuf_free(p);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7fd fcbf 	bl	8007664 <pbuf_free>
        return;
 8009ce6:	e1fd      	b.n	800a0e4 <tcp_input+0x7ec>
        continue;
 8009ce8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1bc      	bne.n	8009c70 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8009db8 <tcp_input+0x4c0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e02a      	b.n	8009d58 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	7a1b      	ldrb	r3, [r3, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	7a1a      	ldrb	r2, [r3, #8]
 8009d0e:	4b22      	ldr	r3, [pc, #136]	@ (8009d98 <tcp_input+0x4a0>)
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009d16:	3301      	adds	r3, #1
 8009d18:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d002      	beq.n	8009d24 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	61bb      	str	r3, [r7, #24]
        continue;
 8009d22:	e016      	b.n	8009d52 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	8ada      	ldrh	r2, [r3, #22]
 8009d28:	4b1a      	ldr	r3, [pc, #104]	@ (8009d94 <tcp_input+0x49c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	885b      	ldrh	r3, [r3, #2]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d10c      	bne.n	8009d4e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	4b17      	ldr	r3, [pc, #92]	@ (8009d98 <tcp_input+0x4a0>)
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d00f      	beq.n	8009d60 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00d      	beq.n	8009d62 <tcp_input+0x46a>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d009      	beq.n	8009d62 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1d1      	bne.n	8009d02 <tcp_input+0x40a>
 8009d5e:	e000      	b.n	8009d62 <tcp_input+0x46a>
            break;
 8009d60:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d029      	beq.n	8009dbc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009d76:	4b10      	ldr	r3, [pc, #64]	@ (8009db8 <tcp_input+0x4c0>)
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8009db8 <tcp_input+0x4c0>)
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009d84:	6978      	ldr	r0, [r7, #20]
 8009d86:	f000 fa03 	bl	800a190 <tcp_listen_input>
      }
      pbuf_free(p);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fd fc6a 	bl	8007664 <pbuf_free>
      return;
 8009d90:	e1a8      	b.n	800a0e4 <tcp_input+0x7ec>
 8009d92:	bf00      	nop
 8009d94:	20007ffc 	.word	0x20007ffc
 8009d98:	20004f98 	.word	0x20004f98
 8009d9c:	08018f58 	.word	0x08018f58
 8009da0:	08019084 	.word	0x08019084
 8009da4:	08018fa4 	.word	0x08018fa4
 8009da8:	20007fe0 	.word	0x20007fe0
 8009dac:	080190b0 	.word	0x080190b0
 8009db0:	20007fe4 	.word	0x20007fe4
 8009db4:	080190dc 	.word	0x080190dc
 8009db8:	20007fdc 	.word	0x20007fdc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8158 	beq.w	800a074 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009dc4:	4b95      	ldr	r3, [pc, #596]	@ (800a01c <tcp_input+0x724>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	891a      	ldrh	r2, [r3, #8]
 8009dce:	4b93      	ldr	r3, [pc, #588]	@ (800a01c <tcp_input+0x724>)
 8009dd0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009dd2:	4a92      	ldr	r2, [pc, #584]	@ (800a01c <tcp_input+0x724>)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009dd8:	4b91      	ldr	r3, [pc, #580]	@ (800a020 <tcp_input+0x728>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a8f      	ldr	r2, [pc, #572]	@ (800a01c <tcp_input+0x724>)
 8009dde:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009de0:	4b90      	ldr	r3, [pc, #576]	@ (800a024 <tcp_input+0x72c>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009de6:	4b90      	ldr	r3, [pc, #576]	@ (800a028 <tcp_input+0x730>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009dec:	4b8f      	ldr	r3, [pc, #572]	@ (800a02c <tcp_input+0x734>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009df2:	4b8f      	ldr	r3, [pc, #572]	@ (800a030 <tcp_input+0x738>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	f003 0308 	and.w	r3, r3, #8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d006      	beq.n	8009e0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7b5b      	ldrb	r3, [r3, #13]
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d017      	beq.n	8009e44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e14:	69f8      	ldr	r0, [r7, #28]
 8009e16:	f7ff f873 	bl	8008f00 <tcp_process_refused_data>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f113 0f0d 	cmn.w	r3, #13
 8009e20:	d007      	beq.n	8009e32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00c      	beq.n	8009e44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e2a:	4b82      	ldr	r3, [pc, #520]	@ (800a034 <tcp_input+0x73c>)
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d008      	beq.n	8009e44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 80e3 	bne.w	800a002 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009e3c:	69f8      	ldr	r0, [r7, #28]
 8009e3e:	f003 fdfd 	bl	800da3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009e42:	e0de      	b.n	800a002 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009e44:	4a7c      	ldr	r2, [pc, #496]	@ (800a038 <tcp_input+0x740>)
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009e4a:	69f8      	ldr	r0, [r7, #28]
 8009e4c:	f000 fb18 	bl	800a480 <tcp_process>
 8009e50:	4603      	mov	r3, r0
 8009e52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009e54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e58:	f113 0f0d 	cmn.w	r3, #13
 8009e5c:	f000 80d3 	beq.w	800a006 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009e60:	4b71      	ldr	r3, [pc, #452]	@ (800a028 <tcp_input+0x730>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d015      	beq.n	8009e98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d008      	beq.n	8009e88 <tcp_input+0x590>
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	6912      	ldr	r2, [r2, #16]
 8009e80:	f06f 010d 	mvn.w	r1, #13
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009e88:	69f9      	ldr	r1, [r7, #28]
 8009e8a:	486c      	ldr	r0, [pc, #432]	@ (800a03c <tcp_input+0x744>)
 8009e8c:	f7ff fbbc 	bl	8009608 <tcp_pcb_remove>
        tcp_free(pcb);
 8009e90:	69f8      	ldr	r0, [r7, #28]
 8009e92:	f7fd fefb 	bl	8007c8c <tcp_free>
 8009e96:	e0da      	b.n	800a04e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009e9c:	4b63      	ldr	r3, [pc, #396]	@ (800a02c <tcp_input+0x734>)
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d01d      	beq.n	8009ee0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009ea4:	4b61      	ldr	r3, [pc, #388]	@ (800a02c <tcp_input+0x734>)
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <tcp_input+0x5d2>
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	6910      	ldr	r0, [r2, #16]
 8009ebe:	89fa      	ldrh	r2, [r7, #14]
 8009ec0:	69f9      	ldr	r1, [r7, #28]
 8009ec2:	4798      	blx	r3
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	74fb      	strb	r3, [r7, #19]
 8009ec8:	e001      	b.n	8009ece <tcp_input+0x5d6>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ed2:	f113 0f0d 	cmn.w	r3, #13
 8009ed6:	f000 8098 	beq.w	800a00a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009eda:	4b54      	ldr	r3, [pc, #336]	@ (800a02c <tcp_input+0x734>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009ee0:	69f8      	ldr	r0, [r7, #28]
 8009ee2:	f000 f915 	bl	800a110 <tcp_input_delayed_close>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 8090 	bne.w	800a00e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009eee:	4b4d      	ldr	r3, [pc, #308]	@ (800a024 <tcp_input+0x72c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d041      	beq.n	8009f7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d006      	beq.n	8009f0c <tcp_input+0x614>
 8009efe:	4b50      	ldr	r3, [pc, #320]	@ (800a040 <tcp_input+0x748>)
 8009f00:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009f04:	494f      	ldr	r1, [pc, #316]	@ (800a044 <tcp_input+0x74c>)
 8009f06:	4850      	ldr	r0, [pc, #320]	@ (800a048 <tcp_input+0x750>)
 8009f08:	f009 ffa0 	bl	8013e4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	8b5b      	ldrh	r3, [r3, #26]
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d008      	beq.n	8009f2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009f18:	4b42      	ldr	r3, [pc, #264]	@ (800a024 <tcp_input+0x72c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd fba1 	bl	8007664 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009f22:	69f8      	ldr	r0, [r7, #28]
 8009f24:	f7fe f99a 	bl	800825c <tcp_abort>
            goto aborted;
 8009f28:	e091      	b.n	800a04e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00c      	beq.n	8009f4e <tcp_input+0x656>
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	6918      	ldr	r0, [r3, #16]
 8009f3e:	4b39      	ldr	r3, [pc, #228]	@ (800a024 <tcp_input+0x72c>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	2300      	movs	r3, #0
 8009f44:	69f9      	ldr	r1, [r7, #28]
 8009f46:	47a0      	blx	r4
 8009f48:	4603      	mov	r3, r0
 8009f4a:	74fb      	strb	r3, [r7, #19]
 8009f4c:	e008      	b.n	8009f60 <tcp_input+0x668>
 8009f4e:	4b35      	ldr	r3, [pc, #212]	@ (800a024 <tcp_input+0x72c>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	2300      	movs	r3, #0
 8009f54:	69f9      	ldr	r1, [r7, #28]
 8009f56:	2000      	movs	r0, #0
 8009f58:	f7ff f8a8 	bl	80090ac <tcp_recv_null>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f64:	f113 0f0d 	cmn.w	r3, #13
 8009f68:	d053      	beq.n	800a012 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009f72:	4b2c      	ldr	r3, [pc, #176]	@ (800a024 <tcp_input+0x72c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009f7a:	4b2b      	ldr	r3, [pc, #172]	@ (800a028 <tcp_input+0x730>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	f003 0320 	and.w	r3, r3, #32
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d030      	beq.n	8009fe8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f92:	7b5a      	ldrb	r2, [r3, #13]
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f98:	f042 0220 	orr.w	r2, r2, #32
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	735a      	strb	r2, [r3, #13]
 8009fa0:	e022      	b.n	8009fe8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009faa:	d005      	beq.n	8009fb8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <tcp_input+0x6e2>
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	6918      	ldr	r0, [r3, #16]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	47a0      	blx	r4
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	74fb      	strb	r3, [r7, #19]
 8009fd8:	e001      	b.n	8009fde <tcp_input+0x6e6>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009fde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fe2:	f113 0f0d 	cmn.w	r3, #13
 8009fe6:	d016      	beq.n	800a016 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009fe8:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <tcp_input+0x740>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009fee:	69f8      	ldr	r0, [r7, #28]
 8009ff0:	f000 f88e 	bl	800a110 <tcp_input_delayed_close>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d128      	bne.n	800a04c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009ffa:	69f8      	ldr	r0, [r7, #28]
 8009ffc:	f002 ff1a 	bl	800ce34 <tcp_output>
 800a000:	e025      	b.n	800a04e <tcp_input+0x756>
        goto aborted;
 800a002:	bf00      	nop
 800a004:	e023      	b.n	800a04e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a006:	bf00      	nop
 800a008:	e021      	b.n	800a04e <tcp_input+0x756>
              goto aborted;
 800a00a:	bf00      	nop
 800a00c:	e01f      	b.n	800a04e <tcp_input+0x756>
          goto aborted;
 800a00e:	bf00      	nop
 800a010:	e01d      	b.n	800a04e <tcp_input+0x756>
            goto aborted;
 800a012:	bf00      	nop
 800a014:	e01b      	b.n	800a04e <tcp_input+0x756>
              goto aborted;
 800a016:	bf00      	nop
 800a018:	e019      	b.n	800a04e <tcp_input+0x756>
 800a01a:	bf00      	nop
 800a01c:	20007fec 	.word	0x20007fec
 800a020:	20007ffc 	.word	0x20007ffc
 800a024:	2000801c 	.word	0x2000801c
 800a028:	20008019 	.word	0x20008019
 800a02c:	20008014 	.word	0x20008014
 800a030:	20008018 	.word	0x20008018
 800a034:	20008016 	.word	0x20008016
 800a038:	20008020 	.word	0x20008020
 800a03c:	20007fe0 	.word	0x20007fe0
 800a040:	08018f58 	.word	0x08018f58
 800a044:	0801910c 	.word	0x0801910c
 800a048:	08018fa4 	.word	0x08018fa4
          goto aborted;
 800a04c:	bf00      	nop
    tcp_input_pcb = NULL;
 800a04e:	4b27      	ldr	r3, [pc, #156]	@ (800a0ec <tcp_input+0x7f4>)
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a054:	4b26      	ldr	r3, [pc, #152]	@ (800a0f0 <tcp_input+0x7f8>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a05a:	4b26      	ldr	r3, [pc, #152]	@ (800a0f4 <tcp_input+0x7fc>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d03f      	beq.n	800a0e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a062:	4b24      	ldr	r3, [pc, #144]	@ (800a0f4 <tcp_input+0x7fc>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	4618      	mov	r0, r3
 800a068:	f7fd fafc 	bl	8007664 <pbuf_free>
      inseg.p = NULL;
 800a06c:	4b21      	ldr	r3, [pc, #132]	@ (800a0f4 <tcp_input+0x7fc>)
 800a06e:	2200      	movs	r2, #0
 800a070:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a072:	e036      	b.n	800a0e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a074:	4b20      	ldr	r3, [pc, #128]	@ (800a0f8 <tcp_input+0x800>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	899b      	ldrh	r3, [r3, #12]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fb ff63 	bl	8005f48 <lwip_htons>
 800a082:	4603      	mov	r3, r0
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f003 0304 	and.w	r3, r3, #4
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d118      	bne.n	800a0c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a08e:	4b1b      	ldr	r3, [pc, #108]	@ (800a0fc <tcp_input+0x804>)
 800a090:	6819      	ldr	r1, [r3, #0]
 800a092:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <tcp_input+0x808>)
 800a094:	881b      	ldrh	r3, [r3, #0]
 800a096:	461a      	mov	r2, r3
 800a098:	4b1a      	ldr	r3, [pc, #104]	@ (800a104 <tcp_input+0x80c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a09e:	4b16      	ldr	r3, [pc, #88]	@ (800a0f8 <tcp_input+0x800>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0a2:	885b      	ldrh	r3, [r3, #2]
 800a0a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0a6:	4a14      	ldr	r2, [pc, #80]	@ (800a0f8 <tcp_input+0x800>)
 800a0a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0aa:	8812      	ldrh	r2, [r2, #0]
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	9202      	str	r2, [sp, #8]
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	@ (800a108 <tcp_input+0x810>)
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4b15      	ldr	r3, [pc, #84]	@ (800a10c <tcp_input+0x814>)
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f003 fc6e 	bl	800d99c <tcp_rst>
    pbuf_free(p);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fd facf 	bl	8007664 <pbuf_free>
  return;
 800a0c6:	e00c      	b.n	800a0e2 <tcp_input+0x7ea>
    goto dropped;
 800a0c8:	bf00      	nop
 800a0ca:	e006      	b.n	800a0da <tcp_input+0x7e2>
    goto dropped;
 800a0cc:	bf00      	nop
 800a0ce:	e004      	b.n	800a0da <tcp_input+0x7e2>
    goto dropped;
 800a0d0:	bf00      	nop
 800a0d2:	e002      	b.n	800a0da <tcp_input+0x7e2>
      goto dropped;
 800a0d4:	bf00      	nop
 800a0d6:	e000      	b.n	800a0da <tcp_input+0x7e2>
      goto dropped;
 800a0d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7fd fac2 	bl	8007664 <pbuf_free>
 800a0e0:	e000      	b.n	800a0e4 <tcp_input+0x7ec>
  return;
 800a0e2:	bf00      	nop
}
 800a0e4:	3724      	adds	r7, #36	@ 0x24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd90      	pop	{r4, r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20008020 	.word	0x20008020
 800a0f0:	2000801c 	.word	0x2000801c
 800a0f4:	20007fec 	.word	0x20007fec
 800a0f8:	20007ffc 	.word	0x20007ffc
 800a0fc:	20008010 	.word	0x20008010
 800a100:	20008016 	.word	0x20008016
 800a104:	2000800c 	.word	0x2000800c
 800a108:	20004fa8 	.word	0x20004fa8
 800a10c:	20004fac 	.word	0x20004fac

0800a110 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d106      	bne.n	800a12c <tcp_input_delayed_close+0x1c>
 800a11e:	4b17      	ldr	r3, [pc, #92]	@ (800a17c <tcp_input_delayed_close+0x6c>)
 800a120:	f240 225a 	movw	r2, #602	@ 0x25a
 800a124:	4916      	ldr	r1, [pc, #88]	@ (800a180 <tcp_input_delayed_close+0x70>)
 800a126:	4817      	ldr	r0, [pc, #92]	@ (800a184 <tcp_input_delayed_close+0x74>)
 800a128:	f009 fe90 	bl	8013e4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a12c:	4b16      	ldr	r3, [pc, #88]	@ (800a188 <tcp_input_delayed_close+0x78>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01c      	beq.n	800a172 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8b5b      	ldrh	r3, [r3, #26]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10d      	bne.n	800a160 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <tcp_input_delayed_close+0x50>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6912      	ldr	r2, [r2, #16]
 800a158:	f06f 010e 	mvn.w	r1, #14
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	480a      	ldr	r0, [pc, #40]	@ (800a18c <tcp_input_delayed_close+0x7c>)
 800a164:	f7ff fa50 	bl	8009608 <tcp_pcb_remove>
    tcp_free(pcb);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7fd fd8f 	bl	8007c8c <tcp_free>
    return 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	08018f58 	.word	0x08018f58
 800a180:	08019128 	.word	0x08019128
 800a184:	08018fa4 	.word	0x08018fa4
 800a188:	20008019 	.word	0x20008019
 800a18c:	20007fe0 	.word	0x20007fe0

0800a190 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a190:	b590      	push	{r4, r7, lr}
 800a192:	b08b      	sub	sp, #44	@ 0x2c
 800a194:	af04      	add	r7, sp, #16
 800a196:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a198:	4b6f      	ldr	r3, [pc, #444]	@ (800a358 <tcp_listen_input+0x1c8>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 80d2 	bne.w	800a34a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d106      	bne.n	800a1ba <tcp_listen_input+0x2a>
 800a1ac:	4b6b      	ldr	r3, [pc, #428]	@ (800a35c <tcp_listen_input+0x1cc>)
 800a1ae:	f240 2281 	movw	r2, #641	@ 0x281
 800a1b2:	496b      	ldr	r1, [pc, #428]	@ (800a360 <tcp_listen_input+0x1d0>)
 800a1b4:	486b      	ldr	r0, [pc, #428]	@ (800a364 <tcp_listen_input+0x1d4>)
 800a1b6:	f009 fe49 	bl	8013e4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a1ba:	4b67      	ldr	r3, [pc, #412]	@ (800a358 <tcp_listen_input+0x1c8>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	f003 0310 	and.w	r3, r3, #16
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d019      	beq.n	800a1fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1c6:	4b68      	ldr	r3, [pc, #416]	@ (800a368 <tcp_listen_input+0x1d8>)
 800a1c8:	6819      	ldr	r1, [r3, #0]
 800a1ca:	4b68      	ldr	r3, [pc, #416]	@ (800a36c <tcp_listen_input+0x1dc>)
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	4b67      	ldr	r3, [pc, #412]	@ (800a370 <tcp_listen_input+0x1e0>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1d6:	4b67      	ldr	r3, [pc, #412]	@ (800a374 <tcp_listen_input+0x1e4>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1da:	885b      	ldrh	r3, [r3, #2]
 800a1dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1de:	4a65      	ldr	r2, [pc, #404]	@ (800a374 <tcp_listen_input+0x1e4>)
 800a1e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1e2:	8812      	ldrh	r2, [r2, #0]
 800a1e4:	b292      	uxth	r2, r2
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	4b63      	ldr	r3, [pc, #396]	@ (800a378 <tcp_listen_input+0x1e8>)
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4b63      	ldr	r3, [pc, #396]	@ (800a37c <tcp_listen_input+0x1ec>)
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f003 fbd2 	bl	800d99c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a1f8:	e0a9      	b.n	800a34e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a1fa:	4b57      	ldr	r3, [pc, #348]	@ (800a358 <tcp_listen_input+0x1c8>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	f003 0302 	and.w	r3, r3, #2
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 80a3 	beq.w	800a34e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7d5b      	ldrb	r3, [r3, #21]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7ff f871 	bl	80092f4 <tcp_alloc>
 800a212:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d111      	bne.n	800a23e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <tcp_listen_input+0xa8>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	6910      	ldr	r0, [r2, #16]
 800a22a:	f04f 32ff 	mov.w	r2, #4294967295
 800a22e:	2100      	movs	r1, #0
 800a230:	4798      	blx	r3
 800a232:	4603      	mov	r3, r0
 800a234:	73bb      	strb	r3, [r7, #14]
      return;
 800a236:	e08b      	b.n	800a350 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a238:	23f0      	movs	r3, #240	@ 0xf0
 800a23a:	73bb      	strb	r3, [r7, #14]
      return;
 800a23c:	e088      	b.n	800a350 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a23e:	4b50      	ldr	r3, [pc, #320]	@ (800a380 <tcp_listen_input+0x1f0>)
 800a240:	695a      	ldr	r2, [r3, #20]
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a246:	4b4e      	ldr	r3, [pc, #312]	@ (800a380 <tcp_listen_input+0x1f0>)
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	8ada      	ldrh	r2, [r3, #22]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a256:	4b47      	ldr	r3, [pc, #284]	@ (800a374 <tcp_listen_input+0x1e4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2203      	movs	r2, #3
 800a266:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a268:	4b41      	ldr	r3, [pc, #260]	@ (800a370 <tcp_listen_input+0x1e0>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	f7ff fa58 	bl	8009730 <tcp_next_iss>
 800a280:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a29a:	4b35      	ldr	r3, [pc, #212]	@ (800a370 <tcp_listen_input+0x1e0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	1e5a      	subs	r2, r3, #1
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7a5b      	ldrb	r3, [r3, #9]
 800a2b6:	f003 030c 	and.w	r3, r3, #12
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	7a1a      	ldrb	r2, [r3, #8]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a2c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a384 <tcp_listen_input+0x1f4>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	60da      	str	r2, [r3, #12]
 800a2d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a384 <tcp_listen_input+0x1f4>)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	f003 fd21 	bl	800dd1c <tcp_timer_needed>
 800a2da:	4b2b      	ldr	r3, [pc, #172]	@ (800a388 <tcp_listen_input+0x1f8>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a2e0:	6978      	ldr	r0, [r7, #20]
 800a2e2:	f001 fd8b 	bl	800bdfc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a2e6:	4b23      	ldr	r3, [pc, #140]	@ (800a374 <tcp_listen_input+0x1e4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	89db      	ldrh	r3, [r3, #14]
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3304      	adds	r3, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f007 fab3 	bl	8011874 <ip4_route>
 800a30e:	4601      	mov	r1, r0
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	3304      	adds	r3, #4
 800a314:	461a      	mov	r2, r3
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff fa30 	bl	800977c <tcp_eff_send_mss_netif>
 800a31c:	4603      	mov	r3, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a324:	2112      	movs	r1, #18
 800a326:	6978      	ldr	r0, [r7, #20]
 800a328:	f002 fc96 	bl	800cc58 <tcp_enqueue_flags>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a338:	2100      	movs	r1, #0
 800a33a:	6978      	ldr	r0, [r7, #20]
 800a33c:	f7fd fed0 	bl	80080e0 <tcp_abandon>
      return;
 800a340:	e006      	b.n	800a350 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a342:	6978      	ldr	r0, [r7, #20]
 800a344:	f002 fd76 	bl	800ce34 <tcp_output>
  return;
 800a348:	e001      	b.n	800a34e <tcp_listen_input+0x1be>
    return;
 800a34a:	bf00      	nop
 800a34c:	e000      	b.n	800a350 <tcp_listen_input+0x1c0>
  return;
 800a34e:	bf00      	nop
}
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	bd90      	pop	{r4, r7, pc}
 800a356:	bf00      	nop
 800a358:	20008018 	.word	0x20008018
 800a35c:	08018f58 	.word	0x08018f58
 800a360:	08019150 	.word	0x08019150
 800a364:	08018fa4 	.word	0x08018fa4
 800a368:	20008010 	.word	0x20008010
 800a36c:	20008016 	.word	0x20008016
 800a370:	2000800c 	.word	0x2000800c
 800a374:	20007ffc 	.word	0x20007ffc
 800a378:	20004fa8 	.word	0x20004fa8
 800a37c:	20004fac 	.word	0x20004fac
 800a380:	20004f98 	.word	0x20004f98
 800a384:	20007fe0 	.word	0x20007fe0
 800a388:	20007fe8 	.word	0x20007fe8

0800a38c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af04      	add	r7, sp, #16
 800a392:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a394:	4b2f      	ldr	r3, [pc, #188]	@ (800a454 <tcp_timewait_input+0xc8>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d153      	bne.n	800a448 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <tcp_timewait_input+0x28>
 800a3a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a458 <tcp_timewait_input+0xcc>)
 800a3a8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a3ac:	492b      	ldr	r1, [pc, #172]	@ (800a45c <tcp_timewait_input+0xd0>)
 800a3ae:	482c      	ldr	r0, [pc, #176]	@ (800a460 <tcp_timewait_input+0xd4>)
 800a3b0:	f009 fd4c 	bl	8013e4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a3b4:	4b27      	ldr	r3, [pc, #156]	@ (800a454 <tcp_timewait_input+0xc8>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d02a      	beq.n	800a416 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a3c0:	4b28      	ldr	r3, [pc, #160]	@ (800a464 <tcp_timewait_input+0xd8>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	db2d      	blt.n	800a42a <tcp_timewait_input+0x9e>
 800a3ce:	4b25      	ldr	r3, [pc, #148]	@ (800a464 <tcp_timewait_input+0xd8>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a3da:	440b      	add	r3, r1
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dc23      	bgt.n	800a42a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3e2:	4b21      	ldr	r3, [pc, #132]	@ (800a468 <tcp_timewait_input+0xdc>)
 800a3e4:	6819      	ldr	r1, [r3, #0]
 800a3e6:	4b21      	ldr	r3, [pc, #132]	@ (800a46c <tcp_timewait_input+0xe0>)
 800a3e8:	881b      	ldrh	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a464 <tcp_timewait_input+0xd8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a470 <tcp_timewait_input+0xe4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3f6:	885b      	ldrh	r3, [r3, #2]
 800a3f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3fa:	4a1d      	ldr	r2, [pc, #116]	@ (800a470 <tcp_timewait_input+0xe4>)
 800a3fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3fe:	8812      	ldrh	r2, [r2, #0]
 800a400:	b292      	uxth	r2, r2
 800a402:	9202      	str	r2, [sp, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	4b1b      	ldr	r3, [pc, #108]	@ (800a474 <tcp_timewait_input+0xe8>)
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <tcp_timewait_input+0xec>)
 800a40c:	4602      	mov	r2, r0
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f003 fac4 	bl	800d99c <tcp_rst>
      return;
 800a414:	e01b      	b.n	800a44e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a416:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <tcp_timewait_input+0xc8>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a422:	4b16      	ldr	r3, [pc, #88]	@ (800a47c <tcp_timewait_input+0xf0>)
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a42a:	4b10      	ldr	r3, [pc, #64]	@ (800a46c <tcp_timewait_input+0xe0>)
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00c      	beq.n	800a44c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8b5b      	ldrh	r3, [r3, #26]
 800a436:	f043 0302 	orr.w	r3, r3, #2
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f002 fcf7 	bl	800ce34 <tcp_output>
  }
  return;
 800a446:	e001      	b.n	800a44c <tcp_timewait_input+0xc0>
    return;
 800a448:	bf00      	nop
 800a44a:	e000      	b.n	800a44e <tcp_timewait_input+0xc2>
  return;
 800a44c:	bf00      	nop
}
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20008018 	.word	0x20008018
 800a458:	08018f58 	.word	0x08018f58
 800a45c:	08019170 	.word	0x08019170
 800a460:	08018fa4 	.word	0x08018fa4
 800a464:	2000800c 	.word	0x2000800c
 800a468:	20008010 	.word	0x20008010
 800a46c:	20008016 	.word	0x20008016
 800a470:	20007ffc 	.word	0x20007ffc
 800a474:	20004fa8 	.word	0x20004fa8
 800a478:	20004fac 	.word	0x20004fac
 800a47c:	20007fd4 	.word	0x20007fd4

0800a480 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b08d      	sub	sp, #52	@ 0x34
 800a484:	af04      	add	r7, sp, #16
 800a486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <tcp_process+0x24>
 800a496:	4b9d      	ldr	r3, [pc, #628]	@ (800a70c <tcp_process+0x28c>)
 800a498:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a49c:	499c      	ldr	r1, [pc, #624]	@ (800a710 <tcp_process+0x290>)
 800a49e:	489d      	ldr	r0, [pc, #628]	@ (800a714 <tcp_process+0x294>)
 800a4a0:	f009 fcd4 	bl	8013e4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a4a4:	4b9c      	ldr	r3, [pc, #624]	@ (800a718 <tcp_process+0x298>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d04e      	beq.n	800a54e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d108      	bne.n	800a4ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4bc:	4b97      	ldr	r3, [pc, #604]	@ (800a71c <tcp_process+0x29c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d123      	bne.n	800a50c <tcp_process+0x8c>
        acceptable = 1;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	76fb      	strb	r3, [r7, #27]
 800a4c8:	e020      	b.n	800a50c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ce:	4b94      	ldr	r3, [pc, #592]	@ (800a720 <tcp_process+0x2a0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d102      	bne.n	800a4dc <tcp_process+0x5c>
        acceptable = 1;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	76fb      	strb	r3, [r7, #27]
 800a4da:	e017      	b.n	800a50c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a4dc:	4b90      	ldr	r3, [pc, #576]	@ (800a720 <tcp_process+0x2a0>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	db10      	blt.n	800a50c <tcp_process+0x8c>
 800a4ea:	4b8d      	ldr	r3, [pc, #564]	@ (800a720 <tcp_process+0x2a0>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a4f6:	440b      	add	r3, r1
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dc06      	bgt.n	800a50c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	8b5b      	ldrh	r3, [r3, #26]
 800a502:	f043 0302 	orr.w	r3, r3, #2
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a50c:	7efb      	ldrb	r3, [r7, #27]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d01b      	beq.n	800a54a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7d1b      	ldrb	r3, [r3, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <tcp_process+0xa8>
 800a51a:	4b7c      	ldr	r3, [pc, #496]	@ (800a70c <tcp_process+0x28c>)
 800a51c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a520:	4980      	ldr	r1, [pc, #512]	@ (800a724 <tcp_process+0x2a4>)
 800a522:	487c      	ldr	r0, [pc, #496]	@ (800a714 <tcp_process+0x294>)
 800a524:	f009 fc92 	bl	8013e4c <iprintf>
      recv_flags |= TF_RESET;
 800a528:	4b7f      	ldr	r3, [pc, #508]	@ (800a728 <tcp_process+0x2a8>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	f043 0308 	orr.w	r3, r3, #8
 800a530:	b2da      	uxtb	r2, r3
 800a532:	4b7d      	ldr	r3, [pc, #500]	@ (800a728 <tcp_process+0x2a8>)
 800a534:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8b5b      	ldrh	r3, [r3, #26]
 800a53a:	f023 0301 	bic.w	r3, r3, #1
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a544:	f06f 030d 	mvn.w	r3, #13
 800a548:	e37a      	b.n	800ac40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	e378      	b.n	800ac40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a54e:	4b72      	ldr	r3, [pc, #456]	@ (800a718 <tcp_process+0x298>)
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d010      	beq.n	800a57c <tcp_process+0xfc>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7d1b      	ldrb	r3, [r3, #20]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d00c      	beq.n	800a57c <tcp_process+0xfc>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7d1b      	ldrb	r3, [r3, #20]
 800a566:	2b03      	cmp	r3, #3
 800a568:	d008      	beq.n	800a57c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	8b5b      	ldrh	r3, [r3, #26]
 800a56e:	f043 0302 	orr.w	r3, r3, #2
 800a572:	b29a      	uxth	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	e361      	b.n	800ac40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8b5b      	ldrh	r3, [r3, #26]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d103      	bne.n	800a590 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a588:	4b68      	ldr	r3, [pc, #416]	@ (800a72c <tcp_process+0x2ac>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fc2b 	bl	800bdfc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7d1b      	ldrb	r3, [r3, #20]
 800a5aa:	3b02      	subs	r3, #2
 800a5ac:	2b07      	cmp	r3, #7
 800a5ae:	f200 8337 	bhi.w	800ac20 <tcp_process+0x7a0>
 800a5b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b8 <tcp_process+0x138>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a809 	.word	0x0800a809
 800a5c0:	0800a981 	.word	0x0800a981
 800a5c4:	0800a9ab 	.word	0x0800a9ab
 800a5c8:	0800aacf 	.word	0x0800aacf
 800a5cc:	0800a981 	.word	0x0800a981
 800a5d0:	0800ab5b 	.word	0x0800ab5b
 800a5d4:	0800abeb 	.word	0x0800abeb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a5d8:	4b4f      	ldr	r3, [pc, #316]	@ (800a718 <tcp_process+0x298>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	f003 0310 	and.w	r3, r3, #16
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 80e4 	beq.w	800a7ae <tcp_process+0x32e>
 800a5e6:	4b4c      	ldr	r3, [pc, #304]	@ (800a718 <tcp_process+0x298>)
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 80dd 	beq.w	800a7ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5f8:	1c5a      	adds	r2, r3, #1
 800a5fa:	4b48      	ldr	r3, [pc, #288]	@ (800a71c <tcp_process+0x29c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	f040 80d5 	bne.w	800a7ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a604:	4b46      	ldr	r3, [pc, #280]	@ (800a720 <tcp_process+0x2a0>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a616:	4b41      	ldr	r3, [pc, #260]	@ (800a71c <tcp_process+0x29c>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a61e:	4b44      	ldr	r3, [pc, #272]	@ (800a730 <tcp_process+0x2b0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	89db      	ldrh	r3, [r3, #14]
 800a624:	b29a      	uxth	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a638:	4b39      	ldr	r3, [pc, #228]	@ (800a720 <tcp_process+0x2a0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	1e5a      	subs	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2204      	movs	r2, #4
 800a646:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3304      	adds	r3, #4
 800a650:	4618      	mov	r0, r3
 800a652:	f007 f90f 	bl	8011874 <ip4_route>
 800a656:	4601      	mov	r1, r0
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3304      	adds	r3, #4
 800a65c:	461a      	mov	r2, r3
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff f88c 	bl	800977c <tcp_eff_send_mss_netif>
 800a664:	4603      	mov	r3, r0
 800a666:	461a      	mov	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a670:	009a      	lsls	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf38      	it	cc
 800a680:	460b      	movcc	r3, r1
 800a682:	429a      	cmp	r2, r3
 800a684:	d204      	bcs.n	800a690 <tcp_process+0x210>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	e00d      	b.n	800a6ac <tcp_process+0x22c>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d904      	bls.n	800a6a8 <tcp_process+0x228>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	e001      	b.n	800a6ac <tcp_process+0x22c>
 800a6a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d106      	bne.n	800a6ca <tcp_process+0x24a>
 800a6bc:	4b13      	ldr	r3, [pc, #76]	@ (800a70c <tcp_process+0x28c>)
 800a6be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a6c2:	491c      	ldr	r1, [pc, #112]	@ (800a734 <tcp_process+0x2b4>)
 800a6c4:	4813      	ldr	r0, [pc, #76]	@ (800a714 <tcp_process+0x294>)
 800a6c6:	f009 fbc1 	bl	8013e4c <iprintf>
        --pcb->snd_queuelen;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d12a      	bne.n	800a73c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <tcp_process+0x280>
 800a6f2:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <tcp_process+0x28c>)
 800a6f4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a6f8:	490f      	ldr	r1, [pc, #60]	@ (800a738 <tcp_process+0x2b8>)
 800a6fa:	4806      	ldr	r0, [pc, #24]	@ (800a714 <tcp_process+0x294>)
 800a6fc:	f009 fba6 	bl	8013e4c <iprintf>
          pcb->unsent = rseg->next;
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a708:	e01c      	b.n	800a744 <tcp_process+0x2c4>
 800a70a:	bf00      	nop
 800a70c:	08018f58 	.word	0x08018f58
 800a710:	08019190 	.word	0x08019190
 800a714:	08018fa4 	.word	0x08018fa4
 800a718:	20008018 	.word	0x20008018
 800a71c:	20008010 	.word	0x20008010
 800a720:	2000800c 	.word	0x2000800c
 800a724:	080191ac 	.word	0x080191ac
 800a728:	20008019 	.word	0x20008019
 800a72c:	20007fd4 	.word	0x20007fd4
 800a730:	20007ffc 	.word	0x20007ffc
 800a734:	080191cc 	.word	0x080191cc
 800a738:	080191e4 	.word	0x080191e4
        } else {
          pcb->unacked = rseg->next;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a744:	69f8      	ldr	r0, [r7, #28]
 800a746:	f7fe fc6c 	bl	8009022 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a758:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a75a:	e006      	b.n	800a76a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <tcp_process+0x30a>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6910      	ldr	r0, [r2, #16]
 800a77e:	2200      	movs	r2, #0
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4798      	blx	r3
 800a784:	4603      	mov	r3, r0
 800a786:	76bb      	strb	r3, [r7, #26]
 800a788:	e001      	b.n	800a78e <tcp_process+0x30e>
 800a78a:	2300      	movs	r3, #0
 800a78c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a78e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a792:	f113 0f0d 	cmn.w	r3, #13
 800a796:	d102      	bne.n	800a79e <tcp_process+0x31e>
          return ERR_ABRT;
 800a798:	f06f 030c 	mvn.w	r3, #12
 800a79c:	e250      	b.n	800ac40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8b5b      	ldrh	r3, [r3, #26]
 800a7a2:	f043 0302 	orr.w	r3, r3, #2
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a7ac:	e23a      	b.n	800ac24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a7ae:	4b98      	ldr	r3, [pc, #608]	@ (800aa10 <tcp_process+0x590>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 0310 	and.w	r3, r3, #16
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8234 	beq.w	800ac24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7bc:	4b95      	ldr	r3, [pc, #596]	@ (800aa14 <tcp_process+0x594>)
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	4b95      	ldr	r3, [pc, #596]	@ (800aa18 <tcp_process+0x598>)
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4b95      	ldr	r3, [pc, #596]	@ (800aa1c <tcp_process+0x59c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7cc:	4b94      	ldr	r3, [pc, #592]	@ (800aa20 <tcp_process+0x5a0>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7d0:	885b      	ldrh	r3, [r3, #2]
 800a7d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7d4:	4a92      	ldr	r2, [pc, #584]	@ (800aa20 <tcp_process+0x5a0>)
 800a7d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7d8:	8812      	ldrh	r2, [r2, #0]
 800a7da:	b292      	uxth	r2, r2
 800a7dc:	9202      	str	r2, [sp, #8]
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	4b90      	ldr	r3, [pc, #576]	@ (800aa24 <tcp_process+0x5a4>)
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4b90      	ldr	r3, [pc, #576]	@ (800aa28 <tcp_process+0x5a8>)
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f003 f8d7 	bl	800d99c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7f4:	2b05      	cmp	r3, #5
 800a7f6:	f200 8215 	bhi.w	800ac24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f002 fea3 	bl	800d54c <tcp_rexmit_rto>
      break;
 800a806:	e20d      	b.n	800ac24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a808:	4b81      	ldr	r3, [pc, #516]	@ (800aa10 <tcp_process+0x590>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	f003 0310 	and.w	r3, r3, #16
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80a1 	beq.w	800a958 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a816:	4b7f      	ldr	r3, [pc, #508]	@ (800aa14 <tcp_process+0x594>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	db7e      	blt.n	800a924 <tcp_process+0x4a4>
 800a826:	4b7b      	ldr	r3, [pc, #492]	@ (800aa14 <tcp_process+0x594>)
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc77      	bgt.n	800a924 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2204      	movs	r2, #4
 800a838:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d102      	bne.n	800a848 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a842:	23fa      	movs	r3, #250	@ 0xfa
 800a844:	76bb      	strb	r3, [r7, #26]
 800a846:	e01d      	b.n	800a884 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <tcp_process+0x3e0>
 800a852:	4b76      	ldr	r3, [pc, #472]	@ (800aa2c <tcp_process+0x5ac>)
 800a854:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a858:	4975      	ldr	r1, [pc, #468]	@ (800aa30 <tcp_process+0x5b0>)
 800a85a:	4876      	ldr	r0, [pc, #472]	@ (800aa34 <tcp_process+0x5b4>)
 800a85c:	f009 faf6 	bl	8013e4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <tcp_process+0x400>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	6910      	ldr	r0, [r2, #16]
 800a874:	2200      	movs	r2, #0
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	4798      	blx	r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	76bb      	strb	r3, [r7, #26]
 800a87e:	e001      	b.n	800a884 <tcp_process+0x404>
 800a880:	23f0      	movs	r3, #240	@ 0xf0
 800a882:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a884:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00a      	beq.n	800a8a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a88c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a890:	f113 0f0d 	cmn.w	r3, #13
 800a894:	d002      	beq.n	800a89c <tcp_process+0x41c>
              tcp_abort(pcb);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7fd fce0 	bl	800825c <tcp_abort>
            }
            return ERR_ABRT;
 800a89c:	f06f 030c 	mvn.w	r3, #12
 800a8a0:	e1ce      	b.n	800ac40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fae0 	bl	800ae68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a8a8:	4b63      	ldr	r3, [pc, #396]	@ (800aa38 <tcp_process+0x5b8>)
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <tcp_process+0x43c>
            recv_acked--;
 800a8b0:	4b61      	ldr	r3, [pc, #388]	@ (800aa38 <tcp_process+0x5b8>)
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa38 <tcp_process+0x5b8>)
 800a8ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8c0:	009a      	lsls	r2, r3, #2
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf38      	it	cc
 800a8d0:	460b      	movcc	r3, r1
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d204      	bcs.n	800a8e0 <tcp_process+0x460>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	e00d      	b.n	800a8fc <tcp_process+0x47c>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d904      	bls.n	800a8f8 <tcp_process+0x478>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	e001      	b.n	800a8fc <tcp_process+0x47c>
 800a8f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a902:	4b4e      	ldr	r3, [pc, #312]	@ (800aa3c <tcp_process+0x5bc>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d037      	beq.n	800a97e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8b5b      	ldrh	r3, [r3, #26]
 800a912:	f043 0302 	orr.w	r3, r3, #2
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2207      	movs	r2, #7
 800a920:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a922:	e02c      	b.n	800a97e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a924:	4b3b      	ldr	r3, [pc, #236]	@ (800aa14 <tcp_process+0x594>)
 800a926:	6819      	ldr	r1, [r3, #0]
 800a928:	4b3b      	ldr	r3, [pc, #236]	@ (800aa18 <tcp_process+0x598>)
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	4b3b      	ldr	r3, [pc, #236]	@ (800aa1c <tcp_process+0x59c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a934:	4b3a      	ldr	r3, [pc, #232]	@ (800aa20 <tcp_process+0x5a0>)
 800a936:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a938:	885b      	ldrh	r3, [r3, #2]
 800a93a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a93c:	4a38      	ldr	r2, [pc, #224]	@ (800aa20 <tcp_process+0x5a0>)
 800a93e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a940:	8812      	ldrh	r2, [r2, #0]
 800a942:	b292      	uxth	r2, r2
 800a944:	9202      	str	r2, [sp, #8]
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	4b36      	ldr	r3, [pc, #216]	@ (800aa24 <tcp_process+0x5a4>)
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4b36      	ldr	r3, [pc, #216]	@ (800aa28 <tcp_process+0x5a8>)
 800a94e:	4602      	mov	r2, r0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f003 f823 	bl	800d99c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a956:	e167      	b.n	800ac28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a958:	4b2d      	ldr	r3, [pc, #180]	@ (800aa10 <tcp_process+0x590>)
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 8161 	beq.w	800ac28 <tcp_process+0x7a8>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96a:	1e5a      	subs	r2, r3, #1
 800a96c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa1c <tcp_process+0x59c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	f040 8159 	bne.w	800ac28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f002 fe0a 	bl	800d590 <tcp_rexmit>
      break;
 800a97c:	e154      	b.n	800ac28 <tcp_process+0x7a8>
 800a97e:	e153      	b.n	800ac28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa71 	bl	800ae68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a986:	4b2d      	ldr	r3, [pc, #180]	@ (800aa3c <tcp_process+0x5bc>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 814c 	beq.w	800ac2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	8b5b      	ldrh	r3, [r3, #26]
 800a998:	f043 0302 	orr.w	r3, r3, #2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2207      	movs	r2, #7
 800a9a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a9a8:	e140      	b.n	800ac2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa5c 	bl	800ae68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9b0:	4b22      	ldr	r3, [pc, #136]	@ (800aa3c <tcp_process+0x5bc>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 0320 	and.w	r3, r3, #32
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d071      	beq.n	800aaa0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9bc:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <tcp_process+0x590>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d060      	beq.n	800aa8a <tcp_process+0x60a>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9cc:	4b11      	ldr	r3, [pc, #68]	@ (800aa14 <tcp_process+0x594>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d15a      	bne.n	800aa8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d156      	bne.n	800aa8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8b5b      	ldrh	r3, [r3, #26]
 800a9e0:	f043 0302 	orr.w	r3, r3, #2
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7fe fdbc 	bl	8009568 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a9f0:	4b13      	ldr	r3, [pc, #76]	@ (800aa40 <tcp_process+0x5c0>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d105      	bne.n	800aa06 <tcp_process+0x586>
 800a9fa:	4b11      	ldr	r3, [pc, #68]	@ (800aa40 <tcp_process+0x5c0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4a0f      	ldr	r2, [pc, #60]	@ (800aa40 <tcp_process+0x5c0>)
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	e02e      	b.n	800aa64 <tcp_process+0x5e4>
 800aa06:	4b0e      	ldr	r3, [pc, #56]	@ (800aa40 <tcp_process+0x5c0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	e027      	b.n	800aa5e <tcp_process+0x5de>
 800aa0e:	bf00      	nop
 800aa10:	20008018 	.word	0x20008018
 800aa14:	20008010 	.word	0x20008010
 800aa18:	20008016 	.word	0x20008016
 800aa1c:	2000800c 	.word	0x2000800c
 800aa20:	20007ffc 	.word	0x20007ffc
 800aa24:	20004fa8 	.word	0x20004fa8
 800aa28:	20004fac 	.word	0x20004fac
 800aa2c:	08018f58 	.word	0x08018f58
 800aa30:	080191f8 	.word	0x080191f8
 800aa34:	08018fa4 	.word	0x08018fa4
 800aa38:	20008014 	.word	0x20008014
 800aa3c:	20008019 	.word	0x20008019
 800aa40:	20007fe0 	.word	0x20007fe0
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d104      	bne.n	800aa58 <tcp_process+0x5d8>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	60da      	str	r2, [r3, #12]
 800aa56:	e005      	b.n	800aa64 <tcp_process+0x5e4>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1ef      	bne.n	800aa44 <tcp_process+0x5c4>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	4b77      	ldr	r3, [pc, #476]	@ (800ac48 <tcp_process+0x7c8>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	220a      	movs	r2, #10
 800aa74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aa76:	4b75      	ldr	r3, [pc, #468]	@ (800ac4c <tcp_process+0x7cc>)
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60da      	str	r2, [r3, #12]
 800aa7e:	4a73      	ldr	r2, [pc, #460]	@ (800ac4c <tcp_process+0x7cc>)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	f003 f94a 	bl	800dd1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aa88:	e0d2      	b.n	800ac30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	8b5b      	ldrh	r3, [r3, #26]
 800aa8e:	f043 0302 	orr.w	r3, r3, #2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	751a      	strb	r2, [r3, #20]
      break;
 800aa9e:	e0c7      	b.n	800ac30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aaa0:	4b6b      	ldr	r3, [pc, #428]	@ (800ac50 <tcp_process+0x7d0>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 80c1 	beq.w	800ac30 <tcp_process+0x7b0>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aab2:	4b68      	ldr	r3, [pc, #416]	@ (800ac54 <tcp_process+0x7d4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	f040 80ba 	bne.w	800ac30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 80b5 	bne.w	800ac30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2206      	movs	r2, #6
 800aaca:	751a      	strb	r2, [r3, #20]
      break;
 800aacc:	e0b0      	b.n	800ac30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f9ca 	bl	800ae68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aad4:	4b60      	ldr	r3, [pc, #384]	@ (800ac58 <tcp_process+0x7d8>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 80a9 	beq.w	800ac34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8b5b      	ldrh	r3, [r3, #26]
 800aae6:	f043 0302 	orr.w	r3, r3, #2
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7fe fd39 	bl	8009568 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aaf6:	4b59      	ldr	r3, [pc, #356]	@ (800ac5c <tcp_process+0x7dc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d105      	bne.n	800ab0c <tcp_process+0x68c>
 800ab00:	4b56      	ldr	r3, [pc, #344]	@ (800ac5c <tcp_process+0x7dc>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	4a55      	ldr	r2, [pc, #340]	@ (800ac5c <tcp_process+0x7dc>)
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	e013      	b.n	800ab34 <tcp_process+0x6b4>
 800ab0c:	4b53      	ldr	r3, [pc, #332]	@ (800ac5c <tcp_process+0x7dc>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	613b      	str	r3, [r7, #16]
 800ab12:	e00c      	b.n	800ab2e <tcp_process+0x6ae>
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d104      	bne.n	800ab28 <tcp_process+0x6a8>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	60da      	str	r2, [r3, #12]
 800ab26:	e005      	b.n	800ab34 <tcp_process+0x6b4>
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	613b      	str	r3, [r7, #16]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1ef      	bne.n	800ab14 <tcp_process+0x694>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	60da      	str	r2, [r3, #12]
 800ab3a:	4b43      	ldr	r3, [pc, #268]	@ (800ac48 <tcp_process+0x7c8>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	220a      	movs	r2, #10
 800ab44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab46:	4b41      	ldr	r3, [pc, #260]	@ (800ac4c <tcp_process+0x7cc>)
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	60da      	str	r2, [r3, #12]
 800ab4e:	4a3f      	ldr	r2, [pc, #252]	@ (800ac4c <tcp_process+0x7cc>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6013      	str	r3, [r2, #0]
 800ab54:	f003 f8e2 	bl	800dd1c <tcp_timer_needed>
      }
      break;
 800ab58:	e06c      	b.n	800ac34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f984 	bl	800ae68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab60:	4b3b      	ldr	r3, [pc, #236]	@ (800ac50 <tcp_process+0x7d0>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 0310 	and.w	r3, r3, #16
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d065      	beq.n	800ac38 <tcp_process+0x7b8>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab70:	4b38      	ldr	r3, [pc, #224]	@ (800ac54 <tcp_process+0x7d4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d15f      	bne.n	800ac38 <tcp_process+0x7b8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d15b      	bne.n	800ac38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7fe fcf1 	bl	8009568 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab86:	4b35      	ldr	r3, [pc, #212]	@ (800ac5c <tcp_process+0x7dc>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d105      	bne.n	800ab9c <tcp_process+0x71c>
 800ab90:	4b32      	ldr	r3, [pc, #200]	@ (800ac5c <tcp_process+0x7dc>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	4a31      	ldr	r2, [pc, #196]	@ (800ac5c <tcp_process+0x7dc>)
 800ab98:	6013      	str	r3, [r2, #0]
 800ab9a:	e013      	b.n	800abc4 <tcp_process+0x744>
 800ab9c:	4b2f      	ldr	r3, [pc, #188]	@ (800ac5c <tcp_process+0x7dc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	e00c      	b.n	800abbe <tcp_process+0x73e>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d104      	bne.n	800abb8 <tcp_process+0x738>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	60da      	str	r2, [r3, #12]
 800abb6:	e005      	b.n	800abc4 <tcp_process+0x744>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	60fb      	str	r3, [r7, #12]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1ef      	bne.n	800aba4 <tcp_process+0x724>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	60da      	str	r2, [r3, #12]
 800abca:	4b1f      	ldr	r3, [pc, #124]	@ (800ac48 <tcp_process+0x7c8>)
 800abcc:	2201      	movs	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	220a      	movs	r2, #10
 800abd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800abd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac4c <tcp_process+0x7cc>)
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60da      	str	r2, [r3, #12]
 800abde:	4a1b      	ldr	r2, [pc, #108]	@ (800ac4c <tcp_process+0x7cc>)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	f003 f89a 	bl	800dd1c <tcp_timer_needed>
      }
      break;
 800abe8:	e026      	b.n	800ac38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f93c 	bl	800ae68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800abf0:	4b17      	ldr	r3, [pc, #92]	@ (800ac50 <tcp_process+0x7d0>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d01f      	beq.n	800ac3c <tcp_process+0x7bc>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac00:	4b14      	ldr	r3, [pc, #80]	@ (800ac54 <tcp_process+0x7d4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d119      	bne.n	800ac3c <tcp_process+0x7bc>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d115      	bne.n	800ac3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ac10:	4b11      	ldr	r3, [pc, #68]	@ (800ac58 <tcp_process+0x7d8>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f043 0310 	orr.w	r3, r3, #16
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac58 <tcp_process+0x7d8>)
 800ac1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ac1e:	e00d      	b.n	800ac3c <tcp_process+0x7bc>
    default:
      break;
 800ac20:	bf00      	nop
 800ac22:	e00c      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac24:	bf00      	nop
 800ac26:	e00a      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac28:	bf00      	nop
 800ac2a:	e008      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac2c:	bf00      	nop
 800ac2e:	e006      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac30:	bf00      	nop
 800ac32:	e004      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac34:	bf00      	nop
 800ac36:	e002      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <tcp_process+0x7be>
      break;
 800ac3c:	bf00      	nop
  }
  return ERR_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3724      	adds	r7, #36	@ 0x24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd90      	pop	{r4, r7, pc}
 800ac48:	20007fe8 	.word	0x20007fe8
 800ac4c:	20007fe4 	.word	0x20007fe4
 800ac50:	20008018 	.word	0x20008018
 800ac54:	20008010 	.word	0x20008010
 800ac58:	20008019 	.word	0x20008019
 800ac5c:	20007fe0 	.word	0x20007fe0

0800ac60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ac60:	b590      	push	{r4, r7, lr}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d106      	bne.n	800ac7e <tcp_oos_insert_segment+0x1e>
 800ac70:	4b3b      	ldr	r3, [pc, #236]	@ (800ad60 <tcp_oos_insert_segment+0x100>)
 800ac72:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ac76:	493b      	ldr	r1, [pc, #236]	@ (800ad64 <tcp_oos_insert_segment+0x104>)
 800ac78:	483b      	ldr	r0, [pc, #236]	@ (800ad68 <tcp_oos_insert_segment+0x108>)
 800ac7a:	f009 f8e7 	bl	8013e4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	899b      	ldrh	r3, [r3, #12]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fb f95e 	bl	8005f48 <lwip_htons>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d028      	beq.n	800acea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac98:	6838      	ldr	r0, [r7, #0]
 800ac9a:	f7fe f9ad 	bl	8008ff8 <tcp_segs_free>
    next = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	603b      	str	r3, [r7, #0]
 800aca2:	e056      	b.n	800ad52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	899b      	ldrh	r3, [r3, #12]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	4618      	mov	r0, r3
 800acae:	f7fb f94b 	bl	8005f48 <lwip_htons>
 800acb2:	4603      	mov	r3, r0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00d      	beq.n	800acda <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	899b      	ldrh	r3, [r3, #12]
 800acc4:	b29c      	uxth	r4, r3
 800acc6:	2001      	movs	r0, #1
 800acc8:	f7fb f93e 	bl	8005f48 <lwip_htons>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	4322      	orrs	r2, r4
 800acd6:	b292      	uxth	r2, r2
 800acd8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7fe f99c 	bl	8009022 <tcp_seg_free>
    while (next &&
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00e      	beq.n	800ad0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	891b      	ldrh	r3, [r3, #8]
 800acf4:	461a      	mov	r2, r3
 800acf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ad6c <tcp_oos_insert_segment+0x10c>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	441a      	add	r2, r3
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	8909      	ldrh	r1, [r1, #8]
 800ad06:	440b      	add	r3, r1
 800ad08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	daca      	bge.n	800aca4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01e      	beq.n	800ad52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	891b      	ldrh	r3, [r3, #8]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4b14      	ldr	r3, [pc, #80]	@ (800ad6c <tcp_oos_insert_segment+0x10c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	441a      	add	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	dd12      	ble.n	800ad52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	4b0d      	ldr	r3, [pc, #52]	@ (800ad6c <tcp_oos_insert_segment+0x10c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	891b      	ldrh	r3, [r3, #8]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7fc fb03 	bl	8007358 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	601a      	str	r2, [r3, #0]
}
 800ad58:	bf00      	nop
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd90      	pop	{r4, r7, pc}
 800ad60:	08018f58 	.word	0x08018f58
 800ad64:	08019218 	.word	0x08019218
 800ad68:	08018fa4 	.word	0x08018fa4
 800ad6c:	2000800c 	.word	0x2000800c

0800ad70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ad70:	b5b0      	push	{r4, r5, r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ad7e:	e03e      	b.n	800adfe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fc fcf0 	bl	8007774 <pbuf_clen>
 800ad94:	4603      	mov	r3, r0
 800ad96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad9e:	8a7a      	ldrh	r2, [r7, #18]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d906      	bls.n	800adb2 <tcp_free_acked_segments+0x42>
 800ada4:	4b2a      	ldr	r3, [pc, #168]	@ (800ae50 <tcp_free_acked_segments+0xe0>)
 800ada6:	f240 4257 	movw	r2, #1111	@ 0x457
 800adaa:	492a      	ldr	r1, [pc, #168]	@ (800ae54 <tcp_free_acked_segments+0xe4>)
 800adac:	482a      	ldr	r0, [pc, #168]	@ (800ae58 <tcp_free_acked_segments+0xe8>)
 800adae:	f009 f84d 	bl	8013e4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800adb8:	8a7b      	ldrh	r3, [r7, #18]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	891a      	ldrh	r2, [r3, #8]
 800adc8:	4b24      	ldr	r3, [pc, #144]	@ (800ae5c <tcp_free_acked_segments+0xec>)
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	4413      	add	r3, r2
 800adce:	b29a      	uxth	r2, r3
 800add0:	4b22      	ldr	r3, [pc, #136]	@ (800ae5c <tcp_free_acked_segments+0xec>)
 800add2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800add4:	6978      	ldr	r0, [r7, #20]
 800add6:	f7fe f924 	bl	8009022 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00c      	beq.n	800adfe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <tcp_free_acked_segments+0x8e>
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <tcp_free_acked_segments+0x8e>
 800adf0:	4b17      	ldr	r3, [pc, #92]	@ (800ae50 <tcp_free_acked_segments+0xe0>)
 800adf2:	f240 4261 	movw	r2, #1121	@ 0x461
 800adf6:	491a      	ldr	r1, [pc, #104]	@ (800ae60 <tcp_free_acked_segments+0xf0>)
 800adf8:	4817      	ldr	r0, [pc, #92]	@ (800ae58 <tcp_free_acked_segments+0xe8>)
 800adfa:	f009 f827 	bl	8013e4c <iprintf>
  while (seg_list != NULL &&
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d020      	beq.n	800ae46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fb f8b2 	bl	8005f74 <lwip_htonl>
 800ae10:	4604      	mov	r4, r0
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	891b      	ldrh	r3, [r3, #8]
 800ae16:	461d      	mov	r5, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	899b      	ldrh	r3, [r3, #12]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fb f891 	bl	8005f48 <lwip_htons>
 800ae26:	4603      	mov	r3, r0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f003 0303 	and.w	r3, r3, #3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <tcp_free_acked_segments+0xc6>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e000      	b.n	800ae38 <tcp_free_acked_segments+0xc8>
 800ae36:	2300      	movs	r3, #0
 800ae38:	442b      	add	r3, r5
 800ae3a:	18e2      	adds	r2, r4, r3
 800ae3c:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <tcp_free_acked_segments+0xf4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dd9c      	ble.n	800ad80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ae46:	68bb      	ldr	r3, [r7, #8]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae50:	08018f58 	.word	0x08018f58
 800ae54:	08019240 	.word	0x08019240
 800ae58:	08018fa4 	.word	0x08018fa4
 800ae5c:	20008014 	.word	0x20008014
 800ae60:	08019268 	.word	0x08019268
 800ae64:	20008010 	.word	0x20008010

0800ae68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ae68:	b5b0      	push	{r4, r5, r7, lr}
 800ae6a:	b094      	sub	sp, #80	@ 0x50
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_receive+0x20>
 800ae7a:	4b91      	ldr	r3, [pc, #580]	@ (800b0c0 <tcp_receive+0x258>)
 800ae7c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ae80:	4990      	ldr	r1, [pc, #576]	@ (800b0c4 <tcp_receive+0x25c>)
 800ae82:	4891      	ldr	r0, [pc, #580]	@ (800b0c8 <tcp_receive+0x260>)
 800ae84:	f008 ffe2 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d806      	bhi.n	800ae9e <tcp_receive+0x36>
 800ae90:	4b8b      	ldr	r3, [pc, #556]	@ (800b0c0 <tcp_receive+0x258>)
 800ae92:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ae96:	498d      	ldr	r1, [pc, #564]	@ (800b0cc <tcp_receive+0x264>)
 800ae98:	488b      	ldr	r0, [pc, #556]	@ (800b0c8 <tcp_receive+0x260>)
 800ae9a:	f008 ffd7 	bl	8013e4c <iprintf>

  if (flags & TCP_ACK) {
 800ae9e:	4b8c      	ldr	r3, [pc, #560]	@ (800b0d0 <tcp_receive+0x268>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	f003 0310 	and.w	r3, r3, #16
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 8264 	beq.w	800b374 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aeb8:	4413      	add	r3, r2
 800aeba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aec0:	4b84      	ldr	r3, [pc, #528]	@ (800b0d4 <tcp_receive+0x26c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	db1b      	blt.n	800af02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aece:	4b81      	ldr	r3, [pc, #516]	@ (800b0d4 <tcp_receive+0x26c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d106      	bne.n	800aee4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aeda:	4b7f      	ldr	r3, [pc, #508]	@ (800b0d8 <tcp_receive+0x270>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	db0e      	blt.n	800af02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aee8:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d8 <tcp_receive+0x270>)
 800aeea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d125      	bne.n	800af3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aef0:	4b7a      	ldr	r3, [pc, #488]	@ (800b0dc <tcp_receive+0x274>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	89db      	ldrh	r3, [r3, #14]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aefe:	429a      	cmp	r2, r3
 800af00:	d91c      	bls.n	800af3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800af02:	4b76      	ldr	r3, [pc, #472]	@ (800b0dc <tcp_receive+0x274>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	89db      	ldrh	r3, [r3, #14]
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d205      	bcs.n	800af2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800af2c:	4b69      	ldr	r3, [pc, #420]	@ (800b0d4 <tcp_receive+0x26c>)
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800af34:	4b68      	ldr	r3, [pc, #416]	@ (800b0d8 <tcp_receive+0x270>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800af3c:	4b66      	ldr	r3, [pc, #408]	@ (800b0d8 <tcp_receive+0x270>)
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	dc58      	bgt.n	800affc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800af4a:	4b65      	ldr	r3, [pc, #404]	@ (800b0e0 <tcp_receive+0x278>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d14b      	bne.n	800afea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800af5c:	4413      	add	r3, r2
 800af5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af60:	429a      	cmp	r2, r3
 800af62:	d142      	bne.n	800afea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	db3d      	blt.n	800afea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af72:	4b59      	ldr	r3, [pc, #356]	@ (800b0d8 <tcp_receive+0x270>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d137      	bne.n	800afea <tcp_receive+0x182>
              found_dupack = 1;
 800af7a:	2301      	movs	r3, #1
 800af7c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af84:	2bff      	cmp	r3, #255	@ 0xff
 800af86:	d007      	beq.n	800af98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af8e:	3301      	adds	r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d91b      	bls.n	800afda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afac:	4413      	add	r3, r2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d30a      	bcc.n	800afd0 <tcp_receive+0x168>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afc4:	4413      	add	r3, r2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800afce:	e004      	b.n	800afda <tcp_receive+0x172>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800afd6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d902      	bls.n	800afea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f002 fb3f 	bl	800d668 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800afea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afec:	2b00      	cmp	r3, #0
 800afee:	f040 8161 	bne.w	800b2b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800affa:	e15b      	b.n	800b2b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800affc:	4b36      	ldr	r3, [pc, #216]	@ (800b0d8 <tcp_receive+0x270>)
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f2c0 814e 	blt.w	800b2aa <tcp_receive+0x442>
 800b00e:	4b32      	ldr	r3, [pc, #200]	@ (800b0d8 <tcp_receive+0x270>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f300 8146 	bgt.w	800b2aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8b5b      	ldrh	r3, [r3, #26]
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	8b5b      	ldrh	r3, [r3, #26]
 800b02e:	f023 0304 	bic.w	r3, r3, #4
 800b032:	b29a      	uxth	r2, r3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b05a:	10db      	asrs	r3, r3, #3
 800b05c:	b21b      	sxth	r3, r3
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b066:	b29b      	uxth	r3, r3
 800b068:	4413      	add	r3, r2
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	b21a      	sxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b074:	4b18      	ldr	r3, [pc, #96]	@ (800b0d8 <tcp_receive+0x270>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07e:	b29b      	uxth	r3, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b08c:	4b12      	ldr	r3, [pc, #72]	@ (800b0d8 <tcp_receive+0x270>)
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7d1b      	ldrb	r3, [r3, #20]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	f240 8097 	bls.w	800b1cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d245      	bcs.n	800b13a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8b5b      	ldrh	r3, [r3, #26]
 800b0b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d014      	beq.n	800b0e4 <tcp_receive+0x27c>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e013      	b.n	800b0e6 <tcp_receive+0x27e>
 800b0be:	bf00      	nop
 800b0c0:	08018f58 	.word	0x08018f58
 800b0c4:	08019288 	.word	0x08019288
 800b0c8:	08018fa4 	.word	0x08018fa4
 800b0cc:	080192a4 	.word	0x080192a4
 800b0d0:	20008018 	.word	0x20008018
 800b0d4:	2000800c 	.word	0x2000800c
 800b0d8:	20008010 	.word	0x20008010
 800b0dc:	20007ffc 	.word	0x20007ffc
 800b0e0:	20008016 	.word	0x20008016
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b0ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0f4:	fb12 f303 	smulbb	r3, r2, r3
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bf28      	it	cs
 800b100:	4613      	movcs	r3, r2
 800b102:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b10a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b10c:	4413      	add	r3, r2
 800b10e:	b29a      	uxth	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b116:	429a      	cmp	r2, r3
 800b118:	d309      	bcc.n	800b12e <tcp_receive+0x2c6>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b120:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b122:	4413      	add	r3, r2
 800b124:	b29a      	uxth	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b12c:	e04e      	b.n	800b1cc <tcp_receive+0x364>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b134:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b138:	e048      	b.n	800b1cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b140:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b142:	4413      	add	r3, r2
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d309      	bcc.n	800b164 <tcp_receive+0x2fc>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b156:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b158:	4413      	add	r3, r2
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b162:	e004      	b.n	800b16e <tcp_receive+0x306>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b16a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d326      	bcc.n	800b1cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b18a:	1ad3      	subs	r3, r2, r3
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b19e:	4413      	add	r3, r2
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d30a      	bcc.n	800b1c2 <tcp_receive+0x35a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1b6:	4413      	add	r3, r2
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b1c0:	e004      	b.n	800b1cc <tcp_receive+0x364>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d4:	4a98      	ldr	r2, [pc, #608]	@ (800b438 <tcp_receive+0x5d0>)
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff fdca 	bl	800ad70 <tcp_free_acked_segments>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ea:	4a94      	ldr	r2, [pc, #592]	@ (800b43c <tcp_receive+0x5d4>)
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff fdbf 	bl	800ad70 <tcp_free_acked_segments>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b206:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b208:	e002      	b.n	800b210 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b22c:	4b84      	ldr	r3, [pc, #528]	@ (800b440 <tcp_receive+0x5d8>)
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	4413      	add	r3, r2
 800b232:	b29a      	uxth	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	8b5b      	ldrh	r3, [r3, #26]
 800b23e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b242:	2b00      	cmp	r3, #0
 800b244:	d035      	beq.n	800b2b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d118      	bne.n	800b280 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00c      	beq.n	800b270 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	4618      	mov	r0, r3
 800b264:	f7fa fe86 	bl	8005f74 <lwip_htonl>
 800b268:	4603      	mov	r3, r0
 800b26a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dc20      	bgt.n	800b2b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8b5b      	ldrh	r3, [r3, #26]
 800b274:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b27e:	e018      	b.n	800b2b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fa fe71 	bl	8005f74 <lwip_htonl>
 800b292:	4603      	mov	r3, r0
 800b294:	1ae3      	subs	r3, r4, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	dc0b      	bgt.n	800b2b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	8b5b      	ldrh	r3, [r3, #26]
 800b29e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2a8:	e003      	b.n	800b2b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f002 fbc6 	bl	800da3c <tcp_send_empty_ack>
 800b2b0:	e000      	b.n	800b2b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05b      	beq.n	800b374 <tcp_receive+0x50c>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2c0:	4b60      	ldr	r3, [pc, #384]	@ (800b444 <tcp_receive+0x5dc>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	da54      	bge.n	800b374 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b2ca:	4b5f      	ldr	r3, [pc, #380]	@ (800b448 <tcp_receive+0x5e0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b2de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2e8:	10db      	asrs	r3, r3, #3
 800b2ea:	b21b      	sxth	r3, r3
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b302:	4413      	add	r3, r2
 800b304:	b29b      	uxth	r3, r3
 800b306:	b21a      	sxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b30c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b310:	2b00      	cmp	r3, #0
 800b312:	da05      	bge.n	800b320 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b318:	425b      	negs	r3, r3
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b320:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b32a:	109b      	asrs	r3, r3, #2
 800b32c:	b21b      	sxth	r3, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	b29b      	uxth	r3, r3
 800b334:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b33e:	b29a      	uxth	r2, r3
 800b340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b344:	4413      	add	r3, r2
 800b346:	b29b      	uxth	r3, r3
 800b348:	b21a      	sxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b354:	10db      	asrs	r3, r3, #3
 800b356:	b21b      	sxth	r3, r3
 800b358:	b29a      	uxth	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b360:	b29b      	uxth	r3, r3
 800b362:	4413      	add	r3, r2
 800b364:	b29b      	uxth	r3, r3
 800b366:	b21a      	sxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b374:	4b35      	ldr	r3, [pc, #212]	@ (800b44c <tcp_receive+0x5e4>)
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 84df 	beq.w	800bd3c <tcp_receive+0xed4>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	7d1b      	ldrb	r3, [r3, #20]
 800b382:	2b06      	cmp	r3, #6
 800b384:	f200 84da 	bhi.w	800bd3c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b38c:	4b30      	ldr	r3, [pc, #192]	@ (800b450 <tcp_receive+0x5e8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	2b00      	cmp	r3, #0
 800b396:	f2c0 808f 	blt.w	800b4b8 <tcp_receive+0x650>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b39e:	4b2b      	ldr	r3, [pc, #172]	@ (800b44c <tcp_receive+0x5e4>)
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b450 <tcp_receive+0x5e8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	440b      	add	r3, r1
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f300 8082 	bgt.w	800b4b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b3b4:	4b27      	ldr	r3, [pc, #156]	@ (800b454 <tcp_receive+0x5ec>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3be:	4b24      	ldr	r3, [pc, #144]	@ (800b450 <tcp_receive+0x5e8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	1ad3      	subs	r3, r2, r3
 800b3c4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b3c6:	4b23      	ldr	r3, [pc, #140]	@ (800b454 <tcp_receive+0x5ec>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d106      	bne.n	800b3dc <tcp_receive+0x574>
 800b3ce:	4b22      	ldr	r3, [pc, #136]	@ (800b458 <tcp_receive+0x5f0>)
 800b3d0:	f240 5294 	movw	r2, #1428	@ 0x594
 800b3d4:	4921      	ldr	r1, [pc, #132]	@ (800b45c <tcp_receive+0x5f4>)
 800b3d6:	4822      	ldr	r0, [pc, #136]	@ (800b460 <tcp_receive+0x5f8>)
 800b3d8:	f008 fd38 	bl	8013e4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3de:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d906      	bls.n	800b3f4 <tcp_receive+0x58c>
 800b3e6:	4b1c      	ldr	r3, [pc, #112]	@ (800b458 <tcp_receive+0x5f0>)
 800b3e8:	f240 5295 	movw	r2, #1429	@ 0x595
 800b3ec:	491d      	ldr	r1, [pc, #116]	@ (800b464 <tcp_receive+0x5fc>)
 800b3ee:	481c      	ldr	r0, [pc, #112]	@ (800b460 <tcp_receive+0x5f8>)
 800b3f0:	f008 fd2c 	bl	8013e4c <iprintf>
      off = (u16_t)off32;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b3fa:	4b16      	ldr	r3, [pc, #88]	@ (800b454 <tcp_receive+0x5ec>)
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	891b      	ldrh	r3, [r3, #8]
 800b400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b404:	429a      	cmp	r2, r3
 800b406:	d906      	bls.n	800b416 <tcp_receive+0x5ae>
 800b408:	4b13      	ldr	r3, [pc, #76]	@ (800b458 <tcp_receive+0x5f0>)
 800b40a:	f240 5297 	movw	r2, #1431	@ 0x597
 800b40e:	4916      	ldr	r1, [pc, #88]	@ (800b468 <tcp_receive+0x600>)
 800b410:	4813      	ldr	r0, [pc, #76]	@ (800b460 <tcp_receive+0x5f8>)
 800b412:	f008 fd1b 	bl	8013e4c <iprintf>
      inseg.len -= off;
 800b416:	4b0f      	ldr	r3, [pc, #60]	@ (800b454 <tcp_receive+0x5ec>)
 800b418:	891a      	ldrh	r2, [r3, #8]
 800b41a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	b29a      	uxth	r2, r3
 800b422:	4b0c      	ldr	r3, [pc, #48]	@ (800b454 <tcp_receive+0x5ec>)
 800b424:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b426:	4b0b      	ldr	r3, [pc, #44]	@ (800b454 <tcp_receive+0x5ec>)
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	891a      	ldrh	r2, [r3, #8]
 800b42c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b434:	e02a      	b.n	800b48c <tcp_receive+0x624>
 800b436:	bf00      	nop
 800b438:	080192c0 	.word	0x080192c0
 800b43c:	080192c8 	.word	0x080192c8
 800b440:	20008014 	.word	0x20008014
 800b444:	20008010 	.word	0x20008010
 800b448:	20007fd4 	.word	0x20007fd4
 800b44c:	20008016 	.word	0x20008016
 800b450:	2000800c 	.word	0x2000800c
 800b454:	20007fec 	.word	0x20007fec
 800b458:	08018f58 	.word	0x08018f58
 800b45c:	080192d0 	.word	0x080192d0
 800b460:	08018fa4 	.word	0x08018fa4
 800b464:	080192e0 	.word	0x080192e0
 800b468:	080192f0 	.word	0x080192f0
        off -= p->len;
 800b46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b46e:	895b      	ldrh	r3, [r3, #10]
 800b470:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b47a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b47c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b47e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b482:	2200      	movs	r2, #0
 800b484:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b48c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b48e:	895b      	ldrh	r3, [r3, #10]
 800b490:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b494:	429a      	cmp	r2, r3
 800b496:	d8e9      	bhi.n	800b46c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b49c:	4619      	mov	r1, r3
 800b49e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b4a0:	f7fc f85a 	bl	8007558 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a8:	4a90      	ldr	r2, [pc, #576]	@ (800b6ec <tcp_receive+0x884>)
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	4b90      	ldr	r3, [pc, #576]	@ (800b6f0 <tcp_receive+0x888>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	4a8e      	ldr	r2, [pc, #568]	@ (800b6ec <tcp_receive+0x884>)
 800b4b2:	6812      	ldr	r2, [r2, #0]
 800b4b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b4b6:	e00d      	b.n	800b4d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b4b8:	4b8c      	ldr	r3, [pc, #560]	@ (800b6ec <tcp_receive+0x884>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	da06      	bge.n	800b4d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	8b5b      	ldrh	r3, [r3, #26]
 800b4ca:	f043 0302 	orr.w	r3, r3, #2
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4d4:	4b85      	ldr	r3, [pc, #532]	@ (800b6ec <tcp_receive+0x884>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f2c0 8427 	blt.w	800bd32 <tcp_receive+0xeca>
 800b4e4:	4b81      	ldr	r3, [pc, #516]	@ (800b6ec <tcp_receive+0x884>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b4f0:	440b      	add	r3, r1
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	f300 841b 	bgt.w	800bd32 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b500:	4b7a      	ldr	r3, [pc, #488]	@ (800b6ec <tcp_receive+0x884>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	f040 8298 	bne.w	800ba3a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b50a:	4b79      	ldr	r3, [pc, #484]	@ (800b6f0 <tcp_receive+0x888>)
 800b50c:	891c      	ldrh	r4, [r3, #8]
 800b50e:	4b78      	ldr	r3, [pc, #480]	@ (800b6f0 <tcp_receive+0x888>)
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	899b      	ldrh	r3, [r3, #12]
 800b514:	b29b      	uxth	r3, r3
 800b516:	4618      	mov	r0, r3
 800b518:	f7fa fd16 	bl	8005f48 <lwip_htons>
 800b51c:	4603      	mov	r3, r0
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	f003 0303 	and.w	r3, r3, #3
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <tcp_receive+0x6c4>
 800b528:	2301      	movs	r3, #1
 800b52a:	e000      	b.n	800b52e <tcp_receive+0x6c6>
 800b52c:	2300      	movs	r3, #0
 800b52e:	4423      	add	r3, r4
 800b530:	b29a      	uxth	r2, r3
 800b532:	4b70      	ldr	r3, [pc, #448]	@ (800b6f4 <tcp_receive+0x88c>)
 800b534:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b53a:	4b6e      	ldr	r3, [pc, #440]	@ (800b6f4 <tcp_receive+0x88c>)
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d274      	bcs.n	800b62c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b542:	4b6b      	ldr	r3, [pc, #428]	@ (800b6f0 <tcp_receive+0x888>)
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	899b      	ldrh	r3, [r3, #12]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7fa fcfc 	bl	8005f48 <lwip_htons>
 800b550:	4603      	mov	r3, r0
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d01e      	beq.n	800b59a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b55c:	4b64      	ldr	r3, [pc, #400]	@ (800b6f0 <tcp_receive+0x888>)
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	899b      	ldrh	r3, [r3, #12]
 800b562:	b29b      	uxth	r3, r3
 800b564:	b21b      	sxth	r3, r3
 800b566:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b56a:	b21c      	sxth	r4, r3
 800b56c:	4b60      	ldr	r3, [pc, #384]	@ (800b6f0 <tcp_receive+0x888>)
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	899b      	ldrh	r3, [r3, #12]
 800b572:	b29b      	uxth	r3, r3
 800b574:	4618      	mov	r0, r3
 800b576:	f7fa fce7 	bl	8005f48 <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b582:	b29b      	uxth	r3, r3
 800b584:	4618      	mov	r0, r3
 800b586:	f7fa fcdf 	bl	8005f48 <lwip_htons>
 800b58a:	4603      	mov	r3, r0
 800b58c:	b21b      	sxth	r3, r3
 800b58e:	4323      	orrs	r3, r4
 800b590:	b21a      	sxth	r2, r3
 800b592:	4b57      	ldr	r3, [pc, #348]	@ (800b6f0 <tcp_receive+0x888>)
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	b292      	uxth	r2, r2
 800b598:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b59e:	4b54      	ldr	r3, [pc, #336]	@ (800b6f0 <tcp_receive+0x888>)
 800b5a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b5a2:	4b53      	ldr	r3, [pc, #332]	@ (800b6f0 <tcp_receive+0x888>)
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	899b      	ldrh	r3, [r3, #12]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fa fccc 	bl	8005f48 <lwip_htons>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <tcp_receive+0x760>
            inseg.len -= 1;
 800b5bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b6f0 <tcp_receive+0x888>)
 800b5be:	891b      	ldrh	r3, [r3, #8]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	4b4a      	ldr	r3, [pc, #296]	@ (800b6f0 <tcp_receive+0x888>)
 800b5c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b5c8:	4b49      	ldr	r3, [pc, #292]	@ (800b6f0 <tcp_receive+0x888>)
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	4a48      	ldr	r2, [pc, #288]	@ (800b6f0 <tcp_receive+0x888>)
 800b5ce:	8912      	ldrh	r2, [r2, #8]
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fb fec0 	bl	8007358 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b5d8:	4b45      	ldr	r3, [pc, #276]	@ (800b6f0 <tcp_receive+0x888>)
 800b5da:	891c      	ldrh	r4, [r3, #8]
 800b5dc:	4b44      	ldr	r3, [pc, #272]	@ (800b6f0 <tcp_receive+0x888>)
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	899b      	ldrh	r3, [r3, #12]
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fa fcaf 	bl	8005f48 <lwip_htons>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <tcp_receive+0x792>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <tcp_receive+0x794>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4423      	add	r3, r4
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	4b3c      	ldr	r3, [pc, #240]	@ (800b6f4 <tcp_receive+0x88c>)
 800b602:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b604:	4b3b      	ldr	r3, [pc, #236]	@ (800b6f4 <tcp_receive+0x88c>)
 800b606:	881b      	ldrh	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	4b38      	ldr	r3, [pc, #224]	@ (800b6ec <tcp_receive+0x884>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	441a      	add	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b618:	440b      	add	r3, r1
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d006      	beq.n	800b62c <tcp_receive+0x7c4>
 800b61e:	4b36      	ldr	r3, [pc, #216]	@ (800b6f8 <tcp_receive+0x890>)
 800b620:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b624:	4935      	ldr	r1, [pc, #212]	@ (800b6fc <tcp_receive+0x894>)
 800b626:	4836      	ldr	r0, [pc, #216]	@ (800b700 <tcp_receive+0x898>)
 800b628:	f008 fc10 	bl	8013e4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 80e6 	beq.w	800b802 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b636:	4b2e      	ldr	r3, [pc, #184]	@ (800b6f0 <tcp_receive+0x888>)
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	899b      	ldrh	r3, [r3, #12]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fa fc82 	bl	8005f48 <lwip_htons>
 800b644:	4603      	mov	r3, r0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d010      	beq.n	800b672 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b650:	e00a      	b.n	800b668 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b656:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7fd fcdd 	bl	8009022 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1f0      	bne.n	800b652 <tcp_receive+0x7ea>
 800b670:	e0c7      	b.n	800b802 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b678:	e051      	b.n	800b71e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	899b      	ldrh	r3, [r3, #12]
 800b680:	b29b      	uxth	r3, r3
 800b682:	4618      	mov	r0, r3
 800b684:	f7fa fc60 	bl	8005f48 <lwip_htons>
 800b688:	4603      	mov	r3, r0
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d03c      	beq.n	800b70e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b694:	4b16      	ldr	r3, [pc, #88]	@ (800b6f0 <tcp_receive+0x888>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	899b      	ldrh	r3, [r3, #12]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fa fc53 	bl	8005f48 <lwip_htons>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d12f      	bne.n	800b70e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b6ae:	4b10      	ldr	r3, [pc, #64]	@ (800b6f0 <tcp_receive+0x888>)
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	899b      	ldrh	r3, [r3, #12]
 800b6b4:	b29c      	uxth	r4, r3
 800b6b6:	2001      	movs	r0, #1
 800b6b8:	f7fa fc46 	bl	8005f48 <lwip_htons>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	461a      	mov	r2, r3
 800b6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f0 <tcp_receive+0x888>)
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	4322      	orrs	r2, r4
 800b6c6:	b292      	uxth	r2, r2
 800b6c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b6ca:	4b09      	ldr	r3, [pc, #36]	@ (800b6f0 <tcp_receive+0x888>)
 800b6cc:	891c      	ldrh	r4, [r3, #8]
 800b6ce:	4b08      	ldr	r3, [pc, #32]	@ (800b6f0 <tcp_receive+0x888>)
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	899b      	ldrh	r3, [r3, #12]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fa fc36 	bl	8005f48 <lwip_htons>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	f003 0303 	and.w	r3, r3, #3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00d      	beq.n	800b704 <tcp_receive+0x89c>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e00c      	b.n	800b706 <tcp_receive+0x89e>
 800b6ec:	2000800c 	.word	0x2000800c
 800b6f0:	20007fec 	.word	0x20007fec
 800b6f4:	20008016 	.word	0x20008016
 800b6f8:	08018f58 	.word	0x08018f58
 800b6fc:	08019300 	.word	0x08019300
 800b700:	08018fa4 	.word	0x08018fa4
 800b704:	2300      	movs	r3, #0
 800b706:	4423      	add	r3, r4
 800b708:	b29a      	uxth	r2, r3
 800b70a:	4b98      	ldr	r3, [pc, #608]	@ (800b96c <tcp_receive+0xb04>)
 800b70c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b710:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b718:	6938      	ldr	r0, [r7, #16]
 800b71a:	f7fd fc82 	bl	8009022 <tcp_seg_free>
            while (next &&
 800b71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00e      	beq.n	800b742 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b724:	4b91      	ldr	r3, [pc, #580]	@ (800b96c <tcp_receive+0xb04>)
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	4b91      	ldr	r3, [pc, #580]	@ (800b970 <tcp_receive+0xb08>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	441a      	add	r2, r3
 800b730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b738:	8909      	ldrh	r1, [r1, #8]
 800b73a:	440b      	add	r3, r1
 800b73c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b73e:	2b00      	cmp	r3, #0
 800b740:	da9b      	bge.n	800b67a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d059      	beq.n	800b7fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b748:	4b88      	ldr	r3, [pc, #544]	@ (800b96c <tcp_receive+0xb04>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b88      	ldr	r3, [pc, #544]	@ (800b970 <tcp_receive+0xb08>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	441a      	add	r2, r3
 800b754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd4d      	ble.n	800b7fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	b29a      	uxth	r2, r3
 800b768:	4b81      	ldr	r3, [pc, #516]	@ (800b970 <tcp_receive+0xb08>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	b29a      	uxth	r2, r3
 800b772:	4b80      	ldr	r3, [pc, #512]	@ (800b974 <tcp_receive+0xb0c>)
 800b774:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b776:	4b7f      	ldr	r3, [pc, #508]	@ (800b974 <tcp_receive+0xb0c>)
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	899b      	ldrh	r3, [r3, #12]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fa fbe2 	bl	8005f48 <lwip_htons>
 800b784:	4603      	mov	r3, r0
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f003 0302 	and.w	r3, r3, #2
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <tcp_receive+0x934>
                inseg.len -= 1;
 800b790:	4b78      	ldr	r3, [pc, #480]	@ (800b974 <tcp_receive+0xb0c>)
 800b792:	891b      	ldrh	r3, [r3, #8]
 800b794:	3b01      	subs	r3, #1
 800b796:	b29a      	uxth	r2, r3
 800b798:	4b76      	ldr	r3, [pc, #472]	@ (800b974 <tcp_receive+0xb0c>)
 800b79a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b79c:	4b75      	ldr	r3, [pc, #468]	@ (800b974 <tcp_receive+0xb0c>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	4a74      	ldr	r2, [pc, #464]	@ (800b974 <tcp_receive+0xb0c>)
 800b7a2:	8912      	ldrh	r2, [r2, #8]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fb fdd6 	bl	8007358 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b7ac:	4b71      	ldr	r3, [pc, #452]	@ (800b974 <tcp_receive+0xb0c>)
 800b7ae:	891c      	ldrh	r4, [r3, #8]
 800b7b0:	4b70      	ldr	r3, [pc, #448]	@ (800b974 <tcp_receive+0xb0c>)
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	899b      	ldrh	r3, [r3, #12]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fa fbc5 	bl	8005f48 <lwip_htons>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d001      	beq.n	800b7ce <tcp_receive+0x966>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e000      	b.n	800b7d0 <tcp_receive+0x968>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4423      	add	r3, r4
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	4b65      	ldr	r3, [pc, #404]	@ (800b96c <tcp_receive+0xb04>)
 800b7d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b7d8:	4b64      	ldr	r3, [pc, #400]	@ (800b96c <tcp_receive+0xb04>)
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4b64      	ldr	r3, [pc, #400]	@ (800b970 <tcp_receive+0xb08>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	441a      	add	r2, r3
 800b7e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d006      	beq.n	800b7fc <tcp_receive+0x994>
 800b7ee:	4b62      	ldr	r3, [pc, #392]	@ (800b978 <tcp_receive+0xb10>)
 800b7f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b7f4:	4961      	ldr	r1, [pc, #388]	@ (800b97c <tcp_receive+0xb14>)
 800b7f6:	4862      	ldr	r0, [pc, #392]	@ (800b980 <tcp_receive+0xb18>)
 800b7f8:	f008 fb28 	bl	8013e4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b800:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b802:	4b5a      	ldr	r3, [pc, #360]	@ (800b96c <tcp_receive+0xb04>)
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	4b59      	ldr	r3, [pc, #356]	@ (800b970 <tcp_receive+0xb08>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	441a      	add	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b816:	4b55      	ldr	r3, [pc, #340]	@ (800b96c <tcp_receive+0xb04>)
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d206      	bcs.n	800b82c <tcp_receive+0x9c4>
 800b81e:	4b56      	ldr	r3, [pc, #344]	@ (800b978 <tcp_receive+0xb10>)
 800b820:	f240 6207 	movw	r2, #1543	@ 0x607
 800b824:	4957      	ldr	r1, [pc, #348]	@ (800b984 <tcp_receive+0xb1c>)
 800b826:	4856      	ldr	r0, [pc, #344]	@ (800b980 <tcp_receive+0xb18>)
 800b828:	f008 fb10 	bl	8013e4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b830:	4b4e      	ldr	r3, [pc, #312]	@ (800b96c <tcp_receive+0xb04>)
 800b832:	881b      	ldrh	r3, [r3, #0]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	b29a      	uxth	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7fc fdb1 	bl	80083a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b842:	4b4c      	ldr	r3, [pc, #304]	@ (800b974 <tcp_receive+0xb0c>)
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	891b      	ldrh	r3, [r3, #8]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b84c:	4b49      	ldr	r3, [pc, #292]	@ (800b974 <tcp_receive+0xb0c>)
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	4a4d      	ldr	r2, [pc, #308]	@ (800b988 <tcp_receive+0xb20>)
 800b852:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b854:	4b47      	ldr	r3, [pc, #284]	@ (800b974 <tcp_receive+0xb0c>)
 800b856:	2200      	movs	r2, #0
 800b858:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b85a:	4b46      	ldr	r3, [pc, #280]	@ (800b974 <tcp_receive+0xb0c>)
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	899b      	ldrh	r3, [r3, #12]
 800b860:	b29b      	uxth	r3, r3
 800b862:	4618      	mov	r0, r3
 800b864:	f7fa fb70 	bl	8005f48 <lwip_htons>
 800b868:	4603      	mov	r3, r0
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80b8 	beq.w	800b9e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b876:	4b45      	ldr	r3, [pc, #276]	@ (800b98c <tcp_receive+0xb24>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f043 0320 	orr.w	r3, r3, #32
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	4b42      	ldr	r3, [pc, #264]	@ (800b98c <tcp_receive+0xb24>)
 800b882:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b884:	e0af      	b.n	800b9e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b88a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4a36      	ldr	r2, [pc, #216]	@ (800b970 <tcp_receive+0xb08>)
 800b896:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	891b      	ldrh	r3, [r3, #8]
 800b89c:	461c      	mov	r4, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	899b      	ldrh	r3, [r3, #12]
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fa fb4e 	bl	8005f48 <lwip_htons>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	f003 0303 	and.w	r3, r3, #3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <tcp_receive+0xa54>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e000      	b.n	800b8be <tcp_receive+0xa56>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	191a      	adds	r2, r3, r4
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c4:	441a      	add	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8ce:	461c      	mov	r4, r3
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	891b      	ldrh	r3, [r3, #8]
 800b8d4:	461d      	mov	r5, r3
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	899b      	ldrh	r3, [r3, #12]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7fa fb32 	bl	8005f48 <lwip_htons>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	f003 0303 	and.w	r3, r3, #3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <tcp_receive+0xa8c>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <tcp_receive+0xa8e>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	442b      	add	r3, r5
 800b8f8:	429c      	cmp	r4, r3
 800b8fa:	d206      	bcs.n	800b90a <tcp_receive+0xaa2>
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	@ (800b978 <tcp_receive+0xb10>)
 800b8fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b902:	4923      	ldr	r1, [pc, #140]	@ (800b990 <tcp_receive+0xb28>)
 800b904:	481e      	ldr	r0, [pc, #120]	@ (800b980 <tcp_receive+0xb18>)
 800b906:	f008 faa1 	bl	8013e4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	891b      	ldrh	r3, [r3, #8]
 800b90e:	461c      	mov	r4, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	899b      	ldrh	r3, [r3, #12]
 800b916:	b29b      	uxth	r3, r3
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fa fb15 	bl	8005f48 <lwip_htons>
 800b91e:	4603      	mov	r3, r0
 800b920:	b2db      	uxtb	r3, r3
 800b922:	f003 0303 	and.w	r3, r3, #3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <tcp_receive+0xac6>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <tcp_receive+0xac8>
 800b92e:	2300      	movs	r3, #0
 800b930:	1919      	adds	r1, r3, r4
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b936:	b28b      	uxth	r3, r1
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7fc fd2f 	bl	80083a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	891b      	ldrh	r3, [r3, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d028      	beq.n	800b9a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b950:	4b0d      	ldr	r3, [pc, #52]	@ (800b988 <tcp_receive+0xb20>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01d      	beq.n	800b994 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b958:	4b0b      	ldr	r3, [pc, #44]	@ (800b988 <tcp_receive+0xb20>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4619      	mov	r1, r3
 800b962:	4610      	mov	r0, r2
 800b964:	f7fb ff40 	bl	80077e8 <pbuf_cat>
 800b968:	e018      	b.n	800b99c <tcp_receive+0xb34>
 800b96a:	bf00      	nop
 800b96c:	20008016 	.word	0x20008016
 800b970:	2000800c 	.word	0x2000800c
 800b974:	20007fec 	.word	0x20007fec
 800b978:	08018f58 	.word	0x08018f58
 800b97c:	08019338 	.word	0x08019338
 800b980:	08018fa4 	.word	0x08018fa4
 800b984:	08019374 	.word	0x08019374
 800b988:	2000801c 	.word	0x2000801c
 800b98c:	20008019 	.word	0x20008019
 800b990:	08019394 	.word	0x08019394
            } else {
              recv_data = cseg->p;
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	4a70      	ldr	r2, [pc, #448]	@ (800bb5c <tcp_receive+0xcf4>)
 800b99a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fa facc 	bl	8005f48 <lwip_htons>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00d      	beq.n	800b9d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b9bc:	4b68      	ldr	r3, [pc, #416]	@ (800bb60 <tcp_receive+0xcf8>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f043 0320 	orr.w	r3, r3, #32
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b66      	ldr	r3, [pc, #408]	@ (800bb60 <tcp_receive+0xcf8>)
 800b9c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7d1b      	ldrb	r3, [r3, #20]
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d102      	bne.n	800b9d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2207      	movs	r2, #7
 800b9d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	f7fd fb1e 	bl	8009022 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d008      	beq.n	800ba00 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	f43f af43 	beq.w	800b886 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	8b5b      	ldrh	r3, [r3, #26]
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00e      	beq.n	800ba2a <tcp_receive+0xbc2>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	8b5b      	ldrh	r3, [r3, #26]
 800ba10:	f023 0301 	bic.w	r3, r3, #1
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	835a      	strh	r2, [r3, #26]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	8b5b      	ldrh	r3, [r3, #26]
 800ba1e:	f043 0302 	orr.w	r3, r3, #2
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba28:	e187      	b.n	800bd3a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	8b5b      	ldrh	r3, [r3, #26]
 800ba2e:	f043 0301 	orr.w	r3, r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba38:	e17f      	b.n	800bd3a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ba42:	4848      	ldr	r0, [pc, #288]	@ (800bb64 <tcp_receive+0xcfc>)
 800ba44:	f7fd fb06 	bl	8009054 <tcp_seg_copy>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba4e:	e16c      	b.n	800bd2a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba5a:	e156      	b.n	800bd0a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	4b41      	ldr	r3, [pc, #260]	@ (800bb68 <tcp_receive+0xd00>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d11d      	bne.n	800baa6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ba6a:	4b3e      	ldr	r3, [pc, #248]	@ (800bb64 <tcp_receive+0xcfc>)
 800ba6c:	891a      	ldrh	r2, [r3, #8]
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba70:	891b      	ldrh	r3, [r3, #8]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	f240 814e 	bls.w	800bd14 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba78:	483a      	ldr	r0, [pc, #232]	@ (800bb64 <tcp_receive+0xcfc>)
 800ba7a:	f7fd faeb 	bl	8009054 <tcp_seg_copy>
 800ba7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8148 	beq.w	800bd18 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ba88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	e002      	b.n	800ba9c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba9e:	6978      	ldr	r0, [r7, #20]
 800baa0:	f7ff f8de 	bl	800ac60 <tcp_oos_insert_segment>
                }
                break;
 800baa4:	e138      	b.n	800bd18 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800baa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d117      	bne.n	800badc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800baac:	4b2e      	ldr	r3, [pc, #184]	@ (800bb68 <tcp_receive+0xd00>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	da57      	bge.n	800bb6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800babc:	4829      	ldr	r0, [pc, #164]	@ (800bb64 <tcp_receive+0xcfc>)
 800babe:	f7fd fac9 	bl	8009054 <tcp_seg_copy>
 800bac2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 8128 	beq.w	800bd1c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bad2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bad4:	69b8      	ldr	r0, [r7, #24]
 800bad6:	f7ff f8c3 	bl	800ac60 <tcp_oos_insert_segment>
                  }
                  break;
 800bada:	e11f      	b.n	800bd1c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800badc:	4b22      	ldr	r3, [pc, #136]	@ (800bb68 <tcp_receive+0xd00>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	3b01      	subs	r3, #1
 800baea:	2b00      	cmp	r3, #0
 800baec:	db3e      	blt.n	800bb6c <tcp_receive+0xd04>
 800baee:	4b1e      	ldr	r3, [pc, #120]	@ (800bb68 <tcp_receive+0xd00>)
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	3301      	adds	r3, #1
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dc35      	bgt.n	800bb6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bb00:	4818      	ldr	r0, [pc, #96]	@ (800bb64 <tcp_receive+0xcfc>)
 800bb02:	f7fd faa7 	bl	8009054 <tcp_seg_copy>
 800bb06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f000 8108 	beq.w	800bd20 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb18:	8912      	ldrh	r2, [r2, #8]
 800bb1a:	441a      	add	r2, r3
 800bb1c:	4b12      	ldr	r3, [pc, #72]	@ (800bb68 <tcp_receive+0xd00>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dd12      	ble.n	800bb4c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bb26:	4b10      	ldr	r3, [pc, #64]	@ (800bb68 <tcp_receive+0xd00>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb42:	891b      	ldrh	r3, [r3, #8]
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fb fc06 	bl	8007358 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bb52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb54:	69f8      	ldr	r0, [r7, #28]
 800bb56:	f7ff f883 	bl	800ac60 <tcp_oos_insert_segment>
                  }
                  break;
 800bb5a:	e0e1      	b.n	800bd20 <tcp_receive+0xeb8>
 800bb5c:	2000801c 	.word	0x2000801c
 800bb60:	20008019 	.word	0x20008019
 800bb64:	20007fec 	.word	0x20007fec
 800bb68:	2000800c 	.word	0x2000800c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f040 80c5 	bne.w	800bd04 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bb7a:	4b7f      	ldr	r3, [pc, #508]	@ (800bd78 <tcp_receive+0xf10>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f340 80bc 	ble.w	800bd04 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	899b      	ldrh	r3, [r3, #12]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fa f9d7 	bl	8005f48 <lwip_htons>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0301 	and.w	r3, r3, #1
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f040 80be 	bne.w	800bd24 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bba8:	4874      	ldr	r0, [pc, #464]	@ (800bd7c <tcp_receive+0xf14>)
 800bbaa:	f7fd fa53 	bl	8009054 <tcp_seg_copy>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 80b5 	beq.w	800bd28 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbc6:	8912      	ldrh	r2, [r2, #8]
 800bbc8:	441a      	add	r2, r3
 800bbca:	4b6b      	ldr	r3, [pc, #428]	@ (800bd78 <tcp_receive+0xf10>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dd12      	ble.n	800bbfa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bbd4:	4b68      	ldr	r3, [pc, #416]	@ (800bd78 <tcp_receive+0xf10>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf0:	891b      	ldrh	r3, [r3, #8]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f7fb fbaf 	bl	8007358 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bbfa:	4b61      	ldr	r3, [pc, #388]	@ (800bd80 <tcp_receive+0xf18>)
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4b5d      	ldr	r3, [pc, #372]	@ (800bd78 <tcp_receive+0xf10>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	441a      	add	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc0e:	440b      	add	r3, r1
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f340 8088 	ble.w	800bd28 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	899b      	ldrh	r3, [r3, #12]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fa f990 	bl	8005f48 <lwip_htons>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d021      	beq.n	800bc78 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	899b      	ldrh	r3, [r3, #12]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	b21b      	sxth	r3, r3
 800bc40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bc44:	b21c      	sxth	r4, r3
 800bc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	899b      	ldrh	r3, [r3, #12]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fa f979 	bl	8005f48 <lwip_htons>
 800bc56:	4603      	mov	r3, r0
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fa f971 	bl	8005f48 <lwip_htons>
 800bc66:	4603      	mov	r3, r0
 800bc68:	b21b      	sxth	r3, r3
 800bc6a:	4323      	orrs	r3, r4
 800bc6c:	b21a      	sxth	r2, r3
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	b292      	uxth	r2, r2
 800bc76:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc82:	4413      	add	r3, r2
 800bc84:	b299      	uxth	r1, r3
 800bc86:	4b3c      	ldr	r3, [pc, #240]	@ (800bd78 <tcp_receive+0xf10>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	1a8a      	subs	r2, r1, r2
 800bc92:	b292      	uxth	r2, r2
 800bc94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685a      	ldr	r2, [r3, #4]
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	891b      	ldrh	r3, [r3, #8]
 800bca2:	4619      	mov	r1, r3
 800bca4:	4610      	mov	r0, r2
 800bca6:	f7fb fb57 	bl	8007358 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	891c      	ldrh	r4, [r3, #8]
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	899b      	ldrh	r3, [r3, #12]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fa f944 	bl	8005f48 <lwip_htons>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0303 	and.w	r3, r3, #3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <tcp_receive+0xe68>
 800bccc:	2301      	movs	r3, #1
 800bcce:	e000      	b.n	800bcd2 <tcp_receive+0xe6a>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4423      	add	r3, r4
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	4b2a      	ldr	r3, [pc, #168]	@ (800bd80 <tcp_receive+0xf18>)
 800bcd8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bcda:	4b29      	ldr	r3, [pc, #164]	@ (800bd80 <tcp_receive+0xf18>)
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	461a      	mov	r2, r3
 800bce0:	4b25      	ldr	r3, [pc, #148]	@ (800bd78 <tcp_receive+0xf10>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	441a      	add	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bcee:	440b      	add	r3, r1
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d019      	beq.n	800bd28 <tcp_receive+0xec0>
 800bcf4:	4b23      	ldr	r3, [pc, #140]	@ (800bd84 <tcp_receive+0xf1c>)
 800bcf6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bcfa:	4923      	ldr	r1, [pc, #140]	@ (800bd88 <tcp_receive+0xf20>)
 800bcfc:	4823      	ldr	r0, [pc, #140]	@ (800bd8c <tcp_receive+0xf24>)
 800bcfe:	f008 f8a5 	bl	8013e4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bd02:	e011      	b.n	800bd28 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f47f aea5 	bne.w	800ba5c <tcp_receive+0xbf4>
 800bd12:	e00a      	b.n	800bd2a <tcp_receive+0xec2>
                break;
 800bd14:	bf00      	nop
 800bd16:	e008      	b.n	800bd2a <tcp_receive+0xec2>
                break;
 800bd18:	bf00      	nop
 800bd1a:	e006      	b.n	800bd2a <tcp_receive+0xec2>
                  break;
 800bd1c:	bf00      	nop
 800bd1e:	e004      	b.n	800bd2a <tcp_receive+0xec2>
                  break;
 800bd20:	bf00      	nop
 800bd22:	e002      	b.n	800bd2a <tcp_receive+0xec2>
                  break;
 800bd24:	bf00      	nop
 800bd26:	e000      	b.n	800bd2a <tcp_receive+0xec2>
                break;
 800bd28:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f001 fe86 	bl	800da3c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bd30:	e003      	b.n	800bd3a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f001 fe82 	bl	800da3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd38:	e01a      	b.n	800bd70 <tcp_receive+0xf08>
 800bd3a:	e019      	b.n	800bd70 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bd3c:	4b0e      	ldr	r3, [pc, #56]	@ (800bd78 <tcp_receive+0xf10>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	db0a      	blt.n	800bd60 <tcp_receive+0xef8>
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd78 <tcp_receive+0xf10>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bd56:	440b      	add	r3, r1
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dd07      	ble.n	800bd70 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	8b5b      	ldrh	r3, [r3, #26]
 800bd64:	f043 0302 	orr.w	r3, r3, #2
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bd6e:	e7ff      	b.n	800bd70 <tcp_receive+0xf08>
 800bd70:	bf00      	nop
 800bd72:	3750      	adds	r7, #80	@ 0x50
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bdb0      	pop	{r4, r5, r7, pc}
 800bd78:	2000800c 	.word	0x2000800c
 800bd7c:	20007fec 	.word	0x20007fec
 800bd80:	20008016 	.word	0x20008016
 800bd84:	08018f58 	.word	0x08018f58
 800bd88:	08019300 	.word	0x08019300
 800bd8c:	08018fa4 	.word	0x08018fa4

0800bd90 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bd96:	4b15      	ldr	r3, [pc, #84]	@ (800bdec <tcp_get_next_optbyte+0x5c>)
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	b291      	uxth	r1, r2
 800bd9e:	4a13      	ldr	r2, [pc, #76]	@ (800bdec <tcp_get_next_optbyte+0x5c>)
 800bda0:	8011      	strh	r1, [r2, #0]
 800bda2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bda4:	4b12      	ldr	r3, [pc, #72]	@ (800bdf0 <tcp_get_next_optbyte+0x60>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d004      	beq.n	800bdb6 <tcp_get_next_optbyte+0x26>
 800bdac:	4b11      	ldr	r3, [pc, #68]	@ (800bdf4 <tcp_get_next_optbyte+0x64>)
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	88fa      	ldrh	r2, [r7, #6]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d208      	bcs.n	800bdc8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bdb6:	4b10      	ldr	r3, [pc, #64]	@ (800bdf8 <tcp_get_next_optbyte+0x68>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	3314      	adds	r3, #20
 800bdbc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	e00b      	b.n	800bde0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	4b09      	ldr	r3, [pc, #36]	@ (800bdf4 <tcp_get_next_optbyte+0x64>)
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bdd6:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <tcp_get_next_optbyte+0x60>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	797b      	ldrb	r3, [r7, #5]
 800bddc:	4413      	add	r3, r2
 800bdde:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	20008008 	.word	0x20008008
 800bdf0:	20008004 	.word	0x20008004
 800bdf4:	20008002 	.word	0x20008002
 800bdf8:	20007ffc 	.word	0x20007ffc

0800bdfc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d106      	bne.n	800be18 <tcp_parseopt+0x1c>
 800be0a:	4b32      	ldr	r3, [pc, #200]	@ (800bed4 <tcp_parseopt+0xd8>)
 800be0c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800be10:	4931      	ldr	r1, [pc, #196]	@ (800bed8 <tcp_parseopt+0xdc>)
 800be12:	4832      	ldr	r0, [pc, #200]	@ (800bedc <tcp_parseopt+0xe0>)
 800be14:	f008 f81a 	bl	8013e4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800be18:	4b31      	ldr	r3, [pc, #196]	@ (800bee0 <tcp_parseopt+0xe4>)
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d056      	beq.n	800bece <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be20:	4b30      	ldr	r3, [pc, #192]	@ (800bee4 <tcp_parseopt+0xe8>)
 800be22:	2200      	movs	r2, #0
 800be24:	801a      	strh	r2, [r3, #0]
 800be26:	e046      	b.n	800beb6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800be28:	f7ff ffb2 	bl	800bd90 <tcp_get_next_optbyte>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d006      	beq.n	800be44 <tcp_parseopt+0x48>
 800be36:	2b02      	cmp	r3, #2
 800be38:	dc2a      	bgt.n	800be90 <tcp_parseopt+0x94>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d042      	beq.n	800bec4 <tcp_parseopt+0xc8>
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d038      	beq.n	800beb4 <tcp_parseopt+0xb8>
 800be42:	e025      	b.n	800be90 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800be44:	f7ff ffa4 	bl	800bd90 <tcp_get_next_optbyte>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b04      	cmp	r3, #4
 800be4c:	d13c      	bne.n	800bec8 <tcp_parseopt+0xcc>
 800be4e:	4b25      	ldr	r3, [pc, #148]	@ (800bee4 <tcp_parseopt+0xe8>)
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a22      	ldr	r2, [pc, #136]	@ (800bee0 <tcp_parseopt+0xe4>)
 800be56:	8812      	ldrh	r2, [r2, #0]
 800be58:	4293      	cmp	r3, r2
 800be5a:	da35      	bge.n	800bec8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800be5c:	f7ff ff98 	bl	800bd90 <tcp_get_next_optbyte>
 800be60:	4603      	mov	r3, r0
 800be62:	021b      	lsls	r3, r3, #8
 800be64:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800be66:	f7ff ff93 	bl	800bd90 <tcp_get_next_optbyte>
 800be6a:	4603      	mov	r3, r0
 800be6c:	461a      	mov	r2, r3
 800be6e:	89bb      	ldrh	r3, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800be74:	89bb      	ldrh	r3, [r7, #12]
 800be76:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800be7a:	d804      	bhi.n	800be86 <tcp_parseopt+0x8a>
 800be7c:	89bb      	ldrh	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <tcp_parseopt+0x8a>
 800be82:	89ba      	ldrh	r2, [r7, #12]
 800be84:	e001      	b.n	800be8a <tcp_parseopt+0x8e>
 800be86:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800be8e:	e012      	b.n	800beb6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800be90:	f7ff ff7e 	bl	800bd90 <tcp_get_next_optbyte>
 800be94:	4603      	mov	r3, r0
 800be96:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d916      	bls.n	800becc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800be9e:	7afb      	ldrb	r3, [r7, #11]
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	4b10      	ldr	r3, [pc, #64]	@ (800bee4 <tcp_parseopt+0xe8>)
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	4413      	add	r3, r2
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	3b02      	subs	r3, #2
 800beac:	b29a      	uxth	r2, r3
 800beae:	4b0d      	ldr	r3, [pc, #52]	@ (800bee4 <tcp_parseopt+0xe8>)
 800beb0:	801a      	strh	r2, [r3, #0]
 800beb2:	e000      	b.n	800beb6 <tcp_parseopt+0xba>
          break;
 800beb4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800beb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bee4 <tcp_parseopt+0xe8>)
 800beb8:	881a      	ldrh	r2, [r3, #0]
 800beba:	4b09      	ldr	r3, [pc, #36]	@ (800bee0 <tcp_parseopt+0xe4>)
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d3b2      	bcc.n	800be28 <tcp_parseopt+0x2c>
 800bec2:	e004      	b.n	800bece <tcp_parseopt+0xd2>
          return;
 800bec4:	bf00      	nop
 800bec6:	e002      	b.n	800bece <tcp_parseopt+0xd2>
            return;
 800bec8:	bf00      	nop
 800beca:	e000      	b.n	800bece <tcp_parseopt+0xd2>
            return;
 800becc:	bf00      	nop
      }
    }
  }
}
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	08018f58 	.word	0x08018f58
 800bed8:	080193bc 	.word	0x080193bc
 800bedc:	08018fa4 	.word	0x08018fa4
 800bee0:	20008000 	.word	0x20008000
 800bee4:	20008008 	.word	0x20008008

0800bee8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bee8:	b480      	push	{r7}
 800beea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800beec:	4b05      	ldr	r3, [pc, #20]	@ (800bf04 <tcp_trigger_input_pcb_close+0x1c>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f043 0310 	orr.w	r3, r3, #16
 800bef4:	b2da      	uxtb	r2, r3
 800bef6:	4b03      	ldr	r3, [pc, #12]	@ (800bf04 <tcp_trigger_input_pcb_close+0x1c>)
 800bef8:	701a      	strb	r2, [r3, #0]
}
 800befa:	bf00      	nop
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	20008019 	.word	0x20008019

0800bf08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <tcp_route+0x28>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	7a1b      	ldrb	r3, [r3, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d006      	beq.n	800bf30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	7a1b      	ldrb	r3, [r3, #8]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fb f83c 	bl	8006fa4 <netif_get_by_index>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	e003      	b.n	800bf38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f005 fc9f 	bl	8011874 <ip4_route>
 800bf36:	4603      	mov	r3, r0
  }
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d105      	bne.n	800bf62 <tcp_create_segment+0x22>
 800bf56:	4b43      	ldr	r3, [pc, #268]	@ (800c064 <tcp_create_segment+0x124>)
 800bf58:	22a3      	movs	r2, #163	@ 0xa3
 800bf5a:	4943      	ldr	r1, [pc, #268]	@ (800c068 <tcp_create_segment+0x128>)
 800bf5c:	4843      	ldr	r0, [pc, #268]	@ (800c06c <tcp_create_segment+0x12c>)
 800bf5e:	f007 ff75 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d105      	bne.n	800bf74 <tcp_create_segment+0x34>
 800bf68:	4b3e      	ldr	r3, [pc, #248]	@ (800c064 <tcp_create_segment+0x124>)
 800bf6a:	22a4      	movs	r2, #164	@ 0xa4
 800bf6c:	4940      	ldr	r1, [pc, #256]	@ (800c070 <tcp_create_segment+0x130>)
 800bf6e:	483f      	ldr	r0, [pc, #252]	@ (800c06c <tcp_create_segment+0x12c>)
 800bf70:	f007 ff6c 	bl	8013e4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 0304 	and.w	r3, r3, #4
 800bf80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bf82:	2003      	movs	r0, #3
 800bf84:	f7fa fc7c 	bl	8006880 <memp_malloc>
 800bf88:	6138      	str	r0, [r7, #16]
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bf90:	68b8      	ldr	r0, [r7, #8]
 800bf92:	f7fb fb67 	bl	8007664 <pbuf_free>
    return NULL;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e060      	b.n	800c05c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bfa0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	891a      	ldrh	r2, [r3, #8]
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d205      	bcs.n	800bfc6 <tcp_create_segment+0x86>
 800bfba:	4b2a      	ldr	r3, [pc, #168]	@ (800c064 <tcp_create_segment+0x124>)
 800bfbc:	22b0      	movs	r2, #176	@ 0xb0
 800bfbe:	492d      	ldr	r1, [pc, #180]	@ (800c074 <tcp_create_segment+0x134>)
 800bfc0:	482a      	ldr	r0, [pc, #168]	@ (800c06c <tcp_create_segment+0x12c>)
 800bfc2:	f007 ff43 	bl	8013e4c <iprintf>
  seg->len = p->tot_len - optlen;
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	891a      	ldrh	r2, [r3, #8]
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bfd6:	2114      	movs	r1, #20
 800bfd8:	68b8      	ldr	r0, [r7, #8]
 800bfda:	f7fb faad 	bl	8007538 <pbuf_add_header>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d004      	beq.n	800bfee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bfe4:	6938      	ldr	r0, [r7, #16]
 800bfe6:	f7fd f81c 	bl	8009022 <tcp_seg_free>
    return NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	e036      	b.n	800c05c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	8ada      	ldrh	r2, [r3, #22]
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	68dc      	ldr	r4, [r3, #12]
 800c000:	4610      	mov	r0, r2
 800c002:	f7f9 ffa1 	bl	8005f48 <lwip_htons>
 800c006:	4603      	mov	r3, r0
 800c008:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	8b1a      	ldrh	r2, [r3, #24]
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	68dc      	ldr	r4, [r3, #12]
 800c012:	4610      	mov	r0, r2
 800c014:	f7f9 ff98 	bl	8005f48 <lwip_htons>
 800c018:	4603      	mov	r3, r0
 800c01a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	68dc      	ldr	r4, [r3, #12]
 800c020:	6838      	ldr	r0, [r7, #0]
 800c022:	f7f9 ffa7 	bl	8005f74 <lwip_htonl>
 800c026:	4603      	mov	r3, r0
 800c028:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c02a:	7dfb      	ldrb	r3, [r7, #23]
 800c02c:	089b      	lsrs	r3, r3, #2
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	3305      	adds	r3, #5
 800c032:	b29b      	uxth	r3, r3
 800c034:	031b      	lsls	r3, r3, #12
 800c036:	b29a      	uxth	r2, r3
 800c038:	79fb      	ldrb	r3, [r7, #7]
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4313      	orrs	r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	68dc      	ldr	r4, [r3, #12]
 800c044:	4610      	mov	r0, r2
 800c046:	f7f9 ff7f 	bl	8005f48 <lwip_htons>
 800c04a:	4603      	mov	r3, r0
 800c04c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	749a      	strb	r2, [r3, #18]
 800c056:	2200      	movs	r2, #0
 800c058:	74da      	strb	r2, [r3, #19]
  return seg;
 800c05a:	693b      	ldr	r3, [r7, #16]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	371c      	adds	r7, #28
 800c060:	46bd      	mov	sp, r7
 800c062:	bd90      	pop	{r4, r7, pc}
 800c064:	080193d8 	.word	0x080193d8
 800c068:	0801940c 	.word	0x0801940c
 800c06c:	0801942c 	.word	0x0801942c
 800c070:	08019454 	.word	0x08019454
 800c074:	08019478 	.word	0x08019478

0800c078 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	607b      	str	r3, [r7, #4]
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]
 800c084:	460b      	mov	r3, r1
 800c086:	81bb      	strh	r3, [r7, #12]
 800c088:	4613      	mov	r3, r2
 800c08a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c08c:	89bb      	ldrh	r3, [r7, #12]
 800c08e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d105      	bne.n	800c0a2 <tcp_pbuf_prealloc+0x2a>
 800c096:	4b30      	ldr	r3, [pc, #192]	@ (800c158 <tcp_pbuf_prealloc+0xe0>)
 800c098:	22e8      	movs	r2, #232	@ 0xe8
 800c09a:	4930      	ldr	r1, [pc, #192]	@ (800c15c <tcp_pbuf_prealloc+0xe4>)
 800c09c:	4830      	ldr	r0, [pc, #192]	@ (800c160 <tcp_pbuf_prealloc+0xe8>)
 800c09e:	f007 fed5 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c0a2:	6a3b      	ldr	r3, [r7, #32]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <tcp_pbuf_prealloc+0x3c>
 800c0a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c158 <tcp_pbuf_prealloc+0xe0>)
 800c0aa:	22e9      	movs	r2, #233	@ 0xe9
 800c0ac:	492d      	ldr	r1, [pc, #180]	@ (800c164 <tcp_pbuf_prealloc+0xec>)
 800c0ae:	482c      	ldr	r0, [pc, #176]	@ (800c160 <tcp_pbuf_prealloc+0xe8>)
 800c0b0:	f007 fecc 	bl	8013e4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c0b4:	89ba      	ldrh	r2, [r7, #12]
 800c0b6:	897b      	ldrh	r3, [r7, #10]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d221      	bcs.n	800c100 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c0bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c0c0:	f003 0302 	and.w	r3, r3, #2
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d111      	bne.n	800c0ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	8b5b      	ldrh	r3, [r3, #26]
 800c0cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d115      	bne.n	800c100 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c0d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d103      	bne.n	800c0ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d009      	beq.n	800c100 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c0ec:	89bb      	ldrh	r3, [r7, #12]
 800c0ee:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800c0f2:	f023 0203 	bic.w	r2, r3, #3
 800c0f6:	897b      	ldrh	r3, [r7, #10]
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	bf28      	it	cs
 800c0fc:	4613      	movcs	r3, r2
 800c0fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c100:	8af9      	ldrh	r1, [r7, #22]
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fa ffc7 	bl	800709c <pbuf_alloc>
 800c10e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d101      	bne.n	800c11a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	e019      	b.n	800c14e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d006      	beq.n	800c130 <tcp_pbuf_prealloc+0xb8>
 800c122:	4b0d      	ldr	r3, [pc, #52]	@ (800c158 <tcp_pbuf_prealloc+0xe0>)
 800c124:	f240 120b 	movw	r2, #267	@ 0x10b
 800c128:	490f      	ldr	r1, [pc, #60]	@ (800c168 <tcp_pbuf_prealloc+0xf0>)
 800c12a:	480d      	ldr	r0, [pc, #52]	@ (800c160 <tcp_pbuf_prealloc+0xe8>)
 800c12c:	f007 fe8e 	bl	8013e4c <iprintf>
  *oversize = p->len - length;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	895a      	ldrh	r2, [r3, #10]
 800c134:	89bb      	ldrh	r3, [r7, #12]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	89ba      	ldrh	r2, [r7, #12]
 800c142:	811a      	strh	r2, [r3, #8]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	891a      	ldrh	r2, [r3, #8]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	815a      	strh	r2, [r3, #10]
  return p;
 800c14c:	693b      	ldr	r3, [r7, #16]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	080193d8 	.word	0x080193d8
 800c15c:	08019490 	.word	0x08019490
 800c160:	0801942c 	.word	0x0801942c
 800c164:	080194b4 	.word	0x080194b4
 800c168:	080194d4 	.word	0x080194d4

0800c16c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <tcp_write_checks+0x20>
 800c17e:	4b33      	ldr	r3, [pc, #204]	@ (800c24c <tcp_write_checks+0xe0>)
 800c180:	f240 1233 	movw	r2, #307	@ 0x133
 800c184:	4932      	ldr	r1, [pc, #200]	@ (800c250 <tcp_write_checks+0xe4>)
 800c186:	4833      	ldr	r0, [pc, #204]	@ (800c254 <tcp_write_checks+0xe8>)
 800c188:	f007 fe60 	bl	8013e4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7d1b      	ldrb	r3, [r3, #20]
 800c190:	2b04      	cmp	r3, #4
 800c192:	d00e      	beq.n	800c1b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c198:	2b07      	cmp	r3, #7
 800c19a:	d00a      	beq.n	800c1b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d006      	beq.n	800c1b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d002      	beq.n	800c1b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c1ac:	f06f 030a 	mvn.w	r3, #10
 800c1b0:	e048      	b.n	800c244 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c1b2:	887b      	ldrh	r3, [r7, #2]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <tcp_write_checks+0x50>
    return ERR_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e043      	b.n	800c244 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c1c2:	887a      	ldrh	r2, [r7, #2]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d909      	bls.n	800c1dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	8b5b      	ldrh	r3, [r3, #26]
 800c1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1da:	e033      	b.n	800c244 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1e2:	2b1e      	cmp	r3, #30
 800c1e4:	d909      	bls.n	800c1fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	e024      	b.n	800c244 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00f      	beq.n	800c224 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d11a      	bne.n	800c242 <tcp_write_checks+0xd6>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d116      	bne.n	800c242 <tcp_write_checks+0xd6>
 800c214:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <tcp_write_checks+0xe0>)
 800c216:	f240 1255 	movw	r2, #341	@ 0x155
 800c21a:	490f      	ldr	r1, [pc, #60]	@ (800c258 <tcp_write_checks+0xec>)
 800c21c:	480d      	ldr	r0, [pc, #52]	@ (800c254 <tcp_write_checks+0xe8>)
 800c21e:	f007 fe15 	bl	8013e4c <iprintf>
 800c222:	e00e      	b.n	800c242 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <tcp_write_checks+0xc8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <tcp_write_checks+0xd6>
 800c234:	4b05      	ldr	r3, [pc, #20]	@ (800c24c <tcp_write_checks+0xe0>)
 800c236:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c23a:	4908      	ldr	r1, [pc, #32]	@ (800c25c <tcp_write_checks+0xf0>)
 800c23c:	4805      	ldr	r0, [pc, #20]	@ (800c254 <tcp_write_checks+0xe8>)
 800c23e:	f007 fe05 	bl	8013e4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	080193d8 	.word	0x080193d8
 800c250:	080194e8 	.word	0x080194e8
 800c254:	0801942c 	.word	0x0801942c
 800c258:	08019508 	.word	0x08019508
 800c25c:	08019544 	.word	0x08019544

0800c260 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b09b      	sub	sp, #108	@ 0x6c
 800c264:	af04      	add	r7, sp, #16
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	4611      	mov	r1, r2
 800c26c:	461a      	mov	r2, r3
 800c26e:	460b      	mov	r3, r1
 800c270:	80fb      	strh	r3, [r7, #6]
 800c272:	4613      	mov	r3, r2
 800c274:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c276:	2300      	movs	r3, #0
 800c278:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c27e:	2300      	movs	r3, #0
 800c280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c282:	2300      	movs	r3, #0
 800c284:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c286:	2300      	movs	r3, #0
 800c288:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c28a:	2300      	movs	r3, #0
 800c28c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c29a:	2300      	movs	r3, #0
 800c29c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <tcp_write+0x5c>
 800c2a8:	4ba4      	ldr	r3, [pc, #656]	@ (800c53c <tcp_write+0x2dc>)
 800c2aa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c2ae:	49a4      	ldr	r1, [pc, #656]	@ (800c540 <tcp_write+0x2e0>)
 800c2b0:	48a4      	ldr	r0, [pc, #656]	@ (800c544 <tcp_write+0x2e4>)
 800c2b2:	f007 fdcb 	bl	8013e4c <iprintf>
 800c2b6:	f06f 030f 	mvn.w	r3, #15
 800c2ba:	e32a      	b.n	800c912 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2c2:	085b      	lsrs	r3, r3, #1
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bf28      	it	cs
 800c2ce:	4613      	movcs	r3, r2
 800c2d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c2d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <tcp_write+0x7e>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2dc:	e000      	b.n	800c2e0 <tcp_write+0x80>
 800c2de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d109      	bne.n	800c2fc <tcp_write+0x9c>
 800c2e8:	4b94      	ldr	r3, [pc, #592]	@ (800c53c <tcp_write+0x2dc>)
 800c2ea:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c2ee:	4996      	ldr	r1, [pc, #600]	@ (800c548 <tcp_write+0x2e8>)
 800c2f0:	4894      	ldr	r0, [pc, #592]	@ (800c544 <tcp_write+0x2e4>)
 800c2f2:	f007 fdab 	bl	8013e4c <iprintf>
 800c2f6:	f06f 030f 	mvn.w	r3, #15
 800c2fa:	e30a      	b.n	800c912 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	4619      	mov	r1, r3
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff ff33 	bl	800c16c <tcp_write_checks>
 800c306:	4603      	mov	r3, r0
 800c308:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c30c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <tcp_write+0xba>
    return err;
 800c314:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c318:	e2fb      	b.n	800c912 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c320:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c324:	2300      	movs	r3, #0
 800c326:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 80f6 	beq.w	800c520 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c338:	653b      	str	r3, [r7, #80]	@ 0x50
 800c33a:	e002      	b.n	800c342 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c33c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f8      	bne.n	800c33c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c34a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c34c:	7a9b      	ldrb	r3, [r3, #10]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	b29b      	uxth	r3, r3
 800c352:	f003 0304 	and.w	r3, r3, #4
 800c356:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c35c:	891b      	ldrh	r3, [r3, #8]
 800c35e:	4619      	mov	r1, r3
 800c360:	8c3b      	ldrh	r3, [r7, #32]
 800c362:	440b      	add	r3, r1
 800c364:	429a      	cmp	r2, r3
 800c366:	da06      	bge.n	800c376 <tcp_write+0x116>
 800c368:	4b74      	ldr	r3, [pc, #464]	@ (800c53c <tcp_write+0x2dc>)
 800c36a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c36e:	4977      	ldr	r1, [pc, #476]	@ (800c54c <tcp_write+0x2ec>)
 800c370:	4874      	ldr	r0, [pc, #464]	@ (800c544 <tcp_write+0x2e4>)
 800c372:	f007 fd6b 	bl	8013e4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c378:	891a      	ldrh	r2, [r3, #8]
 800c37a:	8c3b      	ldrh	r3, [r7, #32]
 800c37c:	4413      	add	r3, r2
 800c37e:	b29b      	uxth	r3, r3
 800c380:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c38c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c38e:	8a7b      	ldrh	r3, [r7, #18]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d026      	beq.n	800c3e2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c394:	8a7b      	ldrh	r3, [r7, #18]
 800c396:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c398:	429a      	cmp	r2, r3
 800c39a:	d206      	bcs.n	800c3aa <tcp_write+0x14a>
 800c39c:	4b67      	ldr	r3, [pc, #412]	@ (800c53c <tcp_write+0x2dc>)
 800c39e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c3a2:	496b      	ldr	r1, [pc, #428]	@ (800c550 <tcp_write+0x2f0>)
 800c3a4:	4867      	ldr	r0, [pc, #412]	@ (800c544 <tcp_write+0x2e4>)
 800c3a6:	f007 fd51 	bl	8013e4c <iprintf>
      seg = last_unsent;
 800c3aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c3ae:	8a7b      	ldrh	r3, [r7, #18]
 800c3b0:	88fa      	ldrh	r2, [r7, #6]
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	bf28      	it	cs
 800c3b6:	4613      	movcs	r3, r2
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	bf28      	it	cs
 800c3c0:	4613      	movcs	r3, r2
 800c3c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c3c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c3d0:	8a7a      	ldrh	r2, [r7, #18]
 800c3d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c3da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c3e2:	8a7b      	ldrh	r3, [r7, #18]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00b      	beq.n	800c400 <tcp_write+0x1a0>
 800c3e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3ec:	88fb      	ldrh	r3, [r7, #6]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d006      	beq.n	800c400 <tcp_write+0x1a0>
 800c3f2:	4b52      	ldr	r3, [pc, #328]	@ (800c53c <tcp_write+0x2dc>)
 800c3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3f8:	4956      	ldr	r1, [pc, #344]	@ (800c554 <tcp_write+0x2f4>)
 800c3fa:	4852      	ldr	r0, [pc, #328]	@ (800c544 <tcp_write+0x2e4>)
 800c3fc:	f007 fd26 	bl	8013e4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c400:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c404:	88fb      	ldrh	r3, [r7, #6]
 800c406:	429a      	cmp	r2, r3
 800c408:	f080 8167 	bcs.w	800c6da <tcp_write+0x47a>
 800c40c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f000 8163 	beq.w	800c6da <tcp_write+0x47a>
 800c414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c416:	891b      	ldrh	r3, [r3, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 815e 	beq.w	800c6da <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c41e:	88fa      	ldrh	r2, [r7, #6]
 800c420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c424:	1ad2      	subs	r2, r2, r3
 800c426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c428:	4293      	cmp	r3, r2
 800c42a:	bfa8      	it	ge
 800c42c:	4613      	movge	r3, r2
 800c42e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c432:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c434:	797b      	ldrb	r3, [r7, #5]
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d027      	beq.n	800c48e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c43e:	f107 0012 	add.w	r0, r7, #18
 800c442:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c444:	8bf9      	ldrh	r1, [r7, #30]
 800c446:	2301      	movs	r3, #1
 800c448:	9302      	str	r3, [sp, #8]
 800c44a:	797b      	ldrb	r3, [r7, #5]
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	4603      	mov	r3, r0
 800c454:	2000      	movs	r0, #0
 800c456:	f7ff fe0f 	bl	800c078 <tcp_pbuf_prealloc>
 800c45a:	6578      	str	r0, [r7, #84]	@ 0x54
 800c45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8225 	beq.w	800c8ae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c466:	6858      	ldr	r0, [r3, #4]
 800c468:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	4413      	add	r3, r2
 800c470:	8bfa      	ldrh	r2, [r7, #30]
 800c472:	4619      	mov	r1, r3
 800c474:	f007 fe1d 	bl	80140b2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c478:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c47a:	f7fb f97b 	bl	8007774 <pbuf_clen>
 800c47e:	4603      	mov	r3, r0
 800c480:	461a      	mov	r2, r3
 800c482:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c486:	4413      	add	r3, r2
 800c488:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c48c:	e041      	b.n	800c512 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c48e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	637b      	str	r3, [r7, #52]	@ 0x34
 800c494:	e002      	b.n	800c49c <tcp_write+0x23c>
 800c496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f8      	bne.n	800c496 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a6:	7b1b      	ldrb	r3, [r3, #12]
 800c4a8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d115      	bne.n	800c4dc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4b6:	8952      	ldrh	r2, [r2, #10]
 800c4b8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d10d      	bne.n	800c4dc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c4c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d006      	beq.n	800c4d6 <tcp_write+0x276>
 800c4c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c53c <tcp_write+0x2dc>)
 800c4ca:	f240 2231 	movw	r2, #561	@ 0x231
 800c4ce:	4922      	ldr	r1, [pc, #136]	@ (800c558 <tcp_write+0x2f8>)
 800c4d0:	481c      	ldr	r0, [pc, #112]	@ (800c544 <tcp_write+0x2e4>)
 800c4d2:	f007 fcbb 	bl	8013e4c <iprintf>
          extendlen = seglen;
 800c4d6:	8bfb      	ldrh	r3, [r7, #30]
 800c4d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c4da:	e01a      	b.n	800c512 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c4dc:	8bfb      	ldrh	r3, [r7, #30]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f7fa fdda 	bl	800709c <pbuf_alloc>
 800c4e8:	6578      	str	r0, [r7, #84]	@ 0x54
 800c4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 81e0 	beq.w	800c8b2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c4f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	441a      	add	r2, r3
 800c4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4fc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c4fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c500:	f7fb f938 	bl	8007774 <pbuf_clen>
 800c504:	4603      	mov	r3, r0
 800c506:	461a      	mov	r2, r3
 800c508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c50c:	4413      	add	r3, r2
 800c50e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c512:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c516:	8bfb      	ldrh	r3, [r7, #30]
 800c518:	4413      	add	r3, r2
 800c51a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c51e:	e0dc      	b.n	800c6da <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 80d7 	beq.w	800c6da <tcp_write+0x47a>
 800c52c:	4b03      	ldr	r3, [pc, #12]	@ (800c53c <tcp_write+0x2dc>)
 800c52e:	f240 224a 	movw	r2, #586	@ 0x24a
 800c532:	490a      	ldr	r1, [pc, #40]	@ (800c55c <tcp_write+0x2fc>)
 800c534:	4803      	ldr	r0, [pc, #12]	@ (800c544 <tcp_write+0x2e4>)
 800c536:	f007 fc89 	bl	8013e4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c53a:	e0ce      	b.n	800c6da <tcp_write+0x47a>
 800c53c:	080193d8 	.word	0x080193d8
 800c540:	08019578 	.word	0x08019578
 800c544:	0801942c 	.word	0x0801942c
 800c548:	08019590 	.word	0x08019590
 800c54c:	080195c4 	.word	0x080195c4
 800c550:	080195dc 	.word	0x080195dc
 800c554:	080195fc 	.word	0x080195fc
 800c558:	0801961c 	.word	0x0801961c
 800c55c:	08019648 	.word	0x08019648
    struct pbuf *p;
    u16_t left = len - pos;
 800c560:	88fa      	ldrh	r2, [r7, #6]
 800c562:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c56a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c56e:	b29b      	uxth	r3, r3
 800c570:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c576:	8b7a      	ldrh	r2, [r7, #26]
 800c578:	8bbb      	ldrh	r3, [r7, #28]
 800c57a:	4293      	cmp	r3, r2
 800c57c:	bf28      	it	cs
 800c57e:	4613      	movcs	r3, r2
 800c580:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c582:	797b      	ldrb	r3, [r7, #5]
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d036      	beq.n	800c5fa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c58c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c590:	b29a      	uxth	r2, r3
 800c592:	8b3b      	ldrh	r3, [r7, #24]
 800c594:	4413      	add	r3, r2
 800c596:	b299      	uxth	r1, r3
 800c598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	bf0c      	ite	eq
 800c59e:	2301      	moveq	r3, #1
 800c5a0:	2300      	movne	r3, #0
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	f107 0012 	add.w	r0, r7, #18
 800c5a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c5aa:	9302      	str	r3, [sp, #8]
 800c5ac:	797b      	ldrb	r3, [r7, #5]
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2036      	movs	r0, #54	@ 0x36
 800c5b8:	f7ff fd5e 	bl	800c078 <tcp_pbuf_prealloc>
 800c5bc:	6338      	str	r0, [r7, #48]	@ 0x30
 800c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 8178 	beq.w	800c8b6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c8:	895b      	ldrh	r3, [r3, #10]
 800c5ca:	8b3a      	ldrh	r2, [r7, #24]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d906      	bls.n	800c5de <tcp_write+0x37e>
 800c5d0:	4b8c      	ldr	r3, [pc, #560]	@ (800c804 <tcp_write+0x5a4>)
 800c5d2:	f240 2266 	movw	r2, #614	@ 0x266
 800c5d6:	498c      	ldr	r1, [pc, #560]	@ (800c808 <tcp_write+0x5a8>)
 800c5d8:	488c      	ldr	r0, [pc, #560]	@ (800c80c <tcp_write+0x5ac>)
 800c5da:	f007 fc37 	bl	8013e4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	685a      	ldr	r2, [r3, #4]
 800c5e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c5e6:	18d0      	adds	r0, r2, r3
 800c5e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	8b3a      	ldrh	r2, [r7, #24]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f007 fd5d 	bl	80140b2 <memcpy>
 800c5f8:	e02f      	b.n	800c65a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c5fa:	8a7b      	ldrh	r3, [r7, #18]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <tcp_write+0x3ae>
 800c600:	4b80      	ldr	r3, [pc, #512]	@ (800c804 <tcp_write+0x5a4>)
 800c602:	f240 2271 	movw	r2, #625	@ 0x271
 800c606:	4982      	ldr	r1, [pc, #520]	@ (800c810 <tcp_write+0x5b0>)
 800c608:	4880      	ldr	r0, [pc, #512]	@ (800c80c <tcp_write+0x5ac>)
 800c60a:	f007 fc1f 	bl	8013e4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c60e:	8b3b      	ldrh	r3, [r7, #24]
 800c610:	2201      	movs	r2, #1
 800c612:	4619      	mov	r1, r3
 800c614:	2036      	movs	r0, #54	@ 0x36
 800c616:	f7fa fd41 	bl	800709c <pbuf_alloc>
 800c61a:	6178      	str	r0, [r7, #20]
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 814b 	beq.w	800c8ba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c624:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	441a      	add	r2, r3
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c630:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c634:	b29b      	uxth	r3, r3
 800c636:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c63a:	4619      	mov	r1, r3
 800c63c:	2036      	movs	r0, #54	@ 0x36
 800c63e:	f7fa fd2d 	bl	800709c <pbuf_alloc>
 800c642:	6338      	str	r0, [r7, #48]	@ 0x30
 800c644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f7fb f80a 	bl	8007664 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c650:	e136      	b.n	800c8c0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c652:	6979      	ldr	r1, [r7, #20]
 800c654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c656:	f7fb f8c7 	bl	80077e8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c65a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c65c:	f7fb f88a 	bl	8007774 <pbuf_clen>
 800c660:	4603      	mov	r3, r0
 800c662:	461a      	mov	r2, r3
 800c664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c668:	4413      	add	r3, r2
 800c66a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c66e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c672:	2b1f      	cmp	r3, #31
 800c674:	d903      	bls.n	800c67e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c676:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c678:	f7fa fff4 	bl	8007664 <pbuf_free>
      goto memerr;
 800c67c:	e120      	b.n	800c8c0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c686:	441a      	add	r2, r3
 800c688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	4613      	mov	r3, r2
 800c690:	2200      	movs	r2, #0
 800c692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff fc53 	bl	800bf40 <tcp_create_segment>
 800c69a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c69c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f000 810d 	beq.w	800c8be <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c6a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d102      	bne.n	800c6b0 <tcp_write+0x450>
      queue = seg;
 800c6aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6ae:	e00c      	b.n	800c6ca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c6b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <tcp_write+0x464>
 800c6b6:	4b53      	ldr	r3, [pc, #332]	@ (800c804 <tcp_write+0x5a4>)
 800c6b8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c6bc:	4955      	ldr	r1, [pc, #340]	@ (800c814 <tcp_write+0x5b4>)
 800c6be:	4853      	ldr	r0, [pc, #332]	@ (800c80c <tcp_write+0x5ac>)
 800c6c0:	f007 fbc4 	bl	8013e4c <iprintf>
      prev_seg->next = seg;
 800c6c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6c8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c6ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6cc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c6ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6d2:	8b3b      	ldrh	r3, [r7, #24]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c6da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6de:	88fb      	ldrh	r3, [r7, #6]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	f4ff af3d 	bcc.w	800c560 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c6e6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d02c      	beq.n	800c746 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6f2:	e01e      	b.n	800c732 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f6:	891a      	ldrh	r2, [r3, #8]
 800c6f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6fa:	4413      	add	r3, r2
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d110      	bne.n	800c72c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c710:	8952      	ldrh	r2, [r2, #10]
 800c712:	4413      	add	r3, r2
 800c714:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c716:	68b9      	ldr	r1, [r7, #8]
 800c718:	4618      	mov	r0, r3
 800c71a:	f007 fcca 	bl	80140b2 <memcpy>
        p->len += oversize_used;
 800c71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c720:	895a      	ldrh	r2, [r3, #10]
 800c722:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c724:	4413      	add	r3, r2
 800c726:	b29a      	uxth	r2, r3
 800c728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1dd      	bne.n	800c6f4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c73a:	891a      	ldrh	r2, [r3, #8]
 800c73c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c73e:	4413      	add	r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c744:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c746:	8a7a      	ldrh	r2, [r7, #18]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c74e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c750:	2b00      	cmp	r3, #0
 800c752:	d018      	beq.n	800c786 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <tcp_write+0x508>
 800c75a:	4b2a      	ldr	r3, [pc, #168]	@ (800c804 <tcp_write+0x5a4>)
 800c75c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c760:	492d      	ldr	r1, [pc, #180]	@ (800c818 <tcp_write+0x5b8>)
 800c762:	482a      	ldr	r0, [pc, #168]	@ (800c80c <tcp_write+0x5ac>)
 800c764:	f007 fb72 	bl	8013e4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fb f83a 	bl	80077e8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c776:	891a      	ldrh	r2, [r3, #8]
 800c778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c77a:	891b      	ldrh	r3, [r3, #8]
 800c77c:	4413      	add	r3, r2
 800c77e:	b29a      	uxth	r2, r3
 800c780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c782:	811a      	strh	r2, [r3, #8]
 800c784:	e037      	b.n	800c7f6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c786:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d034      	beq.n	800c7f6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c78c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <tcp_write+0x53a>
 800c792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d106      	bne.n	800c7a8 <tcp_write+0x548>
 800c79a:	4b1a      	ldr	r3, [pc, #104]	@ (800c804 <tcp_write+0x5a4>)
 800c79c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c7a0:	491e      	ldr	r1, [pc, #120]	@ (800c81c <tcp_write+0x5bc>)
 800c7a2:	481a      	ldr	r0, [pc, #104]	@ (800c80c <tcp_write+0x5ac>)
 800c7a4:	f007 fb52 	bl	8013e4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c7a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7ae:	e009      	b.n	800c7c4 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b2:	891a      	ldrh	r2, [r3, #8]
 800c7b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7b6:	4413      	add	r3, r2
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1f1      	bne.n	800c7b0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ce:	891a      	ldrh	r2, [r3, #8]
 800c7d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7d2:	4413      	add	r3, r2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7dc:	895a      	ldrh	r2, [r3, #10]
 800c7de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7e0:	4413      	add	r3, r2
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c7e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7ea:	891a      	ldrh	r2, [r3, #8]
 800c7ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7ee:	4413      	add	r3, r2
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7f4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c7f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d111      	bne.n	800c820 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c800:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c802:	e010      	b.n	800c826 <tcp_write+0x5c6>
 800c804:	080193d8 	.word	0x080193d8
 800c808:	08019678 	.word	0x08019678
 800c80c:	0801942c 	.word	0x0801942c
 800c810:	080196b8 	.word	0x080196b8
 800c814:	080196c8 	.word	0x080196c8
 800c818:	080196dc 	.word	0x080196dc
 800c81c:	08019714 	.word	0x08019714
  } else {
    last_unsent->next = queue;
 800c820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c824:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	441a      	add	r2, r3
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c838:	88fb      	ldrh	r3, [r7, #6]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	b29a      	uxth	r2, r3
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c84a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00e      	beq.n	800c876 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10a      	bne.n	800c876 <tcp_write+0x616>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c864:	2b00      	cmp	r3, #0
 800c866:	d106      	bne.n	800c876 <tcp_write+0x616>
 800c868:	4b2c      	ldr	r3, [pc, #176]	@ (800c91c <tcp_write+0x6bc>)
 800c86a:	f240 3212 	movw	r2, #786	@ 0x312
 800c86e:	492c      	ldr	r1, [pc, #176]	@ (800c920 <tcp_write+0x6c0>)
 800c870:	482c      	ldr	r0, [pc, #176]	@ (800c924 <tcp_write+0x6c4>)
 800c872:	f007 faeb 	bl	8013e4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d016      	beq.n	800c8aa <tcp_write+0x64a>
 800c87c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d012      	beq.n	800c8aa <tcp_write+0x64a>
 800c884:	797b      	ldrb	r3, [r7, #5]
 800c886:	f003 0302 	and.w	r3, r3, #2
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10d      	bne.n	800c8aa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c88e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	899b      	ldrh	r3, [r3, #12]
 800c894:	b29c      	uxth	r4, r3
 800c896:	2008      	movs	r0, #8
 800c898:	f7f9 fb56 	bl	8005f48 <lwip_htons>
 800c89c:	4603      	mov	r3, r0
 800c89e:	461a      	mov	r2, r3
 800c8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	4322      	orrs	r2, r4
 800c8a6:	b292      	uxth	r2, r2
 800c8a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e031      	b.n	800c912 <tcp_write+0x6b2>
          goto memerr;
 800c8ae:	bf00      	nop
 800c8b0:	e006      	b.n	800c8c0 <tcp_write+0x660>
            goto memerr;
 800c8b2:	bf00      	nop
 800c8b4:	e004      	b.n	800c8c0 <tcp_write+0x660>
        goto memerr;
 800c8b6:	bf00      	nop
 800c8b8:	e002      	b.n	800c8c0 <tcp_write+0x660>
        goto memerr;
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <tcp_write+0x660>
      goto memerr;
 800c8be:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	8b5b      	ldrh	r3, [r3, #26]
 800c8c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c8ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c8d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c8d6:	f7fa fec5 	bl	8007664 <pbuf_free>
  }
  if (queue != NULL) {
 800c8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c8e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c8e2:	f7fc fb89 	bl	8008ff8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00e      	beq.n	800c90e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <tcp_write+0x6ae>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d106      	bne.n	800c90e <tcp_write+0x6ae>
 800c900:	4b06      	ldr	r3, [pc, #24]	@ (800c91c <tcp_write+0x6bc>)
 800c902:	f240 3227 	movw	r2, #807	@ 0x327
 800c906:	4906      	ldr	r1, [pc, #24]	@ (800c920 <tcp_write+0x6c0>)
 800c908:	4806      	ldr	r0, [pc, #24]	@ (800c924 <tcp_write+0x6c4>)
 800c90a:	f007 fa9f 	bl	8013e4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c90e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c912:	4618      	mov	r0, r3
 800c914:	375c      	adds	r7, #92	@ 0x5c
 800c916:	46bd      	mov	sp, r7
 800c918:	bd90      	pop	{r4, r7, pc}
 800c91a:	bf00      	nop
 800c91c:	080193d8 	.word	0x080193d8
 800c920:	0801974c 	.word	0x0801974c
 800c924:	0801942c 	.word	0x0801942c

0800c928 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b08b      	sub	sp, #44	@ 0x2c
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c93c:	2300      	movs	r3, #0
 800c93e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <tcp_split_unsent_seg+0x2c>
 800c946:	4b95      	ldr	r3, [pc, #596]	@ (800cb9c <tcp_split_unsent_seg+0x274>)
 800c948:	f240 324b 	movw	r2, #843	@ 0x34b
 800c94c:	4994      	ldr	r1, [pc, #592]	@ (800cba0 <tcp_split_unsent_seg+0x278>)
 800c94e:	4895      	ldr	r0, [pc, #596]	@ (800cba4 <tcp_split_unsent_seg+0x27c>)
 800c950:	f007 fa7c 	bl	8013e4c <iprintf>

  useg = pcb->unsent;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c958:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c960:	f04f 33ff 	mov.w	r3, #4294967295
 800c964:	e116      	b.n	800cb94 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c966:	887b      	ldrh	r3, [r7, #2]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d109      	bne.n	800c980 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c96c:	4b8b      	ldr	r3, [pc, #556]	@ (800cb9c <tcp_split_unsent_seg+0x274>)
 800c96e:	f240 3253 	movw	r2, #851	@ 0x353
 800c972:	498d      	ldr	r1, [pc, #564]	@ (800cba8 <tcp_split_unsent_seg+0x280>)
 800c974:	488b      	ldr	r0, [pc, #556]	@ (800cba4 <tcp_split_unsent_seg+0x27c>)
 800c976:	f007 fa69 	bl	8013e4c <iprintf>
    return ERR_VAL;
 800c97a:	f06f 0305 	mvn.w	r3, #5
 800c97e:	e109      	b.n	800cb94 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	891b      	ldrh	r3, [r3, #8]
 800c984:	887a      	ldrh	r2, [r7, #2]
 800c986:	429a      	cmp	r2, r3
 800c988:	d301      	bcc.n	800c98e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	e102      	b.n	800cb94 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c992:	887a      	ldrh	r2, [r7, #2]
 800c994:	429a      	cmp	r2, r3
 800c996:	d906      	bls.n	800c9a6 <tcp_split_unsent_seg+0x7e>
 800c998:	4b80      	ldr	r3, [pc, #512]	@ (800cb9c <tcp_split_unsent_seg+0x274>)
 800c99a:	f240 325b 	movw	r2, #859	@ 0x35b
 800c99e:	4983      	ldr	r1, [pc, #524]	@ (800cbac <tcp_split_unsent_seg+0x284>)
 800c9a0:	4880      	ldr	r0, [pc, #512]	@ (800cba4 <tcp_split_unsent_seg+0x27c>)
 800c9a2:	f007 fa53 	bl	8013e4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	891b      	ldrh	r3, [r3, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d106      	bne.n	800c9bc <tcp_split_unsent_seg+0x94>
 800c9ae:	4b7b      	ldr	r3, [pc, #492]	@ (800cb9c <tcp_split_unsent_seg+0x274>)
 800c9b0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c9b4:	497e      	ldr	r1, [pc, #504]	@ (800cbb0 <tcp_split_unsent_seg+0x288>)
 800c9b6:	487b      	ldr	r0, [pc, #492]	@ (800cba4 <tcp_split_unsent_seg+0x27c>)
 800c9b8:	f007 fa48 	bl	8013e4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	7a9b      	ldrb	r3, [r3, #10]
 800c9c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	891a      	ldrh	r2, [r3, #8]
 800c9d2:	887b      	ldrh	r3, [r7, #2]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	89bb      	ldrh	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	2036      	movs	r0, #54	@ 0x36
 800c9ea:	f7fa fb57 	bl	800709c <pbuf_alloc>
 800c9ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	f000 80b7 	beq.w	800cb66 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	891a      	ldrh	r2, [r3, #8]
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	887b      	ldrh	r3, [r7, #2]
 800ca08:	4413      	add	r3, r2
 800ca0a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	6858      	ldr	r0, [r3, #4]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	18d1      	adds	r1, r2, r3
 800ca18:	897b      	ldrh	r3, [r7, #10]
 800ca1a:	89ba      	ldrh	r2, [r7, #12]
 800ca1c:	f7fb f81c 	bl	8007a58 <pbuf_copy_partial>
 800ca20:	4603      	mov	r3, r0
 800ca22:	461a      	mov	r2, r3
 800ca24:	89bb      	ldrh	r3, [r7, #12]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	f040 809f 	bne.w	800cb6a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	899b      	ldrh	r3, [r3, #12]
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f9 fa87 	bl	8005f48 <lwip_htons>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca42:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ca44:	2300      	movs	r3, #0
 800ca46:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ca48:	7efb      	ldrb	r3, [r7, #27]
 800ca4a:	f003 0308 	and.w	r3, r3, #8
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ca52:	7efb      	ldrb	r3, [r7, #27]
 800ca54:	f023 0308 	bic.w	r3, r3, #8
 800ca58:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ca5a:	7ebb      	ldrb	r3, [r7, #26]
 800ca5c:	f043 0308 	orr.w	r3, r3, #8
 800ca60:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ca62:	7efb      	ldrb	r3, [r7, #27]
 800ca64:	f003 0301 	and.w	r3, r3, #1
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d007      	beq.n	800ca7c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ca6c:	7efb      	ldrb	r3, [r7, #27]
 800ca6e:	f023 0301 	bic.w	r3, r3, #1
 800ca72:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ca74:	7ebb      	ldrb	r3, [r7, #26]
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7f9 fa76 	bl	8005f74 <lwip_htonl>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	887b      	ldrh	r3, [r7, #2]
 800ca8c:	18d1      	adds	r1, r2, r3
 800ca8e:	7eba      	ldrb	r2, [r7, #26]
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	460b      	mov	r3, r1
 800ca96:	6939      	ldr	r1, [r7, #16]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff fa51 	bl	800bf40 <tcp_create_segment>
 800ca9e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d063      	beq.n	800cb6e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fa fe62 	bl	8007774 <pbuf_clen>
 800cab0:	4603      	mov	r3, r0
 800cab2:	461a      	mov	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800caba:	1a9b      	subs	r3, r3, r2
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	6858      	ldr	r0, [r3, #4]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	891a      	ldrh	r2, [r3, #8]
 800cace:	89bb      	ldrh	r3, [r7, #12]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4619      	mov	r1, r3
 800cad6:	f7fa fc3f 	bl	8007358 <pbuf_realloc>
  useg->len -= remainder;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	891a      	ldrh	r2, [r3, #8]
 800cade:	89bb      	ldrh	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	899b      	ldrh	r3, [r3, #12]
 800caee:	b29c      	uxth	r4, r3
 800caf0:	7efb      	ldrb	r3, [r7, #27]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7f9 fa27 	bl	8005f48 <lwip_htons>
 800cafa:	4603      	mov	r3, r0
 800cafc:	461a      	mov	r2, r3
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	4322      	orrs	r2, r4
 800cb04:	b292      	uxth	r2, r2
 800cb06:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7fa fe31 	bl	8007774 <pbuf_clen>
 800cb12:	4603      	mov	r3, r0
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb1c:	4413      	add	r3, r2
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fa fe22 	bl	8007774 <pbuf_clen>
 800cb30:	4603      	mov	r3, r0
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb3a:	4413      	add	r3, r2
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	69fa      	ldr	r2, [r7, #28]
 800cb50:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e016      	b.n	800cb94 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cb66:	bf00      	nop
 800cb68:	e002      	b.n	800cb70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb6a:	bf00      	nop
 800cb6c:	e000      	b.n	800cb70 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb6e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d006      	beq.n	800cb84 <tcp_split_unsent_seg+0x25c>
 800cb76:	4b09      	ldr	r3, [pc, #36]	@ (800cb9c <tcp_split_unsent_seg+0x274>)
 800cb78:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cb7c:	490d      	ldr	r1, [pc, #52]	@ (800cbb4 <tcp_split_unsent_seg+0x28c>)
 800cb7e:	4809      	ldr	r0, [pc, #36]	@ (800cba4 <tcp_split_unsent_seg+0x27c>)
 800cb80:	f007 f964 	bl	8013e4c <iprintf>
  if (p != NULL) {
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d002      	beq.n	800cb90 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f7fa fd6a 	bl	8007664 <pbuf_free>
  }

  return ERR_MEM;
 800cb90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3724      	adds	r7, #36	@ 0x24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}
 800cb9c:	080193d8 	.word	0x080193d8
 800cba0:	0801976c 	.word	0x0801976c
 800cba4:	0801942c 	.word	0x0801942c
 800cba8:	08019790 	.word	0x08019790
 800cbac:	080197b4 	.word	0x080197b4
 800cbb0:	080197c4 	.word	0x080197c4
 800cbb4:	080197d4 	.word	0x080197d4

0800cbb8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cbb8:	b590      	push	{r4, r7, lr}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <tcp_send_fin+0x1c>
 800cbc6:	4b21      	ldr	r3, [pc, #132]	@ (800cc4c <tcp_send_fin+0x94>)
 800cbc8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cbcc:	4920      	ldr	r1, [pc, #128]	@ (800cc50 <tcp_send_fin+0x98>)
 800cbce:	4821      	ldr	r0, [pc, #132]	@ (800cc54 <tcp_send_fin+0x9c>)
 800cbd0:	f007 f93c 	bl	8013e4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d02e      	beq.n	800cc3a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbe0:	60fb      	str	r3, [r7, #12]
 800cbe2:	e002      	b.n	800cbea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1f8      	bne.n	800cbe4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	899b      	ldrh	r3, [r3, #12]
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7f9 f9a4 	bl	8005f48 <lwip_htons>
 800cc00:	4603      	mov	r3, r0
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 0307 	and.w	r3, r3, #7
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d116      	bne.n	800cc3a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	899b      	ldrh	r3, [r3, #12]
 800cc12:	b29c      	uxth	r4, r3
 800cc14:	2001      	movs	r0, #1
 800cc16:	f7f9 f997 	bl	8005f48 <lwip_htons>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	4322      	orrs	r2, r4
 800cc24:	b292      	uxth	r2, r2
 800cc26:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	8b5b      	ldrh	r3, [r3, #26]
 800cc2c:	f043 0320 	orr.w	r3, r3, #32
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	e004      	b.n	800cc44 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f80b 	bl	800cc58 <tcp_enqueue_flags>
 800cc42:	4603      	mov	r3, r0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd90      	pop	{r4, r7, pc}
 800cc4c:	080193d8 	.word	0x080193d8
 800cc50:	080197e0 	.word	0x080197e0
 800cc54:	0801942c 	.word	0x0801942c

0800cc58 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08a      	sub	sp, #40	@ 0x28
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d106      	bne.n	800cc84 <tcp_enqueue_flags+0x2c>
 800cc76:	4b67      	ldr	r3, [pc, #412]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800cc78:	f240 4211 	movw	r2, #1041	@ 0x411
 800cc7c:	4966      	ldr	r1, [pc, #408]	@ (800ce18 <tcp_enqueue_flags+0x1c0>)
 800cc7e:	4867      	ldr	r0, [pc, #412]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800cc80:	f007 f8e4 	bl	8013e4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <tcp_enqueue_flags+0x40>
 800cc8a:	4b62      	ldr	r3, [pc, #392]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800cc8c:	f240 4213 	movw	r2, #1043	@ 0x413
 800cc90:	4963      	ldr	r1, [pc, #396]	@ (800ce20 <tcp_enqueue_flags+0x1c8>)
 800cc92:	4862      	ldr	r0, [pc, #392]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800cc94:	f007 f8da 	bl	8013e4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	f003 0302 	and.w	r3, r3, #2
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cca2:	2301      	movs	r3, #1
 800cca4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cca6:	7ffb      	ldrb	r3, [r7, #31]
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ccba:	4619      	mov	r1, r3
 800ccbc:	2036      	movs	r0, #54	@ 0x36
 800ccbe:	f7fa f9ed 	bl	800709c <pbuf_alloc>
 800ccc2:	6138      	str	r0, [r7, #16]
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d109      	bne.n	800ccde <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	8b5b      	ldrh	r3, [r3, #26]
 800ccce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	e095      	b.n	800ce0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	895a      	ldrh	r2, [r3, #10]
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d206      	bcs.n	800ccf8 <tcp_enqueue_flags+0xa0>
 800ccea:	4b4a      	ldr	r3, [pc, #296]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800ccec:	f240 4239 	movw	r2, #1081	@ 0x439
 800ccf0:	494c      	ldr	r1, [pc, #304]	@ (800ce24 <tcp_enqueue_flags+0x1cc>)
 800ccf2:	484a      	ldr	r0, [pc, #296]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800ccf4:	f007 f8aa 	bl	8013e4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ccfc:	78fa      	ldrb	r2, [r7, #3]
 800ccfe:	7ffb      	ldrb	r3, [r7, #31]
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	460b      	mov	r3, r1
 800cd04:	6939      	ldr	r1, [r7, #16]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff f91a 	bl	800bf40 <tcp_create_segment>
 800cd0c:	60f8      	str	r0, [r7, #12]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d109      	bne.n	800cd28 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8b5b      	ldrh	r3, [r3, #26]
 800cd18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cd22:	f04f 33ff 	mov.w	r3, #4294967295
 800cd26:	e070      	b.n	800ce0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	f003 0303 	and.w	r3, r3, #3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d006      	beq.n	800cd42 <tcp_enqueue_flags+0xea>
 800cd34:	4b37      	ldr	r3, [pc, #220]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800cd36:	f240 4242 	movw	r2, #1090	@ 0x442
 800cd3a:	493b      	ldr	r1, [pc, #236]	@ (800ce28 <tcp_enqueue_flags+0x1d0>)
 800cd3c:	4837      	ldr	r0, [pc, #220]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800cd3e:	f007 f885 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	891b      	ldrh	r3, [r3, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d006      	beq.n	800cd58 <tcp_enqueue_flags+0x100>
 800cd4a:	4b32      	ldr	r3, [pc, #200]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800cd4c:	f240 4243 	movw	r2, #1091	@ 0x443
 800cd50:	4936      	ldr	r1, [pc, #216]	@ (800ce2c <tcp_enqueue_flags+0x1d4>)
 800cd52:	4832      	ldr	r0, [pc, #200]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800cd54:	f007 f87a 	bl	8013e4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d103      	bne.n	800cd68 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cd66:	e00d      	b.n	800cd84 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd6c:	61bb      	str	r3, [r7, #24]
 800cd6e:	e002      	b.n	800cd76 <tcp_enqueue_flags+0x11e>
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	61bb      	str	r3, [r7, #24]
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1f8      	bne.n	800cd70 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cd8c:	78fb      	ldrb	r3, [r7, #3]
 800cd8e:	f003 0302 	and.w	r3, r3, #2
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d104      	bne.n	800cda0 <tcp_enqueue_flags+0x148>
 800cd96:	78fb      	ldrb	r3, [r7, #3]
 800cd98:	f003 0301 	and.w	r3, r3, #1
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cda4:	1c5a      	adds	r2, r3, #1
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cdaa:	78fb      	ldrb	r3, [r7, #3]
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d006      	beq.n	800cdc2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	8b5b      	ldrh	r3, [r3, #26]
 800cdb8:	f043 0320 	orr.w	r3, r3, #32
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fa fcd4 	bl	8007774 <pbuf_clen>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	461a      	mov	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdd6:	4413      	add	r3, r2
 800cdd8:	b29a      	uxth	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10a      	bne.n	800ce08 <tcp_enqueue_flags+0x1b0>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <tcp_enqueue_flags+0x1b0>
 800cdfa:	4b06      	ldr	r3, [pc, #24]	@ (800ce14 <tcp_enqueue_flags+0x1bc>)
 800cdfc:	f240 4265 	movw	r2, #1125	@ 0x465
 800ce00:	490b      	ldr	r1, [pc, #44]	@ (800ce30 <tcp_enqueue_flags+0x1d8>)
 800ce02:	4806      	ldr	r0, [pc, #24]	@ (800ce1c <tcp_enqueue_flags+0x1c4>)
 800ce04:	f007 f822 	bl	8013e4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3720      	adds	r7, #32
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	080193d8 	.word	0x080193d8
 800ce18:	080197fc 	.word	0x080197fc
 800ce1c:	0801942c 	.word	0x0801942c
 800ce20:	08019854 	.word	0x08019854
 800ce24:	08019874 	.word	0x08019874
 800ce28:	080198b0 	.word	0x080198b0
 800ce2c:	080198c8 	.word	0x080198c8
 800ce30:	080198f4 	.word	0x080198f4

0800ce34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ce34:	b5b0      	push	{r4, r5, r7, lr}
 800ce36:	b08a      	sub	sp, #40	@ 0x28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <tcp_output+0x1c>
 800ce42:	4b8a      	ldr	r3, [pc, #552]	@ (800d06c <tcp_output+0x238>)
 800ce44:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ce48:	4989      	ldr	r1, [pc, #548]	@ (800d070 <tcp_output+0x23c>)
 800ce4a:	488a      	ldr	r0, [pc, #552]	@ (800d074 <tcp_output+0x240>)
 800ce4c:	f006 fffe 	bl	8013e4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	7d1b      	ldrb	r3, [r3, #20]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d106      	bne.n	800ce66 <tcp_output+0x32>
 800ce58:	4b84      	ldr	r3, [pc, #528]	@ (800d06c <tcp_output+0x238>)
 800ce5a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ce5e:	4986      	ldr	r1, [pc, #536]	@ (800d078 <tcp_output+0x244>)
 800ce60:	4884      	ldr	r0, [pc, #528]	@ (800d074 <tcp_output+0x240>)
 800ce62:	f006 fff3 	bl	8013e4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ce66:	4b85      	ldr	r3, [pc, #532]	@ (800d07c <tcp_output+0x248>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d101      	bne.n	800ce74 <tcp_output+0x40>
    return ERR_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	e1ce      	b.n	800d212 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce80:	4293      	cmp	r3, r2
 800ce82:	bf28      	it	cs
 800ce84:	4613      	movcs	r3, r2
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ce90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10b      	bne.n	800ceae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	8b5b      	ldrh	r3, [r3, #26]
 800ce9a:	f003 0302 	and.w	r3, r3, #2
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 81aa 	beq.w	800d1f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fdc9 	bl	800da3c <tcp_send_empty_ack>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	e1b1      	b.n	800d212 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ceae:	6879      	ldr	r1, [r7, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff f826 	bl	800bf08 <tcp_route>
 800cebc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <tcp_output+0x96>
    return ERR_RTE;
 800cec4:	f06f 0303 	mvn.w	r3, #3
 800cec8:	e1a3      	b.n	800d212 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <tcp_output+0xa4>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d111      	bne.n	800cefc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <tcp_output+0xb0>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	3304      	adds	r3, #4
 800cee2:	e000      	b.n	800cee6 <tcp_output+0xb2>
 800cee4:	2300      	movs	r3, #0
 800cee6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d102      	bne.n	800cef4 <tcp_output+0xc0>
      return ERR_RTE;
 800ceee:	f06f 0303 	mvn.w	r3, #3
 800cef2:	e18e      	b.n	800d212 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7f9 f836 	bl	8005f74 <lwip_htonl>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf12:	8912      	ldrh	r2, [r2, #8]
 800cf14:	4413      	add	r3, r2
 800cf16:	69ba      	ldr	r2, [r7, #24]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d227      	bcs.n	800cf6c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf22:	461a      	mov	r2, r3
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d114      	bne.n	800cf54 <tcp_output+0x120>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d110      	bne.n	800cf54 <tcp_output+0x120>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10b      	bne.n	800cf54 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	8b5b      	ldrh	r3, [r3, #26]
 800cf58:	f003 0302 	and.w	r3, r3, #2
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 814d 	beq.w	800d1fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fd6a 	bl	800da3c <tcp_send_empty_ack>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	e152      	b.n	800d212 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf78:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cf7a:	6a3b      	ldr	r3, [r7, #32]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f000 811c 	beq.w	800d1ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cf82:	e002      	b.n	800cf8a <tcp_output+0x156>
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	623b      	str	r3, [r7, #32]
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1f8      	bne.n	800cf84 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf92:	e112      	b.n	800d1ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	899b      	ldrh	r3, [r3, #12]
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7f8 ffd3 	bl	8005f48 <lwip_htons>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	f003 0304 	and.w	r3, r3, #4
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d006      	beq.n	800cfbc <tcp_output+0x188>
 800cfae:	4b2f      	ldr	r3, [pc, #188]	@ (800d06c <tcp_output+0x238>)
 800cfb0:	f240 5236 	movw	r2, #1334	@ 0x536
 800cfb4:	4932      	ldr	r1, [pc, #200]	@ (800d080 <tcp_output+0x24c>)
 800cfb6:	482f      	ldr	r0, [pc, #188]	@ (800d074 <tcp_output+0x240>)
 800cfb8:	f006 ff48 	bl	8013e4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01f      	beq.n	800d004 <tcp_output+0x1d0>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	8b5b      	ldrh	r3, [r3, #26]
 800cfc8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d119      	bne.n	800d004 <tcp_output+0x1d0>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00b      	beq.n	800cff0 <tcp_output+0x1bc>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d110      	bne.n	800d004 <tcp_output+0x1d0>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfe6:	891a      	ldrh	r2, [r3, #8]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d209      	bcs.n	800d004 <tcp_output+0x1d0>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d004      	beq.n	800d004 <tcp_output+0x1d0>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d000:	2b1e      	cmp	r3, #30
 800d002:	d901      	bls.n	800d008 <tcp_output+0x1d4>
 800d004:	2301      	movs	r3, #1
 800d006:	e000      	b.n	800d00a <tcp_output+0x1d6>
 800d008:	2300      	movs	r3, #0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d106      	bne.n	800d01c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	8b5b      	ldrh	r3, [r3, #26]
 800d012:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 80e4 	beq.w	800d1e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7d1b      	ldrb	r3, [r3, #20]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d00d      	beq.n	800d040 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	899b      	ldrh	r3, [r3, #12]
 800d02a:	b29c      	uxth	r4, r3
 800d02c:	2010      	movs	r0, #16
 800d02e:	f7f8 ff8b 	bl	8005f48 <lwip_htons>
 800d032:	4603      	mov	r3, r0
 800d034:	461a      	mov	r2, r3
 800d036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	4322      	orrs	r2, r4
 800d03c:	b292      	uxth	r2, r2
 800d03e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	6879      	ldr	r1, [r7, #4]
 800d044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d046:	f000 f909 	bl	800d25c <tcp_output_segment>
 800d04a:	4603      	mov	r3, r0
 800d04c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d016      	beq.n	800d084 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	8b5b      	ldrh	r3, [r3, #26]
 800d05a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d05e:	b29a      	uxth	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	835a      	strh	r2, [r3, #26]
      return err;
 800d064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d068:	e0d3      	b.n	800d212 <tcp_output+0x3de>
 800d06a:	bf00      	nop
 800d06c:	080193d8 	.word	0x080193d8
 800d070:	0801991c 	.word	0x0801991c
 800d074:	0801942c 	.word	0x0801942c
 800d078:	08019934 	.word	0x08019934
 800d07c:	20008020 	.word	0x20008020
 800d080:	0801995c 	.word	0x0801995c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7d1b      	ldrb	r3, [r3, #20]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d006      	beq.n	800d0a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	8b5b      	ldrh	r3, [r3, #26]
 800d098:	f023 0303 	bic.w	r3, r3, #3
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f8 ff63 	bl	8005f74 <lwip_htonl>
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b2:	891b      	ldrh	r3, [r3, #8]
 800d0b4:	461d      	mov	r5, r3
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	899b      	ldrh	r3, [r3, #12]
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f8 ff42 	bl	8005f48 <lwip_htons>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d001      	beq.n	800d0d4 <tcp_output+0x2a0>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e000      	b.n	800d0d6 <tcp_output+0x2a2>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	442b      	add	r3, r5
 800d0d8:	4423      	add	r3, r4
 800d0da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	da02      	bge.n	800d0ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f0:	891b      	ldrh	r3, [r3, #8]
 800d0f2:	461c      	mov	r4, r3
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	899b      	ldrh	r3, [r3, #12]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7f8 ff23 	bl	8005f48 <lwip_htons>
 800d102:	4603      	mov	r3, r0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	f003 0303 	and.w	r3, r3, #3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d001      	beq.n	800d112 <tcp_output+0x2de>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <tcp_output+0x2e0>
 800d112:	2300      	movs	r3, #0
 800d114:	4423      	add	r3, r4
 800d116:	2b00      	cmp	r3, #0
 800d118:	d049      	beq.n	800d1ae <tcp_output+0x37a>
      seg->next = NULL;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	2200      	movs	r2, #0
 800d11e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d124:	2b00      	cmp	r3, #0
 800d126:	d105      	bne.n	800d134 <tcp_output+0x300>
        pcb->unacked = seg;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	623b      	str	r3, [r7, #32]
 800d132:	e03f      	b.n	800d1b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f8 ff1a 	bl	8005f74 <lwip_htonl>
 800d140:	4604      	mov	r4, r0
 800d142:	6a3b      	ldr	r3, [r7, #32]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	4618      	mov	r0, r3
 800d14a:	f7f8 ff13 	bl	8005f74 <lwip_htonl>
 800d14e:	4603      	mov	r3, r0
 800d150:	1ae3      	subs	r3, r4, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	da24      	bge.n	800d1a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	3370      	adds	r3, #112	@ 0x70
 800d15a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d15c:	e002      	b.n	800d164 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d011      	beq.n	800d190 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	f7f8 fefd 	bl	8005f74 <lwip_htonl>
 800d17a:	4604      	mov	r4, r0
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	4618      	mov	r0, r3
 800d184:	f7f8 fef6 	bl	8005f74 <lwip_htonl>
 800d188:	4603      	mov	r3, r0
 800d18a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dbe6      	blt.n	800d15e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d196:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	e009      	b.n	800d1b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
 800d1a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	623b      	str	r3, [r7, #32]
 800d1ac:	e002      	b.n	800d1b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d1ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1b0:	f7fb ff37 	bl	8009022 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d012      	beq.n	800d1e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7f8 fed4 	bl	8005f74 <lwip_htonl>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1d6:	8912      	ldrh	r2, [r2, #8]
 800d1d8:	4413      	add	r3, r2
  while (seg != NULL &&
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	f4bf aed9 	bcs.w	800cf94 <tcp_output+0x160>
 800d1e2:	e000      	b.n	800d1e6 <tcp_output+0x3b2>
      break;
 800d1e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d108      	bne.n	800d200 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d1f6:	e004      	b.n	800d202 <tcp_output+0x3ce>
    goto output_done;
 800d1f8:	bf00      	nop
 800d1fa:	e002      	b.n	800d202 <tcp_output+0x3ce>
    goto output_done;
 800d1fc:	bf00      	nop
 800d1fe:	e000      	b.n	800d202 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d200:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8b5b      	ldrh	r3, [r3, #26]
 800d206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3728      	adds	r7, #40	@ 0x28
 800d216:	46bd      	mov	sp, r7
 800d218:	bdb0      	pop	{r4, r5, r7, pc}
 800d21a:	bf00      	nop

0800d21c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <tcp_output_segment_busy+0x1c>
 800d22a:	4b09      	ldr	r3, [pc, #36]	@ (800d250 <tcp_output_segment_busy+0x34>)
 800d22c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d230:	4908      	ldr	r1, [pc, #32]	@ (800d254 <tcp_output_segment_busy+0x38>)
 800d232:	4809      	ldr	r0, [pc, #36]	@ (800d258 <tcp_output_segment_busy+0x3c>)
 800d234:	f006 fe0a 	bl	8013e4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	7b9b      	ldrb	r3, [r3, #14]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d001      	beq.n	800d246 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3708      	adds	r7, #8
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	080193d8 	.word	0x080193d8
 800d254:	08019974 	.word	0x08019974
 800d258:	0801942c 	.word	0x0801942c

0800d25c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d25c:	b5b0      	push	{r4, r5, r7, lr}
 800d25e:	b08c      	sub	sp, #48	@ 0x30
 800d260:	af04      	add	r7, sp, #16
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d106      	bne.n	800d27c <tcp_output_segment+0x20>
 800d26e:	4b64      	ldr	r3, [pc, #400]	@ (800d400 <tcp_output_segment+0x1a4>)
 800d270:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d274:	4963      	ldr	r1, [pc, #396]	@ (800d404 <tcp_output_segment+0x1a8>)
 800d276:	4864      	ldr	r0, [pc, #400]	@ (800d408 <tcp_output_segment+0x1ac>)
 800d278:	f006 fde8 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <tcp_output_segment+0x34>
 800d282:	4b5f      	ldr	r3, [pc, #380]	@ (800d400 <tcp_output_segment+0x1a4>)
 800d284:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d288:	4960      	ldr	r1, [pc, #384]	@ (800d40c <tcp_output_segment+0x1b0>)
 800d28a:	485f      	ldr	r0, [pc, #380]	@ (800d408 <tcp_output_segment+0x1ac>)
 800d28c:	f006 fdde 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <tcp_output_segment+0x48>
 800d296:	4b5a      	ldr	r3, [pc, #360]	@ (800d400 <tcp_output_segment+0x1a4>)
 800d298:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d29c:	495c      	ldr	r1, [pc, #368]	@ (800d410 <tcp_output_segment+0x1b4>)
 800d29e:	485a      	ldr	r0, [pc, #360]	@ (800d408 <tcp_output_segment+0x1ac>)
 800d2a0:	f006 fdd4 	bl	8013e4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	f7ff ffb9 	bl	800d21c <tcp_output_segment_busy>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e0a1      	b.n	800d3f8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68dc      	ldr	r4, [r3, #12]
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f7f8 fe59 	bl	8005f74 <lwip_htonl>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68dc      	ldr	r4, [r3, #12]
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f7f8 fe3a 	bl	8005f48 <lwip_htons>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	3314      	adds	r3, #20
 800d2ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	7a9b      	ldrb	r3, [r3, #10]
 800d2f2:	f003 0301 	and.w	r3, r3, #1
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d015      	beq.n	800d326 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	461a      	mov	r2, r3
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d306:	f7fc fa39 	bl	800977c <tcp_eff_send_mss_netif>
 800d30a:	4603      	mov	r3, r0
 800d30c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d30e:	8b7b      	ldrh	r3, [r7, #26]
 800d310:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d314:	4618      	mov	r0, r3
 800d316:	f7f8 fe2d 	bl	8005f74 <lwip_htonl>
 800d31a:	4602      	mov	r2, r0
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	3304      	adds	r3, #4
 800d324:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	da02      	bge.n	800d336 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2200      	movs	r2, #0
 800d334:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10c      	bne.n	800d358 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d33e:	4b35      	ldr	r3, [pc, #212]	@ (800d414 <tcp_output_segment+0x1b8>)
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f8 fe11 	bl	8005f74 <lwip_htonl>
 800d352:	4602      	mov	r2, r0
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	8959      	ldrh	r1, [r3, #10]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	8b3a      	ldrh	r2, [r7, #24]
 800d372:	1a8a      	subs	r2, r1, r2
 800d374:	b292      	uxth	r2, r2
 800d376:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	8919      	ldrh	r1, [r3, #8]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	8b3a      	ldrh	r2, [r7, #24]
 800d384:	1a8a      	subs	r2, r1, r2
 800d386:	b292      	uxth	r2, r2
 800d388:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	68d2      	ldr	r2, [r2, #12]
 800d392:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	741a      	strb	r2, [r3, #16]
 800d39c:	2200      	movs	r2, #0
 800d39e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	7a9b      	ldrb	r3, [r3, #10]
 800d3a8:	f003 0301 	and.w	r3, r3, #1
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <tcp_output_segment+0x158>
 800d3b0:	2318      	movs	r3, #24
 800d3b2:	e000      	b.n	800d3b6 <tcp_output_segment+0x15a>
 800d3b4:	2314      	movs	r3, #20
 800d3b6:	4413      	add	r3, r2
 800d3b8:	69fa      	ldr	r2, [r7, #28]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d006      	beq.n	800d3cc <tcp_output_segment+0x170>
 800d3be:	4b10      	ldr	r3, [pc, #64]	@ (800d400 <tcp_output_segment+0x1a4>)
 800d3c0:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d3c4:	4914      	ldr	r1, [pc, #80]	@ (800d418 <tcp_output_segment+0x1bc>)
 800d3c6:	4810      	ldr	r0, [pc, #64]	@ (800d408 <tcp_output_segment+0x1ac>)
 800d3c8:	f006 fd40 	bl	8013e4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6858      	ldr	r0, [r3, #4]
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	1d1c      	adds	r4, r3, #4
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	7add      	ldrb	r5, [r3, #11]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	7a9b      	ldrb	r3, [r3, #10]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	9202      	str	r2, [sp, #8]
 800d3e2:	2206      	movs	r2, #6
 800d3e4:	9201      	str	r2, [sp, #4]
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	462b      	mov	r3, r5
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	f004 fc1e 	bl	8011c2c <ip4_output_if>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bdb0      	pop	{r4, r5, r7, pc}
 800d400:	080193d8 	.word	0x080193d8
 800d404:	0801999c 	.word	0x0801999c
 800d408:	0801942c 	.word	0x0801942c
 800d40c:	080199bc 	.word	0x080199bc
 800d410:	080199dc 	.word	0x080199dc
 800d414:	20007fd4 	.word	0x20007fd4
 800d418:	08019a00 	.word	0x08019a00

0800d41c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d41c:	b5b0      	push	{r4, r5, r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d106      	bne.n	800d438 <tcp_rexmit_rto_prepare+0x1c>
 800d42a:	4b31      	ldr	r3, [pc, #196]	@ (800d4f0 <tcp_rexmit_rto_prepare+0xd4>)
 800d42c:	f240 6263 	movw	r2, #1635	@ 0x663
 800d430:	4930      	ldr	r1, [pc, #192]	@ (800d4f4 <tcp_rexmit_rto_prepare+0xd8>)
 800d432:	4831      	ldr	r0, [pc, #196]	@ (800d4f8 <tcp_rexmit_rto_prepare+0xdc>)
 800d434:	f006 fd0a 	bl	8013e4c <iprintf>

  if (pcb->unacked == NULL) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d440:	f06f 0305 	mvn.w	r3, #5
 800d444:	e050      	b.n	800d4e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e00b      	b.n	800d466 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7ff fee4 	bl	800d21c <tcp_output_segment_busy>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d45a:	f06f 0305 	mvn.w	r3, #5
 800d45e:	e043      	b.n	800d4e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1ef      	bne.n	800d44e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f7ff fed4 	bl	800d21c <tcp_output_segment_busy>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d002      	beq.n	800d480 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d47a:	f06f 0305 	mvn.w	r3, #5
 800d47e:	e033      	b.n	800d4e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	8b5b      	ldrh	r3, [r3, #26]
 800d49a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f8 fd62 	bl	8005f74 <lwip_htonl>
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	891b      	ldrh	r3, [r3, #8]
 800d4b6:	461d      	mov	r5, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	899b      	ldrh	r3, [r3, #12]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7f8 fd41 	bl	8005f48 <lwip_htons>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <tcp_rexmit_rto_prepare+0xba>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e000      	b.n	800d4d8 <tcp_rexmit_rto_prepare+0xbc>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	442b      	add	r3, r5
 800d4da:	18e2      	adds	r2, r4, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f0:	080193d8 	.word	0x080193d8
 800d4f4:	08019a14 	.word	0x08019a14
 800d4f8:	0801942c 	.word	0x0801942c

0800d4fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <tcp_rexmit_rto_commit+0x1c>
 800d50a:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <tcp_rexmit_rto_commit+0x44>)
 800d50c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d510:	490c      	ldr	r1, [pc, #48]	@ (800d544 <tcp_rexmit_rto_commit+0x48>)
 800d512:	480d      	ldr	r0, [pc, #52]	@ (800d548 <tcp_rexmit_rto_commit+0x4c>)
 800d514:	f006 fc9a 	bl	8013e4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d51e:	2bff      	cmp	r3, #255	@ 0xff
 800d520:	d007      	beq.n	800d532 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d528:	3301      	adds	r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fc7e 	bl	800ce34 <tcp_output>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	080193d8 	.word	0x080193d8
 800d544:	08019a38 	.word	0x08019a38
 800d548:	0801942c 	.word	0x0801942c

0800d54c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d106      	bne.n	800d568 <tcp_rexmit_rto+0x1c>
 800d55a:	4b0a      	ldr	r3, [pc, #40]	@ (800d584 <tcp_rexmit_rto+0x38>)
 800d55c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d560:	4909      	ldr	r1, [pc, #36]	@ (800d588 <tcp_rexmit_rto+0x3c>)
 800d562:	480a      	ldr	r0, [pc, #40]	@ (800d58c <tcp_rexmit_rto+0x40>)
 800d564:	f006 fc72 	bl	8013e4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7ff ff57 	bl	800d41c <tcp_rexmit_rto_prepare>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ffc1 	bl	800d4fc <tcp_rexmit_rto_commit>
  }
}
 800d57a:	bf00      	nop
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	080193d8 	.word	0x080193d8
 800d588:	08019a5c 	.word	0x08019a5c
 800d58c:	0801942c 	.word	0x0801942c

0800d590 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d590:	b590      	push	{r4, r7, lr}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <tcp_rexmit+0x1c>
 800d59e:	4b2f      	ldr	r3, [pc, #188]	@ (800d65c <tcp_rexmit+0xcc>)
 800d5a0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d5a4:	492e      	ldr	r1, [pc, #184]	@ (800d660 <tcp_rexmit+0xd0>)
 800d5a6:	482f      	ldr	r0, [pc, #188]	@ (800d664 <tcp_rexmit+0xd4>)
 800d5a8:	f006 fc50 	bl	8013e4c <iprintf>

  if (pcb->unacked == NULL) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d102      	bne.n	800d5ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d5b4:	f06f 0305 	mvn.w	r3, #5
 800d5b8:	e04c      	b.n	800d654 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d5c0:	68b8      	ldr	r0, [r7, #8]
 800d5c2:	f7ff fe2b 	bl	800d21c <tcp_output_segment_busy>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d002      	beq.n	800d5d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d5cc:	f06f 0305 	mvn.w	r3, #5
 800d5d0:	e040      	b.n	800d654 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	336c      	adds	r3, #108	@ 0x6c
 800d5de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d5e0:	e002      	b.n	800d5e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d011      	beq.n	800d614 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f8 fcbb 	bl	8005f74 <lwip_htonl>
 800d5fe:	4604      	mov	r4, r0
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	4618      	mov	r0, r3
 800d608:	f7f8 fcb4 	bl	8005f74 <lwip_htonl>
 800d60c:	4603      	mov	r3, r0
 800d60e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d610:	2b00      	cmp	r3, #0
 800d612:	dbe6      	blt.n	800d5e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d103      	bne.n	800d632 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d638:	2bff      	cmp	r3, #255	@ 0xff
 800d63a:	d007      	beq.n	800d64c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d642:	3301      	adds	r3, #1
 800d644:	b2da      	uxtb	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd90      	pop	{r4, r7, pc}
 800d65c:	080193d8 	.word	0x080193d8
 800d660:	08019a78 	.word	0x08019a78
 800d664:	0801942c 	.word	0x0801942c

0800d668 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <tcp_rexmit_fast+0x1c>
 800d676:	4b2a      	ldr	r3, [pc, #168]	@ (800d720 <tcp_rexmit_fast+0xb8>)
 800d678:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d67c:	4929      	ldr	r1, [pc, #164]	@ (800d724 <tcp_rexmit_fast+0xbc>)
 800d67e:	482a      	ldr	r0, [pc, #168]	@ (800d728 <tcp_rexmit_fast+0xc0>)
 800d680:	f006 fbe4 	bl	8013e4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d045      	beq.n	800d718 <tcp_rexmit_fast+0xb0>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	8b5b      	ldrh	r3, [r3, #26]
 800d690:	f003 0304 	and.w	r3, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	d13f      	bne.n	800d718 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f7ff ff79 	bl	800d590 <tcp_rexmit>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d139      	bne.n	800d718 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	bf28      	it	cs
 800d6b4:	4613      	movcs	r3, r2
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	da00      	bge.n	800d6be <tcp_rexmit_fast+0x56>
 800d6bc:	3301      	adds	r3, #1
 800d6be:	105b      	asrs	r3, r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d206      	bcs.n	800d6e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	0049      	lsls	r1, r1, #1
 800d6f6:	440b      	add	r3, r1
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8b5b      	ldrh	r3, [r3, #26]
 800d708:	f043 0304 	orr.w	r3, r3, #4
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	080193d8 	.word	0x080193d8
 800d724:	08019a90 	.word	0x08019a90
 800d728:	0801942c 	.word	0x0801942c

0800d72c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b086      	sub	sp, #24
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	607b      	str	r3, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	817b      	strh	r3, [r7, #10]
 800d73a:	4613      	mov	r3, r2
 800d73c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d73e:	897a      	ldrh	r2, [r7, #10]
 800d740:	893b      	ldrh	r3, [r7, #8]
 800d742:	4413      	add	r3, r2
 800d744:	b29b      	uxth	r3, r3
 800d746:	3314      	adds	r3, #20
 800d748:	b29b      	uxth	r3, r3
 800d74a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d74e:	4619      	mov	r1, r3
 800d750:	2022      	movs	r0, #34	@ 0x22
 800d752:	f7f9 fca3 	bl	800709c <pbuf_alloc>
 800d756:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d04d      	beq.n	800d7fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d75e:	897b      	ldrh	r3, [r7, #10]
 800d760:	3313      	adds	r3, #19
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	8952      	ldrh	r2, [r2, #10]
 800d766:	4293      	cmp	r3, r2
 800d768:	db06      	blt.n	800d778 <tcp_output_alloc_header_common+0x4c>
 800d76a:	4b26      	ldr	r3, [pc, #152]	@ (800d804 <tcp_output_alloc_header_common+0xd8>)
 800d76c:	f240 7223 	movw	r2, #1827	@ 0x723
 800d770:	4925      	ldr	r1, [pc, #148]	@ (800d808 <tcp_output_alloc_header_common+0xdc>)
 800d772:	4826      	ldr	r0, [pc, #152]	@ (800d80c <tcp_output_alloc_header_common+0xe0>)
 800d774:	f006 fb6a 	bl	8013e4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d77e:	8c3b      	ldrh	r3, [r7, #32]
 800d780:	4618      	mov	r0, r3
 800d782:	f7f8 fbe1 	bl	8005f48 <lwip_htons>
 800d786:	4603      	mov	r3, r0
 800d788:	461a      	mov	r2, r3
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d78e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d790:	4618      	mov	r0, r3
 800d792:	f7f8 fbd9 	bl	8005f48 <lwip_htons>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f7f8 fbe5 	bl	8005f74 <lwip_htonl>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d7b0:	897b      	ldrh	r3, [r7, #10]
 800d7b2:	089b      	lsrs	r3, r3, #2
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	3305      	adds	r3, #5
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	031b      	lsls	r3, r3, #12
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f8 fbbd 	bl	8005f48 <lwip_htons>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d7d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7f8 fbb5 	bl	8005f48 <lwip_htons>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	741a      	strb	r2, [r3, #16]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	749a      	strb	r2, [r3, #18]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d7fa:	697b      	ldr	r3, [r7, #20]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3718      	adds	r7, #24
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	080193d8 	.word	0x080193d8
 800d808:	08019ab0 	.word	0x08019ab0
 800d80c:	0801942c 	.word	0x0801942c

0800d810 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d810:	b5b0      	push	{r4, r5, r7, lr}
 800d812:	b08a      	sub	sp, #40	@ 0x28
 800d814:	af04      	add	r7, sp, #16
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	607b      	str	r3, [r7, #4]
 800d81a:	460b      	mov	r3, r1
 800d81c:	817b      	strh	r3, [r7, #10]
 800d81e:	4613      	mov	r3, r2
 800d820:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <tcp_output_alloc_header+0x26>
 800d828:	4b15      	ldr	r3, [pc, #84]	@ (800d880 <tcp_output_alloc_header+0x70>)
 800d82a:	f240 7242 	movw	r2, #1858	@ 0x742
 800d82e:	4915      	ldr	r1, [pc, #84]	@ (800d884 <tcp_output_alloc_header+0x74>)
 800d830:	4815      	ldr	r0, [pc, #84]	@ (800d888 <tcp_output_alloc_header+0x78>)
 800d832:	f006 fb0b 	bl	8013e4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	8adb      	ldrh	r3, [r3, #22]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	8b12      	ldrh	r2, [r2, #24]
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d846:	893d      	ldrh	r5, [r7, #8]
 800d848:	897c      	ldrh	r4, [r7, #10]
 800d84a:	9103      	str	r1, [sp, #12]
 800d84c:	2110      	movs	r1, #16
 800d84e:	9102      	str	r1, [sp, #8]
 800d850:	9201      	str	r2, [sp, #4]
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	462a      	mov	r2, r5
 800d858:	4621      	mov	r1, r4
 800d85a:	f7ff ff67 	bl	800d72c <tcp_output_alloc_header_common>
 800d85e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d86e:	441a      	add	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d874:	697b      	ldr	r3, [r7, #20]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bdb0      	pop	{r4, r5, r7, pc}
 800d87e:	bf00      	nop
 800d880:	080193d8 	.word	0x080193d8
 800d884:	08019ae0 	.word	0x08019ae0
 800d888:	0801942c 	.word	0x0801942c

0800d88c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	4611      	mov	r1, r2
 800d898:	461a      	mov	r2, r3
 800d89a:	460b      	mov	r3, r1
 800d89c:	71fb      	strb	r3, [r7, #7]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <tcp_output_fill_options+0x2e>
 800d8ac:	4b12      	ldr	r3, [pc, #72]	@ (800d8f8 <tcp_output_fill_options+0x6c>)
 800d8ae:	f240 7256 	movw	r2, #1878	@ 0x756
 800d8b2:	4912      	ldr	r1, [pc, #72]	@ (800d8fc <tcp_output_fill_options+0x70>)
 800d8b4:	4812      	ldr	r0, [pc, #72]	@ (800d900 <tcp_output_fill_options+0x74>)
 800d8b6:	f006 fac9 	bl	8013e4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	3314      	adds	r3, #20
 800d8c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d8c6:	8bfb      	ldrh	r3, [r7, #30]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	f003 0304 	and.w	r3, r3, #4
 800d8d4:	4413      	add	r3, r2
 800d8d6:	3314      	adds	r3, #20
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	4413      	add	r3, r2
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d006      	beq.n	800d8f0 <tcp_output_fill_options+0x64>
 800d8e2:	4b05      	ldr	r3, [pc, #20]	@ (800d8f8 <tcp_output_fill_options+0x6c>)
 800d8e4:	f240 7275 	movw	r2, #1909	@ 0x775
 800d8e8:	4906      	ldr	r1, [pc, #24]	@ (800d904 <tcp_output_fill_options+0x78>)
 800d8ea:	4805      	ldr	r0, [pc, #20]	@ (800d900 <tcp_output_fill_options+0x74>)
 800d8ec:	f006 faae 	bl	8013e4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d8f0:	bf00      	nop
 800d8f2:	3720      	adds	r7, #32
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	080193d8 	.word	0x080193d8
 800d8fc:	08019b08 	.word	0x08019b08
 800d900:	0801942c 	.word	0x0801942c
 800d904:	08019a00 	.word	0x08019a00

0800d908 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08a      	sub	sp, #40	@ 0x28
 800d90c:	af04      	add	r7, sp, #16
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d106      	bne.n	800d92a <tcp_output_control_segment+0x22>
 800d91c:	4b1c      	ldr	r3, [pc, #112]	@ (800d990 <tcp_output_control_segment+0x88>)
 800d91e:	f240 7287 	movw	r2, #1927	@ 0x787
 800d922:	491c      	ldr	r1, [pc, #112]	@ (800d994 <tcp_output_control_segment+0x8c>)
 800d924:	481c      	ldr	r0, [pc, #112]	@ (800d998 <tcp_output_control_segment+0x90>)
 800d926:	f006 fa91 	bl	8013e4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7fe faea 	bl	800bf08 <tcp_route>
 800d934:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d93c:	23fc      	movs	r3, #252	@ 0xfc
 800d93e:	75fb      	strb	r3, [r7, #23]
 800d940:	e01c      	b.n	800d97c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d006      	beq.n	800d956 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	7adb      	ldrb	r3, [r3, #11]
 800d94c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	7a9b      	ldrb	r3, [r3, #10]
 800d952:	757b      	strb	r3, [r7, #21]
 800d954:	e003      	b.n	800d95e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d956:	23ff      	movs	r3, #255	@ 0xff
 800d958:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d95e:	7dba      	ldrb	r2, [r7, #22]
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	2306      	movs	r3, #6
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	7d7b      	ldrb	r3, [r7, #21]
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	4613      	mov	r3, r2
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	68b8      	ldr	r0, [r7, #8]
 800d974:	f004 f95a 	bl	8011c2c <ip4_output_if>
 800d978:	4603      	mov	r3, r0
 800d97a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d97c:	68b8      	ldr	r0, [r7, #8]
 800d97e:	f7f9 fe71 	bl	8007664 <pbuf_free>
  return err;
 800d982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	080193d8 	.word	0x080193d8
 800d994:	08019b30 	.word	0x08019b30
 800d998:	0801942c 	.word	0x0801942c

0800d99c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d99c:	b590      	push	{r4, r7, lr}
 800d99e:	b08b      	sub	sp, #44	@ 0x2c
 800d9a0:	af04      	add	r7, sp, #16
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <tcp_rst+0x22>
 800d9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800da2c <tcp_rst+0x90>)
 800d9b2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d9b6:	491e      	ldr	r1, [pc, #120]	@ (800da30 <tcp_rst+0x94>)
 800d9b8:	481e      	ldr	r0, [pc, #120]	@ (800da34 <tcp_rst+0x98>)
 800d9ba:	f006 fa47 	bl	8013e4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d106      	bne.n	800d9d2 <tcp_rst+0x36>
 800d9c4:	4b19      	ldr	r3, [pc, #100]	@ (800da2c <tcp_rst+0x90>)
 800d9c6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d9ca:	491b      	ldr	r1, [pc, #108]	@ (800da38 <tcp_rst+0x9c>)
 800d9cc:	4819      	ldr	r0, [pc, #100]	@ (800da34 <tcp_rst+0x98>)
 800d9ce:	f006 fa3d 	bl	8013e4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d9d6:	2310      	movs	r3, #16
 800d9d8:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	b29c      	uxth	r4, r3
 800d9de:	68b8      	ldr	r0, [r7, #8]
 800d9e0:	f7f8 fac8 	bl	8005f74 <lwip_htonl>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	8abb      	ldrh	r3, [r7, #20]
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	2314      	movs	r3, #20
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff fe95 	bl	800d72c <tcp_output_alloc_header_common>
 800da02:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00c      	beq.n	800da24 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
 800da0c:	2200      	movs	r2, #0
 800da0e:	6939      	ldr	r1, [r7, #16]
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f7ff ff3b 	bl	800d88c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800da16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	6939      	ldr	r1, [r7, #16]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff ff73 	bl	800d908 <tcp_output_control_segment>
 800da22:	e000      	b.n	800da26 <tcp_rst+0x8a>
    return;
 800da24:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800da26:	371c      	adds	r7, #28
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd90      	pop	{r4, r7, pc}
 800da2c:	080193d8 	.word	0x080193d8
 800da30:	08019b5c 	.word	0x08019b5c
 800da34:	0801942c 	.word	0x0801942c
 800da38:	08019b78 	.word	0x08019b78

0800da3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d106      	bne.n	800da60 <tcp_send_empty_ack+0x24>
 800da52:	4b28      	ldr	r3, [pc, #160]	@ (800daf4 <tcp_send_empty_ack+0xb8>)
 800da54:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800da58:	4927      	ldr	r1, [pc, #156]	@ (800daf8 <tcp_send_empty_ack+0xbc>)
 800da5a:	4828      	ldr	r0, [pc, #160]	@ (800dafc <tcp_send_empty_ack+0xc0>)
 800da5c:	f006 f9f6 	bl	8013e4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 0304 	and.w	r3, r3, #4
 800da6a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800da6c:	7d7b      	ldrb	r3, [r7, #21]
 800da6e:	b29c      	uxth	r4, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da74:	4618      	mov	r0, r3
 800da76:	f7f8 fa7d 	bl	8005f74 <lwip_htonl>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2200      	movs	r2, #0
 800da7e:	4621      	mov	r1, r4
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff fec5 	bl	800d810 <tcp_output_alloc_header>
 800da86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	8b5b      	ldrh	r3, [r3, #26]
 800da92:	f043 0303 	orr.w	r3, r3, #3
 800da96:	b29a      	uxth	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800da9c:	f06f 0301 	mvn.w	r3, #1
 800daa0:	e023      	b.n	800daea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800daa2:	7dbb      	ldrb	r3, [r7, #22]
 800daa4:	7dfa      	ldrb	r2, [r7, #23]
 800daa6:	6939      	ldr	r1, [r7, #16]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff feef 	bl	800d88c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3304      	adds	r3, #4
 800dab4:	6939      	ldr	r1, [r7, #16]
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7ff ff26 	bl	800d908 <tcp_output_control_segment>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d007      	beq.n	800dad8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	8b5b      	ldrh	r3, [r3, #26]
 800dacc:	f043 0303 	orr.w	r3, r3, #3
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	835a      	strh	r2, [r3, #26]
 800dad6:	e006      	b.n	800dae6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	8b5b      	ldrh	r3, [r3, #26]
 800dadc:	f023 0303 	bic.w	r3, r3, #3
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daea:	4618      	mov	r0, r3
 800daec:	371c      	adds	r7, #28
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd90      	pop	{r4, r7, pc}
 800daf2:	bf00      	nop
 800daf4:	080193d8 	.word	0x080193d8
 800daf8:	08019b94 	.word	0x08019b94
 800dafc:	0801942c 	.word	0x0801942c

0800db00 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800db00:	b590      	push	{r4, r7, lr}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db08:	2300      	movs	r3, #0
 800db0a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <tcp_keepalive+0x20>
 800db12:	4b18      	ldr	r3, [pc, #96]	@ (800db74 <tcp_keepalive+0x74>)
 800db14:	f640 0224 	movw	r2, #2084	@ 0x824
 800db18:	4917      	ldr	r1, [pc, #92]	@ (800db78 <tcp_keepalive+0x78>)
 800db1a:	4818      	ldr	r0, [pc, #96]	@ (800db7c <tcp_keepalive+0x7c>)
 800db1c:	f006 f996 	bl	8013e4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	b29c      	uxth	r4, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db28:	3b01      	subs	r3, #1
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7f8 fa22 	bl	8005f74 <lwip_htonl>
 800db30:	4603      	mov	r3, r0
 800db32:	2200      	movs	r2, #0
 800db34:	4621      	mov	r1, r4
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff fe6a 	bl	800d810 <tcp_output_alloc_header>
 800db3c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d102      	bne.n	800db4a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800db44:	f04f 33ff 	mov.w	r3, #4294967295
 800db48:	e010      	b.n	800db6c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
 800db4c:	2200      	movs	r2, #0
 800db4e:	6939      	ldr	r1, [r7, #16]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fe9b 	bl	800d88c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3304      	adds	r3, #4
 800db5c:	6939      	ldr	r1, [r7, #16]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7ff fed2 	bl	800d908 <tcp_output_control_segment>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800db68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	371c      	adds	r7, #28
 800db70:	46bd      	mov	sp, r7
 800db72:	bd90      	pop	{r4, r7, pc}
 800db74:	080193d8 	.word	0x080193d8
 800db78:	08019bb4 	.word	0x08019bb4
 800db7c:	0801942c 	.word	0x0801942c

0800db80 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db80:	b590      	push	{r4, r7, lr}
 800db82:	b08b      	sub	sp, #44	@ 0x2c
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db88:	2300      	movs	r3, #0
 800db8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <tcp_zero_window_probe+0x22>
 800db94:	4b4c      	ldr	r3, [pc, #304]	@ (800dcc8 <tcp_zero_window_probe+0x148>)
 800db96:	f640 024f 	movw	r2, #2127	@ 0x84f
 800db9a:	494c      	ldr	r1, [pc, #304]	@ (800dccc <tcp_zero_window_probe+0x14c>)
 800db9c:	484c      	ldr	r0, [pc, #304]	@ (800dcd0 <tcp_zero_window_probe+0x150>)
 800db9e:	f006 f955 	bl	8013e4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dba6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dba8:	6a3b      	ldr	r3, [r7, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e086      	b.n	800dcc0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dbb8:	2bff      	cmp	r3, #255	@ 0xff
 800dbba:	d007      	beq.n	800dbcc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	899b      	ldrh	r3, [r3, #12]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7f8 f9b7 	bl	8005f48 <lwip_htons>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0301 	and.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <tcp_zero_window_probe+0x72>
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	891b      	ldrh	r3, [r3, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <tcp_zero_window_probe+0x72>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e000      	b.n	800dbf4 <tcp_zero_window_probe+0x74>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dbf6:	7ffb      	ldrb	r3, [r7, #31]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	bf0c      	ite	eq
 800dbfc:	2301      	moveq	r3, #1
 800dbfe:	2300      	movne	r3, #0
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dc04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc08:	b299      	uxth	r1, r3
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	8bba      	ldrh	r2, [r7, #28]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff fdfc 	bl	800d810 <tcp_output_alloc_header>
 800dc18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d102      	bne.n	800dc26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dc20:	f04f 33ff 	mov.w	r3, #4294967295
 800dc24:	e04c      	b.n	800dcc0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dc2c:	7ffb      	ldrb	r3, [r7, #31]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d011      	beq.n	800dc56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	899b      	ldrh	r3, [r3, #12]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dc3e:	b21c      	sxth	r4, r3
 800dc40:	2011      	movs	r0, #17
 800dc42:	f7f8 f981 	bl	8005f48 <lwip_htons>
 800dc46:	4603      	mov	r3, r0
 800dc48:	b21b      	sxth	r3, r3
 800dc4a:	4323      	orrs	r3, r4
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	819a      	strh	r2, [r3, #12]
 800dc54:	e010      	b.n	800dc78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	3314      	adds	r3, #20
 800dc5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	6858      	ldr	r0, [r3, #4]
 800dc62:	6a3b      	ldr	r3, [r7, #32]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	891a      	ldrh	r2, [r3, #8]
 800dc68:	6a3b      	ldr	r3, [r7, #32]
 800dc6a:	891b      	ldrh	r3, [r3, #8]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	2201      	movs	r2, #1
 800dc72:	6939      	ldr	r1, [r7, #16]
 800dc74:	f7f9 fef0 	bl	8007a58 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dc78:	6a3b      	ldr	r3, [r7, #32]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7f8 f978 	bl	8005f74 <lwip_htonl>
 800dc84:	4603      	mov	r3, r0
 800dc86:	3301      	adds	r3, #1
 800dc88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	1ad3      	subs	r3, r2, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	da02      	bge.n	800dc9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dca0:	2200      	movs	r2, #0
 800dca2:	69b9      	ldr	r1, [r7, #24]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff fdf1 	bl	800d88c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	69b9      	ldr	r1, [r7, #24]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff fe28 	bl	800d908 <tcp_output_control_segment>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dcbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	372c      	adds	r7, #44	@ 0x2c
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd90      	pop	{r4, r7, pc}
 800dcc8:	080193d8 	.word	0x080193d8
 800dccc:	08019bd0 	.word	0x08019bd0
 800dcd0:	0801942c 	.word	0x0801942c

0800dcd4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dcdc:	f7fa f80e 	bl	8007cfc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dce0:	4b0a      	ldr	r3, [pc, #40]	@ (800dd0c <tcpip_tcp_timer+0x38>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d103      	bne.n	800dcf0 <tcpip_tcp_timer+0x1c>
 800dce8:	4b09      	ldr	r3, [pc, #36]	@ (800dd10 <tcpip_tcp_timer+0x3c>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d005      	beq.n	800dcfc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	4908      	ldr	r1, [pc, #32]	@ (800dd14 <tcpip_tcp_timer+0x40>)
 800dcf4:	20fa      	movs	r0, #250	@ 0xfa
 800dcf6:	f000 f8f3 	bl	800dee0 <sys_timeout>
 800dcfa:	e003      	b.n	800dd04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dcfc:	4b06      	ldr	r3, [pc, #24]	@ (800dd18 <tcpip_tcp_timer+0x44>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]
  }
}
 800dd02:	bf00      	nop
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20007fe0 	.word	0x20007fe0
 800dd10:	20007fe4 	.word	0x20007fe4
 800dd14:	0800dcd5 	.word	0x0800dcd5
 800dd18:	2000802c 	.word	0x2000802c

0800dd1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dd20:	4b0a      	ldr	r3, [pc, #40]	@ (800dd4c <tcp_timer_needed+0x30>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10f      	bne.n	800dd48 <tcp_timer_needed+0x2c>
 800dd28:	4b09      	ldr	r3, [pc, #36]	@ (800dd50 <tcp_timer_needed+0x34>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d103      	bne.n	800dd38 <tcp_timer_needed+0x1c>
 800dd30:	4b08      	ldr	r3, [pc, #32]	@ (800dd54 <tcp_timer_needed+0x38>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d007      	beq.n	800dd48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dd38:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <tcp_timer_needed+0x30>)
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4905      	ldr	r1, [pc, #20]	@ (800dd58 <tcp_timer_needed+0x3c>)
 800dd42:	20fa      	movs	r0, #250	@ 0xfa
 800dd44:	f000 f8cc 	bl	800dee0 <sys_timeout>
  }
}
 800dd48:	bf00      	nop
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	2000802c 	.word	0x2000802c
 800dd50:	20007fe0 	.word	0x20007fe0
 800dd54:	20007fe4 	.word	0x20007fe4
 800dd58:	0800dcd5 	.word	0x0800dcd5

0800dd5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b086      	sub	sp, #24
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dd68:	2006      	movs	r0, #6
 800dd6a:	f7f8 fd89 	bl	8006880 <memp_malloc>
 800dd6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d151      	bne.n	800de20 <sys_timeout_abs+0xc4>
 800dd7c:	4b2a      	ldr	r3, [pc, #168]	@ (800de28 <sys_timeout_abs+0xcc>)
 800dd7e:	22be      	movs	r2, #190	@ 0xbe
 800dd80:	492a      	ldr	r1, [pc, #168]	@ (800de2c <sys_timeout_abs+0xd0>)
 800dd82:	482b      	ldr	r0, [pc, #172]	@ (800de30 <sys_timeout_abs+0xd4>)
 800dd84:	f006 f862 	bl	8013e4c <iprintf>
    return;
 800dd88:	e04a      	b.n	800de20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dda2:	4b24      	ldr	r3, [pc, #144]	@ (800de34 <sys_timeout_abs+0xd8>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d103      	bne.n	800ddb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ddaa:	4a22      	ldr	r2, [pc, #136]	@ (800de34 <sys_timeout_abs+0xd8>)
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	6013      	str	r3, [r2, #0]
    return;
 800ddb0:	e037      	b.n	800de22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	4b1f      	ldr	r3, [pc, #124]	@ (800de34 <sys_timeout_abs+0xd8>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	0fdb      	lsrs	r3, r3, #31
 800ddc0:	f003 0301 	and.w	r3, r3, #1
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d007      	beq.n	800ddda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ddca:	4b1a      	ldr	r3, [pc, #104]	@ (800de34 <sys_timeout_abs+0xd8>)
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ddd2:	4a18      	ldr	r2, [pc, #96]	@ (800de34 <sys_timeout_abs+0xd8>)
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	6013      	str	r3, [r2, #0]
 800ddd8:	e023      	b.n	800de22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ddda:	4b16      	ldr	r3, [pc, #88]	@ (800de34 <sys_timeout_abs+0xd8>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	617b      	str	r3, [r7, #20]
 800dde0:	e01a      	b.n	800de18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00b      	beq.n	800de02 <sys_timeout_abs+0xa6>
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	1ad3      	subs	r3, r2, r3
 800ddf6:	0fdb      	lsrs	r3, r3, #31
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d007      	beq.n	800de12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	601a      	str	r2, [r3, #0]
        break;
 800de10:	e007      	b.n	800de22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d1e1      	bne.n	800dde2 <sys_timeout_abs+0x86>
 800de1e:	e000      	b.n	800de22 <sys_timeout_abs+0xc6>
    return;
 800de20:	bf00      	nop
      }
    }
  }
}
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08019bf4 	.word	0x08019bf4
 800de2c:	08019c28 	.word	0x08019c28
 800de30:	08019c68 	.word	0x08019c68
 800de34:	20008024 	.word	0x20008024

0800de38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	4798      	blx	r3

  now = sys_now();
 800de4a:	f7f6 fa73 	bl	8004334 <sys_now>
 800de4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	4b0f      	ldr	r3, [pc, #60]	@ (800de94 <lwip_cyclic_timer+0x5c>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4413      	add	r3, r2
 800de5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	0fdb      	lsrs	r3, r3, #31
 800de64:	f003 0301 	and.w	r3, r3, #1
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d009      	beq.n	800de82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	4413      	add	r3, r2
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	4907      	ldr	r1, [pc, #28]	@ (800de98 <lwip_cyclic_timer+0x60>)
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff ff6e 	bl	800dd5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800de80:	e004      	b.n	800de8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	4904      	ldr	r1, [pc, #16]	@ (800de98 <lwip_cyclic_timer+0x60>)
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff ff68 	bl	800dd5c <sys_timeout_abs>
}
 800de8c:	bf00      	nop
 800de8e:	3718      	adds	r7, #24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20008028 	.word	0x20008028
 800de98:	0800de39 	.word	0x0800de39

0800de9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dea2:	2301      	movs	r3, #1
 800dea4:	607b      	str	r3, [r7, #4]
 800dea6:	e00e      	b.n	800dec6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dea8:	4a0b      	ldr	r2, [pc, #44]	@ (800ded8 <sys_timeouts_init+0x3c>)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	00db      	lsls	r3, r3, #3
 800deb4:	4a08      	ldr	r2, [pc, #32]	@ (800ded8 <sys_timeouts_init+0x3c>)
 800deb6:	4413      	add	r3, r2
 800deb8:	461a      	mov	r2, r3
 800deba:	4908      	ldr	r1, [pc, #32]	@ (800dedc <sys_timeouts_init+0x40>)
 800debc:	f000 f810 	bl	800dee0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3301      	adds	r3, #1
 800dec4:	607b      	str	r3, [r7, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b04      	cmp	r3, #4
 800deca:	d9ed      	bls.n	800dea8 <sys_timeouts_init+0xc>
  }
}
 800decc:	bf00      	nop
 800dece:	bf00      	nop
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	0801abe8 	.word	0x0801abe8
 800dedc:	0800de39 	.word	0x0800de39

0800dee0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800def2:	d306      	bcc.n	800df02 <sys_timeout+0x22>
 800def4:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <sys_timeout+0x40>)
 800def6:	f240 1229 	movw	r2, #297	@ 0x129
 800defa:	490a      	ldr	r1, [pc, #40]	@ (800df24 <sys_timeout+0x44>)
 800defc:	480a      	ldr	r0, [pc, #40]	@ (800df28 <sys_timeout+0x48>)
 800defe:	f005 ffa5 	bl	8013e4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800df02:	f7f6 fa17 	bl	8004334 <sys_now>
 800df06:	4602      	mov	r2, r0
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	68b9      	ldr	r1, [r7, #8]
 800df12:	6978      	ldr	r0, [r7, #20]
 800df14:	f7ff ff22 	bl	800dd5c <sys_timeout_abs>
#endif
}
 800df18:	bf00      	nop
 800df1a:	3718      	adds	r7, #24
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	08019bf4 	.word	0x08019bf4
 800df24:	08019c90 	.word	0x08019c90
 800df28:	08019c68 	.word	0x08019c68

0800df2c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800df36:	4b19      	ldr	r3, [pc, #100]	@ (800df9c <sys_untimeout+0x70>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d029      	beq.n	800df92 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800df3e:	4b17      	ldr	r3, [pc, #92]	@ (800df9c <sys_untimeout+0x70>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	60bb      	str	r3, [r7, #8]
 800df44:	2300      	movs	r3, #0
 800df46:	60fb      	str	r3, [r7, #12]
 800df48:	e01f      	b.n	800df8a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	689b      	ldr	r3, [r3, #8]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	429a      	cmp	r2, r3
 800df52:	d115      	bne.n	800df80 <sys_untimeout+0x54>
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d110      	bne.n	800df80 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <sys_untimeout+0x42>
        next_timeout = t->next;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a0c      	ldr	r2, [pc, #48]	@ (800df9c <sys_untimeout+0x70>)
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	e003      	b.n	800df76 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	2006      	movs	r0, #6
 800df7a:	f7f8 fcf1 	bl	8006960 <memp_free>
      return;
 800df7e:	e009      	b.n	800df94 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	60bb      	str	r3, [r7, #8]
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1dc      	bne.n	800df4a <sys_untimeout+0x1e>
    }
  }
  return;
 800df90:	e000      	b.n	800df94 <sys_untimeout+0x68>
    return;
 800df92:	bf00      	nop
}
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20008024 	.word	0x20008024

0800dfa0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dfa6:	f7f6 f9c5 	bl	8004334 <sys_now>
 800dfaa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dfac:	4b1a      	ldr	r3, [pc, #104]	@ (800e018 <sys_check_timeouts+0x78>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <sys_check_timeouts+0x1a>
 800dfb6:	f7f9 f81b 	bl	8006ff0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dfba:	4b18      	ldr	r3, [pc, #96]	@ (800e01c <sys_check_timeouts+0x7c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d022      	beq.n	800e00c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	0fdb      	lsrs	r3, r3, #31
 800dfd0:	f003 0301 	and.w	r3, r3, #1
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d11a      	bne.n	800e010 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a0f      	ldr	r2, [pc, #60]	@ (800e01c <sys_check_timeouts+0x7c>)
 800dfe0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	4a0b      	ldr	r2, [pc, #44]	@ (800e020 <sys_check_timeouts+0x80>)
 800dff4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dff6:	68b9      	ldr	r1, [r7, #8]
 800dff8:	2006      	movs	r0, #6
 800dffa:	f7f8 fcb1 	bl	8006960 <memp_free>
    if (handler != NULL) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d0d3      	beq.n	800dfac <sys_check_timeouts+0xc>
      handler(arg);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6838      	ldr	r0, [r7, #0]
 800e008:	4798      	blx	r3
  do {
 800e00a:	e7cf      	b.n	800dfac <sys_check_timeouts+0xc>
      return;
 800e00c:	bf00      	nop
 800e00e:	e000      	b.n	800e012 <sys_check_timeouts+0x72>
      return;
 800e010:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20007fd1 	.word	0x20007fd1
 800e01c:	20008024 	.word	0x20008024
 800e020:	20008028 	.word	0x20008028

0800e024 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e028:	f004 ff58 	bl	8012edc <rand>
 800e02c:	4603      	mov	r3, r0
 800e02e:	b29b      	uxth	r3, r3
 800e030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e034:	b29b      	uxth	r3, r3
 800e036:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	4b01      	ldr	r3, [pc, #4]	@ (800e044 <udp_init+0x20>)
 800e03e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e040:	bf00      	nop
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20000038 	.word	0x20000038

0800e048 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e052:	4b17      	ldr	r3, [pc, #92]	@ (800e0b0 <udp_new_port+0x68>)
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	b291      	uxth	r1, r2
 800e05a:	4a15      	ldr	r2, [pc, #84]	@ (800e0b0 <udp_new_port+0x68>)
 800e05c:	8011      	strh	r1, [r2, #0]
 800e05e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e062:	4293      	cmp	r3, r2
 800e064:	d103      	bne.n	800e06e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e066:	4b12      	ldr	r3, [pc, #72]	@ (800e0b0 <udp_new_port+0x68>)
 800e068:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e06c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e06e:	4b11      	ldr	r3, [pc, #68]	@ (800e0b4 <udp_new_port+0x6c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	e011      	b.n	800e09a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	8a5a      	ldrh	r2, [r3, #18]
 800e07a:	4b0d      	ldr	r3, [pc, #52]	@ (800e0b0 <udp_new_port+0x68>)
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d108      	bne.n	800e094 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e082:	88fb      	ldrh	r3, [r7, #6]
 800e084:	3301      	adds	r3, #1
 800e086:	80fb      	strh	r3, [r7, #6]
 800e088:	88fb      	ldrh	r3, [r7, #6]
 800e08a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e08e:	d3e0      	bcc.n	800e052 <udp_new_port+0xa>
        return 0;
 800e090:	2300      	movs	r3, #0
 800e092:	e007      	b.n	800e0a4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	603b      	str	r3, [r7, #0]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1ea      	bne.n	800e076 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e0a0:	4b03      	ldr	r3, [pc, #12]	@ (800e0b0 <udp_new_port+0x68>)
 800e0a2:	881b      	ldrh	r3, [r3, #0]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr
 800e0b0:	20000038 	.word	0x20000038
 800e0b4:	20008030 	.word	0x20008030

0800e0b8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d105      	bne.n	800e0d8 <udp_input_local_match+0x20>
 800e0cc:	4b27      	ldr	r3, [pc, #156]	@ (800e16c <udp_input_local_match+0xb4>)
 800e0ce:	2287      	movs	r2, #135	@ 0x87
 800e0d0:	4927      	ldr	r1, [pc, #156]	@ (800e170 <udp_input_local_match+0xb8>)
 800e0d2:	4828      	ldr	r0, [pc, #160]	@ (800e174 <udp_input_local_match+0xbc>)
 800e0d4:	f005 feba 	bl	8013e4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d105      	bne.n	800e0ea <udp_input_local_match+0x32>
 800e0de:	4b23      	ldr	r3, [pc, #140]	@ (800e16c <udp_input_local_match+0xb4>)
 800e0e0:	2288      	movs	r2, #136	@ 0x88
 800e0e2:	4925      	ldr	r1, [pc, #148]	@ (800e178 <udp_input_local_match+0xc0>)
 800e0e4:	4823      	ldr	r0, [pc, #140]	@ (800e174 <udp_input_local_match+0xbc>)
 800e0e6:	f005 feb1 	bl	8013e4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	7a1b      	ldrb	r3, [r3, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00b      	beq.n	800e10a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	7a1a      	ldrb	r2, [r3, #8]
 800e0f6:	4b21      	ldr	r3, [pc, #132]	@ (800e17c <udp_input_local_match+0xc4>)
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e102:	429a      	cmp	r2, r3
 800e104:	d001      	beq.n	800e10a <udp_input_local_match+0x52>
    return 0;
 800e106:	2300      	movs	r3, #0
 800e108:	e02b      	b.n	800e162 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d018      	beq.n	800e142 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d013      	beq.n	800e13e <udp_input_local_match+0x86>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00f      	beq.n	800e13e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e11e:	4b17      	ldr	r3, [pc, #92]	@ (800e17c <udp_input_local_match+0xc4>)
 800e120:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e126:	d00a      	beq.n	800e13e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	4b13      	ldr	r3, [pc, #76]	@ (800e17c <udp_input_local_match+0xc4>)
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	405a      	eors	r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	3308      	adds	r3, #8
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d110      	bne.n	800e160 <udp_input_local_match+0xa8>
          return 1;
 800e13e:	2301      	movs	r3, #1
 800e140:	e00f      	b.n	800e162 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d009      	beq.n	800e15c <udp_input_local_match+0xa4>
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <udp_input_local_match+0xa4>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	4b09      	ldr	r3, [pc, #36]	@ (800e17c <udp_input_local_match+0xc4>)
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d101      	bne.n	800e160 <udp_input_local_match+0xa8>
        return 1;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e000      	b.n	800e162 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	08019cdc 	.word	0x08019cdc
 800e170:	08019d0c 	.word	0x08019d0c
 800e174:	08019d30 	.word	0x08019d30
 800e178:	08019d58 	.word	0x08019d58
 800e17c:	20004f98 	.word	0x20004f98

0800e180 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e180:	b590      	push	{r4, r7, lr}
 800e182:	b08d      	sub	sp, #52	@ 0x34
 800e184:	af02      	add	r7, sp, #8
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d105      	bne.n	800e1a0 <udp_input+0x20>
 800e194:	4b7c      	ldr	r3, [pc, #496]	@ (800e388 <udp_input+0x208>)
 800e196:	22cf      	movs	r2, #207	@ 0xcf
 800e198:	497c      	ldr	r1, [pc, #496]	@ (800e38c <udp_input+0x20c>)
 800e19a:	487d      	ldr	r0, [pc, #500]	@ (800e390 <udp_input+0x210>)
 800e19c:	f005 fe56 	bl	8013e4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d105      	bne.n	800e1b2 <udp_input+0x32>
 800e1a6:	4b78      	ldr	r3, [pc, #480]	@ (800e388 <udp_input+0x208>)
 800e1a8:	22d0      	movs	r2, #208	@ 0xd0
 800e1aa:	497a      	ldr	r1, [pc, #488]	@ (800e394 <udp_input+0x214>)
 800e1ac:	4878      	ldr	r0, [pc, #480]	@ (800e390 <udp_input+0x210>)
 800e1ae:	f005 fe4d 	bl	8013e4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	895b      	ldrh	r3, [r3, #10]
 800e1b6:	2b07      	cmp	r3, #7
 800e1b8:	d803      	bhi.n	800e1c2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7f9 fa52 	bl	8007664 <pbuf_free>
    goto end;
 800e1c0:	e0de      	b.n	800e380 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e1c8:	4b73      	ldr	r3, [pc, #460]	@ (800e398 <udp_input+0x218>)
 800e1ca:	695b      	ldr	r3, [r3, #20]
 800e1cc:	4a72      	ldr	r2, [pc, #456]	@ (800e398 <udp_input+0x218>)
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f003 fe02 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	881b      	ldrh	r3, [r3, #0]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f7 feb0 	bl	8005f48 <lwip_htons>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	885b      	ldrh	r3, [r3, #2]
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7f7 fea8 	bl	8005f48 <lwip_htons>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e200:	2300      	movs	r3, #0
 800e202:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e204:	2300      	movs	r3, #0
 800e206:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e208:	4b64      	ldr	r3, [pc, #400]	@ (800e39c <udp_input+0x21c>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e20e:	e054      	b.n	800e2ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e212:	8a5b      	ldrh	r3, [r3, #18]
 800e214:	89fa      	ldrh	r2, [r7, #14]
 800e216:	429a      	cmp	r2, r3
 800e218:	d14a      	bne.n	800e2b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e21a:	7cfb      	ldrb	r3, [r7, #19]
 800e21c:	461a      	mov	r2, r3
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e222:	f7ff ff49 	bl	800e0b8 <udp_input_local_match>
 800e226:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d041      	beq.n	800e2b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	7c1b      	ldrb	r3, [r3, #16]
 800e230:	f003 0304 	and.w	r3, r3, #4
 800e234:	2b00      	cmp	r3, #0
 800e236:	d11d      	bne.n	800e274 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d102      	bne.n	800e244 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	e017      	b.n	800e274 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e244:	7cfb      	ldrb	r3, [r7, #19]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d014      	beq.n	800e274 <udp_input+0xf4>
 800e24a:	4b53      	ldr	r3, [pc, #332]	@ (800e398 <udp_input+0x218>)
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e252:	d10f      	bne.n	800e274 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	3304      	adds	r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d008      	beq.n	800e274 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	3304      	adds	r3, #4
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d101      	bne.n	800e274 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e272:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e276:	8a9b      	ldrh	r3, [r3, #20]
 800e278:	8a3a      	ldrh	r2, [r7, #16]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d118      	bne.n	800e2b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e280:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e282:	2b00      	cmp	r3, #0
 800e284:	d005      	beq.n	800e292 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	4b43      	ldr	r3, [pc, #268]	@ (800e398 <udp_input+0x218>)
 800e28c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e28e:	429a      	cmp	r2, r3
 800e290:	d10e      	bne.n	800e2b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d014      	beq.n	800e2c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	68da      	ldr	r2, [r3, #12]
 800e29c:	6a3b      	ldr	r3, [r7, #32]
 800e29e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e2a0:	4b3e      	ldr	r3, [pc, #248]	@ (800e39c <udp_input+0x21c>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e2a8:	4a3c      	ldr	r2, [pc, #240]	@ (800e39c <udp_input+0x21c>)
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e2ae:	e008      	b.n	800e2c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d1a7      	bne.n	800e210 <udp_input+0x90>
 800e2c0:	e000      	b.n	800e2c4 <udp_input+0x144>
        break;
 800e2c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d101      	bne.n	800e2ce <udp_input+0x14e>
    pcb = uncon_pcb;
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <udp_input+0x15a>
    for_us = 1;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	76fb      	strb	r3, [r7, #27]
 800e2d8:	e00a      	b.n	800e2f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	4b2d      	ldr	r3, [pc, #180]	@ (800e398 <udp_input+0x218>)
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	bf0c      	ite	eq
 800e2e8:	2301      	moveq	r3, #1
 800e2ea:	2300      	movne	r3, #0
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e2f0:	7efb      	ldrb	r3, [r7, #27]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d041      	beq.n	800e37a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e2f6:	2108      	movs	r1, #8
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7f9 f92d 	bl	8007558 <pbuf_remove_header>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e304:	4b20      	ldr	r3, [pc, #128]	@ (800e388 <udp_input+0x208>)
 800e306:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e30a:	4925      	ldr	r1, [pc, #148]	@ (800e3a0 <udp_input+0x220>)
 800e30c:	4820      	ldr	r0, [pc, #128]	@ (800e390 <udp_input+0x210>)
 800e30e:	f005 fd9d 	bl	8013e4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7f9 f9a6 	bl	8007664 <pbuf_free>
      goto end;
 800e318:	e032      	b.n	800e380 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d012      	beq.n	800e346 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32a:	699c      	ldr	r4, [r3, #24]
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	69d8      	ldr	r0, [r3, #28]
 800e330:	8a3b      	ldrh	r3, [r7, #16]
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	4b1b      	ldr	r3, [pc, #108]	@ (800e3a4 <udp_input+0x224>)
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e33a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e33c:	e021      	b.n	800e382 <udp_input+0x202>
        pbuf_free(p);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7f9 f990 	bl	8007664 <pbuf_free>
        goto end;
 800e344:	e01c      	b.n	800e380 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e346:	7cfb      	ldrb	r3, [r7, #19]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d112      	bne.n	800e372 <udp_input+0x1f2>
 800e34c:	4b12      	ldr	r3, [pc, #72]	@ (800e398 <udp_input+0x218>)
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e354:	2be0      	cmp	r3, #224	@ 0xe0
 800e356:	d00c      	beq.n	800e372 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e358:	4b0f      	ldr	r3, [pc, #60]	@ (800e398 <udp_input+0x218>)
 800e35a:	899b      	ldrh	r3, [r3, #12]
 800e35c:	3308      	adds	r3, #8
 800e35e:	b29b      	uxth	r3, r3
 800e360:	b21b      	sxth	r3, r3
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7f9 f96a 	bl	800763e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e36a:	2103      	movs	r1, #3
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f003 f9f7 	bl	8011760 <icmp_dest_unreach>
      pbuf_free(p);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7f9 f976 	bl	8007664 <pbuf_free>
  return;
 800e378:	e003      	b.n	800e382 <udp_input+0x202>
    pbuf_free(p);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7f9 f972 	bl	8007664 <pbuf_free>
  return;
 800e380:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e382:	372c      	adds	r7, #44	@ 0x2c
 800e384:	46bd      	mov	sp, r7
 800e386:	bd90      	pop	{r4, r7, pc}
 800e388:	08019cdc 	.word	0x08019cdc
 800e38c:	08019d80 	.word	0x08019d80
 800e390:	08019d30 	.word	0x08019d30
 800e394:	08019d98 	.word	0x08019d98
 800e398:	20004f98 	.word	0x20004f98
 800e39c:	20008030 	.word	0x20008030
 800e3a0:	08019db4 	.word	0x08019db4
 800e3a4:	20004fa8 	.word	0x20004fa8

0800e3a8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af02      	add	r7, sp, #8
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
 800e3b4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d109      	bne.n	800e3d0 <udp_sendto_if+0x28>
 800e3bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e478 <udp_sendto_if+0xd0>)
 800e3be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3c2:	492e      	ldr	r1, [pc, #184]	@ (800e47c <udp_sendto_if+0xd4>)
 800e3c4:	482e      	ldr	r0, [pc, #184]	@ (800e480 <udp_sendto_if+0xd8>)
 800e3c6:	f005 fd41 	bl	8013e4c <iprintf>
 800e3ca:	f06f 030f 	mvn.w	r3, #15
 800e3ce:	e04f      	b.n	800e470 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d109      	bne.n	800e3ea <udp_sendto_if+0x42>
 800e3d6:	4b28      	ldr	r3, [pc, #160]	@ (800e478 <udp_sendto_if+0xd0>)
 800e3d8:	f240 2281 	movw	r2, #641	@ 0x281
 800e3dc:	4929      	ldr	r1, [pc, #164]	@ (800e484 <udp_sendto_if+0xdc>)
 800e3de:	4828      	ldr	r0, [pc, #160]	@ (800e480 <udp_sendto_if+0xd8>)
 800e3e0:	f005 fd34 	bl	8013e4c <iprintf>
 800e3e4:	f06f 030f 	mvn.w	r3, #15
 800e3e8:	e042      	b.n	800e470 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d109      	bne.n	800e404 <udp_sendto_if+0x5c>
 800e3f0:	4b21      	ldr	r3, [pc, #132]	@ (800e478 <udp_sendto_if+0xd0>)
 800e3f2:	f240 2282 	movw	r2, #642	@ 0x282
 800e3f6:	4924      	ldr	r1, [pc, #144]	@ (800e488 <udp_sendto_if+0xe0>)
 800e3f8:	4821      	ldr	r0, [pc, #132]	@ (800e480 <udp_sendto_if+0xd8>)
 800e3fa:	f005 fd27 	bl	8013e4c <iprintf>
 800e3fe:	f06f 030f 	mvn.w	r3, #15
 800e402:	e035      	b.n	800e470 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d109      	bne.n	800e41e <udp_sendto_if+0x76>
 800e40a:	4b1b      	ldr	r3, [pc, #108]	@ (800e478 <udp_sendto_if+0xd0>)
 800e40c:	f240 2283 	movw	r2, #643	@ 0x283
 800e410:	491e      	ldr	r1, [pc, #120]	@ (800e48c <udp_sendto_if+0xe4>)
 800e412:	481b      	ldr	r0, [pc, #108]	@ (800e480 <udp_sendto_if+0xd8>)
 800e414:	f005 fd1a 	bl	8013e4c <iprintf>
 800e418:	f06f 030f 	mvn.w	r3, #15
 800e41c:	e028      	b.n	800e470 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d009      	beq.n	800e438 <udp_sendto_if+0x90>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e434:	2be0      	cmp	r3, #224	@ 0xe0
 800e436:	d103      	bne.n	800e440 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	3304      	adds	r3, #4
 800e43c:	617b      	str	r3, [r7, #20]
 800e43e:	e00b      	b.n	800e458 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	3304      	adds	r3, #4
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d002      	beq.n	800e454 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e44e:	f06f 0303 	mvn.w	r3, #3
 800e452:	e00d      	b.n	800e470 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e458:	887a      	ldrh	r2, [r7, #2]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	6a3b      	ldr	r3, [r7, #32]
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	4613      	mov	r3, r2
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	68b9      	ldr	r1, [r7, #8]
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f000 f811 	bl	800e490 <udp_sendto_if_src>
 800e46e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e470:	4618      	mov	r0, r3
 800e472:	3718      	adds	r7, #24
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	08019cdc 	.word	0x08019cdc
 800e47c:	08019e50 	.word	0x08019e50
 800e480:	08019d30 	.word	0x08019d30
 800e484:	08019e6c 	.word	0x08019e6c
 800e488:	08019e88 	.word	0x08019e88
 800e48c:	08019ea8 	.word	0x08019ea8

0800e490 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08c      	sub	sp, #48	@ 0x30
 800e494:	af04      	add	r7, sp, #16
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d109      	bne.n	800e4b8 <udp_sendto_if_src+0x28>
 800e4a4:	4b65      	ldr	r3, [pc, #404]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e4a6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e4aa:	4965      	ldr	r1, [pc, #404]	@ (800e640 <udp_sendto_if_src+0x1b0>)
 800e4ac:	4865      	ldr	r0, [pc, #404]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e4ae:	f005 fccd 	bl	8013e4c <iprintf>
 800e4b2:	f06f 030f 	mvn.w	r3, #15
 800e4b6:	e0bc      	b.n	800e632 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d109      	bne.n	800e4d2 <udp_sendto_if_src+0x42>
 800e4be:	4b5f      	ldr	r3, [pc, #380]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e4c0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e4c4:	4960      	ldr	r1, [pc, #384]	@ (800e648 <udp_sendto_if_src+0x1b8>)
 800e4c6:	485f      	ldr	r0, [pc, #380]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e4c8:	f005 fcc0 	bl	8013e4c <iprintf>
 800e4cc:	f06f 030f 	mvn.w	r3, #15
 800e4d0:	e0af      	b.n	800e632 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d109      	bne.n	800e4ec <udp_sendto_if_src+0x5c>
 800e4d8:	4b58      	ldr	r3, [pc, #352]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e4da:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e4de:	495b      	ldr	r1, [pc, #364]	@ (800e64c <udp_sendto_if_src+0x1bc>)
 800e4e0:	4858      	ldr	r0, [pc, #352]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e4e2:	f005 fcb3 	bl	8013e4c <iprintf>
 800e4e6:	f06f 030f 	mvn.w	r3, #15
 800e4ea:	e0a2      	b.n	800e632 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d109      	bne.n	800e506 <udp_sendto_if_src+0x76>
 800e4f2:	4b52      	ldr	r3, [pc, #328]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e4f4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e4f8:	4955      	ldr	r1, [pc, #340]	@ (800e650 <udp_sendto_if_src+0x1c0>)
 800e4fa:	4852      	ldr	r0, [pc, #328]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e4fc:	f005 fca6 	bl	8013e4c <iprintf>
 800e500:	f06f 030f 	mvn.w	r3, #15
 800e504:	e095      	b.n	800e632 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d109      	bne.n	800e520 <udp_sendto_if_src+0x90>
 800e50c:	4b4b      	ldr	r3, [pc, #300]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e50e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e512:	4950      	ldr	r1, [pc, #320]	@ (800e654 <udp_sendto_if_src+0x1c4>)
 800e514:	484b      	ldr	r0, [pc, #300]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e516:	f005 fc99 	bl	8013e4c <iprintf>
 800e51a:	f06f 030f 	mvn.w	r3, #15
 800e51e:	e088      	b.n	800e632 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	8a5b      	ldrh	r3, [r3, #18]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10f      	bne.n	800e548 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e528:	68f9      	ldr	r1, [r7, #12]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	8a5b      	ldrh	r3, [r3, #18]
 800e52e:	461a      	mov	r2, r3
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f000 f893 	bl	800e65c <udp_bind>
 800e536:	4603      	mov	r3, r0
 800e538:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e53a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e542:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e546:	e074      	b.n	800e632 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	891b      	ldrh	r3, [r3, #8]
 800e54c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e550:	4293      	cmp	r3, r2
 800e552:	d902      	bls.n	800e55a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e554:	f04f 33ff 	mov.w	r3, #4294967295
 800e558:	e06b      	b.n	800e632 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e55a:	2108      	movs	r1, #8
 800e55c:	68b8      	ldr	r0, [r7, #8]
 800e55e:	f7f8 ffeb 	bl	8007538 <pbuf_add_header>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d015      	beq.n	800e594 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e568:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e56c:	2108      	movs	r1, #8
 800e56e:	2022      	movs	r0, #34	@ 0x22
 800e570:	f7f8 fd94 	bl	800709c <pbuf_alloc>
 800e574:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e57c:	f04f 33ff 	mov.w	r3, #4294967295
 800e580:	e057      	b.n	800e632 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	891b      	ldrh	r3, [r3, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d006      	beq.n	800e598 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e58a:	68b9      	ldr	r1, [r7, #8]
 800e58c:	69f8      	ldr	r0, [r7, #28]
 800e58e:	f7f9 f981 	bl	8007894 <pbuf_chain>
 800e592:	e001      	b.n	800e598 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	895b      	ldrh	r3, [r3, #10]
 800e59c:	2b07      	cmp	r3, #7
 800e59e:	d806      	bhi.n	800e5ae <udp_sendto_if_src+0x11e>
 800e5a0:	4b26      	ldr	r3, [pc, #152]	@ (800e63c <udp_sendto_if_src+0x1ac>)
 800e5a2:	f240 320d 	movw	r2, #781	@ 0x30d
 800e5a6:	492c      	ldr	r1, [pc, #176]	@ (800e658 <udp_sendto_if_src+0x1c8>)
 800e5a8:	4826      	ldr	r0, [pc, #152]	@ (800e644 <udp_sendto_if_src+0x1b4>)
 800e5aa:	f005 fc4f 	bl	8013e4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	8a5b      	ldrh	r3, [r3, #18]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7f7 fcc5 	bl	8005f48 <lwip_htons>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e5c6:	887b      	ldrh	r3, [r7, #2]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f7 fcbd 	bl	8005f48 <lwip_htons>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	719a      	strb	r2, [r3, #6]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	891b      	ldrh	r3, [r3, #8]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f7 fcaf 	bl	8005f48 <lwip_htons>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e5f2:	2311      	movs	r3, #17
 800e5f4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	7adb      	ldrb	r3, [r3, #11]
 800e5fa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	7a9b      	ldrb	r3, [r3, #10]
 800e600:	7cb9      	ldrb	r1, [r7, #18]
 800e602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e604:	9202      	str	r2, [sp, #8]
 800e606:	7cfa      	ldrb	r2, [r7, #19]
 800e608:	9201      	str	r2, [sp, #4]
 800e60a:	9300      	str	r3, [sp, #0]
 800e60c:	460b      	mov	r3, r1
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e612:	69f8      	ldr	r0, [r7, #28]
 800e614:	f003 fb34 	bl	8011c80 <ip4_output_if_src>
 800e618:	4603      	mov	r3, r0
 800e61a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e61c:	69fa      	ldr	r2, [r7, #28]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	429a      	cmp	r2, r3
 800e622:	d004      	beq.n	800e62e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e624:	69f8      	ldr	r0, [r7, #28]
 800e626:	f7f9 f81d 	bl	8007664 <pbuf_free>
    q = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e62e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3720      	adds	r7, #32
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	08019cdc 	.word	0x08019cdc
 800e640:	08019ec8 	.word	0x08019ec8
 800e644:	08019d30 	.word	0x08019d30
 800e648:	08019ee8 	.word	0x08019ee8
 800e64c:	08019f08 	.word	0x08019f08
 800e650:	08019f2c 	.word	0x08019f2c
 800e654:	08019f50 	.word	0x08019f50
 800e658:	08019f74 	.word	0x08019f74

0800e65c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4613      	mov	r3, r2
 800e668:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d101      	bne.n	800e674 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e670:	4b39      	ldr	r3, [pc, #228]	@ (800e758 <udp_bind+0xfc>)
 800e672:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d109      	bne.n	800e68e <udp_bind+0x32>
 800e67a:	4b38      	ldr	r3, [pc, #224]	@ (800e75c <udp_bind+0x100>)
 800e67c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e680:	4937      	ldr	r1, [pc, #220]	@ (800e760 <udp_bind+0x104>)
 800e682:	4838      	ldr	r0, [pc, #224]	@ (800e764 <udp_bind+0x108>)
 800e684:	f005 fbe2 	bl	8013e4c <iprintf>
 800e688:	f06f 030f 	mvn.w	r3, #15
 800e68c:	e060      	b.n	800e750 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e68e:	2300      	movs	r3, #0
 800e690:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e692:	4b35      	ldr	r3, [pc, #212]	@ (800e768 <udp_bind+0x10c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e009      	b.n	800e6ae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d102      	bne.n	800e6a8 <udp_bind+0x4c>
      rebind = 1;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	74fb      	strb	r3, [r7, #19]
      break;
 800e6a6:	e005      	b.n	800e6b4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	617b      	str	r3, [r7, #20]
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1f2      	bne.n	800e69a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e6b4:	88fb      	ldrh	r3, [r7, #6]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <udp_bind+0x72>
    port = udp_new_port();
 800e6ba:	f7ff fcc5 	bl	800e048 <udp_new_port>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e6c2:	88fb      	ldrh	r3, [r7, #6]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d12c      	bne.n	800e722 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e6c8:	f06f 0307 	mvn.w	r3, #7
 800e6cc:	e040      	b.n	800e750 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6ce:	4b26      	ldr	r3, [pc, #152]	@ (800e768 <udp_bind+0x10c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	617b      	str	r3, [r7, #20]
 800e6d4:	e022      	b.n	800e71c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d01b      	beq.n	800e716 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	8a5b      	ldrh	r3, [r3, #18]
 800e6e2:	88fa      	ldrh	r2, [r7, #6]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d116      	bne.n	800e716 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d00d      	beq.n	800e710 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <udp_bind+0xb4>
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d006      	beq.n	800e710 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e702:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e704:	2b00      	cmp	r3, #0
 800e706:	d003      	beq.n	800e710 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e710:	f06f 0307 	mvn.w	r3, #7
 800e714:	e01c      	b.n	800e750 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1d9      	bne.n	800e6d6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <udp_bind+0xd2>
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	e000      	b.n	800e730 <udp_bind+0xd4>
 800e72e:	2300      	movs	r3, #0
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	88fa      	ldrh	r2, [r7, #6]
 800e738:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e73a:	7cfb      	ldrb	r3, [r7, #19]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d106      	bne.n	800e74e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e740:	4b09      	ldr	r3, [pc, #36]	@ (800e768 <udp_bind+0x10c>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e748:	4a07      	ldr	r2, [pc, #28]	@ (800e768 <udp_bind+0x10c>)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e74e:	2300      	movs	r3, #0
}
 800e750:	4618      	mov	r0, r3
 800e752:	3718      	adds	r7, #24
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	0801ac10 	.word	0x0801ac10
 800e75c:	08019cdc 	.word	0x08019cdc
 800e760:	08019fa4 	.word	0x08019fa4
 800e764:	08019d30 	.word	0x08019d30
 800e768:	20008030 	.word	0x20008030

0800e76c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	4613      	mov	r3, r2
 800e778:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <udp_connect+0x28>
 800e780:	4b2c      	ldr	r3, [pc, #176]	@ (800e834 <udp_connect+0xc8>)
 800e782:	f240 4235 	movw	r2, #1077	@ 0x435
 800e786:	492c      	ldr	r1, [pc, #176]	@ (800e838 <udp_connect+0xcc>)
 800e788:	482c      	ldr	r0, [pc, #176]	@ (800e83c <udp_connect+0xd0>)
 800e78a:	f005 fb5f 	bl	8013e4c <iprintf>
 800e78e:	f06f 030f 	mvn.w	r3, #15
 800e792:	e04b      	b.n	800e82c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d109      	bne.n	800e7ae <udp_connect+0x42>
 800e79a:	4b26      	ldr	r3, [pc, #152]	@ (800e834 <udp_connect+0xc8>)
 800e79c:	f240 4236 	movw	r2, #1078	@ 0x436
 800e7a0:	4927      	ldr	r1, [pc, #156]	@ (800e840 <udp_connect+0xd4>)
 800e7a2:	4826      	ldr	r0, [pc, #152]	@ (800e83c <udp_connect+0xd0>)
 800e7a4:	f005 fb52 	bl	8013e4c <iprintf>
 800e7a8:	f06f 030f 	mvn.w	r3, #15
 800e7ac:	e03e      	b.n	800e82c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	8a5b      	ldrh	r3, [r3, #18]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10f      	bne.n	800e7d6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e7b6:	68f9      	ldr	r1, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	8a5b      	ldrh	r3, [r3, #18]
 800e7bc:	461a      	mov	r2, r3
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f7ff ff4c 	bl	800e65c <udp_bind>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e7c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <udp_connect+0x6a>
      return err;
 800e7d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7d4:	e02a      	b.n	800e82c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <udp_connect+0x76>
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	e000      	b.n	800e7e4 <udp_connect+0x78>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	88fa      	ldrh	r2, [r7, #6]
 800e7ec:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7c1b      	ldrb	r3, [r3, #16]
 800e7f2:	f043 0304 	orr.w	r3, r3, #4
 800e7f6:	b2da      	uxtb	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7fc:	4b11      	ldr	r3, [pc, #68]	@ (800e844 <udp_connect+0xd8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	617b      	str	r3, [r7, #20]
 800e802:	e008      	b.n	800e816 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d101      	bne.n	800e810 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e80c:	2300      	movs	r3, #0
 800e80e:	e00d      	b.n	800e82c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1f3      	bne.n	800e804 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e81c:	4b09      	ldr	r3, [pc, #36]	@ (800e844 <udp_connect+0xd8>)
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e824:	4a07      	ldr	r2, [pc, #28]	@ (800e844 <udp_connect+0xd8>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	08019cdc 	.word	0x08019cdc
 800e838:	08019fbc 	.word	0x08019fbc
 800e83c:	08019d30 	.word	0x08019d30
 800e840:	08019fd8 	.word	0x08019fd8
 800e844:	20008030 	.word	0x20008030

0800e848 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d107      	bne.n	800e86a <udp_recv+0x22>
 800e85a:	4b08      	ldr	r3, [pc, #32]	@ (800e87c <udp_recv+0x34>)
 800e85c:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e860:	4907      	ldr	r1, [pc, #28]	@ (800e880 <udp_recv+0x38>)
 800e862:	4808      	ldr	r0, [pc, #32]	@ (800e884 <udp_recv+0x3c>)
 800e864:	f005 faf2 	bl	8013e4c <iprintf>
 800e868:	e005      	b.n	800e876 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	61da      	str	r2, [r3, #28]
}
 800e876:	3710      	adds	r7, #16
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	08019cdc 	.word	0x08019cdc
 800e880:	0801a010 	.word	0x0801a010
 800e884:	08019d30 	.word	0x08019d30

0800e888 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d107      	bne.n	800e8a6 <udp_remove+0x1e>
 800e896:	4b19      	ldr	r3, [pc, #100]	@ (800e8fc <udp_remove+0x74>)
 800e898:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800e89c:	4918      	ldr	r1, [pc, #96]	@ (800e900 <udp_remove+0x78>)
 800e89e:	4819      	ldr	r0, [pc, #100]	@ (800e904 <udp_remove+0x7c>)
 800e8a0:	f005 fad4 	bl	8013e4c <iprintf>
 800e8a4:	e026      	b.n	800e8f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e8a6:	4b18      	ldr	r3, [pc, #96]	@ (800e908 <udp_remove+0x80>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d105      	bne.n	800e8bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e8b0:	4b15      	ldr	r3, [pc, #84]	@ (800e908 <udp_remove+0x80>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	4a14      	ldr	r2, [pc, #80]	@ (800e908 <udp_remove+0x80>)
 800e8b8:	6013      	str	r3, [r2, #0]
 800e8ba:	e017      	b.n	800e8ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e8bc:	4b12      	ldr	r3, [pc, #72]	@ (800e908 <udp_remove+0x80>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
 800e8c2:	e010      	b.n	800e8e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <udp_remove+0x58>
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d104      	bne.n	800e8e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	68da      	ldr	r2, [r3, #12]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	60da      	str	r2, [r3, #12]
        break;
 800e8de:	e005      	b.n	800e8ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	60fb      	str	r3, [r7, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1eb      	bne.n	800e8c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	f7f8 f836 	bl	8006960 <memp_free>
}
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	08019cdc 	.word	0x08019cdc
 800e900:	0801a028 	.word	0x0801a028
 800e904:	08019d30 	.word	0x08019d30
 800e908:	20008030 	.word	0x20008030

0800e90c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e912:	2000      	movs	r0, #0
 800e914:	f7f7 ffb4 	bl	8006880 <memp_malloc>
 800e918:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d007      	beq.n	800e930 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e920:	2220      	movs	r2, #32
 800e922:	2100      	movs	r1, #0
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f005 fb32 	bl	8013f8e <memset>
    pcb->ttl = UDP_TTL;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	22ff      	movs	r2, #255	@ 0xff
 800e92e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e930:	687b      	ldr	r3, [r7, #4]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3708      	adds	r7, #8
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
	...

0800e93c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d01e      	beq.n	800e98a <udp_netif_ip_addr_changed+0x4e>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d01a      	beq.n	800e98a <udp_netif_ip_addr_changed+0x4e>
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d017      	beq.n	800e98a <udp_netif_ip_addr_changed+0x4e>
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d013      	beq.n	800e98a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e962:	4b0d      	ldr	r3, [pc, #52]	@ (800e998 <udp_netif_ip_addr_changed+0x5c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	e00c      	b.n	800e984 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d103      	bne.n	800e97e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	60fb      	str	r3, [r7, #12]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1ef      	bne.n	800e96a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e98a:	bf00      	nop
 800e98c:	3714      	adds	r7, #20
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	20008030 	.word	0x20008030

0800e99c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ea24 <dhcp_inc_pcb_refcount+0x88>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d133      	bne.n	800ea10 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e9a8:	4b1f      	ldr	r3, [pc, #124]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d005      	beq.n	800e9bc <dhcp_inc_pcb_refcount+0x20>
 800e9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800ea2c <dhcp_inc_pcb_refcount+0x90>)
 800e9b2:	22e5      	movs	r2, #229	@ 0xe5
 800e9b4:	491e      	ldr	r1, [pc, #120]	@ (800ea30 <dhcp_inc_pcb_refcount+0x94>)
 800e9b6:	481f      	ldr	r0, [pc, #124]	@ (800ea34 <dhcp_inc_pcb_refcount+0x98>)
 800e9b8:	f005 fa48 	bl	8013e4c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e9bc:	f7ff ffa6 	bl	800e90c <udp_new>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4a19      	ldr	r2, [pc, #100]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9c4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e9c6:	4b18      	ldr	r3, [pc, #96]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d102      	bne.n	800e9d4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d2:	e024      	b.n	800ea1e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e9d4:	4b14      	ldr	r3, [pc, #80]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	7a5a      	ldrb	r2, [r3, #9]
 800e9da:	4b13      	ldr	r3, [pc, #76]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f042 0220 	orr.w	r2, r2, #32
 800e9e2:	b2d2      	uxtb	r2, r2
 800e9e4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e9e6:	4b10      	ldr	r3, [pc, #64]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2244      	movs	r2, #68	@ 0x44
 800e9ec:	4912      	ldr	r1, [pc, #72]	@ (800ea38 <dhcp_inc_pcb_refcount+0x9c>)
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fe34 	bl	800e65c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2243      	movs	r2, #67	@ 0x43
 800e9fa:	490f      	ldr	r1, [pc, #60]	@ (800ea38 <dhcp_inc_pcb_refcount+0x9c>)
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7ff feb5 	bl	800e76c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ea02:	4b09      	ldr	r3, [pc, #36]	@ (800ea28 <dhcp_inc_pcb_refcount+0x8c>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2200      	movs	r2, #0
 800ea08:	490c      	ldr	r1, [pc, #48]	@ (800ea3c <dhcp_inc_pcb_refcount+0xa0>)
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7ff ff1c 	bl	800e848 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ea10:	4b04      	ldr	r3, [pc, #16]	@ (800ea24 <dhcp_inc_pcb_refcount+0x88>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	3301      	adds	r3, #1
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	4b02      	ldr	r3, [pc, #8]	@ (800ea24 <dhcp_inc_pcb_refcount+0x88>)
 800ea1a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20008060 	.word	0x20008060
 800ea28:	2000805c 	.word	0x2000805c
 800ea2c:	0801a040 	.word	0x0801a040
 800ea30:	0801a078 	.word	0x0801a078
 800ea34:	0801a0a0 	.word	0x0801a0a0
 800ea38:	0801ac10 	.word	0x0801ac10
 800ea3c:	080102c9 	.word	0x080102c9

0800ea40 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ea44:	4b0e      	ldr	r3, [pc, #56]	@ (800ea80 <dhcp_dec_pcb_refcount+0x40>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d105      	bne.n	800ea58 <dhcp_dec_pcb_refcount+0x18>
 800ea4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea84 <dhcp_dec_pcb_refcount+0x44>)
 800ea4e:	22ff      	movs	r2, #255	@ 0xff
 800ea50:	490d      	ldr	r1, [pc, #52]	@ (800ea88 <dhcp_dec_pcb_refcount+0x48>)
 800ea52:	480e      	ldr	r0, [pc, #56]	@ (800ea8c <dhcp_dec_pcb_refcount+0x4c>)
 800ea54:	f005 f9fa 	bl	8013e4c <iprintf>
  dhcp_pcb_refcount--;
 800ea58:	4b09      	ldr	r3, [pc, #36]	@ (800ea80 <dhcp_dec_pcb_refcount+0x40>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	b2da      	uxtb	r2, r3
 800ea60:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <dhcp_dec_pcb_refcount+0x40>)
 800ea62:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ea64:	4b06      	ldr	r3, [pc, #24]	@ (800ea80 <dhcp_dec_pcb_refcount+0x40>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d107      	bne.n	800ea7c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ea6c:	4b08      	ldr	r3, [pc, #32]	@ (800ea90 <dhcp_dec_pcb_refcount+0x50>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff ff09 	bl	800e888 <udp_remove>
    dhcp_pcb = NULL;
 800ea76:	4b06      	ldr	r3, [pc, #24]	@ (800ea90 <dhcp_dec_pcb_refcount+0x50>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]
  }
}
 800ea7c:	bf00      	nop
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20008060 	.word	0x20008060
 800ea84:	0801a040 	.word	0x0801a040
 800ea88:	0801a0c8 	.word	0x0801a0c8
 800ea8c:	0801a0a0 	.word	0x0801a0a0
 800ea90:	2000805c 	.word	0x2000805c

0800ea94 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaa0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eaa2:	210c      	movs	r1, #12
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f001 f851 	bl	800fb4c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800eaaa:	4b06      	ldr	r3, [pc, #24]	@ (800eac4 <dhcp_handle_nak+0x30>)
 800eaac:	4a05      	ldr	r2, [pc, #20]	@ (800eac4 <dhcp_handle_nak+0x30>)
 800eaae:	4905      	ldr	r1, [pc, #20]	@ (800eac4 <dhcp_handle_nak+0x30>)
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7f8 f8f7 	bl	8006ca4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fc4a 	bl	800f350 <dhcp_discover>
}
 800eabc:	bf00      	nop
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	0801ac10 	.word	0x0801ac10

0800eac8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ead6:	2108      	movs	r1, #8
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f001 f837 	bl	800fb4c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	331c      	adds	r3, #28
 800eae2:	2200      	movs	r2, #0
 800eae4:	4619      	mov	r1, r3
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f002 fb38 	bl	801115c <etharp_query>
 800eaec:	4603      	mov	r3, r0
 800eaee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	799b      	ldrb	r3, [r3, #6]
 800eaf4:	2bff      	cmp	r3, #255	@ 0xff
 800eaf6:	d005      	beq.n	800eb04 <dhcp_check+0x3c>
    dhcp->tries++;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	799b      	ldrb	r3, [r3, #6]
 800eafc:	3301      	adds	r3, #1
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800eb04:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800eb08:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb0a:	893b      	ldrh	r3, [r7, #8]
 800eb0c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800eb10:	4a06      	ldr	r2, [pc, #24]	@ (800eb2c <dhcp_check+0x64>)
 800eb12:	fb82 1203 	smull	r1, r2, r2, r3
 800eb16:	1152      	asrs	r2, r2, #5
 800eb18:	17db      	asrs	r3, r3, #31
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800eb22:	bf00      	nop
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	10624dd3 	.word	0x10624dd3

0800eb30 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb3e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800eb40:	4b0c      	ldr	r3, [pc, #48]	@ (800eb74 <dhcp_handle_offer+0x44>)
 800eb42:	789b      	ldrb	r3, [r3, #2]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d011      	beq.n	800eb6c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800eb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb78 <dhcp_handle_offer+0x48>)
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7f7 fa0e 	bl	8005f74 <lwip_htonl>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	691a      	ldr	r2, [r3, #16]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f808 	bl	800eb7c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20008054 	.word	0x20008054
 800eb78:	20008034 	.word	0x20008034

0800eb7c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eb7c:	b5b0      	push	{r4, r5, r7, lr}
 800eb7e:	b08a      	sub	sp, #40	@ 0x28
 800eb80:	af02      	add	r7, sp, #8
 800eb82:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d109      	bne.n	800eb9e <dhcp_select+0x22>
 800eb8a:	4b71      	ldr	r3, [pc, #452]	@ (800ed50 <dhcp_select+0x1d4>)
 800eb8c:	f240 1277 	movw	r2, #375	@ 0x177
 800eb90:	4970      	ldr	r1, [pc, #448]	@ (800ed54 <dhcp_select+0x1d8>)
 800eb92:	4871      	ldr	r0, [pc, #452]	@ (800ed58 <dhcp_select+0x1dc>)
 800eb94:	f005 f95a 	bl	8013e4c <iprintf>
 800eb98:	f06f 030f 	mvn.w	r3, #15
 800eb9c:	e0d3      	b.n	800ed46 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800eba4:	69bb      	ldr	r3, [r7, #24]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d109      	bne.n	800ebbe <dhcp_select+0x42>
 800ebaa:	4b69      	ldr	r3, [pc, #420]	@ (800ed50 <dhcp_select+0x1d4>)
 800ebac:	f240 1279 	movw	r2, #377	@ 0x179
 800ebb0:	496a      	ldr	r1, [pc, #424]	@ (800ed5c <dhcp_select+0x1e0>)
 800ebb2:	4869      	ldr	r0, [pc, #420]	@ (800ed58 <dhcp_select+0x1dc>)
 800ebb4:	f005 f94a 	bl	8013e4c <iprintf>
 800ebb8:	f06f 0305 	mvn.w	r3, #5
 800ebbc:	e0c3      	b.n	800ed46 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	69b8      	ldr	r0, [r7, #24]
 800ebc2:	f000 ffc3 	bl	800fb4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ebc6:	f107 030c 	add.w	r3, r7, #12
 800ebca:	2203      	movs	r2, #3
 800ebcc:	69b9      	ldr	r1, [r7, #24]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f001 fc48 	bl	8010464 <dhcp_create_msg>
 800ebd4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8085 	beq.w	800ece8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ebe4:	89b8      	ldrh	r0, [r7, #12]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ebec:	2302      	movs	r3, #2
 800ebee:	2239      	movs	r2, #57	@ 0x39
 800ebf0:	f000 ffc6 	bl	800fb80 <dhcp_option>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ebf8:	89b8      	ldrh	r0, [r7, #12]
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec04:	461a      	mov	r2, r3
 800ec06:	f001 f815 	bl	800fc34 <dhcp_option_short>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ec0e:	89b8      	ldrh	r0, [r7, #12]
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec16:	2304      	movs	r3, #4
 800ec18:	2232      	movs	r2, #50	@ 0x32
 800ec1a:	f000 ffb1 	bl	800fb80 <dhcp_option>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ec22:	89bc      	ldrh	r4, [r7, #12]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	69db      	ldr	r3, [r3, #28]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7f7 f9a0 	bl	8005f74 <lwip_htonl>
 800ec34:	4603      	mov	r3, r0
 800ec36:	461a      	mov	r2, r3
 800ec38:	4629      	mov	r1, r5
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f001 f82c 	bl	800fc98 <dhcp_option_long>
 800ec40:	4603      	mov	r3, r0
 800ec42:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ec44:	89b8      	ldrh	r0, [r7, #12]
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec4c:	2304      	movs	r3, #4
 800ec4e:	2236      	movs	r2, #54	@ 0x36
 800ec50:	f000 ff96 	bl	800fb80 <dhcp_option>
 800ec54:	4603      	mov	r3, r0
 800ec56:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ec58:	89bc      	ldrh	r4, [r7, #12]
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7f7 f985 	bl	8005f74 <lwip_htonl>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	4629      	mov	r1, r5
 800ec70:	4620      	mov	r0, r4
 800ec72:	f001 f811 	bl	800fc98 <dhcp_option_long>
 800ec76:	4603      	mov	r3, r0
 800ec78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec7a:	89b8      	ldrh	r0, [r7, #12]
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec82:	2303      	movs	r3, #3
 800ec84:	2237      	movs	r2, #55	@ 0x37
 800ec86:	f000 ff7b 	bl	800fb80 <dhcp_option>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec8e:	2300      	movs	r3, #0
 800ec90:	77bb      	strb	r3, [r7, #30]
 800ec92:	e00e      	b.n	800ecb2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec94:	89b8      	ldrh	r0, [r7, #12]
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec9c:	7fbb      	ldrb	r3, [r7, #30]
 800ec9e:	4a30      	ldr	r2, [pc, #192]	@ (800ed60 <dhcp_select+0x1e4>)
 800eca0:	5cd3      	ldrb	r3, [r2, r3]
 800eca2:	461a      	mov	r2, r3
 800eca4:	f000 ffa0 	bl	800fbe8 <dhcp_option_byte>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ecac:	7fbb      	ldrb	r3, [r7, #30]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	77bb      	strb	r3, [r7, #30]
 800ecb2:	7fbb      	ldrb	r3, [r7, #30]
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	d9ed      	bls.n	800ec94 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ecb8:	89b8      	ldrh	r0, [r7, #12]
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	33f0      	adds	r3, #240	@ 0xf0
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	f001 fca5 	bl	8010610 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ecc6:	4b27      	ldr	r3, [pc, #156]	@ (800ed64 <dhcp_select+0x1e8>)
 800ecc8:	6818      	ldr	r0, [r3, #0]
 800ecca:	4b27      	ldr	r3, [pc, #156]	@ (800ed68 <dhcp_select+0x1ec>)
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	2343      	movs	r3, #67	@ 0x43
 800ecd4:	4a25      	ldr	r2, [pc, #148]	@ (800ed6c <dhcp_select+0x1f0>)
 800ecd6:	6979      	ldr	r1, [r7, #20]
 800ecd8:	f7ff fbda 	bl	800e490 <udp_sendto_if_src>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ece0:	6978      	ldr	r0, [r7, #20]
 800ece2:	f7f8 fcbf 	bl	8007664 <pbuf_free>
 800ece6:	e001      	b.n	800ecec <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ece8:	23ff      	movs	r3, #255	@ 0xff
 800ecea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	799b      	ldrb	r3, [r3, #6]
 800ecf0:	2bff      	cmp	r3, #255	@ 0xff
 800ecf2:	d005      	beq.n	800ed00 <dhcp_select+0x184>
    dhcp->tries++;
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	799b      	ldrb	r3, [r3, #6]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	799b      	ldrb	r3, [r3, #6]
 800ed04:	2b05      	cmp	r3, #5
 800ed06:	d80d      	bhi.n	800ed24 <dhcp_select+0x1a8>
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	799b      	ldrb	r3, [r3, #6]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	2301      	movs	r3, #1
 800ed10:	4093      	lsls	r3, r2
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	461a      	mov	r2, r3
 800ed16:	0152      	lsls	r2, r2, #5
 800ed18:	1ad2      	subs	r2, r2, r3
 800ed1a:	0092      	lsls	r2, r2, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	e001      	b.n	800ed28 <dhcp_select+0x1ac>
 800ed24:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800ed28:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ed2a:	89fb      	ldrh	r3, [r7, #14]
 800ed2c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800ed30:	4a0f      	ldr	r2, [pc, #60]	@ (800ed70 <dhcp_select+0x1f4>)
 800ed32:	fb82 1203 	smull	r1, r2, r2, r3
 800ed36:	1152      	asrs	r2, r2, #5
 800ed38:	17db      	asrs	r3, r3, #31
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ed42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3720      	adds	r7, #32
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	0801a040 	.word	0x0801a040
 800ed54:	0801a0ec 	.word	0x0801a0ec
 800ed58:	0801a0a0 	.word	0x0801a0a0
 800ed5c:	0801a108 	.word	0x0801a108
 800ed60:	2000003c 	.word	0x2000003c
 800ed64:	2000805c 	.word	0x2000805c
 800ed68:	0801ac10 	.word	0x0801ac10
 800ed6c:	0801ac14 	.word	0x0801ac14
 800ed70:	10624dd3 	.word	0x10624dd3

0800ed74 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800ed7a:	4b27      	ldr	r3, [pc, #156]	@ (800ee18 <dhcp_coarse_tmr+0xa4>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	607b      	str	r3, [r7, #4]
 800ed80:	e042      	b.n	800ee08 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed86:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d039      	beq.n	800ee02 <dhcp_coarse_tmr+0x8e>
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	795b      	ldrb	r3, [r3, #5]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d035      	beq.n	800ee02 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	8a9b      	ldrh	r3, [r3, #20]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d012      	beq.n	800edc4 <dhcp_coarse_tmr+0x50>
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	8a5b      	ldrh	r3, [r3, #18]
 800eda2:	3301      	adds	r3, #1
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	825a      	strh	r2, [r3, #18]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	8a5a      	ldrh	r2, [r3, #18]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	8a9b      	ldrh	r3, [r3, #20]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d106      	bne.n	800edc4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fe2e 	bl	800fa18 <dhcp_release_and_stop>
        dhcp_start(netif);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f96b 	bl	800f098 <dhcp_start>
 800edc2:	e01e      	b.n	800ee02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	8a1b      	ldrh	r3, [r3, #16]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <dhcp_coarse_tmr+0x70>
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	8a1b      	ldrh	r3, [r3, #16]
 800edd0:	1e5a      	subs	r2, r3, #1
 800edd2:	b291      	uxth	r1, r2
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	8211      	strh	r1, [r2, #16]
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d103      	bne.n	800ede4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 f8c7 	bl	800ef70 <dhcp_t2_timeout>
 800ede2:	e00e      	b.n	800ee02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	89db      	ldrh	r3, [r3, #14]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00a      	beq.n	800ee02 <dhcp_coarse_tmr+0x8e>
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	89db      	ldrh	r3, [r3, #14]
 800edf0:	1e5a      	subs	r2, r3, #1
 800edf2:	b291      	uxth	r1, r2
 800edf4:	683a      	ldr	r2, [r7, #0]
 800edf6:	81d1      	strh	r1, [r2, #14]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d102      	bne.n	800ee02 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f888 	bl	800ef12 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	607b      	str	r3, [r7, #4]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1b9      	bne.n	800ed82 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ee0e:	bf00      	nop
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	20007fc8 	.word	0x20007fc8

0800ee1c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ee22:	4b16      	ldr	r3, [pc, #88]	@ (800ee7c <dhcp_fine_tmr+0x60>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	607b      	str	r3, [r7, #4]
 800ee28:	e020      	b.n	800ee6c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d017      	beq.n	800ee66 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	891b      	ldrh	r3, [r3, #8]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d906      	bls.n	800ee4c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	891b      	ldrh	r3, [r3, #8]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	811a      	strh	r2, [r3, #8]
 800ee4a:	e00c      	b.n	800ee66 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	891b      	ldrh	r3, [r3, #8]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d108      	bne.n	800ee66 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	891b      	ldrh	r3, [r3, #8]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 f80d 	bl	800ee80 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	607b      	str	r3, [r7, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d1db      	bne.n	800ee2a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ee72:	bf00      	nop
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20007fc8 	.word	0x20007fc8

0800ee80 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	795b      	ldrb	r3, [r3, #5]
 800ee92:	2b0c      	cmp	r3, #12
 800ee94:	d003      	beq.n	800ee9e <dhcp_timeout+0x1e>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	795b      	ldrb	r3, [r3, #5]
 800ee9a:	2b06      	cmp	r3, #6
 800ee9c:	d103      	bne.n	800eea6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fa56 	bl	800f350 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800eea4:	e031      	b.n	800ef0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	795b      	ldrb	r3, [r3, #5]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d10e      	bne.n	800eecc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	799b      	ldrb	r3, [r3, #6]
 800eeb2:	2b05      	cmp	r3, #5
 800eeb4:	d803      	bhi.n	800eebe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7ff fe60 	bl	800eb7c <dhcp_select>
}
 800eebc:	e025      	b.n	800ef0a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 fdaa 	bl	800fa18 <dhcp_release_and_stop>
      dhcp_start(netif);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 f8e7 	bl	800f098 <dhcp_start>
}
 800eeca:	e01e      	b.n	800ef0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	795b      	ldrb	r3, [r3, #5]
 800eed0:	2b08      	cmp	r3, #8
 800eed2:	d10b      	bne.n	800eeec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	799b      	ldrb	r3, [r3, #6]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d803      	bhi.n	800eee4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff fdf3 	bl	800eac8 <dhcp_check>
}
 800eee2:	e012      	b.n	800ef0a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 fad5 	bl	800f494 <dhcp_bind>
}
 800eeea:	e00e      	b.n	800ef0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	795b      	ldrb	r3, [r3, #5]
 800eef0:	2b03      	cmp	r3, #3
 800eef2:	d10a      	bne.n	800ef0a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	799b      	ldrb	r3, [r3, #6]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d803      	bhi.n	800ef04 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fcd7 	bl	800f8b0 <dhcp_reboot>
}
 800ef02:	e002      	b.n	800ef0a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 fa23 	bl	800f350 <dhcp_discover>
}
 800ef0a:	bf00      	nop
 800ef0c:	3710      	adds	r7, #16
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	795b      	ldrb	r3, [r3, #5]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d007      	beq.n	800ef38 <dhcp_t1_timeout+0x26>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	795b      	ldrb	r3, [r3, #5]
 800ef2c:	2b0a      	cmp	r3, #10
 800ef2e:	d003      	beq.n	800ef38 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef34:	2b05      	cmp	r3, #5
 800ef36:	d117      	bne.n	800ef68 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f000 fb85 	bl	800f648 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	899b      	ldrh	r3, [r3, #12]
 800ef42:	461a      	mov	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	8a5b      	ldrh	r3, [r3, #18]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	dd0c      	ble.n	800ef68 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	899b      	ldrh	r3, [r3, #12]
 800ef52:	461a      	mov	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	8a5b      	ldrh	r3, [r3, #18]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	da00      	bge.n	800ef60 <dhcp_t1_timeout+0x4e>
 800ef5e:	3301      	adds	r3, #1
 800ef60:	105b      	asrs	r3, r3, #1
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ef68:	bf00      	nop
 800ef6a:	3710      	adds	r7, #16
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	795b      	ldrb	r3, [r3, #5]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d00b      	beq.n	800ef9e <dhcp_t2_timeout+0x2e>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	795b      	ldrb	r3, [r3, #5]
 800ef8a:	2b0a      	cmp	r3, #10
 800ef8c:	d007      	beq.n	800ef9e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef92:	2b05      	cmp	r3, #5
 800ef94:	d003      	beq.n	800ef9e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	795b      	ldrb	r3, [r3, #5]
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d117      	bne.n	800efce <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 fbec 	bl	800f77c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	8a9b      	ldrh	r3, [r3, #20]
 800efa8:	461a      	mov	r2, r3
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	8a5b      	ldrh	r3, [r3, #18]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	dd0c      	ble.n	800efce <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	8a9b      	ldrh	r3, [r3, #20]
 800efb8:	461a      	mov	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8a5b      	ldrh	r3, [r3, #18]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	da00      	bge.n	800efc6 <dhcp_t2_timeout+0x56>
 800efc4:	3301      	adds	r3, #1
 800efc6:	105b      	asrs	r3, r3, #1
 800efc8:	b29a      	uxth	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800efce:	bf00      	nop
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
	...

0800efd8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2200      	movs	r2, #0
 800efec:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800eff4:	4b26      	ldr	r3, [pc, #152]	@ (800f090 <dhcp_handle_ack+0xb8>)
 800eff6:	78db      	ldrb	r3, [r3, #3]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d003      	beq.n	800f004 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800effc:	4b25      	ldr	r3, [pc, #148]	@ (800f094 <dhcp_handle_ack+0xbc>)
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f004:	4b22      	ldr	r3, [pc, #136]	@ (800f090 <dhcp_handle_ack+0xb8>)
 800f006:	791b      	ldrb	r3, [r3, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f00c:	4b21      	ldr	r3, [pc, #132]	@ (800f094 <dhcp_handle_ack+0xbc>)
 800f00e:	691a      	ldr	r2, [r3, #16]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f014:	e004      	b.n	800f020 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f01a:	085a      	lsrs	r2, r3, #1
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f020:	4b1b      	ldr	r3, [pc, #108]	@ (800f090 <dhcp_handle_ack+0xb8>)
 800f022:	795b      	ldrb	r3, [r3, #5]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d004      	beq.n	800f032 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f028:	4b1a      	ldr	r3, [pc, #104]	@ (800f094 <dhcp_handle_ack+0xbc>)
 800f02a:	695a      	ldr	r2, [r3, #20]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f030:	e007      	b.n	800f042 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f036:	4613      	mov	r3, r2
 800f038:	00db      	lsls	r3, r3, #3
 800f03a:	1a9b      	subs	r3, r3, r2
 800f03c:	08da      	lsrs	r2, r3, #3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	691a      	ldr	r2, [r3, #16]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f04a:	4b11      	ldr	r3, [pc, #68]	@ (800f090 <dhcp_handle_ack+0xb8>)
 800f04c:	799b      	ldrb	r3, [r3, #6]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00b      	beq.n	800f06a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f052:	4b10      	ldr	r3, [pc, #64]	@ (800f094 <dhcp_handle_ack+0xbc>)
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	4618      	mov	r0, r3
 800f058:	f7f6 ff8c 	bl	8005f74 <lwip_htonl>
 800f05c:	4602      	mov	r2, r0
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2201      	movs	r2, #1
 800f066:	71da      	strb	r2, [r3, #7]
 800f068:	e002      	b.n	800f070 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f070:	4b07      	ldr	r3, [pc, #28]	@ (800f090 <dhcp_handle_ack+0xb8>)
 800f072:	79db      	ldrb	r3, [r3, #7]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d007      	beq.n	800f088 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f078:	4b06      	ldr	r3, [pc, #24]	@ (800f094 <dhcp_handle_ack+0xbc>)
 800f07a:	69db      	ldr	r3, [r3, #28]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7f6 ff79 	bl	8005f74 <lwip_htonl>
 800f082:	4602      	mov	r2, r0
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f088:	bf00      	nop
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20008054 	.word	0x20008054
 800f094:	20008034 	.word	0x20008034

0800f098 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d109      	bne.n	800f0ba <dhcp_start+0x22>
 800f0a6:	4b37      	ldr	r3, [pc, #220]	@ (800f184 <dhcp_start+0xec>)
 800f0a8:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800f0ac:	4936      	ldr	r1, [pc, #216]	@ (800f188 <dhcp_start+0xf0>)
 800f0ae:	4837      	ldr	r0, [pc, #220]	@ (800f18c <dhcp_start+0xf4>)
 800f0b0:	f004 fecc 	bl	8013e4c <iprintf>
 800f0b4:	f06f 030f 	mvn.w	r3, #15
 800f0b8:	e060      	b.n	800f17c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f0c0:	f003 0301 	and.w	r3, r3, #1
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d109      	bne.n	800f0dc <dhcp_start+0x44>
 800f0c8:	4b2e      	ldr	r3, [pc, #184]	@ (800f184 <dhcp_start+0xec>)
 800f0ca:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800f0ce:	4930      	ldr	r1, [pc, #192]	@ (800f190 <dhcp_start+0xf8>)
 800f0d0:	482e      	ldr	r0, [pc, #184]	@ (800f18c <dhcp_start+0xf4>)
 800f0d2:	f004 febb 	bl	8013e4c <iprintf>
 800f0d6:	f06f 030f 	mvn.w	r3, #15
 800f0da:	e04f      	b.n	800f17c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0e0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0e6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800f0ea:	d202      	bcs.n	800f0f2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f0:	e044      	b.n	800f17c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d10d      	bne.n	800f114 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f0f8:	2034      	movs	r0, #52	@ 0x34
 800f0fa:	f7f7 fa09 	bl	8006510 <mem_malloc>
 800f0fe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d102      	bne.n	800f10c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f106:	f04f 33ff 	mov.w	r3, #4294967295
 800f10a:	e037      	b.n	800f17c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	625a      	str	r2, [r3, #36]	@ 0x24
 800f112:	e005      	b.n	800f120 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	791b      	ldrb	r3, [r3, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f11c:	f7ff fc90 	bl	800ea40 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f120:	2234      	movs	r2, #52	@ 0x34
 800f122:	2100      	movs	r1, #0
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f004 ff32 	bl	8013f8e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f12a:	f7ff fc37 	bl	800e99c <dhcp_inc_pcb_refcount>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d002      	beq.n	800f13a <dhcp_start+0xa2>
    return ERR_MEM;
 800f134:	f04f 33ff 	mov.w	r3, #4294967295
 800f138:	e020      	b.n	800f17c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2201      	movs	r2, #1
 800f13e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f146:	f003 0304 	and.w	r3, r3, #4
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d105      	bne.n	800f15a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f14e:	2102      	movs	r1, #2
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	f000 fcfb 	bl	800fb4c <dhcp_set_state>
    return ERR_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	e010      	b.n	800f17c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f8f8 	bl	800f350 <dhcp_discover>
 800f160:	4603      	mov	r3, r0
 800f162:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f164:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d005      	beq.n	800f178 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fc53 	bl	800fa18 <dhcp_release_and_stop>
    return ERR_MEM;
 800f172:	f04f 33ff 	mov.w	r3, #4294967295
 800f176:	e001      	b.n	800f17c <dhcp_start+0xe4>
  }
  return result;
 800f178:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	0801a040 	.word	0x0801a040
 800f188:	0801a124 	.word	0x0801a124
 800f18c:	0801a0a0 	.word	0x0801a0a0
 800f190:	0801a168 	.word	0x0801a168

0800f194 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d025      	beq.n	800f1f4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	795b      	ldrb	r3, [r3, #5]
 800f1ac:	2b0a      	cmp	r3, #10
 800f1ae:	d008      	beq.n	800f1c2 <dhcp_network_changed+0x2e>
 800f1b0:	2b0a      	cmp	r3, #10
 800f1b2:	dc0d      	bgt.n	800f1d0 <dhcp_network_changed+0x3c>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d01f      	beq.n	800f1f8 <dhcp_network_changed+0x64>
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	db09      	blt.n	800f1d0 <dhcp_network_changed+0x3c>
 800f1bc:	3b03      	subs	r3, #3
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d806      	bhi.n	800f1d0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fb71 	bl	800f8b0 <dhcp_reboot>
      break;
 800f1ce:	e014      	b.n	800f1fa <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	795b      	ldrb	r3, [r3, #5]
 800f1d4:	2b0c      	cmp	r3, #12
 800f1d6:	d906      	bls.n	800f1e6 <dhcp_network_changed+0x52>
 800f1d8:	4b09      	ldr	r3, [pc, #36]	@ (800f200 <dhcp_network_changed+0x6c>)
 800f1da:	f240 326d 	movw	r2, #877	@ 0x36d
 800f1de:	4909      	ldr	r1, [pc, #36]	@ (800f204 <dhcp_network_changed+0x70>)
 800f1e0:	4809      	ldr	r0, [pc, #36]	@ (800f208 <dhcp_network_changed+0x74>)
 800f1e2:	f004 fe33 	bl	8013e4c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f8af 	bl	800f350 <dhcp_discover>
      break;
 800f1f2:	e002      	b.n	800f1fa <dhcp_network_changed+0x66>
    return;
 800f1f4:	bf00      	nop
 800f1f6:	e000      	b.n	800f1fa <dhcp_network_changed+0x66>
      break;
 800f1f8:	bf00      	nop
  }
}
 800f1fa:	3710      	adds	r7, #16
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	0801a040 	.word	0x0801a040
 800f204:	0801a18c 	.word	0x0801a18c
 800f208:	0801a0a0 	.word	0x0801a0a0

0800f20c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d107      	bne.n	800f22c <dhcp_arp_reply+0x20>
 800f21c:	4b0e      	ldr	r3, [pc, #56]	@ (800f258 <dhcp_arp_reply+0x4c>)
 800f21e:	f240 328b 	movw	r2, #907	@ 0x38b
 800f222:	490e      	ldr	r1, [pc, #56]	@ (800f25c <dhcp_arp_reply+0x50>)
 800f224:	480e      	ldr	r0, [pc, #56]	@ (800f260 <dhcp_arp_reply+0x54>)
 800f226:	f004 fe11 	bl	8013e4c <iprintf>
 800f22a:	e012      	b.n	800f252 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f230:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00c      	beq.n	800f252 <dhcp_arp_reply+0x46>
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	795b      	ldrb	r3, [r3, #5]
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d108      	bne.n	800f252 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	69db      	ldr	r3, [r3, #28]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d102      	bne.n	800f252 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 f809 	bl	800f264 <dhcp_decline>
    }
  }
}
 800f252:	3710      	adds	r7, #16
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	0801a040 	.word	0x0801a040
 800f25c:	0801a124 	.word	0x0801a124
 800f260:	0801a0a0 	.word	0x0801a0a0

0800f264 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f264:	b5b0      	push	{r4, r5, r7, lr}
 800f266:	b08a      	sub	sp, #40	@ 0x28
 800f268:	af02      	add	r7, sp, #8
 800f26a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f270:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f272:	210c      	movs	r1, #12
 800f274:	69b8      	ldr	r0, [r7, #24]
 800f276:	f000 fc69 	bl	800fb4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f27a:	f107 030c 	add.w	r3, r7, #12
 800f27e:	2204      	movs	r2, #4
 800f280:	69b9      	ldr	r1, [r7, #24]
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f001 f8ee 	bl	8010464 <dhcp_create_msg>
 800f288:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d035      	beq.n	800f2fc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f296:	89b8      	ldrh	r0, [r7, #12]
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f29e:	2304      	movs	r3, #4
 800f2a0:	2232      	movs	r2, #50	@ 0x32
 800f2a2:	f000 fc6d 	bl	800fb80 <dhcp_option>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f2aa:	89bc      	ldrh	r4, [r7, #12]
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	69db      	ldr	r3, [r3, #28]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7f6 fe5c 	bl	8005f74 <lwip_htonl>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	461a      	mov	r2, r3
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fce8 	bl	800fc98 <dhcp_option_long>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f2cc:	89b8      	ldrh	r0, [r7, #12]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	33f0      	adds	r3, #240	@ 0xf0
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	f001 f99b 	bl	8010610 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f2da:	4b19      	ldr	r3, [pc, #100]	@ (800f340 <dhcp_decline+0xdc>)
 800f2dc:	6818      	ldr	r0, [r3, #0]
 800f2de:	4b19      	ldr	r3, [pc, #100]	@ (800f344 <dhcp_decline+0xe0>)
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	2343      	movs	r3, #67	@ 0x43
 800f2e8:	4a17      	ldr	r2, [pc, #92]	@ (800f348 <dhcp_decline+0xe4>)
 800f2ea:	6979      	ldr	r1, [r7, #20]
 800f2ec:	f7ff f8d0 	bl	800e490 <udp_sendto_if_src>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f2f4:	6978      	ldr	r0, [r7, #20]
 800f2f6:	f7f8 f9b5 	bl	8007664 <pbuf_free>
 800f2fa:	e001      	b.n	800f300 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f2fc:	23ff      	movs	r3, #255	@ 0xff
 800f2fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	799b      	ldrb	r3, [r3, #6]
 800f304:	2bff      	cmp	r3, #255	@ 0xff
 800f306:	d005      	beq.n	800f314 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	799b      	ldrb	r3, [r3, #6]
 800f30c:	3301      	adds	r3, #1
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f314:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f318:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f31a:	89fb      	ldrh	r3, [r7, #14]
 800f31c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f320:	4a0a      	ldr	r2, [pc, #40]	@ (800f34c <dhcp_decline+0xe8>)
 800f322:	fb82 1203 	smull	r1, r2, r2, r3
 800f326:	1152      	asrs	r2, r2, #5
 800f328:	17db      	asrs	r3, r3, #31
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f332:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f336:	4618      	mov	r0, r3
 800f338:	3720      	adds	r7, #32
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bdb0      	pop	{r4, r5, r7, pc}
 800f33e:	bf00      	nop
 800f340:	2000805c 	.word	0x2000805c
 800f344:	0801ac10 	.word	0x0801ac10
 800f348:	0801ac14 	.word	0x0801ac14
 800f34c:	10624dd3 	.word	0x10624dd3

0800f350 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b08a      	sub	sp, #40	@ 0x28
 800f354:	af02      	add	r7, sp, #8
 800f356:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f35c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f35e:	2300      	movs	r3, #0
 800f360:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	2200      	movs	r2, #0
 800f366:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f368:	2106      	movs	r1, #6
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f000 fbee 	bl	800fb4c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f370:	f107 0308 	add.w	r3, r7, #8
 800f374:	2201      	movs	r2, #1
 800f376:	69b9      	ldr	r1, [r7, #24]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f001 f873 	bl	8010464 <dhcp_create_msg>
 800f37e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d04b      	beq.n	800f41e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f38c:	8938      	ldrh	r0, [r7, #8]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f394:	2302      	movs	r3, #2
 800f396:	2239      	movs	r2, #57	@ 0x39
 800f398:	f000 fbf2 	bl	800fb80 <dhcp_option>
 800f39c:	4603      	mov	r3, r0
 800f39e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f3a0:	8938      	ldrh	r0, [r7, #8]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	f000 fc41 	bl	800fc34 <dhcp_option_short>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f3b6:	8938      	ldrh	r0, [r7, #8]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3be:	2303      	movs	r3, #3
 800f3c0:	2237      	movs	r2, #55	@ 0x37
 800f3c2:	f000 fbdd 	bl	800fb80 <dhcp_option>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	77fb      	strb	r3, [r7, #31]
 800f3ce:	e00e      	b.n	800f3ee <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f3d0:	8938      	ldrh	r0, [r7, #8]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3d8:	7ffb      	ldrb	r3, [r7, #31]
 800f3da:	4a29      	ldr	r2, [pc, #164]	@ (800f480 <dhcp_discover+0x130>)
 800f3dc:	5cd3      	ldrb	r3, [r2, r3]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f000 fc02 	bl	800fbe8 <dhcp_option_byte>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3e8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	77fb      	strb	r3, [r7, #31]
 800f3ee:	7ffb      	ldrb	r3, [r7, #31]
 800f3f0:	2b02      	cmp	r3, #2
 800f3f2:	d9ed      	bls.n	800f3d0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3f4:	8938      	ldrh	r0, [r7, #8]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	33f0      	adds	r3, #240	@ 0xf0
 800f3fa:	693a      	ldr	r2, [r7, #16]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f001 f907 	bl	8010610 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f402:	4b20      	ldr	r3, [pc, #128]	@ (800f484 <dhcp_discover+0x134>)
 800f404:	6818      	ldr	r0, [r3, #0]
 800f406:	4b20      	ldr	r3, [pc, #128]	@ (800f488 <dhcp_discover+0x138>)
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	2343      	movs	r3, #67	@ 0x43
 800f410:	4a1e      	ldr	r2, [pc, #120]	@ (800f48c <dhcp_discover+0x13c>)
 800f412:	6939      	ldr	r1, [r7, #16]
 800f414:	f7ff f83c 	bl	800e490 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f418:	6938      	ldr	r0, [r7, #16]
 800f41a:	f7f8 f923 	bl	8007664 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	799b      	ldrb	r3, [r3, #6]
 800f422:	2bff      	cmp	r3, #255	@ 0xff
 800f424:	d005      	beq.n	800f432 <dhcp_discover+0xe2>
    dhcp->tries++;
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	799b      	ldrb	r3, [r3, #6]
 800f42a:	3301      	adds	r3, #1
 800f42c:	b2da      	uxtb	r2, r3
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	799b      	ldrb	r3, [r3, #6]
 800f436:	2b05      	cmp	r3, #5
 800f438:	d80d      	bhi.n	800f456 <dhcp_discover+0x106>
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	799b      	ldrb	r3, [r3, #6]
 800f43e:	461a      	mov	r2, r3
 800f440:	2301      	movs	r3, #1
 800f442:	4093      	lsls	r3, r2
 800f444:	b29b      	uxth	r3, r3
 800f446:	461a      	mov	r2, r3
 800f448:	0152      	lsls	r2, r2, #5
 800f44a:	1ad2      	subs	r2, r2, r3
 800f44c:	0092      	lsls	r2, r2, #2
 800f44e:	4413      	add	r3, r2
 800f450:	00db      	lsls	r3, r3, #3
 800f452:	b29b      	uxth	r3, r3
 800f454:	e001      	b.n	800f45a <dhcp_discover+0x10a>
 800f456:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800f45a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f45c:	897b      	ldrh	r3, [r7, #10]
 800f45e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f462:	4a0b      	ldr	r2, [pc, #44]	@ (800f490 <dhcp_discover+0x140>)
 800f464:	fb82 1203 	smull	r1, r2, r2, r3
 800f468:	1152      	asrs	r2, r2, #5
 800f46a:	17db      	asrs	r3, r3, #31
 800f46c:	1ad3      	subs	r3, r2, r3
 800f46e:	b29a      	uxth	r2, r3
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3720      	adds	r7, #32
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	2000003c 	.word	0x2000003c
 800f484:	2000805c 	.word	0x2000805c
 800f488:	0801ac10 	.word	0x0801ac10
 800f48c:	0801ac14 	.word	0x0801ac14
 800f490:	10624dd3 	.word	0x10624dd3

0800f494 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d107      	bne.n	800f4b2 <dhcp_bind+0x1e>
 800f4a2:	4b64      	ldr	r3, [pc, #400]	@ (800f634 <dhcp_bind+0x1a0>)
 800f4a4:	f240 4215 	movw	r2, #1045	@ 0x415
 800f4a8:	4963      	ldr	r1, [pc, #396]	@ (800f638 <dhcp_bind+0x1a4>)
 800f4aa:	4864      	ldr	r0, [pc, #400]	@ (800f63c <dhcp_bind+0x1a8>)
 800f4ac:	f004 fcce 	bl	8013e4c <iprintf>
 800f4b0:	e0bc      	b.n	800f62c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d107      	bne.n	800f4ce <dhcp_bind+0x3a>
 800f4be:	4b5d      	ldr	r3, [pc, #372]	@ (800f634 <dhcp_bind+0x1a0>)
 800f4c0:	f240 4217 	movw	r2, #1047	@ 0x417
 800f4c4:	495e      	ldr	r1, [pc, #376]	@ (800f640 <dhcp_bind+0x1ac>)
 800f4c6:	485d      	ldr	r0, [pc, #372]	@ (800f63c <dhcp_bind+0x1a8>)
 800f4c8:	f004 fcc0 	bl	8013e4c <iprintf>
 800f4cc:	e0ae      	b.n	800f62c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4dc:	d019      	beq.n	800f512 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4e2:	331e      	adds	r3, #30
 800f4e4:	4a57      	ldr	r2, [pc, #348]	@ (800f644 <dhcp_bind+0x1b0>)
 800f4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ea:	095b      	lsrs	r3, r3, #5
 800f4ec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4f4:	d302      	bcc.n	800f4fc <dhcp_bind+0x68>
      timeout = 0xffff;
 800f4f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4fa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	8a9b      	ldrh	r3, [r3, #20]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d102      	bne.n	800f512 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2201      	movs	r2, #1
 800f510:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51a:	d01d      	beq.n	800f558 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f520:	331e      	adds	r3, #30
 800f522:	4a48      	ldr	r2, [pc, #288]	@ (800f644 <dhcp_bind+0x1b0>)
 800f524:	fba2 2303 	umull	r2, r3, r2, r3
 800f528:	095b      	lsrs	r3, r3, #5
 800f52a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f532:	d302      	bcc.n	800f53a <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f538:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	895b      	ldrh	r3, [r3, #10]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d102      	bne.n	800f550 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	2201      	movs	r2, #1
 800f54e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	895a      	ldrh	r2, [r3, #10]
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f560:	d01d      	beq.n	800f59e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f566:	331e      	adds	r3, #30
 800f568:	4a36      	ldr	r2, [pc, #216]	@ (800f644 <dhcp_bind+0x1b0>)
 800f56a:	fba2 2303 	umull	r2, r3, r2, r3
 800f56e:	095b      	lsrs	r3, r3, #5
 800f570:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f578:	d302      	bcc.n	800f580 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f57a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f57e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	b29a      	uxth	r2, r3
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	899b      	ldrh	r3, [r3, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	2201      	movs	r2, #1
 800f594:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	899a      	ldrh	r2, [r3, #12]
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f59e:	69bb      	ldr	r3, [r7, #24]
 800f5a0:	895a      	ldrh	r2, [r3, #10]
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	899b      	ldrh	r3, [r3, #12]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d306      	bcc.n	800f5b8 <dhcp_bind+0x124>
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	899b      	ldrh	r3, [r3, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	79db      	ldrb	r3, [r3, #7]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	6a1b      	ldr	r3, [r3, #32]
 800f5c4:	613b      	str	r3, [r7, #16]
 800f5c6:	e014      	b.n	800f5f2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	331c      	adds	r3, #28
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f5d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	db02      	blt.n	800f5de <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f5d8:	23ff      	movs	r3, #255	@ 0xff
 800f5da:	613b      	str	r3, [r7, #16]
 800f5dc:	e009      	b.n	800f5f2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f5de:	7dfb      	ldrb	r3, [r7, #23]
 800f5e0:	2bbf      	cmp	r3, #191	@ 0xbf
 800f5e2:	d903      	bls.n	800f5ec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f5e4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800f5e8:	613b      	str	r3, [r7, #16]
 800f5ea:	e002      	b.n	800f5f2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f5ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5f0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5f6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d108      	bne.n	800f610 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	69da      	ldr	r2, [r3, #28]
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	4013      	ands	r3, r2
 800f606:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f60e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f610:	210a      	movs	r1, #10
 800f612:	69b8      	ldr	r0, [r7, #24]
 800f614:	f000 fa9a 	bl	800fb4c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	f103 011c 	add.w	r1, r3, #28
 800f61e:	f107 030c 	add.w	r3, r7, #12
 800f622:	f107 0210 	add.w	r2, r7, #16
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7f7 fb3c 	bl	8006ca4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f62c:	3720      	adds	r7, #32
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	0801a040 	.word	0x0801a040
 800f638:	0801a1a0 	.word	0x0801a1a0
 800f63c:	0801a0a0 	.word	0x0801a0a0
 800f640:	0801a1bc 	.word	0x0801a1bc
 800f644:	88888889 	.word	0x88888889

0800f648 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08a      	sub	sp, #40	@ 0x28
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f654:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f656:	2105      	movs	r1, #5
 800f658:	69b8      	ldr	r0, [r7, #24]
 800f65a:	f000 fa77 	bl	800fb4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f65e:	f107 030c 	add.w	r3, r7, #12
 800f662:	2203      	movs	r2, #3
 800f664:	69b9      	ldr	r1, [r7, #24]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fefc 	bl	8010464 <dhcp_create_msg>
 800f66c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d04e      	beq.n	800f712 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f67a:	89b8      	ldrh	r0, [r7, #12]
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f682:	2302      	movs	r3, #2
 800f684:	2239      	movs	r2, #57	@ 0x39
 800f686:	f000 fa7b 	bl	800fb80 <dhcp_option>
 800f68a:	4603      	mov	r3, r0
 800f68c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f68e:	89b8      	ldrh	r0, [r7, #12]
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f69a:	461a      	mov	r2, r3
 800f69c:	f000 faca 	bl	800fc34 <dhcp_option_short>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f6a4:	89b8      	ldrh	r0, [r7, #12]
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f6ac:	2303      	movs	r3, #3
 800f6ae:	2237      	movs	r2, #55	@ 0x37
 800f6b0:	f000 fa66 	bl	800fb80 <dhcp_option>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	77bb      	strb	r3, [r7, #30]
 800f6bc:	e00e      	b.n	800f6dc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f6be:	89b8      	ldrh	r0, [r7, #12]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f6c6:	7fbb      	ldrb	r3, [r7, #30]
 800f6c8:	4a29      	ldr	r2, [pc, #164]	@ (800f770 <dhcp_renew+0x128>)
 800f6ca:	5cd3      	ldrb	r3, [r2, r3]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	f000 fa8b 	bl	800fbe8 <dhcp_option_byte>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6d6:	7fbb      	ldrb	r3, [r7, #30]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	77bb      	strb	r3, [r7, #30]
 800f6dc:	7fbb      	ldrb	r3, [r7, #30]
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d9ed      	bls.n	800f6be <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f6e2:	89b8      	ldrh	r0, [r7, #12]
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	33f0      	adds	r3, #240	@ 0xf0
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	f000 ff90 	bl	8010610 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f6f0:	4b20      	ldr	r3, [pc, #128]	@ (800f774 <dhcp_renew+0x12c>)
 800f6f2:	6818      	ldr	r0, [r3, #0]
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	f103 0218 	add.w	r2, r3, #24
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	2343      	movs	r3, #67	@ 0x43
 800f700:	6979      	ldr	r1, [r7, #20]
 800f702:	f7fe fe51 	bl	800e3a8 <udp_sendto_if>
 800f706:	4603      	mov	r3, r0
 800f708:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f70a:	6978      	ldr	r0, [r7, #20]
 800f70c:	f7f7 ffaa 	bl	8007664 <pbuf_free>
 800f710:	e001      	b.n	800f716 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f712:	23ff      	movs	r3, #255	@ 0xff
 800f714:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	799b      	ldrb	r3, [r3, #6]
 800f71a:	2bff      	cmp	r3, #255	@ 0xff
 800f71c:	d005      	beq.n	800f72a <dhcp_renew+0xe2>
    dhcp->tries++;
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	799b      	ldrb	r3, [r3, #6]
 800f722:	3301      	adds	r3, #1
 800f724:	b2da      	uxtb	r2, r3
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	799b      	ldrb	r3, [r3, #6]
 800f72e:	2b09      	cmp	r3, #9
 800f730:	d809      	bhi.n	800f746 <dhcp_renew+0xfe>
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	799b      	ldrb	r3, [r3, #6]
 800f736:	461a      	mov	r2, r3
 800f738:	0152      	lsls	r2, r2, #5
 800f73a:	1ad2      	subs	r2, r2, r3
 800f73c:	0092      	lsls	r2, r2, #2
 800f73e:	4413      	add	r3, r2
 800f740:	011b      	lsls	r3, r3, #4
 800f742:	b29b      	uxth	r3, r3
 800f744:	e001      	b.n	800f74a <dhcp_renew+0x102>
 800f746:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800f74a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f74c:	89fb      	ldrh	r3, [r7, #14]
 800f74e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f752:	4a09      	ldr	r2, [pc, #36]	@ (800f778 <dhcp_renew+0x130>)
 800f754:	fb82 1203 	smull	r1, r2, r2, r3
 800f758:	1152      	asrs	r2, r2, #5
 800f75a:	17db      	asrs	r3, r3, #31
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	b29a      	uxth	r2, r3
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f764:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3720      	adds	r7, #32
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	2000003c 	.word	0x2000003c
 800f774:	2000805c 	.word	0x2000805c
 800f778:	10624dd3 	.word	0x10624dd3

0800f77c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08a      	sub	sp, #40	@ 0x28
 800f780:	af02      	add	r7, sp, #8
 800f782:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f788:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f78a:	2104      	movs	r1, #4
 800f78c:	69b8      	ldr	r0, [r7, #24]
 800f78e:	f000 f9dd 	bl	800fb4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f792:	f107 030c 	add.w	r3, r7, #12
 800f796:	2203      	movs	r2, #3
 800f798:	69b9      	ldr	r1, [r7, #24]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 fe62 	bl	8010464 <dhcp_create_msg>
 800f7a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d04c      	beq.n	800f842 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	685b      	ldr	r3, [r3, #4]
 800f7ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f7ae:	89b8      	ldrh	r0, [r7, #12]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7b6:	2302      	movs	r3, #2
 800f7b8:	2239      	movs	r2, #57	@ 0x39
 800f7ba:	f000 f9e1 	bl	800fb80 <dhcp_option>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f7c2:	89b8      	ldrh	r0, [r7, #12]
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	f000 fa30 	bl	800fc34 <dhcp_option_short>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f7d8:	89b8      	ldrh	r0, [r7, #12]
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7e0:	2303      	movs	r3, #3
 800f7e2:	2237      	movs	r2, #55	@ 0x37
 800f7e4:	f000 f9cc 	bl	800fb80 <dhcp_option>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	77bb      	strb	r3, [r7, #30]
 800f7f0:	e00e      	b.n	800f810 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f7f2:	89b8      	ldrh	r0, [r7, #12]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7fa:	7fbb      	ldrb	r3, [r7, #30]
 800f7fc:	4a28      	ldr	r2, [pc, #160]	@ (800f8a0 <dhcp_rebind+0x124>)
 800f7fe:	5cd3      	ldrb	r3, [r2, r3]
 800f800:	461a      	mov	r2, r3
 800f802:	f000 f9f1 	bl	800fbe8 <dhcp_option_byte>
 800f806:	4603      	mov	r3, r0
 800f808:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f80a:	7fbb      	ldrb	r3, [r7, #30]
 800f80c:	3301      	adds	r3, #1
 800f80e:	77bb      	strb	r3, [r7, #30]
 800f810:	7fbb      	ldrb	r3, [r7, #30]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d9ed      	bls.n	800f7f2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f816:	89b8      	ldrh	r0, [r7, #12]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	33f0      	adds	r3, #240	@ 0xf0
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	4619      	mov	r1, r3
 800f820:	f000 fef6 	bl	8010610 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f824:	4b1f      	ldr	r3, [pc, #124]	@ (800f8a4 <dhcp_rebind+0x128>)
 800f826:	6818      	ldr	r0, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	2343      	movs	r3, #67	@ 0x43
 800f82e:	4a1e      	ldr	r2, [pc, #120]	@ (800f8a8 <dhcp_rebind+0x12c>)
 800f830:	6979      	ldr	r1, [r7, #20]
 800f832:	f7fe fdb9 	bl	800e3a8 <udp_sendto_if>
 800f836:	4603      	mov	r3, r0
 800f838:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f83a:	6978      	ldr	r0, [r7, #20]
 800f83c:	f7f7 ff12 	bl	8007664 <pbuf_free>
 800f840:	e001      	b.n	800f846 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f842:	23ff      	movs	r3, #255	@ 0xff
 800f844:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	799b      	ldrb	r3, [r3, #6]
 800f84a:	2bff      	cmp	r3, #255	@ 0xff
 800f84c:	d005      	beq.n	800f85a <dhcp_rebind+0xde>
    dhcp->tries++;
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	799b      	ldrb	r3, [r3, #6]
 800f852:	3301      	adds	r3, #1
 800f854:	b2da      	uxtb	r2, r3
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	799b      	ldrb	r3, [r3, #6]
 800f85e:	2b09      	cmp	r3, #9
 800f860:	d809      	bhi.n	800f876 <dhcp_rebind+0xfa>
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	799b      	ldrb	r3, [r3, #6]
 800f866:	461a      	mov	r2, r3
 800f868:	0152      	lsls	r2, r2, #5
 800f86a:	1ad2      	subs	r2, r2, r3
 800f86c:	0092      	lsls	r2, r2, #2
 800f86e:	4413      	add	r3, r2
 800f870:	00db      	lsls	r3, r3, #3
 800f872:	b29b      	uxth	r3, r3
 800f874:	e001      	b.n	800f87a <dhcp_rebind+0xfe>
 800f876:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f87a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f87c:	89fb      	ldrh	r3, [r7, #14]
 800f87e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f882:	4a0a      	ldr	r2, [pc, #40]	@ (800f8ac <dhcp_rebind+0x130>)
 800f884:	fb82 1203 	smull	r1, r2, r2, r3
 800f888:	1152      	asrs	r2, r2, #5
 800f88a:	17db      	asrs	r3, r3, #31
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	b29a      	uxth	r2, r3
 800f890:	69bb      	ldr	r3, [r7, #24]
 800f892:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f894:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3720      	adds	r7, #32
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	2000003c 	.word	0x2000003c
 800f8a4:	2000805c 	.word	0x2000805c
 800f8a8:	0801ac14 	.word	0x0801ac14
 800f8ac:	10624dd3 	.word	0x10624dd3

0800f8b0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f8b0:	b5b0      	push	{r4, r5, r7, lr}
 800f8b2:	b08a      	sub	sp, #40	@ 0x28
 800f8b4:	af02      	add	r7, sp, #8
 800f8b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f8be:	2103      	movs	r1, #3
 800f8c0:	69b8      	ldr	r0, [r7, #24]
 800f8c2:	f000 f943 	bl	800fb4c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f8c6:	f107 030c 	add.w	r3, r7, #12
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	69b9      	ldr	r1, [r7, #24]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 fdc8 	bl	8010464 <dhcp_create_msg>
 800f8d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d066      	beq.n	800f9aa <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f8e2:	89b8      	ldrh	r0, [r7, #12]
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f8ea:	2302      	movs	r3, #2
 800f8ec:	2239      	movs	r2, #57	@ 0x39
 800f8ee:	f000 f947 	bl	800fb80 <dhcp_option>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f8f6:	89b8      	ldrh	r0, [r7, #12]
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	33f0      	adds	r3, #240	@ 0xf0
 800f8fc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f900:	4619      	mov	r1, r3
 800f902:	f000 f997 	bl	800fc34 <dhcp_option_short>
 800f906:	4603      	mov	r3, r0
 800f908:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f90a:	89b8      	ldrh	r0, [r7, #12]
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f912:	2304      	movs	r3, #4
 800f914:	2232      	movs	r2, #50	@ 0x32
 800f916:	f000 f933 	bl	800fb80 <dhcp_option>
 800f91a:	4603      	mov	r3, r0
 800f91c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f91e:	89bc      	ldrh	r4, [r7, #12]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f926:	69bb      	ldr	r3, [r7, #24]
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7f6 fb22 	bl	8005f74 <lwip_htonl>
 800f930:	4603      	mov	r3, r0
 800f932:	461a      	mov	r2, r3
 800f934:	4629      	mov	r1, r5
 800f936:	4620      	mov	r0, r4
 800f938:	f000 f9ae 	bl	800fc98 <dhcp_option_long>
 800f93c:	4603      	mov	r3, r0
 800f93e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f940:	89b8      	ldrh	r0, [r7, #12]
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f948:	2303      	movs	r3, #3
 800f94a:	2237      	movs	r2, #55	@ 0x37
 800f94c:	f000 f918 	bl	800fb80 <dhcp_option>
 800f950:	4603      	mov	r3, r0
 800f952:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f954:	2300      	movs	r3, #0
 800f956:	77bb      	strb	r3, [r7, #30]
 800f958:	e00e      	b.n	800f978 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f95a:	89b8      	ldrh	r0, [r7, #12]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f962:	7fbb      	ldrb	r3, [r7, #30]
 800f964:	4a28      	ldr	r2, [pc, #160]	@ (800fa08 <dhcp_reboot+0x158>)
 800f966:	5cd3      	ldrb	r3, [r2, r3]
 800f968:	461a      	mov	r2, r3
 800f96a:	f000 f93d 	bl	800fbe8 <dhcp_option_byte>
 800f96e:	4603      	mov	r3, r0
 800f970:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f972:	7fbb      	ldrb	r3, [r7, #30]
 800f974:	3301      	adds	r3, #1
 800f976:	77bb      	strb	r3, [r7, #30]
 800f978:	7fbb      	ldrb	r3, [r7, #30]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d9ed      	bls.n	800f95a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f97e:	89b8      	ldrh	r0, [r7, #12]
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	33f0      	adds	r3, #240	@ 0xf0
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	4619      	mov	r1, r3
 800f988:	f000 fe42 	bl	8010610 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f98c:	4b1f      	ldr	r3, [pc, #124]	@ (800fa0c <dhcp_reboot+0x15c>)
 800f98e:	6818      	ldr	r0, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	2343      	movs	r3, #67	@ 0x43
 800f996:	4a1e      	ldr	r2, [pc, #120]	@ (800fa10 <dhcp_reboot+0x160>)
 800f998:	6979      	ldr	r1, [r7, #20]
 800f99a:	f7fe fd05 	bl	800e3a8 <udp_sendto_if>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f9a2:	6978      	ldr	r0, [r7, #20]
 800f9a4:	f7f7 fe5e 	bl	8007664 <pbuf_free>
 800f9a8:	e001      	b.n	800f9ae <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f9aa:	23ff      	movs	r3, #255	@ 0xff
 800f9ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	799b      	ldrb	r3, [r3, #6]
 800f9b2:	2bff      	cmp	r3, #255	@ 0xff
 800f9b4:	d005      	beq.n	800f9c2 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	799b      	ldrb	r3, [r3, #6]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	b2da      	uxtb	r2, r3
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	799b      	ldrb	r3, [r3, #6]
 800f9c6:	2b09      	cmp	r3, #9
 800f9c8:	d809      	bhi.n	800f9de <dhcp_reboot+0x12e>
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	799b      	ldrb	r3, [r3, #6]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	0152      	lsls	r2, r2, #5
 800f9d2:	1ad2      	subs	r2, r2, r3
 800f9d4:	0092      	lsls	r2, r2, #2
 800f9d6:	4413      	add	r3, r2
 800f9d8:	00db      	lsls	r3, r3, #3
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	e001      	b.n	800f9e2 <dhcp_reboot+0x132>
 800f9de:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f9e2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f9e4:	89fb      	ldrh	r3, [r7, #14]
 800f9e6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f9ea:	4a0a      	ldr	r2, [pc, #40]	@ (800fa14 <dhcp_reboot+0x164>)
 800f9ec:	fb82 1203 	smull	r1, r2, r2, r3
 800f9f0:	1152      	asrs	r2, r2, #5
 800f9f2:	17db      	asrs	r3, r3, #31
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f9fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3720      	adds	r7, #32
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bdb0      	pop	{r4, r5, r7, pc}
 800fa08:	2000003c 	.word	0x2000003c
 800fa0c:	2000805c 	.word	0x2000805c
 800fa10:	0801ac14 	.word	0x0801ac14
 800fa14:	10624dd3 	.word	0x10624dd3

0800fa18 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800fa18:	b5b0      	push	{r4, r5, r7, lr}
 800fa1a:	b08a      	sub	sp, #40	@ 0x28
 800fa1c:	af02      	add	r7, sp, #8
 800fa1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa24:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f000 8084 	beq.w	800fb36 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	795b      	ldrb	r3, [r3, #5]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f000 8081 	beq.w	800fb3a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	699b      	ldr	r3, [r3, #24]
 800fa3c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	2200      	movs	r2, #0
 800fa42:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	2200      	movs	r2, #0
 800fa48:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	2200      	movs	r2, #0
 800fa54:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	829a      	strh	r2, [r3, #20]
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	8a9a      	ldrh	r2, [r3, #20]
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	825a      	strh	r2, [r3, #18]
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	8a5a      	ldrh	r2, [r3, #18]
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	821a      	strh	r2, [r3, #16]
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	8a1a      	ldrh	r2, [r3, #16]
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fdee 	bl	801066c <dhcp_supplied_address>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d03b      	beq.n	800fb0e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fa96:	f107 030e 	add.w	r3, r7, #14
 800fa9a:	2207      	movs	r2, #7
 800fa9c:	69f9      	ldr	r1, [r7, #28]
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 fce0 	bl	8010464 <dhcp_create_msg>
 800faa4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d030      	beq.n	800fb0e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fab2:	89f8      	ldrh	r0, [r7, #14]
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800faba:	2304      	movs	r3, #4
 800fabc:	2236      	movs	r2, #54	@ 0x36
 800fabe:	f000 f85f 	bl	800fb80 <dhcp_option>
 800fac2:	4603      	mov	r3, r0
 800fac4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fac6:	89fc      	ldrh	r4, [r7, #14]
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f6 fa4f 	bl	8005f74 <lwip_htonl>
 800fad6:	4603      	mov	r3, r0
 800fad8:	461a      	mov	r2, r3
 800fada:	4629      	mov	r1, r5
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 f8db 	bl	800fc98 <dhcp_option_long>
 800fae2:	4603      	mov	r3, r0
 800fae4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fae6:	89f8      	ldrh	r0, [r7, #14]
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	33f0      	adds	r3, #240	@ 0xf0
 800faec:	69ba      	ldr	r2, [r7, #24]
 800faee:	4619      	mov	r1, r3
 800faf0:	f000 fd8e 	bl	8010610 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800faf4:	4b13      	ldr	r3, [pc, #76]	@ (800fb44 <dhcp_release_and_stop+0x12c>)
 800faf6:	6818      	ldr	r0, [r3, #0]
 800faf8:	f107 0210 	add.w	r2, r7, #16
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	2343      	movs	r3, #67	@ 0x43
 800fb02:	69b9      	ldr	r1, [r7, #24]
 800fb04:	f7fe fc50 	bl	800e3a8 <udp_sendto_if>
      pbuf_free(p_out);
 800fb08:	69b8      	ldr	r0, [r7, #24]
 800fb0a:	f7f7 fdab 	bl	8007664 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb48 <dhcp_release_and_stop+0x130>)
 800fb10:	4a0d      	ldr	r2, [pc, #52]	@ (800fb48 <dhcp_release_and_stop+0x130>)
 800fb12:	490d      	ldr	r1, [pc, #52]	@ (800fb48 <dhcp_release_and_stop+0x130>)
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7f7 f8c5 	bl	8006ca4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	69f8      	ldr	r0, [r7, #28]
 800fb1e:	f000 f815 	bl	800fb4c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	791b      	ldrb	r3, [r3, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d008      	beq.n	800fb3c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fb2a:	f7fe ff89 	bl	800ea40 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	2200      	movs	r2, #0
 800fb32:	711a      	strb	r2, [r3, #4]
 800fb34:	e002      	b.n	800fb3c <dhcp_release_and_stop+0x124>
    return;
 800fb36:	bf00      	nop
 800fb38:	e000      	b.n	800fb3c <dhcp_release_and_stop+0x124>
    return;
 800fb3a:	bf00      	nop
  }
}
 800fb3c:	3720      	adds	r7, #32
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bdb0      	pop	{r4, r5, r7, pc}
 800fb42:	bf00      	nop
 800fb44:	2000805c 	.word	0x2000805c
 800fb48:	0801ac10 	.word	0x0801ac10

0800fb4c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b083      	sub	sp, #12
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	460b      	mov	r3, r1
 800fb56:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	795b      	ldrb	r3, [r3, #5]
 800fb5c:	78fa      	ldrb	r2, [r7, #3]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d008      	beq.n	800fb74 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	78fa      	ldrb	r2, [r7, #3]
 800fb66:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	811a      	strh	r2, [r3, #8]
  }
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6039      	str	r1, [r7, #0]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	80fb      	strh	r3, [r7, #6]
 800fb90:	460b      	mov	r3, r1
 800fb92:	717b      	strb	r3, [r7, #5]
 800fb94:	4613      	mov	r3, r2
 800fb96:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fb98:	88fa      	ldrh	r2, [r7, #6]
 800fb9a:	793b      	ldrb	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	3302      	adds	r3, #2
 800fba0:	2b44      	cmp	r3, #68	@ 0x44
 800fba2:	d906      	bls.n	800fbb2 <dhcp_option+0x32>
 800fba4:	4b0d      	ldr	r3, [pc, #52]	@ (800fbdc <dhcp_option+0x5c>)
 800fba6:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fbaa:	490d      	ldr	r1, [pc, #52]	@ (800fbe0 <dhcp_option+0x60>)
 800fbac:	480d      	ldr	r0, [pc, #52]	@ (800fbe4 <dhcp_option+0x64>)
 800fbae:	f004 f94d 	bl	8013e4c <iprintf>
  options[options_out_len++] = option_type;
 800fbb2:	88fb      	ldrh	r3, [r7, #6]
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	80fa      	strh	r2, [r7, #6]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	797a      	ldrb	r2, [r7, #5]
 800fbc0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800fbc2:	88fb      	ldrh	r3, [r7, #6]
 800fbc4:	1c5a      	adds	r2, r3, #1
 800fbc6:	80fa      	strh	r2, [r7, #6]
 800fbc8:	461a      	mov	r2, r3
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	4413      	add	r3, r2
 800fbce:	793a      	ldrb	r2, [r7, #4]
 800fbd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	0801a040 	.word	0x0801a040
 800fbe0:	0801a1d4 	.word	0x0801a1d4
 800fbe4:	0801a0a0 	.word	0x0801a0a0

0800fbe8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	6039      	str	r1, [r7, #0]
 800fbf2:	80fb      	strh	r3, [r7, #6]
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fbf8:	88fb      	ldrh	r3, [r7, #6]
 800fbfa:	2b43      	cmp	r3, #67	@ 0x43
 800fbfc:	d906      	bls.n	800fc0c <dhcp_option_byte+0x24>
 800fbfe:	4b0a      	ldr	r3, [pc, #40]	@ (800fc28 <dhcp_option_byte+0x40>)
 800fc00:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800fc04:	4909      	ldr	r1, [pc, #36]	@ (800fc2c <dhcp_option_byte+0x44>)
 800fc06:	480a      	ldr	r0, [pc, #40]	@ (800fc30 <dhcp_option_byte+0x48>)
 800fc08:	f004 f920 	bl	8013e4c <iprintf>
  options[options_out_len++] = value;
 800fc0c:	88fb      	ldrh	r3, [r7, #6]
 800fc0e:	1c5a      	adds	r2, r3, #1
 800fc10:	80fa      	strh	r2, [r7, #6]
 800fc12:	461a      	mov	r2, r3
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	4413      	add	r3, r2
 800fc18:	797a      	ldrb	r2, [r7, #5]
 800fc1a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fc1c:	88fb      	ldrh	r3, [r7, #6]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	0801a040 	.word	0x0801a040
 800fc2c:	0801a218 	.word	0x0801a218
 800fc30:	0801a0a0 	.word	0x0801a0a0

0800fc34 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	6039      	str	r1, [r7, #0]
 800fc3e:	80fb      	strh	r3, [r7, #6]
 800fc40:	4613      	mov	r3, r2
 800fc42:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	3302      	adds	r3, #2
 800fc48:	2b44      	cmp	r3, #68	@ 0x44
 800fc4a:	d906      	bls.n	800fc5a <dhcp_option_short+0x26>
 800fc4c:	4b0f      	ldr	r3, [pc, #60]	@ (800fc8c <dhcp_option_short+0x58>)
 800fc4e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800fc52:	490f      	ldr	r1, [pc, #60]	@ (800fc90 <dhcp_option_short+0x5c>)
 800fc54:	480f      	ldr	r0, [pc, #60]	@ (800fc94 <dhcp_option_short+0x60>)
 800fc56:	f004 f8f9 	bl	8013e4c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fc5a:	88bb      	ldrh	r3, [r7, #4]
 800fc5c:	0a1b      	lsrs	r3, r3, #8
 800fc5e:	b29a      	uxth	r2, r3
 800fc60:	88fb      	ldrh	r3, [r7, #6]
 800fc62:	1c59      	adds	r1, r3, #1
 800fc64:	80f9      	strh	r1, [r7, #6]
 800fc66:	4619      	mov	r1, r3
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	440b      	add	r3, r1
 800fc6c:	b2d2      	uxtb	r2, r2
 800fc6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fc70:	88fb      	ldrh	r3, [r7, #6]
 800fc72:	1c5a      	adds	r2, r3, #1
 800fc74:	80fa      	strh	r2, [r7, #6]
 800fc76:	461a      	mov	r2, r3
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	88ba      	ldrh	r2, [r7, #4]
 800fc7e:	b2d2      	uxtb	r2, r2
 800fc80:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fc82:	88fb      	ldrh	r3, [r7, #6]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	0801a040 	.word	0x0801a040
 800fc90:	0801a250 	.word	0x0801a250
 800fc94:	0801a0a0 	.word	0x0801a0a0

0800fc98 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
 800fca4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fca6:	89fb      	ldrh	r3, [r7, #14]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	2b44      	cmp	r3, #68	@ 0x44
 800fcac:	d906      	bls.n	800fcbc <dhcp_option_long+0x24>
 800fcae:	4b19      	ldr	r3, [pc, #100]	@ (800fd14 <dhcp_option_long+0x7c>)
 800fcb0:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800fcb4:	4918      	ldr	r1, [pc, #96]	@ (800fd18 <dhcp_option_long+0x80>)
 800fcb6:	4819      	ldr	r0, [pc, #100]	@ (800fd1c <dhcp_option_long+0x84>)
 800fcb8:	f004 f8c8 	bl	8013e4c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	0e1a      	lsrs	r2, r3, #24
 800fcc0:	89fb      	ldrh	r3, [r7, #14]
 800fcc2:	1c59      	adds	r1, r3, #1
 800fcc4:	81f9      	strh	r1, [r7, #14]
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	440b      	add	r3, r1
 800fccc:	b2d2      	uxtb	r2, r2
 800fcce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	0c1a      	lsrs	r2, r3, #16
 800fcd4:	89fb      	ldrh	r3, [r7, #14]
 800fcd6:	1c59      	adds	r1, r3, #1
 800fcd8:	81f9      	strh	r1, [r7, #14]
 800fcda:	4619      	mov	r1, r3
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	440b      	add	r3, r1
 800fce0:	b2d2      	uxtb	r2, r2
 800fce2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	0a1a      	lsrs	r2, r3, #8
 800fce8:	89fb      	ldrh	r3, [r7, #14]
 800fcea:	1c59      	adds	r1, r3, #1
 800fcec:	81f9      	strh	r1, [r7, #14]
 800fcee:	4619      	mov	r1, r3
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	440b      	add	r3, r1
 800fcf4:	b2d2      	uxtb	r2, r2
 800fcf6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fcf8:	89fb      	ldrh	r3, [r7, #14]
 800fcfa:	1c5a      	adds	r2, r3, #1
 800fcfc:	81fa      	strh	r2, [r7, #14]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	4413      	add	r3, r2
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	b2d2      	uxtb	r2, r2
 800fd08:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fd0a:	89fb      	ldrh	r3, [r7, #14]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	0801a040 	.word	0x0801a040
 800fd18:	0801a28c 	.word	0x0801a28c
 800fd1c:	0801a0a0 	.word	0x0801a0a0

0800fd20 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b090      	sub	sp, #64	@ 0x40
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fd32:	2208      	movs	r2, #8
 800fd34:	2100      	movs	r1, #0
 800fd36:	48b5      	ldr	r0, [pc, #724]	@ (801000c <dhcp_parse_reply+0x2ec>)
 800fd38:	f004 f929 	bl	8013f8e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	895b      	ldrh	r3, [r3, #10]
 800fd40:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd42:	d802      	bhi.n	800fd4a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fd44:	f06f 0301 	mvn.w	r3, #1
 800fd48:	e2a7      	b.n	801029a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fd50:	23f0      	movs	r3, #240	@ 0xf0
 800fd52:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	891b      	ldrh	r3, [r3, #8]
 800fd58:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fd5e:	e00c      	b.n	800fd7a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd62:	895b      	ldrh	r3, [r3, #10]
 800fd64:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6c:	895b      	ldrh	r3, [r3, #10]
 800fd6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800fd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d004      	beq.n	800fd8a <dhcp_parse_reply+0x6a>
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	895b      	ldrh	r3, [r3, #10]
 800fd84:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d2ea      	bcs.n	800fd60 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d102      	bne.n	800fd96 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fd90:	f06f 0301 	mvn.w	r3, #1
 800fd94:	e281      	b.n	801029a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800fd96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd98:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800fd9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fd9c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fda4:	e239      	b.n	801021a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800fda6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fda8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fdaa:	4413      	add	r3, r2
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800fdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdba:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fdbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdbe:	3302      	adds	r3, #2
 800fdc0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fdc2:	8bfa      	ldrh	r2, [r7, #30]
 800fdc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d202      	bcs.n	800fdd0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800fdca:	f06f 0301 	mvn.w	r3, #1
 800fdce:	e264      	b.n	801029a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800fdd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdd6:	8952      	ldrh	r2, [r2, #10]
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	da07      	bge.n	800fdec <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fddc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdde:	3301      	adds	r3, #1
 800fde0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fde2:	4413      	add	r3, r2
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fdea:	e00b      	b.n	800fe04 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d004      	beq.n	800fdfe <dhcp_parse_reply+0xde>
 800fdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	e000      	b.n	800fe00 <dhcp_parse_reply+0xe0>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fe04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800fe0c:	7dfb      	ldrb	r3, [r7, #23]
 800fe0e:	2b3b      	cmp	r3, #59	@ 0x3b
 800fe10:	f200 812c 	bhi.w	801006c <dhcp_parse_reply+0x34c>
 800fe14:	a201      	add	r2, pc, #4	@ (adr r2, 800fe1c <dhcp_parse_reply+0xfc>)
 800fe16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1a:	bf00      	nop
 800fe1c:	0800ff0d 	.word	0x0800ff0d
 800fe20:	0800ff1d 	.word	0x0800ff1d
 800fe24:	0801006d 	.word	0x0801006d
 800fe28:	0800ff3f 	.word	0x0800ff3f
 800fe2c:	0801006d 	.word	0x0801006d
 800fe30:	0801006d 	.word	0x0801006d
 800fe34:	0801006d 	.word	0x0801006d
 800fe38:	0801006d 	.word	0x0801006d
 800fe3c:	0801006d 	.word	0x0801006d
 800fe40:	0801006d 	.word	0x0801006d
 800fe44:	0801006d 	.word	0x0801006d
 800fe48:	0801006d 	.word	0x0801006d
 800fe4c:	0801006d 	.word	0x0801006d
 800fe50:	0801006d 	.word	0x0801006d
 800fe54:	0801006d 	.word	0x0801006d
 800fe58:	0801006d 	.word	0x0801006d
 800fe5c:	0801006d 	.word	0x0801006d
 800fe60:	0801006d 	.word	0x0801006d
 800fe64:	0801006d 	.word	0x0801006d
 800fe68:	0801006d 	.word	0x0801006d
 800fe6c:	0801006d 	.word	0x0801006d
 800fe70:	0801006d 	.word	0x0801006d
 800fe74:	0801006d 	.word	0x0801006d
 800fe78:	0801006d 	.word	0x0801006d
 800fe7c:	0801006d 	.word	0x0801006d
 800fe80:	0801006d 	.word	0x0801006d
 800fe84:	0801006d 	.word	0x0801006d
 800fe88:	0801006d 	.word	0x0801006d
 800fe8c:	0801006d 	.word	0x0801006d
 800fe90:	0801006d 	.word	0x0801006d
 800fe94:	0801006d 	.word	0x0801006d
 800fe98:	0801006d 	.word	0x0801006d
 800fe9c:	0801006d 	.word	0x0801006d
 800fea0:	0801006d 	.word	0x0801006d
 800fea4:	0801006d 	.word	0x0801006d
 800fea8:	0801006d 	.word	0x0801006d
 800feac:	0801006d 	.word	0x0801006d
 800feb0:	0801006d 	.word	0x0801006d
 800feb4:	0801006d 	.word	0x0801006d
 800feb8:	0801006d 	.word	0x0801006d
 800febc:	0801006d 	.word	0x0801006d
 800fec0:	0801006d 	.word	0x0801006d
 800fec4:	0801006d 	.word	0x0801006d
 800fec8:	0801006d 	.word	0x0801006d
 800fecc:	0801006d 	.word	0x0801006d
 800fed0:	0801006d 	.word	0x0801006d
 800fed4:	0801006d 	.word	0x0801006d
 800fed8:	0801006d 	.word	0x0801006d
 800fedc:	0801006d 	.word	0x0801006d
 800fee0:	0801006d 	.word	0x0801006d
 800fee4:	0801006d 	.word	0x0801006d
 800fee8:	0800ff6b 	.word	0x0800ff6b
 800feec:	0800ff8d 	.word	0x0800ff8d
 800fef0:	0800ffc9 	.word	0x0800ffc9
 800fef4:	0800ffeb 	.word	0x0800ffeb
 800fef8:	0801006d 	.word	0x0801006d
 800fefc:	0801006d 	.word	0x0801006d
 800ff00:	0801006d 	.word	0x0801006d
 800ff04:	08010029 	.word	0x08010029
 800ff08:	0801004b 	.word	0x0801004b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800ff1a:	e0ab      	b.n	8010074 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff20:	2b04      	cmp	r3, #4
 800ff22:	d009      	beq.n	800ff38 <dhcp_parse_reply+0x218>
 800ff24:	4b3a      	ldr	r3, [pc, #232]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ff26:	f240 622e 	movw	r2, #1582	@ 0x62e
 800ff2a:	493a      	ldr	r1, [pc, #232]	@ (8010014 <dhcp_parse_reply+0x2f4>)
 800ff2c:	483a      	ldr	r0, [pc, #232]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ff2e:	f003 ff8d 	bl	8013e4c <iprintf>
 800ff32:	f06f 0305 	mvn.w	r3, #5
 800ff36:	e1b0      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ff38:	2306      	movs	r3, #6
 800ff3a:	623b      	str	r3, [r7, #32]
        break;
 800ff3c:	e09a      	b.n	8010074 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ff3e:	2304      	movs	r3, #4
 800ff40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ff44:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ff48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d209      	bcs.n	800ff64 <dhcp_parse_reply+0x244>
 800ff50:	4b2f      	ldr	r3, [pc, #188]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ff52:	f240 6233 	movw	r2, #1587	@ 0x633
 800ff56:	4931      	ldr	r1, [pc, #196]	@ (801001c <dhcp_parse_reply+0x2fc>)
 800ff58:	482f      	ldr	r0, [pc, #188]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ff5a:	f003 ff77 	bl	8013e4c <iprintf>
 800ff5e:	f06f 0305 	mvn.w	r3, #5
 800ff62:	e19a      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ff64:	2307      	movs	r3, #7
 800ff66:	623b      	str	r3, [r7, #32]
        break;
 800ff68:	e084      	b.n	8010074 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff6e:	2b04      	cmp	r3, #4
 800ff70:	d009      	beq.n	800ff86 <dhcp_parse_reply+0x266>
 800ff72:	4b27      	ldr	r3, [pc, #156]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ff74:	f240 6241 	movw	r2, #1601	@ 0x641
 800ff78:	4926      	ldr	r1, [pc, #152]	@ (8010014 <dhcp_parse_reply+0x2f4>)
 800ff7a:	4827      	ldr	r0, [pc, #156]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ff7c:	f003 ff66 	bl	8013e4c <iprintf>
 800ff80:	f06f 0305 	mvn.w	r3, #5
 800ff84:	e189      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ff86:	2303      	movs	r3, #3
 800ff88:	623b      	str	r3, [r7, #32]
        break;
 800ff8a:	e073      	b.n	8010074 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ff8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d009      	beq.n	800ffa8 <dhcp_parse_reply+0x288>
 800ff94:	4b1e      	ldr	r3, [pc, #120]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ff96:	f240 624f 	movw	r2, #1615	@ 0x64f
 800ff9a:	4921      	ldr	r1, [pc, #132]	@ (8010020 <dhcp_parse_reply+0x300>)
 800ff9c:	481e      	ldr	r0, [pc, #120]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ff9e:	f003 ff55 	bl	8013e4c <iprintf>
 800ffa2:	f06f 0305 	mvn.w	r3, #5
 800ffa6:	e178      	b.n	801029a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ffa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ffaa:	2bf0      	cmp	r3, #240	@ 0xf0
 800ffac:	d009      	beq.n	800ffc2 <dhcp_parse_reply+0x2a2>
 800ffae:	4b18      	ldr	r3, [pc, #96]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ffb0:	f240 6251 	movw	r2, #1617	@ 0x651
 800ffb4:	491b      	ldr	r1, [pc, #108]	@ (8010024 <dhcp_parse_reply+0x304>)
 800ffb6:	4818      	ldr	r0, [pc, #96]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ffb8:	f003 ff48 	bl	8013e4c <iprintf>
 800ffbc:	f06f 0305 	mvn.w	r3, #5
 800ffc0:	e16b      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	623b      	str	r3, [r7, #32]
        break;
 800ffc6:	e055      	b.n	8010074 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ffc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d009      	beq.n	800ffe4 <dhcp_parse_reply+0x2c4>
 800ffd0:	4b0f      	ldr	r3, [pc, #60]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800ffd2:	f240 6255 	movw	r2, #1621	@ 0x655
 800ffd6:	4912      	ldr	r1, [pc, #72]	@ (8010020 <dhcp_parse_reply+0x300>)
 800ffd8:	480f      	ldr	r0, [pc, #60]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800ffda:	f003 ff37 	bl	8013e4c <iprintf>
 800ffde:	f06f 0305 	mvn.w	r3, #5
 800ffe2:	e15a      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	623b      	str	r3, [r7, #32]
        break;
 800ffe8:	e044      	b.n	8010074 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ffea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffee:	2b04      	cmp	r3, #4
 800fff0:	d009      	beq.n	8010006 <dhcp_parse_reply+0x2e6>
 800fff2:	4b07      	ldr	r3, [pc, #28]	@ (8010010 <dhcp_parse_reply+0x2f0>)
 800fff4:	f240 6259 	movw	r2, #1625	@ 0x659
 800fff8:	4906      	ldr	r1, [pc, #24]	@ (8010014 <dhcp_parse_reply+0x2f4>)
 800fffa:	4807      	ldr	r0, [pc, #28]	@ (8010018 <dhcp_parse_reply+0x2f8>)
 800fffc:	f003 ff26 	bl	8013e4c <iprintf>
 8010000:	f06f 0305 	mvn.w	r3, #5
 8010004:	e149      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010006:	2302      	movs	r3, #2
 8010008:	623b      	str	r3, [r7, #32]
        break;
 801000a:	e033      	b.n	8010074 <dhcp_parse_reply+0x354>
 801000c:	20008054 	.word	0x20008054
 8010010:	0801a040 	.word	0x0801a040
 8010014:	0801a2c8 	.word	0x0801a2c8
 8010018:	0801a0a0 	.word	0x0801a0a0
 801001c:	0801a2d4 	.word	0x0801a2d4
 8010020:	0801a2e8 	.word	0x0801a2e8
 8010024:	0801a2f4 	.word	0x0801a2f4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801002c:	2b04      	cmp	r3, #4
 801002e:	d009      	beq.n	8010044 <dhcp_parse_reply+0x324>
 8010030:	4b9c      	ldr	r3, [pc, #624]	@ (80102a4 <dhcp_parse_reply+0x584>)
 8010032:	f240 625d 	movw	r2, #1629	@ 0x65d
 8010036:	499c      	ldr	r1, [pc, #624]	@ (80102a8 <dhcp_parse_reply+0x588>)
 8010038:	489c      	ldr	r0, [pc, #624]	@ (80102ac <dhcp_parse_reply+0x58c>)
 801003a:	f003 ff07 	bl	8013e4c <iprintf>
 801003e:	f06f 0305 	mvn.w	r3, #5
 8010042:	e12a      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010044:	2304      	movs	r3, #4
 8010046:	623b      	str	r3, [r7, #32]
        break;
 8010048:	e014      	b.n	8010074 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801004a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801004e:	2b04      	cmp	r3, #4
 8010050:	d009      	beq.n	8010066 <dhcp_parse_reply+0x346>
 8010052:	4b94      	ldr	r3, [pc, #592]	@ (80102a4 <dhcp_parse_reply+0x584>)
 8010054:	f240 6261 	movw	r2, #1633	@ 0x661
 8010058:	4993      	ldr	r1, [pc, #588]	@ (80102a8 <dhcp_parse_reply+0x588>)
 801005a:	4894      	ldr	r0, [pc, #592]	@ (80102ac <dhcp_parse_reply+0x58c>)
 801005c:	f003 fef6 	bl	8013e4c <iprintf>
 8010060:	f06f 0305 	mvn.w	r3, #5
 8010064:	e119      	b.n	801029a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010066:	2305      	movs	r3, #5
 8010068:	623b      	str	r3, [r7, #32]
        break;
 801006a:	e003      	b.n	8010074 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801006c:	2300      	movs	r3, #0
 801006e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010072:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d103      	bne.n	8010082 <dhcp_parse_reply+0x362>
      offset++;
 801007a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801007c:	3301      	adds	r3, #1
 801007e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8010080:	e0a1      	b.n	80101c6 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010082:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010088:	4413      	add	r3, r2
 801008a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801008e:	4293      	cmp	r3, r2
 8010090:	dd02      	ble.n	8010098 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010092:	f06f 0301 	mvn.w	r3, #1
 8010096:	e100      	b.n	801029a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8010098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801009c:	b29a      	uxth	r2, r3
 801009e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80100a0:	4413      	add	r3, r2
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	3302      	adds	r3, #2
 80100a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 80100a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	f000 808a 	beq.w	80101c6 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80100b6:	6a3b      	ldr	r3, [r7, #32]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	db02      	blt.n	80100c2 <dhcp_parse_reply+0x3a2>
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	2b07      	cmp	r3, #7
 80100c0:	dd06      	ble.n	80100d0 <dhcp_parse_reply+0x3b0>
 80100c2:	4b78      	ldr	r3, [pc, #480]	@ (80102a4 <dhcp_parse_reply+0x584>)
 80100c4:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80100c8:	4979      	ldr	r1, [pc, #484]	@ (80102b0 <dhcp_parse_reply+0x590>)
 80100ca:	4878      	ldr	r0, [pc, #480]	@ (80102ac <dhcp_parse_reply+0x58c>)
 80100cc:	f003 febe 	bl	8013e4c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80100d0:	4a78      	ldr	r2, [pc, #480]	@ (80102b4 <dhcp_parse_reply+0x594>)
 80100d2:	6a3b      	ldr	r3, [r7, #32]
 80100d4:	4413      	add	r3, r2
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d174      	bne.n	80101c6 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80100dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100e0:	2b04      	cmp	r3, #4
 80100e2:	bf28      	it	cs
 80100e4:	2304      	movcs	r3, #4
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80100ea:	8bfb      	ldrh	r3, [r7, #30]
 80100ec:	8aba      	ldrh	r2, [r7, #20]
 80100ee:	f107 0108 	add.w	r1, r7, #8
 80100f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100f4:	f7f7 fcb0 	bl	8007a58 <pbuf_copy_partial>
 80100f8:	4603      	mov	r3, r0
 80100fa:	461a      	mov	r2, r3
 80100fc:	8abb      	ldrh	r3, [r7, #20]
 80100fe:	4293      	cmp	r3, r2
 8010100:	d002      	beq.n	8010108 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010102:	f06f 0301 	mvn.w	r3, #1
 8010106:	e0c8      	b.n	801029a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801010c:	2b04      	cmp	r3, #4
 801010e:	d933      	bls.n	8010178 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010114:	f003 0303 	and.w	r3, r3, #3
 8010118:	b2db      	uxtb	r3, r3
 801011a:	2b00      	cmp	r3, #0
 801011c:	d009      	beq.n	8010132 <dhcp_parse_reply+0x412>
 801011e:	4b61      	ldr	r3, [pc, #388]	@ (80102a4 <dhcp_parse_reply+0x584>)
 8010120:	f240 6281 	movw	r2, #1665	@ 0x681
 8010124:	4964      	ldr	r1, [pc, #400]	@ (80102b8 <dhcp_parse_reply+0x598>)
 8010126:	4861      	ldr	r0, [pc, #388]	@ (80102ac <dhcp_parse_reply+0x58c>)
 8010128:	f003 fe90 	bl	8013e4c <iprintf>
 801012c:	f06f 0305 	mvn.w	r3, #5
 8010130:	e0b3      	b.n	801029a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010132:	4a60      	ldr	r2, [pc, #384]	@ (80102b4 <dhcp_parse_reply+0x594>)
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	4413      	add	r3, r2
 8010138:	2201      	movs	r2, #1
 801013a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	4618      	mov	r0, r3
 8010140:	f7f5 ff18 	bl	8005f74 <lwip_htonl>
 8010144:	4602      	mov	r2, r0
 8010146:	495d      	ldr	r1, [pc, #372]	@ (80102bc <dhcp_parse_reply+0x59c>)
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801014e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010152:	3b04      	subs	r3, #4
 8010154:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010158:	8bfb      	ldrh	r3, [r7, #30]
 801015a:	3304      	adds	r3, #4
 801015c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801015e:	8a7a      	ldrh	r2, [r7, #18]
 8010160:	8bfb      	ldrh	r3, [r7, #30]
 8010162:	429a      	cmp	r2, r3
 8010164:	d202      	bcs.n	801016c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8010166:	f06f 0301 	mvn.w	r3, #1
 801016a:	e096      	b.n	801029a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801016c:	8a7b      	ldrh	r3, [r7, #18]
 801016e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	3301      	adds	r3, #1
 8010174:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010176:	e79e      	b.n	80100b6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8010178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801017c:	2b04      	cmp	r3, #4
 801017e:	d106      	bne.n	801018e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	4618      	mov	r0, r3
 8010184:	f7f5 fef6 	bl	8005f74 <lwip_htonl>
 8010188:	4603      	mov	r3, r0
 801018a:	60bb      	str	r3, [r7, #8]
 801018c:	e011      	b.n	80101b2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801018e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010192:	2b01      	cmp	r3, #1
 8010194:	d009      	beq.n	80101aa <dhcp_parse_reply+0x48a>
 8010196:	4b43      	ldr	r3, [pc, #268]	@ (80102a4 <dhcp_parse_reply+0x584>)
 8010198:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801019c:	4948      	ldr	r1, [pc, #288]	@ (80102c0 <dhcp_parse_reply+0x5a0>)
 801019e:	4843      	ldr	r0, [pc, #268]	@ (80102ac <dhcp_parse_reply+0x58c>)
 80101a0:	f003 fe54 	bl	8013e4c <iprintf>
 80101a4:	f06f 0305 	mvn.w	r3, #5
 80101a8:	e077      	b.n	801029a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80101aa:	f107 0308 	add.w	r3, r7, #8
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80101b2:	4a40      	ldr	r2, [pc, #256]	@ (80102b4 <dhcp_parse_reply+0x594>)
 80101b4:	6a3b      	ldr	r3, [r7, #32]
 80101b6:	4413      	add	r3, r2
 80101b8:	2201      	movs	r2, #1
 80101ba:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	493f      	ldr	r1, [pc, #252]	@ (80102bc <dhcp_parse_reply+0x59c>)
 80101c0:	6a3b      	ldr	r3, [r7, #32]
 80101c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80101c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c8:	895b      	ldrh	r3, [r3, #10]
 80101ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d324      	bcc.n	801021a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80101d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d2:	895b      	ldrh	r3, [r3, #10]
 80101d4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80101da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101dc:	895b      	ldrh	r3, [r3, #10]
 80101de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80101e4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101e6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d213      	bcs.n	8010214 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80101ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80101f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d109      	bne.n	801020c <dhcp_parse_reply+0x4ec>
 80101f8:	4b2a      	ldr	r3, [pc, #168]	@ (80102a4 <dhcp_parse_reply+0x584>)
 80101fa:	f240 629d 	movw	r2, #1693	@ 0x69d
 80101fe:	4931      	ldr	r1, [pc, #196]	@ (80102c4 <dhcp_parse_reply+0x5a4>)
 8010200:	482a      	ldr	r0, [pc, #168]	@ (80102ac <dhcp_parse_reply+0x58c>)
 8010202:	f003 fe23 	bl	8013e4c <iprintf>
 8010206:	f06f 0305 	mvn.w	r3, #5
 801020a:	e046      	b.n	801029a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801020c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010212:	e002      	b.n	801021a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010214:	f06f 0301 	mvn.w	r3, #1
 8010218:	e03f      	b.n	801029a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801021a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00a      	beq.n	8010236 <dhcp_parse_reply+0x516>
 8010220:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010222:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8010224:	429a      	cmp	r2, r3
 8010226:	d206      	bcs.n	8010236 <dhcp_parse_reply+0x516>
 8010228:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801022a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801022c:	4413      	add	r3, r2
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	2bff      	cmp	r3, #255	@ 0xff
 8010232:	f47f adb8 	bne.w	800fda6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8010236:	4b1f      	ldr	r3, [pc, #124]	@ (80102b4 <dhcp_parse_reply+0x594>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d018      	beq.n	8010270 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801023e:	4b1f      	ldr	r3, [pc, #124]	@ (80102bc <dhcp_parse_reply+0x59c>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010244:	4b1b      	ldr	r3, [pc, #108]	@ (80102b4 <dhcp_parse_reply+0x594>)
 8010246:	2200      	movs	r2, #0
 8010248:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b01      	cmp	r3, #1
 801024e:	d102      	bne.n	8010256 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010250:	2301      	movs	r3, #1
 8010252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010254:	e00c      	b.n	8010270 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2b02      	cmp	r3, #2
 801025a:	d102      	bne.n	8010262 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801025c:	2301      	movs	r3, #1
 801025e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010260:	e006      	b.n	8010270 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b03      	cmp	r3, #3
 8010266:	d103      	bne.n	8010270 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8010268:	2301      	movs	r3, #1
 801026a:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801026c:	2301      	movs	r3, #1
 801026e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010272:	2b00      	cmp	r3, #0
 8010274:	d006      	beq.n	8010284 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8010276:	2300      	movs	r3, #0
 8010278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801027a:	236c      	movs	r3, #108	@ 0x6c
 801027c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801027e:	23ec      	movs	r3, #236	@ 0xec
 8010280:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010282:	e56a      	b.n	800fd5a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010286:	2b00      	cmp	r3, #0
 8010288:	d006      	beq.n	8010298 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801028e:	232c      	movs	r3, #44	@ 0x2c
 8010290:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010292:	236c      	movs	r3, #108	@ 0x6c
 8010294:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8010296:	e560      	b.n	800fd5a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3740      	adds	r7, #64	@ 0x40
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	0801a040 	.word	0x0801a040
 80102a8:	0801a2c8 	.word	0x0801a2c8
 80102ac:	0801a0a0 	.word	0x0801a0a0
 80102b0:	0801a30c 	.word	0x0801a30c
 80102b4:	20008054 	.word	0x20008054
 80102b8:	0801a320 	.word	0x0801a320
 80102bc:	20008034 	.word	0x20008034
 80102c0:	0801a338 	.word	0x0801a338
 80102c4:	0801a34c 	.word	0x0801a34c

080102c8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b08a      	sub	sp, #40	@ 0x28
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
 80102d4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80102d6:	4b60      	ldr	r3, [pc, #384]	@ (8010458 <dhcp_recv+0x190>)
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 809d 	beq.w	801042a <dhcp_recv+0x162>
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	791b      	ldrb	r3, [r3, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 8098 	beq.w	801042a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	895b      	ldrh	r3, [r3, #10]
 80102fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8010300:	f240 8095 	bls.w	801042e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b02      	cmp	r3, #2
 801030a:	f040 8092 	bne.w	8010432 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801030e:	2300      	movs	r3, #0
 8010310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010314:	e012      	b.n	801033c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801031a:	6a3a      	ldr	r2, [r7, #32]
 801031c:	4413      	add	r3, r2
 801031e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8010322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010326:	69b9      	ldr	r1, [r7, #24]
 8010328:	440b      	add	r3, r1
 801032a:	7f1b      	ldrb	r3, [r3, #28]
 801032c:	429a      	cmp	r2, r3
 801032e:	f040 8082 	bne.w	8010436 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010336:	3301      	adds	r3, #1
 8010338:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801033c:	6a3b      	ldr	r3, [r7, #32]
 801033e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010342:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010346:	429a      	cmp	r2, r3
 8010348:	d203      	bcs.n	8010352 <dhcp_recv+0x8a>
 801034a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801034e:	2b05      	cmp	r3, #5
 8010350:	d9e1      	bls.n	8010316 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	4618      	mov	r0, r3
 8010358:	f7f5 fe0c 	bl	8005f74 <lwip_htonl>
 801035c:	4602      	mov	r2, r0
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	429a      	cmp	r2, r3
 8010364:	d169      	bne.n	801043a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8010366:	69f9      	ldr	r1, [r7, #28]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff fcd9 	bl	800fd20 <dhcp_parse_reply>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d164      	bne.n	801043e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010374:	4b39      	ldr	r3, [pc, #228]	@ (801045c <dhcp_recv+0x194>)
 8010376:	785b      	ldrb	r3, [r3, #1]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d062      	beq.n	8010442 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010382:	4b37      	ldr	r3, [pc, #220]	@ (8010460 <dhcp_recv+0x198>)
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8010388:	7cfb      	ldrb	r3, [r7, #19]
 801038a:	2b05      	cmp	r3, #5
 801038c:	d12a      	bne.n	80103e4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	795b      	ldrb	r3, [r3, #5]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d112      	bne.n	80103bc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8010396:	6979      	ldr	r1, [r7, #20]
 8010398:	6a38      	ldr	r0, [r7, #32]
 801039a:	f7fe fe1d 	bl	800efd8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801039e:	6a3b      	ldr	r3, [r7, #32]
 80103a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80103a4:	f003 0308 	and.w	r3, r3, #8
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d003      	beq.n	80103b4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80103ac:	6a38      	ldr	r0, [r7, #32]
 80103ae:	f7fe fb8b 	bl	800eac8 <dhcp_check>
 80103b2:	e049      	b.n	8010448 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80103b4:	6a38      	ldr	r0, [r7, #32]
 80103b6:	f7ff f86d 	bl	800f494 <dhcp_bind>
 80103ba:	e045      	b.n	8010448 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	795b      	ldrb	r3, [r3, #5]
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	d007      	beq.n	80103d4 <dhcp_recv+0x10c>
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	795b      	ldrb	r3, [r3, #5]
 80103c8:	2b04      	cmp	r3, #4
 80103ca:	d003      	beq.n	80103d4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80103d0:	2b05      	cmp	r3, #5
 80103d2:	d139      	bne.n	8010448 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80103d4:	6979      	ldr	r1, [r7, #20]
 80103d6:	6a38      	ldr	r0, [r7, #32]
 80103d8:	f7fe fdfe 	bl	800efd8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80103dc:	6a38      	ldr	r0, [r7, #32]
 80103de:	f7ff f859 	bl	800f494 <dhcp_bind>
 80103e2:	e031      	b.n	8010448 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80103e4:	7cfb      	ldrb	r3, [r7, #19]
 80103e6:	2b06      	cmp	r3, #6
 80103e8:	d113      	bne.n	8010412 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d00b      	beq.n	801040a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	795b      	ldrb	r3, [r3, #5]
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d007      	beq.n	801040a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103fe:	2b04      	cmp	r3, #4
 8010400:	d003      	beq.n	801040a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	795b      	ldrb	r3, [r3, #5]
 8010406:	2b05      	cmp	r3, #5
 8010408:	d103      	bne.n	8010412 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801040a:	6a38      	ldr	r0, [r7, #32]
 801040c:	f7fe fb42 	bl	800ea94 <dhcp_handle_nak>
 8010410:	e01a      	b.n	8010448 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010412:	7cfb      	ldrb	r3, [r7, #19]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d116      	bne.n	8010446 <dhcp_recv+0x17e>
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	795b      	ldrb	r3, [r3, #5]
 801041c:	2b06      	cmp	r3, #6
 801041e:	d112      	bne.n	8010446 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010420:	6979      	ldr	r1, [r7, #20]
 8010422:	6a38      	ldr	r0, [r7, #32]
 8010424:	f7fe fb84 	bl	800eb30 <dhcp_handle_offer>
 8010428:	e00e      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801042a:	bf00      	nop
 801042c:	e00c      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801042e:	bf00      	nop
 8010430:	e00a      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010432:	bf00      	nop
 8010434:	e008      	b.n	8010448 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010436:	bf00      	nop
 8010438:	e006      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801043a:	bf00      	nop
 801043c:	e004      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801043e:	bf00      	nop
 8010440:	e002      	b.n	8010448 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010442:	bf00      	nop
 8010444:	e000      	b.n	8010448 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010446:	bf00      	nop
  pbuf_free(p);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7f7 f90b 	bl	8007664 <pbuf_free>
}
 801044e:	bf00      	nop
 8010450:	3728      	adds	r7, #40	@ 0x28
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20004f98 	.word	0x20004f98
 801045c:	20008054 	.word	0x20008054
 8010460:	20008034 	.word	0x20008034

08010464 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	60f8      	str	r0, [r7, #12]
 801046c:	60b9      	str	r1, [r7, #8]
 801046e:	603b      	str	r3, [r7, #0]
 8010470:	4613      	mov	r3, r2
 8010472:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d108      	bne.n	801048c <dhcp_create_msg+0x28>
 801047a:	4b5f      	ldr	r3, [pc, #380]	@ (80105f8 <dhcp_create_msg+0x194>)
 801047c:	f240 7269 	movw	r2, #1897	@ 0x769
 8010480:	495e      	ldr	r1, [pc, #376]	@ (80105fc <dhcp_create_msg+0x198>)
 8010482:	485f      	ldr	r0, [pc, #380]	@ (8010600 <dhcp_create_msg+0x19c>)
 8010484:	f003 fce2 	bl	8013e4c <iprintf>
 8010488:	2300      	movs	r3, #0
 801048a:	e0b1      	b.n	80105f0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d108      	bne.n	80104a4 <dhcp_create_msg+0x40>
 8010492:	4b59      	ldr	r3, [pc, #356]	@ (80105f8 <dhcp_create_msg+0x194>)
 8010494:	f240 726a 	movw	r2, #1898	@ 0x76a
 8010498:	495a      	ldr	r1, [pc, #360]	@ (8010604 <dhcp_create_msg+0x1a0>)
 801049a:	4859      	ldr	r0, [pc, #356]	@ (8010600 <dhcp_create_msg+0x19c>)
 801049c:	f003 fcd6 	bl	8013e4c <iprintf>
 80104a0:	2300      	movs	r3, #0
 80104a2:	e0a5      	b.n	80105f0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80104a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80104a8:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80104ac:	2036      	movs	r0, #54	@ 0x36
 80104ae:	f7f6 fdf5 	bl	800709c <pbuf_alloc>
 80104b2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d101      	bne.n	80104be <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e098      	b.n	80105f0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	895b      	ldrh	r3, [r3, #10]
 80104c2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80104c6:	d206      	bcs.n	80104d6 <dhcp_create_msg+0x72>
 80104c8:	4b4b      	ldr	r3, [pc, #300]	@ (80105f8 <dhcp_create_msg+0x194>)
 80104ca:	f240 7271 	movw	r2, #1905	@ 0x771
 80104ce:	494e      	ldr	r1, [pc, #312]	@ (8010608 <dhcp_create_msg+0x1a4>)
 80104d0:	484b      	ldr	r0, [pc, #300]	@ (8010600 <dhcp_create_msg+0x19c>)
 80104d2:	f003 fcbb 	bl	8013e4c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	2b03      	cmp	r3, #3
 80104da:	d103      	bne.n	80104e4 <dhcp_create_msg+0x80>
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	795b      	ldrb	r3, [r3, #5]
 80104e0:	2b03      	cmp	r3, #3
 80104e2:	d10d      	bne.n	8010500 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	799b      	ldrb	r3, [r3, #6]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d105      	bne.n	80104f8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80104ec:	f002 fcf6 	bl	8012edc <rand>
 80104f0:	4603      	mov	r3, r0
 80104f2:	461a      	mov	r2, r3
 80104f4:	4b45      	ldr	r3, [pc, #276]	@ (801060c <dhcp_create_msg+0x1a8>)
 80104f6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80104f8:	4b44      	ldr	r3, [pc, #272]	@ (801060c <dhcp_create_msg+0x1a8>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010506:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801050a:	2100      	movs	r1, #0
 801050c:	6978      	ldr	r0, [r7, #20]
 801050e:	f003 fd3e 	bl	8013f8e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	2201      	movs	r2, #1
 8010516:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	2201      	movs	r2, #1
 801051c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4618      	mov	r0, r3
 801052e:	f7f5 fd21 	bl	8005f74 <lwip_htonl>
 8010532:	4602      	mov	r2, r0
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010538:	79fb      	ldrb	r3, [r7, #7]
 801053a:	2b08      	cmp	r3, #8
 801053c:	d010      	beq.n	8010560 <dhcp_create_msg+0xfc>
 801053e:	79fb      	ldrb	r3, [r7, #7]
 8010540:	2b04      	cmp	r3, #4
 8010542:	d00d      	beq.n	8010560 <dhcp_create_msg+0xfc>
 8010544:	79fb      	ldrb	r3, [r7, #7]
 8010546:	2b07      	cmp	r3, #7
 8010548:	d00a      	beq.n	8010560 <dhcp_create_msg+0xfc>
 801054a:	79fb      	ldrb	r3, [r7, #7]
 801054c:	2b03      	cmp	r3, #3
 801054e:	d10c      	bne.n	801056a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010554:	2b05      	cmp	r3, #5
 8010556:	d003      	beq.n	8010560 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	795b      	ldrb	r3, [r3, #5]
 801055c:	2b04      	cmp	r3, #4
 801055e:	d104      	bne.n	801056a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	3304      	adds	r3, #4
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801056a:	2300      	movs	r3, #0
 801056c:	83fb      	strh	r3, [r7, #30]
 801056e:	e00c      	b.n	801058a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010570:	8bfa      	ldrh	r2, [r7, #30]
 8010572:	8bfb      	ldrh	r3, [r7, #30]
 8010574:	68f9      	ldr	r1, [r7, #12]
 8010576:	440a      	add	r2, r1
 8010578:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	4413      	add	r3, r2
 8010580:	460a      	mov	r2, r1
 8010582:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010584:	8bfb      	ldrh	r3, [r7, #30]
 8010586:	3301      	adds	r3, #1
 8010588:	83fb      	strh	r3, [r7, #30]
 801058a:	8bfb      	ldrh	r3, [r7, #30]
 801058c:	2b05      	cmp	r3, #5
 801058e:	d9ef      	bls.n	8010570 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	2200      	movs	r2, #0
 8010594:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8010598:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801059c:	2200      	movs	r2, #0
 801059e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80105a2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80105a6:	2200      	movs	r2, #0
 80105a8:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80105ac:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80105b0:	2200      	movs	r2, #0
 80105b2:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80105b6:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105c0:	2301      	movs	r3, #1
 80105c2:	2235      	movs	r2, #53	@ 0x35
 80105c4:	2000      	movs	r0, #0
 80105c6:	f7ff fadb 	bl	800fb80 <dhcp_option>
 80105ca:	4603      	mov	r3, r0
 80105cc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105d4:	79fa      	ldrb	r2, [r7, #7]
 80105d6:	8a7b      	ldrh	r3, [r7, #18]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff fb05 	bl	800fbe8 <dhcp_option_byte>
 80105de:	4603      	mov	r3, r0
 80105e0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d002      	beq.n	80105ee <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	8a7a      	ldrh	r2, [r7, #18]
 80105ec:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80105ee:	69bb      	ldr	r3, [r7, #24]
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3720      	adds	r7, #32
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	0801a040 	.word	0x0801a040
 80105fc:	0801a360 	.word	0x0801a360
 8010600:	0801a0a0 	.word	0x0801a0a0
 8010604:	0801a380 	.word	0x0801a380
 8010608:	0801a3a0 	.word	0x0801a3a0
 801060c:	20008064 	.word	0x20008064

08010610 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801061e:	89fb      	ldrh	r3, [r7, #14]
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	81fa      	strh	r2, [r7, #14]
 8010624:	461a      	mov	r2, r3
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	4413      	add	r3, r2
 801062a:	22ff      	movs	r2, #255	@ 0xff
 801062c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801062e:	e007      	b.n	8010640 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010630:	89fb      	ldrh	r3, [r7, #14]
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	81fa      	strh	r2, [r7, #14]
 8010636:	461a      	mov	r2, r3
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	4413      	add	r3, r2
 801063c:	2200      	movs	r2, #0
 801063e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010640:	89fb      	ldrh	r3, [r7, #14]
 8010642:	2b43      	cmp	r3, #67	@ 0x43
 8010644:	d904      	bls.n	8010650 <dhcp_option_trailer+0x40>
 8010646:	89fb      	ldrh	r3, [r7, #14]
 8010648:	f003 0303 	and.w	r3, r3, #3
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <dhcp_option_trailer+0x46>
 8010650:	89fb      	ldrh	r3, [r7, #14]
 8010652:	2b43      	cmp	r3, #67	@ 0x43
 8010654:	d9ec      	bls.n	8010630 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010656:	89fb      	ldrh	r3, [r7, #14]
 8010658:	33f0      	adds	r3, #240	@ 0xf0
 801065a:	b29b      	uxth	r3, r3
 801065c:	4619      	mov	r1, r3
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7f6 fe7a 	bl	8007358 <pbuf_realloc>
}
 8010664:	bf00      	nop
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d017      	beq.n	80106aa <dhcp_supplied_address+0x3e>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801067e:	2b00      	cmp	r3, #0
 8010680:	d013      	beq.n	80106aa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010686:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	795b      	ldrb	r3, [r3, #5]
 801068c:	2b0a      	cmp	r3, #10
 801068e:	d007      	beq.n	80106a0 <dhcp_supplied_address+0x34>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	795b      	ldrb	r3, [r3, #5]
 8010694:	2b05      	cmp	r3, #5
 8010696:	d003      	beq.n	80106a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801069c:	2b04      	cmp	r3, #4
 801069e:	d101      	bne.n	80106a4 <dhcp_supplied_address+0x38>
 80106a0:	2301      	movs	r3, #1
 80106a2:	e000      	b.n	80106a6 <dhcp_supplied_address+0x3a>
 80106a4:	2300      	movs	r3, #0
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	e000      	b.n	80106ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3714      	adds	r7, #20
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80106c0:	4915      	ldr	r1, [pc, #84]	@ (8010718 <etharp_free_entry+0x60>)
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	4613      	mov	r3, r2
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	4413      	add	r3, r2
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	440b      	add	r3, r1
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d013      	beq.n	80106fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80106d4:	4910      	ldr	r1, [pc, #64]	@ (8010718 <etharp_free_entry+0x60>)
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	4613      	mov	r3, r2
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	4413      	add	r3, r2
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	440b      	add	r3, r1
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f6 ffbd 	bl	8007664 <pbuf_free>
    arp_table[i].q = NULL;
 80106ea:	490b      	ldr	r1, [pc, #44]	@ (8010718 <etharp_free_entry+0x60>)
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	4613      	mov	r3, r2
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	440b      	add	r3, r1
 80106f8:	2200      	movs	r2, #0
 80106fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80106fc:	4906      	ldr	r1, [pc, #24]	@ (8010718 <etharp_free_entry+0x60>)
 80106fe:	687a      	ldr	r2, [r7, #4]
 8010700:	4613      	mov	r3, r2
 8010702:	005b      	lsls	r3, r3, #1
 8010704:	4413      	add	r3, r2
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	440b      	add	r3, r1
 801070a:	3314      	adds	r3, #20
 801070c:	2200      	movs	r2, #0
 801070e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010710:	bf00      	nop
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	20008068 	.word	0x20008068

0801071c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010722:	2300      	movs	r3, #0
 8010724:	607b      	str	r3, [r7, #4]
 8010726:	e096      	b.n	8010856 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010728:	494f      	ldr	r1, [pc, #316]	@ (8010868 <etharp_tmr+0x14c>)
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	4613      	mov	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	440b      	add	r3, r1
 8010736:	3314      	adds	r3, #20
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	2b00      	cmp	r3, #0
 8010740:	f000 8086 	beq.w	8010850 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010744:	4948      	ldr	r1, [pc, #288]	@ (8010868 <etharp_tmr+0x14c>)
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	440b      	add	r3, r1
 8010752:	3312      	adds	r3, #18
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	3301      	adds	r3, #1
 8010758:	b298      	uxth	r0, r3
 801075a:	4943      	ldr	r1, [pc, #268]	@ (8010868 <etharp_tmr+0x14c>)
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	4613      	mov	r3, r2
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	4413      	add	r3, r2
 8010764:	00db      	lsls	r3, r3, #3
 8010766:	440b      	add	r3, r1
 8010768:	3312      	adds	r3, #18
 801076a:	4602      	mov	r2, r0
 801076c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801076e:	493e      	ldr	r1, [pc, #248]	@ (8010868 <etharp_tmr+0x14c>)
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4613      	mov	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4413      	add	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	440b      	add	r3, r1
 801077c:	3312      	adds	r3, #18
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010784:	d215      	bcs.n	80107b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010786:	4938      	ldr	r1, [pc, #224]	@ (8010868 <etharp_tmr+0x14c>)
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	4613      	mov	r3, r2
 801078c:	005b      	lsls	r3, r3, #1
 801078e:	4413      	add	r3, r2
 8010790:	00db      	lsls	r3, r3, #3
 8010792:	440b      	add	r3, r1
 8010794:	3314      	adds	r3, #20
 8010796:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010798:	2b01      	cmp	r3, #1
 801079a:	d10e      	bne.n	80107ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801079c:	4932      	ldr	r1, [pc, #200]	@ (8010868 <etharp_tmr+0x14c>)
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	440b      	add	r3, r1
 80107aa:	3312      	adds	r3, #18
 80107ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	d903      	bls.n	80107ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7ff ff80 	bl	80106b8 <etharp_free_entry>
 80107b8:	e04a      	b.n	8010850 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80107ba:	492b      	ldr	r1, [pc, #172]	@ (8010868 <etharp_tmr+0x14c>)
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	4613      	mov	r3, r2
 80107c0:	005b      	lsls	r3, r3, #1
 80107c2:	4413      	add	r3, r2
 80107c4:	00db      	lsls	r3, r3, #3
 80107c6:	440b      	add	r3, r1
 80107c8:	3314      	adds	r3, #20
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	2b03      	cmp	r3, #3
 80107ce:	d10a      	bne.n	80107e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80107d0:	4925      	ldr	r1, [pc, #148]	@ (8010868 <etharp_tmr+0x14c>)
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	4613      	mov	r3, r2
 80107d6:	005b      	lsls	r3, r3, #1
 80107d8:	4413      	add	r3, r2
 80107da:	00db      	lsls	r3, r3, #3
 80107dc:	440b      	add	r3, r1
 80107de:	3314      	adds	r3, #20
 80107e0:	2204      	movs	r2, #4
 80107e2:	701a      	strb	r2, [r3, #0]
 80107e4:	e034      	b.n	8010850 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80107e6:	4920      	ldr	r1, [pc, #128]	@ (8010868 <etharp_tmr+0x14c>)
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	4613      	mov	r3, r2
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	4413      	add	r3, r2
 80107f0:	00db      	lsls	r3, r3, #3
 80107f2:	440b      	add	r3, r1
 80107f4:	3314      	adds	r3, #20
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	2b04      	cmp	r3, #4
 80107fa:	d10a      	bne.n	8010812 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80107fc:	491a      	ldr	r1, [pc, #104]	@ (8010868 <etharp_tmr+0x14c>)
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	4613      	mov	r3, r2
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	4413      	add	r3, r2
 8010806:	00db      	lsls	r3, r3, #3
 8010808:	440b      	add	r3, r1
 801080a:	3314      	adds	r3, #20
 801080c:	2202      	movs	r2, #2
 801080e:	701a      	strb	r2, [r3, #0]
 8010810:	e01e      	b.n	8010850 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010812:	4915      	ldr	r1, [pc, #84]	@ (8010868 <etharp_tmr+0x14c>)
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	4613      	mov	r3, r2
 8010818:	005b      	lsls	r3, r3, #1
 801081a:	4413      	add	r3, r2
 801081c:	00db      	lsls	r3, r3, #3
 801081e:	440b      	add	r3, r1
 8010820:	3314      	adds	r3, #20
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d113      	bne.n	8010850 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010828:	490f      	ldr	r1, [pc, #60]	@ (8010868 <etharp_tmr+0x14c>)
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	4613      	mov	r3, r2
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	00db      	lsls	r3, r3, #3
 8010834:	440b      	add	r3, r1
 8010836:	3308      	adds	r3, #8
 8010838:	6818      	ldr	r0, [r3, #0]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	4613      	mov	r3, r2
 801083e:	005b      	lsls	r3, r3, #1
 8010840:	4413      	add	r3, r2
 8010842:	00db      	lsls	r3, r3, #3
 8010844:	4a08      	ldr	r2, [pc, #32]	@ (8010868 <etharp_tmr+0x14c>)
 8010846:	4413      	add	r3, r2
 8010848:	3304      	adds	r3, #4
 801084a:	4619      	mov	r1, r3
 801084c:	f000 fe72 	bl	8011534 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	3301      	adds	r3, #1
 8010854:	607b      	str	r3, [r7, #4]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2b09      	cmp	r3, #9
 801085a:	f77f af65 	ble.w	8010728 <etharp_tmr+0xc>
      }
    }
  }
}
 801085e:	bf00      	nop
 8010860:	bf00      	nop
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20008068 	.word	0x20008068

0801086c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b08a      	sub	sp, #40	@ 0x28
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	460b      	mov	r3, r1
 8010876:	607a      	str	r2, [r7, #4]
 8010878:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801087a:	230a      	movs	r3, #10
 801087c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801087e:	230a      	movs	r3, #10
 8010880:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010882:	230a      	movs	r3, #10
 8010884:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801088a:	230a      	movs	r3, #10
 801088c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	83bb      	strh	r3, [r7, #28]
 8010892:	2300      	movs	r3, #0
 8010894:	837b      	strh	r3, [r7, #26]
 8010896:	2300      	movs	r3, #0
 8010898:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801089a:	2300      	movs	r3, #0
 801089c:	843b      	strh	r3, [r7, #32]
 801089e:	e0ae      	b.n	80109fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80108a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108a4:	49a6      	ldr	r1, [pc, #664]	@ (8010b40 <etharp_find_entry+0x2d4>)
 80108a6:	4613      	mov	r3, r2
 80108a8:	005b      	lsls	r3, r3, #1
 80108aa:	4413      	add	r3, r2
 80108ac:	00db      	lsls	r3, r3, #3
 80108ae:	440b      	add	r3, r1
 80108b0:	3314      	adds	r3, #20
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80108b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80108ba:	2b0a      	cmp	r3, #10
 80108bc:	d105      	bne.n	80108ca <etharp_find_entry+0x5e>
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d102      	bne.n	80108ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80108c4:	8c3b      	ldrh	r3, [r7, #32]
 80108c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80108c8:	e095      	b.n	80109f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80108ca:	7dfb      	ldrb	r3, [r7, #23]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f000 8092 	beq.w	80109f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80108d2:	7dfb      	ldrb	r3, [r7, #23]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d009      	beq.n	80108ec <etharp_find_entry+0x80>
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d806      	bhi.n	80108ec <etharp_find_entry+0x80>
 80108de:	4b99      	ldr	r3, [pc, #612]	@ (8010b44 <etharp_find_entry+0x2d8>)
 80108e0:	f240 1223 	movw	r2, #291	@ 0x123
 80108e4:	4998      	ldr	r1, [pc, #608]	@ (8010b48 <etharp_find_entry+0x2dc>)
 80108e6:	4899      	ldr	r0, [pc, #612]	@ (8010b4c <etharp_find_entry+0x2e0>)
 80108e8:	f003 fab0 	bl	8013e4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d020      	beq.n	8010934 <etharp_find_entry+0xc8>
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	6819      	ldr	r1, [r3, #0]
 80108f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108fa:	4891      	ldr	r0, [pc, #580]	@ (8010b40 <etharp_find_entry+0x2d4>)
 80108fc:	4613      	mov	r3, r2
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	4413      	add	r3, r2
 8010902:	00db      	lsls	r3, r3, #3
 8010904:	4403      	add	r3, r0
 8010906:	3304      	adds	r3, #4
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4299      	cmp	r1, r3
 801090c:	d112      	bne.n	8010934 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00c      	beq.n	801092e <etharp_find_entry+0xc2>
 8010914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010918:	4989      	ldr	r1, [pc, #548]	@ (8010b40 <etharp_find_entry+0x2d4>)
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	440b      	add	r3, r1
 8010924:	3308      	adds	r3, #8
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	429a      	cmp	r2, r3
 801092c:	d102      	bne.n	8010934 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801092e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010932:	e100      	b.n	8010b36 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010934:	7dfb      	ldrb	r3, [r7, #23]
 8010936:	2b01      	cmp	r3, #1
 8010938:	d140      	bne.n	80109bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801093a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801093e:	4980      	ldr	r1, [pc, #512]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010940:	4613      	mov	r3, r2
 8010942:	005b      	lsls	r3, r3, #1
 8010944:	4413      	add	r3, r2
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	440b      	add	r3, r1
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d01a      	beq.n	8010986 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010954:	497a      	ldr	r1, [pc, #488]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	00db      	lsls	r3, r3, #3
 801095e:	440b      	add	r3, r1
 8010960:	3312      	adds	r3, #18
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	8bba      	ldrh	r2, [r7, #28]
 8010966:	429a      	cmp	r2, r3
 8010968:	d845      	bhi.n	80109f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801096a:	8c3b      	ldrh	r3, [r7, #32]
 801096c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801096e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010972:	4973      	ldr	r1, [pc, #460]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010974:	4613      	mov	r3, r2
 8010976:	005b      	lsls	r3, r3, #1
 8010978:	4413      	add	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	440b      	add	r3, r1
 801097e:	3312      	adds	r3, #18
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	83bb      	strh	r3, [r7, #28]
 8010984:	e037      	b.n	80109f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801098a:	496d      	ldr	r1, [pc, #436]	@ (8010b40 <etharp_find_entry+0x2d4>)
 801098c:	4613      	mov	r3, r2
 801098e:	005b      	lsls	r3, r3, #1
 8010990:	4413      	add	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	440b      	add	r3, r1
 8010996:	3312      	adds	r3, #18
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	8b7a      	ldrh	r2, [r7, #26]
 801099c:	429a      	cmp	r2, r3
 801099e:	d82a      	bhi.n	80109f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80109a0:	8c3b      	ldrh	r3, [r7, #32]
 80109a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80109a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109a8:	4965      	ldr	r1, [pc, #404]	@ (8010b40 <etharp_find_entry+0x2d4>)
 80109aa:	4613      	mov	r3, r2
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	4413      	add	r3, r2
 80109b0:	00db      	lsls	r3, r3, #3
 80109b2:	440b      	add	r3, r1
 80109b4:	3312      	adds	r3, #18
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	837b      	strh	r3, [r7, #26]
 80109ba:	e01c      	b.n	80109f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d919      	bls.n	80109f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80109c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109c6:	495e      	ldr	r1, [pc, #376]	@ (8010b40 <etharp_find_entry+0x2d4>)
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	440b      	add	r3, r1
 80109d2:	3312      	adds	r3, #18
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	8b3a      	ldrh	r2, [r7, #24]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d80c      	bhi.n	80109f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80109dc:	8c3b      	ldrh	r3, [r7, #32]
 80109de:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80109e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109e4:	4956      	ldr	r1, [pc, #344]	@ (8010b40 <etharp_find_entry+0x2d4>)
 80109e6:	4613      	mov	r3, r2
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	4413      	add	r3, r2
 80109ec:	00db      	lsls	r3, r3, #3
 80109ee:	440b      	add	r3, r1
 80109f0:	3312      	adds	r3, #18
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109f6:	8c3b      	ldrh	r3, [r7, #32]
 80109f8:	3301      	adds	r3, #1
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	843b      	strh	r3, [r7, #32]
 80109fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a02:	2b09      	cmp	r3, #9
 8010a04:	f77f af4c 	ble.w	80108a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010a08:	7afb      	ldrb	r3, [r7, #11]
 8010a0a:	f003 0302 	and.w	r3, r3, #2
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d108      	bne.n	8010a24 <etharp_find_entry+0x1b8>
 8010a12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010a16:	2b0a      	cmp	r3, #10
 8010a18:	d107      	bne.n	8010a2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010a1a:	7afb      	ldrb	r3, [r7, #11]
 8010a1c:	f003 0301 	and.w	r3, r3, #1
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d102      	bne.n	8010a2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010a24:	f04f 33ff 	mov.w	r3, #4294967295
 8010a28:	e085      	b.n	8010b36 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010a2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010a2e:	2b09      	cmp	r3, #9
 8010a30:	dc02      	bgt.n	8010a38 <etharp_find_entry+0x1cc>
    i = empty;
 8010a32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a34:	843b      	strh	r3, [r7, #32]
 8010a36:	e039      	b.n	8010aac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010a38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010a3c:	2b09      	cmp	r3, #9
 8010a3e:	dc14      	bgt.n	8010a6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010a44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a48:	493d      	ldr	r1, [pc, #244]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	005b      	lsls	r3, r3, #1
 8010a4e:	4413      	add	r3, r2
 8010a50:	00db      	lsls	r3, r3, #3
 8010a52:	440b      	add	r3, r1
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d018      	beq.n	8010a8c <etharp_find_entry+0x220>
 8010a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8010b44 <etharp_find_entry+0x2d8>)
 8010a5c:	f240 126d 	movw	r2, #365	@ 0x16d
 8010a60:	493b      	ldr	r1, [pc, #236]	@ (8010b50 <etharp_find_entry+0x2e4>)
 8010a62:	483a      	ldr	r0, [pc, #232]	@ (8010b4c <etharp_find_entry+0x2e0>)
 8010a64:	f003 f9f2 	bl	8013e4c <iprintf>
 8010a68:	e010      	b.n	8010a8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010a6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010a6e:	2b09      	cmp	r3, #9
 8010a70:	dc02      	bgt.n	8010a78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010a72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a74:	843b      	strh	r3, [r7, #32]
 8010a76:	e009      	b.n	8010a8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010a78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010a7c:	2b09      	cmp	r3, #9
 8010a7e:	dc02      	bgt.n	8010a86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010a80:	8bfb      	ldrh	r3, [r7, #30]
 8010a82:	843b      	strh	r3, [r7, #32]
 8010a84:	e002      	b.n	8010a8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010a86:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8a:	e054      	b.n	8010b36 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a90:	2b09      	cmp	r3, #9
 8010a92:	dd06      	ble.n	8010aa2 <etharp_find_entry+0x236>
 8010a94:	4b2b      	ldr	r3, [pc, #172]	@ (8010b44 <etharp_find_entry+0x2d8>)
 8010a96:	f240 127f 	movw	r2, #383	@ 0x17f
 8010a9a:	492e      	ldr	r1, [pc, #184]	@ (8010b54 <etharp_find_entry+0x2e8>)
 8010a9c:	482b      	ldr	r0, [pc, #172]	@ (8010b4c <etharp_find_entry+0x2e0>)
 8010a9e:	f003 f9d5 	bl	8013e4c <iprintf>
    etharp_free_entry(i);
 8010aa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7ff fe06 	bl	80106b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010aac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ab0:	2b09      	cmp	r3, #9
 8010ab2:	dd06      	ble.n	8010ac2 <etharp_find_entry+0x256>
 8010ab4:	4b23      	ldr	r3, [pc, #140]	@ (8010b44 <etharp_find_entry+0x2d8>)
 8010ab6:	f240 1283 	movw	r2, #387	@ 0x183
 8010aba:	4926      	ldr	r1, [pc, #152]	@ (8010b54 <etharp_find_entry+0x2e8>)
 8010abc:	4823      	ldr	r0, [pc, #140]	@ (8010b4c <etharp_find_entry+0x2e0>)
 8010abe:	f003 f9c5 	bl	8013e4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ac6:	491e      	ldr	r1, [pc, #120]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010ac8:	4613      	mov	r3, r2
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	440b      	add	r3, r1
 8010ad2:	3314      	adds	r3, #20
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d006      	beq.n	8010ae8 <etharp_find_entry+0x27c>
 8010ada:	4b1a      	ldr	r3, [pc, #104]	@ (8010b44 <etharp_find_entry+0x2d8>)
 8010adc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010ae0:	491d      	ldr	r1, [pc, #116]	@ (8010b58 <etharp_find_entry+0x2ec>)
 8010ae2:	481a      	ldr	r0, [pc, #104]	@ (8010b4c <etharp_find_entry+0x2e0>)
 8010ae4:	f003 f9b2 	bl	8013e4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6819      	ldr	r1, [r3, #0]
 8010af6:	4812      	ldr	r0, [pc, #72]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010af8:	4613      	mov	r3, r2
 8010afa:	005b      	lsls	r3, r3, #1
 8010afc:	4413      	add	r3, r2
 8010afe:	00db      	lsls	r3, r3, #3
 8010b00:	4403      	add	r3, r0
 8010b02:	3304      	adds	r3, #4
 8010b04:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010b06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b0a:	490d      	ldr	r1, [pc, #52]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	005b      	lsls	r3, r3, #1
 8010b10:	4413      	add	r3, r2
 8010b12:	00db      	lsls	r3, r3, #3
 8010b14:	440b      	add	r3, r1
 8010b16:	3312      	adds	r3, #18
 8010b18:	2200      	movs	r2, #0
 8010b1a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010b1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b20:	4907      	ldr	r1, [pc, #28]	@ (8010b40 <etharp_find_entry+0x2d4>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	4413      	add	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3308      	adds	r3, #8
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010b32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3728      	adds	r7, #40	@ 0x28
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	20008068 	.word	0x20008068
 8010b44:	0801a3e0 	.word	0x0801a3e0
 8010b48:	0801a418 	.word	0x0801a418
 8010b4c:	0801a458 	.word	0x0801a458
 8010b50:	0801a480 	.word	0x0801a480
 8010b54:	0801a498 	.word	0x0801a498
 8010b58:	0801a4ac 	.word	0x0801a4ac

08010b5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b088      	sub	sp, #32
 8010b60:	af02      	add	r7, sp, #8
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b70:	2b06      	cmp	r3, #6
 8010b72:	d006      	beq.n	8010b82 <etharp_update_arp_entry+0x26>
 8010b74:	4b48      	ldr	r3, [pc, #288]	@ (8010c98 <etharp_update_arp_entry+0x13c>)
 8010b76:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8010b7a:	4948      	ldr	r1, [pc, #288]	@ (8010c9c <etharp_update_arp_entry+0x140>)
 8010b7c:	4848      	ldr	r0, [pc, #288]	@ (8010ca0 <etharp_update_arp_entry+0x144>)
 8010b7e:	f003 f965 	bl	8013e4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d012      	beq.n	8010bae <etharp_update_arp_entry+0x52>
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00e      	beq.n	8010bae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	68f9      	ldr	r1, [r7, #12]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f001 f920 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8010b9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d105      	bne.n	8010bae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010baa:	2be0      	cmp	r3, #224	@ 0xe0
 8010bac:	d102      	bne.n	8010bb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010bae:	f06f 030f 	mvn.w	r3, #15
 8010bb2:	e06c      	b.n	8010c8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010bb4:	78fb      	ldrb	r3, [r7, #3]
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	68b8      	ldr	r0, [r7, #8]
 8010bbc:	f7ff fe56 	bl	801086c <etharp_find_entry>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010bc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	da02      	bge.n	8010bd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010bcc:	8afb      	ldrh	r3, [r7, #22]
 8010bce:	b25b      	sxtb	r3, r3
 8010bd0:	e05d      	b.n	8010c8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010bd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bd6:	4933      	ldr	r1, [pc, #204]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010bd8:	4613      	mov	r3, r2
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	440b      	add	r3, r1
 8010be2:	3314      	adds	r3, #20
 8010be4:	2202      	movs	r2, #2
 8010be6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010be8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bec:	492d      	ldr	r1, [pc, #180]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010bee:	4613      	mov	r3, r2
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3308      	adds	r3, #8
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010bfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c02:	4613      	mov	r3, r2
 8010c04:	005b      	lsls	r3, r3, #1
 8010c06:	4413      	add	r3, r2
 8010c08:	00db      	lsls	r3, r3, #3
 8010c0a:	3308      	adds	r3, #8
 8010c0c:	4a25      	ldr	r2, [pc, #148]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010c0e:	4413      	add	r3, r2
 8010c10:	3304      	adds	r3, #4
 8010c12:	2206      	movs	r2, #6
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f003 fa4b 	bl	80140b2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010c1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c20:	4920      	ldr	r1, [pc, #128]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010c22:	4613      	mov	r3, r2
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	4413      	add	r3, r2
 8010c28:	00db      	lsls	r3, r3, #3
 8010c2a:	440b      	add	r3, r1
 8010c2c:	3312      	adds	r3, #18
 8010c2e:	2200      	movs	r2, #0
 8010c30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010c32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c36:	491b      	ldr	r1, [pc, #108]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010c38:	4613      	mov	r3, r2
 8010c3a:	005b      	lsls	r3, r3, #1
 8010c3c:	4413      	add	r3, r2
 8010c3e:	00db      	lsls	r3, r3, #3
 8010c40:	440b      	add	r3, r1
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d021      	beq.n	8010c8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010c48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c4c:	4915      	ldr	r1, [pc, #84]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010c4e:	4613      	mov	r3, r2
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	4413      	add	r3, r2
 8010c54:	00db      	lsls	r3, r3, #3
 8010c56:	440b      	add	r3, r1
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010c5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c60:	4910      	ldr	r1, [pc, #64]	@ (8010ca4 <etharp_update_arp_entry+0x148>)
 8010c62:	4613      	mov	r3, r2
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	4413      	add	r3, r2
 8010c68:	00db      	lsls	r3, r3, #3
 8010c6a:	440b      	add	r3, r1
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8010c76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6939      	ldr	r1, [r7, #16]
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f002 f8e3 	bl	8012e4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010c86:	6938      	ldr	r0, [r7, #16]
 8010c88:	f7f6 fcec 	bl	8007664 <pbuf_free>
  }
  return ERR_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3718      	adds	r7, #24
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	0801a3e0 	.word	0x0801a3e0
 8010c9c:	0801a4d8 	.word	0x0801a4d8
 8010ca0:	0801a458 	.word	0x0801a458
 8010ca4:	20008068 	.word	0x20008068

08010ca8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60fb      	str	r3, [r7, #12]
 8010cb4:	e01e      	b.n	8010cf4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010cb6:	4913      	ldr	r1, [pc, #76]	@ (8010d04 <etharp_cleanup_netif+0x5c>)
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	4413      	add	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3314      	adds	r3, #20
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010cca:	7afb      	ldrb	r3, [r7, #11]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00e      	beq.n	8010cee <etharp_cleanup_netif+0x46>
 8010cd0:	490c      	ldr	r1, [pc, #48]	@ (8010d04 <etharp_cleanup_netif+0x5c>)
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	440b      	add	r3, r1
 8010cde:	3308      	adds	r3, #8
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d102      	bne.n	8010cee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff fce5 	bl	80106b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	60fb      	str	r3, [r7, #12]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b09      	cmp	r3, #9
 8010cf8:	dddd      	ble.n	8010cb6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010cfa:	bf00      	nop
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	20008068 	.word	0x20008068

08010d08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010d08:	b5b0      	push	{r4, r5, r7, lr}
 8010d0a:	b08a      	sub	sp, #40	@ 0x28
 8010d0c:	af04      	add	r7, sp, #16
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d107      	bne.n	8010d28 <etharp_input+0x20>
 8010d18:	4b3f      	ldr	r3, [pc, #252]	@ (8010e18 <etharp_input+0x110>)
 8010d1a:	f240 228a 	movw	r2, #650	@ 0x28a
 8010d1e:	493f      	ldr	r1, [pc, #252]	@ (8010e1c <etharp_input+0x114>)
 8010d20:	483f      	ldr	r0, [pc, #252]	@ (8010e20 <etharp_input+0x118>)
 8010d22:	f003 f893 	bl	8013e4c <iprintf>
 8010d26:	e074      	b.n	8010e12 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d38:	d10c      	bne.n	8010d54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010d3e:	2b06      	cmp	r3, #6
 8010d40:	d108      	bne.n	8010d54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010d46:	2b04      	cmp	r3, #4
 8010d48:	d104      	bne.n	8010d54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	885b      	ldrh	r3, [r3, #2]
 8010d4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010d50:	2b08      	cmp	r3, #8
 8010d52:	d003      	beq.n	8010d5c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f7f6 fc85 	bl	8007664 <pbuf_free>
    return;
 8010d5a:	e05a      	b.n	8010e12 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	330e      	adds	r3, #14
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	3318      	adds	r3, #24
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d102      	bne.n	8010d7c <etharp_input+0x74>
    for_us = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	75fb      	strb	r3, [r7, #23]
 8010d7a:	e009      	b.n	8010d90 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	3304      	adds	r3, #4
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	bf0c      	ite	eq
 8010d88:	2301      	moveq	r3, #1
 8010d8a:	2300      	movne	r3, #0
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	f103 0208 	add.w	r2, r3, #8
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d001      	beq.n	8010da0 <etharp_input+0x98>
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	e000      	b.n	8010da2 <etharp_input+0x9a>
 8010da0:	2302      	movs	r3, #2
 8010da2:	f107 010c 	add.w	r1, r7, #12
 8010da6:	6838      	ldr	r0, [r7, #0]
 8010da8:	f7ff fed8 	bl	8010b5c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	88db      	ldrh	r3, [r3, #6]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010db6:	d003      	beq.n	8010dc0 <etharp_input+0xb8>
 8010db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dbc:	d01e      	beq.n	8010dfc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010dbe:	e025      	b.n	8010e0c <etharp_input+0x104>
      if (for_us) {
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d021      	beq.n	8010e0a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010de0:	2102      	movs	r1, #2
 8010de2:	9103      	str	r1, [sp, #12]
 8010de4:	f107 010c 	add.w	r1, r7, #12
 8010de8:	9102      	str	r1, [sp, #8]
 8010dea:	9201      	str	r2, [sp, #4]
 8010dec:	9300      	str	r3, [sp, #0]
 8010dee:	462b      	mov	r3, r5
 8010df0:	4622      	mov	r2, r4
 8010df2:	4601      	mov	r1, r0
 8010df4:	6838      	ldr	r0, [r7, #0]
 8010df6:	f000 faef 	bl	80113d8 <etharp_raw>
      break;
 8010dfa:	e006      	b.n	8010e0a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010dfc:	f107 030c 	add.w	r3, r7, #12
 8010e00:	4619      	mov	r1, r3
 8010e02:	6838      	ldr	r0, [r7, #0]
 8010e04:	f7fe fa02 	bl	800f20c <dhcp_arp_reply>
      break;
 8010e08:	e000      	b.n	8010e0c <etharp_input+0x104>
      break;
 8010e0a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7f6 fc29 	bl	8007664 <pbuf_free>
}
 8010e12:	3718      	adds	r7, #24
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bdb0      	pop	{r4, r5, r7, pc}
 8010e18:	0801a3e0 	.word	0x0801a3e0
 8010e1c:	0801a530 	.word	0x0801a530
 8010e20:	0801a458 	.word	0x0801a458

08010e24 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af02      	add	r7, sp, #8
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010e32:	79fa      	ldrb	r2, [r7, #7]
 8010e34:	4944      	ldr	r1, [pc, #272]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010e36:	4613      	mov	r3, r2
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	4413      	add	r3, r2
 8010e3c:	00db      	lsls	r3, r3, #3
 8010e3e:	440b      	add	r3, r1
 8010e40:	3314      	adds	r3, #20
 8010e42:	781b      	ldrb	r3, [r3, #0]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d806      	bhi.n	8010e56 <etharp_output_to_arp_index+0x32>
 8010e48:	4b40      	ldr	r3, [pc, #256]	@ (8010f4c <etharp_output_to_arp_index+0x128>)
 8010e4a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010e4e:	4940      	ldr	r1, [pc, #256]	@ (8010f50 <etharp_output_to_arp_index+0x12c>)
 8010e50:	4840      	ldr	r0, [pc, #256]	@ (8010f54 <etharp_output_to_arp_index+0x130>)
 8010e52:	f002 fffb 	bl	8013e4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010e56:	79fa      	ldrb	r2, [r7, #7]
 8010e58:	493b      	ldr	r1, [pc, #236]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010e5a:	4613      	mov	r3, r2
 8010e5c:	005b      	lsls	r3, r3, #1
 8010e5e:	4413      	add	r3, r2
 8010e60:	00db      	lsls	r3, r3, #3
 8010e62:	440b      	add	r3, r1
 8010e64:	3314      	adds	r3, #20
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	d153      	bne.n	8010f14 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010e6c:	79fa      	ldrb	r2, [r7, #7]
 8010e6e:	4936      	ldr	r1, [pc, #216]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010e70:	4613      	mov	r3, r2
 8010e72:	005b      	lsls	r3, r3, #1
 8010e74:	4413      	add	r3, r2
 8010e76:	00db      	lsls	r3, r3, #3
 8010e78:	440b      	add	r3, r1
 8010e7a:	3312      	adds	r3, #18
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010e82:	d919      	bls.n	8010eb8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010e84:	79fa      	ldrb	r2, [r7, #7]
 8010e86:	4613      	mov	r3, r2
 8010e88:	005b      	lsls	r3, r3, #1
 8010e8a:	4413      	add	r3, r2
 8010e8c:	00db      	lsls	r3, r3, #3
 8010e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010e90:	4413      	add	r3, r2
 8010e92:	3304      	adds	r3, #4
 8010e94:	4619      	mov	r1, r3
 8010e96:	68f8      	ldr	r0, [r7, #12]
 8010e98:	f000 fb4c 	bl	8011534 <etharp_request>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d138      	bne.n	8010f14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010ea2:	79fa      	ldrb	r2, [r7, #7]
 8010ea4:	4928      	ldr	r1, [pc, #160]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	005b      	lsls	r3, r3, #1
 8010eaa:	4413      	add	r3, r2
 8010eac:	00db      	lsls	r3, r3, #3
 8010eae:	440b      	add	r3, r1
 8010eb0:	3314      	adds	r3, #20
 8010eb2:	2203      	movs	r2, #3
 8010eb4:	701a      	strb	r2, [r3, #0]
 8010eb6:	e02d      	b.n	8010f14 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010eb8:	79fa      	ldrb	r2, [r7, #7]
 8010eba:	4923      	ldr	r1, [pc, #140]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	4413      	add	r3, r2
 8010ec2:	00db      	lsls	r3, r3, #3
 8010ec4:	440b      	add	r3, r1
 8010ec6:	3312      	adds	r3, #18
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010ece:	d321      	bcc.n	8010f14 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010ed0:	79fa      	ldrb	r2, [r7, #7]
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	4a1b      	ldr	r2, [pc, #108]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010edc:	4413      	add	r3, r2
 8010ede:	1d19      	adds	r1, r3, #4
 8010ee0:	79fa      	ldrb	r2, [r7, #7]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	005b      	lsls	r3, r3, #1
 8010ee6:	4413      	add	r3, r2
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	3308      	adds	r3, #8
 8010eec:	4a16      	ldr	r2, [pc, #88]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010eee:	4413      	add	r3, r2
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	68f8      	ldr	r0, [r7, #12]
 8010ef6:	f000 fafb 	bl	80114f0 <etharp_request_dst>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d109      	bne.n	8010f14 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010f00:	79fa      	ldrb	r2, [r7, #7]
 8010f02:	4911      	ldr	r1, [pc, #68]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010f04:	4613      	mov	r3, r2
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	4413      	add	r3, r2
 8010f0a:	00db      	lsls	r3, r3, #3
 8010f0c:	440b      	add	r3, r1
 8010f0e:	3314      	adds	r3, #20
 8010f10:	2203      	movs	r2, #3
 8010f12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8010f1a:	79fa      	ldrb	r2, [r7, #7]
 8010f1c:	4613      	mov	r3, r2
 8010f1e:	005b      	lsls	r3, r3, #1
 8010f20:	4413      	add	r3, r2
 8010f22:	00db      	lsls	r3, r3, #3
 8010f24:	3308      	adds	r3, #8
 8010f26:	4a08      	ldr	r2, [pc, #32]	@ (8010f48 <etharp_output_to_arp_index+0x124>)
 8010f28:	4413      	add	r3, r2
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f30:	9200      	str	r2, [sp, #0]
 8010f32:	460a      	mov	r2, r1
 8010f34:	68b9      	ldr	r1, [r7, #8]
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f001 ff88 	bl	8012e4c <ethernet_output>
 8010f3c:	4603      	mov	r3, r0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20008068 	.word	0x20008068
 8010f4c:	0801a3e0 	.word	0x0801a3e0
 8010f50:	0801a550 	.word	0x0801a550
 8010f54:	0801a458 	.word	0x0801a458

08010f58 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b08a      	sub	sp, #40	@ 0x28
 8010f5c:	af02      	add	r7, sp, #8
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d106      	bne.n	8010f7c <etharp_output+0x24>
 8010f6e:	4b73      	ldr	r3, [pc, #460]	@ (801113c <etharp_output+0x1e4>)
 8010f70:	f240 321e 	movw	r2, #798	@ 0x31e
 8010f74:	4972      	ldr	r1, [pc, #456]	@ (8011140 <etharp_output+0x1e8>)
 8010f76:	4873      	ldr	r0, [pc, #460]	@ (8011144 <etharp_output+0x1ec>)
 8010f78:	f002 ff68 	bl	8013e4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d106      	bne.n	8010f90 <etharp_output+0x38>
 8010f82:	4b6e      	ldr	r3, [pc, #440]	@ (801113c <etharp_output+0x1e4>)
 8010f84:	f240 321f 	movw	r2, #799	@ 0x31f
 8010f88:	496f      	ldr	r1, [pc, #444]	@ (8011148 <etharp_output+0x1f0>)
 8010f8a:	486e      	ldr	r0, [pc, #440]	@ (8011144 <etharp_output+0x1ec>)
 8010f8c:	f002 ff5e 	bl	8013e4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <etharp_output+0x4c>
 8010f96:	4b69      	ldr	r3, [pc, #420]	@ (801113c <etharp_output+0x1e4>)
 8010f98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010f9c:	496b      	ldr	r1, [pc, #428]	@ (801114c <etharp_output+0x1f4>)
 8010f9e:	4869      	ldr	r0, [pc, #420]	@ (8011144 <etharp_output+0x1ec>)
 8010fa0:	f002 ff54 	bl	8013e4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	68f9      	ldr	r1, [r7, #12]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 ff16 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d002      	beq.n	8010fbc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010fb6:	4b66      	ldr	r3, [pc, #408]	@ (8011150 <etharp_output+0x1f8>)
 8010fb8:	61fb      	str	r3, [r7, #28]
 8010fba:	e0af      	b.n	801111c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010fc4:	2be0      	cmp	r3, #224	@ 0xe0
 8010fc6:	d118      	bne.n	8010ffa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010fd0:	235e      	movs	r3, #94	@ 0x5e
 8010fd2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	3302      	adds	r3, #2
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	3303      	adds	r3, #3
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010ff2:	f107 0310 	add.w	r3, r7, #16
 8010ff6:	61fb      	str	r3, [r7, #28]
 8010ff8:	e090      	b.n	801111c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	3304      	adds	r3, #4
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	405a      	eors	r2, r3
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	3308      	adds	r3, #8
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4013      	ands	r3, r2
 801100e:	2b00      	cmp	r3, #0
 8011010:	d012      	beq.n	8011038 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011018:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801101c:	4293      	cmp	r3, r2
 801101e:	d00b      	beq.n	8011038 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	330c      	adds	r3, #12
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d003      	beq.n	8011032 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	330c      	adds	r3, #12
 801102e:	61bb      	str	r3, [r7, #24]
 8011030:	e002      	b.n	8011038 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011032:	f06f 0303 	mvn.w	r3, #3
 8011036:	e07d      	b.n	8011134 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011038:	4b46      	ldr	r3, [pc, #280]	@ (8011154 <etharp_output+0x1fc>)
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	4619      	mov	r1, r3
 801103e:	4a46      	ldr	r2, [pc, #280]	@ (8011158 <etharp_output+0x200>)
 8011040:	460b      	mov	r3, r1
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	440b      	add	r3, r1
 8011046:	00db      	lsls	r3, r3, #3
 8011048:	4413      	add	r3, r2
 801104a:	3314      	adds	r3, #20
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d925      	bls.n	801109e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011052:	4b40      	ldr	r3, [pc, #256]	@ (8011154 <etharp_output+0x1fc>)
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	4619      	mov	r1, r3
 8011058:	4a3f      	ldr	r2, [pc, #252]	@ (8011158 <etharp_output+0x200>)
 801105a:	460b      	mov	r3, r1
 801105c:	005b      	lsls	r3, r3, #1
 801105e:	440b      	add	r3, r1
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4413      	add	r3, r2
 8011064:	3308      	adds	r3, #8
 8011066:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	429a      	cmp	r2, r3
 801106c:	d117      	bne.n	801109e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	4b38      	ldr	r3, [pc, #224]	@ (8011154 <etharp_output+0x1fc>)
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	4618      	mov	r0, r3
 8011078:	4937      	ldr	r1, [pc, #220]	@ (8011158 <etharp_output+0x200>)
 801107a:	4603      	mov	r3, r0
 801107c:	005b      	lsls	r3, r3, #1
 801107e:	4403      	add	r3, r0
 8011080:	00db      	lsls	r3, r3, #3
 8011082:	440b      	add	r3, r1
 8011084:	3304      	adds	r3, #4
 8011086:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011088:	429a      	cmp	r2, r3
 801108a:	d108      	bne.n	801109e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801108c:	4b31      	ldr	r3, [pc, #196]	@ (8011154 <etharp_output+0x1fc>)
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	461a      	mov	r2, r3
 8011092:	68b9      	ldr	r1, [r7, #8]
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f7ff fec5 	bl	8010e24 <etharp_output_to_arp_index>
 801109a:	4603      	mov	r3, r0
 801109c:	e04a      	b.n	8011134 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801109e:	2300      	movs	r3, #0
 80110a0:	75fb      	strb	r3, [r7, #23]
 80110a2:	e031      	b.n	8011108 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80110a4:	7dfa      	ldrb	r2, [r7, #23]
 80110a6:	492c      	ldr	r1, [pc, #176]	@ (8011158 <etharp_output+0x200>)
 80110a8:	4613      	mov	r3, r2
 80110aa:	005b      	lsls	r3, r3, #1
 80110ac:	4413      	add	r3, r2
 80110ae:	00db      	lsls	r3, r3, #3
 80110b0:	440b      	add	r3, r1
 80110b2:	3314      	adds	r3, #20
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d923      	bls.n	8011102 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80110ba:	7dfa      	ldrb	r2, [r7, #23]
 80110bc:	4926      	ldr	r1, [pc, #152]	@ (8011158 <etharp_output+0x200>)
 80110be:	4613      	mov	r3, r2
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	4413      	add	r3, r2
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	440b      	add	r3, r1
 80110c8:	3308      	adds	r3, #8
 80110ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d117      	bne.n	8011102 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	6819      	ldr	r1, [r3, #0]
 80110d6:	7dfa      	ldrb	r2, [r7, #23]
 80110d8:	481f      	ldr	r0, [pc, #124]	@ (8011158 <etharp_output+0x200>)
 80110da:	4613      	mov	r3, r2
 80110dc:	005b      	lsls	r3, r3, #1
 80110de:	4413      	add	r3, r2
 80110e0:	00db      	lsls	r3, r3, #3
 80110e2:	4403      	add	r3, r0
 80110e4:	3304      	adds	r3, #4
 80110e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80110e8:	4299      	cmp	r1, r3
 80110ea:	d10a      	bne.n	8011102 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80110ec:	4a19      	ldr	r2, [pc, #100]	@ (8011154 <etharp_output+0x1fc>)
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80110f2:	7dfb      	ldrb	r3, [r7, #23]
 80110f4:	461a      	mov	r2, r3
 80110f6:	68b9      	ldr	r1, [r7, #8]
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f7ff fe93 	bl	8010e24 <etharp_output_to_arp_index>
 80110fe:	4603      	mov	r3, r0
 8011100:	e018      	b.n	8011134 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011102:	7dfb      	ldrb	r3, [r7, #23]
 8011104:	3301      	adds	r3, #1
 8011106:	75fb      	strb	r3, [r7, #23]
 8011108:	7dfb      	ldrb	r3, [r7, #23]
 801110a:	2b09      	cmp	r3, #9
 801110c:	d9ca      	bls.n	80110a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	69b9      	ldr	r1, [r7, #24]
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f000 f822 	bl	801115c <etharp_query>
 8011118:	4603      	mov	r3, r0
 801111a:	e00b      	b.n	8011134 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	68b9      	ldr	r1, [r7, #8]
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f001 fe8d 	bl	8012e4c <ethernet_output>
 8011132:	4603      	mov	r3, r0
}
 8011134:	4618      	mov	r0, r3
 8011136:	3720      	adds	r7, #32
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	0801a3e0 	.word	0x0801a3e0
 8011140:	0801a530 	.word	0x0801a530
 8011144:	0801a458 	.word	0x0801a458
 8011148:	0801a580 	.word	0x0801a580
 801114c:	0801a520 	.word	0x0801a520
 8011150:	0801ac18 	.word	0x0801ac18
 8011154:	20008158 	.word	0x20008158
 8011158:	20008068 	.word	0x20008068

0801115c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b08c      	sub	sp, #48	@ 0x30
 8011160:	af02      	add	r7, sp, #8
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	332a      	adds	r3, #42	@ 0x2a
 801116c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801116e:	23ff      	movs	r3, #255	@ 0xff
 8011170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8011174:	2300      	movs	r3, #0
 8011176:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	68f9      	ldr	r1, [r7, #12]
 801117e:	4618      	mov	r0, r3
 8011180:	f000 fe2c 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8011184:	4603      	mov	r3, r0
 8011186:	2b00      	cmp	r3, #0
 8011188:	d10c      	bne.n	80111a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011192:	2be0      	cmp	r3, #224	@ 0xe0
 8011194:	d006      	beq.n	80111a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d003      	beq.n	80111a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d102      	bne.n	80111aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80111a4:	f06f 030f 	mvn.w	r3, #15
 80111a8:	e101      	b.n	80113ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	2101      	movs	r1, #1
 80111ae:	68b8      	ldr	r0, [r7, #8]
 80111b0:	f7ff fb5c 	bl	801086c <etharp_find_entry>
 80111b4:	4603      	mov	r3, r0
 80111b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80111b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	da02      	bge.n	80111c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80111c0:	8a7b      	ldrh	r3, [r7, #18]
 80111c2:	b25b      	sxtb	r3, r3
 80111c4:	e0f3      	b.n	80113ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80111c6:	8a7b      	ldrh	r3, [r7, #18]
 80111c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80111ca:	d906      	bls.n	80111da <etharp_query+0x7e>
 80111cc:	4b7a      	ldr	r3, [pc, #488]	@ (80113b8 <etharp_query+0x25c>)
 80111ce:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80111d2:	497a      	ldr	r1, [pc, #488]	@ (80113bc <etharp_query+0x260>)
 80111d4:	487a      	ldr	r0, [pc, #488]	@ (80113c0 <etharp_query+0x264>)
 80111d6:	f002 fe39 	bl	8013e4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80111da:	8a7b      	ldrh	r3, [r7, #18]
 80111dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80111de:	7c7a      	ldrb	r2, [r7, #17]
 80111e0:	4978      	ldr	r1, [pc, #480]	@ (80113c4 <etharp_query+0x268>)
 80111e2:	4613      	mov	r3, r2
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	4413      	add	r3, r2
 80111e8:	00db      	lsls	r3, r3, #3
 80111ea:	440b      	add	r3, r1
 80111ec:	3314      	adds	r3, #20
 80111ee:	781b      	ldrb	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d115      	bne.n	8011220 <etharp_query+0xc4>
    is_new_entry = 1;
 80111f4:	2301      	movs	r3, #1
 80111f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80111f8:	7c7a      	ldrb	r2, [r7, #17]
 80111fa:	4972      	ldr	r1, [pc, #456]	@ (80113c4 <etharp_query+0x268>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	005b      	lsls	r3, r3, #1
 8011200:	4413      	add	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	440b      	add	r3, r1
 8011206:	3314      	adds	r3, #20
 8011208:	2201      	movs	r2, #1
 801120a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801120c:	7c7a      	ldrb	r2, [r7, #17]
 801120e:	496d      	ldr	r1, [pc, #436]	@ (80113c4 <etharp_query+0x268>)
 8011210:	4613      	mov	r3, r2
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	4413      	add	r3, r2
 8011216:	00db      	lsls	r3, r3, #3
 8011218:	440b      	add	r3, r1
 801121a:	3308      	adds	r3, #8
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011220:	7c7a      	ldrb	r2, [r7, #17]
 8011222:	4968      	ldr	r1, [pc, #416]	@ (80113c4 <etharp_query+0x268>)
 8011224:	4613      	mov	r3, r2
 8011226:	005b      	lsls	r3, r3, #1
 8011228:	4413      	add	r3, r2
 801122a:	00db      	lsls	r3, r3, #3
 801122c:	440b      	add	r3, r1
 801122e:	3314      	adds	r3, #20
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	2b01      	cmp	r3, #1
 8011234:	d011      	beq.n	801125a <etharp_query+0xfe>
 8011236:	7c7a      	ldrb	r2, [r7, #17]
 8011238:	4962      	ldr	r1, [pc, #392]	@ (80113c4 <etharp_query+0x268>)
 801123a:	4613      	mov	r3, r2
 801123c:	005b      	lsls	r3, r3, #1
 801123e:	4413      	add	r3, r2
 8011240:	00db      	lsls	r3, r3, #3
 8011242:	440b      	add	r3, r1
 8011244:	3314      	adds	r3, #20
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d806      	bhi.n	801125a <etharp_query+0xfe>
 801124c:	4b5a      	ldr	r3, [pc, #360]	@ (80113b8 <etharp_query+0x25c>)
 801124e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8011252:	495d      	ldr	r1, [pc, #372]	@ (80113c8 <etharp_query+0x26c>)
 8011254:	485a      	ldr	r0, [pc, #360]	@ (80113c0 <etharp_query+0x264>)
 8011256:	f002 fdf9 	bl	8013e4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <etharp_query+0x10a>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d10c      	bne.n	8011280 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011266:	68b9      	ldr	r1, [r7, #8]
 8011268:	68f8      	ldr	r0, [r7, #12]
 801126a:	f000 f963 	bl	8011534 <etharp_request>
 801126e:	4603      	mov	r3, r0
 8011270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d102      	bne.n	8011280 <etharp_query+0x124>
      return result;
 801127a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801127e:	e096      	b.n	80113ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <etharp_query+0x138>
 8011286:	4b4c      	ldr	r3, [pc, #304]	@ (80113b8 <etharp_query+0x25c>)
 8011288:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801128c:	494f      	ldr	r1, [pc, #316]	@ (80113cc <etharp_query+0x270>)
 801128e:	484c      	ldr	r0, [pc, #304]	@ (80113c0 <etharp_query+0x264>)
 8011290:	f002 fddc 	bl	8013e4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011294:	7c7a      	ldrb	r2, [r7, #17]
 8011296:	494b      	ldr	r1, [pc, #300]	@ (80113c4 <etharp_query+0x268>)
 8011298:	4613      	mov	r3, r2
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	4413      	add	r3, r2
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	440b      	add	r3, r1
 80112a2:	3314      	adds	r3, #20
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d917      	bls.n	80112da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80112aa:	4a49      	ldr	r2, [pc, #292]	@ (80113d0 <etharp_query+0x274>)
 80112ac:	7c7b      	ldrb	r3, [r7, #17]
 80112ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80112b0:	7c7a      	ldrb	r2, [r7, #17]
 80112b2:	4613      	mov	r3, r2
 80112b4:	005b      	lsls	r3, r3, #1
 80112b6:	4413      	add	r3, r2
 80112b8:	00db      	lsls	r3, r3, #3
 80112ba:	3308      	adds	r3, #8
 80112bc:	4a41      	ldr	r2, [pc, #260]	@ (80113c4 <etharp_query+0x268>)
 80112be:	4413      	add	r3, r2
 80112c0:	3304      	adds	r3, #4
 80112c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112c6:	9200      	str	r2, [sp, #0]
 80112c8:	697a      	ldr	r2, [r7, #20]
 80112ca:	6879      	ldr	r1, [r7, #4]
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f001 fdbd 	bl	8012e4c <ethernet_output>
 80112d2:	4603      	mov	r3, r0
 80112d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80112d8:	e067      	b.n	80113aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80112da:	7c7a      	ldrb	r2, [r7, #17]
 80112dc:	4939      	ldr	r1, [pc, #228]	@ (80113c4 <etharp_query+0x268>)
 80112de:	4613      	mov	r3, r2
 80112e0:	005b      	lsls	r3, r3, #1
 80112e2:	4413      	add	r3, r2
 80112e4:	00db      	lsls	r3, r3, #3
 80112e6:	440b      	add	r3, r1
 80112e8:	3314      	adds	r3, #20
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	d15c      	bne.n	80113aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80112f8:	e01c      	b.n	8011334 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	895a      	ldrh	r2, [r3, #10]
 80112fe:	69fb      	ldr	r3, [r7, #28]
 8011300:	891b      	ldrh	r3, [r3, #8]
 8011302:	429a      	cmp	r2, r3
 8011304:	d10a      	bne.n	801131c <etharp_query+0x1c0>
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d006      	beq.n	801131c <etharp_query+0x1c0>
 801130e:	4b2a      	ldr	r3, [pc, #168]	@ (80113b8 <etharp_query+0x25c>)
 8011310:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8011314:	492f      	ldr	r1, [pc, #188]	@ (80113d4 <etharp_query+0x278>)
 8011316:	482a      	ldr	r0, [pc, #168]	@ (80113c0 <etharp_query+0x264>)
 8011318:	f002 fd98 	bl	8013e4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	7b1b      	ldrb	r3, [r3, #12]
 8011320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <etharp_query+0x1d2>
        copy_needed = 1;
 8011328:	2301      	movs	r3, #1
 801132a:	61bb      	str	r3, [r7, #24]
        break;
 801132c:	e005      	b.n	801133a <etharp_query+0x1de>
      }
      p = p->next;
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d1df      	bne.n	80112fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801133a:	69bb      	ldr	r3, [r7, #24]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d007      	beq.n	8011350 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8011346:	200e      	movs	r0, #14
 8011348:	f7f6 fc22 	bl	8007b90 <pbuf_clone>
 801134c:	61f8      	str	r0, [r7, #28]
 801134e:	e004      	b.n	801135a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011354:	69f8      	ldr	r0, [r7, #28]
 8011356:	f7f6 fa25 	bl	80077a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d021      	beq.n	80113a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011360:	7c7a      	ldrb	r2, [r7, #17]
 8011362:	4918      	ldr	r1, [pc, #96]	@ (80113c4 <etharp_query+0x268>)
 8011364:	4613      	mov	r3, r2
 8011366:	005b      	lsls	r3, r3, #1
 8011368:	4413      	add	r3, r2
 801136a:	00db      	lsls	r3, r3, #3
 801136c:	440b      	add	r3, r1
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d00a      	beq.n	801138a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011374:	7c7a      	ldrb	r2, [r7, #17]
 8011376:	4913      	ldr	r1, [pc, #76]	@ (80113c4 <etharp_query+0x268>)
 8011378:	4613      	mov	r3, r2
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	4413      	add	r3, r2
 801137e:	00db      	lsls	r3, r3, #3
 8011380:	440b      	add	r3, r1
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4618      	mov	r0, r3
 8011386:	f7f6 f96d 	bl	8007664 <pbuf_free>
      }
      arp_table[i].q = p;
 801138a:	7c7a      	ldrb	r2, [r7, #17]
 801138c:	490d      	ldr	r1, [pc, #52]	@ (80113c4 <etharp_query+0x268>)
 801138e:	4613      	mov	r3, r2
 8011390:	005b      	lsls	r3, r3, #1
 8011392:	4413      	add	r3, r2
 8011394:	00db      	lsls	r3, r3, #3
 8011396:	440b      	add	r3, r1
 8011398:	69fa      	ldr	r2, [r7, #28]
 801139a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113a2:	e002      	b.n	80113aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80113a4:	23ff      	movs	r3, #255	@ 0xff
 80113a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80113aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3728      	adds	r7, #40	@ 0x28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	0801a3e0 	.word	0x0801a3e0
 80113bc:	0801a58c 	.word	0x0801a58c
 80113c0:	0801a458 	.word	0x0801a458
 80113c4:	20008068 	.word	0x20008068
 80113c8:	0801a59c 	.word	0x0801a59c
 80113cc:	0801a580 	.word	0x0801a580
 80113d0:	20008158 	.word	0x20008158
 80113d4:	0801a5c4 	.word	0x0801a5c4

080113d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08a      	sub	sp, #40	@ 0x28
 80113dc:	af02      	add	r7, sp, #8
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d106      	bne.n	80113fe <etharp_raw+0x26>
 80113f0:	4b3a      	ldr	r3, [pc, #232]	@ (80114dc <etharp_raw+0x104>)
 80113f2:	f240 4257 	movw	r2, #1111	@ 0x457
 80113f6:	493a      	ldr	r1, [pc, #232]	@ (80114e0 <etharp_raw+0x108>)
 80113f8:	483a      	ldr	r0, [pc, #232]	@ (80114e4 <etharp_raw+0x10c>)
 80113fa:	f002 fd27 	bl	8013e4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80113fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011402:	211c      	movs	r1, #28
 8011404:	200e      	movs	r0, #14
 8011406:	f7f5 fe49 	bl	800709c <pbuf_alloc>
 801140a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d102      	bne.n	8011418 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011412:	f04f 33ff 	mov.w	r3, #4294967295
 8011416:	e05d      	b.n	80114d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	895b      	ldrh	r3, [r3, #10]
 801141c:	2b1b      	cmp	r3, #27
 801141e:	d806      	bhi.n	801142e <etharp_raw+0x56>
 8011420:	4b2e      	ldr	r3, [pc, #184]	@ (80114dc <etharp_raw+0x104>)
 8011422:	f240 4262 	movw	r2, #1122	@ 0x462
 8011426:	4930      	ldr	r1, [pc, #192]	@ (80114e8 <etharp_raw+0x110>)
 8011428:	482e      	ldr	r0, [pc, #184]	@ (80114e4 <etharp_raw+0x10c>)
 801142a:	f002 fd0f 	bl	8013e4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011434:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011436:	4618      	mov	r0, r3
 8011438:	f7f4 fd86 	bl	8005f48 <lwip_htons>
 801143c:	4603      	mov	r3, r0
 801143e:	461a      	mov	r2, r3
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801144a:	2b06      	cmp	r3, #6
 801144c:	d006      	beq.n	801145c <etharp_raw+0x84>
 801144e:	4b23      	ldr	r3, [pc, #140]	@ (80114dc <etharp_raw+0x104>)
 8011450:	f240 4269 	movw	r2, #1129	@ 0x469
 8011454:	4925      	ldr	r1, [pc, #148]	@ (80114ec <etharp_raw+0x114>)
 8011456:	4823      	ldr	r0, [pc, #140]	@ (80114e4 <etharp_raw+0x10c>)
 8011458:	f002 fcf8 	bl	8013e4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	3308      	adds	r3, #8
 8011460:	2206      	movs	r2, #6
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	4618      	mov	r0, r3
 8011466:	f002 fe24 	bl	80140b2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	3312      	adds	r3, #18
 801146e:	2206      	movs	r2, #6
 8011470:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011472:	4618      	mov	r0, r3
 8011474:	f002 fe1d 	bl	80140b2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	330e      	adds	r3, #14
 801147c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801147e:	6812      	ldr	r2, [r2, #0]
 8011480:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	3318      	adds	r3, #24
 8011486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011488:	6812      	ldr	r2, [r2, #0]
 801148a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	2200      	movs	r2, #0
 8011490:	701a      	strb	r2, [r3, #0]
 8011492:	2200      	movs	r2, #0
 8011494:	f042 0201 	orr.w	r2, r2, #1
 8011498:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	2200      	movs	r2, #0
 801149e:	f042 0208 	orr.w	r2, r2, #8
 80114a2:	709a      	strb	r2, [r3, #2]
 80114a4:	2200      	movs	r2, #0
 80114a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2206      	movs	r2, #6
 80114ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	2204      	movs	r2, #4
 80114b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80114b4:	f640 0306 	movw	r3, #2054	@ 0x806
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	69b9      	ldr	r1, [r7, #24]
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f001 fcc3 	bl	8012e4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80114c6:	69b8      	ldr	r0, [r7, #24]
 80114c8:	f7f6 f8cc 	bl	8007664 <pbuf_free>
  p = NULL;
 80114cc:	2300      	movs	r3, #0
 80114ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80114d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3720      	adds	r7, #32
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	0801a3e0 	.word	0x0801a3e0
 80114e0:	0801a530 	.word	0x0801a530
 80114e4:	0801a458 	.word	0x0801a458
 80114e8:	0801a5e0 	.word	0x0801a5e0
 80114ec:	0801a614 	.word	0x0801a614

080114f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b088      	sub	sp, #32
 80114f4:	af04      	add	r7, sp, #16
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801150c:	2201      	movs	r2, #1
 801150e:	9203      	str	r2, [sp, #12]
 8011510:	68ba      	ldr	r2, [r7, #8]
 8011512:	9202      	str	r2, [sp, #8]
 8011514:	4a06      	ldr	r2, [pc, #24]	@ (8011530 <etharp_request_dst+0x40>)
 8011516:	9201      	str	r2, [sp, #4]
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	4603      	mov	r3, r0
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	68f8      	ldr	r0, [r7, #12]
 8011520:	f7ff ff5a 	bl	80113d8 <etharp_raw>
 8011524:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	0801ac20 	.word	0x0801ac20

08011534 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801153e:	4a05      	ldr	r2, [pc, #20]	@ (8011554 <etharp_request+0x20>)
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7ff ffd4 	bl	80114f0 <etharp_request_dst>
 8011548:	4603      	mov	r3, r0
}
 801154a:	4618      	mov	r0, r3
 801154c:	3708      	adds	r7, #8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	0801ac18 	.word	0x0801ac18

08011558 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b08e      	sub	sp, #56	@ 0x38
 801155c:	af04      	add	r7, sp, #16
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011562:	4b79      	ldr	r3, [pc, #484]	@ (8011748 <icmp_input+0x1f0>)
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	f003 030f 	and.w	r3, r3, #15
 8011570:	b2db      	uxtb	r3, r3
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	b2db      	uxtb	r3, r3
 8011576:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8011578:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801157a:	2b13      	cmp	r3, #19
 801157c:	f240 80cd 	bls.w	801171a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	895b      	ldrh	r3, [r3, #10]
 8011584:	2b03      	cmp	r3, #3
 8011586:	f240 80ca 	bls.w	801171e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011594:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011598:	2b00      	cmp	r3, #0
 801159a:	f000 80b7 	beq.w	801170c <icmp_input+0x1b4>
 801159e:	2b08      	cmp	r3, #8
 80115a0:	f040 80b7 	bne.w	8011712 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80115a4:	4b69      	ldr	r3, [pc, #420]	@ (801174c <icmp_input+0x1f4>)
 80115a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80115a8:	4b67      	ldr	r3, [pc, #412]	@ (8011748 <icmp_input+0x1f0>)
 80115aa:	695b      	ldr	r3, [r3, #20]
 80115ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115b0:	2be0      	cmp	r3, #224	@ 0xe0
 80115b2:	f000 80bb 	beq.w	801172c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80115b6:	4b64      	ldr	r3, [pc, #400]	@ (8011748 <icmp_input+0x1f0>)
 80115b8:	695b      	ldr	r3, [r3, #20]
 80115ba:	4a63      	ldr	r2, [pc, #396]	@ (8011748 <icmp_input+0x1f0>)
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	4611      	mov	r1, r2
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 fc0b 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f040 80b1 	bne.w	8011730 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	891b      	ldrh	r3, [r3, #8]
 80115d2:	2b07      	cmp	r3, #7
 80115d4:	f240 80a5 	bls.w	8011722 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80115d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115da:	330e      	adds	r3, #14
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7f5 ffaa 	bl	8007538 <pbuf_add_header>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d04b      	beq.n	8011682 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	891a      	ldrh	r2, [r3, #8]
 80115ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115f0:	4413      	add	r3, r2
 80115f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	891b      	ldrh	r3, [r3, #8]
 80115f8:	8b7a      	ldrh	r2, [r7, #26]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	f0c0 809a 	bcc.w	8011734 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011600:	8b7b      	ldrh	r3, [r7, #26]
 8011602:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011606:	4619      	mov	r1, r3
 8011608:	200e      	movs	r0, #14
 801160a:	f7f5 fd47 	bl	800709c <pbuf_alloc>
 801160e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 8090 	beq.w	8011738 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	895b      	ldrh	r3, [r3, #10]
 801161c:	461a      	mov	r2, r3
 801161e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011620:	3308      	adds	r3, #8
 8011622:	429a      	cmp	r2, r3
 8011624:	d203      	bcs.n	801162e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011626:	6978      	ldr	r0, [r7, #20]
 8011628:	f7f6 f81c 	bl	8007664 <pbuf_free>
          goto icmperr;
 801162c:	e085      	b.n	801173a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011634:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011636:	4618      	mov	r0, r3
 8011638:	f002 fd3b 	bl	80140b2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801163c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801163e:	4619      	mov	r1, r3
 8011640:	6978      	ldr	r0, [r7, #20]
 8011642:	f7f5 ff89 	bl	8007558 <pbuf_remove_header>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d009      	beq.n	8011660 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801164c:	4b40      	ldr	r3, [pc, #256]	@ (8011750 <icmp_input+0x1f8>)
 801164e:	22b6      	movs	r2, #182	@ 0xb6
 8011650:	4940      	ldr	r1, [pc, #256]	@ (8011754 <icmp_input+0x1fc>)
 8011652:	4841      	ldr	r0, [pc, #260]	@ (8011758 <icmp_input+0x200>)
 8011654:	f002 fbfa 	bl	8013e4c <iprintf>
          pbuf_free(r);
 8011658:	6978      	ldr	r0, [r7, #20]
 801165a:	f7f6 f803 	bl	8007664 <pbuf_free>
          goto icmperr;
 801165e:	e06c      	b.n	801173a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011660:	6879      	ldr	r1, [r7, #4]
 8011662:	6978      	ldr	r0, [r7, #20]
 8011664:	f7f6 f926 	bl	80078b4 <pbuf_copy>
 8011668:	4603      	mov	r3, r0
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801166e:	6978      	ldr	r0, [r7, #20]
 8011670:	f7f5 fff8 	bl	8007664 <pbuf_free>
          goto icmperr;
 8011674:	e061      	b.n	801173a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7f5 fff4 	bl	8007664 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	607b      	str	r3, [r7, #4]
 8011680:	e00f      	b.n	80116a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011682:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011684:	330e      	adds	r3, #14
 8011686:	4619      	mov	r1, r3
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7f5 ff65 	bl	8007558 <pbuf_remove_header>
 801168e:	4603      	mov	r3, r0
 8011690:	2b00      	cmp	r3, #0
 8011692:	d006      	beq.n	80116a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011694:	4b2e      	ldr	r3, [pc, #184]	@ (8011750 <icmp_input+0x1f8>)
 8011696:	22c7      	movs	r2, #199	@ 0xc7
 8011698:	4930      	ldr	r1, [pc, #192]	@ (801175c <icmp_input+0x204>)
 801169a:	482f      	ldr	r0, [pc, #188]	@ (8011758 <icmp_input+0x200>)
 801169c:	f002 fbd6 	bl	8013e4c <iprintf>
          goto icmperr;
 80116a0:	e04b      	b.n	801173a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80116a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80116aa:	4619      	mov	r1, r3
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7f5 ff43 	bl	8007538 <pbuf_add_header>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d12b      	bne.n	8011710 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80116be:	69fb      	ldr	r3, [r7, #28]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80116c6:	4b20      	ldr	r3, [pc, #128]	@ (8011748 <icmp_input+0x1f0>)
 80116c8:	691a      	ldr	r2, [r3, #16]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2200      	movs	r2, #0
 80116d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	2200      	movs	r2, #0
 80116d8:	709a      	strb	r2, [r3, #2]
 80116da:	2200      	movs	r2, #0
 80116dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	22ff      	movs	r2, #255	@ 0xff
 80116e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2200      	movs	r2, #0
 80116e8:	729a      	strb	r2, [r3, #10]
 80116ea:	2200      	movs	r2, #0
 80116ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	9302      	str	r3, [sp, #8]
 80116f2:	2301      	movs	r3, #1
 80116f4:	9301      	str	r3, [sp, #4]
 80116f6:	2300      	movs	r3, #0
 80116f8:	9300      	str	r3, [sp, #0]
 80116fa:	23ff      	movs	r3, #255	@ 0xff
 80116fc:	2200      	movs	r2, #0
 80116fe:	69f9      	ldr	r1, [r7, #28]
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f000 fa93 	bl	8011c2c <ip4_output_if>
 8011706:	4603      	mov	r3, r0
 8011708:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801170a:	e001      	b.n	8011710 <icmp_input+0x1b8>
      break;
 801170c:	bf00      	nop
 801170e:	e000      	b.n	8011712 <icmp_input+0x1ba>
      break;
 8011710:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7f5 ffa6 	bl	8007664 <pbuf_free>
  return;
 8011718:	e013      	b.n	8011742 <icmp_input+0x1ea>
    goto lenerr;
 801171a:	bf00      	nop
 801171c:	e002      	b.n	8011724 <icmp_input+0x1cc>
    goto lenerr;
 801171e:	bf00      	nop
 8011720:	e000      	b.n	8011724 <icmp_input+0x1cc>
        goto lenerr;
 8011722:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7f5 ff9d 	bl	8007664 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801172a:	e00a      	b.n	8011742 <icmp_input+0x1ea>
        goto icmperr;
 801172c:	bf00      	nop
 801172e:	e004      	b.n	801173a <icmp_input+0x1e2>
        goto icmperr;
 8011730:	bf00      	nop
 8011732:	e002      	b.n	801173a <icmp_input+0x1e2>
          goto icmperr;
 8011734:	bf00      	nop
 8011736:	e000      	b.n	801173a <icmp_input+0x1e2>
          goto icmperr;
 8011738:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7f5 ff92 	bl	8007664 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011740:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011742:	3728      	adds	r7, #40	@ 0x28
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	20004f98 	.word	0x20004f98
 801174c:	20004fac 	.word	0x20004fac
 8011750:	0801a658 	.word	0x0801a658
 8011754:	0801a690 	.word	0x0801a690
 8011758:	0801a6c8 	.word	0x0801a6c8
 801175c:	0801a6f0 	.word	0x0801a6f0

08011760 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	461a      	mov	r2, r3
 8011770:	2103      	movs	r1, #3
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 f814 	bl	80117a0 <icmp_send_response>
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	460b      	mov	r3, r1
 801178a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801178c:	78fb      	ldrb	r3, [r7, #3]
 801178e:	461a      	mov	r2, r3
 8011790:	210b      	movs	r1, #11
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f000 f804 	bl	80117a0 <icmp_send_response>
}
 8011798:	bf00      	nop
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b08c      	sub	sp, #48	@ 0x30
 80117a4:	af04      	add	r7, sp, #16
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
 80117ac:	4613      	mov	r3, r2
 80117ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80117b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80117b4:	2124      	movs	r1, #36	@ 0x24
 80117b6:	2022      	movs	r0, #34	@ 0x22
 80117b8:	f7f5 fc70 	bl	800709c <pbuf_alloc>
 80117bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d04c      	beq.n	801185e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	2b23      	cmp	r3, #35	@ 0x23
 80117ca:	d806      	bhi.n	80117da <icmp_send_response+0x3a>
 80117cc:	4b26      	ldr	r3, [pc, #152]	@ (8011868 <icmp_send_response+0xc8>)
 80117ce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80117d2:	4926      	ldr	r1, [pc, #152]	@ (801186c <icmp_send_response+0xcc>)
 80117d4:	4826      	ldr	r0, [pc, #152]	@ (8011870 <icmp_send_response+0xd0>)
 80117d6:	f002 fb39 	bl	8013e4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	78fa      	ldrb	r2, [r7, #3]
 80117ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	78ba      	ldrb	r2, [r7, #2]
 80117f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	2200      	movs	r2, #0
 80117f6:	711a      	strb	r2, [r3, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	2200      	movs	r2, #0
 8011800:	719a      	strb	r2, [r3, #6]
 8011802:	2200      	movs	r2, #0
 8011804:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f103 0008 	add.w	r0, r3, #8
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	221c      	movs	r2, #28
 8011814:	4619      	mov	r1, r3
 8011816:	f002 fc4c 	bl	80140b2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	68db      	ldr	r3, [r3, #12]
 801181e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011820:	f107 030c 	add.w	r3, r7, #12
 8011824:	4618      	mov	r0, r3
 8011826:	f000 f825 	bl	8011874 <ip4_route>
 801182a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d011      	beq.n	8011856 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	2200      	movs	r2, #0
 8011836:	709a      	strb	r2, [r3, #2]
 8011838:	2200      	movs	r2, #0
 801183a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801183c:	f107 020c 	add.w	r2, r7, #12
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	9302      	str	r3, [sp, #8]
 8011844:	2301      	movs	r3, #1
 8011846:	9301      	str	r3, [sp, #4]
 8011848:	2300      	movs	r3, #0
 801184a:	9300      	str	r3, [sp, #0]
 801184c:	23ff      	movs	r3, #255	@ 0xff
 801184e:	2100      	movs	r1, #0
 8011850:	69f8      	ldr	r0, [r7, #28]
 8011852:	f000 f9eb 	bl	8011c2c <ip4_output_if>
  }
  pbuf_free(q);
 8011856:	69f8      	ldr	r0, [r7, #28]
 8011858:	f7f5 ff04 	bl	8007664 <pbuf_free>
 801185c:	e000      	b.n	8011860 <icmp_send_response+0xc0>
    return;
 801185e:	bf00      	nop
}
 8011860:	3720      	adds	r7, #32
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	0801a658 	.word	0x0801a658
 801186c:	0801a724 	.word	0x0801a724
 8011870:	0801a6c8 	.word	0x0801a6c8

08011874 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011874:	b480      	push	{r7}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801187c:	4b33      	ldr	r3, [pc, #204]	@ (801194c <ip4_route+0xd8>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	60fb      	str	r3, [r7, #12]
 8011882:	e036      	b.n	80118f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801188a:	f003 0301 	and.w	r3, r3, #1
 801188e:	b2db      	uxtb	r3, r3
 8011890:	2b00      	cmp	r3, #0
 8011892:	d02b      	beq.n	80118ec <ip4_route+0x78>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801189a:	089b      	lsrs	r3, r3, #2
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d022      	beq.n	80118ec <ip4_route+0x78>
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	3304      	adds	r3, #4
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d01d      	beq.n	80118ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	3304      	adds	r3, #4
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	405a      	eors	r2, r3
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	3308      	adds	r3, #8
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4013      	ands	r3, r2
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	e038      	b.n	801193e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80118d2:	f003 0302 	and.w	r3, r3, #2
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d108      	bne.n	80118ec <ip4_route+0x78>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	330c      	adds	r3, #12
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d101      	bne.n	80118ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	e028      	b.n	801193e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	60fb      	str	r3, [r7, #12]
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1c5      	bne.n	8011884 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80118f8:	4b15      	ldr	r3, [pc, #84]	@ (8011950 <ip4_route+0xdc>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d01a      	beq.n	8011936 <ip4_route+0xc2>
 8011900:	4b13      	ldr	r3, [pc, #76]	@ (8011950 <ip4_route+0xdc>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011908:	f003 0301 	and.w	r3, r3, #1
 801190c:	2b00      	cmp	r3, #0
 801190e:	d012      	beq.n	8011936 <ip4_route+0xc2>
 8011910:	4b0f      	ldr	r3, [pc, #60]	@ (8011950 <ip4_route+0xdc>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011918:	f003 0304 	and.w	r3, r3, #4
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00a      	beq.n	8011936 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011920:	4b0b      	ldr	r3, [pc, #44]	@ (8011950 <ip4_route+0xdc>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	3304      	adds	r3, #4
 8011926:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011928:	2b00      	cmp	r3, #0
 801192a:	d004      	beq.n	8011936 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	b2db      	uxtb	r3, r3
 8011932:	2b7f      	cmp	r3, #127	@ 0x7f
 8011934:	d101      	bne.n	801193a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011936:	2300      	movs	r3, #0
 8011938:	e001      	b.n	801193e <ip4_route+0xca>
  }

  return netif_default;
 801193a:	4b05      	ldr	r3, [pc, #20]	@ (8011950 <ip4_route+0xdc>)
 801193c:	681b      	ldr	r3, [r3, #0]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3714      	adds	r7, #20
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	20007fc8 	.word	0x20007fc8
 8011950:	20007fcc 	.word	0x20007fcc

08011954 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b082      	sub	sp, #8
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011962:	f003 0301 	and.w	r3, r3, #1
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b00      	cmp	r3, #0
 801196a:	d016      	beq.n	801199a <ip4_input_accept+0x46>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3304      	adds	r3, #4
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d011      	beq.n	801199a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011976:	4b0b      	ldr	r3, [pc, #44]	@ (80119a4 <ip4_input_accept+0x50>)
 8011978:	695a      	ldr	r2, [r3, #20]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3304      	adds	r3, #4
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d008      	beq.n	8011996 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011984:	4b07      	ldr	r3, [pc, #28]	@ (80119a4 <ip4_input_accept+0x50>)
 8011986:	695b      	ldr	r3, [r3, #20]
 8011988:	6879      	ldr	r1, [r7, #4]
 801198a:	4618      	mov	r0, r3
 801198c:	f000 fa26 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8011990:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011992:	2b00      	cmp	r3, #0
 8011994:	d001      	beq.n	801199a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011996:	2301      	movs	r3, #1
 8011998:	e000      	b.n	801199c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801199a:	2300      	movs	r3, #0
}
 801199c:	4618      	mov	r0, r3
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	20004f98 	.word	0x20004f98

080119a8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b088      	sub	sp, #32
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80119b2:	2301      	movs	r3, #1
 80119b4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80119bc:	69fb      	ldr	r3, [r7, #28]
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	091b      	lsrs	r3, r3, #4
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b04      	cmp	r3, #4
 80119c6:	d004      	beq.n	80119d2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f7f5 fe4b 	bl	8007664 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80119ce:	2300      	movs	r3, #0
 80119d0:	e123      	b.n	8011c1a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	f003 030f 	and.w	r3, r3, #15
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	885b      	ldrh	r3, [r3, #2]
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f4 faad 	bl	8005f48 <lwip_htons>
 80119ee:	4603      	mov	r3, r0
 80119f0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	891b      	ldrh	r3, [r3, #8]
 80119f6:	8a3a      	ldrh	r2, [r7, #16]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d204      	bcs.n	8011a06 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80119fc:	8a3b      	ldrh	r3, [r7, #16]
 80119fe:	4619      	mov	r1, r3
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7f5 fca9 	bl	8007358 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	895b      	ldrh	r3, [r3, #10]
 8011a0a:	8a7a      	ldrh	r2, [r7, #18]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d807      	bhi.n	8011a20 <ip4_input+0x78>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	891b      	ldrh	r3, [r3, #8]
 8011a14:	8a3a      	ldrh	r2, [r7, #16]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d802      	bhi.n	8011a20 <ip4_input+0x78>
 8011a1a:	8a7b      	ldrh	r3, [r7, #18]
 8011a1c:	2b13      	cmp	r3, #19
 8011a1e:	d804      	bhi.n	8011a2a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7f5 fe1f 	bl	8007664 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011a26:	2300      	movs	r3, #0
 8011a28:	e0f7      	b.n	8011c1a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8011c24 <ip4_input+0x27c>)
 8011a30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	4a7b      	ldr	r2, [pc, #492]	@ (8011c24 <ip4_input+0x27c>)
 8011a38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8011c24 <ip4_input+0x27c>)
 8011a3c:	695b      	ldr	r3, [r3, #20]
 8011a3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a42:	2be0      	cmp	r3, #224	@ 0xe0
 8011a44:	d112      	bne.n	8011a6c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011a4c:	f003 0301 	and.w	r3, r3, #1
 8011a50:	b2db      	uxtb	r3, r3
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d007      	beq.n	8011a66 <ip4_input+0xbe>
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <ip4_input+0xbe>
      netif = inp;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	61bb      	str	r3, [r7, #24]
 8011a64:	e02a      	b.n	8011abc <ip4_input+0x114>
    } else {
      netif = NULL;
 8011a66:	2300      	movs	r3, #0
 8011a68:	61bb      	str	r3, [r7, #24]
 8011a6a:	e027      	b.n	8011abc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011a6c:	6838      	ldr	r0, [r7, #0]
 8011a6e:	f7ff ff71 	bl	8011954 <ip4_input_accept>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <ip4_input+0xd6>
      netif = inp;
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	61bb      	str	r3, [r7, #24]
 8011a7c:	e01e      	b.n	8011abc <ip4_input+0x114>
    } else {
      netif = NULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011a82:	4b68      	ldr	r3, [pc, #416]	@ (8011c24 <ip4_input+0x27c>)
 8011a84:	695b      	ldr	r3, [r3, #20]
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a8a:	d017      	beq.n	8011abc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011a8c:	4b66      	ldr	r3, [pc, #408]	@ (8011c28 <ip4_input+0x280>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	61bb      	str	r3, [r7, #24]
 8011a92:	e00e      	b.n	8011ab2 <ip4_input+0x10a>
          if (netif == inp) {
 8011a94:	69ba      	ldr	r2, [r7, #24]
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d006      	beq.n	8011aaa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011a9c:	69b8      	ldr	r0, [r7, #24]
 8011a9e:	f7ff ff59 	bl	8011954 <ip4_input_accept>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d108      	bne.n	8011aba <ip4_input+0x112>
 8011aa8:	e000      	b.n	8011aac <ip4_input+0x104>
            continue;
 8011aaa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	61bb      	str	r3, [r7, #24]
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1ed      	bne.n	8011a94 <ip4_input+0xec>
 8011ab8:	e000      	b.n	8011abc <ip4_input+0x114>
            break;
 8011aba:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d111      	bne.n	8011ae6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	7a5b      	ldrb	r3, [r3, #9]
 8011ac6:	2b11      	cmp	r3, #17
 8011ac8:	d10d      	bne.n	8011ae6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011aca:	8a7b      	ldrh	r3, [r7, #18]
 8011acc:	69fa      	ldr	r2, [r7, #28]
 8011ace:	4413      	add	r3, r2
 8011ad0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	885b      	ldrh	r3, [r3, #2]
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8011adc:	d103      	bne.n	8011ae6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d017      	beq.n	8011b1c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011aec:	4b4d      	ldr	r3, [pc, #308]	@ (8011c24 <ip4_input+0x27c>)
 8011aee:	691b      	ldr	r3, [r3, #16]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d013      	beq.n	8011b1c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011af4:	4b4b      	ldr	r3, [pc, #300]	@ (8011c24 <ip4_input+0x27c>)
 8011af6:	691b      	ldr	r3, [r3, #16]
 8011af8:	6839      	ldr	r1, [r7, #0]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 f96e 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d105      	bne.n	8011b12 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011b06:	4b47      	ldr	r3, [pc, #284]	@ (8011c24 <ip4_input+0x27c>)
 8011b08:	691b      	ldr	r3, [r3, #16]
 8011b0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011b0e:	2be0      	cmp	r3, #224	@ 0xe0
 8011b10:	d104      	bne.n	8011b1c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f7f5 fda6 	bl	8007664 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	e07e      	b.n	8011c1a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d104      	bne.n	8011b2c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7f5 fd9e 	bl	8007664 <pbuf_free>
    return ERR_OK;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	e076      	b.n	8011c1a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	88db      	ldrh	r3, [r3, #6]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	461a      	mov	r2, r3
 8011b34:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011b38:	4013      	ands	r3, r2
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d00b      	beq.n	8011b56 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 fdbc 	bl	80126bc <ip4_reass>
 8011b44:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d101      	bne.n	8011b50 <ip4_input+0x1a8>
      return ERR_OK;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	e064      	b.n	8011c1a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011b56:	4a33      	ldr	r2, [pc, #204]	@ (8011c24 <ip4_input+0x27c>)
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011b5c:	4a31      	ldr	r2, [pc, #196]	@ (8011c24 <ip4_input+0x27c>)
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011b62:	4a30      	ldr	r2, [pc, #192]	@ (8011c24 <ip4_input+0x27c>)
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	f003 030f 	and.w	r3, r3, #15
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	461a      	mov	r2, r3
 8011b78:	4b2a      	ldr	r3, [pc, #168]	@ (8011c24 <ip4_input+0x27c>)
 8011b7a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011b7c:	8a7b      	ldrh	r3, [r7, #18]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7f5 fce9 	bl	8007558 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	7a5b      	ldrb	r3, [r3, #9]
 8011b8a:	2b11      	cmp	r3, #17
 8011b8c:	d006      	beq.n	8011b9c <ip4_input+0x1f4>
 8011b8e:	2b11      	cmp	r3, #17
 8011b90:	dc13      	bgt.n	8011bba <ip4_input+0x212>
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d00c      	beq.n	8011bb0 <ip4_input+0x208>
 8011b96:	2b06      	cmp	r3, #6
 8011b98:	d005      	beq.n	8011ba6 <ip4_input+0x1fe>
 8011b9a:	e00e      	b.n	8011bba <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011b9c:	6839      	ldr	r1, [r7, #0]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f7fc faee 	bl	800e180 <udp_input>
        break;
 8011ba4:	e026      	b.n	8011bf4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011ba6:	6839      	ldr	r1, [r7, #0]
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7f7 fea5 	bl	80098f8 <tcp_input>
        break;
 8011bae:	e021      	b.n	8011bf4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7ff fcd0 	bl	8011558 <icmp_input>
        break;
 8011bb8:	e01c      	b.n	8011bf4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011bba:	4b1a      	ldr	r3, [pc, #104]	@ (8011c24 <ip4_input+0x27c>)
 8011bbc:	695b      	ldr	r3, [r3, #20]
 8011bbe:	69b9      	ldr	r1, [r7, #24]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 f90b 	bl	8011ddc <ip4_addr_isbroadcast_u32>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10f      	bne.n	8011bec <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011bcc:	4b15      	ldr	r3, [pc, #84]	@ (8011c24 <ip4_input+0x27c>)
 8011bce:	695b      	ldr	r3, [r3, #20]
 8011bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011bd4:	2be0      	cmp	r3, #224	@ 0xe0
 8011bd6:	d009      	beq.n	8011bec <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011bd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011bdc:	4619      	mov	r1, r3
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7f5 fd2d 	bl	800763e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011be4:	2102      	movs	r1, #2
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f7ff fdba 	bl	8011760 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7f5 fd39 	bl	8007664 <pbuf_free>
        break;
 8011bf2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8011c24 <ip4_input+0x27c>)
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8011c24 <ip4_input+0x27c>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011c00:	4b08      	ldr	r3, [pc, #32]	@ (8011c24 <ip4_input+0x27c>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011c06:	4b07      	ldr	r3, [pc, #28]	@ (8011c24 <ip4_input+0x27c>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011c0c:	4b05      	ldr	r3, [pc, #20]	@ (8011c24 <ip4_input+0x27c>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011c12:	4b04      	ldr	r3, [pc, #16]	@ (8011c24 <ip4_input+0x27c>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011c18:	2300      	movs	r3, #0
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3720      	adds	r7, #32
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	20004f98 	.word	0x20004f98
 8011c28:	20007fc8 	.word	0x20007fc8

08011c2c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b08a      	sub	sp, #40	@ 0x28
 8011c30:	af04      	add	r7, sp, #16
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d009      	beq.n	8011c58 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d003      	beq.n	8011c52 <ip4_output_if+0x26>
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d102      	bne.n	8011c58 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c54:	3304      	adds	r3, #4
 8011c56:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011c58:	78fa      	ldrb	r2, [r7, #3]
 8011c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c5c:	9302      	str	r3, [sp, #8]
 8011c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011c62:	9301      	str	r3, [sp, #4]
 8011c64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	6979      	ldr	r1, [r7, #20]
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f000 f805 	bl	8011c80 <ip4_output_if_src>
 8011c76:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b088      	sub	sp, #32
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	607a      	str	r2, [r7, #4]
 8011c8c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7b9b      	ldrb	r3, [r3, #14]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d006      	beq.n	8011ca4 <ip4_output_if_src+0x24>
 8011c96:	4b4b      	ldr	r3, [pc, #300]	@ (8011dc4 <ip4_output_if_src+0x144>)
 8011c98:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011c9c:	494a      	ldr	r1, [pc, #296]	@ (8011dc8 <ip4_output_if_src+0x148>)
 8011c9e:	484b      	ldr	r0, [pc, #300]	@ (8011dcc <ip4_output_if_src+0x14c>)
 8011ca0:	f002 f8d4 	bl	8013e4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d060      	beq.n	8011d6c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011caa:	2314      	movs	r3, #20
 8011cac:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011cae:	2114      	movs	r1, #20
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f7f5 fc41 	bl	8007538 <pbuf_add_header>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d002      	beq.n	8011cc2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011cbc:	f06f 0301 	mvn.w	r3, #1
 8011cc0:	e07c      	b.n	8011dbc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	895b      	ldrh	r3, [r3, #10]
 8011ccc:	2b13      	cmp	r3, #19
 8011cce:	d806      	bhi.n	8011cde <ip4_output_if_src+0x5e>
 8011cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8011dc4 <ip4_output_if_src+0x144>)
 8011cd2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011cd6:	493e      	ldr	r1, [pc, #248]	@ (8011dd0 <ip4_output_if_src+0x150>)
 8011cd8:	483c      	ldr	r0, [pc, #240]	@ (8011dcc <ip4_output_if_src+0x14c>)
 8011cda:	f002 f8b7 	bl	8013e4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	78fa      	ldrb	r2, [r7, #3]
 8011ce2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011cea:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011cf4:	8b7b      	ldrh	r3, [r7, #26]
 8011cf6:	089b      	lsrs	r3, r3, #2
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011d0c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	891b      	ldrh	r3, [r3, #8]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7f4 f918 	bl	8005f48 <lwip_htons>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	2200      	movs	r2, #0
 8011d24:	719a      	strb	r2, [r3, #6]
 8011d26:	2200      	movs	r2, #0
 8011d28:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8011dd4 <ip4_output_if_src+0x154>)
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7f4 f90a 	bl	8005f48 <lwip_htons>
 8011d34:	4603      	mov	r3, r0
 8011d36:	461a      	mov	r2, r3
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011d3c:	4b25      	ldr	r3, [pc, #148]	@ (8011dd4 <ip4_output_if_src+0x154>)
 8011d3e:	881b      	ldrh	r3, [r3, #0]
 8011d40:	3301      	adds	r3, #1
 8011d42:	b29a      	uxth	r2, r3
 8011d44:	4b23      	ldr	r3, [pc, #140]	@ (8011dd4 <ip4_output_if_src+0x154>)
 8011d46:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d104      	bne.n	8011d58 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011d4e:	4b22      	ldr	r3, [pc, #136]	@ (8011dd8 <ip4_output_if_src+0x158>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	60da      	str	r2, [r3, #12]
 8011d56:	e003      	b.n	8011d60 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	2200      	movs	r2, #0
 8011d64:	729a      	strb	r2, [r3, #10]
 8011d66:	2200      	movs	r2, #0
 8011d68:	72da      	strb	r2, [r3, #11]
 8011d6a:	e00f      	b.n	8011d8c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	895b      	ldrh	r3, [r3, #10]
 8011d70:	2b13      	cmp	r3, #19
 8011d72:	d802      	bhi.n	8011d7a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011d74:	f06f 0301 	mvn.w	r3, #1
 8011d78:	e020      	b.n	8011dbc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	691b      	ldr	r3, [r3, #16]
 8011d84:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011d86:	f107 0314 	add.w	r3, r7, #20
 8011d8a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00c      	beq.n	8011dae <ip4_output_if_src+0x12e>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	891a      	ldrh	r2, [r3, #8]
 8011d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d906      	bls.n	8011dae <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f000 fe7d 	bl	8012aa4 <ip4_frag>
 8011daa:	4603      	mov	r3, r0
 8011dac:	e006      	b.n	8011dbc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db0:	695b      	ldr	r3, [r3, #20]
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	68f9      	ldr	r1, [r7, #12]
 8011db6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011db8:	4798      	blx	r3
 8011dba:	4603      	mov	r3, r0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3720      	adds	r7, #32
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	0801a750 	.word	0x0801a750
 8011dc8:	0801a784 	.word	0x0801a784
 8011dcc:	0801a790 	.word	0x0801a790
 8011dd0:	0801a7b8 	.word	0x0801a7b8
 8011dd4:	2000815a 	.word	0x2000815a
 8011dd8:	0801ac10 	.word	0x0801ac10

08011ddc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011df0:	d002      	beq.n	8011df8 <ip4_addr_isbroadcast_u32+0x1c>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d101      	bne.n	8011dfc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e02a      	b.n	8011e52 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e02:	f003 0302 	and.w	r3, r3, #2
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	e021      	b.n	8011e52 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	3304      	adds	r3, #4
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d101      	bne.n	8011e1e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e019      	b.n	8011e52 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	3304      	adds	r3, #4
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	405a      	eors	r2, r3
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	3308      	adds	r3, #8
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4013      	ands	r3, r2
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d10d      	bne.n	8011e50 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	3308      	adds	r3, #8
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	43da      	mvns	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	3308      	adds	r3, #8
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d101      	bne.n	8011e50 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e000      	b.n	8011e52 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011e50:	2300      	movs	r3, #0
  }
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3714      	adds	r7, #20
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
	...

08011e60 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b08a      	sub	sp, #40	@ 0x28
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8011e6a:	f107 030c 	add.w	r3, r7, #12
 8011e6e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8011e78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	4a89      	ldr	r2, [pc, #548]	@ (80120a4 <ip4addr_aton+0x244>)
 8011e80:	4413      	add	r3, r2
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	f003 0304 	and.w	r3, r3, #4
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d101      	bne.n	8011e90 <ip4addr_aton+0x30>
      return 0;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	e105      	b.n	801209c <ip4addr_aton+0x23c>
    }
    val = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8011e94:	230a      	movs	r3, #10
 8011e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8011e9a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e9e:	2b30      	cmp	r3, #48	@ 0x30
 8011ea0:	d11c      	bne.n	8011edc <ip4addr_aton+0x7c>
      c = *++cp;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	607b      	str	r3, [r7, #4]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8011eb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011eb4:	2b78      	cmp	r3, #120	@ 0x78
 8011eb6:	d003      	beq.n	8011ec0 <ip4addr_aton+0x60>
 8011eb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ebc:	2b58      	cmp	r3, #88	@ 0x58
 8011ebe:	d10a      	bne.n	8011ed6 <ip4addr_aton+0x76>
        base = 16;
 8011ec0:	2310      	movs	r3, #16
 8011ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	607b      	str	r3, [r7, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011ed4:	e002      	b.n	8011edc <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8011ed6:	2308      	movs	r3, #8
 8011ed8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8011edc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	4a70      	ldr	r2, [pc, #448]	@ (80120a4 <ip4addr_aton+0x244>)
 8011ee4:	4413      	add	r3, r2
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	f003 0304 	and.w	r3, r3, #4
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d011      	beq.n	8011f14 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8011ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ef6:	fb03 f202 	mul.w	r2, r3, r2
 8011efa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011efe:	4413      	add	r3, r2
 8011f00:	3b30      	subs	r3, #48	@ 0x30
 8011f02:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	3301      	adds	r3, #1
 8011f08:	607b      	str	r3, [r7, #4]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011f12:	e7e3      	b.n	8011edc <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8011f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011f18:	2b10      	cmp	r3, #16
 8011f1a:	d127      	bne.n	8011f6c <ip4addr_aton+0x10c>
 8011f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f20:	3301      	adds	r3, #1
 8011f22:	4a60      	ldr	r2, [pc, #384]	@ (80120a4 <ip4addr_aton+0x244>)
 8011f24:	4413      	add	r3, r2
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d01d      	beq.n	8011f6c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8011f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f32:	011b      	lsls	r3, r3, #4
 8011f34:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011f38:	f102 010a 	add.w	r1, r2, #10
 8011f3c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011f40:	3201      	adds	r2, #1
 8011f42:	4858      	ldr	r0, [pc, #352]	@ (80120a4 <ip4addr_aton+0x244>)
 8011f44:	4402      	add	r2, r0
 8011f46:	7812      	ldrb	r2, [r2, #0]
 8011f48:	f002 0203 	and.w	r2, r2, #3
 8011f4c:	2a02      	cmp	r2, #2
 8011f4e:	d101      	bne.n	8011f54 <ip4addr_aton+0xf4>
 8011f50:	2261      	movs	r2, #97	@ 0x61
 8011f52:	e000      	b.n	8011f56 <ip4addr_aton+0xf6>
 8011f54:	2241      	movs	r2, #65	@ 0x41
 8011f56:	1a8a      	subs	r2, r1, r2
 8011f58:	4313      	orrs	r3, r2
 8011f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	607b      	str	r3, [r7, #4]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8011f6a:	e7b7      	b.n	8011edc <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8011f6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f70:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f72:	d114      	bne.n	8011f9e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8011f74:	f107 030c 	add.w	r3, r7, #12
 8011f78:	330c      	adds	r3, #12
 8011f7a:	69fa      	ldr	r2, [r7, #28]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d301      	bcc.n	8011f84 <ip4addr_aton+0x124>
        return 0;
 8011f80:	2300      	movs	r3, #0
 8011f82:	e08b      	b.n	801209c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	1d1a      	adds	r2, r3, #4
 8011f88:	61fa      	str	r2, [r7, #28]
 8011f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f8c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	3301      	adds	r3, #1
 8011f92:	607b      	str	r3, [r7, #4]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8011f9c:	e76c      	b.n	8011e78 <ip4addr_aton+0x18>
    } else {
      break;
 8011f9e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8011fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00b      	beq.n	8011fc0 <ip4addr_aton+0x160>
 8011fa8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011fac:	3301      	adds	r3, #1
 8011fae:	4a3d      	ldr	r2, [pc, #244]	@ (80120a4 <ip4addr_aton+0x244>)
 8011fb0:	4413      	add	r3, r2
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	f003 0308 	and.w	r3, r3, #8
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d101      	bne.n	8011fc0 <ip4addr_aton+0x160>
    return 0;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	e06d      	b.n	801209c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8011fc0:	f107 030c 	add.w	r3, r7, #12
 8011fc4:	69fa      	ldr	r2, [r7, #28]
 8011fc6:	1ad3      	subs	r3, r2, r3
 8011fc8:	109b      	asrs	r3, r3, #2
 8011fca:	3301      	adds	r3, #1
 8011fcc:	2b04      	cmp	r3, #4
 8011fce:	d853      	bhi.n	8012078 <ip4addr_aton+0x218>
 8011fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8011fd8 <ip4addr_aton+0x178>)
 8011fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd6:	bf00      	nop
 8011fd8:	08011fed 	.word	0x08011fed
 8011fdc:	08012087 	.word	0x08012087
 8011fe0:	08011ff1 	.word	0x08011ff1
 8011fe4:	08012013 	.word	0x08012013
 8011fe8:	08012041 	.word	0x08012041

    case 0:
      return 0;       /* initial nondigit */
 8011fec:	2300      	movs	r3, #0
 8011fee:	e055      	b.n	801209c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011ff6:	d301      	bcc.n	8011ffc <ip4addr_aton+0x19c>
        return 0;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e04f      	b.n	801209c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2bff      	cmp	r3, #255	@ 0xff
 8012000:	d901      	bls.n	8012006 <ip4addr_aton+0x1a6>
        return 0;
 8012002:	2300      	movs	r3, #0
 8012004:	e04a      	b.n	801209c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	061b      	lsls	r3, r3, #24
 801200a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801200c:	4313      	orrs	r3, r2
 801200e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012010:	e03a      	b.n	8012088 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8012012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012018:	d301      	bcc.n	801201e <ip4addr_aton+0x1be>
        return 0;
 801201a:	2300      	movs	r3, #0
 801201c:	e03e      	b.n	801209c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	2bff      	cmp	r3, #255	@ 0xff
 8012022:	d802      	bhi.n	801202a <ip4addr_aton+0x1ca>
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	2bff      	cmp	r3, #255	@ 0xff
 8012028:	d901      	bls.n	801202e <ip4addr_aton+0x1ce>
        return 0;
 801202a:	2300      	movs	r3, #0
 801202c:	e036      	b.n	801209c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	061a      	lsls	r2, r3, #24
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	041b      	lsls	r3, r3, #16
 8012036:	4313      	orrs	r3, r2
 8012038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801203a:	4313      	orrs	r3, r2
 801203c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801203e:	e023      	b.n	8012088 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8012040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012042:	2bff      	cmp	r3, #255	@ 0xff
 8012044:	d901      	bls.n	801204a <ip4addr_aton+0x1ea>
        return 0;
 8012046:	2300      	movs	r3, #0
 8012048:	e028      	b.n	801209c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2bff      	cmp	r3, #255	@ 0xff
 801204e:	d805      	bhi.n	801205c <ip4addr_aton+0x1fc>
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	2bff      	cmp	r3, #255	@ 0xff
 8012054:	d802      	bhi.n	801205c <ip4addr_aton+0x1fc>
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	2bff      	cmp	r3, #255	@ 0xff
 801205a:	d901      	bls.n	8012060 <ip4addr_aton+0x200>
        return 0;
 801205c:	2300      	movs	r3, #0
 801205e:	e01d      	b.n	801209c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	061a      	lsls	r2, r3, #24
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	041b      	lsls	r3, r3, #16
 8012068:	431a      	orrs	r2, r3
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	021b      	lsls	r3, r3, #8
 801206e:	4313      	orrs	r3, r2
 8012070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012072:	4313      	orrs	r3, r2
 8012074:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012076:	e007      	b.n	8012088 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8012078:	4b0b      	ldr	r3, [pc, #44]	@ (80120a8 <ip4addr_aton+0x248>)
 801207a:	22f9      	movs	r2, #249	@ 0xf9
 801207c:	490b      	ldr	r1, [pc, #44]	@ (80120ac <ip4addr_aton+0x24c>)
 801207e:	480c      	ldr	r0, [pc, #48]	@ (80120b0 <ip4addr_aton+0x250>)
 8012080:	f001 fee4 	bl	8013e4c <iprintf>
      break;
 8012084:	e000      	b.n	8012088 <ip4addr_aton+0x228>
      break;
 8012086:	bf00      	nop
  }
  if (addr) {
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d005      	beq.n	801209a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801208e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012090:	f7f3 ff70 	bl	8005f74 <lwip_htonl>
 8012094:	4602      	mov	r2, r0
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801209a:	2301      	movs	r3, #1
}
 801209c:	4618      	mov	r0, r3
 801209e:	3728      	adds	r7, #40	@ 0x28
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	0801ae54 	.word	0x0801ae54
 80120a8:	0801a7e8 	.word	0x0801a7e8
 80120ac:	0801a824 	.word	0x0801a824
 80120b0:	0801a830 	.word	0x0801a830

080120b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80120be:	4b12      	ldr	r3, [pc, #72]	@ (8012108 <ip_reass_tmr+0x54>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80120c4:	e018      	b.n	80120f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	7fdb      	ldrb	r3, [r3, #31]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00b      	beq.n	80120e6 <ip_reass_tmr+0x32>
      r->timer--;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	7fdb      	ldrb	r3, [r3, #31]
 80120d2:	3b01      	subs	r3, #1
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	e008      	b.n	80120f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 f80a 	bl	801210c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d1e3      	bne.n	80120c6 <ip_reass_tmr+0x12>
    }
  }
}
 80120fe:	bf00      	nop
 8012100:	bf00      	nop
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}
 8012108:	2000815c 	.word	0x2000815c

0801210c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801211a:	683a      	ldr	r2, [r7, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	429a      	cmp	r2, r3
 8012120:	d105      	bne.n	801212e <ip_reass_free_complete_datagram+0x22>
 8012122:	4b45      	ldr	r3, [pc, #276]	@ (8012238 <ip_reass_free_complete_datagram+0x12c>)
 8012124:	22ab      	movs	r2, #171	@ 0xab
 8012126:	4945      	ldr	r1, [pc, #276]	@ (801223c <ip_reass_free_complete_datagram+0x130>)
 8012128:	4845      	ldr	r0, [pc, #276]	@ (8012240 <ip_reass_free_complete_datagram+0x134>)
 801212a:	f001 fe8f 	bl	8013e4c <iprintf>
  if (prev != NULL) {
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00a      	beq.n	801214a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	687a      	ldr	r2, [r7, #4]
 801213a:	429a      	cmp	r2, r3
 801213c:	d005      	beq.n	801214a <ip_reass_free_complete_datagram+0x3e>
 801213e:	4b3e      	ldr	r3, [pc, #248]	@ (8012238 <ip_reass_free_complete_datagram+0x12c>)
 8012140:	22ad      	movs	r2, #173	@ 0xad
 8012142:	4940      	ldr	r1, [pc, #256]	@ (8012244 <ip_reass_free_complete_datagram+0x138>)
 8012144:	483e      	ldr	r0, [pc, #248]	@ (8012240 <ip_reass_free_complete_datagram+0x134>)
 8012146:	f001 fe81 	bl	8013e4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	889b      	ldrh	r3, [r3, #4]
 8012156:	b29b      	uxth	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d12a      	bne.n	80121b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	6858      	ldr	r0, [r3, #4]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	3308      	adds	r3, #8
 8012172:	2214      	movs	r2, #20
 8012174:	4619      	mov	r1, r3
 8012176:	f001 ff9c 	bl	80140b2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801217a:	2101      	movs	r1, #1
 801217c:	69b8      	ldr	r0, [r7, #24]
 801217e:	f7ff faff 	bl	8011780 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012182:	69b8      	ldr	r0, [r7, #24]
 8012184:	f7f5 faf6 	bl	8007774 <pbuf_clen>
 8012188:	4603      	mov	r3, r0
 801218a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801218c:	8bfa      	ldrh	r2, [r7, #30]
 801218e:	8a7b      	ldrh	r3, [r7, #18]
 8012190:	4413      	add	r3, r2
 8012192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012196:	db05      	blt.n	80121a4 <ip_reass_free_complete_datagram+0x98>
 8012198:	4b27      	ldr	r3, [pc, #156]	@ (8012238 <ip_reass_free_complete_datagram+0x12c>)
 801219a:	22bc      	movs	r2, #188	@ 0xbc
 801219c:	492a      	ldr	r1, [pc, #168]	@ (8012248 <ip_reass_free_complete_datagram+0x13c>)
 801219e:	4828      	ldr	r0, [pc, #160]	@ (8012240 <ip_reass_free_complete_datagram+0x134>)
 80121a0:	f001 fe54 	bl	8013e4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80121a4:	8bfa      	ldrh	r2, [r7, #30]
 80121a6:	8a7b      	ldrh	r3, [r7, #18]
 80121a8:	4413      	add	r3, r2
 80121aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80121ac:	69b8      	ldr	r0, [r7, #24]
 80121ae:	f7f5 fa59 	bl	8007664 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80121b8:	e01f      	b.n	80121fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80121ca:	68f8      	ldr	r0, [r7, #12]
 80121cc:	f7f5 fad2 	bl	8007774 <pbuf_clen>
 80121d0:	4603      	mov	r3, r0
 80121d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80121d4:	8bfa      	ldrh	r2, [r7, #30]
 80121d6:	8a7b      	ldrh	r3, [r7, #18]
 80121d8:	4413      	add	r3, r2
 80121da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121de:	db05      	blt.n	80121ec <ip_reass_free_complete_datagram+0xe0>
 80121e0:	4b15      	ldr	r3, [pc, #84]	@ (8012238 <ip_reass_free_complete_datagram+0x12c>)
 80121e2:	22cc      	movs	r2, #204	@ 0xcc
 80121e4:	4918      	ldr	r1, [pc, #96]	@ (8012248 <ip_reass_free_complete_datagram+0x13c>)
 80121e6:	4816      	ldr	r0, [pc, #88]	@ (8012240 <ip_reass_free_complete_datagram+0x134>)
 80121e8:	f001 fe30 	bl	8013e4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80121ec:	8bfa      	ldrh	r2, [r7, #30]
 80121ee:	8a7b      	ldrh	r3, [r7, #18]
 80121f0:	4413      	add	r3, r2
 80121f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f7f5 fa35 	bl	8007664 <pbuf_free>
  while (p != NULL) {
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d1dc      	bne.n	80121ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012200:	6839      	ldr	r1, [r7, #0]
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f8c2 	bl	801238c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012208:	4b10      	ldr	r3, [pc, #64]	@ (801224c <ip_reass_free_complete_datagram+0x140>)
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	8bfa      	ldrh	r2, [r7, #30]
 801220e:	429a      	cmp	r2, r3
 8012210:	d905      	bls.n	801221e <ip_reass_free_complete_datagram+0x112>
 8012212:	4b09      	ldr	r3, [pc, #36]	@ (8012238 <ip_reass_free_complete_datagram+0x12c>)
 8012214:	22d2      	movs	r2, #210	@ 0xd2
 8012216:	490e      	ldr	r1, [pc, #56]	@ (8012250 <ip_reass_free_complete_datagram+0x144>)
 8012218:	4809      	ldr	r0, [pc, #36]	@ (8012240 <ip_reass_free_complete_datagram+0x134>)
 801221a:	f001 fe17 	bl	8013e4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801221e:	4b0b      	ldr	r3, [pc, #44]	@ (801224c <ip_reass_free_complete_datagram+0x140>)
 8012220:	881a      	ldrh	r2, [r3, #0]
 8012222:	8bfb      	ldrh	r3, [r7, #30]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	b29a      	uxth	r2, r3
 8012228:	4b08      	ldr	r3, [pc, #32]	@ (801224c <ip_reass_free_complete_datagram+0x140>)
 801222a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801222c:	8bfb      	ldrh	r3, [r7, #30]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3720      	adds	r7, #32
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	0801a858 	.word	0x0801a858
 801223c:	0801a894 	.word	0x0801a894
 8012240:	0801a8a0 	.word	0x0801a8a0
 8012244:	0801a8c8 	.word	0x0801a8c8
 8012248:	0801a8dc 	.word	0x0801a8dc
 801224c:	20008160 	.word	0x20008160
 8012250:	0801a8fc 	.word	0x0801a8fc

08012254 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b08a      	sub	sp, #40	@ 0x28
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801225e:	2300      	movs	r3, #0
 8012260:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012262:	2300      	movs	r3, #0
 8012264:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012266:	2300      	movs	r3, #0
 8012268:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801226a:	2300      	movs	r3, #0
 801226c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801226e:	2300      	movs	r3, #0
 8012270:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012272:	4b28      	ldr	r3, [pc, #160]	@ (8012314 <ip_reass_remove_oldest_datagram+0xc0>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012278:	e030      	b.n	80122dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227c:	695a      	ldr	r2, [r3, #20]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	429a      	cmp	r2, r3
 8012284:	d10c      	bne.n	80122a0 <ip_reass_remove_oldest_datagram+0x4c>
 8012286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012288:	699a      	ldr	r2, [r3, #24]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	691b      	ldr	r3, [r3, #16]
 801228e:	429a      	cmp	r2, r3
 8012290:	d106      	bne.n	80122a0 <ip_reass_remove_oldest_datagram+0x4c>
 8012292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012294:	899a      	ldrh	r2, [r3, #12]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	889b      	ldrh	r3, [r3, #4]
 801229a:	b29b      	uxth	r3, r3
 801229c:	429a      	cmp	r2, r3
 801229e:	d014      	beq.n	80122ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	3301      	adds	r3, #1
 80122a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d104      	bne.n	80122b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80122ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	61bb      	str	r3, [r7, #24]
 80122b4:	e009      	b.n	80122ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80122b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b8:	7fda      	ldrb	r2, [r3, #31]
 80122ba:	6a3b      	ldr	r3, [r7, #32]
 80122bc:	7fdb      	ldrb	r3, [r3, #31]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d803      	bhi.n	80122ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80122c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80122ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d001      	beq.n	80122d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80122d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80122d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80122dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d1cb      	bne.n	801227a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80122e2:	6a3b      	ldr	r3, [r7, #32]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d008      	beq.n	80122fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80122e8:	69b9      	ldr	r1, [r7, #24]
 80122ea:	6a38      	ldr	r0, [r7, #32]
 80122ec:	f7ff ff0e 	bl	801210c <ip_reass_free_complete_datagram>
 80122f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80122f2:	697a      	ldr	r2, [r7, #20]
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	4413      	add	r3, r2
 80122f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80122fa:	697a      	ldr	r2, [r7, #20]
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	429a      	cmp	r2, r3
 8012300:	da02      	bge.n	8012308 <ip_reass_remove_oldest_datagram+0xb4>
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	2b01      	cmp	r3, #1
 8012306:	dcac      	bgt.n	8012262 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012308:	697b      	ldr	r3, [r7, #20]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3728      	adds	r7, #40	@ 0x28
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	2000815c 	.word	0x2000815c

08012318 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012322:	2004      	movs	r0, #4
 8012324:	f7f4 faac 	bl	8006880 <memp_malloc>
 8012328:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d110      	bne.n	8012352 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012330:	6839      	ldr	r1, [r7, #0]
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff ff8e 	bl	8012254 <ip_reass_remove_oldest_datagram>
 8012338:	4602      	mov	r2, r0
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	4293      	cmp	r3, r2
 801233e:	dc03      	bgt.n	8012348 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012340:	2004      	movs	r0, #4
 8012342:	f7f4 fa9d 	bl	8006880 <memp_malloc>
 8012346:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801234e:	2300      	movs	r3, #0
 8012350:	e016      	b.n	8012380 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012352:	2220      	movs	r2, #32
 8012354:	2100      	movs	r1, #0
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f001 fe19 	bl	8013f8e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	220f      	movs	r2, #15
 8012360:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012362:	4b09      	ldr	r3, [pc, #36]	@ (8012388 <ip_reass_enqueue_new_datagram+0x70>)
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801236a:	4a07      	ldr	r2, [pc, #28]	@ (8012388 <ip_reass_enqueue_new_datagram+0x70>)
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	3308      	adds	r3, #8
 8012374:	2214      	movs	r2, #20
 8012376:	6879      	ldr	r1, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	f001 fe9a 	bl	80140b2 <memcpy>
  return ipr;
 801237e:	68fb      	ldr	r3, [r7, #12]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3710      	adds	r7, #16
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	2000815c 	.word	0x2000815c

0801238c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012396:	4b10      	ldr	r3, [pc, #64]	@ (80123d8 <ip_reass_dequeue_datagram+0x4c>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	429a      	cmp	r2, r3
 801239e:	d104      	bne.n	80123aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	4a0c      	ldr	r2, [pc, #48]	@ (80123d8 <ip_reass_dequeue_datagram+0x4c>)
 80123a6:	6013      	str	r3, [r2, #0]
 80123a8:	e00d      	b.n	80123c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <ip_reass_dequeue_datagram+0x32>
 80123b0:	4b0a      	ldr	r3, [pc, #40]	@ (80123dc <ip_reass_dequeue_datagram+0x50>)
 80123b2:	f240 1245 	movw	r2, #325	@ 0x145
 80123b6:	490a      	ldr	r1, [pc, #40]	@ (80123e0 <ip_reass_dequeue_datagram+0x54>)
 80123b8:	480a      	ldr	r0, [pc, #40]	@ (80123e4 <ip_reass_dequeue_datagram+0x58>)
 80123ba:	f001 fd47 	bl	8013e4c <iprintf>
    prev->next = ipr->next;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80123c6:	6879      	ldr	r1, [r7, #4]
 80123c8:	2004      	movs	r0, #4
 80123ca:	f7f4 fac9 	bl	8006960 <memp_free>
}
 80123ce:	bf00      	nop
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	2000815c 	.word	0x2000815c
 80123dc:	0801a858 	.word	0x0801a858
 80123e0:	0801a920 	.word	0x0801a920
 80123e4:	0801a8a0 	.word	0x0801a8a0

080123e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08c      	sub	sp, #48	@ 0x30
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80123f4:	2300      	movs	r3, #0
 80123f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80123f8:	2301      	movs	r3, #1
 80123fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	885b      	ldrh	r3, [r3, #2]
 8012406:	b29b      	uxth	r3, r3
 8012408:	4618      	mov	r0, r3
 801240a:	f7f3 fd9d 	bl	8005f48 <lwip_htons>
 801240e:	4603      	mov	r3, r0
 8012410:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f003 030f 	and.w	r3, r3, #15
 801241a:	b2db      	uxtb	r3, r3
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012420:	7e7b      	ldrb	r3, [r7, #25]
 8012422:	b29b      	uxth	r3, r3
 8012424:	8b7a      	ldrh	r2, [r7, #26]
 8012426:	429a      	cmp	r2, r3
 8012428:	d202      	bcs.n	8012430 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801242a:	f04f 33ff 	mov.w	r3, #4294967295
 801242e:	e135      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012430:	7e7b      	ldrb	r3, [r7, #25]
 8012432:	b29b      	uxth	r3, r3
 8012434:	8b7a      	ldrh	r2, [r7, #26]
 8012436:	1ad3      	subs	r3, r2, r3
 8012438:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	88db      	ldrh	r3, [r3, #6]
 801243e:	b29b      	uxth	r3, r3
 8012440:	4618      	mov	r0, r3
 8012442:	f7f3 fd81 	bl	8005f48 <lwip_htons>
 8012446:	4603      	mov	r3, r0
 8012448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801244c:	b29b      	uxth	r3, r3
 801244e:	00db      	lsls	r3, r3, #3
 8012450:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8012458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801245a:	2200      	movs	r2, #0
 801245c:	701a      	strb	r2, [r3, #0]
 801245e:	2200      	movs	r2, #0
 8012460:	705a      	strb	r2, [r3, #1]
 8012462:	2200      	movs	r2, #0
 8012464:	709a      	strb	r2, [r3, #2]
 8012466:	2200      	movs	r2, #0
 8012468:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801246a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801246c:	8afa      	ldrh	r2, [r7, #22]
 801246e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012470:	8afa      	ldrh	r2, [r7, #22]
 8012472:	8b7b      	ldrh	r3, [r7, #26]
 8012474:	4413      	add	r3, r2
 8012476:	b29a      	uxth	r2, r3
 8012478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801247a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801247e:	88db      	ldrh	r3, [r3, #6]
 8012480:	b29b      	uxth	r3, r3
 8012482:	8afa      	ldrh	r2, [r7, #22]
 8012484:	429a      	cmp	r2, r3
 8012486:	d902      	bls.n	801248e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012488:	f04f 33ff 	mov.w	r3, #4294967295
 801248c:	e106      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	627b      	str	r3, [r7, #36]	@ 0x24
 8012494:	e068      	b.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801249e:	889b      	ldrh	r3, [r3, #4]
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	889b      	ldrh	r3, [r3, #4]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d235      	bcs.n	8012518 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80124ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80124b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d020      	beq.n	80124fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80124b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ba:	889b      	ldrh	r3, [r3, #4]
 80124bc:	b29a      	uxth	r2, r3
 80124be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c0:	88db      	ldrh	r3, [r3, #6]
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d307      	bcc.n	80124d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80124c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ca:	88db      	ldrh	r3, [r3, #6]
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	889b      	ldrh	r3, [r3, #4]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d902      	bls.n	80124de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124d8:	f04f 33ff 	mov.w	r3, #4294967295
 80124dc:	e0de      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80124de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80124e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124e6:	88db      	ldrh	r3, [r3, #6]
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ec:	889b      	ldrh	r3, [r3, #4]
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d03d      	beq.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80124f4:	2300      	movs	r3, #0
 80124f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80124f8:	e03a      	b.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80124fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fc:	88db      	ldrh	r3, [r3, #6]
 80124fe:	b29a      	uxth	r2, r3
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	889b      	ldrh	r3, [r3, #4]
 8012504:	b29b      	uxth	r3, r3
 8012506:	429a      	cmp	r2, r3
 8012508:	d902      	bls.n	8012510 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801250a:	f04f 33ff 	mov.w	r3, #4294967295
 801250e:	e0c5      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	68ba      	ldr	r2, [r7, #8]
 8012514:	605a      	str	r2, [r3, #4]
      break;
 8012516:	e02b      	b.n	8012570 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251a:	889b      	ldrh	r3, [r3, #4]
 801251c:	b29a      	uxth	r2, r3
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	889b      	ldrh	r3, [r3, #4]
 8012522:	b29b      	uxth	r3, r3
 8012524:	429a      	cmp	r2, r3
 8012526:	d102      	bne.n	801252e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295
 801252c:	e0b6      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801252e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012530:	889b      	ldrh	r3, [r3, #4]
 8012532:	b29a      	uxth	r2, r3
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	88db      	ldrh	r3, [r3, #6]
 8012538:	b29b      	uxth	r3, r3
 801253a:	429a      	cmp	r2, r3
 801253c:	d202      	bcs.n	8012544 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801253e:	f04f 33ff 	mov.w	r3, #4294967295
 8012542:	e0ab      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012546:	2b00      	cmp	r3, #0
 8012548:	d009      	beq.n	801255e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801254c:	88db      	ldrh	r3, [r3, #6]
 801254e:	b29a      	uxth	r2, r3
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	889b      	ldrh	r3, [r3, #4]
 8012554:	b29b      	uxth	r3, r3
 8012556:	429a      	cmp	r2, r3
 8012558:	d001      	beq.n	801255e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8012568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256a:	2b00      	cmp	r3, #0
 801256c:	d193      	bne.n	8012496 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801256e:	e000      	b.n	8012572 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012570:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012574:	2b00      	cmp	r3, #0
 8012576:	d12d      	bne.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801257a:	2b00      	cmp	r3, #0
 801257c:	d01c      	beq.n	80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012580:	88db      	ldrh	r3, [r3, #6]
 8012582:	b29a      	uxth	r2, r3
 8012584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012586:	889b      	ldrh	r3, [r3, #4]
 8012588:	b29b      	uxth	r3, r3
 801258a:	429a      	cmp	r2, r3
 801258c:	d906      	bls.n	801259c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801258e:	4b45      	ldr	r3, [pc, #276]	@ (80126a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012590:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8012594:	4944      	ldr	r1, [pc, #272]	@ (80126a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012596:	4845      	ldr	r0, [pc, #276]	@ (80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012598:	f001 fc58 	bl	8013e4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801259c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80125a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125a4:	88db      	ldrh	r3, [r3, #6]
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125aa:	889b      	ldrh	r3, [r3, #4]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d010      	beq.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	623b      	str	r3, [r7, #32]
 80125b6:	e00d      	b.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d006      	beq.n	80125ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80125c0:	4b38      	ldr	r3, [pc, #224]	@ (80126a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125c2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80125c6:	493a      	ldr	r1, [pc, #232]	@ (80126b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80125c8:	4838      	ldr	r0, [pc, #224]	@ (80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125ca:	f001 fc3f 	bl	8013e4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d105      	bne.n	80125e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	7f9b      	ldrb	r3, [r3, #30]
 80125de:	f003 0301 	and.w	r3, r3, #1
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d059      	beq.n	801269a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80125e6:	6a3b      	ldr	r3, [r7, #32]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d04f      	beq.n	801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d006      	beq.n	8012602 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	889b      	ldrh	r3, [r3, #4]
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d002      	beq.n	8012608 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	623b      	str	r3, [r7, #32]
 8012606:	e041      	b.n	801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8012612:	e012      	b.n	801263a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801261c:	88db      	ldrh	r3, [r3, #6]
 801261e:	b29a      	uxth	r2, r3
 8012620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012622:	889b      	ldrh	r3, [r3, #4]
 8012624:	b29b      	uxth	r3, r3
 8012626:	429a      	cmp	r2, r3
 8012628:	d002      	beq.n	8012630 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	623b      	str	r3, [r7, #32]
            break;
 801262e:	e007      	b.n	8012640 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012632:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8012634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801263c:	2b00      	cmp	r3, #0
 801263e:	d1e9      	bne.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012640:	6a3b      	ldr	r3, [r7, #32]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d022      	beq.n	801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801264e:	4b15      	ldr	r3, [pc, #84]	@ (80126a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012650:	f240 12df 	movw	r2, #479	@ 0x1df
 8012654:	4917      	ldr	r1, [pc, #92]	@ (80126b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012656:	4815      	ldr	r0, [pc, #84]	@ (80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012658:	f001 fbf8 	bl	8013e4c <iprintf>
          LWIP_ASSERT("sanity check",
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012664:	429a      	cmp	r2, r3
 8012666:	d106      	bne.n	8012676 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012668:	4b0e      	ldr	r3, [pc, #56]	@ (80126a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801266a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801266e:	4911      	ldr	r1, [pc, #68]	@ (80126b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012670:	480e      	ldr	r0, [pc, #56]	@ (80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012672:	f001 fbeb 	bl	8013e4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d006      	beq.n	801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801267e:	4b09      	ldr	r3, [pc, #36]	@ (80126a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012680:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012684:	490c      	ldr	r1, [pc, #48]	@ (80126b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012686:	4809      	ldr	r0, [pc, #36]	@ (80126ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012688:	f001 fbe0 	bl	8013e4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	2b00      	cmp	r3, #0
 8012690:	bf14      	ite	ne
 8012692:	2301      	movne	r3, #1
 8012694:	2300      	moveq	r3, #0
 8012696:	b2db      	uxtb	r3, r3
 8012698:	e000      	b.n	801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801269a:	2300      	movs	r3, #0
}
 801269c:	4618      	mov	r0, r3
 801269e:	3730      	adds	r7, #48	@ 0x30
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	0801a858 	.word	0x0801a858
 80126a8:	0801a93c 	.word	0x0801a93c
 80126ac:	0801a8a0 	.word	0x0801a8a0
 80126b0:	0801a95c 	.word	0x0801a95c
 80126b4:	0801a994 	.word	0x0801a994
 80126b8:	0801a9a4 	.word	0x0801a9a4

080126bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b08e      	sub	sp, #56	@ 0x38
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80126ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	f003 030f 	and.w	r3, r3, #15
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	009b      	lsls	r3, r3, #2
 80126d6:	b2db      	uxtb	r3, r3
 80126d8:	2b14      	cmp	r3, #20
 80126da:	f040 8171 	bne.w	80129c0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	88db      	ldrh	r3, [r3, #6]
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7f3 fc2f 	bl	8005f48 <lwip_htons>
 80126ea:	4603      	mov	r3, r0
 80126ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	00db      	lsls	r3, r3, #3
 80126f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80126f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126f8:	885b      	ldrh	r3, [r3, #2]
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7f3 fc23 	bl	8005f48 <lwip_htons>
 8012702:	4603      	mov	r3, r0
 8012704:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	f003 030f 	and.w	r3, r3, #15
 801270e:	b2db      	uxtb	r3, r3
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8012716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801271a:	b29b      	uxth	r3, r3
 801271c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801271e:	429a      	cmp	r2, r3
 8012720:	f0c0 8150 	bcc.w	80129c4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012728:	b29b      	uxth	r3, r3
 801272a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801272c:	1ad3      	subs	r3, r2, r3
 801272e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f7f5 f81f 	bl	8007774 <pbuf_clen>
 8012736:	4603      	mov	r3, r0
 8012738:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801273a:	4b8c      	ldr	r3, [pc, #560]	@ (801296c <ip4_reass+0x2b0>)
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	461a      	mov	r2, r3
 8012740:	8c3b      	ldrh	r3, [r7, #32]
 8012742:	4413      	add	r3, r2
 8012744:	2b0a      	cmp	r3, #10
 8012746:	dd10      	ble.n	801276a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012748:	8c3b      	ldrh	r3, [r7, #32]
 801274a:	4619      	mov	r1, r3
 801274c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801274e:	f7ff fd81 	bl	8012254 <ip_reass_remove_oldest_datagram>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 8137 	beq.w	80129c8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801275a:	4b84      	ldr	r3, [pc, #528]	@ (801296c <ip4_reass+0x2b0>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	461a      	mov	r2, r3
 8012760:	8c3b      	ldrh	r3, [r7, #32]
 8012762:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012764:	2b0a      	cmp	r3, #10
 8012766:	f300 812f 	bgt.w	80129c8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801276a:	4b81      	ldr	r3, [pc, #516]	@ (8012970 <ip4_reass+0x2b4>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012770:	e015      	b.n	801279e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012774:	695a      	ldr	r2, [r3, #20]
 8012776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012778:	68db      	ldr	r3, [r3, #12]
 801277a:	429a      	cmp	r2, r3
 801277c:	d10c      	bne.n	8012798 <ip4_reass+0xdc>
 801277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012780:	699a      	ldr	r2, [r3, #24]
 8012782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012784:	691b      	ldr	r3, [r3, #16]
 8012786:	429a      	cmp	r2, r3
 8012788:	d106      	bne.n	8012798 <ip4_reass+0xdc>
 801278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278c:	899a      	ldrh	r2, [r3, #12]
 801278e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012790:	889b      	ldrh	r3, [r3, #4]
 8012792:	b29b      	uxth	r3, r3
 8012794:	429a      	cmp	r2, r3
 8012796:	d006      	beq.n	80127a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	633b      	str	r3, [r7, #48]	@ 0x30
 801279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d1e6      	bne.n	8012772 <ip4_reass+0xb6>
 80127a4:	e000      	b.n	80127a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80127a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80127a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d109      	bne.n	80127c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80127ae:	8c3b      	ldrh	r3, [r7, #32]
 80127b0:	4619      	mov	r1, r3
 80127b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80127b4:	f7ff fdb0 	bl	8012318 <ip_reass_enqueue_new_datagram>
 80127b8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80127ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d11c      	bne.n	80127fa <ip4_reass+0x13e>
      goto nullreturn;
 80127c0:	e105      	b.n	80129ce <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80127c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c4:	88db      	ldrh	r3, [r3, #6]
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7f3 fbbd 	bl	8005f48 <lwip_htons>
 80127ce:	4603      	mov	r3, r0
 80127d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d110      	bne.n	80127fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80127d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127da:	89db      	ldrh	r3, [r3, #14]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f3 fbb3 	bl	8005f48 <lwip_htons>
 80127e2:	4603      	mov	r3, r0
 80127e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d006      	beq.n	80127fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80127ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127ee:	3308      	adds	r3, #8
 80127f0:	2214      	movs	r2, #20
 80127f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127f4:	4618      	mov	r0, r3
 80127f6:	f001 fc5c 	bl	80140b2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80127fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127fc:	88db      	ldrh	r3, [r3, #6]
 80127fe:	b29b      	uxth	r3, r3
 8012800:	f003 0320 	and.w	r3, r3, #32
 8012804:	2b00      	cmp	r3, #0
 8012806:	bf0c      	ite	eq
 8012808:	2301      	moveq	r3, #1
 801280a:	2300      	movne	r3, #0
 801280c:	b2db      	uxtb	r3, r3
 801280e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012810:	69fb      	ldr	r3, [r7, #28]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00e      	beq.n	8012834 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012816:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012818:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801281a:	4413      	add	r3, r2
 801281c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801281e:	8b7a      	ldrh	r2, [r7, #26]
 8012820:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012822:	429a      	cmp	r2, r3
 8012824:	f0c0 80a0 	bcc.w	8012968 <ip4_reass+0x2ac>
 8012828:	8b7b      	ldrh	r3, [r7, #26]
 801282a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801282e:	4293      	cmp	r3, r2
 8012830:	f200 809a 	bhi.w	8012968 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012834:	69fa      	ldr	r2, [r7, #28]
 8012836:	6879      	ldr	r1, [r7, #4]
 8012838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801283a:	f7ff fdd5 	bl	80123e8 <ip_reass_chain_frag_into_datagram_and_validate>
 801283e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012846:	f000 809b 	beq.w	8012980 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801284a:	4b48      	ldr	r3, [pc, #288]	@ (801296c <ip4_reass+0x2b0>)
 801284c:	881a      	ldrh	r2, [r3, #0]
 801284e:	8c3b      	ldrh	r3, [r7, #32]
 8012850:	4413      	add	r3, r2
 8012852:	b29a      	uxth	r2, r3
 8012854:	4b45      	ldr	r3, [pc, #276]	@ (801296c <ip4_reass+0x2b0>)
 8012856:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00d      	beq.n	801287a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801285e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012860:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012862:	4413      	add	r3, r2
 8012864:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012868:	8a7a      	ldrh	r2, [r7, #18]
 801286a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801286e:	7f9b      	ldrb	r3, [r3, #30]
 8012870:	f043 0301 	orr.w	r3, r3, #1
 8012874:	b2da      	uxtb	r2, r3
 8012876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012878:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2b01      	cmp	r3, #1
 801287e:	d171      	bne.n	8012964 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012882:	8b9b      	ldrh	r3, [r3, #28]
 8012884:	3314      	adds	r3, #20
 8012886:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801289c:	3308      	adds	r3, #8
 801289e:	2214      	movs	r2, #20
 80128a0:	4619      	mov	r1, r3
 80128a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80128a4:	f001 fc05 	bl	80140b2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80128a8:	8a3b      	ldrh	r3, [r7, #16]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7f3 fb4c 	bl	8005f48 <lwip_htons>
 80128b0:	4603      	mov	r3, r0
 80128b2:	461a      	mov	r2, r3
 80128b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80128b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ba:	2200      	movs	r2, #0
 80128bc:	719a      	strb	r2, [r3, #6]
 80128be:	2200      	movs	r2, #0
 80128c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80128c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128c4:	2200      	movs	r2, #0
 80128c6:	729a      	strb	r2, [r3, #10]
 80128c8:	2200      	movs	r2, #0
 80128ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80128cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80128d2:	e00d      	b.n	80128f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80128d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80128da:	2114      	movs	r1, #20
 80128dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80128de:	f7f4 fe3b 	bl	8007558 <pbuf_remove_header>
      pbuf_cat(p, r);
 80128e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f7f4 ff7f 	bl	80077e8 <pbuf_cat>
      r = iprh->next_pbuf;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80128f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1ee      	bne.n	80128d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80128f6:	4b1e      	ldr	r3, [pc, #120]	@ (8012970 <ip4_reass+0x2b4>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d102      	bne.n	8012906 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012900:	2300      	movs	r3, #0
 8012902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012904:	e010      	b.n	8012928 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012906:	4b1a      	ldr	r3, [pc, #104]	@ (8012970 <ip4_reass+0x2b4>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801290c:	e007      	b.n	801291e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801290e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012914:	429a      	cmp	r2, r3
 8012916:	d006      	beq.n	8012926 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801291e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1f4      	bne.n	801290e <ip4_reass+0x252>
 8012924:	e000      	b.n	8012928 <ip4_reass+0x26c>
          break;
 8012926:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012928:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801292a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801292c:	f7ff fd2e 	bl	801238c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7f4 ff1f 	bl	8007774 <pbuf_clen>
 8012936:	4603      	mov	r3, r0
 8012938:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801293a:	4b0c      	ldr	r3, [pc, #48]	@ (801296c <ip4_reass+0x2b0>)
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	8c3a      	ldrh	r2, [r7, #32]
 8012940:	429a      	cmp	r2, r3
 8012942:	d906      	bls.n	8012952 <ip4_reass+0x296>
 8012944:	4b0b      	ldr	r3, [pc, #44]	@ (8012974 <ip4_reass+0x2b8>)
 8012946:	f240 229b 	movw	r2, #667	@ 0x29b
 801294a:	490b      	ldr	r1, [pc, #44]	@ (8012978 <ip4_reass+0x2bc>)
 801294c:	480b      	ldr	r0, [pc, #44]	@ (801297c <ip4_reass+0x2c0>)
 801294e:	f001 fa7d 	bl	8013e4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012952:	4b06      	ldr	r3, [pc, #24]	@ (801296c <ip4_reass+0x2b0>)
 8012954:	881a      	ldrh	r2, [r3, #0]
 8012956:	8c3b      	ldrh	r3, [r7, #32]
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	b29a      	uxth	r2, r3
 801295c:	4b03      	ldr	r3, [pc, #12]	@ (801296c <ip4_reass+0x2b0>)
 801295e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	e038      	b.n	80129d6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	e036      	b.n	80129d6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012968:	bf00      	nop
 801296a:	e00a      	b.n	8012982 <ip4_reass+0x2c6>
 801296c:	20008160 	.word	0x20008160
 8012970:	2000815c 	.word	0x2000815c
 8012974:	0801a858 	.word	0x0801a858
 8012978:	0801a9c8 	.word	0x0801a9c8
 801297c:	0801a8a0 	.word	0x0801a8a0
    goto nullreturn_ipr;
 8012980:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012984:	2b00      	cmp	r3, #0
 8012986:	d106      	bne.n	8012996 <ip4_reass+0x2da>
 8012988:	4b15      	ldr	r3, [pc, #84]	@ (80129e0 <ip4_reass+0x324>)
 801298a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801298e:	4915      	ldr	r1, [pc, #84]	@ (80129e4 <ip4_reass+0x328>)
 8012990:	4815      	ldr	r0, [pc, #84]	@ (80129e8 <ip4_reass+0x32c>)
 8012992:	f001 fa5b 	bl	8013e4c <iprintf>
  if (ipr->p == NULL) {
 8012996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d116      	bne.n	80129cc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801299e:	4b13      	ldr	r3, [pc, #76]	@ (80129ec <ip4_reass+0x330>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d006      	beq.n	80129b6 <ip4_reass+0x2fa>
 80129a8:	4b0d      	ldr	r3, [pc, #52]	@ (80129e0 <ip4_reass+0x324>)
 80129aa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80129ae:	4910      	ldr	r1, [pc, #64]	@ (80129f0 <ip4_reass+0x334>)
 80129b0:	480d      	ldr	r0, [pc, #52]	@ (80129e8 <ip4_reass+0x32c>)
 80129b2:	f001 fa4b 	bl	8013e4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80129b6:	2100      	movs	r1, #0
 80129b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129ba:	f7ff fce7 	bl	801238c <ip_reass_dequeue_datagram>
 80129be:	e006      	b.n	80129ce <ip4_reass+0x312>
    goto nullreturn;
 80129c0:	bf00      	nop
 80129c2:	e004      	b.n	80129ce <ip4_reass+0x312>
    goto nullreturn;
 80129c4:	bf00      	nop
 80129c6:	e002      	b.n	80129ce <ip4_reass+0x312>
      goto nullreturn;
 80129c8:	bf00      	nop
 80129ca:	e000      	b.n	80129ce <ip4_reass+0x312>
  }

nullreturn:
 80129cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7f4 fe48 	bl	8007664 <pbuf_free>
  return NULL;
 80129d4:	2300      	movs	r3, #0
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3738      	adds	r7, #56	@ 0x38
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	0801a858 	.word	0x0801a858
 80129e4:	0801a9e4 	.word	0x0801a9e4
 80129e8:	0801a8a0 	.word	0x0801a8a0
 80129ec:	2000815c 	.word	0x2000815c
 80129f0:	0801a9f0 	.word	0x0801a9f0

080129f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80129f8:	2005      	movs	r0, #5
 80129fa:	f7f3 ff41 	bl	8006880 <memp_malloc>
 80129fe:	4603      	mov	r3, r0
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d106      	bne.n	8012a20 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012a12:	4b07      	ldr	r3, [pc, #28]	@ (8012a30 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012a14:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012a18:	4906      	ldr	r1, [pc, #24]	@ (8012a34 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012a1a:	4807      	ldr	r0, [pc, #28]	@ (8012a38 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012a1c:	f001 fa16 	bl	8013e4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012a20:	6879      	ldr	r1, [r7, #4]
 8012a22:	2005      	movs	r0, #5
 8012a24:	f7f3 ff9c 	bl	8006960 <memp_free>
}
 8012a28:	bf00      	nop
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	0801a858 	.word	0x0801a858
 8012a34:	0801aa10 	.word	0x0801aa10
 8012a38:	0801a8a0 	.word	0x0801a8a0

08012a3c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d106      	bne.n	8012a5c <ipfrag_free_pbuf_custom+0x20>
 8012a4e:	4b11      	ldr	r3, [pc, #68]	@ (8012a94 <ipfrag_free_pbuf_custom+0x58>)
 8012a50:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012a54:	4910      	ldr	r1, [pc, #64]	@ (8012a98 <ipfrag_free_pbuf_custom+0x5c>)
 8012a56:	4811      	ldr	r0, [pc, #68]	@ (8012a9c <ipfrag_free_pbuf_custom+0x60>)
 8012a58:	f001 f9f8 	bl	8013e4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d006      	beq.n	8012a72 <ipfrag_free_pbuf_custom+0x36>
 8012a64:	4b0b      	ldr	r3, [pc, #44]	@ (8012a94 <ipfrag_free_pbuf_custom+0x58>)
 8012a66:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012a6a:	490d      	ldr	r1, [pc, #52]	@ (8012aa0 <ipfrag_free_pbuf_custom+0x64>)
 8012a6c:	480b      	ldr	r0, [pc, #44]	@ (8012a9c <ipfrag_free_pbuf_custom+0x60>)
 8012a6e:	f001 f9ed 	bl	8013e4c <iprintf>
  if (pcr->original != NULL) {
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	695b      	ldr	r3, [r3, #20]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d004      	beq.n	8012a84 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	695b      	ldr	r3, [r3, #20]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f4 fdf0 	bl	8007664 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f7ff ffbd 	bl	8012a04 <ip_frag_free_pbuf_custom_ref>
}
 8012a8a:	bf00      	nop
 8012a8c:	3710      	adds	r7, #16
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	0801a858 	.word	0x0801a858
 8012a98:	0801aa1c 	.word	0x0801aa1c
 8012a9c:	0801a8a0 	.word	0x0801a8a0
 8012aa0:	0801aa28 	.word	0x0801aa28

08012aa4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b094      	sub	sp, #80	@ 0x50
 8012aa8:	af02      	add	r7, sp, #8
 8012aaa:	60f8      	str	r0, [r7, #12]
 8012aac:	60b9      	str	r1, [r7, #8]
 8012aae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012aba:	3b14      	subs	r3, #20
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	da00      	bge.n	8012ac2 <ip4_frag+0x1e>
 8012ac0:	3307      	adds	r3, #7
 8012ac2:	10db      	asrs	r3, r3, #3
 8012ac4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012ac6:	2314      	movs	r3, #20
 8012ac8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	f003 030f 	and.w	r3, r3, #15
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	009b      	lsls	r3, r3, #2
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	2b14      	cmp	r3, #20
 8012ae4:	d002      	beq.n	8012aec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012ae6:	f06f 0305 	mvn.w	r3, #5
 8012aea:	e110      	b.n	8012d0e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	895b      	ldrh	r3, [r3, #10]
 8012af0:	2b13      	cmp	r3, #19
 8012af2:	d809      	bhi.n	8012b08 <ip4_frag+0x64>
 8012af4:	4b88      	ldr	r3, [pc, #544]	@ (8012d18 <ip4_frag+0x274>)
 8012af6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012afa:	4988      	ldr	r1, [pc, #544]	@ (8012d1c <ip4_frag+0x278>)
 8012afc:	4888      	ldr	r0, [pc, #544]	@ (8012d20 <ip4_frag+0x27c>)
 8012afe:	f001 f9a5 	bl	8013e4c <iprintf>
 8012b02:	f06f 0305 	mvn.w	r3, #5
 8012b06:	e102      	b.n	8012d0e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b0a:	88db      	ldrh	r3, [r3, #6]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7f3 fa1a 	bl	8005f48 <lwip_htons>
 8012b14:	4603      	mov	r3, r0
 8012b16:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012b18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012b22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	891b      	ldrh	r3, [r3, #8]
 8012b2e:	3b14      	subs	r3, #20
 8012b30:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012b34:	e0e1      	b.n	8012cfa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012b36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012b38:	00db      	lsls	r3, r3, #3
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b40:	4293      	cmp	r3, r2
 8012b42:	bf28      	it	cs
 8012b44:	4613      	movcs	r3, r2
 8012b46:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012b48:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012b4c:	2114      	movs	r1, #20
 8012b4e:	200e      	movs	r0, #14
 8012b50:	f7f4 faa4 	bl	800709c <pbuf_alloc>
 8012b54:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f000 80d5 	beq.w	8012d08 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b60:	895b      	ldrh	r3, [r3, #10]
 8012b62:	2b13      	cmp	r3, #19
 8012b64:	d806      	bhi.n	8012b74 <ip4_frag+0xd0>
 8012b66:	4b6c      	ldr	r3, [pc, #432]	@ (8012d18 <ip4_frag+0x274>)
 8012b68:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012b6c:	496d      	ldr	r1, [pc, #436]	@ (8012d24 <ip4_frag+0x280>)
 8012b6e:	486c      	ldr	r0, [pc, #432]	@ (8012d20 <ip4_frag+0x27c>)
 8012b70:	f001 f96c 	bl	8013e4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	2214      	movs	r2, #20
 8012b7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f001 fa98 	bl	80140b2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012b88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b8a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8012b8e:	e064      	b.n	8012c5a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	895a      	ldrh	r2, [r3, #10]
 8012b94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	895b      	ldrh	r3, [r3, #10]
 8012b9e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d906      	bls.n	8012bb2 <ip4_frag+0x10e>
 8012ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8012d18 <ip4_frag+0x274>)
 8012ba6:	f240 322d 	movw	r2, #813	@ 0x32d
 8012baa:	495f      	ldr	r1, [pc, #380]	@ (8012d28 <ip4_frag+0x284>)
 8012bac:	485c      	ldr	r0, [pc, #368]	@ (8012d20 <ip4_frag+0x27c>)
 8012bae:	f001 f94d 	bl	8013e4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012bb2:	8bfa      	ldrh	r2, [r7, #30]
 8012bb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	bf28      	it	cs
 8012bbc:	4613      	movcs	r3, r2
 8012bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012bc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d105      	bne.n	8012bd6 <ip4_frag+0x132>
        poff = 0;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	60fb      	str	r3, [r7, #12]
        continue;
 8012bd4:	e041      	b.n	8012c5a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012bd6:	f7ff ff0d 	bl	80129f4 <ip_frag_alloc_pbuf_custom_ref>
 8012bda:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d103      	bne.n	8012bea <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012be2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012be4:	f7f4 fd3e 	bl	8007664 <pbuf_free>
        goto memerr;
 8012be8:	e08f      	b.n	8012d0a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bf0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012bf2:	4413      	add	r3, r2
 8012bf4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012bf8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012bfc:	9201      	str	r2, [sp, #4]
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	4603      	mov	r3, r0
 8012c02:	2241      	movs	r2, #65	@ 0x41
 8012c04:	2000      	movs	r0, #0
 8012c06:	f7f4 fb73 	bl	80072f0 <pbuf_alloced_custom>
 8012c0a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d106      	bne.n	8012c20 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012c12:	69b8      	ldr	r0, [r7, #24]
 8012c14:	f7ff fef6 	bl	8012a04 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c1a:	f7f4 fd23 	bl	8007664 <pbuf_free>
        goto memerr;
 8012c1e:	e074      	b.n	8012d0a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012c20:	68f8      	ldr	r0, [r7, #12]
 8012c22:	f7f4 fdbf 	bl	80077a4 <pbuf_ref>
      pcr->original = p;
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8012d2c <ip4_frag+0x288>)
 8012c30:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012c32:	6979      	ldr	r1, [r7, #20]
 8012c34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c36:	f7f4 fdd7 	bl	80077e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012c3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012c3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012c42:	1ad3      	subs	r3, r2, r3
 8012c44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012c48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d004      	beq.n	8012c5a <ip4_frag+0x1b6>
        poff = 0;
 8012c50:	2300      	movs	r3, #0
 8012c52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d196      	bne.n	8012b90 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012c62:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012c64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012c68:	4413      	add	r3, r2
 8012c6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c70:	f1a3 0213 	sub.w	r2, r3, #19
 8012c74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	bfcc      	ite	gt
 8012c7c:	2301      	movgt	r3, #1
 8012c7e:	2300      	movle	r3, #0
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012c84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012c88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012c8e:	6a3b      	ldr	r3, [r7, #32]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <ip4_frag+0x1f6>
 8012c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d003      	beq.n	8012ca2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012c9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012ca0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012ca2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f3 f94f 	bl	8005f48 <lwip_htons>
 8012caa:	4603      	mov	r3, r0
 8012cac:	461a      	mov	r2, r3
 8012cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012cb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012cb4:	3314      	adds	r3, #20
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f3 f945 	bl	8005f48 <lwip_htons>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc8:	2200      	movs	r2, #0
 8012cca:	729a      	strb	r2, [r3, #10]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	695b      	ldr	r3, [r3, #20]
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012cd8:	68b8      	ldr	r0, [r7, #8]
 8012cda:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012cdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cde:	f7f4 fcc1 	bl	8007664 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012ce2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012ce6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012cee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012cf2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012cf4:	4413      	add	r3, r2
 8012cf6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012cfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f47f af19 	bne.w	8012b36 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	e002      	b.n	8012d0e <ip4_frag+0x26a>
      goto memerr;
 8012d08:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3748      	adds	r7, #72	@ 0x48
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	0801a858 	.word	0x0801a858
 8012d1c:	0801aa34 	.word	0x0801aa34
 8012d20:	0801a8a0 	.word	0x0801a8a0
 8012d24:	0801aa50 	.word	0x0801aa50
 8012d28:	0801aa70 	.word	0x0801aa70
 8012d2c:	08012a3d 	.word	0x08012a3d

08012d30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012d3a:	230e      	movs	r3, #14
 8012d3c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	895b      	ldrh	r3, [r3, #10]
 8012d42:	2b0e      	cmp	r3, #14
 8012d44:	d96e      	bls.n	8012e24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	7bdb      	ldrb	r3, [r3, #15]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d106      	bne.n	8012d5c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d54:	3301      	adds	r3, #1
 8012d56:	b2da      	uxtb	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	7b1a      	ldrb	r2, [r3, #12]
 8012d66:	7b5b      	ldrb	r3, [r3, #13]
 8012d68:	021b      	lsls	r3, r3, #8
 8012d6a:	4313      	orrs	r3, r2
 8012d6c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	f003 0301 	and.w	r3, r3, #1
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d023      	beq.n	8012dc2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d10f      	bne.n	8012da2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	785b      	ldrb	r3, [r3, #1]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d11b      	bne.n	8012dc2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8012d90:	d117      	bne.n	8012dc2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	7b5b      	ldrb	r3, [r3, #13]
 8012d96:	f043 0310 	orr.w	r3, r3, #16
 8012d9a:	b2da      	uxtb	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	735a      	strb	r2, [r3, #13]
 8012da0:	e00f      	b.n	8012dc2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	2206      	movs	r2, #6
 8012da6:	4928      	ldr	r1, [pc, #160]	@ (8012e48 <ethernet_input+0x118>)
 8012da8:	4618      	mov	r0, r3
 8012daa:	f001 f8c6 	bl	8013f3a <memcmp>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d106      	bne.n	8012dc2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	7b5b      	ldrb	r3, [r3, #13]
 8012db8:	f043 0308 	orr.w	r3, r3, #8
 8012dbc:	b2da      	uxtb	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012dc2:	89fb      	ldrh	r3, [r7, #14]
 8012dc4:	2b08      	cmp	r3, #8
 8012dc6:	d003      	beq.n	8012dd0 <ethernet_input+0xa0>
 8012dc8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012dcc:	d014      	beq.n	8012df8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012dce:	e032      	b.n	8012e36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012dd6:	f003 0308 	and.w	r3, r3, #8
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d024      	beq.n	8012e28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012dde:	8afb      	ldrh	r3, [r7, #22]
 8012de0:	4619      	mov	r1, r3
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7f4 fbb8 	bl	8007558 <pbuf_remove_header>
 8012de8:	4603      	mov	r3, r0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d11e      	bne.n	8012e2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012dee:	6839      	ldr	r1, [r7, #0]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f7fe fdd9 	bl	80119a8 <ip4_input>
      break;
 8012df6:	e013      	b.n	8012e20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012dfe:	f003 0308 	and.w	r3, r3, #8
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d014      	beq.n	8012e30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e06:	8afb      	ldrh	r3, [r7, #22]
 8012e08:	4619      	mov	r1, r3
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f7f4 fba4 	bl	8007558 <pbuf_remove_header>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d10e      	bne.n	8012e34 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7fd ff75 	bl	8010d08 <etharp_input>
      break;
 8012e1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012e20:	2300      	movs	r3, #0
 8012e22:	e00c      	b.n	8012e3e <ethernet_input+0x10e>
    goto free_and_return;
 8012e24:	bf00      	nop
 8012e26:	e006      	b.n	8012e36 <ethernet_input+0x106>
        goto free_and_return;
 8012e28:	bf00      	nop
 8012e2a:	e004      	b.n	8012e36 <ethernet_input+0x106>
        goto free_and_return;
 8012e2c:	bf00      	nop
 8012e2e:	e002      	b.n	8012e36 <ethernet_input+0x106>
        goto free_and_return;
 8012e30:	bf00      	nop
 8012e32:	e000      	b.n	8012e36 <ethernet_input+0x106>
        goto free_and_return;
 8012e34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7f4 fc14 	bl	8007664 <pbuf_free>
  return ERR_OK;
 8012e3c:	2300      	movs	r3, #0
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	0801ac18 	.word	0x0801ac18

08012e4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b086      	sub	sp, #24
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
 8012e58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012e5a:	8c3b      	ldrh	r3, [r7, #32]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7f3 f873 	bl	8005f48 <lwip_htons>
 8012e62:	4603      	mov	r3, r0
 8012e64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012e66:	210e      	movs	r1, #14
 8012e68:	68b8      	ldr	r0, [r7, #8]
 8012e6a:	f7f4 fb65 	bl	8007538 <pbuf_add_header>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d125      	bne.n	8012ec0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	8afa      	ldrh	r2, [r7, #22]
 8012e7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	2206      	movs	r2, #6
 8012e84:	6839      	ldr	r1, [r7, #0]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f001 f913 	bl	80140b2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	3306      	adds	r3, #6
 8012e90:	2206      	movs	r2, #6
 8012e92:	6879      	ldr	r1, [r7, #4]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f001 f90c 	bl	80140b2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ea0:	2b06      	cmp	r3, #6
 8012ea2:	d006      	beq.n	8012eb2 <ethernet_output+0x66>
 8012ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8012ed0 <ethernet_output+0x84>)
 8012ea6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012eaa:	490a      	ldr	r1, [pc, #40]	@ (8012ed4 <ethernet_output+0x88>)
 8012eac:	480a      	ldr	r0, [pc, #40]	@ (8012ed8 <ethernet_output+0x8c>)
 8012eae:	f000 ffcd 	bl	8013e4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	699b      	ldr	r3, [r3, #24]
 8012eb6:	68b9      	ldr	r1, [r7, #8]
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	4798      	blx	r3
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	e002      	b.n	8012ec6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012ec0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012ec2:	f06f 0301 	mvn.w	r3, #1
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3718      	adds	r7, #24
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	0801aa80 	.word	0x0801aa80
 8012ed4:	0801aab8 	.word	0x0801aab8
 8012ed8:	0801aaec 	.word	0x0801aaec

08012edc <rand>:
 8012edc:	4b16      	ldr	r3, [pc, #88]	@ (8012f38 <rand+0x5c>)
 8012ede:	b510      	push	{r4, lr}
 8012ee0:	681c      	ldr	r4, [r3, #0]
 8012ee2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ee4:	b9b3      	cbnz	r3, 8012f14 <rand+0x38>
 8012ee6:	2018      	movs	r0, #24
 8012ee8:	f001 ff46 	bl	8014d78 <malloc>
 8012eec:	4602      	mov	r2, r0
 8012eee:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ef0:	b920      	cbnz	r0, 8012efc <rand+0x20>
 8012ef2:	4b12      	ldr	r3, [pc, #72]	@ (8012f3c <rand+0x60>)
 8012ef4:	4812      	ldr	r0, [pc, #72]	@ (8012f40 <rand+0x64>)
 8012ef6:	2152      	movs	r1, #82	@ 0x52
 8012ef8:	f001 f8f0 	bl	80140dc <__assert_func>
 8012efc:	4911      	ldr	r1, [pc, #68]	@ (8012f44 <rand+0x68>)
 8012efe:	4b12      	ldr	r3, [pc, #72]	@ (8012f48 <rand+0x6c>)
 8012f00:	e9c0 1300 	strd	r1, r3, [r0]
 8012f04:	4b11      	ldr	r3, [pc, #68]	@ (8012f4c <rand+0x70>)
 8012f06:	6083      	str	r3, [r0, #8]
 8012f08:	230b      	movs	r3, #11
 8012f0a:	8183      	strh	r3, [r0, #12]
 8012f0c:	2100      	movs	r1, #0
 8012f0e:	2001      	movs	r0, #1
 8012f10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012f16:	480e      	ldr	r0, [pc, #56]	@ (8012f50 <rand+0x74>)
 8012f18:	690b      	ldr	r3, [r1, #16]
 8012f1a:	694c      	ldr	r4, [r1, #20]
 8012f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8012f54 <rand+0x78>)
 8012f1e:	4358      	muls	r0, r3
 8012f20:	fb02 0004 	mla	r0, r2, r4, r0
 8012f24:	fba3 3202 	umull	r3, r2, r3, r2
 8012f28:	3301      	adds	r3, #1
 8012f2a:	eb40 0002 	adc.w	r0, r0, r2
 8012f2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012f32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012f36:	bd10      	pop	{r4, pc}
 8012f38:	2000004c 	.word	0x2000004c
 8012f3c:	0801ac26 	.word	0x0801ac26
 8012f40:	0801ac3d 	.word	0x0801ac3d
 8012f44:	abcd330e 	.word	0xabcd330e
 8012f48:	e66d1234 	.word	0xe66d1234
 8012f4c:	0005deec 	.word	0x0005deec
 8012f50:	5851f42d 	.word	0x5851f42d
 8012f54:	4c957f2d 	.word	0x4c957f2d

08012f58 <_strtol_l.isra.0>:
 8012f58:	2b24      	cmp	r3, #36	@ 0x24
 8012f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f5e:	4686      	mov	lr, r0
 8012f60:	4690      	mov	r8, r2
 8012f62:	d801      	bhi.n	8012f68 <_strtol_l.isra.0+0x10>
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d106      	bne.n	8012f76 <_strtol_l.isra.0+0x1e>
 8012f68:	f001 f876 	bl	8014058 <__errno>
 8012f6c:	2316      	movs	r3, #22
 8012f6e:	6003      	str	r3, [r0, #0]
 8012f70:	2000      	movs	r0, #0
 8012f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f76:	4834      	ldr	r0, [pc, #208]	@ (8013048 <_strtol_l.isra.0+0xf0>)
 8012f78:	460d      	mov	r5, r1
 8012f7a:	462a      	mov	r2, r5
 8012f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f80:	5d06      	ldrb	r6, [r0, r4]
 8012f82:	f016 0608 	ands.w	r6, r6, #8
 8012f86:	d1f8      	bne.n	8012f7a <_strtol_l.isra.0+0x22>
 8012f88:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f8a:	d110      	bne.n	8012fae <_strtol_l.isra.0+0x56>
 8012f8c:	782c      	ldrb	r4, [r5, #0]
 8012f8e:	2601      	movs	r6, #1
 8012f90:	1c95      	adds	r5, r2, #2
 8012f92:	f033 0210 	bics.w	r2, r3, #16
 8012f96:	d115      	bne.n	8012fc4 <_strtol_l.isra.0+0x6c>
 8012f98:	2c30      	cmp	r4, #48	@ 0x30
 8012f9a:	d10d      	bne.n	8012fb8 <_strtol_l.isra.0+0x60>
 8012f9c:	782a      	ldrb	r2, [r5, #0]
 8012f9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012fa2:	2a58      	cmp	r2, #88	@ 0x58
 8012fa4:	d108      	bne.n	8012fb8 <_strtol_l.isra.0+0x60>
 8012fa6:	786c      	ldrb	r4, [r5, #1]
 8012fa8:	3502      	adds	r5, #2
 8012faa:	2310      	movs	r3, #16
 8012fac:	e00a      	b.n	8012fc4 <_strtol_l.isra.0+0x6c>
 8012fae:	2c2b      	cmp	r4, #43	@ 0x2b
 8012fb0:	bf04      	itt	eq
 8012fb2:	782c      	ldrbeq	r4, [r5, #0]
 8012fb4:	1c95      	addeq	r5, r2, #2
 8012fb6:	e7ec      	b.n	8012f92 <_strtol_l.isra.0+0x3a>
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d1f6      	bne.n	8012faa <_strtol_l.isra.0+0x52>
 8012fbc:	2c30      	cmp	r4, #48	@ 0x30
 8012fbe:	bf14      	ite	ne
 8012fc0:	230a      	movne	r3, #10
 8012fc2:	2308      	moveq	r3, #8
 8012fc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012fc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012fcc:	2200      	movs	r2, #0
 8012fce:	fbbc f9f3 	udiv	r9, ip, r3
 8012fd2:	4610      	mov	r0, r2
 8012fd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8012fd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012fdc:	2f09      	cmp	r7, #9
 8012fde:	d80f      	bhi.n	8013000 <_strtol_l.isra.0+0xa8>
 8012fe0:	463c      	mov	r4, r7
 8012fe2:	42a3      	cmp	r3, r4
 8012fe4:	dd1b      	ble.n	801301e <_strtol_l.isra.0+0xc6>
 8012fe6:	1c57      	adds	r7, r2, #1
 8012fe8:	d007      	beq.n	8012ffa <_strtol_l.isra.0+0xa2>
 8012fea:	4581      	cmp	r9, r0
 8012fec:	d314      	bcc.n	8013018 <_strtol_l.isra.0+0xc0>
 8012fee:	d101      	bne.n	8012ff4 <_strtol_l.isra.0+0x9c>
 8012ff0:	45a2      	cmp	sl, r4
 8012ff2:	db11      	blt.n	8013018 <_strtol_l.isra.0+0xc0>
 8012ff4:	fb00 4003 	mla	r0, r0, r3, r4
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ffe:	e7eb      	b.n	8012fd8 <_strtol_l.isra.0+0x80>
 8013000:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013004:	2f19      	cmp	r7, #25
 8013006:	d801      	bhi.n	801300c <_strtol_l.isra.0+0xb4>
 8013008:	3c37      	subs	r4, #55	@ 0x37
 801300a:	e7ea      	b.n	8012fe2 <_strtol_l.isra.0+0x8a>
 801300c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013010:	2f19      	cmp	r7, #25
 8013012:	d804      	bhi.n	801301e <_strtol_l.isra.0+0xc6>
 8013014:	3c57      	subs	r4, #87	@ 0x57
 8013016:	e7e4      	b.n	8012fe2 <_strtol_l.isra.0+0x8a>
 8013018:	f04f 32ff 	mov.w	r2, #4294967295
 801301c:	e7ed      	b.n	8012ffa <_strtol_l.isra.0+0xa2>
 801301e:	1c53      	adds	r3, r2, #1
 8013020:	d108      	bne.n	8013034 <_strtol_l.isra.0+0xdc>
 8013022:	2322      	movs	r3, #34	@ 0x22
 8013024:	f8ce 3000 	str.w	r3, [lr]
 8013028:	4660      	mov	r0, ip
 801302a:	f1b8 0f00 	cmp.w	r8, #0
 801302e:	d0a0      	beq.n	8012f72 <_strtol_l.isra.0+0x1a>
 8013030:	1e69      	subs	r1, r5, #1
 8013032:	e006      	b.n	8013042 <_strtol_l.isra.0+0xea>
 8013034:	b106      	cbz	r6, 8013038 <_strtol_l.isra.0+0xe0>
 8013036:	4240      	negs	r0, r0
 8013038:	f1b8 0f00 	cmp.w	r8, #0
 801303c:	d099      	beq.n	8012f72 <_strtol_l.isra.0+0x1a>
 801303e:	2a00      	cmp	r2, #0
 8013040:	d1f6      	bne.n	8013030 <_strtol_l.isra.0+0xd8>
 8013042:	f8c8 1000 	str.w	r1, [r8]
 8013046:	e794      	b.n	8012f72 <_strtol_l.isra.0+0x1a>
 8013048:	0801ae55 	.word	0x0801ae55

0801304c <_strtol_r>:
 801304c:	f7ff bf84 	b.w	8012f58 <_strtol_l.isra.0>

08013050 <__cvt>:
 8013050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013052:	ed2d 8b02 	vpush	{d8}
 8013056:	eeb0 8b40 	vmov.f64	d8, d0
 801305a:	b085      	sub	sp, #20
 801305c:	4617      	mov	r7, r2
 801305e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013060:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013062:	ee18 2a90 	vmov	r2, s17
 8013066:	f025 0520 	bic.w	r5, r5, #32
 801306a:	2a00      	cmp	r2, #0
 801306c:	bfb6      	itet	lt
 801306e:	222d      	movlt	r2, #45	@ 0x2d
 8013070:	2200      	movge	r2, #0
 8013072:	eeb1 8b40 	vneglt.f64	d8, d0
 8013076:	2d46      	cmp	r5, #70	@ 0x46
 8013078:	460c      	mov	r4, r1
 801307a:	701a      	strb	r2, [r3, #0]
 801307c:	d004      	beq.n	8013088 <__cvt+0x38>
 801307e:	2d45      	cmp	r5, #69	@ 0x45
 8013080:	d100      	bne.n	8013084 <__cvt+0x34>
 8013082:	3401      	adds	r4, #1
 8013084:	2102      	movs	r1, #2
 8013086:	e000      	b.n	801308a <__cvt+0x3a>
 8013088:	2103      	movs	r1, #3
 801308a:	ab03      	add	r3, sp, #12
 801308c:	9301      	str	r3, [sp, #4]
 801308e:	ab02      	add	r3, sp, #8
 8013090:	9300      	str	r3, [sp, #0]
 8013092:	4622      	mov	r2, r4
 8013094:	4633      	mov	r3, r6
 8013096:	eeb0 0b48 	vmov.f64	d0, d8
 801309a:	f001 f8c5 	bl	8014228 <_dtoa_r>
 801309e:	2d47      	cmp	r5, #71	@ 0x47
 80130a0:	d114      	bne.n	80130cc <__cvt+0x7c>
 80130a2:	07fb      	lsls	r3, r7, #31
 80130a4:	d50a      	bpl.n	80130bc <__cvt+0x6c>
 80130a6:	1902      	adds	r2, r0, r4
 80130a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b0:	bf08      	it	eq
 80130b2:	9203      	streq	r2, [sp, #12]
 80130b4:	2130      	movs	r1, #48	@ 0x30
 80130b6:	9b03      	ldr	r3, [sp, #12]
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d319      	bcc.n	80130f0 <__cvt+0xa0>
 80130bc:	9b03      	ldr	r3, [sp, #12]
 80130be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130c0:	1a1b      	subs	r3, r3, r0
 80130c2:	6013      	str	r3, [r2, #0]
 80130c4:	b005      	add	sp, #20
 80130c6:	ecbd 8b02 	vpop	{d8}
 80130ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130cc:	2d46      	cmp	r5, #70	@ 0x46
 80130ce:	eb00 0204 	add.w	r2, r0, r4
 80130d2:	d1e9      	bne.n	80130a8 <__cvt+0x58>
 80130d4:	7803      	ldrb	r3, [r0, #0]
 80130d6:	2b30      	cmp	r3, #48	@ 0x30
 80130d8:	d107      	bne.n	80130ea <__cvt+0x9a>
 80130da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e2:	bf1c      	itt	ne
 80130e4:	f1c4 0401 	rsbne	r4, r4, #1
 80130e8:	6034      	strne	r4, [r6, #0]
 80130ea:	6833      	ldr	r3, [r6, #0]
 80130ec:	441a      	add	r2, r3
 80130ee:	e7db      	b.n	80130a8 <__cvt+0x58>
 80130f0:	1c5c      	adds	r4, r3, #1
 80130f2:	9403      	str	r4, [sp, #12]
 80130f4:	7019      	strb	r1, [r3, #0]
 80130f6:	e7de      	b.n	80130b6 <__cvt+0x66>

080130f8 <__exponent>:
 80130f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130fa:	2900      	cmp	r1, #0
 80130fc:	bfba      	itte	lt
 80130fe:	4249      	neglt	r1, r1
 8013100:	232d      	movlt	r3, #45	@ 0x2d
 8013102:	232b      	movge	r3, #43	@ 0x2b
 8013104:	2909      	cmp	r1, #9
 8013106:	7002      	strb	r2, [r0, #0]
 8013108:	7043      	strb	r3, [r0, #1]
 801310a:	dd29      	ble.n	8013160 <__exponent+0x68>
 801310c:	f10d 0307 	add.w	r3, sp, #7
 8013110:	461d      	mov	r5, r3
 8013112:	270a      	movs	r7, #10
 8013114:	461a      	mov	r2, r3
 8013116:	fbb1 f6f7 	udiv	r6, r1, r7
 801311a:	fb07 1416 	mls	r4, r7, r6, r1
 801311e:	3430      	adds	r4, #48	@ 0x30
 8013120:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013124:	460c      	mov	r4, r1
 8013126:	2c63      	cmp	r4, #99	@ 0x63
 8013128:	f103 33ff 	add.w	r3, r3, #4294967295
 801312c:	4631      	mov	r1, r6
 801312e:	dcf1      	bgt.n	8013114 <__exponent+0x1c>
 8013130:	3130      	adds	r1, #48	@ 0x30
 8013132:	1e94      	subs	r4, r2, #2
 8013134:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013138:	1c41      	adds	r1, r0, #1
 801313a:	4623      	mov	r3, r4
 801313c:	42ab      	cmp	r3, r5
 801313e:	d30a      	bcc.n	8013156 <__exponent+0x5e>
 8013140:	f10d 0309 	add.w	r3, sp, #9
 8013144:	1a9b      	subs	r3, r3, r2
 8013146:	42ac      	cmp	r4, r5
 8013148:	bf88      	it	hi
 801314a:	2300      	movhi	r3, #0
 801314c:	3302      	adds	r3, #2
 801314e:	4403      	add	r3, r0
 8013150:	1a18      	subs	r0, r3, r0
 8013152:	b003      	add	sp, #12
 8013154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013156:	f813 6b01 	ldrb.w	r6, [r3], #1
 801315a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801315e:	e7ed      	b.n	801313c <__exponent+0x44>
 8013160:	2330      	movs	r3, #48	@ 0x30
 8013162:	3130      	adds	r1, #48	@ 0x30
 8013164:	7083      	strb	r3, [r0, #2]
 8013166:	70c1      	strb	r1, [r0, #3]
 8013168:	1d03      	adds	r3, r0, #4
 801316a:	e7f1      	b.n	8013150 <__exponent+0x58>
 801316c:	0000      	movs	r0, r0
	...

08013170 <_printf_float>:
 8013170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013174:	b08d      	sub	sp, #52	@ 0x34
 8013176:	460c      	mov	r4, r1
 8013178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801317c:	4616      	mov	r6, r2
 801317e:	461f      	mov	r7, r3
 8013180:	4605      	mov	r5, r0
 8013182:	f000 ff1f 	bl	8013fc4 <_localeconv_r>
 8013186:	f8d0 b000 	ldr.w	fp, [r0]
 801318a:	4658      	mov	r0, fp
 801318c:	f7ed f8a8 	bl	80002e0 <strlen>
 8013190:	2300      	movs	r3, #0
 8013192:	930a      	str	r3, [sp, #40]	@ 0x28
 8013194:	f8d8 3000 	ldr.w	r3, [r8]
 8013198:	f894 9018 	ldrb.w	r9, [r4, #24]
 801319c:	6822      	ldr	r2, [r4, #0]
 801319e:	9005      	str	r0, [sp, #20]
 80131a0:	3307      	adds	r3, #7
 80131a2:	f023 0307 	bic.w	r3, r3, #7
 80131a6:	f103 0108 	add.w	r1, r3, #8
 80131aa:	f8c8 1000 	str.w	r1, [r8]
 80131ae:	ed93 0b00 	vldr	d0, [r3]
 80131b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013410 <_printf_float+0x2a0>
 80131b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80131ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80131c6:	dd24      	ble.n	8013212 <_printf_float+0xa2>
 80131c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80131cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131d0:	d502      	bpl.n	80131d8 <_printf_float+0x68>
 80131d2:	232d      	movs	r3, #45	@ 0x2d
 80131d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131d8:	498f      	ldr	r1, [pc, #572]	@ (8013418 <_printf_float+0x2a8>)
 80131da:	4b90      	ldr	r3, [pc, #576]	@ (801341c <_printf_float+0x2ac>)
 80131dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80131e0:	bf8c      	ite	hi
 80131e2:	4688      	movhi	r8, r1
 80131e4:	4698      	movls	r8, r3
 80131e6:	f022 0204 	bic.w	r2, r2, #4
 80131ea:	2303      	movs	r3, #3
 80131ec:	6123      	str	r3, [r4, #16]
 80131ee:	6022      	str	r2, [r4, #0]
 80131f0:	f04f 0a00 	mov.w	sl, #0
 80131f4:	9700      	str	r7, [sp, #0]
 80131f6:	4633      	mov	r3, r6
 80131f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80131fa:	4621      	mov	r1, r4
 80131fc:	4628      	mov	r0, r5
 80131fe:	f000 f9d1 	bl	80135a4 <_printf_common>
 8013202:	3001      	adds	r0, #1
 8013204:	f040 8089 	bne.w	801331a <_printf_float+0x1aa>
 8013208:	f04f 30ff 	mov.w	r0, #4294967295
 801320c:	b00d      	add	sp, #52	@ 0x34
 801320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013212:	eeb4 0b40 	vcmp.f64	d0, d0
 8013216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801321a:	d709      	bvc.n	8013230 <_printf_float+0xc0>
 801321c:	ee10 3a90 	vmov	r3, s1
 8013220:	2b00      	cmp	r3, #0
 8013222:	bfbc      	itt	lt
 8013224:	232d      	movlt	r3, #45	@ 0x2d
 8013226:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801322a:	497d      	ldr	r1, [pc, #500]	@ (8013420 <_printf_float+0x2b0>)
 801322c:	4b7d      	ldr	r3, [pc, #500]	@ (8013424 <_printf_float+0x2b4>)
 801322e:	e7d5      	b.n	80131dc <_printf_float+0x6c>
 8013230:	6863      	ldr	r3, [r4, #4]
 8013232:	1c59      	adds	r1, r3, #1
 8013234:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013238:	d139      	bne.n	80132ae <_printf_float+0x13e>
 801323a:	2306      	movs	r3, #6
 801323c:	6063      	str	r3, [r4, #4]
 801323e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013242:	2300      	movs	r3, #0
 8013244:	6022      	str	r2, [r4, #0]
 8013246:	9303      	str	r3, [sp, #12]
 8013248:	ab0a      	add	r3, sp, #40	@ 0x28
 801324a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801324e:	ab09      	add	r3, sp, #36	@ 0x24
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	6861      	ldr	r1, [r4, #4]
 8013254:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013258:	4628      	mov	r0, r5
 801325a:	f7ff fef9 	bl	8013050 <__cvt>
 801325e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013264:	4680      	mov	r8, r0
 8013266:	d129      	bne.n	80132bc <_printf_float+0x14c>
 8013268:	1cc8      	adds	r0, r1, #3
 801326a:	db02      	blt.n	8013272 <_printf_float+0x102>
 801326c:	6863      	ldr	r3, [r4, #4]
 801326e:	4299      	cmp	r1, r3
 8013270:	dd41      	ble.n	80132f6 <_printf_float+0x186>
 8013272:	f1a9 0902 	sub.w	r9, r9, #2
 8013276:	fa5f f989 	uxtb.w	r9, r9
 801327a:	3901      	subs	r1, #1
 801327c:	464a      	mov	r2, r9
 801327e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013282:	9109      	str	r1, [sp, #36]	@ 0x24
 8013284:	f7ff ff38 	bl	80130f8 <__exponent>
 8013288:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801328a:	1813      	adds	r3, r2, r0
 801328c:	2a01      	cmp	r2, #1
 801328e:	4682      	mov	sl, r0
 8013290:	6123      	str	r3, [r4, #16]
 8013292:	dc02      	bgt.n	801329a <_printf_float+0x12a>
 8013294:	6822      	ldr	r2, [r4, #0]
 8013296:	07d2      	lsls	r2, r2, #31
 8013298:	d501      	bpl.n	801329e <_printf_float+0x12e>
 801329a:	3301      	adds	r3, #1
 801329c:	6123      	str	r3, [r4, #16]
 801329e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d0a6      	beq.n	80131f4 <_printf_float+0x84>
 80132a6:	232d      	movs	r3, #45	@ 0x2d
 80132a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80132ac:	e7a2      	b.n	80131f4 <_printf_float+0x84>
 80132ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80132b2:	d1c4      	bne.n	801323e <_printf_float+0xce>
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d1c2      	bne.n	801323e <_printf_float+0xce>
 80132b8:	2301      	movs	r3, #1
 80132ba:	e7bf      	b.n	801323c <_printf_float+0xcc>
 80132bc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80132c0:	d9db      	bls.n	801327a <_printf_float+0x10a>
 80132c2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80132c6:	d118      	bne.n	80132fa <_printf_float+0x18a>
 80132c8:	2900      	cmp	r1, #0
 80132ca:	6863      	ldr	r3, [r4, #4]
 80132cc:	dd0b      	ble.n	80132e6 <_printf_float+0x176>
 80132ce:	6121      	str	r1, [r4, #16]
 80132d0:	b913      	cbnz	r3, 80132d8 <_printf_float+0x168>
 80132d2:	6822      	ldr	r2, [r4, #0]
 80132d4:	07d0      	lsls	r0, r2, #31
 80132d6:	d502      	bpl.n	80132de <_printf_float+0x16e>
 80132d8:	3301      	adds	r3, #1
 80132da:	440b      	add	r3, r1
 80132dc:	6123      	str	r3, [r4, #16]
 80132de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80132e0:	f04f 0a00 	mov.w	sl, #0
 80132e4:	e7db      	b.n	801329e <_printf_float+0x12e>
 80132e6:	b913      	cbnz	r3, 80132ee <_printf_float+0x17e>
 80132e8:	6822      	ldr	r2, [r4, #0]
 80132ea:	07d2      	lsls	r2, r2, #31
 80132ec:	d501      	bpl.n	80132f2 <_printf_float+0x182>
 80132ee:	3302      	adds	r3, #2
 80132f0:	e7f4      	b.n	80132dc <_printf_float+0x16c>
 80132f2:	2301      	movs	r3, #1
 80132f4:	e7f2      	b.n	80132dc <_printf_float+0x16c>
 80132f6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80132fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132fc:	4299      	cmp	r1, r3
 80132fe:	db05      	blt.n	801330c <_printf_float+0x19c>
 8013300:	6823      	ldr	r3, [r4, #0]
 8013302:	6121      	str	r1, [r4, #16]
 8013304:	07d8      	lsls	r0, r3, #31
 8013306:	d5ea      	bpl.n	80132de <_printf_float+0x16e>
 8013308:	1c4b      	adds	r3, r1, #1
 801330a:	e7e7      	b.n	80132dc <_printf_float+0x16c>
 801330c:	2900      	cmp	r1, #0
 801330e:	bfd4      	ite	le
 8013310:	f1c1 0202 	rsble	r2, r1, #2
 8013314:	2201      	movgt	r2, #1
 8013316:	4413      	add	r3, r2
 8013318:	e7e0      	b.n	80132dc <_printf_float+0x16c>
 801331a:	6823      	ldr	r3, [r4, #0]
 801331c:	055a      	lsls	r2, r3, #21
 801331e:	d407      	bmi.n	8013330 <_printf_float+0x1c0>
 8013320:	6923      	ldr	r3, [r4, #16]
 8013322:	4642      	mov	r2, r8
 8013324:	4631      	mov	r1, r6
 8013326:	4628      	mov	r0, r5
 8013328:	47b8      	blx	r7
 801332a:	3001      	adds	r0, #1
 801332c:	d12a      	bne.n	8013384 <_printf_float+0x214>
 801332e:	e76b      	b.n	8013208 <_printf_float+0x98>
 8013330:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013334:	f240 80e0 	bls.w	80134f8 <_printf_float+0x388>
 8013338:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801333c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013344:	d133      	bne.n	80133ae <_printf_float+0x23e>
 8013346:	4a38      	ldr	r2, [pc, #224]	@ (8013428 <_printf_float+0x2b8>)
 8013348:	2301      	movs	r3, #1
 801334a:	4631      	mov	r1, r6
 801334c:	4628      	mov	r0, r5
 801334e:	47b8      	blx	r7
 8013350:	3001      	adds	r0, #1
 8013352:	f43f af59 	beq.w	8013208 <_printf_float+0x98>
 8013356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801335a:	4543      	cmp	r3, r8
 801335c:	db02      	blt.n	8013364 <_printf_float+0x1f4>
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	07d8      	lsls	r0, r3, #31
 8013362:	d50f      	bpl.n	8013384 <_printf_float+0x214>
 8013364:	9b05      	ldr	r3, [sp, #20]
 8013366:	465a      	mov	r2, fp
 8013368:	4631      	mov	r1, r6
 801336a:	4628      	mov	r0, r5
 801336c:	47b8      	blx	r7
 801336e:	3001      	adds	r0, #1
 8013370:	f43f af4a 	beq.w	8013208 <_printf_float+0x98>
 8013374:	f04f 0900 	mov.w	r9, #0
 8013378:	f108 38ff 	add.w	r8, r8, #4294967295
 801337c:	f104 0a1a 	add.w	sl, r4, #26
 8013380:	45c8      	cmp	r8, r9
 8013382:	dc09      	bgt.n	8013398 <_printf_float+0x228>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	079b      	lsls	r3, r3, #30
 8013388:	f100 8107 	bmi.w	801359a <_printf_float+0x42a>
 801338c:	68e0      	ldr	r0, [r4, #12]
 801338e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013390:	4298      	cmp	r0, r3
 8013392:	bfb8      	it	lt
 8013394:	4618      	movlt	r0, r3
 8013396:	e739      	b.n	801320c <_printf_float+0x9c>
 8013398:	2301      	movs	r3, #1
 801339a:	4652      	mov	r2, sl
 801339c:	4631      	mov	r1, r6
 801339e:	4628      	mov	r0, r5
 80133a0:	47b8      	blx	r7
 80133a2:	3001      	adds	r0, #1
 80133a4:	f43f af30 	beq.w	8013208 <_printf_float+0x98>
 80133a8:	f109 0901 	add.w	r9, r9, #1
 80133ac:	e7e8      	b.n	8013380 <_printf_float+0x210>
 80133ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	dc3b      	bgt.n	801342c <_printf_float+0x2bc>
 80133b4:	4a1c      	ldr	r2, [pc, #112]	@ (8013428 <_printf_float+0x2b8>)
 80133b6:	2301      	movs	r3, #1
 80133b8:	4631      	mov	r1, r6
 80133ba:	4628      	mov	r0, r5
 80133bc:	47b8      	blx	r7
 80133be:	3001      	adds	r0, #1
 80133c0:	f43f af22 	beq.w	8013208 <_printf_float+0x98>
 80133c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80133c8:	ea59 0303 	orrs.w	r3, r9, r3
 80133cc:	d102      	bne.n	80133d4 <_printf_float+0x264>
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	07d9      	lsls	r1, r3, #31
 80133d2:	d5d7      	bpl.n	8013384 <_printf_float+0x214>
 80133d4:	9b05      	ldr	r3, [sp, #20]
 80133d6:	465a      	mov	r2, fp
 80133d8:	4631      	mov	r1, r6
 80133da:	4628      	mov	r0, r5
 80133dc:	47b8      	blx	r7
 80133de:	3001      	adds	r0, #1
 80133e0:	f43f af12 	beq.w	8013208 <_printf_float+0x98>
 80133e4:	f04f 0a00 	mov.w	sl, #0
 80133e8:	f104 0b1a 	add.w	fp, r4, #26
 80133ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133ee:	425b      	negs	r3, r3
 80133f0:	4553      	cmp	r3, sl
 80133f2:	dc01      	bgt.n	80133f8 <_printf_float+0x288>
 80133f4:	464b      	mov	r3, r9
 80133f6:	e794      	b.n	8013322 <_printf_float+0x1b2>
 80133f8:	2301      	movs	r3, #1
 80133fa:	465a      	mov	r2, fp
 80133fc:	4631      	mov	r1, r6
 80133fe:	4628      	mov	r0, r5
 8013400:	47b8      	blx	r7
 8013402:	3001      	adds	r0, #1
 8013404:	f43f af00 	beq.w	8013208 <_printf_float+0x98>
 8013408:	f10a 0a01 	add.w	sl, sl, #1
 801340c:	e7ee      	b.n	80133ec <_printf_float+0x27c>
 801340e:	bf00      	nop
 8013410:	ffffffff 	.word	0xffffffff
 8013414:	7fefffff 	.word	0x7fefffff
 8013418:	0801ac99 	.word	0x0801ac99
 801341c:	0801ac95 	.word	0x0801ac95
 8013420:	0801aca1 	.word	0x0801aca1
 8013424:	0801ac9d 	.word	0x0801ac9d
 8013428:	0801aca5 	.word	0x0801aca5
 801342c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801342e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013432:	4553      	cmp	r3, sl
 8013434:	bfa8      	it	ge
 8013436:	4653      	movge	r3, sl
 8013438:	2b00      	cmp	r3, #0
 801343a:	4699      	mov	r9, r3
 801343c:	dc37      	bgt.n	80134ae <_printf_float+0x33e>
 801343e:	2300      	movs	r3, #0
 8013440:	9307      	str	r3, [sp, #28]
 8013442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013446:	f104 021a 	add.w	r2, r4, #26
 801344a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801344c:	9907      	ldr	r1, [sp, #28]
 801344e:	9306      	str	r3, [sp, #24]
 8013450:	eba3 0309 	sub.w	r3, r3, r9
 8013454:	428b      	cmp	r3, r1
 8013456:	dc31      	bgt.n	80134bc <_printf_float+0x34c>
 8013458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801345a:	459a      	cmp	sl, r3
 801345c:	dc3b      	bgt.n	80134d6 <_printf_float+0x366>
 801345e:	6823      	ldr	r3, [r4, #0]
 8013460:	07da      	lsls	r2, r3, #31
 8013462:	d438      	bmi.n	80134d6 <_printf_float+0x366>
 8013464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013466:	ebaa 0903 	sub.w	r9, sl, r3
 801346a:	9b06      	ldr	r3, [sp, #24]
 801346c:	ebaa 0303 	sub.w	r3, sl, r3
 8013470:	4599      	cmp	r9, r3
 8013472:	bfa8      	it	ge
 8013474:	4699      	movge	r9, r3
 8013476:	f1b9 0f00 	cmp.w	r9, #0
 801347a:	dc34      	bgt.n	80134e6 <_printf_float+0x376>
 801347c:	f04f 0800 	mov.w	r8, #0
 8013480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013484:	f104 0b1a 	add.w	fp, r4, #26
 8013488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801348a:	ebaa 0303 	sub.w	r3, sl, r3
 801348e:	eba3 0309 	sub.w	r3, r3, r9
 8013492:	4543      	cmp	r3, r8
 8013494:	f77f af76 	ble.w	8013384 <_printf_float+0x214>
 8013498:	2301      	movs	r3, #1
 801349a:	465a      	mov	r2, fp
 801349c:	4631      	mov	r1, r6
 801349e:	4628      	mov	r0, r5
 80134a0:	47b8      	blx	r7
 80134a2:	3001      	adds	r0, #1
 80134a4:	f43f aeb0 	beq.w	8013208 <_printf_float+0x98>
 80134a8:	f108 0801 	add.w	r8, r8, #1
 80134ac:	e7ec      	b.n	8013488 <_printf_float+0x318>
 80134ae:	4642      	mov	r2, r8
 80134b0:	4631      	mov	r1, r6
 80134b2:	4628      	mov	r0, r5
 80134b4:	47b8      	blx	r7
 80134b6:	3001      	adds	r0, #1
 80134b8:	d1c1      	bne.n	801343e <_printf_float+0x2ce>
 80134ba:	e6a5      	b.n	8013208 <_printf_float+0x98>
 80134bc:	2301      	movs	r3, #1
 80134be:	4631      	mov	r1, r6
 80134c0:	4628      	mov	r0, r5
 80134c2:	9206      	str	r2, [sp, #24]
 80134c4:	47b8      	blx	r7
 80134c6:	3001      	adds	r0, #1
 80134c8:	f43f ae9e 	beq.w	8013208 <_printf_float+0x98>
 80134cc:	9b07      	ldr	r3, [sp, #28]
 80134ce:	9a06      	ldr	r2, [sp, #24]
 80134d0:	3301      	adds	r3, #1
 80134d2:	9307      	str	r3, [sp, #28]
 80134d4:	e7b9      	b.n	801344a <_printf_float+0x2da>
 80134d6:	9b05      	ldr	r3, [sp, #20]
 80134d8:	465a      	mov	r2, fp
 80134da:	4631      	mov	r1, r6
 80134dc:	4628      	mov	r0, r5
 80134de:	47b8      	blx	r7
 80134e0:	3001      	adds	r0, #1
 80134e2:	d1bf      	bne.n	8013464 <_printf_float+0x2f4>
 80134e4:	e690      	b.n	8013208 <_printf_float+0x98>
 80134e6:	9a06      	ldr	r2, [sp, #24]
 80134e8:	464b      	mov	r3, r9
 80134ea:	4442      	add	r2, r8
 80134ec:	4631      	mov	r1, r6
 80134ee:	4628      	mov	r0, r5
 80134f0:	47b8      	blx	r7
 80134f2:	3001      	adds	r0, #1
 80134f4:	d1c2      	bne.n	801347c <_printf_float+0x30c>
 80134f6:	e687      	b.n	8013208 <_printf_float+0x98>
 80134f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80134fc:	f1b9 0f01 	cmp.w	r9, #1
 8013500:	dc01      	bgt.n	8013506 <_printf_float+0x396>
 8013502:	07db      	lsls	r3, r3, #31
 8013504:	d536      	bpl.n	8013574 <_printf_float+0x404>
 8013506:	2301      	movs	r3, #1
 8013508:	4642      	mov	r2, r8
 801350a:	4631      	mov	r1, r6
 801350c:	4628      	mov	r0, r5
 801350e:	47b8      	blx	r7
 8013510:	3001      	adds	r0, #1
 8013512:	f43f ae79 	beq.w	8013208 <_printf_float+0x98>
 8013516:	9b05      	ldr	r3, [sp, #20]
 8013518:	465a      	mov	r2, fp
 801351a:	4631      	mov	r1, r6
 801351c:	4628      	mov	r0, r5
 801351e:	47b8      	blx	r7
 8013520:	3001      	adds	r0, #1
 8013522:	f43f ae71 	beq.w	8013208 <_printf_float+0x98>
 8013526:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801352a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013532:	f109 39ff 	add.w	r9, r9, #4294967295
 8013536:	d018      	beq.n	801356a <_printf_float+0x3fa>
 8013538:	464b      	mov	r3, r9
 801353a:	f108 0201 	add.w	r2, r8, #1
 801353e:	4631      	mov	r1, r6
 8013540:	4628      	mov	r0, r5
 8013542:	47b8      	blx	r7
 8013544:	3001      	adds	r0, #1
 8013546:	d10c      	bne.n	8013562 <_printf_float+0x3f2>
 8013548:	e65e      	b.n	8013208 <_printf_float+0x98>
 801354a:	2301      	movs	r3, #1
 801354c:	465a      	mov	r2, fp
 801354e:	4631      	mov	r1, r6
 8013550:	4628      	mov	r0, r5
 8013552:	47b8      	blx	r7
 8013554:	3001      	adds	r0, #1
 8013556:	f43f ae57 	beq.w	8013208 <_printf_float+0x98>
 801355a:	f108 0801 	add.w	r8, r8, #1
 801355e:	45c8      	cmp	r8, r9
 8013560:	dbf3      	blt.n	801354a <_printf_float+0x3da>
 8013562:	4653      	mov	r3, sl
 8013564:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013568:	e6dc      	b.n	8013324 <_printf_float+0x1b4>
 801356a:	f04f 0800 	mov.w	r8, #0
 801356e:	f104 0b1a 	add.w	fp, r4, #26
 8013572:	e7f4      	b.n	801355e <_printf_float+0x3ee>
 8013574:	2301      	movs	r3, #1
 8013576:	4642      	mov	r2, r8
 8013578:	e7e1      	b.n	801353e <_printf_float+0x3ce>
 801357a:	2301      	movs	r3, #1
 801357c:	464a      	mov	r2, r9
 801357e:	4631      	mov	r1, r6
 8013580:	4628      	mov	r0, r5
 8013582:	47b8      	blx	r7
 8013584:	3001      	adds	r0, #1
 8013586:	f43f ae3f 	beq.w	8013208 <_printf_float+0x98>
 801358a:	f108 0801 	add.w	r8, r8, #1
 801358e:	68e3      	ldr	r3, [r4, #12]
 8013590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013592:	1a5b      	subs	r3, r3, r1
 8013594:	4543      	cmp	r3, r8
 8013596:	dcf0      	bgt.n	801357a <_printf_float+0x40a>
 8013598:	e6f8      	b.n	801338c <_printf_float+0x21c>
 801359a:	f04f 0800 	mov.w	r8, #0
 801359e:	f104 0919 	add.w	r9, r4, #25
 80135a2:	e7f4      	b.n	801358e <_printf_float+0x41e>

080135a4 <_printf_common>:
 80135a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135a8:	4616      	mov	r6, r2
 80135aa:	4698      	mov	r8, r3
 80135ac:	688a      	ldr	r2, [r1, #8]
 80135ae:	690b      	ldr	r3, [r1, #16]
 80135b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80135b4:	4293      	cmp	r3, r2
 80135b6:	bfb8      	it	lt
 80135b8:	4613      	movlt	r3, r2
 80135ba:	6033      	str	r3, [r6, #0]
 80135bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80135c0:	4607      	mov	r7, r0
 80135c2:	460c      	mov	r4, r1
 80135c4:	b10a      	cbz	r2, 80135ca <_printf_common+0x26>
 80135c6:	3301      	adds	r3, #1
 80135c8:	6033      	str	r3, [r6, #0]
 80135ca:	6823      	ldr	r3, [r4, #0]
 80135cc:	0699      	lsls	r1, r3, #26
 80135ce:	bf42      	ittt	mi
 80135d0:	6833      	ldrmi	r3, [r6, #0]
 80135d2:	3302      	addmi	r3, #2
 80135d4:	6033      	strmi	r3, [r6, #0]
 80135d6:	6825      	ldr	r5, [r4, #0]
 80135d8:	f015 0506 	ands.w	r5, r5, #6
 80135dc:	d106      	bne.n	80135ec <_printf_common+0x48>
 80135de:	f104 0a19 	add.w	sl, r4, #25
 80135e2:	68e3      	ldr	r3, [r4, #12]
 80135e4:	6832      	ldr	r2, [r6, #0]
 80135e6:	1a9b      	subs	r3, r3, r2
 80135e8:	42ab      	cmp	r3, r5
 80135ea:	dc26      	bgt.n	801363a <_printf_common+0x96>
 80135ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80135f0:	6822      	ldr	r2, [r4, #0]
 80135f2:	3b00      	subs	r3, #0
 80135f4:	bf18      	it	ne
 80135f6:	2301      	movne	r3, #1
 80135f8:	0692      	lsls	r2, r2, #26
 80135fa:	d42b      	bmi.n	8013654 <_printf_common+0xb0>
 80135fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013600:	4641      	mov	r1, r8
 8013602:	4638      	mov	r0, r7
 8013604:	47c8      	blx	r9
 8013606:	3001      	adds	r0, #1
 8013608:	d01e      	beq.n	8013648 <_printf_common+0xa4>
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	6922      	ldr	r2, [r4, #16]
 801360e:	f003 0306 	and.w	r3, r3, #6
 8013612:	2b04      	cmp	r3, #4
 8013614:	bf02      	ittt	eq
 8013616:	68e5      	ldreq	r5, [r4, #12]
 8013618:	6833      	ldreq	r3, [r6, #0]
 801361a:	1aed      	subeq	r5, r5, r3
 801361c:	68a3      	ldr	r3, [r4, #8]
 801361e:	bf0c      	ite	eq
 8013620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013624:	2500      	movne	r5, #0
 8013626:	4293      	cmp	r3, r2
 8013628:	bfc4      	itt	gt
 801362a:	1a9b      	subgt	r3, r3, r2
 801362c:	18ed      	addgt	r5, r5, r3
 801362e:	2600      	movs	r6, #0
 8013630:	341a      	adds	r4, #26
 8013632:	42b5      	cmp	r5, r6
 8013634:	d11a      	bne.n	801366c <_printf_common+0xc8>
 8013636:	2000      	movs	r0, #0
 8013638:	e008      	b.n	801364c <_printf_common+0xa8>
 801363a:	2301      	movs	r3, #1
 801363c:	4652      	mov	r2, sl
 801363e:	4641      	mov	r1, r8
 8013640:	4638      	mov	r0, r7
 8013642:	47c8      	blx	r9
 8013644:	3001      	adds	r0, #1
 8013646:	d103      	bne.n	8013650 <_printf_common+0xac>
 8013648:	f04f 30ff 	mov.w	r0, #4294967295
 801364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013650:	3501      	adds	r5, #1
 8013652:	e7c6      	b.n	80135e2 <_printf_common+0x3e>
 8013654:	18e1      	adds	r1, r4, r3
 8013656:	1c5a      	adds	r2, r3, #1
 8013658:	2030      	movs	r0, #48	@ 0x30
 801365a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801365e:	4422      	add	r2, r4
 8013660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013668:	3302      	adds	r3, #2
 801366a:	e7c7      	b.n	80135fc <_printf_common+0x58>
 801366c:	2301      	movs	r3, #1
 801366e:	4622      	mov	r2, r4
 8013670:	4641      	mov	r1, r8
 8013672:	4638      	mov	r0, r7
 8013674:	47c8      	blx	r9
 8013676:	3001      	adds	r0, #1
 8013678:	d0e6      	beq.n	8013648 <_printf_common+0xa4>
 801367a:	3601      	adds	r6, #1
 801367c:	e7d9      	b.n	8013632 <_printf_common+0x8e>
	...

08013680 <_printf_i>:
 8013680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013684:	7e0f      	ldrb	r7, [r1, #24]
 8013686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013688:	2f78      	cmp	r7, #120	@ 0x78
 801368a:	4691      	mov	r9, r2
 801368c:	4680      	mov	r8, r0
 801368e:	460c      	mov	r4, r1
 8013690:	469a      	mov	sl, r3
 8013692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013696:	d807      	bhi.n	80136a8 <_printf_i+0x28>
 8013698:	2f62      	cmp	r7, #98	@ 0x62
 801369a:	d80a      	bhi.n	80136b2 <_printf_i+0x32>
 801369c:	2f00      	cmp	r7, #0
 801369e:	f000 80d1 	beq.w	8013844 <_printf_i+0x1c4>
 80136a2:	2f58      	cmp	r7, #88	@ 0x58
 80136a4:	f000 80b8 	beq.w	8013818 <_printf_i+0x198>
 80136a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80136ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80136b0:	e03a      	b.n	8013728 <_printf_i+0xa8>
 80136b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80136b6:	2b15      	cmp	r3, #21
 80136b8:	d8f6      	bhi.n	80136a8 <_printf_i+0x28>
 80136ba:	a101      	add	r1, pc, #4	@ (adr r1, 80136c0 <_printf_i+0x40>)
 80136bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136c0:	08013719 	.word	0x08013719
 80136c4:	0801372d 	.word	0x0801372d
 80136c8:	080136a9 	.word	0x080136a9
 80136cc:	080136a9 	.word	0x080136a9
 80136d0:	080136a9 	.word	0x080136a9
 80136d4:	080136a9 	.word	0x080136a9
 80136d8:	0801372d 	.word	0x0801372d
 80136dc:	080136a9 	.word	0x080136a9
 80136e0:	080136a9 	.word	0x080136a9
 80136e4:	080136a9 	.word	0x080136a9
 80136e8:	080136a9 	.word	0x080136a9
 80136ec:	0801382b 	.word	0x0801382b
 80136f0:	08013757 	.word	0x08013757
 80136f4:	080137e5 	.word	0x080137e5
 80136f8:	080136a9 	.word	0x080136a9
 80136fc:	080136a9 	.word	0x080136a9
 8013700:	0801384d 	.word	0x0801384d
 8013704:	080136a9 	.word	0x080136a9
 8013708:	08013757 	.word	0x08013757
 801370c:	080136a9 	.word	0x080136a9
 8013710:	080136a9 	.word	0x080136a9
 8013714:	080137ed 	.word	0x080137ed
 8013718:	6833      	ldr	r3, [r6, #0]
 801371a:	1d1a      	adds	r2, r3, #4
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	6032      	str	r2, [r6, #0]
 8013720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013728:	2301      	movs	r3, #1
 801372a:	e09c      	b.n	8013866 <_printf_i+0x1e6>
 801372c:	6833      	ldr	r3, [r6, #0]
 801372e:	6820      	ldr	r0, [r4, #0]
 8013730:	1d19      	adds	r1, r3, #4
 8013732:	6031      	str	r1, [r6, #0]
 8013734:	0606      	lsls	r6, r0, #24
 8013736:	d501      	bpl.n	801373c <_printf_i+0xbc>
 8013738:	681d      	ldr	r5, [r3, #0]
 801373a:	e003      	b.n	8013744 <_printf_i+0xc4>
 801373c:	0645      	lsls	r5, r0, #25
 801373e:	d5fb      	bpl.n	8013738 <_printf_i+0xb8>
 8013740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013744:	2d00      	cmp	r5, #0
 8013746:	da03      	bge.n	8013750 <_printf_i+0xd0>
 8013748:	232d      	movs	r3, #45	@ 0x2d
 801374a:	426d      	negs	r5, r5
 801374c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013750:	4858      	ldr	r0, [pc, #352]	@ (80138b4 <_printf_i+0x234>)
 8013752:	230a      	movs	r3, #10
 8013754:	e011      	b.n	801377a <_printf_i+0xfa>
 8013756:	6821      	ldr	r1, [r4, #0]
 8013758:	6833      	ldr	r3, [r6, #0]
 801375a:	0608      	lsls	r0, r1, #24
 801375c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013760:	d402      	bmi.n	8013768 <_printf_i+0xe8>
 8013762:	0649      	lsls	r1, r1, #25
 8013764:	bf48      	it	mi
 8013766:	b2ad      	uxthmi	r5, r5
 8013768:	2f6f      	cmp	r7, #111	@ 0x6f
 801376a:	4852      	ldr	r0, [pc, #328]	@ (80138b4 <_printf_i+0x234>)
 801376c:	6033      	str	r3, [r6, #0]
 801376e:	bf14      	ite	ne
 8013770:	230a      	movne	r3, #10
 8013772:	2308      	moveq	r3, #8
 8013774:	2100      	movs	r1, #0
 8013776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801377a:	6866      	ldr	r6, [r4, #4]
 801377c:	60a6      	str	r6, [r4, #8]
 801377e:	2e00      	cmp	r6, #0
 8013780:	db05      	blt.n	801378e <_printf_i+0x10e>
 8013782:	6821      	ldr	r1, [r4, #0]
 8013784:	432e      	orrs	r6, r5
 8013786:	f021 0104 	bic.w	r1, r1, #4
 801378a:	6021      	str	r1, [r4, #0]
 801378c:	d04b      	beq.n	8013826 <_printf_i+0x1a6>
 801378e:	4616      	mov	r6, r2
 8013790:	fbb5 f1f3 	udiv	r1, r5, r3
 8013794:	fb03 5711 	mls	r7, r3, r1, r5
 8013798:	5dc7      	ldrb	r7, [r0, r7]
 801379a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801379e:	462f      	mov	r7, r5
 80137a0:	42bb      	cmp	r3, r7
 80137a2:	460d      	mov	r5, r1
 80137a4:	d9f4      	bls.n	8013790 <_printf_i+0x110>
 80137a6:	2b08      	cmp	r3, #8
 80137a8:	d10b      	bne.n	80137c2 <_printf_i+0x142>
 80137aa:	6823      	ldr	r3, [r4, #0]
 80137ac:	07df      	lsls	r7, r3, #31
 80137ae:	d508      	bpl.n	80137c2 <_printf_i+0x142>
 80137b0:	6923      	ldr	r3, [r4, #16]
 80137b2:	6861      	ldr	r1, [r4, #4]
 80137b4:	4299      	cmp	r1, r3
 80137b6:	bfde      	ittt	le
 80137b8:	2330      	movle	r3, #48	@ 0x30
 80137ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80137be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80137c2:	1b92      	subs	r2, r2, r6
 80137c4:	6122      	str	r2, [r4, #16]
 80137c6:	f8cd a000 	str.w	sl, [sp]
 80137ca:	464b      	mov	r3, r9
 80137cc:	aa03      	add	r2, sp, #12
 80137ce:	4621      	mov	r1, r4
 80137d0:	4640      	mov	r0, r8
 80137d2:	f7ff fee7 	bl	80135a4 <_printf_common>
 80137d6:	3001      	adds	r0, #1
 80137d8:	d14a      	bne.n	8013870 <_printf_i+0x1f0>
 80137da:	f04f 30ff 	mov.w	r0, #4294967295
 80137de:	b004      	add	sp, #16
 80137e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	f043 0320 	orr.w	r3, r3, #32
 80137ea:	6023      	str	r3, [r4, #0]
 80137ec:	4832      	ldr	r0, [pc, #200]	@ (80138b8 <_printf_i+0x238>)
 80137ee:	2778      	movs	r7, #120	@ 0x78
 80137f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80137f4:	6823      	ldr	r3, [r4, #0]
 80137f6:	6831      	ldr	r1, [r6, #0]
 80137f8:	061f      	lsls	r7, r3, #24
 80137fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80137fe:	d402      	bmi.n	8013806 <_printf_i+0x186>
 8013800:	065f      	lsls	r7, r3, #25
 8013802:	bf48      	it	mi
 8013804:	b2ad      	uxthmi	r5, r5
 8013806:	6031      	str	r1, [r6, #0]
 8013808:	07d9      	lsls	r1, r3, #31
 801380a:	bf44      	itt	mi
 801380c:	f043 0320 	orrmi.w	r3, r3, #32
 8013810:	6023      	strmi	r3, [r4, #0]
 8013812:	b11d      	cbz	r5, 801381c <_printf_i+0x19c>
 8013814:	2310      	movs	r3, #16
 8013816:	e7ad      	b.n	8013774 <_printf_i+0xf4>
 8013818:	4826      	ldr	r0, [pc, #152]	@ (80138b4 <_printf_i+0x234>)
 801381a:	e7e9      	b.n	80137f0 <_printf_i+0x170>
 801381c:	6823      	ldr	r3, [r4, #0]
 801381e:	f023 0320 	bic.w	r3, r3, #32
 8013822:	6023      	str	r3, [r4, #0]
 8013824:	e7f6      	b.n	8013814 <_printf_i+0x194>
 8013826:	4616      	mov	r6, r2
 8013828:	e7bd      	b.n	80137a6 <_printf_i+0x126>
 801382a:	6833      	ldr	r3, [r6, #0]
 801382c:	6825      	ldr	r5, [r4, #0]
 801382e:	6961      	ldr	r1, [r4, #20]
 8013830:	1d18      	adds	r0, r3, #4
 8013832:	6030      	str	r0, [r6, #0]
 8013834:	062e      	lsls	r6, r5, #24
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	d501      	bpl.n	801383e <_printf_i+0x1be>
 801383a:	6019      	str	r1, [r3, #0]
 801383c:	e002      	b.n	8013844 <_printf_i+0x1c4>
 801383e:	0668      	lsls	r0, r5, #25
 8013840:	d5fb      	bpl.n	801383a <_printf_i+0x1ba>
 8013842:	8019      	strh	r1, [r3, #0]
 8013844:	2300      	movs	r3, #0
 8013846:	6123      	str	r3, [r4, #16]
 8013848:	4616      	mov	r6, r2
 801384a:	e7bc      	b.n	80137c6 <_printf_i+0x146>
 801384c:	6833      	ldr	r3, [r6, #0]
 801384e:	1d1a      	adds	r2, r3, #4
 8013850:	6032      	str	r2, [r6, #0]
 8013852:	681e      	ldr	r6, [r3, #0]
 8013854:	6862      	ldr	r2, [r4, #4]
 8013856:	2100      	movs	r1, #0
 8013858:	4630      	mov	r0, r6
 801385a:	f7ec fcf1 	bl	8000240 <memchr>
 801385e:	b108      	cbz	r0, 8013864 <_printf_i+0x1e4>
 8013860:	1b80      	subs	r0, r0, r6
 8013862:	6060      	str	r0, [r4, #4]
 8013864:	6863      	ldr	r3, [r4, #4]
 8013866:	6123      	str	r3, [r4, #16]
 8013868:	2300      	movs	r3, #0
 801386a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801386e:	e7aa      	b.n	80137c6 <_printf_i+0x146>
 8013870:	6923      	ldr	r3, [r4, #16]
 8013872:	4632      	mov	r2, r6
 8013874:	4649      	mov	r1, r9
 8013876:	4640      	mov	r0, r8
 8013878:	47d0      	blx	sl
 801387a:	3001      	adds	r0, #1
 801387c:	d0ad      	beq.n	80137da <_printf_i+0x15a>
 801387e:	6823      	ldr	r3, [r4, #0]
 8013880:	079b      	lsls	r3, r3, #30
 8013882:	d413      	bmi.n	80138ac <_printf_i+0x22c>
 8013884:	68e0      	ldr	r0, [r4, #12]
 8013886:	9b03      	ldr	r3, [sp, #12]
 8013888:	4298      	cmp	r0, r3
 801388a:	bfb8      	it	lt
 801388c:	4618      	movlt	r0, r3
 801388e:	e7a6      	b.n	80137de <_printf_i+0x15e>
 8013890:	2301      	movs	r3, #1
 8013892:	4632      	mov	r2, r6
 8013894:	4649      	mov	r1, r9
 8013896:	4640      	mov	r0, r8
 8013898:	47d0      	blx	sl
 801389a:	3001      	adds	r0, #1
 801389c:	d09d      	beq.n	80137da <_printf_i+0x15a>
 801389e:	3501      	adds	r5, #1
 80138a0:	68e3      	ldr	r3, [r4, #12]
 80138a2:	9903      	ldr	r1, [sp, #12]
 80138a4:	1a5b      	subs	r3, r3, r1
 80138a6:	42ab      	cmp	r3, r5
 80138a8:	dcf2      	bgt.n	8013890 <_printf_i+0x210>
 80138aa:	e7eb      	b.n	8013884 <_printf_i+0x204>
 80138ac:	2500      	movs	r5, #0
 80138ae:	f104 0619 	add.w	r6, r4, #25
 80138b2:	e7f5      	b.n	80138a0 <_printf_i+0x220>
 80138b4:	0801aca7 	.word	0x0801aca7
 80138b8:	0801acb8 	.word	0x0801acb8

080138bc <_scanf_float>:
 80138bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c0:	b087      	sub	sp, #28
 80138c2:	4691      	mov	r9, r2
 80138c4:	9303      	str	r3, [sp, #12]
 80138c6:	688b      	ldr	r3, [r1, #8]
 80138c8:	1e5a      	subs	r2, r3, #1
 80138ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80138ce:	bf81      	itttt	hi
 80138d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80138d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80138d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80138dc:	608b      	strhi	r3, [r1, #8]
 80138de:	680b      	ldr	r3, [r1, #0]
 80138e0:	460a      	mov	r2, r1
 80138e2:	f04f 0500 	mov.w	r5, #0
 80138e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80138ea:	f842 3b1c 	str.w	r3, [r2], #28
 80138ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80138f2:	4680      	mov	r8, r0
 80138f4:	460c      	mov	r4, r1
 80138f6:	bf98      	it	ls
 80138f8:	f04f 0b00 	movls.w	fp, #0
 80138fc:	9201      	str	r2, [sp, #4]
 80138fe:	4616      	mov	r6, r2
 8013900:	46aa      	mov	sl, r5
 8013902:	462f      	mov	r7, r5
 8013904:	9502      	str	r5, [sp, #8]
 8013906:	68a2      	ldr	r2, [r4, #8]
 8013908:	b15a      	cbz	r2, 8013922 <_scanf_float+0x66>
 801390a:	f8d9 3000 	ldr.w	r3, [r9]
 801390e:	781b      	ldrb	r3, [r3, #0]
 8013910:	2b4e      	cmp	r3, #78	@ 0x4e
 8013912:	d863      	bhi.n	80139dc <_scanf_float+0x120>
 8013914:	2b40      	cmp	r3, #64	@ 0x40
 8013916:	d83b      	bhi.n	8013990 <_scanf_float+0xd4>
 8013918:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801391c:	b2c8      	uxtb	r0, r1
 801391e:	280e      	cmp	r0, #14
 8013920:	d939      	bls.n	8013996 <_scanf_float+0xda>
 8013922:	b11f      	cbz	r7, 801392c <_scanf_float+0x70>
 8013924:	6823      	ldr	r3, [r4, #0]
 8013926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801392a:	6023      	str	r3, [r4, #0]
 801392c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013930:	f1ba 0f01 	cmp.w	sl, #1
 8013934:	f200 8114 	bhi.w	8013b60 <_scanf_float+0x2a4>
 8013938:	9b01      	ldr	r3, [sp, #4]
 801393a:	429e      	cmp	r6, r3
 801393c:	f200 8105 	bhi.w	8013b4a <_scanf_float+0x28e>
 8013940:	2001      	movs	r0, #1
 8013942:	b007      	add	sp, #28
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013948:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801394c:	2a0d      	cmp	r2, #13
 801394e:	d8e8      	bhi.n	8013922 <_scanf_float+0x66>
 8013950:	a101      	add	r1, pc, #4	@ (adr r1, 8013958 <_scanf_float+0x9c>)
 8013952:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013956:	bf00      	nop
 8013958:	08013aa1 	.word	0x08013aa1
 801395c:	08013923 	.word	0x08013923
 8013960:	08013923 	.word	0x08013923
 8013964:	08013923 	.word	0x08013923
 8013968:	08013afd 	.word	0x08013afd
 801396c:	08013ad7 	.word	0x08013ad7
 8013970:	08013923 	.word	0x08013923
 8013974:	08013923 	.word	0x08013923
 8013978:	08013aaf 	.word	0x08013aaf
 801397c:	08013923 	.word	0x08013923
 8013980:	08013923 	.word	0x08013923
 8013984:	08013923 	.word	0x08013923
 8013988:	08013923 	.word	0x08013923
 801398c:	08013a6b 	.word	0x08013a6b
 8013990:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013994:	e7da      	b.n	801394c <_scanf_float+0x90>
 8013996:	290e      	cmp	r1, #14
 8013998:	d8c3      	bhi.n	8013922 <_scanf_float+0x66>
 801399a:	a001      	add	r0, pc, #4	@ (adr r0, 80139a0 <_scanf_float+0xe4>)
 801399c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80139a0:	08013a5b 	.word	0x08013a5b
 80139a4:	08013923 	.word	0x08013923
 80139a8:	08013a5b 	.word	0x08013a5b
 80139ac:	08013aeb 	.word	0x08013aeb
 80139b0:	08013923 	.word	0x08013923
 80139b4:	080139fd 	.word	0x080139fd
 80139b8:	08013a41 	.word	0x08013a41
 80139bc:	08013a41 	.word	0x08013a41
 80139c0:	08013a41 	.word	0x08013a41
 80139c4:	08013a41 	.word	0x08013a41
 80139c8:	08013a41 	.word	0x08013a41
 80139cc:	08013a41 	.word	0x08013a41
 80139d0:	08013a41 	.word	0x08013a41
 80139d4:	08013a41 	.word	0x08013a41
 80139d8:	08013a41 	.word	0x08013a41
 80139dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80139de:	d809      	bhi.n	80139f4 <_scanf_float+0x138>
 80139e0:	2b60      	cmp	r3, #96	@ 0x60
 80139e2:	d8b1      	bhi.n	8013948 <_scanf_float+0x8c>
 80139e4:	2b54      	cmp	r3, #84	@ 0x54
 80139e6:	d07b      	beq.n	8013ae0 <_scanf_float+0x224>
 80139e8:	2b59      	cmp	r3, #89	@ 0x59
 80139ea:	d19a      	bne.n	8013922 <_scanf_float+0x66>
 80139ec:	2d07      	cmp	r5, #7
 80139ee:	d198      	bne.n	8013922 <_scanf_float+0x66>
 80139f0:	2508      	movs	r5, #8
 80139f2:	e02f      	b.n	8013a54 <_scanf_float+0x198>
 80139f4:	2b74      	cmp	r3, #116	@ 0x74
 80139f6:	d073      	beq.n	8013ae0 <_scanf_float+0x224>
 80139f8:	2b79      	cmp	r3, #121	@ 0x79
 80139fa:	e7f6      	b.n	80139ea <_scanf_float+0x12e>
 80139fc:	6821      	ldr	r1, [r4, #0]
 80139fe:	05c8      	lsls	r0, r1, #23
 8013a00:	d51e      	bpl.n	8013a40 <_scanf_float+0x184>
 8013a02:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013a06:	6021      	str	r1, [r4, #0]
 8013a08:	3701      	adds	r7, #1
 8013a0a:	f1bb 0f00 	cmp.w	fp, #0
 8013a0e:	d003      	beq.n	8013a18 <_scanf_float+0x15c>
 8013a10:	3201      	adds	r2, #1
 8013a12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a16:	60a2      	str	r2, [r4, #8]
 8013a18:	68a3      	ldr	r3, [r4, #8]
 8013a1a:	3b01      	subs	r3, #1
 8013a1c:	60a3      	str	r3, [r4, #8]
 8013a1e:	6923      	ldr	r3, [r4, #16]
 8013a20:	3301      	adds	r3, #1
 8013a22:	6123      	str	r3, [r4, #16]
 8013a24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013a28:	3b01      	subs	r3, #1
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013a30:	f340 8082 	ble.w	8013b38 <_scanf_float+0x27c>
 8013a34:	f8d9 3000 	ldr.w	r3, [r9]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	f8c9 3000 	str.w	r3, [r9]
 8013a3e:	e762      	b.n	8013906 <_scanf_float+0x4a>
 8013a40:	eb1a 0105 	adds.w	r1, sl, r5
 8013a44:	f47f af6d 	bne.w	8013922 <_scanf_float+0x66>
 8013a48:	6822      	ldr	r2, [r4, #0]
 8013a4a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013a4e:	6022      	str	r2, [r4, #0]
 8013a50:	460d      	mov	r5, r1
 8013a52:	468a      	mov	sl, r1
 8013a54:	f806 3b01 	strb.w	r3, [r6], #1
 8013a58:	e7de      	b.n	8013a18 <_scanf_float+0x15c>
 8013a5a:	6822      	ldr	r2, [r4, #0]
 8013a5c:	0610      	lsls	r0, r2, #24
 8013a5e:	f57f af60 	bpl.w	8013922 <_scanf_float+0x66>
 8013a62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013a66:	6022      	str	r2, [r4, #0]
 8013a68:	e7f4      	b.n	8013a54 <_scanf_float+0x198>
 8013a6a:	f1ba 0f00 	cmp.w	sl, #0
 8013a6e:	d10c      	bne.n	8013a8a <_scanf_float+0x1ce>
 8013a70:	b977      	cbnz	r7, 8013a90 <_scanf_float+0x1d4>
 8013a72:	6822      	ldr	r2, [r4, #0]
 8013a74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013a78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013a7c:	d108      	bne.n	8013a90 <_scanf_float+0x1d4>
 8013a7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013a82:	6022      	str	r2, [r4, #0]
 8013a84:	f04f 0a01 	mov.w	sl, #1
 8013a88:	e7e4      	b.n	8013a54 <_scanf_float+0x198>
 8013a8a:	f1ba 0f02 	cmp.w	sl, #2
 8013a8e:	d050      	beq.n	8013b32 <_scanf_float+0x276>
 8013a90:	2d01      	cmp	r5, #1
 8013a92:	d002      	beq.n	8013a9a <_scanf_float+0x1de>
 8013a94:	2d04      	cmp	r5, #4
 8013a96:	f47f af44 	bne.w	8013922 <_scanf_float+0x66>
 8013a9a:	3501      	adds	r5, #1
 8013a9c:	b2ed      	uxtb	r5, r5
 8013a9e:	e7d9      	b.n	8013a54 <_scanf_float+0x198>
 8013aa0:	f1ba 0f01 	cmp.w	sl, #1
 8013aa4:	f47f af3d 	bne.w	8013922 <_scanf_float+0x66>
 8013aa8:	f04f 0a02 	mov.w	sl, #2
 8013aac:	e7d2      	b.n	8013a54 <_scanf_float+0x198>
 8013aae:	b975      	cbnz	r5, 8013ace <_scanf_float+0x212>
 8013ab0:	2f00      	cmp	r7, #0
 8013ab2:	f47f af37 	bne.w	8013924 <_scanf_float+0x68>
 8013ab6:	6822      	ldr	r2, [r4, #0]
 8013ab8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013abc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013ac0:	f040 80fc 	bne.w	8013cbc <_scanf_float+0x400>
 8013ac4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013ac8:	6022      	str	r2, [r4, #0]
 8013aca:	2501      	movs	r5, #1
 8013acc:	e7c2      	b.n	8013a54 <_scanf_float+0x198>
 8013ace:	2d03      	cmp	r5, #3
 8013ad0:	d0e3      	beq.n	8013a9a <_scanf_float+0x1de>
 8013ad2:	2d05      	cmp	r5, #5
 8013ad4:	e7df      	b.n	8013a96 <_scanf_float+0x1da>
 8013ad6:	2d02      	cmp	r5, #2
 8013ad8:	f47f af23 	bne.w	8013922 <_scanf_float+0x66>
 8013adc:	2503      	movs	r5, #3
 8013ade:	e7b9      	b.n	8013a54 <_scanf_float+0x198>
 8013ae0:	2d06      	cmp	r5, #6
 8013ae2:	f47f af1e 	bne.w	8013922 <_scanf_float+0x66>
 8013ae6:	2507      	movs	r5, #7
 8013ae8:	e7b4      	b.n	8013a54 <_scanf_float+0x198>
 8013aea:	6822      	ldr	r2, [r4, #0]
 8013aec:	0591      	lsls	r1, r2, #22
 8013aee:	f57f af18 	bpl.w	8013922 <_scanf_float+0x66>
 8013af2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013af6:	6022      	str	r2, [r4, #0]
 8013af8:	9702      	str	r7, [sp, #8]
 8013afa:	e7ab      	b.n	8013a54 <_scanf_float+0x198>
 8013afc:	6822      	ldr	r2, [r4, #0]
 8013afe:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013b02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013b06:	d005      	beq.n	8013b14 <_scanf_float+0x258>
 8013b08:	0550      	lsls	r0, r2, #21
 8013b0a:	f57f af0a 	bpl.w	8013922 <_scanf_float+0x66>
 8013b0e:	2f00      	cmp	r7, #0
 8013b10:	f000 80d4 	beq.w	8013cbc <_scanf_float+0x400>
 8013b14:	0591      	lsls	r1, r2, #22
 8013b16:	bf58      	it	pl
 8013b18:	9902      	ldrpl	r1, [sp, #8]
 8013b1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013b1e:	bf58      	it	pl
 8013b20:	1a79      	subpl	r1, r7, r1
 8013b22:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013b26:	bf58      	it	pl
 8013b28:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013b2c:	6022      	str	r2, [r4, #0]
 8013b2e:	2700      	movs	r7, #0
 8013b30:	e790      	b.n	8013a54 <_scanf_float+0x198>
 8013b32:	f04f 0a03 	mov.w	sl, #3
 8013b36:	e78d      	b.n	8013a54 <_scanf_float+0x198>
 8013b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013b3c:	4649      	mov	r1, r9
 8013b3e:	4640      	mov	r0, r8
 8013b40:	4798      	blx	r3
 8013b42:	2800      	cmp	r0, #0
 8013b44:	f43f aedf 	beq.w	8013906 <_scanf_float+0x4a>
 8013b48:	e6eb      	b.n	8013922 <_scanf_float+0x66>
 8013b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b52:	464a      	mov	r2, r9
 8013b54:	4640      	mov	r0, r8
 8013b56:	4798      	blx	r3
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	3b01      	subs	r3, #1
 8013b5c:	6123      	str	r3, [r4, #16]
 8013b5e:	e6eb      	b.n	8013938 <_scanf_float+0x7c>
 8013b60:	1e6b      	subs	r3, r5, #1
 8013b62:	2b06      	cmp	r3, #6
 8013b64:	d824      	bhi.n	8013bb0 <_scanf_float+0x2f4>
 8013b66:	2d02      	cmp	r5, #2
 8013b68:	d836      	bhi.n	8013bd8 <_scanf_float+0x31c>
 8013b6a:	9b01      	ldr	r3, [sp, #4]
 8013b6c:	429e      	cmp	r6, r3
 8013b6e:	f67f aee7 	bls.w	8013940 <_scanf_float+0x84>
 8013b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b7a:	464a      	mov	r2, r9
 8013b7c:	4640      	mov	r0, r8
 8013b7e:	4798      	blx	r3
 8013b80:	6923      	ldr	r3, [r4, #16]
 8013b82:	3b01      	subs	r3, #1
 8013b84:	6123      	str	r3, [r4, #16]
 8013b86:	e7f0      	b.n	8013b6a <_scanf_float+0x2ae>
 8013b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013b90:	464a      	mov	r2, r9
 8013b92:	4640      	mov	r0, r8
 8013b94:	4798      	blx	r3
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	6123      	str	r3, [r4, #16]
 8013b9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013ba0:	fa5f fa8a 	uxtb.w	sl, sl
 8013ba4:	f1ba 0f02 	cmp.w	sl, #2
 8013ba8:	d1ee      	bne.n	8013b88 <_scanf_float+0x2cc>
 8013baa:	3d03      	subs	r5, #3
 8013bac:	b2ed      	uxtb	r5, r5
 8013bae:	1b76      	subs	r6, r6, r5
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	05da      	lsls	r2, r3, #23
 8013bb4:	d530      	bpl.n	8013c18 <_scanf_float+0x35c>
 8013bb6:	055b      	lsls	r3, r3, #21
 8013bb8:	d511      	bpl.n	8013bde <_scanf_float+0x322>
 8013bba:	9b01      	ldr	r3, [sp, #4]
 8013bbc:	429e      	cmp	r6, r3
 8013bbe:	f67f aebf 	bls.w	8013940 <_scanf_float+0x84>
 8013bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013bca:	464a      	mov	r2, r9
 8013bcc:	4640      	mov	r0, r8
 8013bce:	4798      	blx	r3
 8013bd0:	6923      	ldr	r3, [r4, #16]
 8013bd2:	3b01      	subs	r3, #1
 8013bd4:	6123      	str	r3, [r4, #16]
 8013bd6:	e7f0      	b.n	8013bba <_scanf_float+0x2fe>
 8013bd8:	46aa      	mov	sl, r5
 8013bda:	46b3      	mov	fp, r6
 8013bdc:	e7de      	b.n	8013b9c <_scanf_float+0x2e0>
 8013bde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013be2:	6923      	ldr	r3, [r4, #16]
 8013be4:	2965      	cmp	r1, #101	@ 0x65
 8013be6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013bea:	f106 35ff 	add.w	r5, r6, #4294967295
 8013bee:	6123      	str	r3, [r4, #16]
 8013bf0:	d00c      	beq.n	8013c0c <_scanf_float+0x350>
 8013bf2:	2945      	cmp	r1, #69	@ 0x45
 8013bf4:	d00a      	beq.n	8013c0c <_scanf_float+0x350>
 8013bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013bfa:	464a      	mov	r2, r9
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	4798      	blx	r3
 8013c00:	6923      	ldr	r3, [r4, #16]
 8013c02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013c06:	3b01      	subs	r3, #1
 8013c08:	1eb5      	subs	r5, r6, #2
 8013c0a:	6123      	str	r3, [r4, #16]
 8013c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013c10:	464a      	mov	r2, r9
 8013c12:	4640      	mov	r0, r8
 8013c14:	4798      	blx	r3
 8013c16:	462e      	mov	r6, r5
 8013c18:	6822      	ldr	r2, [r4, #0]
 8013c1a:	f012 0210 	ands.w	r2, r2, #16
 8013c1e:	d001      	beq.n	8013c24 <_scanf_float+0x368>
 8013c20:	2000      	movs	r0, #0
 8013c22:	e68e      	b.n	8013942 <_scanf_float+0x86>
 8013c24:	7032      	strb	r2, [r6, #0]
 8013c26:	6823      	ldr	r3, [r4, #0]
 8013c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c30:	d123      	bne.n	8013c7a <_scanf_float+0x3be>
 8013c32:	9b02      	ldr	r3, [sp, #8]
 8013c34:	429f      	cmp	r7, r3
 8013c36:	d00a      	beq.n	8013c4e <_scanf_float+0x392>
 8013c38:	1bda      	subs	r2, r3, r7
 8013c3a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013c3e:	429e      	cmp	r6, r3
 8013c40:	bf28      	it	cs
 8013c42:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013c46:	491e      	ldr	r1, [pc, #120]	@ (8013cc0 <_scanf_float+0x404>)
 8013c48:	4630      	mov	r0, r6
 8013c4a:	f000 f911 	bl	8013e70 <siprintf>
 8013c4e:	9901      	ldr	r1, [sp, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	4640      	mov	r0, r8
 8013c54:	f002 fba2 	bl	801639c <_strtod_r>
 8013c58:	9b03      	ldr	r3, [sp, #12]
 8013c5a:	6821      	ldr	r1, [r4, #0]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f011 0f02 	tst.w	r1, #2
 8013c62:	f103 0204 	add.w	r2, r3, #4
 8013c66:	d015      	beq.n	8013c94 <_scanf_float+0x3d8>
 8013c68:	9903      	ldr	r1, [sp, #12]
 8013c6a:	600a      	str	r2, [r1, #0]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	ed83 0b00 	vstr	d0, [r3]
 8013c72:	68e3      	ldr	r3, [r4, #12]
 8013c74:	3301      	adds	r3, #1
 8013c76:	60e3      	str	r3, [r4, #12]
 8013c78:	e7d2      	b.n	8013c20 <_scanf_float+0x364>
 8013c7a:	9b04      	ldr	r3, [sp, #16]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0e6      	beq.n	8013c4e <_scanf_float+0x392>
 8013c80:	9905      	ldr	r1, [sp, #20]
 8013c82:	230a      	movs	r3, #10
 8013c84:	3101      	adds	r1, #1
 8013c86:	4640      	mov	r0, r8
 8013c88:	f7ff f9e0 	bl	801304c <_strtol_r>
 8013c8c:	9b04      	ldr	r3, [sp, #16]
 8013c8e:	9e05      	ldr	r6, [sp, #20]
 8013c90:	1ac2      	subs	r2, r0, r3
 8013c92:	e7d2      	b.n	8013c3a <_scanf_float+0x37e>
 8013c94:	f011 0f04 	tst.w	r1, #4
 8013c98:	9903      	ldr	r1, [sp, #12]
 8013c9a:	600a      	str	r2, [r1, #0]
 8013c9c:	d1e6      	bne.n	8013c6c <_scanf_float+0x3b0>
 8013c9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca6:	681d      	ldr	r5, [r3, #0]
 8013ca8:	d705      	bvc.n	8013cb6 <_scanf_float+0x3fa>
 8013caa:	4806      	ldr	r0, [pc, #24]	@ (8013cc4 <_scanf_float+0x408>)
 8013cac:	f000 fa10 	bl	80140d0 <nanf>
 8013cb0:	ed85 0a00 	vstr	s0, [r5]
 8013cb4:	e7dd      	b.n	8013c72 <_scanf_float+0x3b6>
 8013cb6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013cba:	e7f9      	b.n	8013cb0 <_scanf_float+0x3f4>
 8013cbc:	2700      	movs	r7, #0
 8013cbe:	e635      	b.n	801392c <_scanf_float+0x70>
 8013cc0:	0801acc9 	.word	0x0801acc9
 8013cc4:	0801ad09 	.word	0x0801ad09

08013cc8 <std>:
 8013cc8:	2300      	movs	r3, #0
 8013cca:	b510      	push	{r4, lr}
 8013ccc:	4604      	mov	r4, r0
 8013cce:	e9c0 3300 	strd	r3, r3, [r0]
 8013cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cd6:	6083      	str	r3, [r0, #8]
 8013cd8:	8181      	strh	r1, [r0, #12]
 8013cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8013cdc:	81c2      	strh	r2, [r0, #14]
 8013cde:	6183      	str	r3, [r0, #24]
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	2208      	movs	r2, #8
 8013ce4:	305c      	adds	r0, #92	@ 0x5c
 8013ce6:	f000 f952 	bl	8013f8e <memset>
 8013cea:	4b0d      	ldr	r3, [pc, #52]	@ (8013d20 <std+0x58>)
 8013cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cee:	4b0d      	ldr	r3, [pc, #52]	@ (8013d24 <std+0x5c>)
 8013cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8013d28 <std+0x60>)
 8013cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d2c <std+0x64>)
 8013cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8013cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8013d30 <std+0x68>)
 8013cfc:	6224      	str	r4, [r4, #32]
 8013cfe:	429c      	cmp	r4, r3
 8013d00:	d006      	beq.n	8013d10 <std+0x48>
 8013d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013d06:	4294      	cmp	r4, r2
 8013d08:	d002      	beq.n	8013d10 <std+0x48>
 8013d0a:	33d0      	adds	r3, #208	@ 0xd0
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	d105      	bne.n	8013d1c <std+0x54>
 8013d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d18:	f000 b9c8 	b.w	80140ac <__retarget_lock_init_recursive>
 8013d1c:	bd10      	pop	{r4, pc}
 8013d1e:	bf00      	nop
 8013d20:	08013eb5 	.word	0x08013eb5
 8013d24:	08013ed7 	.word	0x08013ed7
 8013d28:	08013f0f 	.word	0x08013f0f
 8013d2c:	08013f33 	.word	0x08013f33
 8013d30:	20008164 	.word	0x20008164

08013d34 <stdio_exit_handler>:
 8013d34:	4a02      	ldr	r2, [pc, #8]	@ (8013d40 <stdio_exit_handler+0xc>)
 8013d36:	4903      	ldr	r1, [pc, #12]	@ (8013d44 <stdio_exit_handler+0x10>)
 8013d38:	4803      	ldr	r0, [pc, #12]	@ (8013d48 <stdio_exit_handler+0x14>)
 8013d3a:	f000 b869 	b.w	8013e10 <_fwalk_sglue>
 8013d3e:	bf00      	nop
 8013d40:	20000040 	.word	0x20000040
 8013d44:	080169e5 	.word	0x080169e5
 8013d48:	20000050 	.word	0x20000050

08013d4c <cleanup_stdio>:
 8013d4c:	6841      	ldr	r1, [r0, #4]
 8013d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8013d80 <cleanup_stdio+0x34>)
 8013d50:	4299      	cmp	r1, r3
 8013d52:	b510      	push	{r4, lr}
 8013d54:	4604      	mov	r4, r0
 8013d56:	d001      	beq.n	8013d5c <cleanup_stdio+0x10>
 8013d58:	f002 fe44 	bl	80169e4 <_fflush_r>
 8013d5c:	68a1      	ldr	r1, [r4, #8]
 8013d5e:	4b09      	ldr	r3, [pc, #36]	@ (8013d84 <cleanup_stdio+0x38>)
 8013d60:	4299      	cmp	r1, r3
 8013d62:	d002      	beq.n	8013d6a <cleanup_stdio+0x1e>
 8013d64:	4620      	mov	r0, r4
 8013d66:	f002 fe3d 	bl	80169e4 <_fflush_r>
 8013d6a:	68e1      	ldr	r1, [r4, #12]
 8013d6c:	4b06      	ldr	r3, [pc, #24]	@ (8013d88 <cleanup_stdio+0x3c>)
 8013d6e:	4299      	cmp	r1, r3
 8013d70:	d004      	beq.n	8013d7c <cleanup_stdio+0x30>
 8013d72:	4620      	mov	r0, r4
 8013d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d78:	f002 be34 	b.w	80169e4 <_fflush_r>
 8013d7c:	bd10      	pop	{r4, pc}
 8013d7e:	bf00      	nop
 8013d80:	20008164 	.word	0x20008164
 8013d84:	200081cc 	.word	0x200081cc
 8013d88:	20008234 	.word	0x20008234

08013d8c <global_stdio_init.part.0>:
 8013d8c:	b510      	push	{r4, lr}
 8013d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8013dbc <global_stdio_init.part.0+0x30>)
 8013d90:	4c0b      	ldr	r4, [pc, #44]	@ (8013dc0 <global_stdio_init.part.0+0x34>)
 8013d92:	4a0c      	ldr	r2, [pc, #48]	@ (8013dc4 <global_stdio_init.part.0+0x38>)
 8013d94:	601a      	str	r2, [r3, #0]
 8013d96:	4620      	mov	r0, r4
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2104      	movs	r1, #4
 8013d9c:	f7ff ff94 	bl	8013cc8 <std>
 8013da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013da4:	2201      	movs	r2, #1
 8013da6:	2109      	movs	r1, #9
 8013da8:	f7ff ff8e 	bl	8013cc8 <std>
 8013dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013db0:	2202      	movs	r2, #2
 8013db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013db6:	2112      	movs	r1, #18
 8013db8:	f7ff bf86 	b.w	8013cc8 <std>
 8013dbc:	2000829c 	.word	0x2000829c
 8013dc0:	20008164 	.word	0x20008164
 8013dc4:	08013d35 	.word	0x08013d35

08013dc8 <__sfp_lock_acquire>:
 8013dc8:	4801      	ldr	r0, [pc, #4]	@ (8013dd0 <__sfp_lock_acquire+0x8>)
 8013dca:	f000 b970 	b.w	80140ae <__retarget_lock_acquire_recursive>
 8013dce:	bf00      	nop
 8013dd0:	200082a5 	.word	0x200082a5

08013dd4 <__sfp_lock_release>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	@ (8013ddc <__sfp_lock_release+0x8>)
 8013dd6:	f000 b96b 	b.w	80140b0 <__retarget_lock_release_recursive>
 8013dda:	bf00      	nop
 8013ddc:	200082a5 	.word	0x200082a5

08013de0 <__sinit>:
 8013de0:	b510      	push	{r4, lr}
 8013de2:	4604      	mov	r4, r0
 8013de4:	f7ff fff0 	bl	8013dc8 <__sfp_lock_acquire>
 8013de8:	6a23      	ldr	r3, [r4, #32]
 8013dea:	b11b      	cbz	r3, 8013df4 <__sinit+0x14>
 8013dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013df0:	f7ff bff0 	b.w	8013dd4 <__sfp_lock_release>
 8013df4:	4b04      	ldr	r3, [pc, #16]	@ (8013e08 <__sinit+0x28>)
 8013df6:	6223      	str	r3, [r4, #32]
 8013df8:	4b04      	ldr	r3, [pc, #16]	@ (8013e0c <__sinit+0x2c>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1f5      	bne.n	8013dec <__sinit+0xc>
 8013e00:	f7ff ffc4 	bl	8013d8c <global_stdio_init.part.0>
 8013e04:	e7f2      	b.n	8013dec <__sinit+0xc>
 8013e06:	bf00      	nop
 8013e08:	08013d4d 	.word	0x08013d4d
 8013e0c:	2000829c 	.word	0x2000829c

08013e10 <_fwalk_sglue>:
 8013e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e14:	4607      	mov	r7, r0
 8013e16:	4688      	mov	r8, r1
 8013e18:	4614      	mov	r4, r2
 8013e1a:	2600      	movs	r6, #0
 8013e1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e20:	f1b9 0901 	subs.w	r9, r9, #1
 8013e24:	d505      	bpl.n	8013e32 <_fwalk_sglue+0x22>
 8013e26:	6824      	ldr	r4, [r4, #0]
 8013e28:	2c00      	cmp	r4, #0
 8013e2a:	d1f7      	bne.n	8013e1c <_fwalk_sglue+0xc>
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e32:	89ab      	ldrh	r3, [r5, #12]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d907      	bls.n	8013e48 <_fwalk_sglue+0x38>
 8013e38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	d003      	beq.n	8013e48 <_fwalk_sglue+0x38>
 8013e40:	4629      	mov	r1, r5
 8013e42:	4638      	mov	r0, r7
 8013e44:	47c0      	blx	r8
 8013e46:	4306      	orrs	r6, r0
 8013e48:	3568      	adds	r5, #104	@ 0x68
 8013e4a:	e7e9      	b.n	8013e20 <_fwalk_sglue+0x10>

08013e4c <iprintf>:
 8013e4c:	b40f      	push	{r0, r1, r2, r3}
 8013e4e:	b507      	push	{r0, r1, r2, lr}
 8013e50:	4906      	ldr	r1, [pc, #24]	@ (8013e6c <iprintf+0x20>)
 8013e52:	ab04      	add	r3, sp, #16
 8013e54:	6808      	ldr	r0, [r1, #0]
 8013e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e5a:	6881      	ldr	r1, [r0, #8]
 8013e5c:	9301      	str	r3, [sp, #4]
 8013e5e:	f002 fc25 	bl	80166ac <_vfiprintf_r>
 8013e62:	b003      	add	sp, #12
 8013e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e68:	b004      	add	sp, #16
 8013e6a:	4770      	bx	lr
 8013e6c:	2000004c 	.word	0x2000004c

08013e70 <siprintf>:
 8013e70:	b40e      	push	{r1, r2, r3}
 8013e72:	b510      	push	{r4, lr}
 8013e74:	b09d      	sub	sp, #116	@ 0x74
 8013e76:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013e78:	9002      	str	r0, [sp, #8]
 8013e7a:	9006      	str	r0, [sp, #24]
 8013e7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013e80:	480a      	ldr	r0, [pc, #40]	@ (8013eac <siprintf+0x3c>)
 8013e82:	9107      	str	r1, [sp, #28]
 8013e84:	9104      	str	r1, [sp, #16]
 8013e86:	490a      	ldr	r1, [pc, #40]	@ (8013eb0 <siprintf+0x40>)
 8013e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e8c:	9105      	str	r1, [sp, #20]
 8013e8e:	2400      	movs	r4, #0
 8013e90:	a902      	add	r1, sp, #8
 8013e92:	6800      	ldr	r0, [r0, #0]
 8013e94:	9301      	str	r3, [sp, #4]
 8013e96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013e98:	f002 fae2 	bl	8016460 <_svfiprintf_r>
 8013e9c:	9b02      	ldr	r3, [sp, #8]
 8013e9e:	701c      	strb	r4, [r3, #0]
 8013ea0:	b01d      	add	sp, #116	@ 0x74
 8013ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ea6:	b003      	add	sp, #12
 8013ea8:	4770      	bx	lr
 8013eaa:	bf00      	nop
 8013eac:	2000004c 	.word	0x2000004c
 8013eb0:	ffff0208 	.word	0xffff0208

08013eb4 <__sread>:
 8013eb4:	b510      	push	{r4, lr}
 8013eb6:	460c      	mov	r4, r1
 8013eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ebc:	f000 f8a8 	bl	8014010 <_read_r>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	bfab      	itete	ge
 8013ec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ec8:	181b      	addge	r3, r3, r0
 8013eca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013ece:	bfac      	ite	ge
 8013ed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013ed2:	81a3      	strhlt	r3, [r4, #12]
 8013ed4:	bd10      	pop	{r4, pc}

08013ed6 <__swrite>:
 8013ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eda:	461f      	mov	r7, r3
 8013edc:	898b      	ldrh	r3, [r1, #12]
 8013ede:	05db      	lsls	r3, r3, #23
 8013ee0:	4605      	mov	r5, r0
 8013ee2:	460c      	mov	r4, r1
 8013ee4:	4616      	mov	r6, r2
 8013ee6:	d505      	bpl.n	8013ef4 <__swrite+0x1e>
 8013ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eec:	2302      	movs	r3, #2
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f000 f87c 	bl	8013fec <_lseek_r>
 8013ef4:	89a3      	ldrh	r3, [r4, #12]
 8013ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013efa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013efe:	81a3      	strh	r3, [r4, #12]
 8013f00:	4632      	mov	r2, r6
 8013f02:	463b      	mov	r3, r7
 8013f04:	4628      	mov	r0, r5
 8013f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f0a:	f000 b893 	b.w	8014034 <_write_r>

08013f0e <__sseek>:
 8013f0e:	b510      	push	{r4, lr}
 8013f10:	460c      	mov	r4, r1
 8013f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f16:	f000 f869 	bl	8013fec <_lseek_r>
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	89a3      	ldrh	r3, [r4, #12]
 8013f1e:	bf15      	itete	ne
 8013f20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f2a:	81a3      	strheq	r3, [r4, #12]
 8013f2c:	bf18      	it	ne
 8013f2e:	81a3      	strhne	r3, [r4, #12]
 8013f30:	bd10      	pop	{r4, pc}

08013f32 <__sclose>:
 8013f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f36:	f000 b849 	b.w	8013fcc <_close_r>

08013f3a <memcmp>:
 8013f3a:	b510      	push	{r4, lr}
 8013f3c:	3901      	subs	r1, #1
 8013f3e:	4402      	add	r2, r0
 8013f40:	4290      	cmp	r0, r2
 8013f42:	d101      	bne.n	8013f48 <memcmp+0xe>
 8013f44:	2000      	movs	r0, #0
 8013f46:	e005      	b.n	8013f54 <memcmp+0x1a>
 8013f48:	7803      	ldrb	r3, [r0, #0]
 8013f4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f4e:	42a3      	cmp	r3, r4
 8013f50:	d001      	beq.n	8013f56 <memcmp+0x1c>
 8013f52:	1b18      	subs	r0, r3, r4
 8013f54:	bd10      	pop	{r4, pc}
 8013f56:	3001      	adds	r0, #1
 8013f58:	e7f2      	b.n	8013f40 <memcmp+0x6>

08013f5a <memmove>:
 8013f5a:	4288      	cmp	r0, r1
 8013f5c:	b510      	push	{r4, lr}
 8013f5e:	eb01 0402 	add.w	r4, r1, r2
 8013f62:	d902      	bls.n	8013f6a <memmove+0x10>
 8013f64:	4284      	cmp	r4, r0
 8013f66:	4623      	mov	r3, r4
 8013f68:	d807      	bhi.n	8013f7a <memmove+0x20>
 8013f6a:	1e43      	subs	r3, r0, #1
 8013f6c:	42a1      	cmp	r1, r4
 8013f6e:	d008      	beq.n	8013f82 <memmove+0x28>
 8013f70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f78:	e7f8      	b.n	8013f6c <memmove+0x12>
 8013f7a:	4402      	add	r2, r0
 8013f7c:	4601      	mov	r1, r0
 8013f7e:	428a      	cmp	r2, r1
 8013f80:	d100      	bne.n	8013f84 <memmove+0x2a>
 8013f82:	bd10      	pop	{r4, pc}
 8013f84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f8c:	e7f7      	b.n	8013f7e <memmove+0x24>

08013f8e <memset>:
 8013f8e:	4402      	add	r2, r0
 8013f90:	4603      	mov	r3, r0
 8013f92:	4293      	cmp	r3, r2
 8013f94:	d100      	bne.n	8013f98 <memset+0xa>
 8013f96:	4770      	bx	lr
 8013f98:	f803 1b01 	strb.w	r1, [r3], #1
 8013f9c:	e7f9      	b.n	8013f92 <memset+0x4>

08013f9e <strncmp>:
 8013f9e:	b510      	push	{r4, lr}
 8013fa0:	b16a      	cbz	r2, 8013fbe <strncmp+0x20>
 8013fa2:	3901      	subs	r1, #1
 8013fa4:	1884      	adds	r4, r0, r2
 8013fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013faa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d103      	bne.n	8013fba <strncmp+0x1c>
 8013fb2:	42a0      	cmp	r0, r4
 8013fb4:	d001      	beq.n	8013fba <strncmp+0x1c>
 8013fb6:	2a00      	cmp	r2, #0
 8013fb8:	d1f5      	bne.n	8013fa6 <strncmp+0x8>
 8013fba:	1ad0      	subs	r0, r2, r3
 8013fbc:	bd10      	pop	{r4, pc}
 8013fbe:	4610      	mov	r0, r2
 8013fc0:	e7fc      	b.n	8013fbc <strncmp+0x1e>
	...

08013fc4 <_localeconv_r>:
 8013fc4:	4800      	ldr	r0, [pc, #0]	@ (8013fc8 <_localeconv_r+0x4>)
 8013fc6:	4770      	bx	lr
 8013fc8:	2000018c 	.word	0x2000018c

08013fcc <_close_r>:
 8013fcc:	b538      	push	{r3, r4, r5, lr}
 8013fce:	4d06      	ldr	r5, [pc, #24]	@ (8013fe8 <_close_r+0x1c>)
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	4608      	mov	r0, r1
 8013fd6:	602b      	str	r3, [r5, #0]
 8013fd8:	f7ed fb1c 	bl	8001614 <_close>
 8013fdc:	1c43      	adds	r3, r0, #1
 8013fde:	d102      	bne.n	8013fe6 <_close_r+0x1a>
 8013fe0:	682b      	ldr	r3, [r5, #0]
 8013fe2:	b103      	cbz	r3, 8013fe6 <_close_r+0x1a>
 8013fe4:	6023      	str	r3, [r4, #0]
 8013fe6:	bd38      	pop	{r3, r4, r5, pc}
 8013fe8:	200082a0 	.word	0x200082a0

08013fec <_lseek_r>:
 8013fec:	b538      	push	{r3, r4, r5, lr}
 8013fee:	4d07      	ldr	r5, [pc, #28]	@ (801400c <_lseek_r+0x20>)
 8013ff0:	4604      	mov	r4, r0
 8013ff2:	4608      	mov	r0, r1
 8013ff4:	4611      	mov	r1, r2
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	602a      	str	r2, [r5, #0]
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	f7ed fb31 	bl	8001662 <_lseek>
 8014000:	1c43      	adds	r3, r0, #1
 8014002:	d102      	bne.n	801400a <_lseek_r+0x1e>
 8014004:	682b      	ldr	r3, [r5, #0]
 8014006:	b103      	cbz	r3, 801400a <_lseek_r+0x1e>
 8014008:	6023      	str	r3, [r4, #0]
 801400a:	bd38      	pop	{r3, r4, r5, pc}
 801400c:	200082a0 	.word	0x200082a0

08014010 <_read_r>:
 8014010:	b538      	push	{r3, r4, r5, lr}
 8014012:	4d07      	ldr	r5, [pc, #28]	@ (8014030 <_read_r+0x20>)
 8014014:	4604      	mov	r4, r0
 8014016:	4608      	mov	r0, r1
 8014018:	4611      	mov	r1, r2
 801401a:	2200      	movs	r2, #0
 801401c:	602a      	str	r2, [r5, #0]
 801401e:	461a      	mov	r2, r3
 8014020:	f7ed fabf 	bl	80015a2 <_read>
 8014024:	1c43      	adds	r3, r0, #1
 8014026:	d102      	bne.n	801402e <_read_r+0x1e>
 8014028:	682b      	ldr	r3, [r5, #0]
 801402a:	b103      	cbz	r3, 801402e <_read_r+0x1e>
 801402c:	6023      	str	r3, [r4, #0]
 801402e:	bd38      	pop	{r3, r4, r5, pc}
 8014030:	200082a0 	.word	0x200082a0

08014034 <_write_r>:
 8014034:	b538      	push	{r3, r4, r5, lr}
 8014036:	4d07      	ldr	r5, [pc, #28]	@ (8014054 <_write_r+0x20>)
 8014038:	4604      	mov	r4, r0
 801403a:	4608      	mov	r0, r1
 801403c:	4611      	mov	r1, r2
 801403e:	2200      	movs	r2, #0
 8014040:	602a      	str	r2, [r5, #0]
 8014042:	461a      	mov	r2, r3
 8014044:	f7ed faca 	bl	80015dc <_write>
 8014048:	1c43      	adds	r3, r0, #1
 801404a:	d102      	bne.n	8014052 <_write_r+0x1e>
 801404c:	682b      	ldr	r3, [r5, #0]
 801404e:	b103      	cbz	r3, 8014052 <_write_r+0x1e>
 8014050:	6023      	str	r3, [r4, #0]
 8014052:	bd38      	pop	{r3, r4, r5, pc}
 8014054:	200082a0 	.word	0x200082a0

08014058 <__errno>:
 8014058:	4b01      	ldr	r3, [pc, #4]	@ (8014060 <__errno+0x8>)
 801405a:	6818      	ldr	r0, [r3, #0]
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	2000004c 	.word	0x2000004c

08014064 <__libc_init_array>:
 8014064:	b570      	push	{r4, r5, r6, lr}
 8014066:	4d0d      	ldr	r5, [pc, #52]	@ (801409c <__libc_init_array+0x38>)
 8014068:	4c0d      	ldr	r4, [pc, #52]	@ (80140a0 <__libc_init_array+0x3c>)
 801406a:	1b64      	subs	r4, r4, r5
 801406c:	10a4      	asrs	r4, r4, #2
 801406e:	2600      	movs	r6, #0
 8014070:	42a6      	cmp	r6, r4
 8014072:	d109      	bne.n	8014088 <__libc_init_array+0x24>
 8014074:	4d0b      	ldr	r5, [pc, #44]	@ (80140a4 <__libc_init_array+0x40>)
 8014076:	4c0c      	ldr	r4, [pc, #48]	@ (80140a8 <__libc_init_array+0x44>)
 8014078:	f003 fa0a 	bl	8017490 <_init>
 801407c:	1b64      	subs	r4, r4, r5
 801407e:	10a4      	asrs	r4, r4, #2
 8014080:	2600      	movs	r6, #0
 8014082:	42a6      	cmp	r6, r4
 8014084:	d105      	bne.n	8014092 <__libc_init_array+0x2e>
 8014086:	bd70      	pop	{r4, r5, r6, pc}
 8014088:	f855 3b04 	ldr.w	r3, [r5], #4
 801408c:	4798      	blx	r3
 801408e:	3601      	adds	r6, #1
 8014090:	e7ee      	b.n	8014070 <__libc_init_array+0xc>
 8014092:	f855 3b04 	ldr.w	r3, [r5], #4
 8014096:	4798      	blx	r3
 8014098:	3601      	adds	r6, #1
 801409a:	e7f2      	b.n	8014082 <__libc_init_array+0x1e>
 801409c:	0801b0b0 	.word	0x0801b0b0
 80140a0:	0801b0b0 	.word	0x0801b0b0
 80140a4:	0801b0b0 	.word	0x0801b0b0
 80140a8:	0801b0b4 	.word	0x0801b0b4

080140ac <__retarget_lock_init_recursive>:
 80140ac:	4770      	bx	lr

080140ae <__retarget_lock_acquire_recursive>:
 80140ae:	4770      	bx	lr

080140b0 <__retarget_lock_release_recursive>:
 80140b0:	4770      	bx	lr

080140b2 <memcpy>:
 80140b2:	440a      	add	r2, r1
 80140b4:	4291      	cmp	r1, r2
 80140b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80140ba:	d100      	bne.n	80140be <memcpy+0xc>
 80140bc:	4770      	bx	lr
 80140be:	b510      	push	{r4, lr}
 80140c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140c8:	4291      	cmp	r1, r2
 80140ca:	d1f9      	bne.n	80140c0 <memcpy+0xe>
 80140cc:	bd10      	pop	{r4, pc}
	...

080140d0 <nanf>:
 80140d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80140d8 <nanf+0x8>
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop
 80140d8:	7fc00000 	.word	0x7fc00000

080140dc <__assert_func>:
 80140dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140de:	4614      	mov	r4, r2
 80140e0:	461a      	mov	r2, r3
 80140e2:	4b09      	ldr	r3, [pc, #36]	@ (8014108 <__assert_func+0x2c>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	4605      	mov	r5, r0
 80140e8:	68d8      	ldr	r0, [r3, #12]
 80140ea:	b14c      	cbz	r4, 8014100 <__assert_func+0x24>
 80140ec:	4b07      	ldr	r3, [pc, #28]	@ (801410c <__assert_func+0x30>)
 80140ee:	9100      	str	r1, [sp, #0]
 80140f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80140f4:	4906      	ldr	r1, [pc, #24]	@ (8014110 <__assert_func+0x34>)
 80140f6:	462b      	mov	r3, r5
 80140f8:	f002 fc9c 	bl	8016a34 <fiprintf>
 80140fc:	f002 fd58 	bl	8016bb0 <abort>
 8014100:	4b04      	ldr	r3, [pc, #16]	@ (8014114 <__assert_func+0x38>)
 8014102:	461c      	mov	r4, r3
 8014104:	e7f3      	b.n	80140ee <__assert_func+0x12>
 8014106:	bf00      	nop
 8014108:	2000004c 	.word	0x2000004c
 801410c:	0801acce 	.word	0x0801acce
 8014110:	0801acdb 	.word	0x0801acdb
 8014114:	0801ad09 	.word	0x0801ad09

08014118 <quorem>:
 8014118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801411c:	6903      	ldr	r3, [r0, #16]
 801411e:	690c      	ldr	r4, [r1, #16]
 8014120:	42a3      	cmp	r3, r4
 8014122:	4607      	mov	r7, r0
 8014124:	db7e      	blt.n	8014224 <quorem+0x10c>
 8014126:	3c01      	subs	r4, #1
 8014128:	f101 0814 	add.w	r8, r1, #20
 801412c:	00a3      	lsls	r3, r4, #2
 801412e:	f100 0514 	add.w	r5, r0, #20
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014138:	9301      	str	r3, [sp, #4]
 801413a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801413e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014142:	3301      	adds	r3, #1
 8014144:	429a      	cmp	r2, r3
 8014146:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801414a:	fbb2 f6f3 	udiv	r6, r2, r3
 801414e:	d32e      	bcc.n	80141ae <quorem+0x96>
 8014150:	f04f 0a00 	mov.w	sl, #0
 8014154:	46c4      	mov	ip, r8
 8014156:	46ae      	mov	lr, r5
 8014158:	46d3      	mov	fp, sl
 801415a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801415e:	b298      	uxth	r0, r3
 8014160:	fb06 a000 	mla	r0, r6, r0, sl
 8014164:	0c02      	lsrs	r2, r0, #16
 8014166:	0c1b      	lsrs	r3, r3, #16
 8014168:	fb06 2303 	mla	r3, r6, r3, r2
 801416c:	f8de 2000 	ldr.w	r2, [lr]
 8014170:	b280      	uxth	r0, r0
 8014172:	b292      	uxth	r2, r2
 8014174:	1a12      	subs	r2, r2, r0
 8014176:	445a      	add	r2, fp
 8014178:	f8de 0000 	ldr.w	r0, [lr]
 801417c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014180:	b29b      	uxth	r3, r3
 8014182:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014186:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801418a:	b292      	uxth	r2, r2
 801418c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014190:	45e1      	cmp	r9, ip
 8014192:	f84e 2b04 	str.w	r2, [lr], #4
 8014196:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801419a:	d2de      	bcs.n	801415a <quorem+0x42>
 801419c:	9b00      	ldr	r3, [sp, #0]
 801419e:	58eb      	ldr	r3, [r5, r3]
 80141a0:	b92b      	cbnz	r3, 80141ae <quorem+0x96>
 80141a2:	9b01      	ldr	r3, [sp, #4]
 80141a4:	3b04      	subs	r3, #4
 80141a6:	429d      	cmp	r5, r3
 80141a8:	461a      	mov	r2, r3
 80141aa:	d32f      	bcc.n	801420c <quorem+0xf4>
 80141ac:	613c      	str	r4, [r7, #16]
 80141ae:	4638      	mov	r0, r7
 80141b0:	f001 f954 	bl	801545c <__mcmp>
 80141b4:	2800      	cmp	r0, #0
 80141b6:	db25      	blt.n	8014204 <quorem+0xec>
 80141b8:	4629      	mov	r1, r5
 80141ba:	2000      	movs	r0, #0
 80141bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80141c0:	f8d1 c000 	ldr.w	ip, [r1]
 80141c4:	fa1f fe82 	uxth.w	lr, r2
 80141c8:	fa1f f38c 	uxth.w	r3, ip
 80141cc:	eba3 030e 	sub.w	r3, r3, lr
 80141d0:	4403      	add	r3, r0
 80141d2:	0c12      	lsrs	r2, r2, #16
 80141d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80141d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80141dc:	b29b      	uxth	r3, r3
 80141de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141e2:	45c1      	cmp	r9, r8
 80141e4:	f841 3b04 	str.w	r3, [r1], #4
 80141e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80141ec:	d2e6      	bcs.n	80141bc <quorem+0xa4>
 80141ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141f6:	b922      	cbnz	r2, 8014202 <quorem+0xea>
 80141f8:	3b04      	subs	r3, #4
 80141fa:	429d      	cmp	r5, r3
 80141fc:	461a      	mov	r2, r3
 80141fe:	d30b      	bcc.n	8014218 <quorem+0x100>
 8014200:	613c      	str	r4, [r7, #16]
 8014202:	3601      	adds	r6, #1
 8014204:	4630      	mov	r0, r6
 8014206:	b003      	add	sp, #12
 8014208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420c:	6812      	ldr	r2, [r2, #0]
 801420e:	3b04      	subs	r3, #4
 8014210:	2a00      	cmp	r2, #0
 8014212:	d1cb      	bne.n	80141ac <quorem+0x94>
 8014214:	3c01      	subs	r4, #1
 8014216:	e7c6      	b.n	80141a6 <quorem+0x8e>
 8014218:	6812      	ldr	r2, [r2, #0]
 801421a:	3b04      	subs	r3, #4
 801421c:	2a00      	cmp	r2, #0
 801421e:	d1ef      	bne.n	8014200 <quorem+0xe8>
 8014220:	3c01      	subs	r4, #1
 8014222:	e7ea      	b.n	80141fa <quorem+0xe2>
 8014224:	2000      	movs	r0, #0
 8014226:	e7ee      	b.n	8014206 <quorem+0xee>

08014228 <_dtoa_r>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	ed2d 8b02 	vpush	{d8}
 8014230:	69c7      	ldr	r7, [r0, #28]
 8014232:	b091      	sub	sp, #68	@ 0x44
 8014234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014238:	ec55 4b10 	vmov	r4, r5, d0
 801423c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801423e:	9107      	str	r1, [sp, #28]
 8014240:	4681      	mov	r9, r0
 8014242:	9209      	str	r2, [sp, #36]	@ 0x24
 8014244:	930d      	str	r3, [sp, #52]	@ 0x34
 8014246:	b97f      	cbnz	r7, 8014268 <_dtoa_r+0x40>
 8014248:	2010      	movs	r0, #16
 801424a:	f000 fd95 	bl	8014d78 <malloc>
 801424e:	4602      	mov	r2, r0
 8014250:	f8c9 001c 	str.w	r0, [r9, #28]
 8014254:	b920      	cbnz	r0, 8014260 <_dtoa_r+0x38>
 8014256:	4ba0      	ldr	r3, [pc, #640]	@ (80144d8 <_dtoa_r+0x2b0>)
 8014258:	21ef      	movs	r1, #239	@ 0xef
 801425a:	48a0      	ldr	r0, [pc, #640]	@ (80144dc <_dtoa_r+0x2b4>)
 801425c:	f7ff ff3e 	bl	80140dc <__assert_func>
 8014260:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014264:	6007      	str	r7, [r0, #0]
 8014266:	60c7      	str	r7, [r0, #12]
 8014268:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801426c:	6819      	ldr	r1, [r3, #0]
 801426e:	b159      	cbz	r1, 8014288 <_dtoa_r+0x60>
 8014270:	685a      	ldr	r2, [r3, #4]
 8014272:	604a      	str	r2, [r1, #4]
 8014274:	2301      	movs	r3, #1
 8014276:	4093      	lsls	r3, r2
 8014278:	608b      	str	r3, [r1, #8]
 801427a:	4648      	mov	r0, r9
 801427c:	f000 fe72 	bl	8014f64 <_Bfree>
 8014280:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014284:	2200      	movs	r2, #0
 8014286:	601a      	str	r2, [r3, #0]
 8014288:	1e2b      	subs	r3, r5, #0
 801428a:	bfbb      	ittet	lt
 801428c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014290:	9303      	strlt	r3, [sp, #12]
 8014292:	2300      	movge	r3, #0
 8014294:	2201      	movlt	r2, #1
 8014296:	bfac      	ite	ge
 8014298:	6033      	strge	r3, [r6, #0]
 801429a:	6032      	strlt	r2, [r6, #0]
 801429c:	4b90      	ldr	r3, [pc, #576]	@ (80144e0 <_dtoa_r+0x2b8>)
 801429e:	9e03      	ldr	r6, [sp, #12]
 80142a0:	43b3      	bics	r3, r6
 80142a2:	d110      	bne.n	80142c6 <_dtoa_r+0x9e>
 80142a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80142a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80142aa:	6013      	str	r3, [r2, #0]
 80142ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80142b0:	4323      	orrs	r3, r4
 80142b2:	f000 84e6 	beq.w	8014c82 <_dtoa_r+0xa5a>
 80142b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80142b8:	4f8a      	ldr	r7, [pc, #552]	@ (80144e4 <_dtoa_r+0x2bc>)
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 84e8 	beq.w	8014c90 <_dtoa_r+0xa68>
 80142c0:	1cfb      	adds	r3, r7, #3
 80142c2:	f000 bce3 	b.w	8014c8c <_dtoa_r+0xa64>
 80142c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80142ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80142ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d2:	d10a      	bne.n	80142ea <_dtoa_r+0xc2>
 80142d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80142d6:	2301      	movs	r3, #1
 80142d8:	6013      	str	r3, [r2, #0]
 80142da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80142dc:	b113      	cbz	r3, 80142e4 <_dtoa_r+0xbc>
 80142de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80142e0:	4b81      	ldr	r3, [pc, #516]	@ (80144e8 <_dtoa_r+0x2c0>)
 80142e2:	6013      	str	r3, [r2, #0]
 80142e4:	4f81      	ldr	r7, [pc, #516]	@ (80144ec <_dtoa_r+0x2c4>)
 80142e6:	f000 bcd3 	b.w	8014c90 <_dtoa_r+0xa68>
 80142ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80142ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80142ee:	4648      	mov	r0, r9
 80142f0:	eeb0 0b48 	vmov.f64	d0, d8
 80142f4:	f001 f9d2 	bl	801569c <__d2b>
 80142f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80142fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142fe:	9001      	str	r0, [sp, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d045      	beq.n	8014390 <_dtoa_r+0x168>
 8014304:	eeb0 7b48 	vmov.f64	d7, d8
 8014308:	ee18 1a90 	vmov	r1, s17
 801430c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014310:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014314:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014318:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801431c:	2500      	movs	r5, #0
 801431e:	ee07 1a90 	vmov	s15, r1
 8014322:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014326:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80144c0 <_dtoa_r+0x298>
 801432a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801432e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80144c8 <_dtoa_r+0x2a0>
 8014332:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014336:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80144d0 <_dtoa_r+0x2a8>
 801433a:	ee07 3a90 	vmov	s15, r3
 801433e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014342:	eeb0 7b46 	vmov.f64	d7, d6
 8014346:	eea4 7b05 	vfma.f64	d7, d4, d5
 801434a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801434e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014356:	ee16 8a90 	vmov	r8, s13
 801435a:	d508      	bpl.n	801436e <_dtoa_r+0x146>
 801435c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014360:	eeb4 6b47 	vcmp.f64	d6, d7
 8014364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014368:	bf18      	it	ne
 801436a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801436e:	f1b8 0f16 	cmp.w	r8, #22
 8014372:	d82b      	bhi.n	80143cc <_dtoa_r+0x1a4>
 8014374:	495e      	ldr	r1, [pc, #376]	@ (80144f0 <_dtoa_r+0x2c8>)
 8014376:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801437a:	ed91 7b00 	vldr	d7, [r1]
 801437e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	d501      	bpl.n	801438c <_dtoa_r+0x164>
 8014388:	f108 38ff 	add.w	r8, r8, #4294967295
 801438c:	2100      	movs	r1, #0
 801438e:	e01e      	b.n	80143ce <_dtoa_r+0x1a6>
 8014390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014392:	4413      	add	r3, r2
 8014394:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014398:	2920      	cmp	r1, #32
 801439a:	bfc1      	itttt	gt
 801439c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80143a0:	408e      	lslgt	r6, r1
 80143a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80143a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80143aa:	bfd6      	itet	le
 80143ac:	f1c1 0120 	rsble	r1, r1, #32
 80143b0:	4331      	orrgt	r1, r6
 80143b2:	fa04 f101 	lslle.w	r1, r4, r1
 80143b6:	ee07 1a90 	vmov	s15, r1
 80143ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80143be:	3b01      	subs	r3, #1
 80143c0:	ee17 1a90 	vmov	r1, s15
 80143c4:	2501      	movs	r5, #1
 80143c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80143ca:	e7a8      	b.n	801431e <_dtoa_r+0xf6>
 80143cc:	2101      	movs	r1, #1
 80143ce:	1ad2      	subs	r2, r2, r3
 80143d0:	1e53      	subs	r3, r2, #1
 80143d2:	9306      	str	r3, [sp, #24]
 80143d4:	bf45      	ittet	mi
 80143d6:	f1c2 0301 	rsbmi	r3, r2, #1
 80143da:	9304      	strmi	r3, [sp, #16]
 80143dc:	2300      	movpl	r3, #0
 80143de:	2300      	movmi	r3, #0
 80143e0:	bf4c      	ite	mi
 80143e2:	9306      	strmi	r3, [sp, #24]
 80143e4:	9304      	strpl	r3, [sp, #16]
 80143e6:	f1b8 0f00 	cmp.w	r8, #0
 80143ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80143ec:	db18      	blt.n	8014420 <_dtoa_r+0x1f8>
 80143ee:	9b06      	ldr	r3, [sp, #24]
 80143f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80143f4:	4443      	add	r3, r8
 80143f6:	9306      	str	r3, [sp, #24]
 80143f8:	2300      	movs	r3, #0
 80143fa:	9a07      	ldr	r2, [sp, #28]
 80143fc:	2a09      	cmp	r2, #9
 80143fe:	d845      	bhi.n	801448c <_dtoa_r+0x264>
 8014400:	2a05      	cmp	r2, #5
 8014402:	bfc4      	itt	gt
 8014404:	3a04      	subgt	r2, #4
 8014406:	9207      	strgt	r2, [sp, #28]
 8014408:	9a07      	ldr	r2, [sp, #28]
 801440a:	f1a2 0202 	sub.w	r2, r2, #2
 801440e:	bfcc      	ite	gt
 8014410:	2400      	movgt	r4, #0
 8014412:	2401      	movle	r4, #1
 8014414:	2a03      	cmp	r2, #3
 8014416:	d844      	bhi.n	80144a2 <_dtoa_r+0x27a>
 8014418:	e8df f002 	tbb	[pc, r2]
 801441c:	0b173634 	.word	0x0b173634
 8014420:	9b04      	ldr	r3, [sp, #16]
 8014422:	2200      	movs	r2, #0
 8014424:	eba3 0308 	sub.w	r3, r3, r8
 8014428:	9304      	str	r3, [sp, #16]
 801442a:	920a      	str	r2, [sp, #40]	@ 0x28
 801442c:	f1c8 0300 	rsb	r3, r8, #0
 8014430:	e7e3      	b.n	80143fa <_dtoa_r+0x1d2>
 8014432:	2201      	movs	r2, #1
 8014434:	9208      	str	r2, [sp, #32]
 8014436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014438:	eb08 0b02 	add.w	fp, r8, r2
 801443c:	f10b 0a01 	add.w	sl, fp, #1
 8014440:	4652      	mov	r2, sl
 8014442:	2a01      	cmp	r2, #1
 8014444:	bfb8      	it	lt
 8014446:	2201      	movlt	r2, #1
 8014448:	e006      	b.n	8014458 <_dtoa_r+0x230>
 801444a:	2201      	movs	r2, #1
 801444c:	9208      	str	r2, [sp, #32]
 801444e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014450:	2a00      	cmp	r2, #0
 8014452:	dd29      	ble.n	80144a8 <_dtoa_r+0x280>
 8014454:	4693      	mov	fp, r2
 8014456:	4692      	mov	sl, r2
 8014458:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801445c:	2100      	movs	r1, #0
 801445e:	2004      	movs	r0, #4
 8014460:	f100 0614 	add.w	r6, r0, #20
 8014464:	4296      	cmp	r6, r2
 8014466:	d926      	bls.n	80144b6 <_dtoa_r+0x28e>
 8014468:	6079      	str	r1, [r7, #4]
 801446a:	4648      	mov	r0, r9
 801446c:	9305      	str	r3, [sp, #20]
 801446e:	f000 fd39 	bl	8014ee4 <_Balloc>
 8014472:	9b05      	ldr	r3, [sp, #20]
 8014474:	4607      	mov	r7, r0
 8014476:	2800      	cmp	r0, #0
 8014478:	d13e      	bne.n	80144f8 <_dtoa_r+0x2d0>
 801447a:	4b1e      	ldr	r3, [pc, #120]	@ (80144f4 <_dtoa_r+0x2cc>)
 801447c:	4602      	mov	r2, r0
 801447e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014482:	e6ea      	b.n	801425a <_dtoa_r+0x32>
 8014484:	2200      	movs	r2, #0
 8014486:	e7e1      	b.n	801444c <_dtoa_r+0x224>
 8014488:	2200      	movs	r2, #0
 801448a:	e7d3      	b.n	8014434 <_dtoa_r+0x20c>
 801448c:	2401      	movs	r4, #1
 801448e:	2200      	movs	r2, #0
 8014490:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014494:	f04f 3bff 	mov.w	fp, #4294967295
 8014498:	2100      	movs	r1, #0
 801449a:	46da      	mov	sl, fp
 801449c:	2212      	movs	r2, #18
 801449e:	9109      	str	r1, [sp, #36]	@ 0x24
 80144a0:	e7da      	b.n	8014458 <_dtoa_r+0x230>
 80144a2:	2201      	movs	r2, #1
 80144a4:	9208      	str	r2, [sp, #32]
 80144a6:	e7f5      	b.n	8014494 <_dtoa_r+0x26c>
 80144a8:	f04f 0b01 	mov.w	fp, #1
 80144ac:	46da      	mov	sl, fp
 80144ae:	465a      	mov	r2, fp
 80144b0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80144b4:	e7d0      	b.n	8014458 <_dtoa_r+0x230>
 80144b6:	3101      	adds	r1, #1
 80144b8:	0040      	lsls	r0, r0, #1
 80144ba:	e7d1      	b.n	8014460 <_dtoa_r+0x238>
 80144bc:	f3af 8000 	nop.w
 80144c0:	636f4361 	.word	0x636f4361
 80144c4:	3fd287a7 	.word	0x3fd287a7
 80144c8:	8b60c8b3 	.word	0x8b60c8b3
 80144cc:	3fc68a28 	.word	0x3fc68a28
 80144d0:	509f79fb 	.word	0x509f79fb
 80144d4:	3fd34413 	.word	0x3fd34413
 80144d8:	0801ac26 	.word	0x0801ac26
 80144dc:	0801ad17 	.word	0x0801ad17
 80144e0:	7ff00000 	.word	0x7ff00000
 80144e4:	0801ad13 	.word	0x0801ad13
 80144e8:	0801aca6 	.word	0x0801aca6
 80144ec:	0801aca5 	.word	0x0801aca5
 80144f0:	0801af90 	.word	0x0801af90
 80144f4:	0801ad6f 	.word	0x0801ad6f
 80144f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80144fc:	f1ba 0f0e 	cmp.w	sl, #14
 8014500:	6010      	str	r0, [r2, #0]
 8014502:	d86e      	bhi.n	80145e2 <_dtoa_r+0x3ba>
 8014504:	2c00      	cmp	r4, #0
 8014506:	d06c      	beq.n	80145e2 <_dtoa_r+0x3ba>
 8014508:	f1b8 0f00 	cmp.w	r8, #0
 801450c:	f340 80b4 	ble.w	8014678 <_dtoa_r+0x450>
 8014510:	4ac8      	ldr	r2, [pc, #800]	@ (8014834 <_dtoa_r+0x60c>)
 8014512:	f008 010f 	and.w	r1, r8, #15
 8014516:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801451a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801451e:	ed92 7b00 	vldr	d7, [r2]
 8014522:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014526:	f000 809b 	beq.w	8014660 <_dtoa_r+0x438>
 801452a:	4ac3      	ldr	r2, [pc, #780]	@ (8014838 <_dtoa_r+0x610>)
 801452c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014530:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014534:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014538:	f001 010f 	and.w	r1, r1, #15
 801453c:	2203      	movs	r2, #3
 801453e:	48be      	ldr	r0, [pc, #760]	@ (8014838 <_dtoa_r+0x610>)
 8014540:	2900      	cmp	r1, #0
 8014542:	f040 808f 	bne.w	8014664 <_dtoa_r+0x43c>
 8014546:	ed9d 6b02 	vldr	d6, [sp, #8]
 801454a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801454e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014552:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014554:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014558:	2900      	cmp	r1, #0
 801455a:	f000 80b3 	beq.w	80146c4 <_dtoa_r+0x49c>
 801455e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014562:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456a:	f140 80ab 	bpl.w	80146c4 <_dtoa_r+0x49c>
 801456e:	f1ba 0f00 	cmp.w	sl, #0
 8014572:	f000 80a7 	beq.w	80146c4 <_dtoa_r+0x49c>
 8014576:	f1bb 0f00 	cmp.w	fp, #0
 801457a:	dd30      	ble.n	80145de <_dtoa_r+0x3b6>
 801457c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014580:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014584:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014588:	f108 31ff 	add.w	r1, r8, #4294967295
 801458c:	9105      	str	r1, [sp, #20]
 801458e:	3201      	adds	r2, #1
 8014590:	465c      	mov	r4, fp
 8014592:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014596:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801459a:	ee07 2a90 	vmov	s15, r2
 801459e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80145a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80145a6:	ee15 2a90 	vmov	r2, s11
 80145aa:	ec51 0b15 	vmov	r0, r1, d5
 80145ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80145b2:	2c00      	cmp	r4, #0
 80145b4:	f040 808a 	bne.w	80146cc <_dtoa_r+0x4a4>
 80145b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80145bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80145c0:	ec41 0b17 	vmov	d7, r0, r1
 80145c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145cc:	f300 826a 	bgt.w	8014aa4 <_dtoa_r+0x87c>
 80145d0:	eeb1 7b47 	vneg.f64	d7, d7
 80145d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145dc:	d423      	bmi.n	8014626 <_dtoa_r+0x3fe>
 80145de:	ed8d 8b02 	vstr	d8, [sp, #8]
 80145e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	f2c0 8129 	blt.w	801483c <_dtoa_r+0x614>
 80145ea:	f1b8 0f0e 	cmp.w	r8, #14
 80145ee:	f300 8125 	bgt.w	801483c <_dtoa_r+0x614>
 80145f2:	4b90      	ldr	r3, [pc, #576]	@ (8014834 <_dtoa_r+0x60c>)
 80145f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80145f8:	ed93 6b00 	vldr	d6, [r3]
 80145fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145fe:	2b00      	cmp	r3, #0
 8014600:	f280 80c8 	bge.w	8014794 <_dtoa_r+0x56c>
 8014604:	f1ba 0f00 	cmp.w	sl, #0
 8014608:	f300 80c4 	bgt.w	8014794 <_dtoa_r+0x56c>
 801460c:	d10b      	bne.n	8014626 <_dtoa_r+0x3fe>
 801460e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014612:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014616:	ed9d 7b02 	vldr	d7, [sp, #8]
 801461a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014622:	f2c0 823c 	blt.w	8014a9e <_dtoa_r+0x876>
 8014626:	2400      	movs	r4, #0
 8014628:	4625      	mov	r5, r4
 801462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801462c:	43db      	mvns	r3, r3
 801462e:	9305      	str	r3, [sp, #20]
 8014630:	463e      	mov	r6, r7
 8014632:	f04f 0800 	mov.w	r8, #0
 8014636:	4621      	mov	r1, r4
 8014638:	4648      	mov	r0, r9
 801463a:	f000 fc93 	bl	8014f64 <_Bfree>
 801463e:	2d00      	cmp	r5, #0
 8014640:	f000 80a2 	beq.w	8014788 <_dtoa_r+0x560>
 8014644:	f1b8 0f00 	cmp.w	r8, #0
 8014648:	d005      	beq.n	8014656 <_dtoa_r+0x42e>
 801464a:	45a8      	cmp	r8, r5
 801464c:	d003      	beq.n	8014656 <_dtoa_r+0x42e>
 801464e:	4641      	mov	r1, r8
 8014650:	4648      	mov	r0, r9
 8014652:	f000 fc87 	bl	8014f64 <_Bfree>
 8014656:	4629      	mov	r1, r5
 8014658:	4648      	mov	r0, r9
 801465a:	f000 fc83 	bl	8014f64 <_Bfree>
 801465e:	e093      	b.n	8014788 <_dtoa_r+0x560>
 8014660:	2202      	movs	r2, #2
 8014662:	e76c      	b.n	801453e <_dtoa_r+0x316>
 8014664:	07cc      	lsls	r4, r1, #31
 8014666:	d504      	bpl.n	8014672 <_dtoa_r+0x44a>
 8014668:	ed90 6b00 	vldr	d6, [r0]
 801466c:	3201      	adds	r2, #1
 801466e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014672:	1049      	asrs	r1, r1, #1
 8014674:	3008      	adds	r0, #8
 8014676:	e763      	b.n	8014540 <_dtoa_r+0x318>
 8014678:	d022      	beq.n	80146c0 <_dtoa_r+0x498>
 801467a:	f1c8 0100 	rsb	r1, r8, #0
 801467e:	4a6d      	ldr	r2, [pc, #436]	@ (8014834 <_dtoa_r+0x60c>)
 8014680:	f001 000f 	and.w	r0, r1, #15
 8014684:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014688:	ed92 7b00 	vldr	d7, [r2]
 801468c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014690:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014694:	4868      	ldr	r0, [pc, #416]	@ (8014838 <_dtoa_r+0x610>)
 8014696:	1109      	asrs	r1, r1, #4
 8014698:	2400      	movs	r4, #0
 801469a:	2202      	movs	r2, #2
 801469c:	b929      	cbnz	r1, 80146aa <_dtoa_r+0x482>
 801469e:	2c00      	cmp	r4, #0
 80146a0:	f43f af57 	beq.w	8014552 <_dtoa_r+0x32a>
 80146a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80146a8:	e753      	b.n	8014552 <_dtoa_r+0x32a>
 80146aa:	07ce      	lsls	r6, r1, #31
 80146ac:	d505      	bpl.n	80146ba <_dtoa_r+0x492>
 80146ae:	ed90 6b00 	vldr	d6, [r0]
 80146b2:	3201      	adds	r2, #1
 80146b4:	2401      	movs	r4, #1
 80146b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80146ba:	1049      	asrs	r1, r1, #1
 80146bc:	3008      	adds	r0, #8
 80146be:	e7ed      	b.n	801469c <_dtoa_r+0x474>
 80146c0:	2202      	movs	r2, #2
 80146c2:	e746      	b.n	8014552 <_dtoa_r+0x32a>
 80146c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80146c8:	4654      	mov	r4, sl
 80146ca:	e762      	b.n	8014592 <_dtoa_r+0x36a>
 80146cc:	4a59      	ldr	r2, [pc, #356]	@ (8014834 <_dtoa_r+0x60c>)
 80146ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80146d2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80146d6:	9a08      	ldr	r2, [sp, #32]
 80146d8:	ec41 0b17 	vmov	d7, r0, r1
 80146dc:	443c      	add	r4, r7
 80146de:	b34a      	cbz	r2, 8014734 <_dtoa_r+0x50c>
 80146e0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80146e4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80146e8:	463e      	mov	r6, r7
 80146ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80146ee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80146f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80146f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80146fa:	ee14 2a90 	vmov	r2, s9
 80146fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014702:	3230      	adds	r2, #48	@ 0x30
 8014704:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014710:	f806 2b01 	strb.w	r2, [r6], #1
 8014714:	d438      	bmi.n	8014788 <_dtoa_r+0x560>
 8014716:	ee32 5b46 	vsub.f64	d5, d2, d6
 801471a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014722:	d46e      	bmi.n	8014802 <_dtoa_r+0x5da>
 8014724:	42a6      	cmp	r6, r4
 8014726:	f43f af5a 	beq.w	80145de <_dtoa_r+0x3b6>
 801472a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801472e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014732:	e7e0      	b.n	80146f6 <_dtoa_r+0x4ce>
 8014734:	4621      	mov	r1, r4
 8014736:	463e      	mov	r6, r7
 8014738:	ee27 7b04 	vmul.f64	d7, d7, d4
 801473c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014740:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014744:	ee14 2a90 	vmov	r2, s9
 8014748:	3230      	adds	r2, #48	@ 0x30
 801474a:	f806 2b01 	strb.w	r2, [r6], #1
 801474e:	42a6      	cmp	r6, r4
 8014750:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014754:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014758:	d119      	bne.n	801478e <_dtoa_r+0x566>
 801475a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801475e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014762:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801476a:	dc4a      	bgt.n	8014802 <_dtoa_r+0x5da>
 801476c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014770:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014778:	f57f af31 	bpl.w	80145de <_dtoa_r+0x3b6>
 801477c:	460e      	mov	r6, r1
 801477e:	3901      	subs	r1, #1
 8014780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014784:	2b30      	cmp	r3, #48	@ 0x30
 8014786:	d0f9      	beq.n	801477c <_dtoa_r+0x554>
 8014788:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801478c:	e027      	b.n	80147de <_dtoa_r+0x5b6>
 801478e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014792:	e7d5      	b.n	8014740 <_dtoa_r+0x518>
 8014794:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014798:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801479c:	463e      	mov	r6, r7
 801479e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80147a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80147a6:	ee15 3a10 	vmov	r3, s10
 80147aa:	3330      	adds	r3, #48	@ 0x30
 80147ac:	f806 3b01 	strb.w	r3, [r6], #1
 80147b0:	1bf3      	subs	r3, r6, r7
 80147b2:	459a      	cmp	sl, r3
 80147b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80147b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80147bc:	d132      	bne.n	8014824 <_dtoa_r+0x5fc>
 80147be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80147c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ca:	dc18      	bgt.n	80147fe <_dtoa_r+0x5d6>
 80147cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80147d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d4:	d103      	bne.n	80147de <_dtoa_r+0x5b6>
 80147d6:	ee15 3a10 	vmov	r3, s10
 80147da:	07db      	lsls	r3, r3, #31
 80147dc:	d40f      	bmi.n	80147fe <_dtoa_r+0x5d6>
 80147de:	9901      	ldr	r1, [sp, #4]
 80147e0:	4648      	mov	r0, r9
 80147e2:	f000 fbbf 	bl	8014f64 <_Bfree>
 80147e6:	2300      	movs	r3, #0
 80147e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80147ea:	7033      	strb	r3, [r6, #0]
 80147ec:	f108 0301 	add.w	r3, r8, #1
 80147f0:	6013      	str	r3, [r2, #0]
 80147f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	f000 824b 	beq.w	8014c90 <_dtoa_r+0xa68>
 80147fa:	601e      	str	r6, [r3, #0]
 80147fc:	e248      	b.n	8014c90 <_dtoa_r+0xa68>
 80147fe:	f8cd 8014 	str.w	r8, [sp, #20]
 8014802:	4633      	mov	r3, r6
 8014804:	461e      	mov	r6, r3
 8014806:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801480a:	2a39      	cmp	r2, #57	@ 0x39
 801480c:	d106      	bne.n	801481c <_dtoa_r+0x5f4>
 801480e:	429f      	cmp	r7, r3
 8014810:	d1f8      	bne.n	8014804 <_dtoa_r+0x5dc>
 8014812:	9a05      	ldr	r2, [sp, #20]
 8014814:	3201      	adds	r2, #1
 8014816:	9205      	str	r2, [sp, #20]
 8014818:	2230      	movs	r2, #48	@ 0x30
 801481a:	703a      	strb	r2, [r7, #0]
 801481c:	781a      	ldrb	r2, [r3, #0]
 801481e:	3201      	adds	r2, #1
 8014820:	701a      	strb	r2, [r3, #0]
 8014822:	e7b1      	b.n	8014788 <_dtoa_r+0x560>
 8014824:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014830:	d1b5      	bne.n	801479e <_dtoa_r+0x576>
 8014832:	e7d4      	b.n	80147de <_dtoa_r+0x5b6>
 8014834:	0801af90 	.word	0x0801af90
 8014838:	0801af68 	.word	0x0801af68
 801483c:	9908      	ldr	r1, [sp, #32]
 801483e:	2900      	cmp	r1, #0
 8014840:	f000 80e9 	beq.w	8014a16 <_dtoa_r+0x7ee>
 8014844:	9907      	ldr	r1, [sp, #28]
 8014846:	2901      	cmp	r1, #1
 8014848:	f300 80cb 	bgt.w	80149e2 <_dtoa_r+0x7ba>
 801484c:	2d00      	cmp	r5, #0
 801484e:	f000 80c4 	beq.w	80149da <_dtoa_r+0x7b2>
 8014852:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014856:	9e04      	ldr	r6, [sp, #16]
 8014858:	461c      	mov	r4, r3
 801485a:	9305      	str	r3, [sp, #20]
 801485c:	9b04      	ldr	r3, [sp, #16]
 801485e:	4413      	add	r3, r2
 8014860:	9304      	str	r3, [sp, #16]
 8014862:	9b06      	ldr	r3, [sp, #24]
 8014864:	2101      	movs	r1, #1
 8014866:	4413      	add	r3, r2
 8014868:	4648      	mov	r0, r9
 801486a:	9306      	str	r3, [sp, #24]
 801486c:	f000 fc78 	bl	8015160 <__i2b>
 8014870:	9b05      	ldr	r3, [sp, #20]
 8014872:	4605      	mov	r5, r0
 8014874:	b166      	cbz	r6, 8014890 <_dtoa_r+0x668>
 8014876:	9a06      	ldr	r2, [sp, #24]
 8014878:	2a00      	cmp	r2, #0
 801487a:	dd09      	ble.n	8014890 <_dtoa_r+0x668>
 801487c:	42b2      	cmp	r2, r6
 801487e:	9904      	ldr	r1, [sp, #16]
 8014880:	bfa8      	it	ge
 8014882:	4632      	movge	r2, r6
 8014884:	1a89      	subs	r1, r1, r2
 8014886:	9104      	str	r1, [sp, #16]
 8014888:	9906      	ldr	r1, [sp, #24]
 801488a:	1ab6      	subs	r6, r6, r2
 801488c:	1a8a      	subs	r2, r1, r2
 801488e:	9206      	str	r2, [sp, #24]
 8014890:	b30b      	cbz	r3, 80148d6 <_dtoa_r+0x6ae>
 8014892:	9a08      	ldr	r2, [sp, #32]
 8014894:	2a00      	cmp	r2, #0
 8014896:	f000 80c5 	beq.w	8014a24 <_dtoa_r+0x7fc>
 801489a:	2c00      	cmp	r4, #0
 801489c:	f000 80bf 	beq.w	8014a1e <_dtoa_r+0x7f6>
 80148a0:	4629      	mov	r1, r5
 80148a2:	4622      	mov	r2, r4
 80148a4:	4648      	mov	r0, r9
 80148a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80148a8:	f000 fd12 	bl	80152d0 <__pow5mult>
 80148ac:	9a01      	ldr	r2, [sp, #4]
 80148ae:	4601      	mov	r1, r0
 80148b0:	4605      	mov	r5, r0
 80148b2:	4648      	mov	r0, r9
 80148b4:	f000 fc6a 	bl	801518c <__multiply>
 80148b8:	9901      	ldr	r1, [sp, #4]
 80148ba:	9005      	str	r0, [sp, #20]
 80148bc:	4648      	mov	r0, r9
 80148be:	f000 fb51 	bl	8014f64 <_Bfree>
 80148c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148c4:	1b1b      	subs	r3, r3, r4
 80148c6:	f000 80b0 	beq.w	8014a2a <_dtoa_r+0x802>
 80148ca:	9905      	ldr	r1, [sp, #20]
 80148cc:	461a      	mov	r2, r3
 80148ce:	4648      	mov	r0, r9
 80148d0:	f000 fcfe 	bl	80152d0 <__pow5mult>
 80148d4:	9001      	str	r0, [sp, #4]
 80148d6:	2101      	movs	r1, #1
 80148d8:	4648      	mov	r0, r9
 80148da:	f000 fc41 	bl	8015160 <__i2b>
 80148de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148e0:	4604      	mov	r4, r0
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f000 81da 	beq.w	8014c9c <_dtoa_r+0xa74>
 80148e8:	461a      	mov	r2, r3
 80148ea:	4601      	mov	r1, r0
 80148ec:	4648      	mov	r0, r9
 80148ee:	f000 fcef 	bl	80152d0 <__pow5mult>
 80148f2:	9b07      	ldr	r3, [sp, #28]
 80148f4:	2b01      	cmp	r3, #1
 80148f6:	4604      	mov	r4, r0
 80148f8:	f300 80a0 	bgt.w	8014a3c <_dtoa_r+0x814>
 80148fc:	9b02      	ldr	r3, [sp, #8]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	f040 8096 	bne.w	8014a30 <_dtoa_r+0x808>
 8014904:	9b03      	ldr	r3, [sp, #12]
 8014906:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801490a:	2a00      	cmp	r2, #0
 801490c:	f040 8092 	bne.w	8014a34 <_dtoa_r+0x80c>
 8014910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014914:	0d12      	lsrs	r2, r2, #20
 8014916:	0512      	lsls	r2, r2, #20
 8014918:	2a00      	cmp	r2, #0
 801491a:	f000 808d 	beq.w	8014a38 <_dtoa_r+0x810>
 801491e:	9b04      	ldr	r3, [sp, #16]
 8014920:	3301      	adds	r3, #1
 8014922:	9304      	str	r3, [sp, #16]
 8014924:	9b06      	ldr	r3, [sp, #24]
 8014926:	3301      	adds	r3, #1
 8014928:	9306      	str	r3, [sp, #24]
 801492a:	2301      	movs	r3, #1
 801492c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801492e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014930:	2b00      	cmp	r3, #0
 8014932:	f000 81b9 	beq.w	8014ca8 <_dtoa_r+0xa80>
 8014936:	6922      	ldr	r2, [r4, #16]
 8014938:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801493c:	6910      	ldr	r0, [r2, #16]
 801493e:	f000 fbc3 	bl	80150c8 <__hi0bits>
 8014942:	f1c0 0020 	rsb	r0, r0, #32
 8014946:	9b06      	ldr	r3, [sp, #24]
 8014948:	4418      	add	r0, r3
 801494a:	f010 001f 	ands.w	r0, r0, #31
 801494e:	f000 8081 	beq.w	8014a54 <_dtoa_r+0x82c>
 8014952:	f1c0 0220 	rsb	r2, r0, #32
 8014956:	2a04      	cmp	r2, #4
 8014958:	dd73      	ble.n	8014a42 <_dtoa_r+0x81a>
 801495a:	9b04      	ldr	r3, [sp, #16]
 801495c:	f1c0 001c 	rsb	r0, r0, #28
 8014960:	4403      	add	r3, r0
 8014962:	9304      	str	r3, [sp, #16]
 8014964:	9b06      	ldr	r3, [sp, #24]
 8014966:	4406      	add	r6, r0
 8014968:	4403      	add	r3, r0
 801496a:	9306      	str	r3, [sp, #24]
 801496c:	9b04      	ldr	r3, [sp, #16]
 801496e:	2b00      	cmp	r3, #0
 8014970:	dd05      	ble.n	801497e <_dtoa_r+0x756>
 8014972:	9901      	ldr	r1, [sp, #4]
 8014974:	461a      	mov	r2, r3
 8014976:	4648      	mov	r0, r9
 8014978:	f000 fd04 	bl	8015384 <__lshift>
 801497c:	9001      	str	r0, [sp, #4]
 801497e:	9b06      	ldr	r3, [sp, #24]
 8014980:	2b00      	cmp	r3, #0
 8014982:	dd05      	ble.n	8014990 <_dtoa_r+0x768>
 8014984:	4621      	mov	r1, r4
 8014986:	461a      	mov	r2, r3
 8014988:	4648      	mov	r0, r9
 801498a:	f000 fcfb 	bl	8015384 <__lshift>
 801498e:	4604      	mov	r4, r0
 8014990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014992:	2b00      	cmp	r3, #0
 8014994:	d060      	beq.n	8014a58 <_dtoa_r+0x830>
 8014996:	9801      	ldr	r0, [sp, #4]
 8014998:	4621      	mov	r1, r4
 801499a:	f000 fd5f 	bl	801545c <__mcmp>
 801499e:	2800      	cmp	r0, #0
 80149a0:	da5a      	bge.n	8014a58 <_dtoa_r+0x830>
 80149a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80149a6:	9305      	str	r3, [sp, #20]
 80149a8:	9901      	ldr	r1, [sp, #4]
 80149aa:	2300      	movs	r3, #0
 80149ac:	220a      	movs	r2, #10
 80149ae:	4648      	mov	r0, r9
 80149b0:	f000 fafa 	bl	8014fa8 <__multadd>
 80149b4:	9b08      	ldr	r3, [sp, #32]
 80149b6:	9001      	str	r0, [sp, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f000 8177 	beq.w	8014cac <_dtoa_r+0xa84>
 80149be:	4629      	mov	r1, r5
 80149c0:	2300      	movs	r3, #0
 80149c2:	220a      	movs	r2, #10
 80149c4:	4648      	mov	r0, r9
 80149c6:	f000 faef 	bl	8014fa8 <__multadd>
 80149ca:	f1bb 0f00 	cmp.w	fp, #0
 80149ce:	4605      	mov	r5, r0
 80149d0:	dc6e      	bgt.n	8014ab0 <_dtoa_r+0x888>
 80149d2:	9b07      	ldr	r3, [sp, #28]
 80149d4:	2b02      	cmp	r3, #2
 80149d6:	dc48      	bgt.n	8014a6a <_dtoa_r+0x842>
 80149d8:	e06a      	b.n	8014ab0 <_dtoa_r+0x888>
 80149da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80149dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80149e0:	e739      	b.n	8014856 <_dtoa_r+0x62e>
 80149e2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80149e6:	42a3      	cmp	r3, r4
 80149e8:	db07      	blt.n	80149fa <_dtoa_r+0x7d2>
 80149ea:	f1ba 0f00 	cmp.w	sl, #0
 80149ee:	eba3 0404 	sub.w	r4, r3, r4
 80149f2:	db0b      	blt.n	8014a0c <_dtoa_r+0x7e4>
 80149f4:	9e04      	ldr	r6, [sp, #16]
 80149f6:	4652      	mov	r2, sl
 80149f8:	e72f      	b.n	801485a <_dtoa_r+0x632>
 80149fa:	1ae2      	subs	r2, r4, r3
 80149fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149fe:	9e04      	ldr	r6, [sp, #16]
 8014a00:	4413      	add	r3, r2
 8014a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8014a04:	4652      	mov	r2, sl
 8014a06:	4623      	mov	r3, r4
 8014a08:	2400      	movs	r4, #0
 8014a0a:	e726      	b.n	801485a <_dtoa_r+0x632>
 8014a0c:	9a04      	ldr	r2, [sp, #16]
 8014a0e:	eba2 060a 	sub.w	r6, r2, sl
 8014a12:	2200      	movs	r2, #0
 8014a14:	e721      	b.n	801485a <_dtoa_r+0x632>
 8014a16:	9e04      	ldr	r6, [sp, #16]
 8014a18:	9d08      	ldr	r5, [sp, #32]
 8014a1a:	461c      	mov	r4, r3
 8014a1c:	e72a      	b.n	8014874 <_dtoa_r+0x64c>
 8014a1e:	9a01      	ldr	r2, [sp, #4]
 8014a20:	9205      	str	r2, [sp, #20]
 8014a22:	e752      	b.n	80148ca <_dtoa_r+0x6a2>
 8014a24:	9901      	ldr	r1, [sp, #4]
 8014a26:	461a      	mov	r2, r3
 8014a28:	e751      	b.n	80148ce <_dtoa_r+0x6a6>
 8014a2a:	9b05      	ldr	r3, [sp, #20]
 8014a2c:	9301      	str	r3, [sp, #4]
 8014a2e:	e752      	b.n	80148d6 <_dtoa_r+0x6ae>
 8014a30:	2300      	movs	r3, #0
 8014a32:	e77b      	b.n	801492c <_dtoa_r+0x704>
 8014a34:	9b02      	ldr	r3, [sp, #8]
 8014a36:	e779      	b.n	801492c <_dtoa_r+0x704>
 8014a38:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014a3a:	e778      	b.n	801492e <_dtoa_r+0x706>
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a40:	e779      	b.n	8014936 <_dtoa_r+0x70e>
 8014a42:	d093      	beq.n	801496c <_dtoa_r+0x744>
 8014a44:	9b04      	ldr	r3, [sp, #16]
 8014a46:	321c      	adds	r2, #28
 8014a48:	4413      	add	r3, r2
 8014a4a:	9304      	str	r3, [sp, #16]
 8014a4c:	9b06      	ldr	r3, [sp, #24]
 8014a4e:	4416      	add	r6, r2
 8014a50:	4413      	add	r3, r2
 8014a52:	e78a      	b.n	801496a <_dtoa_r+0x742>
 8014a54:	4602      	mov	r2, r0
 8014a56:	e7f5      	b.n	8014a44 <_dtoa_r+0x81c>
 8014a58:	f1ba 0f00 	cmp.w	sl, #0
 8014a5c:	f8cd 8014 	str.w	r8, [sp, #20]
 8014a60:	46d3      	mov	fp, sl
 8014a62:	dc21      	bgt.n	8014aa8 <_dtoa_r+0x880>
 8014a64:	9b07      	ldr	r3, [sp, #28]
 8014a66:	2b02      	cmp	r3, #2
 8014a68:	dd1e      	ble.n	8014aa8 <_dtoa_r+0x880>
 8014a6a:	f1bb 0f00 	cmp.w	fp, #0
 8014a6e:	f47f addc 	bne.w	801462a <_dtoa_r+0x402>
 8014a72:	4621      	mov	r1, r4
 8014a74:	465b      	mov	r3, fp
 8014a76:	2205      	movs	r2, #5
 8014a78:	4648      	mov	r0, r9
 8014a7a:	f000 fa95 	bl	8014fa8 <__multadd>
 8014a7e:	4601      	mov	r1, r0
 8014a80:	4604      	mov	r4, r0
 8014a82:	9801      	ldr	r0, [sp, #4]
 8014a84:	f000 fcea 	bl	801545c <__mcmp>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	f77f adce 	ble.w	801462a <_dtoa_r+0x402>
 8014a8e:	463e      	mov	r6, r7
 8014a90:	2331      	movs	r3, #49	@ 0x31
 8014a92:	f806 3b01 	strb.w	r3, [r6], #1
 8014a96:	9b05      	ldr	r3, [sp, #20]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	9305      	str	r3, [sp, #20]
 8014a9c:	e5c9      	b.n	8014632 <_dtoa_r+0x40a>
 8014a9e:	f8cd 8014 	str.w	r8, [sp, #20]
 8014aa2:	4654      	mov	r4, sl
 8014aa4:	4625      	mov	r5, r4
 8014aa6:	e7f2      	b.n	8014a8e <_dtoa_r+0x866>
 8014aa8:	9b08      	ldr	r3, [sp, #32]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	f000 8102 	beq.w	8014cb4 <_dtoa_r+0xa8c>
 8014ab0:	2e00      	cmp	r6, #0
 8014ab2:	dd05      	ble.n	8014ac0 <_dtoa_r+0x898>
 8014ab4:	4629      	mov	r1, r5
 8014ab6:	4632      	mov	r2, r6
 8014ab8:	4648      	mov	r0, r9
 8014aba:	f000 fc63 	bl	8015384 <__lshift>
 8014abe:	4605      	mov	r5, r0
 8014ac0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d058      	beq.n	8014b78 <_dtoa_r+0x950>
 8014ac6:	6869      	ldr	r1, [r5, #4]
 8014ac8:	4648      	mov	r0, r9
 8014aca:	f000 fa0b 	bl	8014ee4 <_Balloc>
 8014ace:	4606      	mov	r6, r0
 8014ad0:	b928      	cbnz	r0, 8014ade <_dtoa_r+0x8b6>
 8014ad2:	4b82      	ldr	r3, [pc, #520]	@ (8014cdc <_dtoa_r+0xab4>)
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014ada:	f7ff bbbe 	b.w	801425a <_dtoa_r+0x32>
 8014ade:	692a      	ldr	r2, [r5, #16]
 8014ae0:	3202      	adds	r2, #2
 8014ae2:	0092      	lsls	r2, r2, #2
 8014ae4:	f105 010c 	add.w	r1, r5, #12
 8014ae8:	300c      	adds	r0, #12
 8014aea:	f7ff fae2 	bl	80140b2 <memcpy>
 8014aee:	2201      	movs	r2, #1
 8014af0:	4631      	mov	r1, r6
 8014af2:	4648      	mov	r0, r9
 8014af4:	f000 fc46 	bl	8015384 <__lshift>
 8014af8:	1c7b      	adds	r3, r7, #1
 8014afa:	9304      	str	r3, [sp, #16]
 8014afc:	eb07 030b 	add.w	r3, r7, fp
 8014b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b02:	9b02      	ldr	r3, [sp, #8]
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	46a8      	mov	r8, r5
 8014b0a:	9308      	str	r3, [sp, #32]
 8014b0c:	4605      	mov	r5, r0
 8014b0e:	9b04      	ldr	r3, [sp, #16]
 8014b10:	9801      	ldr	r0, [sp, #4]
 8014b12:	4621      	mov	r1, r4
 8014b14:	f103 3bff 	add.w	fp, r3, #4294967295
 8014b18:	f7ff fafe 	bl	8014118 <quorem>
 8014b1c:	4641      	mov	r1, r8
 8014b1e:	9002      	str	r0, [sp, #8]
 8014b20:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014b24:	9801      	ldr	r0, [sp, #4]
 8014b26:	f000 fc99 	bl	801545c <__mcmp>
 8014b2a:	462a      	mov	r2, r5
 8014b2c:	9006      	str	r0, [sp, #24]
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4648      	mov	r0, r9
 8014b32:	f000 fcaf 	bl	8015494 <__mdiff>
 8014b36:	68c2      	ldr	r2, [r0, #12]
 8014b38:	4606      	mov	r6, r0
 8014b3a:	b9fa      	cbnz	r2, 8014b7c <_dtoa_r+0x954>
 8014b3c:	4601      	mov	r1, r0
 8014b3e:	9801      	ldr	r0, [sp, #4]
 8014b40:	f000 fc8c 	bl	801545c <__mcmp>
 8014b44:	4602      	mov	r2, r0
 8014b46:	4631      	mov	r1, r6
 8014b48:	4648      	mov	r0, r9
 8014b4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8014b4c:	f000 fa0a 	bl	8014f64 <_Bfree>
 8014b50:	9b07      	ldr	r3, [sp, #28]
 8014b52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b54:	9e04      	ldr	r6, [sp, #16]
 8014b56:	ea42 0103 	orr.w	r1, r2, r3
 8014b5a:	9b08      	ldr	r3, [sp, #32]
 8014b5c:	4319      	orrs	r1, r3
 8014b5e:	d10f      	bne.n	8014b80 <_dtoa_r+0x958>
 8014b60:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014b64:	d028      	beq.n	8014bb8 <_dtoa_r+0x990>
 8014b66:	9b06      	ldr	r3, [sp, #24]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	dd02      	ble.n	8014b72 <_dtoa_r+0x94a>
 8014b6c:	9b02      	ldr	r3, [sp, #8]
 8014b6e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014b72:	f88b a000 	strb.w	sl, [fp]
 8014b76:	e55e      	b.n	8014636 <_dtoa_r+0x40e>
 8014b78:	4628      	mov	r0, r5
 8014b7a:	e7bd      	b.n	8014af8 <_dtoa_r+0x8d0>
 8014b7c:	2201      	movs	r2, #1
 8014b7e:	e7e2      	b.n	8014b46 <_dtoa_r+0x91e>
 8014b80:	9b06      	ldr	r3, [sp, #24]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	db04      	blt.n	8014b90 <_dtoa_r+0x968>
 8014b86:	9907      	ldr	r1, [sp, #28]
 8014b88:	430b      	orrs	r3, r1
 8014b8a:	9908      	ldr	r1, [sp, #32]
 8014b8c:	430b      	orrs	r3, r1
 8014b8e:	d120      	bne.n	8014bd2 <_dtoa_r+0x9aa>
 8014b90:	2a00      	cmp	r2, #0
 8014b92:	ddee      	ble.n	8014b72 <_dtoa_r+0x94a>
 8014b94:	9901      	ldr	r1, [sp, #4]
 8014b96:	2201      	movs	r2, #1
 8014b98:	4648      	mov	r0, r9
 8014b9a:	f000 fbf3 	bl	8015384 <__lshift>
 8014b9e:	4621      	mov	r1, r4
 8014ba0:	9001      	str	r0, [sp, #4]
 8014ba2:	f000 fc5b 	bl	801545c <__mcmp>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	dc03      	bgt.n	8014bb2 <_dtoa_r+0x98a>
 8014baa:	d1e2      	bne.n	8014b72 <_dtoa_r+0x94a>
 8014bac:	f01a 0f01 	tst.w	sl, #1
 8014bb0:	d0df      	beq.n	8014b72 <_dtoa_r+0x94a>
 8014bb2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014bb6:	d1d9      	bne.n	8014b6c <_dtoa_r+0x944>
 8014bb8:	2339      	movs	r3, #57	@ 0x39
 8014bba:	f88b 3000 	strb.w	r3, [fp]
 8014bbe:	4633      	mov	r3, r6
 8014bc0:	461e      	mov	r6, r3
 8014bc2:	3b01      	subs	r3, #1
 8014bc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014bc8:	2a39      	cmp	r2, #57	@ 0x39
 8014bca:	d052      	beq.n	8014c72 <_dtoa_r+0xa4a>
 8014bcc:	3201      	adds	r2, #1
 8014bce:	701a      	strb	r2, [r3, #0]
 8014bd0:	e531      	b.n	8014636 <_dtoa_r+0x40e>
 8014bd2:	2a00      	cmp	r2, #0
 8014bd4:	dd07      	ble.n	8014be6 <_dtoa_r+0x9be>
 8014bd6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014bda:	d0ed      	beq.n	8014bb8 <_dtoa_r+0x990>
 8014bdc:	f10a 0301 	add.w	r3, sl, #1
 8014be0:	f88b 3000 	strb.w	r3, [fp]
 8014be4:	e527      	b.n	8014636 <_dtoa_r+0x40e>
 8014be6:	9b04      	ldr	r3, [sp, #16]
 8014be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bea:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d029      	beq.n	8014c46 <_dtoa_r+0xa1e>
 8014bf2:	9901      	ldr	r1, [sp, #4]
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	220a      	movs	r2, #10
 8014bf8:	4648      	mov	r0, r9
 8014bfa:	f000 f9d5 	bl	8014fa8 <__multadd>
 8014bfe:	45a8      	cmp	r8, r5
 8014c00:	9001      	str	r0, [sp, #4]
 8014c02:	f04f 0300 	mov.w	r3, #0
 8014c06:	f04f 020a 	mov.w	r2, #10
 8014c0a:	4641      	mov	r1, r8
 8014c0c:	4648      	mov	r0, r9
 8014c0e:	d107      	bne.n	8014c20 <_dtoa_r+0x9f8>
 8014c10:	f000 f9ca 	bl	8014fa8 <__multadd>
 8014c14:	4680      	mov	r8, r0
 8014c16:	4605      	mov	r5, r0
 8014c18:	9b04      	ldr	r3, [sp, #16]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	9304      	str	r3, [sp, #16]
 8014c1e:	e776      	b.n	8014b0e <_dtoa_r+0x8e6>
 8014c20:	f000 f9c2 	bl	8014fa8 <__multadd>
 8014c24:	4629      	mov	r1, r5
 8014c26:	4680      	mov	r8, r0
 8014c28:	2300      	movs	r3, #0
 8014c2a:	220a      	movs	r2, #10
 8014c2c:	4648      	mov	r0, r9
 8014c2e:	f000 f9bb 	bl	8014fa8 <__multadd>
 8014c32:	4605      	mov	r5, r0
 8014c34:	e7f0      	b.n	8014c18 <_dtoa_r+0x9f0>
 8014c36:	f1bb 0f00 	cmp.w	fp, #0
 8014c3a:	bfcc      	ite	gt
 8014c3c:	465e      	movgt	r6, fp
 8014c3e:	2601      	movle	r6, #1
 8014c40:	443e      	add	r6, r7
 8014c42:	f04f 0800 	mov.w	r8, #0
 8014c46:	9901      	ldr	r1, [sp, #4]
 8014c48:	2201      	movs	r2, #1
 8014c4a:	4648      	mov	r0, r9
 8014c4c:	f000 fb9a 	bl	8015384 <__lshift>
 8014c50:	4621      	mov	r1, r4
 8014c52:	9001      	str	r0, [sp, #4]
 8014c54:	f000 fc02 	bl	801545c <__mcmp>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	dcb0      	bgt.n	8014bbe <_dtoa_r+0x996>
 8014c5c:	d102      	bne.n	8014c64 <_dtoa_r+0xa3c>
 8014c5e:	f01a 0f01 	tst.w	sl, #1
 8014c62:	d1ac      	bne.n	8014bbe <_dtoa_r+0x996>
 8014c64:	4633      	mov	r3, r6
 8014c66:	461e      	mov	r6, r3
 8014c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c6c:	2a30      	cmp	r2, #48	@ 0x30
 8014c6e:	d0fa      	beq.n	8014c66 <_dtoa_r+0xa3e>
 8014c70:	e4e1      	b.n	8014636 <_dtoa_r+0x40e>
 8014c72:	429f      	cmp	r7, r3
 8014c74:	d1a4      	bne.n	8014bc0 <_dtoa_r+0x998>
 8014c76:	9b05      	ldr	r3, [sp, #20]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	9305      	str	r3, [sp, #20]
 8014c7c:	2331      	movs	r3, #49	@ 0x31
 8014c7e:	703b      	strb	r3, [r7, #0]
 8014c80:	e4d9      	b.n	8014636 <_dtoa_r+0x40e>
 8014c82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c84:	4f16      	ldr	r7, [pc, #88]	@ (8014ce0 <_dtoa_r+0xab8>)
 8014c86:	b11b      	cbz	r3, 8014c90 <_dtoa_r+0xa68>
 8014c88:	f107 0308 	add.w	r3, r7, #8
 8014c8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014c8e:	6013      	str	r3, [r2, #0]
 8014c90:	4638      	mov	r0, r7
 8014c92:	b011      	add	sp, #68	@ 0x44
 8014c94:	ecbd 8b02 	vpop	{d8}
 8014c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9c:	9b07      	ldr	r3, [sp, #28]
 8014c9e:	2b01      	cmp	r3, #1
 8014ca0:	f77f ae2c 	ble.w	80148fc <_dtoa_r+0x6d4>
 8014ca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ca8:	2001      	movs	r0, #1
 8014caa:	e64c      	b.n	8014946 <_dtoa_r+0x71e>
 8014cac:	f1bb 0f00 	cmp.w	fp, #0
 8014cb0:	f77f aed8 	ble.w	8014a64 <_dtoa_r+0x83c>
 8014cb4:	463e      	mov	r6, r7
 8014cb6:	9801      	ldr	r0, [sp, #4]
 8014cb8:	4621      	mov	r1, r4
 8014cba:	f7ff fa2d 	bl	8014118 <quorem>
 8014cbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014cc2:	f806 ab01 	strb.w	sl, [r6], #1
 8014cc6:	1bf2      	subs	r2, r6, r7
 8014cc8:	4593      	cmp	fp, r2
 8014cca:	ddb4      	ble.n	8014c36 <_dtoa_r+0xa0e>
 8014ccc:	9901      	ldr	r1, [sp, #4]
 8014cce:	2300      	movs	r3, #0
 8014cd0:	220a      	movs	r2, #10
 8014cd2:	4648      	mov	r0, r9
 8014cd4:	f000 f968 	bl	8014fa8 <__multadd>
 8014cd8:	9001      	str	r0, [sp, #4]
 8014cda:	e7ec      	b.n	8014cb6 <_dtoa_r+0xa8e>
 8014cdc:	0801ad6f 	.word	0x0801ad6f
 8014ce0:	0801ad0a 	.word	0x0801ad0a

08014ce4 <_free_r>:
 8014ce4:	b538      	push	{r3, r4, r5, lr}
 8014ce6:	4605      	mov	r5, r0
 8014ce8:	2900      	cmp	r1, #0
 8014cea:	d041      	beq.n	8014d70 <_free_r+0x8c>
 8014cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cf0:	1f0c      	subs	r4, r1, #4
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	bfb8      	it	lt
 8014cf6:	18e4      	addlt	r4, r4, r3
 8014cf8:	f000 f8e8 	bl	8014ecc <__malloc_lock>
 8014cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8014d74 <_free_r+0x90>)
 8014cfe:	6813      	ldr	r3, [r2, #0]
 8014d00:	b933      	cbnz	r3, 8014d10 <_free_r+0x2c>
 8014d02:	6063      	str	r3, [r4, #4]
 8014d04:	6014      	str	r4, [r2, #0]
 8014d06:	4628      	mov	r0, r5
 8014d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d0c:	f000 b8e4 	b.w	8014ed8 <__malloc_unlock>
 8014d10:	42a3      	cmp	r3, r4
 8014d12:	d908      	bls.n	8014d26 <_free_r+0x42>
 8014d14:	6820      	ldr	r0, [r4, #0]
 8014d16:	1821      	adds	r1, r4, r0
 8014d18:	428b      	cmp	r3, r1
 8014d1a:	bf01      	itttt	eq
 8014d1c:	6819      	ldreq	r1, [r3, #0]
 8014d1e:	685b      	ldreq	r3, [r3, #4]
 8014d20:	1809      	addeq	r1, r1, r0
 8014d22:	6021      	streq	r1, [r4, #0]
 8014d24:	e7ed      	b.n	8014d02 <_free_r+0x1e>
 8014d26:	461a      	mov	r2, r3
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	b10b      	cbz	r3, 8014d30 <_free_r+0x4c>
 8014d2c:	42a3      	cmp	r3, r4
 8014d2e:	d9fa      	bls.n	8014d26 <_free_r+0x42>
 8014d30:	6811      	ldr	r1, [r2, #0]
 8014d32:	1850      	adds	r0, r2, r1
 8014d34:	42a0      	cmp	r0, r4
 8014d36:	d10b      	bne.n	8014d50 <_free_r+0x6c>
 8014d38:	6820      	ldr	r0, [r4, #0]
 8014d3a:	4401      	add	r1, r0
 8014d3c:	1850      	adds	r0, r2, r1
 8014d3e:	4283      	cmp	r3, r0
 8014d40:	6011      	str	r1, [r2, #0]
 8014d42:	d1e0      	bne.n	8014d06 <_free_r+0x22>
 8014d44:	6818      	ldr	r0, [r3, #0]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	6053      	str	r3, [r2, #4]
 8014d4a:	4408      	add	r0, r1
 8014d4c:	6010      	str	r0, [r2, #0]
 8014d4e:	e7da      	b.n	8014d06 <_free_r+0x22>
 8014d50:	d902      	bls.n	8014d58 <_free_r+0x74>
 8014d52:	230c      	movs	r3, #12
 8014d54:	602b      	str	r3, [r5, #0]
 8014d56:	e7d6      	b.n	8014d06 <_free_r+0x22>
 8014d58:	6820      	ldr	r0, [r4, #0]
 8014d5a:	1821      	adds	r1, r4, r0
 8014d5c:	428b      	cmp	r3, r1
 8014d5e:	bf04      	itt	eq
 8014d60:	6819      	ldreq	r1, [r3, #0]
 8014d62:	685b      	ldreq	r3, [r3, #4]
 8014d64:	6063      	str	r3, [r4, #4]
 8014d66:	bf04      	itt	eq
 8014d68:	1809      	addeq	r1, r1, r0
 8014d6a:	6021      	streq	r1, [r4, #0]
 8014d6c:	6054      	str	r4, [r2, #4]
 8014d6e:	e7ca      	b.n	8014d06 <_free_r+0x22>
 8014d70:	bd38      	pop	{r3, r4, r5, pc}
 8014d72:	bf00      	nop
 8014d74:	200082ac 	.word	0x200082ac

08014d78 <malloc>:
 8014d78:	4b02      	ldr	r3, [pc, #8]	@ (8014d84 <malloc+0xc>)
 8014d7a:	4601      	mov	r1, r0
 8014d7c:	6818      	ldr	r0, [r3, #0]
 8014d7e:	f000 b825 	b.w	8014dcc <_malloc_r>
 8014d82:	bf00      	nop
 8014d84:	2000004c 	.word	0x2000004c

08014d88 <sbrk_aligned>:
 8014d88:	b570      	push	{r4, r5, r6, lr}
 8014d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8014dc8 <sbrk_aligned+0x40>)
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	6831      	ldr	r1, [r6, #0]
 8014d90:	4605      	mov	r5, r0
 8014d92:	b911      	cbnz	r1, 8014d9a <sbrk_aligned+0x12>
 8014d94:	f001 fef4 	bl	8016b80 <_sbrk_r>
 8014d98:	6030      	str	r0, [r6, #0]
 8014d9a:	4621      	mov	r1, r4
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f001 feef 	bl	8016b80 <_sbrk_r>
 8014da2:	1c43      	adds	r3, r0, #1
 8014da4:	d103      	bne.n	8014dae <sbrk_aligned+0x26>
 8014da6:	f04f 34ff 	mov.w	r4, #4294967295
 8014daa:	4620      	mov	r0, r4
 8014dac:	bd70      	pop	{r4, r5, r6, pc}
 8014dae:	1cc4      	adds	r4, r0, #3
 8014db0:	f024 0403 	bic.w	r4, r4, #3
 8014db4:	42a0      	cmp	r0, r4
 8014db6:	d0f8      	beq.n	8014daa <sbrk_aligned+0x22>
 8014db8:	1a21      	subs	r1, r4, r0
 8014dba:	4628      	mov	r0, r5
 8014dbc:	f001 fee0 	bl	8016b80 <_sbrk_r>
 8014dc0:	3001      	adds	r0, #1
 8014dc2:	d1f2      	bne.n	8014daa <sbrk_aligned+0x22>
 8014dc4:	e7ef      	b.n	8014da6 <sbrk_aligned+0x1e>
 8014dc6:	bf00      	nop
 8014dc8:	200082a8 	.word	0x200082a8

08014dcc <_malloc_r>:
 8014dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd0:	1ccd      	adds	r5, r1, #3
 8014dd2:	f025 0503 	bic.w	r5, r5, #3
 8014dd6:	3508      	adds	r5, #8
 8014dd8:	2d0c      	cmp	r5, #12
 8014dda:	bf38      	it	cc
 8014ddc:	250c      	movcc	r5, #12
 8014dde:	2d00      	cmp	r5, #0
 8014de0:	4606      	mov	r6, r0
 8014de2:	db01      	blt.n	8014de8 <_malloc_r+0x1c>
 8014de4:	42a9      	cmp	r1, r5
 8014de6:	d904      	bls.n	8014df2 <_malloc_r+0x26>
 8014de8:	230c      	movs	r3, #12
 8014dea:	6033      	str	r3, [r6, #0]
 8014dec:	2000      	movs	r0, #0
 8014dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014ec8 <_malloc_r+0xfc>
 8014df6:	f000 f869 	bl	8014ecc <__malloc_lock>
 8014dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8014dfe:	461c      	mov	r4, r3
 8014e00:	bb44      	cbnz	r4, 8014e54 <_malloc_r+0x88>
 8014e02:	4629      	mov	r1, r5
 8014e04:	4630      	mov	r0, r6
 8014e06:	f7ff ffbf 	bl	8014d88 <sbrk_aligned>
 8014e0a:	1c43      	adds	r3, r0, #1
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	d158      	bne.n	8014ec2 <_malloc_r+0xf6>
 8014e10:	f8d8 4000 	ldr.w	r4, [r8]
 8014e14:	4627      	mov	r7, r4
 8014e16:	2f00      	cmp	r7, #0
 8014e18:	d143      	bne.n	8014ea2 <_malloc_r+0xd6>
 8014e1a:	2c00      	cmp	r4, #0
 8014e1c:	d04b      	beq.n	8014eb6 <_malloc_r+0xea>
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	4639      	mov	r1, r7
 8014e22:	4630      	mov	r0, r6
 8014e24:	eb04 0903 	add.w	r9, r4, r3
 8014e28:	f001 feaa 	bl	8016b80 <_sbrk_r>
 8014e2c:	4581      	cmp	r9, r0
 8014e2e:	d142      	bne.n	8014eb6 <_malloc_r+0xea>
 8014e30:	6821      	ldr	r1, [r4, #0]
 8014e32:	1a6d      	subs	r5, r5, r1
 8014e34:	4629      	mov	r1, r5
 8014e36:	4630      	mov	r0, r6
 8014e38:	f7ff ffa6 	bl	8014d88 <sbrk_aligned>
 8014e3c:	3001      	adds	r0, #1
 8014e3e:	d03a      	beq.n	8014eb6 <_malloc_r+0xea>
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	442b      	add	r3, r5
 8014e44:	6023      	str	r3, [r4, #0]
 8014e46:	f8d8 3000 	ldr.w	r3, [r8]
 8014e4a:	685a      	ldr	r2, [r3, #4]
 8014e4c:	bb62      	cbnz	r2, 8014ea8 <_malloc_r+0xdc>
 8014e4e:	f8c8 7000 	str.w	r7, [r8]
 8014e52:	e00f      	b.n	8014e74 <_malloc_r+0xa8>
 8014e54:	6822      	ldr	r2, [r4, #0]
 8014e56:	1b52      	subs	r2, r2, r5
 8014e58:	d420      	bmi.n	8014e9c <_malloc_r+0xd0>
 8014e5a:	2a0b      	cmp	r2, #11
 8014e5c:	d917      	bls.n	8014e8e <_malloc_r+0xc2>
 8014e5e:	1961      	adds	r1, r4, r5
 8014e60:	42a3      	cmp	r3, r4
 8014e62:	6025      	str	r5, [r4, #0]
 8014e64:	bf18      	it	ne
 8014e66:	6059      	strne	r1, [r3, #4]
 8014e68:	6863      	ldr	r3, [r4, #4]
 8014e6a:	bf08      	it	eq
 8014e6c:	f8c8 1000 	streq.w	r1, [r8]
 8014e70:	5162      	str	r2, [r4, r5]
 8014e72:	604b      	str	r3, [r1, #4]
 8014e74:	4630      	mov	r0, r6
 8014e76:	f000 f82f 	bl	8014ed8 <__malloc_unlock>
 8014e7a:	f104 000b 	add.w	r0, r4, #11
 8014e7e:	1d23      	adds	r3, r4, #4
 8014e80:	f020 0007 	bic.w	r0, r0, #7
 8014e84:	1ac2      	subs	r2, r0, r3
 8014e86:	bf1c      	itt	ne
 8014e88:	1a1b      	subne	r3, r3, r0
 8014e8a:	50a3      	strne	r3, [r4, r2]
 8014e8c:	e7af      	b.n	8014dee <_malloc_r+0x22>
 8014e8e:	6862      	ldr	r2, [r4, #4]
 8014e90:	42a3      	cmp	r3, r4
 8014e92:	bf0c      	ite	eq
 8014e94:	f8c8 2000 	streq.w	r2, [r8]
 8014e98:	605a      	strne	r2, [r3, #4]
 8014e9a:	e7eb      	b.n	8014e74 <_malloc_r+0xa8>
 8014e9c:	4623      	mov	r3, r4
 8014e9e:	6864      	ldr	r4, [r4, #4]
 8014ea0:	e7ae      	b.n	8014e00 <_malloc_r+0x34>
 8014ea2:	463c      	mov	r4, r7
 8014ea4:	687f      	ldr	r7, [r7, #4]
 8014ea6:	e7b6      	b.n	8014e16 <_malloc_r+0x4a>
 8014ea8:	461a      	mov	r2, r3
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	42a3      	cmp	r3, r4
 8014eae:	d1fb      	bne.n	8014ea8 <_malloc_r+0xdc>
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	6053      	str	r3, [r2, #4]
 8014eb4:	e7de      	b.n	8014e74 <_malloc_r+0xa8>
 8014eb6:	230c      	movs	r3, #12
 8014eb8:	6033      	str	r3, [r6, #0]
 8014eba:	4630      	mov	r0, r6
 8014ebc:	f000 f80c 	bl	8014ed8 <__malloc_unlock>
 8014ec0:	e794      	b.n	8014dec <_malloc_r+0x20>
 8014ec2:	6005      	str	r5, [r0, #0]
 8014ec4:	e7d6      	b.n	8014e74 <_malloc_r+0xa8>
 8014ec6:	bf00      	nop
 8014ec8:	200082ac 	.word	0x200082ac

08014ecc <__malloc_lock>:
 8014ecc:	4801      	ldr	r0, [pc, #4]	@ (8014ed4 <__malloc_lock+0x8>)
 8014ece:	f7ff b8ee 	b.w	80140ae <__retarget_lock_acquire_recursive>
 8014ed2:	bf00      	nop
 8014ed4:	200082a4 	.word	0x200082a4

08014ed8 <__malloc_unlock>:
 8014ed8:	4801      	ldr	r0, [pc, #4]	@ (8014ee0 <__malloc_unlock+0x8>)
 8014eda:	f7ff b8e9 	b.w	80140b0 <__retarget_lock_release_recursive>
 8014ede:	bf00      	nop
 8014ee0:	200082a4 	.word	0x200082a4

08014ee4 <_Balloc>:
 8014ee4:	b570      	push	{r4, r5, r6, lr}
 8014ee6:	69c6      	ldr	r6, [r0, #28]
 8014ee8:	4604      	mov	r4, r0
 8014eea:	460d      	mov	r5, r1
 8014eec:	b976      	cbnz	r6, 8014f0c <_Balloc+0x28>
 8014eee:	2010      	movs	r0, #16
 8014ef0:	f7ff ff42 	bl	8014d78 <malloc>
 8014ef4:	4602      	mov	r2, r0
 8014ef6:	61e0      	str	r0, [r4, #28]
 8014ef8:	b920      	cbnz	r0, 8014f04 <_Balloc+0x20>
 8014efa:	4b18      	ldr	r3, [pc, #96]	@ (8014f5c <_Balloc+0x78>)
 8014efc:	4818      	ldr	r0, [pc, #96]	@ (8014f60 <_Balloc+0x7c>)
 8014efe:	216b      	movs	r1, #107	@ 0x6b
 8014f00:	f7ff f8ec 	bl	80140dc <__assert_func>
 8014f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f08:	6006      	str	r6, [r0, #0]
 8014f0a:	60c6      	str	r6, [r0, #12]
 8014f0c:	69e6      	ldr	r6, [r4, #28]
 8014f0e:	68f3      	ldr	r3, [r6, #12]
 8014f10:	b183      	cbz	r3, 8014f34 <_Balloc+0x50>
 8014f12:	69e3      	ldr	r3, [r4, #28]
 8014f14:	68db      	ldr	r3, [r3, #12]
 8014f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f1a:	b9b8      	cbnz	r0, 8014f4c <_Balloc+0x68>
 8014f1c:	2101      	movs	r1, #1
 8014f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8014f22:	1d72      	adds	r2, r6, #5
 8014f24:	0092      	lsls	r2, r2, #2
 8014f26:	4620      	mov	r0, r4
 8014f28:	f001 fe49 	bl	8016bbe <_calloc_r>
 8014f2c:	b160      	cbz	r0, 8014f48 <_Balloc+0x64>
 8014f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f32:	e00e      	b.n	8014f52 <_Balloc+0x6e>
 8014f34:	2221      	movs	r2, #33	@ 0x21
 8014f36:	2104      	movs	r1, #4
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f001 fe40 	bl	8016bbe <_calloc_r>
 8014f3e:	69e3      	ldr	r3, [r4, #28]
 8014f40:	60f0      	str	r0, [r6, #12]
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d1e4      	bne.n	8014f12 <_Balloc+0x2e>
 8014f48:	2000      	movs	r0, #0
 8014f4a:	bd70      	pop	{r4, r5, r6, pc}
 8014f4c:	6802      	ldr	r2, [r0, #0]
 8014f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f52:	2300      	movs	r3, #0
 8014f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f58:	e7f7      	b.n	8014f4a <_Balloc+0x66>
 8014f5a:	bf00      	nop
 8014f5c:	0801ac26 	.word	0x0801ac26
 8014f60:	0801ad80 	.word	0x0801ad80

08014f64 <_Bfree>:
 8014f64:	b570      	push	{r4, r5, r6, lr}
 8014f66:	69c6      	ldr	r6, [r0, #28]
 8014f68:	4605      	mov	r5, r0
 8014f6a:	460c      	mov	r4, r1
 8014f6c:	b976      	cbnz	r6, 8014f8c <_Bfree+0x28>
 8014f6e:	2010      	movs	r0, #16
 8014f70:	f7ff ff02 	bl	8014d78 <malloc>
 8014f74:	4602      	mov	r2, r0
 8014f76:	61e8      	str	r0, [r5, #28]
 8014f78:	b920      	cbnz	r0, 8014f84 <_Bfree+0x20>
 8014f7a:	4b09      	ldr	r3, [pc, #36]	@ (8014fa0 <_Bfree+0x3c>)
 8014f7c:	4809      	ldr	r0, [pc, #36]	@ (8014fa4 <_Bfree+0x40>)
 8014f7e:	218f      	movs	r1, #143	@ 0x8f
 8014f80:	f7ff f8ac 	bl	80140dc <__assert_func>
 8014f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f88:	6006      	str	r6, [r0, #0]
 8014f8a:	60c6      	str	r6, [r0, #12]
 8014f8c:	b13c      	cbz	r4, 8014f9e <_Bfree+0x3a>
 8014f8e:	69eb      	ldr	r3, [r5, #28]
 8014f90:	6862      	ldr	r2, [r4, #4]
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f98:	6021      	str	r1, [r4, #0]
 8014f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}
 8014fa0:	0801ac26 	.word	0x0801ac26
 8014fa4:	0801ad80 	.word	0x0801ad80

08014fa8 <__multadd>:
 8014fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fac:	690d      	ldr	r5, [r1, #16]
 8014fae:	4607      	mov	r7, r0
 8014fb0:	460c      	mov	r4, r1
 8014fb2:	461e      	mov	r6, r3
 8014fb4:	f101 0c14 	add.w	ip, r1, #20
 8014fb8:	2000      	movs	r0, #0
 8014fba:	f8dc 3000 	ldr.w	r3, [ip]
 8014fbe:	b299      	uxth	r1, r3
 8014fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8014fc4:	0c1e      	lsrs	r6, r3, #16
 8014fc6:	0c0b      	lsrs	r3, r1, #16
 8014fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8014fcc:	b289      	uxth	r1, r1
 8014fce:	3001      	adds	r0, #1
 8014fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014fd4:	4285      	cmp	r5, r0
 8014fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8014fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014fde:	dcec      	bgt.n	8014fba <__multadd+0x12>
 8014fe0:	b30e      	cbz	r6, 8015026 <__multadd+0x7e>
 8014fe2:	68a3      	ldr	r3, [r4, #8]
 8014fe4:	42ab      	cmp	r3, r5
 8014fe6:	dc19      	bgt.n	801501c <__multadd+0x74>
 8014fe8:	6861      	ldr	r1, [r4, #4]
 8014fea:	4638      	mov	r0, r7
 8014fec:	3101      	adds	r1, #1
 8014fee:	f7ff ff79 	bl	8014ee4 <_Balloc>
 8014ff2:	4680      	mov	r8, r0
 8014ff4:	b928      	cbnz	r0, 8015002 <__multadd+0x5a>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	4b0c      	ldr	r3, [pc, #48]	@ (801502c <__multadd+0x84>)
 8014ffa:	480d      	ldr	r0, [pc, #52]	@ (8015030 <__multadd+0x88>)
 8014ffc:	21ba      	movs	r1, #186	@ 0xba
 8014ffe:	f7ff f86d 	bl	80140dc <__assert_func>
 8015002:	6922      	ldr	r2, [r4, #16]
 8015004:	3202      	adds	r2, #2
 8015006:	f104 010c 	add.w	r1, r4, #12
 801500a:	0092      	lsls	r2, r2, #2
 801500c:	300c      	adds	r0, #12
 801500e:	f7ff f850 	bl	80140b2 <memcpy>
 8015012:	4621      	mov	r1, r4
 8015014:	4638      	mov	r0, r7
 8015016:	f7ff ffa5 	bl	8014f64 <_Bfree>
 801501a:	4644      	mov	r4, r8
 801501c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015020:	3501      	adds	r5, #1
 8015022:	615e      	str	r6, [r3, #20]
 8015024:	6125      	str	r5, [r4, #16]
 8015026:	4620      	mov	r0, r4
 8015028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801502c:	0801ad6f 	.word	0x0801ad6f
 8015030:	0801ad80 	.word	0x0801ad80

08015034 <__s2b>:
 8015034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015038:	460c      	mov	r4, r1
 801503a:	4615      	mov	r5, r2
 801503c:	461f      	mov	r7, r3
 801503e:	2209      	movs	r2, #9
 8015040:	3308      	adds	r3, #8
 8015042:	4606      	mov	r6, r0
 8015044:	fb93 f3f2 	sdiv	r3, r3, r2
 8015048:	2100      	movs	r1, #0
 801504a:	2201      	movs	r2, #1
 801504c:	429a      	cmp	r2, r3
 801504e:	db09      	blt.n	8015064 <__s2b+0x30>
 8015050:	4630      	mov	r0, r6
 8015052:	f7ff ff47 	bl	8014ee4 <_Balloc>
 8015056:	b940      	cbnz	r0, 801506a <__s2b+0x36>
 8015058:	4602      	mov	r2, r0
 801505a:	4b19      	ldr	r3, [pc, #100]	@ (80150c0 <__s2b+0x8c>)
 801505c:	4819      	ldr	r0, [pc, #100]	@ (80150c4 <__s2b+0x90>)
 801505e:	21d3      	movs	r1, #211	@ 0xd3
 8015060:	f7ff f83c 	bl	80140dc <__assert_func>
 8015064:	0052      	lsls	r2, r2, #1
 8015066:	3101      	adds	r1, #1
 8015068:	e7f0      	b.n	801504c <__s2b+0x18>
 801506a:	9b08      	ldr	r3, [sp, #32]
 801506c:	6143      	str	r3, [r0, #20]
 801506e:	2d09      	cmp	r5, #9
 8015070:	f04f 0301 	mov.w	r3, #1
 8015074:	6103      	str	r3, [r0, #16]
 8015076:	dd16      	ble.n	80150a6 <__s2b+0x72>
 8015078:	f104 0909 	add.w	r9, r4, #9
 801507c:	46c8      	mov	r8, r9
 801507e:	442c      	add	r4, r5
 8015080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015084:	4601      	mov	r1, r0
 8015086:	3b30      	subs	r3, #48	@ 0x30
 8015088:	220a      	movs	r2, #10
 801508a:	4630      	mov	r0, r6
 801508c:	f7ff ff8c 	bl	8014fa8 <__multadd>
 8015090:	45a0      	cmp	r8, r4
 8015092:	d1f5      	bne.n	8015080 <__s2b+0x4c>
 8015094:	f1a5 0408 	sub.w	r4, r5, #8
 8015098:	444c      	add	r4, r9
 801509a:	1b2d      	subs	r5, r5, r4
 801509c:	1963      	adds	r3, r4, r5
 801509e:	42bb      	cmp	r3, r7
 80150a0:	db04      	blt.n	80150ac <__s2b+0x78>
 80150a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150a6:	340a      	adds	r4, #10
 80150a8:	2509      	movs	r5, #9
 80150aa:	e7f6      	b.n	801509a <__s2b+0x66>
 80150ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80150b0:	4601      	mov	r1, r0
 80150b2:	3b30      	subs	r3, #48	@ 0x30
 80150b4:	220a      	movs	r2, #10
 80150b6:	4630      	mov	r0, r6
 80150b8:	f7ff ff76 	bl	8014fa8 <__multadd>
 80150bc:	e7ee      	b.n	801509c <__s2b+0x68>
 80150be:	bf00      	nop
 80150c0:	0801ad6f 	.word	0x0801ad6f
 80150c4:	0801ad80 	.word	0x0801ad80

080150c8 <__hi0bits>:
 80150c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80150cc:	4603      	mov	r3, r0
 80150ce:	bf36      	itet	cc
 80150d0:	0403      	lslcc	r3, r0, #16
 80150d2:	2000      	movcs	r0, #0
 80150d4:	2010      	movcc	r0, #16
 80150d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80150da:	bf3c      	itt	cc
 80150dc:	021b      	lslcc	r3, r3, #8
 80150de:	3008      	addcc	r0, #8
 80150e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80150e4:	bf3c      	itt	cc
 80150e6:	011b      	lslcc	r3, r3, #4
 80150e8:	3004      	addcc	r0, #4
 80150ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80150ee:	bf3c      	itt	cc
 80150f0:	009b      	lslcc	r3, r3, #2
 80150f2:	3002      	addcc	r0, #2
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	db05      	blt.n	8015104 <__hi0bits+0x3c>
 80150f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80150fc:	f100 0001 	add.w	r0, r0, #1
 8015100:	bf08      	it	eq
 8015102:	2020      	moveq	r0, #32
 8015104:	4770      	bx	lr

08015106 <__lo0bits>:
 8015106:	6803      	ldr	r3, [r0, #0]
 8015108:	4602      	mov	r2, r0
 801510a:	f013 0007 	ands.w	r0, r3, #7
 801510e:	d00b      	beq.n	8015128 <__lo0bits+0x22>
 8015110:	07d9      	lsls	r1, r3, #31
 8015112:	d421      	bmi.n	8015158 <__lo0bits+0x52>
 8015114:	0798      	lsls	r0, r3, #30
 8015116:	bf49      	itett	mi
 8015118:	085b      	lsrmi	r3, r3, #1
 801511a:	089b      	lsrpl	r3, r3, #2
 801511c:	2001      	movmi	r0, #1
 801511e:	6013      	strmi	r3, [r2, #0]
 8015120:	bf5c      	itt	pl
 8015122:	6013      	strpl	r3, [r2, #0]
 8015124:	2002      	movpl	r0, #2
 8015126:	4770      	bx	lr
 8015128:	b299      	uxth	r1, r3
 801512a:	b909      	cbnz	r1, 8015130 <__lo0bits+0x2a>
 801512c:	0c1b      	lsrs	r3, r3, #16
 801512e:	2010      	movs	r0, #16
 8015130:	b2d9      	uxtb	r1, r3
 8015132:	b909      	cbnz	r1, 8015138 <__lo0bits+0x32>
 8015134:	3008      	adds	r0, #8
 8015136:	0a1b      	lsrs	r3, r3, #8
 8015138:	0719      	lsls	r1, r3, #28
 801513a:	bf04      	itt	eq
 801513c:	091b      	lsreq	r3, r3, #4
 801513e:	3004      	addeq	r0, #4
 8015140:	0799      	lsls	r1, r3, #30
 8015142:	bf04      	itt	eq
 8015144:	089b      	lsreq	r3, r3, #2
 8015146:	3002      	addeq	r0, #2
 8015148:	07d9      	lsls	r1, r3, #31
 801514a:	d403      	bmi.n	8015154 <__lo0bits+0x4e>
 801514c:	085b      	lsrs	r3, r3, #1
 801514e:	f100 0001 	add.w	r0, r0, #1
 8015152:	d003      	beq.n	801515c <__lo0bits+0x56>
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	4770      	bx	lr
 8015158:	2000      	movs	r0, #0
 801515a:	4770      	bx	lr
 801515c:	2020      	movs	r0, #32
 801515e:	4770      	bx	lr

08015160 <__i2b>:
 8015160:	b510      	push	{r4, lr}
 8015162:	460c      	mov	r4, r1
 8015164:	2101      	movs	r1, #1
 8015166:	f7ff febd 	bl	8014ee4 <_Balloc>
 801516a:	4602      	mov	r2, r0
 801516c:	b928      	cbnz	r0, 801517a <__i2b+0x1a>
 801516e:	4b05      	ldr	r3, [pc, #20]	@ (8015184 <__i2b+0x24>)
 8015170:	4805      	ldr	r0, [pc, #20]	@ (8015188 <__i2b+0x28>)
 8015172:	f240 1145 	movw	r1, #325	@ 0x145
 8015176:	f7fe ffb1 	bl	80140dc <__assert_func>
 801517a:	2301      	movs	r3, #1
 801517c:	6144      	str	r4, [r0, #20]
 801517e:	6103      	str	r3, [r0, #16]
 8015180:	bd10      	pop	{r4, pc}
 8015182:	bf00      	nop
 8015184:	0801ad6f 	.word	0x0801ad6f
 8015188:	0801ad80 	.word	0x0801ad80

0801518c <__multiply>:
 801518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015190:	4617      	mov	r7, r2
 8015192:	690a      	ldr	r2, [r1, #16]
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	429a      	cmp	r2, r3
 8015198:	bfa8      	it	ge
 801519a:	463b      	movge	r3, r7
 801519c:	4689      	mov	r9, r1
 801519e:	bfa4      	itt	ge
 80151a0:	460f      	movge	r7, r1
 80151a2:	4699      	movge	r9, r3
 80151a4:	693d      	ldr	r5, [r7, #16]
 80151a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	eb05 060a 	add.w	r6, r5, sl
 80151b2:	42b3      	cmp	r3, r6
 80151b4:	b085      	sub	sp, #20
 80151b6:	bfb8      	it	lt
 80151b8:	3101      	addlt	r1, #1
 80151ba:	f7ff fe93 	bl	8014ee4 <_Balloc>
 80151be:	b930      	cbnz	r0, 80151ce <__multiply+0x42>
 80151c0:	4602      	mov	r2, r0
 80151c2:	4b41      	ldr	r3, [pc, #260]	@ (80152c8 <__multiply+0x13c>)
 80151c4:	4841      	ldr	r0, [pc, #260]	@ (80152cc <__multiply+0x140>)
 80151c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80151ca:	f7fe ff87 	bl	80140dc <__assert_func>
 80151ce:	f100 0414 	add.w	r4, r0, #20
 80151d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80151d6:	4623      	mov	r3, r4
 80151d8:	2200      	movs	r2, #0
 80151da:	4573      	cmp	r3, lr
 80151dc:	d320      	bcc.n	8015220 <__multiply+0x94>
 80151de:	f107 0814 	add.w	r8, r7, #20
 80151e2:	f109 0114 	add.w	r1, r9, #20
 80151e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80151ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80151ee:	9302      	str	r3, [sp, #8]
 80151f0:	1beb      	subs	r3, r5, r7
 80151f2:	3b15      	subs	r3, #21
 80151f4:	f023 0303 	bic.w	r3, r3, #3
 80151f8:	3304      	adds	r3, #4
 80151fa:	3715      	adds	r7, #21
 80151fc:	42bd      	cmp	r5, r7
 80151fe:	bf38      	it	cc
 8015200:	2304      	movcc	r3, #4
 8015202:	9301      	str	r3, [sp, #4]
 8015204:	9b02      	ldr	r3, [sp, #8]
 8015206:	9103      	str	r1, [sp, #12]
 8015208:	428b      	cmp	r3, r1
 801520a:	d80c      	bhi.n	8015226 <__multiply+0x9a>
 801520c:	2e00      	cmp	r6, #0
 801520e:	dd03      	ble.n	8015218 <__multiply+0x8c>
 8015210:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015214:	2b00      	cmp	r3, #0
 8015216:	d055      	beq.n	80152c4 <__multiply+0x138>
 8015218:	6106      	str	r6, [r0, #16]
 801521a:	b005      	add	sp, #20
 801521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015220:	f843 2b04 	str.w	r2, [r3], #4
 8015224:	e7d9      	b.n	80151da <__multiply+0x4e>
 8015226:	f8b1 a000 	ldrh.w	sl, [r1]
 801522a:	f1ba 0f00 	cmp.w	sl, #0
 801522e:	d01f      	beq.n	8015270 <__multiply+0xe4>
 8015230:	46c4      	mov	ip, r8
 8015232:	46a1      	mov	r9, r4
 8015234:	2700      	movs	r7, #0
 8015236:	f85c 2b04 	ldr.w	r2, [ip], #4
 801523a:	f8d9 3000 	ldr.w	r3, [r9]
 801523e:	fa1f fb82 	uxth.w	fp, r2
 8015242:	b29b      	uxth	r3, r3
 8015244:	fb0a 330b 	mla	r3, sl, fp, r3
 8015248:	443b      	add	r3, r7
 801524a:	f8d9 7000 	ldr.w	r7, [r9]
 801524e:	0c12      	lsrs	r2, r2, #16
 8015250:	0c3f      	lsrs	r7, r7, #16
 8015252:	fb0a 7202 	mla	r2, sl, r2, r7
 8015256:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801525a:	b29b      	uxth	r3, r3
 801525c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015260:	4565      	cmp	r5, ip
 8015262:	f849 3b04 	str.w	r3, [r9], #4
 8015266:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801526a:	d8e4      	bhi.n	8015236 <__multiply+0xaa>
 801526c:	9b01      	ldr	r3, [sp, #4]
 801526e:	50e7      	str	r7, [r4, r3]
 8015270:	9b03      	ldr	r3, [sp, #12]
 8015272:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015276:	3104      	adds	r1, #4
 8015278:	f1b9 0f00 	cmp.w	r9, #0
 801527c:	d020      	beq.n	80152c0 <__multiply+0x134>
 801527e:	6823      	ldr	r3, [r4, #0]
 8015280:	4647      	mov	r7, r8
 8015282:	46a4      	mov	ip, r4
 8015284:	f04f 0a00 	mov.w	sl, #0
 8015288:	f8b7 b000 	ldrh.w	fp, [r7]
 801528c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015290:	fb09 220b 	mla	r2, r9, fp, r2
 8015294:	4452      	add	r2, sl
 8015296:	b29b      	uxth	r3, r3
 8015298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801529c:	f84c 3b04 	str.w	r3, [ip], #4
 80152a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80152a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80152a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80152ac:	fb09 330a 	mla	r3, r9, sl, r3
 80152b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80152b4:	42bd      	cmp	r5, r7
 80152b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80152ba:	d8e5      	bhi.n	8015288 <__multiply+0xfc>
 80152bc:	9a01      	ldr	r2, [sp, #4]
 80152be:	50a3      	str	r3, [r4, r2]
 80152c0:	3404      	adds	r4, #4
 80152c2:	e79f      	b.n	8015204 <__multiply+0x78>
 80152c4:	3e01      	subs	r6, #1
 80152c6:	e7a1      	b.n	801520c <__multiply+0x80>
 80152c8:	0801ad6f 	.word	0x0801ad6f
 80152cc:	0801ad80 	.word	0x0801ad80

080152d0 <__pow5mult>:
 80152d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152d4:	4615      	mov	r5, r2
 80152d6:	f012 0203 	ands.w	r2, r2, #3
 80152da:	4607      	mov	r7, r0
 80152dc:	460e      	mov	r6, r1
 80152de:	d007      	beq.n	80152f0 <__pow5mult+0x20>
 80152e0:	4c25      	ldr	r4, [pc, #148]	@ (8015378 <__pow5mult+0xa8>)
 80152e2:	3a01      	subs	r2, #1
 80152e4:	2300      	movs	r3, #0
 80152e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152ea:	f7ff fe5d 	bl	8014fa8 <__multadd>
 80152ee:	4606      	mov	r6, r0
 80152f0:	10ad      	asrs	r5, r5, #2
 80152f2:	d03d      	beq.n	8015370 <__pow5mult+0xa0>
 80152f4:	69fc      	ldr	r4, [r7, #28]
 80152f6:	b97c      	cbnz	r4, 8015318 <__pow5mult+0x48>
 80152f8:	2010      	movs	r0, #16
 80152fa:	f7ff fd3d 	bl	8014d78 <malloc>
 80152fe:	4602      	mov	r2, r0
 8015300:	61f8      	str	r0, [r7, #28]
 8015302:	b928      	cbnz	r0, 8015310 <__pow5mult+0x40>
 8015304:	4b1d      	ldr	r3, [pc, #116]	@ (801537c <__pow5mult+0xac>)
 8015306:	481e      	ldr	r0, [pc, #120]	@ (8015380 <__pow5mult+0xb0>)
 8015308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801530c:	f7fe fee6 	bl	80140dc <__assert_func>
 8015310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015314:	6004      	str	r4, [r0, #0]
 8015316:	60c4      	str	r4, [r0, #12]
 8015318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801531c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015320:	b94c      	cbnz	r4, 8015336 <__pow5mult+0x66>
 8015322:	f240 2171 	movw	r1, #625	@ 0x271
 8015326:	4638      	mov	r0, r7
 8015328:	f7ff ff1a 	bl	8015160 <__i2b>
 801532c:	2300      	movs	r3, #0
 801532e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015332:	4604      	mov	r4, r0
 8015334:	6003      	str	r3, [r0, #0]
 8015336:	f04f 0900 	mov.w	r9, #0
 801533a:	07eb      	lsls	r3, r5, #31
 801533c:	d50a      	bpl.n	8015354 <__pow5mult+0x84>
 801533e:	4631      	mov	r1, r6
 8015340:	4622      	mov	r2, r4
 8015342:	4638      	mov	r0, r7
 8015344:	f7ff ff22 	bl	801518c <__multiply>
 8015348:	4631      	mov	r1, r6
 801534a:	4680      	mov	r8, r0
 801534c:	4638      	mov	r0, r7
 801534e:	f7ff fe09 	bl	8014f64 <_Bfree>
 8015352:	4646      	mov	r6, r8
 8015354:	106d      	asrs	r5, r5, #1
 8015356:	d00b      	beq.n	8015370 <__pow5mult+0xa0>
 8015358:	6820      	ldr	r0, [r4, #0]
 801535a:	b938      	cbnz	r0, 801536c <__pow5mult+0x9c>
 801535c:	4622      	mov	r2, r4
 801535e:	4621      	mov	r1, r4
 8015360:	4638      	mov	r0, r7
 8015362:	f7ff ff13 	bl	801518c <__multiply>
 8015366:	6020      	str	r0, [r4, #0]
 8015368:	f8c0 9000 	str.w	r9, [r0]
 801536c:	4604      	mov	r4, r0
 801536e:	e7e4      	b.n	801533a <__pow5mult+0x6a>
 8015370:	4630      	mov	r0, r6
 8015372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015376:	bf00      	nop
 8015378:	0801af58 	.word	0x0801af58
 801537c:	0801ac26 	.word	0x0801ac26
 8015380:	0801ad80 	.word	0x0801ad80

08015384 <__lshift>:
 8015384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015388:	460c      	mov	r4, r1
 801538a:	6849      	ldr	r1, [r1, #4]
 801538c:	6923      	ldr	r3, [r4, #16]
 801538e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015392:	68a3      	ldr	r3, [r4, #8]
 8015394:	4607      	mov	r7, r0
 8015396:	4691      	mov	r9, r2
 8015398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801539c:	f108 0601 	add.w	r6, r8, #1
 80153a0:	42b3      	cmp	r3, r6
 80153a2:	db0b      	blt.n	80153bc <__lshift+0x38>
 80153a4:	4638      	mov	r0, r7
 80153a6:	f7ff fd9d 	bl	8014ee4 <_Balloc>
 80153aa:	4605      	mov	r5, r0
 80153ac:	b948      	cbnz	r0, 80153c2 <__lshift+0x3e>
 80153ae:	4602      	mov	r2, r0
 80153b0:	4b28      	ldr	r3, [pc, #160]	@ (8015454 <__lshift+0xd0>)
 80153b2:	4829      	ldr	r0, [pc, #164]	@ (8015458 <__lshift+0xd4>)
 80153b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80153b8:	f7fe fe90 	bl	80140dc <__assert_func>
 80153bc:	3101      	adds	r1, #1
 80153be:	005b      	lsls	r3, r3, #1
 80153c0:	e7ee      	b.n	80153a0 <__lshift+0x1c>
 80153c2:	2300      	movs	r3, #0
 80153c4:	f100 0114 	add.w	r1, r0, #20
 80153c8:	f100 0210 	add.w	r2, r0, #16
 80153cc:	4618      	mov	r0, r3
 80153ce:	4553      	cmp	r3, sl
 80153d0:	db33      	blt.n	801543a <__lshift+0xb6>
 80153d2:	6920      	ldr	r0, [r4, #16]
 80153d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153d8:	f104 0314 	add.w	r3, r4, #20
 80153dc:	f019 091f 	ands.w	r9, r9, #31
 80153e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80153e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80153e8:	d02b      	beq.n	8015442 <__lshift+0xbe>
 80153ea:	f1c9 0e20 	rsb	lr, r9, #32
 80153ee:	468a      	mov	sl, r1
 80153f0:	2200      	movs	r2, #0
 80153f2:	6818      	ldr	r0, [r3, #0]
 80153f4:	fa00 f009 	lsl.w	r0, r0, r9
 80153f8:	4310      	orrs	r0, r2
 80153fa:	f84a 0b04 	str.w	r0, [sl], #4
 80153fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015402:	459c      	cmp	ip, r3
 8015404:	fa22 f20e 	lsr.w	r2, r2, lr
 8015408:	d8f3      	bhi.n	80153f2 <__lshift+0x6e>
 801540a:	ebac 0304 	sub.w	r3, ip, r4
 801540e:	3b15      	subs	r3, #21
 8015410:	f023 0303 	bic.w	r3, r3, #3
 8015414:	3304      	adds	r3, #4
 8015416:	f104 0015 	add.w	r0, r4, #21
 801541a:	4560      	cmp	r0, ip
 801541c:	bf88      	it	hi
 801541e:	2304      	movhi	r3, #4
 8015420:	50ca      	str	r2, [r1, r3]
 8015422:	b10a      	cbz	r2, 8015428 <__lshift+0xa4>
 8015424:	f108 0602 	add.w	r6, r8, #2
 8015428:	3e01      	subs	r6, #1
 801542a:	4638      	mov	r0, r7
 801542c:	612e      	str	r6, [r5, #16]
 801542e:	4621      	mov	r1, r4
 8015430:	f7ff fd98 	bl	8014f64 <_Bfree>
 8015434:	4628      	mov	r0, r5
 8015436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801543a:	f842 0f04 	str.w	r0, [r2, #4]!
 801543e:	3301      	adds	r3, #1
 8015440:	e7c5      	b.n	80153ce <__lshift+0x4a>
 8015442:	3904      	subs	r1, #4
 8015444:	f853 2b04 	ldr.w	r2, [r3], #4
 8015448:	f841 2f04 	str.w	r2, [r1, #4]!
 801544c:	459c      	cmp	ip, r3
 801544e:	d8f9      	bhi.n	8015444 <__lshift+0xc0>
 8015450:	e7ea      	b.n	8015428 <__lshift+0xa4>
 8015452:	bf00      	nop
 8015454:	0801ad6f 	.word	0x0801ad6f
 8015458:	0801ad80 	.word	0x0801ad80

0801545c <__mcmp>:
 801545c:	690a      	ldr	r2, [r1, #16]
 801545e:	4603      	mov	r3, r0
 8015460:	6900      	ldr	r0, [r0, #16]
 8015462:	1a80      	subs	r0, r0, r2
 8015464:	b530      	push	{r4, r5, lr}
 8015466:	d10e      	bne.n	8015486 <__mcmp+0x2a>
 8015468:	3314      	adds	r3, #20
 801546a:	3114      	adds	r1, #20
 801546c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801547c:	4295      	cmp	r5, r2
 801547e:	d003      	beq.n	8015488 <__mcmp+0x2c>
 8015480:	d205      	bcs.n	801548e <__mcmp+0x32>
 8015482:	f04f 30ff 	mov.w	r0, #4294967295
 8015486:	bd30      	pop	{r4, r5, pc}
 8015488:	42a3      	cmp	r3, r4
 801548a:	d3f3      	bcc.n	8015474 <__mcmp+0x18>
 801548c:	e7fb      	b.n	8015486 <__mcmp+0x2a>
 801548e:	2001      	movs	r0, #1
 8015490:	e7f9      	b.n	8015486 <__mcmp+0x2a>
	...

08015494 <__mdiff>:
 8015494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015498:	4689      	mov	r9, r1
 801549a:	4606      	mov	r6, r0
 801549c:	4611      	mov	r1, r2
 801549e:	4648      	mov	r0, r9
 80154a0:	4614      	mov	r4, r2
 80154a2:	f7ff ffdb 	bl	801545c <__mcmp>
 80154a6:	1e05      	subs	r5, r0, #0
 80154a8:	d112      	bne.n	80154d0 <__mdiff+0x3c>
 80154aa:	4629      	mov	r1, r5
 80154ac:	4630      	mov	r0, r6
 80154ae:	f7ff fd19 	bl	8014ee4 <_Balloc>
 80154b2:	4602      	mov	r2, r0
 80154b4:	b928      	cbnz	r0, 80154c2 <__mdiff+0x2e>
 80154b6:	4b3f      	ldr	r3, [pc, #252]	@ (80155b4 <__mdiff+0x120>)
 80154b8:	f240 2137 	movw	r1, #567	@ 0x237
 80154bc:	483e      	ldr	r0, [pc, #248]	@ (80155b8 <__mdiff+0x124>)
 80154be:	f7fe fe0d 	bl	80140dc <__assert_func>
 80154c2:	2301      	movs	r3, #1
 80154c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80154c8:	4610      	mov	r0, r2
 80154ca:	b003      	add	sp, #12
 80154cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d0:	bfbc      	itt	lt
 80154d2:	464b      	movlt	r3, r9
 80154d4:	46a1      	movlt	r9, r4
 80154d6:	4630      	mov	r0, r6
 80154d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80154dc:	bfba      	itte	lt
 80154de:	461c      	movlt	r4, r3
 80154e0:	2501      	movlt	r5, #1
 80154e2:	2500      	movge	r5, #0
 80154e4:	f7ff fcfe 	bl	8014ee4 <_Balloc>
 80154e8:	4602      	mov	r2, r0
 80154ea:	b918      	cbnz	r0, 80154f4 <__mdiff+0x60>
 80154ec:	4b31      	ldr	r3, [pc, #196]	@ (80155b4 <__mdiff+0x120>)
 80154ee:	f240 2145 	movw	r1, #581	@ 0x245
 80154f2:	e7e3      	b.n	80154bc <__mdiff+0x28>
 80154f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80154f8:	6926      	ldr	r6, [r4, #16]
 80154fa:	60c5      	str	r5, [r0, #12]
 80154fc:	f109 0310 	add.w	r3, r9, #16
 8015500:	f109 0514 	add.w	r5, r9, #20
 8015504:	f104 0e14 	add.w	lr, r4, #20
 8015508:	f100 0b14 	add.w	fp, r0, #20
 801550c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015514:	9301      	str	r3, [sp, #4]
 8015516:	46d9      	mov	r9, fp
 8015518:	f04f 0c00 	mov.w	ip, #0
 801551c:	9b01      	ldr	r3, [sp, #4]
 801551e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015526:	9301      	str	r3, [sp, #4]
 8015528:	fa1f f38a 	uxth.w	r3, sl
 801552c:	4619      	mov	r1, r3
 801552e:	b283      	uxth	r3, r0
 8015530:	1acb      	subs	r3, r1, r3
 8015532:	0c00      	lsrs	r0, r0, #16
 8015534:	4463      	add	r3, ip
 8015536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801553a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801553e:	b29b      	uxth	r3, r3
 8015540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015544:	4576      	cmp	r6, lr
 8015546:	f849 3b04 	str.w	r3, [r9], #4
 801554a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801554e:	d8e5      	bhi.n	801551c <__mdiff+0x88>
 8015550:	1b33      	subs	r3, r6, r4
 8015552:	3b15      	subs	r3, #21
 8015554:	f023 0303 	bic.w	r3, r3, #3
 8015558:	3415      	adds	r4, #21
 801555a:	3304      	adds	r3, #4
 801555c:	42a6      	cmp	r6, r4
 801555e:	bf38      	it	cc
 8015560:	2304      	movcc	r3, #4
 8015562:	441d      	add	r5, r3
 8015564:	445b      	add	r3, fp
 8015566:	461e      	mov	r6, r3
 8015568:	462c      	mov	r4, r5
 801556a:	4544      	cmp	r4, r8
 801556c:	d30e      	bcc.n	801558c <__mdiff+0xf8>
 801556e:	f108 0103 	add.w	r1, r8, #3
 8015572:	1b49      	subs	r1, r1, r5
 8015574:	f021 0103 	bic.w	r1, r1, #3
 8015578:	3d03      	subs	r5, #3
 801557a:	45a8      	cmp	r8, r5
 801557c:	bf38      	it	cc
 801557e:	2100      	movcc	r1, #0
 8015580:	440b      	add	r3, r1
 8015582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015586:	b191      	cbz	r1, 80155ae <__mdiff+0x11a>
 8015588:	6117      	str	r7, [r2, #16]
 801558a:	e79d      	b.n	80154c8 <__mdiff+0x34>
 801558c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015590:	46e6      	mov	lr, ip
 8015592:	0c08      	lsrs	r0, r1, #16
 8015594:	fa1c fc81 	uxtah	ip, ip, r1
 8015598:	4471      	add	r1, lr
 801559a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801559e:	b289      	uxth	r1, r1
 80155a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80155a4:	f846 1b04 	str.w	r1, [r6], #4
 80155a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80155ac:	e7dd      	b.n	801556a <__mdiff+0xd6>
 80155ae:	3f01      	subs	r7, #1
 80155b0:	e7e7      	b.n	8015582 <__mdiff+0xee>
 80155b2:	bf00      	nop
 80155b4:	0801ad6f 	.word	0x0801ad6f
 80155b8:	0801ad80 	.word	0x0801ad80

080155bc <__ulp>:
 80155bc:	b082      	sub	sp, #8
 80155be:	ed8d 0b00 	vstr	d0, [sp]
 80155c2:	9a01      	ldr	r2, [sp, #4]
 80155c4:	4b0f      	ldr	r3, [pc, #60]	@ (8015604 <__ulp+0x48>)
 80155c6:	4013      	ands	r3, r2
 80155c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	dc08      	bgt.n	80155e2 <__ulp+0x26>
 80155d0:	425b      	negs	r3, r3
 80155d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80155d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80155da:	da04      	bge.n	80155e6 <__ulp+0x2a>
 80155dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80155e0:	4113      	asrs	r3, r2
 80155e2:	2200      	movs	r2, #0
 80155e4:	e008      	b.n	80155f8 <__ulp+0x3c>
 80155e6:	f1a2 0314 	sub.w	r3, r2, #20
 80155ea:	2b1e      	cmp	r3, #30
 80155ec:	bfda      	itte	le
 80155ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80155f2:	40da      	lsrle	r2, r3
 80155f4:	2201      	movgt	r2, #1
 80155f6:	2300      	movs	r3, #0
 80155f8:	4619      	mov	r1, r3
 80155fa:	4610      	mov	r0, r2
 80155fc:	ec41 0b10 	vmov	d0, r0, r1
 8015600:	b002      	add	sp, #8
 8015602:	4770      	bx	lr
 8015604:	7ff00000 	.word	0x7ff00000

08015608 <__b2d>:
 8015608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	6906      	ldr	r6, [r0, #16]
 801560e:	f100 0814 	add.w	r8, r0, #20
 8015612:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015616:	1f37      	subs	r7, r6, #4
 8015618:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801561c:	4610      	mov	r0, r2
 801561e:	f7ff fd53 	bl	80150c8 <__hi0bits>
 8015622:	f1c0 0320 	rsb	r3, r0, #32
 8015626:	280a      	cmp	r0, #10
 8015628:	600b      	str	r3, [r1, #0]
 801562a:	491b      	ldr	r1, [pc, #108]	@ (8015698 <__b2d+0x90>)
 801562c:	dc15      	bgt.n	801565a <__b2d+0x52>
 801562e:	f1c0 0c0b 	rsb	ip, r0, #11
 8015632:	fa22 f30c 	lsr.w	r3, r2, ip
 8015636:	45b8      	cmp	r8, r7
 8015638:	ea43 0501 	orr.w	r5, r3, r1
 801563c:	bf34      	ite	cc
 801563e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015642:	2300      	movcs	r3, #0
 8015644:	3015      	adds	r0, #21
 8015646:	fa02 f000 	lsl.w	r0, r2, r0
 801564a:	fa23 f30c 	lsr.w	r3, r3, ip
 801564e:	4303      	orrs	r3, r0
 8015650:	461c      	mov	r4, r3
 8015652:	ec45 4b10 	vmov	d0, r4, r5
 8015656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801565a:	45b8      	cmp	r8, r7
 801565c:	bf3a      	itte	cc
 801565e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015662:	f1a6 0708 	subcc.w	r7, r6, #8
 8015666:	2300      	movcs	r3, #0
 8015668:	380b      	subs	r0, #11
 801566a:	d012      	beq.n	8015692 <__b2d+0x8a>
 801566c:	f1c0 0120 	rsb	r1, r0, #32
 8015670:	fa23 f401 	lsr.w	r4, r3, r1
 8015674:	4082      	lsls	r2, r0
 8015676:	4322      	orrs	r2, r4
 8015678:	4547      	cmp	r7, r8
 801567a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801567e:	bf8c      	ite	hi
 8015680:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015684:	2200      	movls	r2, #0
 8015686:	4083      	lsls	r3, r0
 8015688:	40ca      	lsrs	r2, r1
 801568a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801568e:	4313      	orrs	r3, r2
 8015690:	e7de      	b.n	8015650 <__b2d+0x48>
 8015692:	ea42 0501 	orr.w	r5, r2, r1
 8015696:	e7db      	b.n	8015650 <__b2d+0x48>
 8015698:	3ff00000 	.word	0x3ff00000

0801569c <__d2b>:
 801569c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80156a0:	460f      	mov	r7, r1
 80156a2:	2101      	movs	r1, #1
 80156a4:	ec59 8b10 	vmov	r8, r9, d0
 80156a8:	4616      	mov	r6, r2
 80156aa:	f7ff fc1b 	bl	8014ee4 <_Balloc>
 80156ae:	4604      	mov	r4, r0
 80156b0:	b930      	cbnz	r0, 80156c0 <__d2b+0x24>
 80156b2:	4602      	mov	r2, r0
 80156b4:	4b23      	ldr	r3, [pc, #140]	@ (8015744 <__d2b+0xa8>)
 80156b6:	4824      	ldr	r0, [pc, #144]	@ (8015748 <__d2b+0xac>)
 80156b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80156bc:	f7fe fd0e 	bl	80140dc <__assert_func>
 80156c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80156c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80156c8:	b10d      	cbz	r5, 80156ce <__d2b+0x32>
 80156ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80156ce:	9301      	str	r3, [sp, #4]
 80156d0:	f1b8 0300 	subs.w	r3, r8, #0
 80156d4:	d023      	beq.n	801571e <__d2b+0x82>
 80156d6:	4668      	mov	r0, sp
 80156d8:	9300      	str	r3, [sp, #0]
 80156da:	f7ff fd14 	bl	8015106 <__lo0bits>
 80156de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80156e2:	b1d0      	cbz	r0, 801571a <__d2b+0x7e>
 80156e4:	f1c0 0320 	rsb	r3, r0, #32
 80156e8:	fa02 f303 	lsl.w	r3, r2, r3
 80156ec:	430b      	orrs	r3, r1
 80156ee:	40c2      	lsrs	r2, r0
 80156f0:	6163      	str	r3, [r4, #20]
 80156f2:	9201      	str	r2, [sp, #4]
 80156f4:	9b01      	ldr	r3, [sp, #4]
 80156f6:	61a3      	str	r3, [r4, #24]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	bf0c      	ite	eq
 80156fc:	2201      	moveq	r2, #1
 80156fe:	2202      	movne	r2, #2
 8015700:	6122      	str	r2, [r4, #16]
 8015702:	b1a5      	cbz	r5, 801572e <__d2b+0x92>
 8015704:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015708:	4405      	add	r5, r0
 801570a:	603d      	str	r5, [r7, #0]
 801570c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015710:	6030      	str	r0, [r6, #0]
 8015712:	4620      	mov	r0, r4
 8015714:	b003      	add	sp, #12
 8015716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801571a:	6161      	str	r1, [r4, #20]
 801571c:	e7ea      	b.n	80156f4 <__d2b+0x58>
 801571e:	a801      	add	r0, sp, #4
 8015720:	f7ff fcf1 	bl	8015106 <__lo0bits>
 8015724:	9b01      	ldr	r3, [sp, #4]
 8015726:	6163      	str	r3, [r4, #20]
 8015728:	3020      	adds	r0, #32
 801572a:	2201      	movs	r2, #1
 801572c:	e7e8      	b.n	8015700 <__d2b+0x64>
 801572e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015732:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015736:	6038      	str	r0, [r7, #0]
 8015738:	6918      	ldr	r0, [r3, #16]
 801573a:	f7ff fcc5 	bl	80150c8 <__hi0bits>
 801573e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015742:	e7e5      	b.n	8015710 <__d2b+0x74>
 8015744:	0801ad6f 	.word	0x0801ad6f
 8015748:	0801ad80 	.word	0x0801ad80

0801574c <__ratio>:
 801574c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015750:	4688      	mov	r8, r1
 8015752:	4669      	mov	r1, sp
 8015754:	4681      	mov	r9, r0
 8015756:	f7ff ff57 	bl	8015608 <__b2d>
 801575a:	a901      	add	r1, sp, #4
 801575c:	4640      	mov	r0, r8
 801575e:	ec55 4b10 	vmov	r4, r5, d0
 8015762:	f7ff ff51 	bl	8015608 <__b2d>
 8015766:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801576a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801576e:	1ad2      	subs	r2, r2, r3
 8015770:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015774:	1a5b      	subs	r3, r3, r1
 8015776:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801577a:	ec57 6b10 	vmov	r6, r7, d0
 801577e:	2b00      	cmp	r3, #0
 8015780:	bfd6      	itet	le
 8015782:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015786:	462a      	movgt	r2, r5
 8015788:	463a      	movle	r2, r7
 801578a:	46ab      	mov	fp, r5
 801578c:	46a2      	mov	sl, r4
 801578e:	bfce      	itee	gt
 8015790:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015794:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015798:	ee00 3a90 	vmovle	s1, r3
 801579c:	ec4b ab17 	vmov	d7, sl, fp
 80157a0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80157a4:	b003      	add	sp, #12
 80157a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157aa <__copybits>:
 80157aa:	3901      	subs	r1, #1
 80157ac:	b570      	push	{r4, r5, r6, lr}
 80157ae:	1149      	asrs	r1, r1, #5
 80157b0:	6914      	ldr	r4, [r2, #16]
 80157b2:	3101      	adds	r1, #1
 80157b4:	f102 0314 	add.w	r3, r2, #20
 80157b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80157bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80157c0:	1f05      	subs	r5, r0, #4
 80157c2:	42a3      	cmp	r3, r4
 80157c4:	d30c      	bcc.n	80157e0 <__copybits+0x36>
 80157c6:	1aa3      	subs	r3, r4, r2
 80157c8:	3b11      	subs	r3, #17
 80157ca:	f023 0303 	bic.w	r3, r3, #3
 80157ce:	3211      	adds	r2, #17
 80157d0:	42a2      	cmp	r2, r4
 80157d2:	bf88      	it	hi
 80157d4:	2300      	movhi	r3, #0
 80157d6:	4418      	add	r0, r3
 80157d8:	2300      	movs	r3, #0
 80157da:	4288      	cmp	r0, r1
 80157dc:	d305      	bcc.n	80157ea <__copybits+0x40>
 80157de:	bd70      	pop	{r4, r5, r6, pc}
 80157e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80157e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80157e8:	e7eb      	b.n	80157c2 <__copybits+0x18>
 80157ea:	f840 3b04 	str.w	r3, [r0], #4
 80157ee:	e7f4      	b.n	80157da <__copybits+0x30>

080157f0 <__any_on>:
 80157f0:	f100 0214 	add.w	r2, r0, #20
 80157f4:	6900      	ldr	r0, [r0, #16]
 80157f6:	114b      	asrs	r3, r1, #5
 80157f8:	4298      	cmp	r0, r3
 80157fa:	b510      	push	{r4, lr}
 80157fc:	db11      	blt.n	8015822 <__any_on+0x32>
 80157fe:	dd0a      	ble.n	8015816 <__any_on+0x26>
 8015800:	f011 011f 	ands.w	r1, r1, #31
 8015804:	d007      	beq.n	8015816 <__any_on+0x26>
 8015806:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801580a:	fa24 f001 	lsr.w	r0, r4, r1
 801580e:	fa00 f101 	lsl.w	r1, r0, r1
 8015812:	428c      	cmp	r4, r1
 8015814:	d10b      	bne.n	801582e <__any_on+0x3e>
 8015816:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801581a:	4293      	cmp	r3, r2
 801581c:	d803      	bhi.n	8015826 <__any_on+0x36>
 801581e:	2000      	movs	r0, #0
 8015820:	bd10      	pop	{r4, pc}
 8015822:	4603      	mov	r3, r0
 8015824:	e7f7      	b.n	8015816 <__any_on+0x26>
 8015826:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801582a:	2900      	cmp	r1, #0
 801582c:	d0f5      	beq.n	801581a <__any_on+0x2a>
 801582e:	2001      	movs	r0, #1
 8015830:	e7f6      	b.n	8015820 <__any_on+0x30>

08015832 <sulp>:
 8015832:	b570      	push	{r4, r5, r6, lr}
 8015834:	4604      	mov	r4, r0
 8015836:	460d      	mov	r5, r1
 8015838:	4616      	mov	r6, r2
 801583a:	ec45 4b10 	vmov	d0, r4, r5
 801583e:	f7ff febd 	bl	80155bc <__ulp>
 8015842:	b17e      	cbz	r6, 8015864 <sulp+0x32>
 8015844:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015848:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801584c:	2b00      	cmp	r3, #0
 801584e:	dd09      	ble.n	8015864 <sulp+0x32>
 8015850:	051b      	lsls	r3, r3, #20
 8015852:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015856:	2000      	movs	r0, #0
 8015858:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801585c:	ec41 0b17 	vmov	d7, r0, r1
 8015860:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015864:	bd70      	pop	{r4, r5, r6, pc}
	...

08015868 <_strtod_l>:
 8015868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801586c:	ed2d 8b0a 	vpush	{d8-d12}
 8015870:	b097      	sub	sp, #92	@ 0x5c
 8015872:	4688      	mov	r8, r1
 8015874:	920e      	str	r2, [sp, #56]	@ 0x38
 8015876:	2200      	movs	r2, #0
 8015878:	9212      	str	r2, [sp, #72]	@ 0x48
 801587a:	9005      	str	r0, [sp, #20]
 801587c:	f04f 0a00 	mov.w	sl, #0
 8015880:	f04f 0b00 	mov.w	fp, #0
 8015884:	460a      	mov	r2, r1
 8015886:	9211      	str	r2, [sp, #68]	@ 0x44
 8015888:	7811      	ldrb	r1, [r2, #0]
 801588a:	292b      	cmp	r1, #43	@ 0x2b
 801588c:	d04c      	beq.n	8015928 <_strtod_l+0xc0>
 801588e:	d839      	bhi.n	8015904 <_strtod_l+0x9c>
 8015890:	290d      	cmp	r1, #13
 8015892:	d833      	bhi.n	80158fc <_strtod_l+0x94>
 8015894:	2908      	cmp	r1, #8
 8015896:	d833      	bhi.n	8015900 <_strtod_l+0x98>
 8015898:	2900      	cmp	r1, #0
 801589a:	d03c      	beq.n	8015916 <_strtod_l+0xae>
 801589c:	2200      	movs	r2, #0
 801589e:	9208      	str	r2, [sp, #32]
 80158a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80158a2:	782a      	ldrb	r2, [r5, #0]
 80158a4:	2a30      	cmp	r2, #48	@ 0x30
 80158a6:	f040 80b7 	bne.w	8015a18 <_strtod_l+0x1b0>
 80158aa:	786a      	ldrb	r2, [r5, #1]
 80158ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80158b0:	2a58      	cmp	r2, #88	@ 0x58
 80158b2:	d170      	bne.n	8015996 <_strtod_l+0x12e>
 80158b4:	9302      	str	r3, [sp, #8]
 80158b6:	9b08      	ldr	r3, [sp, #32]
 80158b8:	9301      	str	r3, [sp, #4]
 80158ba:	ab12      	add	r3, sp, #72	@ 0x48
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	4a90      	ldr	r2, [pc, #576]	@ (8015b00 <_strtod_l+0x298>)
 80158c0:	9805      	ldr	r0, [sp, #20]
 80158c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80158c4:	a911      	add	r1, sp, #68	@ 0x44
 80158c6:	f001 f9f5 	bl	8016cb4 <__gethex>
 80158ca:	f010 060f 	ands.w	r6, r0, #15
 80158ce:	4604      	mov	r4, r0
 80158d0:	d005      	beq.n	80158de <_strtod_l+0x76>
 80158d2:	2e06      	cmp	r6, #6
 80158d4:	d12a      	bne.n	801592c <_strtod_l+0xc4>
 80158d6:	3501      	adds	r5, #1
 80158d8:	2300      	movs	r3, #0
 80158da:	9511      	str	r5, [sp, #68]	@ 0x44
 80158dc:	9308      	str	r3, [sp, #32]
 80158de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	f040 8537 	bne.w	8016354 <_strtod_l+0xaec>
 80158e6:	9b08      	ldr	r3, [sp, #32]
 80158e8:	ec4b ab10 	vmov	d0, sl, fp
 80158ec:	b1cb      	cbz	r3, 8015922 <_strtod_l+0xba>
 80158ee:	eeb1 0b40 	vneg.f64	d0, d0
 80158f2:	b017      	add	sp, #92	@ 0x5c
 80158f4:	ecbd 8b0a 	vpop	{d8-d12}
 80158f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fc:	2920      	cmp	r1, #32
 80158fe:	d1cd      	bne.n	801589c <_strtod_l+0x34>
 8015900:	3201      	adds	r2, #1
 8015902:	e7c0      	b.n	8015886 <_strtod_l+0x1e>
 8015904:	292d      	cmp	r1, #45	@ 0x2d
 8015906:	d1c9      	bne.n	801589c <_strtod_l+0x34>
 8015908:	2101      	movs	r1, #1
 801590a:	9108      	str	r1, [sp, #32]
 801590c:	1c51      	adds	r1, r2, #1
 801590e:	9111      	str	r1, [sp, #68]	@ 0x44
 8015910:	7852      	ldrb	r2, [r2, #1]
 8015912:	2a00      	cmp	r2, #0
 8015914:	d1c4      	bne.n	80158a0 <_strtod_l+0x38>
 8015916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015918:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801591c:	2b00      	cmp	r3, #0
 801591e:	f040 8517 	bne.w	8016350 <_strtod_l+0xae8>
 8015922:	ec4b ab10 	vmov	d0, sl, fp
 8015926:	e7e4      	b.n	80158f2 <_strtod_l+0x8a>
 8015928:	2100      	movs	r1, #0
 801592a:	e7ee      	b.n	801590a <_strtod_l+0xa2>
 801592c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801592e:	b13a      	cbz	r2, 8015940 <_strtod_l+0xd8>
 8015930:	2135      	movs	r1, #53	@ 0x35
 8015932:	a814      	add	r0, sp, #80	@ 0x50
 8015934:	f7ff ff39 	bl	80157aa <__copybits>
 8015938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801593a:	9805      	ldr	r0, [sp, #20]
 801593c:	f7ff fb12 	bl	8014f64 <_Bfree>
 8015940:	1e73      	subs	r3, r6, #1
 8015942:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015944:	2b04      	cmp	r3, #4
 8015946:	d806      	bhi.n	8015956 <_strtod_l+0xee>
 8015948:	e8df f003 	tbb	[pc, r3]
 801594c:	201d0314 	.word	0x201d0314
 8015950:	14          	.byte	0x14
 8015951:	00          	.byte	0x00
 8015952:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015956:	05e3      	lsls	r3, r4, #23
 8015958:	bf48      	it	mi
 801595a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801595e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015962:	0d1b      	lsrs	r3, r3, #20
 8015964:	051b      	lsls	r3, r3, #20
 8015966:	2b00      	cmp	r3, #0
 8015968:	d1b9      	bne.n	80158de <_strtod_l+0x76>
 801596a:	f7fe fb75 	bl	8014058 <__errno>
 801596e:	2322      	movs	r3, #34	@ 0x22
 8015970:	6003      	str	r3, [r0, #0]
 8015972:	e7b4      	b.n	80158de <_strtod_l+0x76>
 8015974:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801597c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015984:	e7e7      	b.n	8015956 <_strtod_l+0xee>
 8015986:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015b08 <_strtod_l+0x2a0>
 801598a:	e7e4      	b.n	8015956 <_strtod_l+0xee>
 801598c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015990:	f04f 3aff 	mov.w	sl, #4294967295
 8015994:	e7df      	b.n	8015956 <_strtod_l+0xee>
 8015996:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015998:	1c5a      	adds	r2, r3, #1
 801599a:	9211      	str	r2, [sp, #68]	@ 0x44
 801599c:	785b      	ldrb	r3, [r3, #1]
 801599e:	2b30      	cmp	r3, #48	@ 0x30
 80159a0:	d0f9      	beq.n	8015996 <_strtod_l+0x12e>
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d09b      	beq.n	80158de <_strtod_l+0x76>
 80159a6:	2301      	movs	r3, #1
 80159a8:	9307      	str	r3, [sp, #28]
 80159aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80159ae:	2300      	movs	r3, #0
 80159b0:	9306      	str	r3, [sp, #24]
 80159b2:	4699      	mov	r9, r3
 80159b4:	461d      	mov	r5, r3
 80159b6:	220a      	movs	r2, #10
 80159b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80159ba:	7804      	ldrb	r4, [r0, #0]
 80159bc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80159c0:	b2d9      	uxtb	r1, r3
 80159c2:	2909      	cmp	r1, #9
 80159c4:	d92a      	bls.n	8015a1c <_strtod_l+0x1b4>
 80159c6:	494f      	ldr	r1, [pc, #316]	@ (8015b04 <_strtod_l+0x29c>)
 80159c8:	2201      	movs	r2, #1
 80159ca:	f7fe fae8 	bl	8013f9e <strncmp>
 80159ce:	b398      	cbz	r0, 8015a38 <_strtod_l+0x1d0>
 80159d0:	2000      	movs	r0, #0
 80159d2:	4622      	mov	r2, r4
 80159d4:	462b      	mov	r3, r5
 80159d6:	4607      	mov	r7, r0
 80159d8:	4601      	mov	r1, r0
 80159da:	2a65      	cmp	r2, #101	@ 0x65
 80159dc:	d001      	beq.n	80159e2 <_strtod_l+0x17a>
 80159de:	2a45      	cmp	r2, #69	@ 0x45
 80159e0:	d118      	bne.n	8015a14 <_strtod_l+0x1ac>
 80159e2:	b91b      	cbnz	r3, 80159ec <_strtod_l+0x184>
 80159e4:	9b07      	ldr	r3, [sp, #28]
 80159e6:	4303      	orrs	r3, r0
 80159e8:	d095      	beq.n	8015916 <_strtod_l+0xae>
 80159ea:	2300      	movs	r3, #0
 80159ec:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80159f0:	f108 0201 	add.w	r2, r8, #1
 80159f4:	9211      	str	r2, [sp, #68]	@ 0x44
 80159f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80159fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80159fc:	d074      	beq.n	8015ae8 <_strtod_l+0x280>
 80159fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8015a00:	d07a      	beq.n	8015af8 <_strtod_l+0x290>
 8015a02:	f04f 0e00 	mov.w	lr, #0
 8015a06:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015a0a:	2c09      	cmp	r4, #9
 8015a0c:	f240 8082 	bls.w	8015b14 <_strtod_l+0x2ac>
 8015a10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015a14:	2400      	movs	r4, #0
 8015a16:	e09d      	b.n	8015b54 <_strtod_l+0x2ec>
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e7c5      	b.n	80159a8 <_strtod_l+0x140>
 8015a1c:	2d08      	cmp	r5, #8
 8015a1e:	bfc8      	it	gt
 8015a20:	9906      	ldrgt	r1, [sp, #24]
 8015a22:	f100 0001 	add.w	r0, r0, #1
 8015a26:	bfca      	itet	gt
 8015a28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015a2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015a30:	9306      	strgt	r3, [sp, #24]
 8015a32:	3501      	adds	r5, #1
 8015a34:	9011      	str	r0, [sp, #68]	@ 0x44
 8015a36:	e7bf      	b.n	80159b8 <_strtod_l+0x150>
 8015a38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a3a:	1c5a      	adds	r2, r3, #1
 8015a3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a3e:	785a      	ldrb	r2, [r3, #1]
 8015a40:	b3bd      	cbz	r5, 8015ab2 <_strtod_l+0x24a>
 8015a42:	4607      	mov	r7, r0
 8015a44:	462b      	mov	r3, r5
 8015a46:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015a4a:	2909      	cmp	r1, #9
 8015a4c:	d912      	bls.n	8015a74 <_strtod_l+0x20c>
 8015a4e:	2101      	movs	r1, #1
 8015a50:	e7c3      	b.n	80159da <_strtod_l+0x172>
 8015a52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a54:	1c5a      	adds	r2, r3, #1
 8015a56:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a58:	785a      	ldrb	r2, [r3, #1]
 8015a5a:	3001      	adds	r0, #1
 8015a5c:	2a30      	cmp	r2, #48	@ 0x30
 8015a5e:	d0f8      	beq.n	8015a52 <_strtod_l+0x1ea>
 8015a60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015a64:	2b08      	cmp	r3, #8
 8015a66:	f200 847a 	bhi.w	801635e <_strtod_l+0xaf6>
 8015a6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a6e:	4607      	mov	r7, r0
 8015a70:	2000      	movs	r0, #0
 8015a72:	4603      	mov	r3, r0
 8015a74:	3a30      	subs	r2, #48	@ 0x30
 8015a76:	f100 0101 	add.w	r1, r0, #1
 8015a7a:	d014      	beq.n	8015aa6 <_strtod_l+0x23e>
 8015a7c:	440f      	add	r7, r1
 8015a7e:	469c      	mov	ip, r3
 8015a80:	f04f 0e0a 	mov.w	lr, #10
 8015a84:	f10c 0401 	add.w	r4, ip, #1
 8015a88:	1ae6      	subs	r6, r4, r3
 8015a8a:	42b1      	cmp	r1, r6
 8015a8c:	dc13      	bgt.n	8015ab6 <_strtod_l+0x24e>
 8015a8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8015a92:	1819      	adds	r1, r3, r0
 8015a94:	2908      	cmp	r1, #8
 8015a96:	f103 0301 	add.w	r3, r3, #1
 8015a9a:	4403      	add	r3, r0
 8015a9c:	dc19      	bgt.n	8015ad2 <_strtod_l+0x26a>
 8015a9e:	210a      	movs	r1, #10
 8015aa0:	fb01 2909 	mla	r9, r1, r9, r2
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015aa8:	1c50      	adds	r0, r2, #1
 8015aaa:	9011      	str	r0, [sp, #68]	@ 0x44
 8015aac:	7852      	ldrb	r2, [r2, #1]
 8015aae:	4608      	mov	r0, r1
 8015ab0:	e7c9      	b.n	8015a46 <_strtod_l+0x1de>
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	e7d2      	b.n	8015a5c <_strtod_l+0x1f4>
 8015ab6:	f1bc 0f08 	cmp.w	ip, #8
 8015aba:	dc03      	bgt.n	8015ac4 <_strtod_l+0x25c>
 8015abc:	fb0e f909 	mul.w	r9, lr, r9
 8015ac0:	46a4      	mov	ip, r4
 8015ac2:	e7df      	b.n	8015a84 <_strtod_l+0x21c>
 8015ac4:	2c10      	cmp	r4, #16
 8015ac6:	bfde      	ittt	le
 8015ac8:	9e06      	ldrle	r6, [sp, #24]
 8015aca:	fb0e f606 	mulle.w	r6, lr, r6
 8015ace:	9606      	strle	r6, [sp, #24]
 8015ad0:	e7f6      	b.n	8015ac0 <_strtod_l+0x258>
 8015ad2:	290f      	cmp	r1, #15
 8015ad4:	bfdf      	itttt	le
 8015ad6:	9806      	ldrle	r0, [sp, #24]
 8015ad8:	210a      	movle	r1, #10
 8015ada:	fb01 2200 	mlale	r2, r1, r0, r2
 8015ade:	9206      	strle	r2, [sp, #24]
 8015ae0:	e7e0      	b.n	8015aa4 <_strtod_l+0x23c>
 8015ae2:	2700      	movs	r7, #0
 8015ae4:	2101      	movs	r1, #1
 8015ae6:	e77d      	b.n	80159e4 <_strtod_l+0x17c>
 8015ae8:	f04f 0e00 	mov.w	lr, #0
 8015aec:	f108 0202 	add.w	r2, r8, #2
 8015af0:	9211      	str	r2, [sp, #68]	@ 0x44
 8015af2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015af6:	e786      	b.n	8015a06 <_strtod_l+0x19e>
 8015af8:	f04f 0e01 	mov.w	lr, #1
 8015afc:	e7f6      	b.n	8015aec <_strtod_l+0x284>
 8015afe:	bf00      	nop
 8015b00:	0801b06c 	.word	0x0801b06c
 8015b04:	0801add9 	.word	0x0801add9
 8015b08:	7ff00000 	.word	0x7ff00000
 8015b0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b0e:	1c54      	adds	r4, r2, #1
 8015b10:	9411      	str	r4, [sp, #68]	@ 0x44
 8015b12:	7852      	ldrb	r2, [r2, #1]
 8015b14:	2a30      	cmp	r2, #48	@ 0x30
 8015b16:	d0f9      	beq.n	8015b0c <_strtod_l+0x2a4>
 8015b18:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015b1c:	2c08      	cmp	r4, #8
 8015b1e:	f63f af79 	bhi.w	8015a14 <_strtod_l+0x1ac>
 8015b22:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015b26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b2c:	1c54      	adds	r4, r2, #1
 8015b2e:	9411      	str	r4, [sp, #68]	@ 0x44
 8015b30:	7852      	ldrb	r2, [r2, #1]
 8015b32:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8015b36:	2e09      	cmp	r6, #9
 8015b38:	d937      	bls.n	8015baa <_strtod_l+0x342>
 8015b3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8015b3c:	1ba4      	subs	r4, r4, r6
 8015b3e:	2c08      	cmp	r4, #8
 8015b40:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015b44:	dc02      	bgt.n	8015b4c <_strtod_l+0x2e4>
 8015b46:	4564      	cmp	r4, ip
 8015b48:	bfa8      	it	ge
 8015b4a:	4664      	movge	r4, ip
 8015b4c:	f1be 0f00 	cmp.w	lr, #0
 8015b50:	d000      	beq.n	8015b54 <_strtod_l+0x2ec>
 8015b52:	4264      	negs	r4, r4
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d14d      	bne.n	8015bf4 <_strtod_l+0x38c>
 8015b58:	9b07      	ldr	r3, [sp, #28]
 8015b5a:	4318      	orrs	r0, r3
 8015b5c:	f47f aebf 	bne.w	80158de <_strtod_l+0x76>
 8015b60:	2900      	cmp	r1, #0
 8015b62:	f47f aed8 	bne.w	8015916 <_strtod_l+0xae>
 8015b66:	2a69      	cmp	r2, #105	@ 0x69
 8015b68:	d027      	beq.n	8015bba <_strtod_l+0x352>
 8015b6a:	dc24      	bgt.n	8015bb6 <_strtod_l+0x34e>
 8015b6c:	2a49      	cmp	r2, #73	@ 0x49
 8015b6e:	d024      	beq.n	8015bba <_strtod_l+0x352>
 8015b70:	2a4e      	cmp	r2, #78	@ 0x4e
 8015b72:	f47f aed0 	bne.w	8015916 <_strtod_l+0xae>
 8015b76:	4997      	ldr	r1, [pc, #604]	@ (8015dd4 <_strtod_l+0x56c>)
 8015b78:	a811      	add	r0, sp, #68	@ 0x44
 8015b7a:	f001 fabd 	bl	80170f8 <__match>
 8015b7e:	2800      	cmp	r0, #0
 8015b80:	f43f aec9 	beq.w	8015916 <_strtod_l+0xae>
 8015b84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	2b28      	cmp	r3, #40	@ 0x28
 8015b8a:	d12d      	bne.n	8015be8 <_strtod_l+0x380>
 8015b8c:	4992      	ldr	r1, [pc, #584]	@ (8015dd8 <_strtod_l+0x570>)
 8015b8e:	aa14      	add	r2, sp, #80	@ 0x50
 8015b90:	a811      	add	r0, sp, #68	@ 0x44
 8015b92:	f001 fac5 	bl	8017120 <__hexnan>
 8015b96:	2805      	cmp	r0, #5
 8015b98:	d126      	bne.n	8015be8 <_strtod_l+0x380>
 8015b9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015b9c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015ba0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015ba4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015ba8:	e699      	b.n	80158de <_strtod_l+0x76>
 8015baa:	240a      	movs	r4, #10
 8015bac:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015bb0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015bb4:	e7b9      	b.n	8015b2a <_strtod_l+0x2c2>
 8015bb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8015bb8:	e7db      	b.n	8015b72 <_strtod_l+0x30a>
 8015bba:	4988      	ldr	r1, [pc, #544]	@ (8015ddc <_strtod_l+0x574>)
 8015bbc:	a811      	add	r0, sp, #68	@ 0x44
 8015bbe:	f001 fa9b 	bl	80170f8 <__match>
 8015bc2:	2800      	cmp	r0, #0
 8015bc4:	f43f aea7 	beq.w	8015916 <_strtod_l+0xae>
 8015bc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bca:	4985      	ldr	r1, [pc, #532]	@ (8015de0 <_strtod_l+0x578>)
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	a811      	add	r0, sp, #68	@ 0x44
 8015bd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bd2:	f001 fa91 	bl	80170f8 <__match>
 8015bd6:	b910      	cbnz	r0, 8015bde <_strtod_l+0x376>
 8015bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bda:	3301      	adds	r3, #1
 8015bdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bde:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015df4 <_strtod_l+0x58c>
 8015be2:	f04f 0a00 	mov.w	sl, #0
 8015be6:	e67a      	b.n	80158de <_strtod_l+0x76>
 8015be8:	487e      	ldr	r0, [pc, #504]	@ (8015de4 <_strtod_l+0x57c>)
 8015bea:	f000 ffd9 	bl	8016ba0 <nan>
 8015bee:	ec5b ab10 	vmov	sl, fp, d0
 8015bf2:	e674      	b.n	80158de <_strtod_l+0x76>
 8015bf4:	ee07 9a90 	vmov	s15, r9
 8015bf8:	1be2      	subs	r2, r4, r7
 8015bfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015bfe:	2d00      	cmp	r5, #0
 8015c00:	bf08      	it	eq
 8015c02:	461d      	moveq	r5, r3
 8015c04:	2b10      	cmp	r3, #16
 8015c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c08:	461a      	mov	r2, r3
 8015c0a:	bfa8      	it	ge
 8015c0c:	2210      	movge	r2, #16
 8015c0e:	2b09      	cmp	r3, #9
 8015c10:	ec5b ab17 	vmov	sl, fp, d7
 8015c14:	dc15      	bgt.n	8015c42 <_strtod_l+0x3da>
 8015c16:	1be1      	subs	r1, r4, r7
 8015c18:	2900      	cmp	r1, #0
 8015c1a:	f43f ae60 	beq.w	80158de <_strtod_l+0x76>
 8015c1e:	eba4 0107 	sub.w	r1, r4, r7
 8015c22:	dd72      	ble.n	8015d0a <_strtod_l+0x4a2>
 8015c24:	2916      	cmp	r1, #22
 8015c26:	dc59      	bgt.n	8015cdc <_strtod_l+0x474>
 8015c28:	4b6f      	ldr	r3, [pc, #444]	@ (8015de8 <_strtod_l+0x580>)
 8015c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c30:	ed93 7b00 	vldr	d7, [r3]
 8015c34:	ec4b ab16 	vmov	d6, sl, fp
 8015c38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c3c:	ec5b ab17 	vmov	sl, fp, d7
 8015c40:	e64d      	b.n	80158de <_strtod_l+0x76>
 8015c42:	4969      	ldr	r1, [pc, #420]	@ (8015de8 <_strtod_l+0x580>)
 8015c44:	eddd 6a06 	vldr	s13, [sp, #24]
 8015c48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015c4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015c50:	2b0f      	cmp	r3, #15
 8015c52:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015c56:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c5a:	ec5b ab16 	vmov	sl, fp, d6
 8015c5e:	ddda      	ble.n	8015c16 <_strtod_l+0x3ae>
 8015c60:	1a9a      	subs	r2, r3, r2
 8015c62:	1be1      	subs	r1, r4, r7
 8015c64:	440a      	add	r2, r1
 8015c66:	2a00      	cmp	r2, #0
 8015c68:	f340 8094 	ble.w	8015d94 <_strtod_l+0x52c>
 8015c6c:	f012 000f 	ands.w	r0, r2, #15
 8015c70:	d00a      	beq.n	8015c88 <_strtod_l+0x420>
 8015c72:	495d      	ldr	r1, [pc, #372]	@ (8015de8 <_strtod_l+0x580>)
 8015c74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015c78:	ed91 7b00 	vldr	d7, [r1]
 8015c7c:	ec4b ab16 	vmov	d6, sl, fp
 8015c80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c84:	ec5b ab17 	vmov	sl, fp, d7
 8015c88:	f032 020f 	bics.w	r2, r2, #15
 8015c8c:	d073      	beq.n	8015d76 <_strtod_l+0x50e>
 8015c8e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015c92:	dd47      	ble.n	8015d24 <_strtod_l+0x4bc>
 8015c94:	2400      	movs	r4, #0
 8015c96:	4625      	mov	r5, r4
 8015c98:	9407      	str	r4, [sp, #28]
 8015c9a:	4626      	mov	r6, r4
 8015c9c:	9a05      	ldr	r2, [sp, #20]
 8015c9e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015df4 <_strtod_l+0x58c>
 8015ca2:	2322      	movs	r3, #34	@ 0x22
 8015ca4:	6013      	str	r3, [r2, #0]
 8015ca6:	f04f 0a00 	mov.w	sl, #0
 8015caa:	9b07      	ldr	r3, [sp, #28]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f43f ae16 	beq.w	80158de <_strtod_l+0x76>
 8015cb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015cb4:	9805      	ldr	r0, [sp, #20]
 8015cb6:	f7ff f955 	bl	8014f64 <_Bfree>
 8015cba:	9805      	ldr	r0, [sp, #20]
 8015cbc:	4631      	mov	r1, r6
 8015cbe:	f7ff f951 	bl	8014f64 <_Bfree>
 8015cc2:	9805      	ldr	r0, [sp, #20]
 8015cc4:	4629      	mov	r1, r5
 8015cc6:	f7ff f94d 	bl	8014f64 <_Bfree>
 8015cca:	9907      	ldr	r1, [sp, #28]
 8015ccc:	9805      	ldr	r0, [sp, #20]
 8015cce:	f7ff f949 	bl	8014f64 <_Bfree>
 8015cd2:	9805      	ldr	r0, [sp, #20]
 8015cd4:	4621      	mov	r1, r4
 8015cd6:	f7ff f945 	bl	8014f64 <_Bfree>
 8015cda:	e600      	b.n	80158de <_strtod_l+0x76>
 8015cdc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015ce0:	1be0      	subs	r0, r4, r7
 8015ce2:	4281      	cmp	r1, r0
 8015ce4:	dbbc      	blt.n	8015c60 <_strtod_l+0x3f8>
 8015ce6:	4a40      	ldr	r2, [pc, #256]	@ (8015de8 <_strtod_l+0x580>)
 8015ce8:	f1c3 030f 	rsb	r3, r3, #15
 8015cec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015cf0:	ed91 7b00 	vldr	d7, [r1]
 8015cf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015cf6:	ec4b ab16 	vmov	d6, sl, fp
 8015cfa:	1acb      	subs	r3, r1, r3
 8015cfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015d00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d04:	ed92 6b00 	vldr	d6, [r2]
 8015d08:	e796      	b.n	8015c38 <_strtod_l+0x3d0>
 8015d0a:	3116      	adds	r1, #22
 8015d0c:	dba8      	blt.n	8015c60 <_strtod_l+0x3f8>
 8015d0e:	4b36      	ldr	r3, [pc, #216]	@ (8015de8 <_strtod_l+0x580>)
 8015d10:	1b3c      	subs	r4, r7, r4
 8015d12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015d16:	ed94 7b00 	vldr	d7, [r4]
 8015d1a:	ec4b ab16 	vmov	d6, sl, fp
 8015d1e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d22:	e78b      	b.n	8015c3c <_strtod_l+0x3d4>
 8015d24:	2000      	movs	r0, #0
 8015d26:	ec4b ab17 	vmov	d7, sl, fp
 8015d2a:	4e30      	ldr	r6, [pc, #192]	@ (8015dec <_strtod_l+0x584>)
 8015d2c:	1112      	asrs	r2, r2, #4
 8015d2e:	4601      	mov	r1, r0
 8015d30:	2a01      	cmp	r2, #1
 8015d32:	dc23      	bgt.n	8015d7c <_strtod_l+0x514>
 8015d34:	b108      	cbz	r0, 8015d3a <_strtod_l+0x4d2>
 8015d36:	ec5b ab17 	vmov	sl, fp, d7
 8015d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8015dec <_strtod_l+0x584>)
 8015d3c:	482c      	ldr	r0, [pc, #176]	@ (8015df0 <_strtod_l+0x588>)
 8015d3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015d42:	ed92 7b00 	vldr	d7, [r2]
 8015d46:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015d4a:	ec4b ab16 	vmov	d6, sl, fp
 8015d4e:	4a29      	ldr	r2, [pc, #164]	@ (8015df4 <_strtod_l+0x58c>)
 8015d50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d54:	ee17 1a90 	vmov	r1, s15
 8015d58:	400a      	ands	r2, r1
 8015d5a:	4282      	cmp	r2, r0
 8015d5c:	ec5b ab17 	vmov	sl, fp, d7
 8015d60:	d898      	bhi.n	8015c94 <_strtod_l+0x42c>
 8015d62:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015d66:	4282      	cmp	r2, r0
 8015d68:	bf86      	itte	hi
 8015d6a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015df8 <_strtod_l+0x590>
 8015d6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015d72:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015d76:	2200      	movs	r2, #0
 8015d78:	9206      	str	r2, [sp, #24]
 8015d7a:	e076      	b.n	8015e6a <_strtod_l+0x602>
 8015d7c:	f012 0f01 	tst.w	r2, #1
 8015d80:	d004      	beq.n	8015d8c <_strtod_l+0x524>
 8015d82:	ed96 6b00 	vldr	d6, [r6]
 8015d86:	2001      	movs	r0, #1
 8015d88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d8c:	3101      	adds	r1, #1
 8015d8e:	1052      	asrs	r2, r2, #1
 8015d90:	3608      	adds	r6, #8
 8015d92:	e7cd      	b.n	8015d30 <_strtod_l+0x4c8>
 8015d94:	d0ef      	beq.n	8015d76 <_strtod_l+0x50e>
 8015d96:	4252      	negs	r2, r2
 8015d98:	f012 000f 	ands.w	r0, r2, #15
 8015d9c:	d00a      	beq.n	8015db4 <_strtod_l+0x54c>
 8015d9e:	4912      	ldr	r1, [pc, #72]	@ (8015de8 <_strtod_l+0x580>)
 8015da0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015da4:	ed91 7b00 	vldr	d7, [r1]
 8015da8:	ec4b ab16 	vmov	d6, sl, fp
 8015dac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015db0:	ec5b ab17 	vmov	sl, fp, d7
 8015db4:	1112      	asrs	r2, r2, #4
 8015db6:	d0de      	beq.n	8015d76 <_strtod_l+0x50e>
 8015db8:	2a1f      	cmp	r2, #31
 8015dba:	dd1f      	ble.n	8015dfc <_strtod_l+0x594>
 8015dbc:	2400      	movs	r4, #0
 8015dbe:	4625      	mov	r5, r4
 8015dc0:	9407      	str	r4, [sp, #28]
 8015dc2:	4626      	mov	r6, r4
 8015dc4:	9a05      	ldr	r2, [sp, #20]
 8015dc6:	2322      	movs	r3, #34	@ 0x22
 8015dc8:	f04f 0a00 	mov.w	sl, #0
 8015dcc:	f04f 0b00 	mov.w	fp, #0
 8015dd0:	6013      	str	r3, [r2, #0]
 8015dd2:	e76a      	b.n	8015caa <_strtod_l+0x442>
 8015dd4:	0801aca2 	.word	0x0801aca2
 8015dd8:	0801b058 	.word	0x0801b058
 8015ddc:	0801ac9a 	.word	0x0801ac9a
 8015de0:	0801ad0d 	.word	0x0801ad0d
 8015de4:	0801ad09 	.word	0x0801ad09
 8015de8:	0801af90 	.word	0x0801af90
 8015dec:	0801af68 	.word	0x0801af68
 8015df0:	7ca00000 	.word	0x7ca00000
 8015df4:	7ff00000 	.word	0x7ff00000
 8015df8:	7fefffff 	.word	0x7fefffff
 8015dfc:	f012 0110 	ands.w	r1, r2, #16
 8015e00:	bf18      	it	ne
 8015e02:	216a      	movne	r1, #106	@ 0x6a
 8015e04:	9106      	str	r1, [sp, #24]
 8015e06:	ec4b ab17 	vmov	d7, sl, fp
 8015e0a:	49af      	ldr	r1, [pc, #700]	@ (80160c8 <_strtod_l+0x860>)
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	07d6      	lsls	r6, r2, #31
 8015e10:	d504      	bpl.n	8015e1c <_strtod_l+0x5b4>
 8015e12:	ed91 6b00 	vldr	d6, [r1]
 8015e16:	2001      	movs	r0, #1
 8015e18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e1c:	1052      	asrs	r2, r2, #1
 8015e1e:	f101 0108 	add.w	r1, r1, #8
 8015e22:	d1f4      	bne.n	8015e0e <_strtod_l+0x5a6>
 8015e24:	b108      	cbz	r0, 8015e2a <_strtod_l+0x5c2>
 8015e26:	ec5b ab17 	vmov	sl, fp, d7
 8015e2a:	9a06      	ldr	r2, [sp, #24]
 8015e2c:	b1b2      	cbz	r2, 8015e5c <_strtod_l+0x5f4>
 8015e2e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015e32:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015e36:	2a00      	cmp	r2, #0
 8015e38:	4658      	mov	r0, fp
 8015e3a:	dd0f      	ble.n	8015e5c <_strtod_l+0x5f4>
 8015e3c:	2a1f      	cmp	r2, #31
 8015e3e:	dd55      	ble.n	8015eec <_strtod_l+0x684>
 8015e40:	2a34      	cmp	r2, #52	@ 0x34
 8015e42:	bfde      	ittt	le
 8015e44:	f04f 32ff 	movle.w	r2, #4294967295
 8015e48:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015e4c:	408a      	lslle	r2, r1
 8015e4e:	f04f 0a00 	mov.w	sl, #0
 8015e52:	bfcc      	ite	gt
 8015e54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015e58:	ea02 0b00 	andle.w	fp, r2, r0
 8015e5c:	ec4b ab17 	vmov	d7, sl, fp
 8015e60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e68:	d0a8      	beq.n	8015dbc <_strtod_l+0x554>
 8015e6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015e6c:	9805      	ldr	r0, [sp, #20]
 8015e6e:	f8cd 9000 	str.w	r9, [sp]
 8015e72:	462a      	mov	r2, r5
 8015e74:	f7ff f8de 	bl	8015034 <__s2b>
 8015e78:	9007      	str	r0, [sp, #28]
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	f43f af0a 	beq.w	8015c94 <_strtod_l+0x42c>
 8015e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e82:	1b3f      	subs	r7, r7, r4
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	bfb4      	ite	lt
 8015e88:	463b      	movlt	r3, r7
 8015e8a:	2300      	movge	r3, #0
 8015e8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e90:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80160b8 <_strtod_l+0x850>
 8015e94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e98:	2400      	movs	r4, #0
 8015e9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015e9c:	4625      	mov	r5, r4
 8015e9e:	9b07      	ldr	r3, [sp, #28]
 8015ea0:	9805      	ldr	r0, [sp, #20]
 8015ea2:	6859      	ldr	r1, [r3, #4]
 8015ea4:	f7ff f81e 	bl	8014ee4 <_Balloc>
 8015ea8:	4606      	mov	r6, r0
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	f43f aef6 	beq.w	8015c9c <_strtod_l+0x434>
 8015eb0:	9b07      	ldr	r3, [sp, #28]
 8015eb2:	691a      	ldr	r2, [r3, #16]
 8015eb4:	ec4b ab19 	vmov	d9, sl, fp
 8015eb8:	3202      	adds	r2, #2
 8015eba:	f103 010c 	add.w	r1, r3, #12
 8015ebe:	0092      	lsls	r2, r2, #2
 8015ec0:	300c      	adds	r0, #12
 8015ec2:	f7fe f8f6 	bl	80140b2 <memcpy>
 8015ec6:	eeb0 0b49 	vmov.f64	d0, d9
 8015eca:	9805      	ldr	r0, [sp, #20]
 8015ecc:	aa14      	add	r2, sp, #80	@ 0x50
 8015ece:	a913      	add	r1, sp, #76	@ 0x4c
 8015ed0:	f7ff fbe4 	bl	801569c <__d2b>
 8015ed4:	9012      	str	r0, [sp, #72]	@ 0x48
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f43f aee0 	beq.w	8015c9c <_strtod_l+0x434>
 8015edc:	9805      	ldr	r0, [sp, #20]
 8015ede:	2101      	movs	r1, #1
 8015ee0:	f7ff f93e 	bl	8015160 <__i2b>
 8015ee4:	4605      	mov	r5, r0
 8015ee6:	b940      	cbnz	r0, 8015efa <_strtod_l+0x692>
 8015ee8:	2500      	movs	r5, #0
 8015eea:	e6d7      	b.n	8015c9c <_strtod_l+0x434>
 8015eec:	f04f 31ff 	mov.w	r1, #4294967295
 8015ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8015ef4:	ea02 0a0a 	and.w	sl, r2, sl
 8015ef8:	e7b0      	b.n	8015e5c <_strtod_l+0x5f4>
 8015efa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015efc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015efe:	2f00      	cmp	r7, #0
 8015f00:	bfab      	itete	ge
 8015f02:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015f04:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015f06:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015f0a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015f0e:	bfac      	ite	ge
 8015f10:	eb07 0903 	addge.w	r9, r7, r3
 8015f14:	eba3 0807 	sublt.w	r8, r3, r7
 8015f18:	9b06      	ldr	r3, [sp, #24]
 8015f1a:	1aff      	subs	r7, r7, r3
 8015f1c:	4417      	add	r7, r2
 8015f1e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015f22:	4a6a      	ldr	r2, [pc, #424]	@ (80160cc <_strtod_l+0x864>)
 8015f24:	3f01      	subs	r7, #1
 8015f26:	4297      	cmp	r7, r2
 8015f28:	da51      	bge.n	8015fce <_strtod_l+0x766>
 8015f2a:	1bd1      	subs	r1, r2, r7
 8015f2c:	291f      	cmp	r1, #31
 8015f2e:	eba3 0301 	sub.w	r3, r3, r1
 8015f32:	f04f 0201 	mov.w	r2, #1
 8015f36:	dc3e      	bgt.n	8015fb6 <_strtod_l+0x74e>
 8015f38:	408a      	lsls	r2, r1
 8015f3a:	920c      	str	r2, [sp, #48]	@ 0x30
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015f40:	eb09 0703 	add.w	r7, r9, r3
 8015f44:	4498      	add	r8, r3
 8015f46:	9b06      	ldr	r3, [sp, #24]
 8015f48:	45b9      	cmp	r9, r7
 8015f4a:	4498      	add	r8, r3
 8015f4c:	464b      	mov	r3, r9
 8015f4e:	bfa8      	it	ge
 8015f50:	463b      	movge	r3, r7
 8015f52:	4543      	cmp	r3, r8
 8015f54:	bfa8      	it	ge
 8015f56:	4643      	movge	r3, r8
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	bfc2      	ittt	gt
 8015f5c:	1aff      	subgt	r7, r7, r3
 8015f5e:	eba8 0803 	subgt.w	r8, r8, r3
 8015f62:	eba9 0903 	subgt.w	r9, r9, r3
 8015f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	dd16      	ble.n	8015f9a <_strtod_l+0x732>
 8015f6c:	4629      	mov	r1, r5
 8015f6e:	9805      	ldr	r0, [sp, #20]
 8015f70:	461a      	mov	r2, r3
 8015f72:	f7ff f9ad 	bl	80152d0 <__pow5mult>
 8015f76:	4605      	mov	r5, r0
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d0b5      	beq.n	8015ee8 <_strtod_l+0x680>
 8015f7c:	4601      	mov	r1, r0
 8015f7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015f80:	9805      	ldr	r0, [sp, #20]
 8015f82:	f7ff f903 	bl	801518c <__multiply>
 8015f86:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	f43f ae87 	beq.w	8015c9c <_strtod_l+0x434>
 8015f8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f90:	9805      	ldr	r0, [sp, #20]
 8015f92:	f7fe ffe7 	bl	8014f64 <_Bfree>
 8015f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f98:	9312      	str	r3, [sp, #72]	@ 0x48
 8015f9a:	2f00      	cmp	r7, #0
 8015f9c:	dc1b      	bgt.n	8015fd6 <_strtod_l+0x76e>
 8015f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	dd21      	ble.n	8015fe8 <_strtod_l+0x780>
 8015fa4:	4631      	mov	r1, r6
 8015fa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015fa8:	9805      	ldr	r0, [sp, #20]
 8015faa:	f7ff f991 	bl	80152d0 <__pow5mult>
 8015fae:	4606      	mov	r6, r0
 8015fb0:	b9d0      	cbnz	r0, 8015fe8 <_strtod_l+0x780>
 8015fb2:	2600      	movs	r6, #0
 8015fb4:	e672      	b.n	8015c9c <_strtod_l+0x434>
 8015fb6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015fba:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015fbe:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8015fc2:	37e2      	adds	r7, #226	@ 0xe2
 8015fc4:	fa02 f107 	lsl.w	r1, r2, r7
 8015fc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015fca:	920c      	str	r2, [sp, #48]	@ 0x30
 8015fcc:	e7b8      	b.n	8015f40 <_strtod_l+0x6d8>
 8015fce:	2200      	movs	r2, #0
 8015fd0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	e7f9      	b.n	8015fca <_strtod_l+0x762>
 8015fd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015fd8:	9805      	ldr	r0, [sp, #20]
 8015fda:	463a      	mov	r2, r7
 8015fdc:	f7ff f9d2 	bl	8015384 <__lshift>
 8015fe0:	9012      	str	r0, [sp, #72]	@ 0x48
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	d1db      	bne.n	8015f9e <_strtod_l+0x736>
 8015fe6:	e659      	b.n	8015c9c <_strtod_l+0x434>
 8015fe8:	f1b8 0f00 	cmp.w	r8, #0
 8015fec:	dd07      	ble.n	8015ffe <_strtod_l+0x796>
 8015fee:	4631      	mov	r1, r6
 8015ff0:	9805      	ldr	r0, [sp, #20]
 8015ff2:	4642      	mov	r2, r8
 8015ff4:	f7ff f9c6 	bl	8015384 <__lshift>
 8015ff8:	4606      	mov	r6, r0
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d0d9      	beq.n	8015fb2 <_strtod_l+0x74a>
 8015ffe:	f1b9 0f00 	cmp.w	r9, #0
 8016002:	dd08      	ble.n	8016016 <_strtod_l+0x7ae>
 8016004:	4629      	mov	r1, r5
 8016006:	9805      	ldr	r0, [sp, #20]
 8016008:	464a      	mov	r2, r9
 801600a:	f7ff f9bb 	bl	8015384 <__lshift>
 801600e:	4605      	mov	r5, r0
 8016010:	2800      	cmp	r0, #0
 8016012:	f43f ae43 	beq.w	8015c9c <_strtod_l+0x434>
 8016016:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016018:	9805      	ldr	r0, [sp, #20]
 801601a:	4632      	mov	r2, r6
 801601c:	f7ff fa3a 	bl	8015494 <__mdiff>
 8016020:	4604      	mov	r4, r0
 8016022:	2800      	cmp	r0, #0
 8016024:	f43f ae3a 	beq.w	8015c9c <_strtod_l+0x434>
 8016028:	2300      	movs	r3, #0
 801602a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801602e:	60c3      	str	r3, [r0, #12]
 8016030:	4629      	mov	r1, r5
 8016032:	f7ff fa13 	bl	801545c <__mcmp>
 8016036:	2800      	cmp	r0, #0
 8016038:	da4c      	bge.n	80160d4 <_strtod_l+0x86c>
 801603a:	ea58 080a 	orrs.w	r8, r8, sl
 801603e:	d172      	bne.n	8016126 <_strtod_l+0x8be>
 8016040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016044:	2b00      	cmp	r3, #0
 8016046:	d16e      	bne.n	8016126 <_strtod_l+0x8be>
 8016048:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801604c:	0d1b      	lsrs	r3, r3, #20
 801604e:	051b      	lsls	r3, r3, #20
 8016050:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016054:	d967      	bls.n	8016126 <_strtod_l+0x8be>
 8016056:	6963      	ldr	r3, [r4, #20]
 8016058:	b913      	cbnz	r3, 8016060 <_strtod_l+0x7f8>
 801605a:	6923      	ldr	r3, [r4, #16]
 801605c:	2b01      	cmp	r3, #1
 801605e:	dd62      	ble.n	8016126 <_strtod_l+0x8be>
 8016060:	4621      	mov	r1, r4
 8016062:	2201      	movs	r2, #1
 8016064:	9805      	ldr	r0, [sp, #20]
 8016066:	f7ff f98d 	bl	8015384 <__lshift>
 801606a:	4629      	mov	r1, r5
 801606c:	4604      	mov	r4, r0
 801606e:	f7ff f9f5 	bl	801545c <__mcmp>
 8016072:	2800      	cmp	r0, #0
 8016074:	dd57      	ble.n	8016126 <_strtod_l+0x8be>
 8016076:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801607a:	9a06      	ldr	r2, [sp, #24]
 801607c:	0d1b      	lsrs	r3, r3, #20
 801607e:	051b      	lsls	r3, r3, #20
 8016080:	2a00      	cmp	r2, #0
 8016082:	d06e      	beq.n	8016162 <_strtod_l+0x8fa>
 8016084:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016088:	d86b      	bhi.n	8016162 <_strtod_l+0x8fa>
 801608a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801608e:	f67f ae99 	bls.w	8015dc4 <_strtod_l+0x55c>
 8016092:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80160c0 <_strtod_l+0x858>
 8016096:	ec4b ab16 	vmov	d6, sl, fp
 801609a:	4b0d      	ldr	r3, [pc, #52]	@ (80160d0 <_strtod_l+0x868>)
 801609c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80160a0:	ee17 2a90 	vmov	r2, s15
 80160a4:	4013      	ands	r3, r2
 80160a6:	ec5b ab17 	vmov	sl, fp, d7
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f47f ae01 	bne.w	8015cb2 <_strtod_l+0x44a>
 80160b0:	9a05      	ldr	r2, [sp, #20]
 80160b2:	2322      	movs	r3, #34	@ 0x22
 80160b4:	6013      	str	r3, [r2, #0]
 80160b6:	e5fc      	b.n	8015cb2 <_strtod_l+0x44a>
 80160b8:	ffc00000 	.word	0xffc00000
 80160bc:	41dfffff 	.word	0x41dfffff
 80160c0:	00000000 	.word	0x00000000
 80160c4:	39500000 	.word	0x39500000
 80160c8:	0801b080 	.word	0x0801b080
 80160cc:	fffffc02 	.word	0xfffffc02
 80160d0:	7ff00000 	.word	0x7ff00000
 80160d4:	46d9      	mov	r9, fp
 80160d6:	d15d      	bne.n	8016194 <_strtod_l+0x92c>
 80160d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160dc:	f1b8 0f00 	cmp.w	r8, #0
 80160e0:	d02a      	beq.n	8016138 <_strtod_l+0x8d0>
 80160e2:	4aa9      	ldr	r2, [pc, #676]	@ (8016388 <_strtod_l+0xb20>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d12a      	bne.n	801613e <_strtod_l+0x8d6>
 80160e8:	9b06      	ldr	r3, [sp, #24]
 80160ea:	4652      	mov	r2, sl
 80160ec:	b1fb      	cbz	r3, 801612e <_strtod_l+0x8c6>
 80160ee:	4ba7      	ldr	r3, [pc, #668]	@ (801638c <_strtod_l+0xb24>)
 80160f0:	ea0b 0303 	and.w	r3, fp, r3
 80160f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80160f8:	f04f 31ff 	mov.w	r1, #4294967295
 80160fc:	d81a      	bhi.n	8016134 <_strtod_l+0x8cc>
 80160fe:	0d1b      	lsrs	r3, r3, #20
 8016100:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016104:	fa01 f303 	lsl.w	r3, r1, r3
 8016108:	429a      	cmp	r2, r3
 801610a:	d118      	bne.n	801613e <_strtod_l+0x8d6>
 801610c:	4ba0      	ldr	r3, [pc, #640]	@ (8016390 <_strtod_l+0xb28>)
 801610e:	4599      	cmp	r9, r3
 8016110:	d102      	bne.n	8016118 <_strtod_l+0x8b0>
 8016112:	3201      	adds	r2, #1
 8016114:	f43f adc2 	beq.w	8015c9c <_strtod_l+0x434>
 8016118:	4b9c      	ldr	r3, [pc, #624]	@ (801638c <_strtod_l+0xb24>)
 801611a:	ea09 0303 	and.w	r3, r9, r3
 801611e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016122:	f04f 0a00 	mov.w	sl, #0
 8016126:	9b06      	ldr	r3, [sp, #24]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1b2      	bne.n	8016092 <_strtod_l+0x82a>
 801612c:	e5c1      	b.n	8015cb2 <_strtod_l+0x44a>
 801612e:	f04f 33ff 	mov.w	r3, #4294967295
 8016132:	e7e9      	b.n	8016108 <_strtod_l+0x8a0>
 8016134:	460b      	mov	r3, r1
 8016136:	e7e7      	b.n	8016108 <_strtod_l+0x8a0>
 8016138:	ea53 030a 	orrs.w	r3, r3, sl
 801613c:	d09b      	beq.n	8016076 <_strtod_l+0x80e>
 801613e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016140:	b1c3      	cbz	r3, 8016174 <_strtod_l+0x90c>
 8016142:	ea13 0f09 	tst.w	r3, r9
 8016146:	d0ee      	beq.n	8016126 <_strtod_l+0x8be>
 8016148:	9a06      	ldr	r2, [sp, #24]
 801614a:	4650      	mov	r0, sl
 801614c:	4659      	mov	r1, fp
 801614e:	f1b8 0f00 	cmp.w	r8, #0
 8016152:	d013      	beq.n	801617c <_strtod_l+0x914>
 8016154:	f7ff fb6d 	bl	8015832 <sulp>
 8016158:	ee39 7b00 	vadd.f64	d7, d9, d0
 801615c:	ec5b ab17 	vmov	sl, fp, d7
 8016160:	e7e1      	b.n	8016126 <_strtod_l+0x8be>
 8016162:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016166:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801616a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801616e:	f04f 3aff 	mov.w	sl, #4294967295
 8016172:	e7d8      	b.n	8016126 <_strtod_l+0x8be>
 8016174:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016176:	ea13 0f0a 	tst.w	r3, sl
 801617a:	e7e4      	b.n	8016146 <_strtod_l+0x8de>
 801617c:	f7ff fb59 	bl	8015832 <sulp>
 8016180:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016184:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618c:	ec5b ab10 	vmov	sl, fp, d0
 8016190:	d1c9      	bne.n	8016126 <_strtod_l+0x8be>
 8016192:	e617      	b.n	8015dc4 <_strtod_l+0x55c>
 8016194:	4629      	mov	r1, r5
 8016196:	4620      	mov	r0, r4
 8016198:	f7ff fad8 	bl	801574c <__ratio>
 801619c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80161a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80161a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a8:	d85d      	bhi.n	8016266 <_strtod_l+0x9fe>
 80161aa:	f1b8 0f00 	cmp.w	r8, #0
 80161ae:	d164      	bne.n	801627a <_strtod_l+0xa12>
 80161b0:	f1ba 0f00 	cmp.w	sl, #0
 80161b4:	d14b      	bne.n	801624e <_strtod_l+0x9e6>
 80161b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161ba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d160      	bne.n	8016284 <_strtod_l+0xa1c>
 80161c2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80161c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80161ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ce:	d401      	bmi.n	80161d4 <_strtod_l+0x96c>
 80161d0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80161d4:	eeb1 ab48 	vneg.f64	d10, d8
 80161d8:	486c      	ldr	r0, [pc, #432]	@ (801638c <_strtod_l+0xb24>)
 80161da:	496e      	ldr	r1, [pc, #440]	@ (8016394 <_strtod_l+0xb2c>)
 80161dc:	ea09 0700 	and.w	r7, r9, r0
 80161e0:	428f      	cmp	r7, r1
 80161e2:	ec53 2b1a 	vmov	r2, r3, d10
 80161e6:	d17d      	bne.n	80162e4 <_strtod_l+0xa7c>
 80161e8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80161ec:	ec4b ab1c 	vmov	d12, sl, fp
 80161f0:	eeb0 0b4c 	vmov.f64	d0, d12
 80161f4:	f7ff f9e2 	bl	80155bc <__ulp>
 80161f8:	4864      	ldr	r0, [pc, #400]	@ (801638c <_strtod_l+0xb24>)
 80161fa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80161fe:	ee1c 3a90 	vmov	r3, s25
 8016202:	4a65      	ldr	r2, [pc, #404]	@ (8016398 <_strtod_l+0xb30>)
 8016204:	ea03 0100 	and.w	r1, r3, r0
 8016208:	4291      	cmp	r1, r2
 801620a:	ec5b ab1c 	vmov	sl, fp, d12
 801620e:	d93c      	bls.n	801628a <_strtod_l+0xa22>
 8016210:	ee19 2a90 	vmov	r2, s19
 8016214:	4b5e      	ldr	r3, [pc, #376]	@ (8016390 <_strtod_l+0xb28>)
 8016216:	429a      	cmp	r2, r3
 8016218:	d104      	bne.n	8016224 <_strtod_l+0x9bc>
 801621a:	ee19 3a10 	vmov	r3, s18
 801621e:	3301      	adds	r3, #1
 8016220:	f43f ad3c 	beq.w	8015c9c <_strtod_l+0x434>
 8016224:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8016390 <_strtod_l+0xb28>
 8016228:	f04f 3aff 	mov.w	sl, #4294967295
 801622c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801622e:	9805      	ldr	r0, [sp, #20]
 8016230:	f7fe fe98 	bl	8014f64 <_Bfree>
 8016234:	9805      	ldr	r0, [sp, #20]
 8016236:	4631      	mov	r1, r6
 8016238:	f7fe fe94 	bl	8014f64 <_Bfree>
 801623c:	9805      	ldr	r0, [sp, #20]
 801623e:	4629      	mov	r1, r5
 8016240:	f7fe fe90 	bl	8014f64 <_Bfree>
 8016244:	9805      	ldr	r0, [sp, #20]
 8016246:	4621      	mov	r1, r4
 8016248:	f7fe fe8c 	bl	8014f64 <_Bfree>
 801624c:	e627      	b.n	8015e9e <_strtod_l+0x636>
 801624e:	f1ba 0f01 	cmp.w	sl, #1
 8016252:	d103      	bne.n	801625c <_strtod_l+0x9f4>
 8016254:	f1bb 0f00 	cmp.w	fp, #0
 8016258:	f43f adb4 	beq.w	8015dc4 <_strtod_l+0x55c>
 801625c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016260:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016264:	e7b8      	b.n	80161d8 <_strtod_l+0x970>
 8016266:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801626a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801626e:	f1b8 0f00 	cmp.w	r8, #0
 8016272:	d0af      	beq.n	80161d4 <_strtod_l+0x96c>
 8016274:	eeb0 ab48 	vmov.f64	d10, d8
 8016278:	e7ae      	b.n	80161d8 <_strtod_l+0x970>
 801627a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801627e:	eeb0 8b4a 	vmov.f64	d8, d10
 8016282:	e7a9      	b.n	80161d8 <_strtod_l+0x970>
 8016284:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016288:	e7a6      	b.n	80161d8 <_strtod_l+0x970>
 801628a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801628e:	9b06      	ldr	r3, [sp, #24]
 8016290:	46d9      	mov	r9, fp
 8016292:	2b00      	cmp	r3, #0
 8016294:	d1ca      	bne.n	801622c <_strtod_l+0x9c4>
 8016296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801629a:	0d1b      	lsrs	r3, r3, #20
 801629c:	051b      	lsls	r3, r3, #20
 801629e:	429f      	cmp	r7, r3
 80162a0:	d1c4      	bne.n	801622c <_strtod_l+0x9c4>
 80162a2:	ec51 0b18 	vmov	r0, r1, d8
 80162a6:	f7ea f9f7 	bl	8000698 <__aeabi_d2lz>
 80162aa:	f7ea f9af 	bl	800060c <__aeabi_l2d>
 80162ae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80162b2:	ec41 0b17 	vmov	d7, r0, r1
 80162b6:	ea49 090a 	orr.w	r9, r9, sl
 80162ba:	ea59 0908 	orrs.w	r9, r9, r8
 80162be:	ee38 8b47 	vsub.f64	d8, d8, d7
 80162c2:	d03c      	beq.n	801633e <_strtod_l+0xad6>
 80162c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016370 <_strtod_l+0xb08>
 80162c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d0:	f53f acef 	bmi.w	8015cb2 <_strtod_l+0x44a>
 80162d4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8016378 <_strtod_l+0xb10>
 80162d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e0:	dda4      	ble.n	801622c <_strtod_l+0x9c4>
 80162e2:	e4e6      	b.n	8015cb2 <_strtod_l+0x44a>
 80162e4:	9906      	ldr	r1, [sp, #24]
 80162e6:	b1e1      	cbz	r1, 8016322 <_strtod_l+0xaba>
 80162e8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80162ec:	d819      	bhi.n	8016322 <_strtod_l+0xaba>
 80162ee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80162f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f6:	d811      	bhi.n	801631c <_strtod_l+0xab4>
 80162f8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80162fc:	ee18 3a10 	vmov	r3, s16
 8016300:	2b01      	cmp	r3, #1
 8016302:	bf38      	it	cc
 8016304:	2301      	movcc	r3, #1
 8016306:	ee08 3a10 	vmov	s16, r3
 801630a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801630e:	f1b8 0f00 	cmp.w	r8, #0
 8016312:	d111      	bne.n	8016338 <_strtod_l+0xad0>
 8016314:	eeb1 7b48 	vneg.f64	d7, d8
 8016318:	ec53 2b17 	vmov	r2, r3, d7
 801631c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016320:	1bcb      	subs	r3, r1, r7
 8016322:	eeb0 0b49 	vmov.f64	d0, d9
 8016326:	ec43 2b1a 	vmov	d10, r2, r3
 801632a:	f7ff f947 	bl	80155bc <__ulp>
 801632e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016332:	ec5b ab19 	vmov	sl, fp, d9
 8016336:	e7aa      	b.n	801628e <_strtod_l+0xa26>
 8016338:	eeb0 7b48 	vmov.f64	d7, d8
 801633c:	e7ec      	b.n	8016318 <_strtod_l+0xab0>
 801633e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8016380 <_strtod_l+0xb18>
 8016342:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801634a:	f57f af6f 	bpl.w	801622c <_strtod_l+0x9c4>
 801634e:	e4b0      	b.n	8015cb2 <_strtod_l+0x44a>
 8016350:	2300      	movs	r3, #0
 8016352:	9308      	str	r3, [sp, #32]
 8016354:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016356:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016358:	6013      	str	r3, [r2, #0]
 801635a:	f7ff bac4 	b.w	80158e6 <_strtod_l+0x7e>
 801635e:	2a65      	cmp	r2, #101	@ 0x65
 8016360:	f43f abbf 	beq.w	8015ae2 <_strtod_l+0x27a>
 8016364:	2a45      	cmp	r2, #69	@ 0x45
 8016366:	f43f abbc 	beq.w	8015ae2 <_strtod_l+0x27a>
 801636a:	2101      	movs	r1, #1
 801636c:	f7ff bbf4 	b.w	8015b58 <_strtod_l+0x2f0>
 8016370:	94a03595 	.word	0x94a03595
 8016374:	3fdfffff 	.word	0x3fdfffff
 8016378:	35afe535 	.word	0x35afe535
 801637c:	3fe00000 	.word	0x3fe00000
 8016380:	94a03595 	.word	0x94a03595
 8016384:	3fcfffff 	.word	0x3fcfffff
 8016388:	000fffff 	.word	0x000fffff
 801638c:	7ff00000 	.word	0x7ff00000
 8016390:	7fefffff 	.word	0x7fefffff
 8016394:	7fe00000 	.word	0x7fe00000
 8016398:	7c9fffff 	.word	0x7c9fffff

0801639c <_strtod_r>:
 801639c:	4b01      	ldr	r3, [pc, #4]	@ (80163a4 <_strtod_r+0x8>)
 801639e:	f7ff ba63 	b.w	8015868 <_strtod_l>
 80163a2:	bf00      	nop
 80163a4:	2000009c 	.word	0x2000009c

080163a8 <__ssputs_r>:
 80163a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163ac:	688e      	ldr	r6, [r1, #8]
 80163ae:	461f      	mov	r7, r3
 80163b0:	42be      	cmp	r6, r7
 80163b2:	680b      	ldr	r3, [r1, #0]
 80163b4:	4682      	mov	sl, r0
 80163b6:	460c      	mov	r4, r1
 80163b8:	4690      	mov	r8, r2
 80163ba:	d82d      	bhi.n	8016418 <__ssputs_r+0x70>
 80163bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80163c4:	d026      	beq.n	8016414 <__ssputs_r+0x6c>
 80163c6:	6965      	ldr	r5, [r4, #20]
 80163c8:	6909      	ldr	r1, [r1, #16]
 80163ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163ce:	eba3 0901 	sub.w	r9, r3, r1
 80163d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80163d6:	1c7b      	adds	r3, r7, #1
 80163d8:	444b      	add	r3, r9
 80163da:	106d      	asrs	r5, r5, #1
 80163dc:	429d      	cmp	r5, r3
 80163de:	bf38      	it	cc
 80163e0:	461d      	movcc	r5, r3
 80163e2:	0553      	lsls	r3, r2, #21
 80163e4:	d527      	bpl.n	8016436 <__ssputs_r+0x8e>
 80163e6:	4629      	mov	r1, r5
 80163e8:	f7fe fcf0 	bl	8014dcc <_malloc_r>
 80163ec:	4606      	mov	r6, r0
 80163ee:	b360      	cbz	r0, 801644a <__ssputs_r+0xa2>
 80163f0:	6921      	ldr	r1, [r4, #16]
 80163f2:	464a      	mov	r2, r9
 80163f4:	f7fd fe5d 	bl	80140b2 <memcpy>
 80163f8:	89a3      	ldrh	r3, [r4, #12]
 80163fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80163fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016402:	81a3      	strh	r3, [r4, #12]
 8016404:	6126      	str	r6, [r4, #16]
 8016406:	6165      	str	r5, [r4, #20]
 8016408:	444e      	add	r6, r9
 801640a:	eba5 0509 	sub.w	r5, r5, r9
 801640e:	6026      	str	r6, [r4, #0]
 8016410:	60a5      	str	r5, [r4, #8]
 8016412:	463e      	mov	r6, r7
 8016414:	42be      	cmp	r6, r7
 8016416:	d900      	bls.n	801641a <__ssputs_r+0x72>
 8016418:	463e      	mov	r6, r7
 801641a:	6820      	ldr	r0, [r4, #0]
 801641c:	4632      	mov	r2, r6
 801641e:	4641      	mov	r1, r8
 8016420:	f7fd fd9b 	bl	8013f5a <memmove>
 8016424:	68a3      	ldr	r3, [r4, #8]
 8016426:	1b9b      	subs	r3, r3, r6
 8016428:	60a3      	str	r3, [r4, #8]
 801642a:	6823      	ldr	r3, [r4, #0]
 801642c:	4433      	add	r3, r6
 801642e:	6023      	str	r3, [r4, #0]
 8016430:	2000      	movs	r0, #0
 8016432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016436:	462a      	mov	r2, r5
 8016438:	f000 ff1f 	bl	801727a <_realloc_r>
 801643c:	4606      	mov	r6, r0
 801643e:	2800      	cmp	r0, #0
 8016440:	d1e0      	bne.n	8016404 <__ssputs_r+0x5c>
 8016442:	6921      	ldr	r1, [r4, #16]
 8016444:	4650      	mov	r0, sl
 8016446:	f7fe fc4d 	bl	8014ce4 <_free_r>
 801644a:	230c      	movs	r3, #12
 801644c:	f8ca 3000 	str.w	r3, [sl]
 8016450:	89a3      	ldrh	r3, [r4, #12]
 8016452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016456:	81a3      	strh	r3, [r4, #12]
 8016458:	f04f 30ff 	mov.w	r0, #4294967295
 801645c:	e7e9      	b.n	8016432 <__ssputs_r+0x8a>
	...

08016460 <_svfiprintf_r>:
 8016460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016464:	4698      	mov	r8, r3
 8016466:	898b      	ldrh	r3, [r1, #12]
 8016468:	061b      	lsls	r3, r3, #24
 801646a:	b09d      	sub	sp, #116	@ 0x74
 801646c:	4607      	mov	r7, r0
 801646e:	460d      	mov	r5, r1
 8016470:	4614      	mov	r4, r2
 8016472:	d510      	bpl.n	8016496 <_svfiprintf_r+0x36>
 8016474:	690b      	ldr	r3, [r1, #16]
 8016476:	b973      	cbnz	r3, 8016496 <_svfiprintf_r+0x36>
 8016478:	2140      	movs	r1, #64	@ 0x40
 801647a:	f7fe fca7 	bl	8014dcc <_malloc_r>
 801647e:	6028      	str	r0, [r5, #0]
 8016480:	6128      	str	r0, [r5, #16]
 8016482:	b930      	cbnz	r0, 8016492 <_svfiprintf_r+0x32>
 8016484:	230c      	movs	r3, #12
 8016486:	603b      	str	r3, [r7, #0]
 8016488:	f04f 30ff 	mov.w	r0, #4294967295
 801648c:	b01d      	add	sp, #116	@ 0x74
 801648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016492:	2340      	movs	r3, #64	@ 0x40
 8016494:	616b      	str	r3, [r5, #20]
 8016496:	2300      	movs	r3, #0
 8016498:	9309      	str	r3, [sp, #36]	@ 0x24
 801649a:	2320      	movs	r3, #32
 801649c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80164a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80164a4:	2330      	movs	r3, #48	@ 0x30
 80164a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016644 <_svfiprintf_r+0x1e4>
 80164aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80164ae:	f04f 0901 	mov.w	r9, #1
 80164b2:	4623      	mov	r3, r4
 80164b4:	469a      	mov	sl, r3
 80164b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164ba:	b10a      	cbz	r2, 80164c0 <_svfiprintf_r+0x60>
 80164bc:	2a25      	cmp	r2, #37	@ 0x25
 80164be:	d1f9      	bne.n	80164b4 <_svfiprintf_r+0x54>
 80164c0:	ebba 0b04 	subs.w	fp, sl, r4
 80164c4:	d00b      	beq.n	80164de <_svfiprintf_r+0x7e>
 80164c6:	465b      	mov	r3, fp
 80164c8:	4622      	mov	r2, r4
 80164ca:	4629      	mov	r1, r5
 80164cc:	4638      	mov	r0, r7
 80164ce:	f7ff ff6b 	bl	80163a8 <__ssputs_r>
 80164d2:	3001      	adds	r0, #1
 80164d4:	f000 80a7 	beq.w	8016626 <_svfiprintf_r+0x1c6>
 80164d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164da:	445a      	add	r2, fp
 80164dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80164de:	f89a 3000 	ldrb.w	r3, [sl]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	f000 809f 	beq.w	8016626 <_svfiprintf_r+0x1c6>
 80164e8:	2300      	movs	r3, #0
 80164ea:	f04f 32ff 	mov.w	r2, #4294967295
 80164ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164f2:	f10a 0a01 	add.w	sl, sl, #1
 80164f6:	9304      	str	r3, [sp, #16]
 80164f8:	9307      	str	r3, [sp, #28]
 80164fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8016500:	4654      	mov	r4, sl
 8016502:	2205      	movs	r2, #5
 8016504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016508:	484e      	ldr	r0, [pc, #312]	@ (8016644 <_svfiprintf_r+0x1e4>)
 801650a:	f7e9 fe99 	bl	8000240 <memchr>
 801650e:	9a04      	ldr	r2, [sp, #16]
 8016510:	b9d8      	cbnz	r0, 801654a <_svfiprintf_r+0xea>
 8016512:	06d0      	lsls	r0, r2, #27
 8016514:	bf44      	itt	mi
 8016516:	2320      	movmi	r3, #32
 8016518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801651c:	0711      	lsls	r1, r2, #28
 801651e:	bf44      	itt	mi
 8016520:	232b      	movmi	r3, #43	@ 0x2b
 8016522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016526:	f89a 3000 	ldrb.w	r3, [sl]
 801652a:	2b2a      	cmp	r3, #42	@ 0x2a
 801652c:	d015      	beq.n	801655a <_svfiprintf_r+0xfa>
 801652e:	9a07      	ldr	r2, [sp, #28]
 8016530:	4654      	mov	r4, sl
 8016532:	2000      	movs	r0, #0
 8016534:	f04f 0c0a 	mov.w	ip, #10
 8016538:	4621      	mov	r1, r4
 801653a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801653e:	3b30      	subs	r3, #48	@ 0x30
 8016540:	2b09      	cmp	r3, #9
 8016542:	d94b      	bls.n	80165dc <_svfiprintf_r+0x17c>
 8016544:	b1b0      	cbz	r0, 8016574 <_svfiprintf_r+0x114>
 8016546:	9207      	str	r2, [sp, #28]
 8016548:	e014      	b.n	8016574 <_svfiprintf_r+0x114>
 801654a:	eba0 0308 	sub.w	r3, r0, r8
 801654e:	fa09 f303 	lsl.w	r3, r9, r3
 8016552:	4313      	orrs	r3, r2
 8016554:	9304      	str	r3, [sp, #16]
 8016556:	46a2      	mov	sl, r4
 8016558:	e7d2      	b.n	8016500 <_svfiprintf_r+0xa0>
 801655a:	9b03      	ldr	r3, [sp, #12]
 801655c:	1d19      	adds	r1, r3, #4
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	9103      	str	r1, [sp, #12]
 8016562:	2b00      	cmp	r3, #0
 8016564:	bfbb      	ittet	lt
 8016566:	425b      	neglt	r3, r3
 8016568:	f042 0202 	orrlt.w	r2, r2, #2
 801656c:	9307      	strge	r3, [sp, #28]
 801656e:	9307      	strlt	r3, [sp, #28]
 8016570:	bfb8      	it	lt
 8016572:	9204      	strlt	r2, [sp, #16]
 8016574:	7823      	ldrb	r3, [r4, #0]
 8016576:	2b2e      	cmp	r3, #46	@ 0x2e
 8016578:	d10a      	bne.n	8016590 <_svfiprintf_r+0x130>
 801657a:	7863      	ldrb	r3, [r4, #1]
 801657c:	2b2a      	cmp	r3, #42	@ 0x2a
 801657e:	d132      	bne.n	80165e6 <_svfiprintf_r+0x186>
 8016580:	9b03      	ldr	r3, [sp, #12]
 8016582:	1d1a      	adds	r2, r3, #4
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	9203      	str	r2, [sp, #12]
 8016588:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801658c:	3402      	adds	r4, #2
 801658e:	9305      	str	r3, [sp, #20]
 8016590:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016654 <_svfiprintf_r+0x1f4>
 8016594:	7821      	ldrb	r1, [r4, #0]
 8016596:	2203      	movs	r2, #3
 8016598:	4650      	mov	r0, sl
 801659a:	f7e9 fe51 	bl	8000240 <memchr>
 801659e:	b138      	cbz	r0, 80165b0 <_svfiprintf_r+0x150>
 80165a0:	9b04      	ldr	r3, [sp, #16]
 80165a2:	eba0 000a 	sub.w	r0, r0, sl
 80165a6:	2240      	movs	r2, #64	@ 0x40
 80165a8:	4082      	lsls	r2, r0
 80165aa:	4313      	orrs	r3, r2
 80165ac:	3401      	adds	r4, #1
 80165ae:	9304      	str	r3, [sp, #16]
 80165b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165b4:	4824      	ldr	r0, [pc, #144]	@ (8016648 <_svfiprintf_r+0x1e8>)
 80165b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80165ba:	2206      	movs	r2, #6
 80165bc:	f7e9 fe40 	bl	8000240 <memchr>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	d036      	beq.n	8016632 <_svfiprintf_r+0x1d2>
 80165c4:	4b21      	ldr	r3, [pc, #132]	@ (801664c <_svfiprintf_r+0x1ec>)
 80165c6:	bb1b      	cbnz	r3, 8016610 <_svfiprintf_r+0x1b0>
 80165c8:	9b03      	ldr	r3, [sp, #12]
 80165ca:	3307      	adds	r3, #7
 80165cc:	f023 0307 	bic.w	r3, r3, #7
 80165d0:	3308      	adds	r3, #8
 80165d2:	9303      	str	r3, [sp, #12]
 80165d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165d6:	4433      	add	r3, r6
 80165d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80165da:	e76a      	b.n	80164b2 <_svfiprintf_r+0x52>
 80165dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80165e0:	460c      	mov	r4, r1
 80165e2:	2001      	movs	r0, #1
 80165e4:	e7a8      	b.n	8016538 <_svfiprintf_r+0xd8>
 80165e6:	2300      	movs	r3, #0
 80165e8:	3401      	adds	r4, #1
 80165ea:	9305      	str	r3, [sp, #20]
 80165ec:	4619      	mov	r1, r3
 80165ee:	f04f 0c0a 	mov.w	ip, #10
 80165f2:	4620      	mov	r0, r4
 80165f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165f8:	3a30      	subs	r2, #48	@ 0x30
 80165fa:	2a09      	cmp	r2, #9
 80165fc:	d903      	bls.n	8016606 <_svfiprintf_r+0x1a6>
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d0c6      	beq.n	8016590 <_svfiprintf_r+0x130>
 8016602:	9105      	str	r1, [sp, #20]
 8016604:	e7c4      	b.n	8016590 <_svfiprintf_r+0x130>
 8016606:	fb0c 2101 	mla	r1, ip, r1, r2
 801660a:	4604      	mov	r4, r0
 801660c:	2301      	movs	r3, #1
 801660e:	e7f0      	b.n	80165f2 <_svfiprintf_r+0x192>
 8016610:	ab03      	add	r3, sp, #12
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	462a      	mov	r2, r5
 8016616:	4b0e      	ldr	r3, [pc, #56]	@ (8016650 <_svfiprintf_r+0x1f0>)
 8016618:	a904      	add	r1, sp, #16
 801661a:	4638      	mov	r0, r7
 801661c:	f7fc fda8 	bl	8013170 <_printf_float>
 8016620:	1c42      	adds	r2, r0, #1
 8016622:	4606      	mov	r6, r0
 8016624:	d1d6      	bne.n	80165d4 <_svfiprintf_r+0x174>
 8016626:	89ab      	ldrh	r3, [r5, #12]
 8016628:	065b      	lsls	r3, r3, #25
 801662a:	f53f af2d 	bmi.w	8016488 <_svfiprintf_r+0x28>
 801662e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016630:	e72c      	b.n	801648c <_svfiprintf_r+0x2c>
 8016632:	ab03      	add	r3, sp, #12
 8016634:	9300      	str	r3, [sp, #0]
 8016636:	462a      	mov	r2, r5
 8016638:	4b05      	ldr	r3, [pc, #20]	@ (8016650 <_svfiprintf_r+0x1f0>)
 801663a:	a904      	add	r1, sp, #16
 801663c:	4638      	mov	r0, r7
 801663e:	f7fd f81f 	bl	8013680 <_printf_i>
 8016642:	e7ed      	b.n	8016620 <_svfiprintf_r+0x1c0>
 8016644:	0801addb 	.word	0x0801addb
 8016648:	0801ade5 	.word	0x0801ade5
 801664c:	08013171 	.word	0x08013171
 8016650:	080163a9 	.word	0x080163a9
 8016654:	0801ade1 	.word	0x0801ade1

08016658 <__sfputc_r>:
 8016658:	6893      	ldr	r3, [r2, #8]
 801665a:	3b01      	subs	r3, #1
 801665c:	2b00      	cmp	r3, #0
 801665e:	b410      	push	{r4}
 8016660:	6093      	str	r3, [r2, #8]
 8016662:	da08      	bge.n	8016676 <__sfputc_r+0x1e>
 8016664:	6994      	ldr	r4, [r2, #24]
 8016666:	42a3      	cmp	r3, r4
 8016668:	db01      	blt.n	801666e <__sfputc_r+0x16>
 801666a:	290a      	cmp	r1, #10
 801666c:	d103      	bne.n	8016676 <__sfputc_r+0x1e>
 801666e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016672:	f000 b9f1 	b.w	8016a58 <__swbuf_r>
 8016676:	6813      	ldr	r3, [r2, #0]
 8016678:	1c58      	adds	r0, r3, #1
 801667a:	6010      	str	r0, [r2, #0]
 801667c:	7019      	strb	r1, [r3, #0]
 801667e:	4608      	mov	r0, r1
 8016680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016684:	4770      	bx	lr

08016686 <__sfputs_r>:
 8016686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016688:	4606      	mov	r6, r0
 801668a:	460f      	mov	r7, r1
 801668c:	4614      	mov	r4, r2
 801668e:	18d5      	adds	r5, r2, r3
 8016690:	42ac      	cmp	r4, r5
 8016692:	d101      	bne.n	8016698 <__sfputs_r+0x12>
 8016694:	2000      	movs	r0, #0
 8016696:	e007      	b.n	80166a8 <__sfputs_r+0x22>
 8016698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801669c:	463a      	mov	r2, r7
 801669e:	4630      	mov	r0, r6
 80166a0:	f7ff ffda 	bl	8016658 <__sfputc_r>
 80166a4:	1c43      	adds	r3, r0, #1
 80166a6:	d1f3      	bne.n	8016690 <__sfputs_r+0xa>
 80166a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166ac <_vfiprintf_r>:
 80166ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b0:	460d      	mov	r5, r1
 80166b2:	b09d      	sub	sp, #116	@ 0x74
 80166b4:	4614      	mov	r4, r2
 80166b6:	4698      	mov	r8, r3
 80166b8:	4606      	mov	r6, r0
 80166ba:	b118      	cbz	r0, 80166c4 <_vfiprintf_r+0x18>
 80166bc:	6a03      	ldr	r3, [r0, #32]
 80166be:	b90b      	cbnz	r3, 80166c4 <_vfiprintf_r+0x18>
 80166c0:	f7fd fb8e 	bl	8013de0 <__sinit>
 80166c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166c6:	07d9      	lsls	r1, r3, #31
 80166c8:	d405      	bmi.n	80166d6 <_vfiprintf_r+0x2a>
 80166ca:	89ab      	ldrh	r3, [r5, #12]
 80166cc:	059a      	lsls	r2, r3, #22
 80166ce:	d402      	bmi.n	80166d6 <_vfiprintf_r+0x2a>
 80166d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166d2:	f7fd fcec 	bl	80140ae <__retarget_lock_acquire_recursive>
 80166d6:	89ab      	ldrh	r3, [r5, #12]
 80166d8:	071b      	lsls	r3, r3, #28
 80166da:	d501      	bpl.n	80166e0 <_vfiprintf_r+0x34>
 80166dc:	692b      	ldr	r3, [r5, #16]
 80166de:	b99b      	cbnz	r3, 8016708 <_vfiprintf_r+0x5c>
 80166e0:	4629      	mov	r1, r5
 80166e2:	4630      	mov	r0, r6
 80166e4:	f000 f9f6 	bl	8016ad4 <__swsetup_r>
 80166e8:	b170      	cbz	r0, 8016708 <_vfiprintf_r+0x5c>
 80166ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166ec:	07dc      	lsls	r4, r3, #31
 80166ee:	d504      	bpl.n	80166fa <_vfiprintf_r+0x4e>
 80166f0:	f04f 30ff 	mov.w	r0, #4294967295
 80166f4:	b01d      	add	sp, #116	@ 0x74
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	89ab      	ldrh	r3, [r5, #12]
 80166fc:	0598      	lsls	r0, r3, #22
 80166fe:	d4f7      	bmi.n	80166f0 <_vfiprintf_r+0x44>
 8016700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016702:	f7fd fcd5 	bl	80140b0 <__retarget_lock_release_recursive>
 8016706:	e7f3      	b.n	80166f0 <_vfiprintf_r+0x44>
 8016708:	2300      	movs	r3, #0
 801670a:	9309      	str	r3, [sp, #36]	@ 0x24
 801670c:	2320      	movs	r3, #32
 801670e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016712:	f8cd 800c 	str.w	r8, [sp, #12]
 8016716:	2330      	movs	r3, #48	@ 0x30
 8016718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80168c8 <_vfiprintf_r+0x21c>
 801671c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016720:	f04f 0901 	mov.w	r9, #1
 8016724:	4623      	mov	r3, r4
 8016726:	469a      	mov	sl, r3
 8016728:	f813 2b01 	ldrb.w	r2, [r3], #1
 801672c:	b10a      	cbz	r2, 8016732 <_vfiprintf_r+0x86>
 801672e:	2a25      	cmp	r2, #37	@ 0x25
 8016730:	d1f9      	bne.n	8016726 <_vfiprintf_r+0x7a>
 8016732:	ebba 0b04 	subs.w	fp, sl, r4
 8016736:	d00b      	beq.n	8016750 <_vfiprintf_r+0xa4>
 8016738:	465b      	mov	r3, fp
 801673a:	4622      	mov	r2, r4
 801673c:	4629      	mov	r1, r5
 801673e:	4630      	mov	r0, r6
 8016740:	f7ff ffa1 	bl	8016686 <__sfputs_r>
 8016744:	3001      	adds	r0, #1
 8016746:	f000 80a7 	beq.w	8016898 <_vfiprintf_r+0x1ec>
 801674a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801674c:	445a      	add	r2, fp
 801674e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016750:	f89a 3000 	ldrb.w	r3, [sl]
 8016754:	2b00      	cmp	r3, #0
 8016756:	f000 809f 	beq.w	8016898 <_vfiprintf_r+0x1ec>
 801675a:	2300      	movs	r3, #0
 801675c:	f04f 32ff 	mov.w	r2, #4294967295
 8016760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016764:	f10a 0a01 	add.w	sl, sl, #1
 8016768:	9304      	str	r3, [sp, #16]
 801676a:	9307      	str	r3, [sp, #28]
 801676c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016770:	931a      	str	r3, [sp, #104]	@ 0x68
 8016772:	4654      	mov	r4, sl
 8016774:	2205      	movs	r2, #5
 8016776:	f814 1b01 	ldrb.w	r1, [r4], #1
 801677a:	4853      	ldr	r0, [pc, #332]	@ (80168c8 <_vfiprintf_r+0x21c>)
 801677c:	f7e9 fd60 	bl	8000240 <memchr>
 8016780:	9a04      	ldr	r2, [sp, #16]
 8016782:	b9d8      	cbnz	r0, 80167bc <_vfiprintf_r+0x110>
 8016784:	06d1      	lsls	r1, r2, #27
 8016786:	bf44      	itt	mi
 8016788:	2320      	movmi	r3, #32
 801678a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801678e:	0713      	lsls	r3, r2, #28
 8016790:	bf44      	itt	mi
 8016792:	232b      	movmi	r3, #43	@ 0x2b
 8016794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016798:	f89a 3000 	ldrb.w	r3, [sl]
 801679c:	2b2a      	cmp	r3, #42	@ 0x2a
 801679e:	d015      	beq.n	80167cc <_vfiprintf_r+0x120>
 80167a0:	9a07      	ldr	r2, [sp, #28]
 80167a2:	4654      	mov	r4, sl
 80167a4:	2000      	movs	r0, #0
 80167a6:	f04f 0c0a 	mov.w	ip, #10
 80167aa:	4621      	mov	r1, r4
 80167ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167b0:	3b30      	subs	r3, #48	@ 0x30
 80167b2:	2b09      	cmp	r3, #9
 80167b4:	d94b      	bls.n	801684e <_vfiprintf_r+0x1a2>
 80167b6:	b1b0      	cbz	r0, 80167e6 <_vfiprintf_r+0x13a>
 80167b8:	9207      	str	r2, [sp, #28]
 80167ba:	e014      	b.n	80167e6 <_vfiprintf_r+0x13a>
 80167bc:	eba0 0308 	sub.w	r3, r0, r8
 80167c0:	fa09 f303 	lsl.w	r3, r9, r3
 80167c4:	4313      	orrs	r3, r2
 80167c6:	9304      	str	r3, [sp, #16]
 80167c8:	46a2      	mov	sl, r4
 80167ca:	e7d2      	b.n	8016772 <_vfiprintf_r+0xc6>
 80167cc:	9b03      	ldr	r3, [sp, #12]
 80167ce:	1d19      	adds	r1, r3, #4
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	9103      	str	r1, [sp, #12]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	bfbb      	ittet	lt
 80167d8:	425b      	neglt	r3, r3
 80167da:	f042 0202 	orrlt.w	r2, r2, #2
 80167de:	9307      	strge	r3, [sp, #28]
 80167e0:	9307      	strlt	r3, [sp, #28]
 80167e2:	bfb8      	it	lt
 80167e4:	9204      	strlt	r2, [sp, #16]
 80167e6:	7823      	ldrb	r3, [r4, #0]
 80167e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80167ea:	d10a      	bne.n	8016802 <_vfiprintf_r+0x156>
 80167ec:	7863      	ldrb	r3, [r4, #1]
 80167ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80167f0:	d132      	bne.n	8016858 <_vfiprintf_r+0x1ac>
 80167f2:	9b03      	ldr	r3, [sp, #12]
 80167f4:	1d1a      	adds	r2, r3, #4
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	9203      	str	r2, [sp, #12]
 80167fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80167fe:	3402      	adds	r4, #2
 8016800:	9305      	str	r3, [sp, #20]
 8016802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80168d8 <_vfiprintf_r+0x22c>
 8016806:	7821      	ldrb	r1, [r4, #0]
 8016808:	2203      	movs	r2, #3
 801680a:	4650      	mov	r0, sl
 801680c:	f7e9 fd18 	bl	8000240 <memchr>
 8016810:	b138      	cbz	r0, 8016822 <_vfiprintf_r+0x176>
 8016812:	9b04      	ldr	r3, [sp, #16]
 8016814:	eba0 000a 	sub.w	r0, r0, sl
 8016818:	2240      	movs	r2, #64	@ 0x40
 801681a:	4082      	lsls	r2, r0
 801681c:	4313      	orrs	r3, r2
 801681e:	3401      	adds	r4, #1
 8016820:	9304      	str	r3, [sp, #16]
 8016822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016826:	4829      	ldr	r0, [pc, #164]	@ (80168cc <_vfiprintf_r+0x220>)
 8016828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801682c:	2206      	movs	r2, #6
 801682e:	f7e9 fd07 	bl	8000240 <memchr>
 8016832:	2800      	cmp	r0, #0
 8016834:	d03f      	beq.n	80168b6 <_vfiprintf_r+0x20a>
 8016836:	4b26      	ldr	r3, [pc, #152]	@ (80168d0 <_vfiprintf_r+0x224>)
 8016838:	bb1b      	cbnz	r3, 8016882 <_vfiprintf_r+0x1d6>
 801683a:	9b03      	ldr	r3, [sp, #12]
 801683c:	3307      	adds	r3, #7
 801683e:	f023 0307 	bic.w	r3, r3, #7
 8016842:	3308      	adds	r3, #8
 8016844:	9303      	str	r3, [sp, #12]
 8016846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016848:	443b      	add	r3, r7
 801684a:	9309      	str	r3, [sp, #36]	@ 0x24
 801684c:	e76a      	b.n	8016724 <_vfiprintf_r+0x78>
 801684e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016852:	460c      	mov	r4, r1
 8016854:	2001      	movs	r0, #1
 8016856:	e7a8      	b.n	80167aa <_vfiprintf_r+0xfe>
 8016858:	2300      	movs	r3, #0
 801685a:	3401      	adds	r4, #1
 801685c:	9305      	str	r3, [sp, #20]
 801685e:	4619      	mov	r1, r3
 8016860:	f04f 0c0a 	mov.w	ip, #10
 8016864:	4620      	mov	r0, r4
 8016866:	f810 2b01 	ldrb.w	r2, [r0], #1
 801686a:	3a30      	subs	r2, #48	@ 0x30
 801686c:	2a09      	cmp	r2, #9
 801686e:	d903      	bls.n	8016878 <_vfiprintf_r+0x1cc>
 8016870:	2b00      	cmp	r3, #0
 8016872:	d0c6      	beq.n	8016802 <_vfiprintf_r+0x156>
 8016874:	9105      	str	r1, [sp, #20]
 8016876:	e7c4      	b.n	8016802 <_vfiprintf_r+0x156>
 8016878:	fb0c 2101 	mla	r1, ip, r1, r2
 801687c:	4604      	mov	r4, r0
 801687e:	2301      	movs	r3, #1
 8016880:	e7f0      	b.n	8016864 <_vfiprintf_r+0x1b8>
 8016882:	ab03      	add	r3, sp, #12
 8016884:	9300      	str	r3, [sp, #0]
 8016886:	462a      	mov	r2, r5
 8016888:	4b12      	ldr	r3, [pc, #72]	@ (80168d4 <_vfiprintf_r+0x228>)
 801688a:	a904      	add	r1, sp, #16
 801688c:	4630      	mov	r0, r6
 801688e:	f7fc fc6f 	bl	8013170 <_printf_float>
 8016892:	4607      	mov	r7, r0
 8016894:	1c78      	adds	r0, r7, #1
 8016896:	d1d6      	bne.n	8016846 <_vfiprintf_r+0x19a>
 8016898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801689a:	07d9      	lsls	r1, r3, #31
 801689c:	d405      	bmi.n	80168aa <_vfiprintf_r+0x1fe>
 801689e:	89ab      	ldrh	r3, [r5, #12]
 80168a0:	059a      	lsls	r2, r3, #22
 80168a2:	d402      	bmi.n	80168aa <_vfiprintf_r+0x1fe>
 80168a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80168a6:	f7fd fc03 	bl	80140b0 <__retarget_lock_release_recursive>
 80168aa:	89ab      	ldrh	r3, [r5, #12]
 80168ac:	065b      	lsls	r3, r3, #25
 80168ae:	f53f af1f 	bmi.w	80166f0 <_vfiprintf_r+0x44>
 80168b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80168b4:	e71e      	b.n	80166f4 <_vfiprintf_r+0x48>
 80168b6:	ab03      	add	r3, sp, #12
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	462a      	mov	r2, r5
 80168bc:	4b05      	ldr	r3, [pc, #20]	@ (80168d4 <_vfiprintf_r+0x228>)
 80168be:	a904      	add	r1, sp, #16
 80168c0:	4630      	mov	r0, r6
 80168c2:	f7fc fedd 	bl	8013680 <_printf_i>
 80168c6:	e7e4      	b.n	8016892 <_vfiprintf_r+0x1e6>
 80168c8:	0801addb 	.word	0x0801addb
 80168cc:	0801ade5 	.word	0x0801ade5
 80168d0:	08013171 	.word	0x08013171
 80168d4:	08016687 	.word	0x08016687
 80168d8:	0801ade1 	.word	0x0801ade1

080168dc <__sflush_r>:
 80168dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e4:	0716      	lsls	r6, r2, #28
 80168e6:	4605      	mov	r5, r0
 80168e8:	460c      	mov	r4, r1
 80168ea:	d454      	bmi.n	8016996 <__sflush_r+0xba>
 80168ec:	684b      	ldr	r3, [r1, #4]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	dc02      	bgt.n	80168f8 <__sflush_r+0x1c>
 80168f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	dd48      	ble.n	801698a <__sflush_r+0xae>
 80168f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168fa:	2e00      	cmp	r6, #0
 80168fc:	d045      	beq.n	801698a <__sflush_r+0xae>
 80168fe:	2300      	movs	r3, #0
 8016900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016904:	682f      	ldr	r7, [r5, #0]
 8016906:	6a21      	ldr	r1, [r4, #32]
 8016908:	602b      	str	r3, [r5, #0]
 801690a:	d030      	beq.n	801696e <__sflush_r+0x92>
 801690c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801690e:	89a3      	ldrh	r3, [r4, #12]
 8016910:	0759      	lsls	r1, r3, #29
 8016912:	d505      	bpl.n	8016920 <__sflush_r+0x44>
 8016914:	6863      	ldr	r3, [r4, #4]
 8016916:	1ad2      	subs	r2, r2, r3
 8016918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801691a:	b10b      	cbz	r3, 8016920 <__sflush_r+0x44>
 801691c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801691e:	1ad2      	subs	r2, r2, r3
 8016920:	2300      	movs	r3, #0
 8016922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016924:	6a21      	ldr	r1, [r4, #32]
 8016926:	4628      	mov	r0, r5
 8016928:	47b0      	blx	r6
 801692a:	1c43      	adds	r3, r0, #1
 801692c:	89a3      	ldrh	r3, [r4, #12]
 801692e:	d106      	bne.n	801693e <__sflush_r+0x62>
 8016930:	6829      	ldr	r1, [r5, #0]
 8016932:	291d      	cmp	r1, #29
 8016934:	d82b      	bhi.n	801698e <__sflush_r+0xb2>
 8016936:	4a2a      	ldr	r2, [pc, #168]	@ (80169e0 <__sflush_r+0x104>)
 8016938:	40ca      	lsrs	r2, r1
 801693a:	07d6      	lsls	r6, r2, #31
 801693c:	d527      	bpl.n	801698e <__sflush_r+0xb2>
 801693e:	2200      	movs	r2, #0
 8016940:	6062      	str	r2, [r4, #4]
 8016942:	04d9      	lsls	r1, r3, #19
 8016944:	6922      	ldr	r2, [r4, #16]
 8016946:	6022      	str	r2, [r4, #0]
 8016948:	d504      	bpl.n	8016954 <__sflush_r+0x78>
 801694a:	1c42      	adds	r2, r0, #1
 801694c:	d101      	bne.n	8016952 <__sflush_r+0x76>
 801694e:	682b      	ldr	r3, [r5, #0]
 8016950:	b903      	cbnz	r3, 8016954 <__sflush_r+0x78>
 8016952:	6560      	str	r0, [r4, #84]	@ 0x54
 8016954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016956:	602f      	str	r7, [r5, #0]
 8016958:	b1b9      	cbz	r1, 801698a <__sflush_r+0xae>
 801695a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801695e:	4299      	cmp	r1, r3
 8016960:	d002      	beq.n	8016968 <__sflush_r+0x8c>
 8016962:	4628      	mov	r0, r5
 8016964:	f7fe f9be 	bl	8014ce4 <_free_r>
 8016968:	2300      	movs	r3, #0
 801696a:	6363      	str	r3, [r4, #52]	@ 0x34
 801696c:	e00d      	b.n	801698a <__sflush_r+0xae>
 801696e:	2301      	movs	r3, #1
 8016970:	4628      	mov	r0, r5
 8016972:	47b0      	blx	r6
 8016974:	4602      	mov	r2, r0
 8016976:	1c50      	adds	r0, r2, #1
 8016978:	d1c9      	bne.n	801690e <__sflush_r+0x32>
 801697a:	682b      	ldr	r3, [r5, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d0c6      	beq.n	801690e <__sflush_r+0x32>
 8016980:	2b1d      	cmp	r3, #29
 8016982:	d001      	beq.n	8016988 <__sflush_r+0xac>
 8016984:	2b16      	cmp	r3, #22
 8016986:	d11e      	bne.n	80169c6 <__sflush_r+0xea>
 8016988:	602f      	str	r7, [r5, #0]
 801698a:	2000      	movs	r0, #0
 801698c:	e022      	b.n	80169d4 <__sflush_r+0xf8>
 801698e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016992:	b21b      	sxth	r3, r3
 8016994:	e01b      	b.n	80169ce <__sflush_r+0xf2>
 8016996:	690f      	ldr	r7, [r1, #16]
 8016998:	2f00      	cmp	r7, #0
 801699a:	d0f6      	beq.n	801698a <__sflush_r+0xae>
 801699c:	0793      	lsls	r3, r2, #30
 801699e:	680e      	ldr	r6, [r1, #0]
 80169a0:	bf08      	it	eq
 80169a2:	694b      	ldreq	r3, [r1, #20]
 80169a4:	600f      	str	r7, [r1, #0]
 80169a6:	bf18      	it	ne
 80169a8:	2300      	movne	r3, #0
 80169aa:	eba6 0807 	sub.w	r8, r6, r7
 80169ae:	608b      	str	r3, [r1, #8]
 80169b0:	f1b8 0f00 	cmp.w	r8, #0
 80169b4:	dde9      	ble.n	801698a <__sflush_r+0xae>
 80169b6:	6a21      	ldr	r1, [r4, #32]
 80169b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80169ba:	4643      	mov	r3, r8
 80169bc:	463a      	mov	r2, r7
 80169be:	4628      	mov	r0, r5
 80169c0:	47b0      	blx	r6
 80169c2:	2800      	cmp	r0, #0
 80169c4:	dc08      	bgt.n	80169d8 <__sflush_r+0xfc>
 80169c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169ce:	81a3      	strh	r3, [r4, #12]
 80169d0:	f04f 30ff 	mov.w	r0, #4294967295
 80169d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169d8:	4407      	add	r7, r0
 80169da:	eba8 0800 	sub.w	r8, r8, r0
 80169de:	e7e7      	b.n	80169b0 <__sflush_r+0xd4>
 80169e0:	20400001 	.word	0x20400001

080169e4 <_fflush_r>:
 80169e4:	b538      	push	{r3, r4, r5, lr}
 80169e6:	690b      	ldr	r3, [r1, #16]
 80169e8:	4605      	mov	r5, r0
 80169ea:	460c      	mov	r4, r1
 80169ec:	b913      	cbnz	r3, 80169f4 <_fflush_r+0x10>
 80169ee:	2500      	movs	r5, #0
 80169f0:	4628      	mov	r0, r5
 80169f2:	bd38      	pop	{r3, r4, r5, pc}
 80169f4:	b118      	cbz	r0, 80169fe <_fflush_r+0x1a>
 80169f6:	6a03      	ldr	r3, [r0, #32]
 80169f8:	b90b      	cbnz	r3, 80169fe <_fflush_r+0x1a>
 80169fa:	f7fd f9f1 	bl	8013de0 <__sinit>
 80169fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d0f3      	beq.n	80169ee <_fflush_r+0xa>
 8016a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a08:	07d0      	lsls	r0, r2, #31
 8016a0a:	d404      	bmi.n	8016a16 <_fflush_r+0x32>
 8016a0c:	0599      	lsls	r1, r3, #22
 8016a0e:	d402      	bmi.n	8016a16 <_fflush_r+0x32>
 8016a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a12:	f7fd fb4c 	bl	80140ae <__retarget_lock_acquire_recursive>
 8016a16:	4628      	mov	r0, r5
 8016a18:	4621      	mov	r1, r4
 8016a1a:	f7ff ff5f 	bl	80168dc <__sflush_r>
 8016a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a20:	07da      	lsls	r2, r3, #31
 8016a22:	4605      	mov	r5, r0
 8016a24:	d4e4      	bmi.n	80169f0 <_fflush_r+0xc>
 8016a26:	89a3      	ldrh	r3, [r4, #12]
 8016a28:	059b      	lsls	r3, r3, #22
 8016a2a:	d4e1      	bmi.n	80169f0 <_fflush_r+0xc>
 8016a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a2e:	f7fd fb3f 	bl	80140b0 <__retarget_lock_release_recursive>
 8016a32:	e7dd      	b.n	80169f0 <_fflush_r+0xc>

08016a34 <fiprintf>:
 8016a34:	b40e      	push	{r1, r2, r3}
 8016a36:	b503      	push	{r0, r1, lr}
 8016a38:	4601      	mov	r1, r0
 8016a3a:	ab03      	add	r3, sp, #12
 8016a3c:	4805      	ldr	r0, [pc, #20]	@ (8016a54 <fiprintf+0x20>)
 8016a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a42:	6800      	ldr	r0, [r0, #0]
 8016a44:	9301      	str	r3, [sp, #4]
 8016a46:	f7ff fe31 	bl	80166ac <_vfiprintf_r>
 8016a4a:	b002      	add	sp, #8
 8016a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a50:	b003      	add	sp, #12
 8016a52:	4770      	bx	lr
 8016a54:	2000004c 	.word	0x2000004c

08016a58 <__swbuf_r>:
 8016a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5a:	460e      	mov	r6, r1
 8016a5c:	4614      	mov	r4, r2
 8016a5e:	4605      	mov	r5, r0
 8016a60:	b118      	cbz	r0, 8016a6a <__swbuf_r+0x12>
 8016a62:	6a03      	ldr	r3, [r0, #32]
 8016a64:	b90b      	cbnz	r3, 8016a6a <__swbuf_r+0x12>
 8016a66:	f7fd f9bb 	bl	8013de0 <__sinit>
 8016a6a:	69a3      	ldr	r3, [r4, #24]
 8016a6c:	60a3      	str	r3, [r4, #8]
 8016a6e:	89a3      	ldrh	r3, [r4, #12]
 8016a70:	071a      	lsls	r2, r3, #28
 8016a72:	d501      	bpl.n	8016a78 <__swbuf_r+0x20>
 8016a74:	6923      	ldr	r3, [r4, #16]
 8016a76:	b943      	cbnz	r3, 8016a8a <__swbuf_r+0x32>
 8016a78:	4621      	mov	r1, r4
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	f000 f82a 	bl	8016ad4 <__swsetup_r>
 8016a80:	b118      	cbz	r0, 8016a8a <__swbuf_r+0x32>
 8016a82:	f04f 37ff 	mov.w	r7, #4294967295
 8016a86:	4638      	mov	r0, r7
 8016a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	6922      	ldr	r2, [r4, #16]
 8016a8e:	1a98      	subs	r0, r3, r2
 8016a90:	6963      	ldr	r3, [r4, #20]
 8016a92:	b2f6      	uxtb	r6, r6
 8016a94:	4283      	cmp	r3, r0
 8016a96:	4637      	mov	r7, r6
 8016a98:	dc05      	bgt.n	8016aa6 <__swbuf_r+0x4e>
 8016a9a:	4621      	mov	r1, r4
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	f7ff ffa1 	bl	80169e4 <_fflush_r>
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	d1ed      	bne.n	8016a82 <__swbuf_r+0x2a>
 8016aa6:	68a3      	ldr	r3, [r4, #8]
 8016aa8:	3b01      	subs	r3, #1
 8016aaa:	60a3      	str	r3, [r4, #8]
 8016aac:	6823      	ldr	r3, [r4, #0]
 8016aae:	1c5a      	adds	r2, r3, #1
 8016ab0:	6022      	str	r2, [r4, #0]
 8016ab2:	701e      	strb	r6, [r3, #0]
 8016ab4:	6962      	ldr	r2, [r4, #20]
 8016ab6:	1c43      	adds	r3, r0, #1
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d004      	beq.n	8016ac6 <__swbuf_r+0x6e>
 8016abc:	89a3      	ldrh	r3, [r4, #12]
 8016abe:	07db      	lsls	r3, r3, #31
 8016ac0:	d5e1      	bpl.n	8016a86 <__swbuf_r+0x2e>
 8016ac2:	2e0a      	cmp	r6, #10
 8016ac4:	d1df      	bne.n	8016a86 <__swbuf_r+0x2e>
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4628      	mov	r0, r5
 8016aca:	f7ff ff8b 	bl	80169e4 <_fflush_r>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d0d9      	beq.n	8016a86 <__swbuf_r+0x2e>
 8016ad2:	e7d6      	b.n	8016a82 <__swbuf_r+0x2a>

08016ad4 <__swsetup_r>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4b29      	ldr	r3, [pc, #164]	@ (8016b7c <__swsetup_r+0xa8>)
 8016ad8:	4605      	mov	r5, r0
 8016ada:	6818      	ldr	r0, [r3, #0]
 8016adc:	460c      	mov	r4, r1
 8016ade:	b118      	cbz	r0, 8016ae8 <__swsetup_r+0x14>
 8016ae0:	6a03      	ldr	r3, [r0, #32]
 8016ae2:	b90b      	cbnz	r3, 8016ae8 <__swsetup_r+0x14>
 8016ae4:	f7fd f97c 	bl	8013de0 <__sinit>
 8016ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aec:	0719      	lsls	r1, r3, #28
 8016aee:	d422      	bmi.n	8016b36 <__swsetup_r+0x62>
 8016af0:	06da      	lsls	r2, r3, #27
 8016af2:	d407      	bmi.n	8016b04 <__swsetup_r+0x30>
 8016af4:	2209      	movs	r2, #9
 8016af6:	602a      	str	r2, [r5, #0]
 8016af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016afc:	81a3      	strh	r3, [r4, #12]
 8016afe:	f04f 30ff 	mov.w	r0, #4294967295
 8016b02:	e033      	b.n	8016b6c <__swsetup_r+0x98>
 8016b04:	0758      	lsls	r0, r3, #29
 8016b06:	d512      	bpl.n	8016b2e <__swsetup_r+0x5a>
 8016b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b0a:	b141      	cbz	r1, 8016b1e <__swsetup_r+0x4a>
 8016b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b10:	4299      	cmp	r1, r3
 8016b12:	d002      	beq.n	8016b1a <__swsetup_r+0x46>
 8016b14:	4628      	mov	r0, r5
 8016b16:	f7fe f8e5 	bl	8014ce4 <_free_r>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b1e:	89a3      	ldrh	r3, [r4, #12]
 8016b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b24:	81a3      	strh	r3, [r4, #12]
 8016b26:	2300      	movs	r3, #0
 8016b28:	6063      	str	r3, [r4, #4]
 8016b2a:	6923      	ldr	r3, [r4, #16]
 8016b2c:	6023      	str	r3, [r4, #0]
 8016b2e:	89a3      	ldrh	r3, [r4, #12]
 8016b30:	f043 0308 	orr.w	r3, r3, #8
 8016b34:	81a3      	strh	r3, [r4, #12]
 8016b36:	6923      	ldr	r3, [r4, #16]
 8016b38:	b94b      	cbnz	r3, 8016b4e <__swsetup_r+0x7a>
 8016b3a:	89a3      	ldrh	r3, [r4, #12]
 8016b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b44:	d003      	beq.n	8016b4e <__swsetup_r+0x7a>
 8016b46:	4621      	mov	r1, r4
 8016b48:	4628      	mov	r0, r5
 8016b4a:	f000 fbf7 	bl	801733c <__smakebuf_r>
 8016b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b52:	f013 0201 	ands.w	r2, r3, #1
 8016b56:	d00a      	beq.n	8016b6e <__swsetup_r+0x9a>
 8016b58:	2200      	movs	r2, #0
 8016b5a:	60a2      	str	r2, [r4, #8]
 8016b5c:	6962      	ldr	r2, [r4, #20]
 8016b5e:	4252      	negs	r2, r2
 8016b60:	61a2      	str	r2, [r4, #24]
 8016b62:	6922      	ldr	r2, [r4, #16]
 8016b64:	b942      	cbnz	r2, 8016b78 <__swsetup_r+0xa4>
 8016b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b6a:	d1c5      	bne.n	8016af8 <__swsetup_r+0x24>
 8016b6c:	bd38      	pop	{r3, r4, r5, pc}
 8016b6e:	0799      	lsls	r1, r3, #30
 8016b70:	bf58      	it	pl
 8016b72:	6962      	ldrpl	r2, [r4, #20]
 8016b74:	60a2      	str	r2, [r4, #8]
 8016b76:	e7f4      	b.n	8016b62 <__swsetup_r+0x8e>
 8016b78:	2000      	movs	r0, #0
 8016b7a:	e7f7      	b.n	8016b6c <__swsetup_r+0x98>
 8016b7c:	2000004c 	.word	0x2000004c

08016b80 <_sbrk_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4d06      	ldr	r5, [pc, #24]	@ (8016b9c <_sbrk_r+0x1c>)
 8016b84:	2300      	movs	r3, #0
 8016b86:	4604      	mov	r4, r0
 8016b88:	4608      	mov	r0, r1
 8016b8a:	602b      	str	r3, [r5, #0]
 8016b8c:	f7ea fd76 	bl	800167c <_sbrk>
 8016b90:	1c43      	adds	r3, r0, #1
 8016b92:	d102      	bne.n	8016b9a <_sbrk_r+0x1a>
 8016b94:	682b      	ldr	r3, [r5, #0]
 8016b96:	b103      	cbz	r3, 8016b9a <_sbrk_r+0x1a>
 8016b98:	6023      	str	r3, [r4, #0]
 8016b9a:	bd38      	pop	{r3, r4, r5, pc}
 8016b9c:	200082a0 	.word	0x200082a0

08016ba0 <nan>:
 8016ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016ba8 <nan+0x8>
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	00000000 	.word	0x00000000
 8016bac:	7ff80000 	.word	0x7ff80000

08016bb0 <abort>:
 8016bb0:	b508      	push	{r3, lr}
 8016bb2:	2006      	movs	r0, #6
 8016bb4:	f000 fc26 	bl	8017404 <raise>
 8016bb8:	2001      	movs	r0, #1
 8016bba:	f7ea fce7 	bl	800158c <_exit>

08016bbe <_calloc_r>:
 8016bbe:	b570      	push	{r4, r5, r6, lr}
 8016bc0:	fba1 5402 	umull	r5, r4, r1, r2
 8016bc4:	b934      	cbnz	r4, 8016bd4 <_calloc_r+0x16>
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	f7fe f900 	bl	8014dcc <_malloc_r>
 8016bcc:	4606      	mov	r6, r0
 8016bce:	b928      	cbnz	r0, 8016bdc <_calloc_r+0x1e>
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	bd70      	pop	{r4, r5, r6, pc}
 8016bd4:	220c      	movs	r2, #12
 8016bd6:	6002      	str	r2, [r0, #0]
 8016bd8:	2600      	movs	r6, #0
 8016bda:	e7f9      	b.n	8016bd0 <_calloc_r+0x12>
 8016bdc:	462a      	mov	r2, r5
 8016bde:	4621      	mov	r1, r4
 8016be0:	f7fd f9d5 	bl	8013f8e <memset>
 8016be4:	e7f4      	b.n	8016bd0 <_calloc_r+0x12>

08016be6 <rshift>:
 8016be6:	6903      	ldr	r3, [r0, #16]
 8016be8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016bf4:	f100 0414 	add.w	r4, r0, #20
 8016bf8:	dd45      	ble.n	8016c86 <rshift+0xa0>
 8016bfa:	f011 011f 	ands.w	r1, r1, #31
 8016bfe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016c02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016c06:	d10c      	bne.n	8016c22 <rshift+0x3c>
 8016c08:	f100 0710 	add.w	r7, r0, #16
 8016c0c:	4629      	mov	r1, r5
 8016c0e:	42b1      	cmp	r1, r6
 8016c10:	d334      	bcc.n	8016c7c <rshift+0x96>
 8016c12:	1a9b      	subs	r3, r3, r2
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	1eea      	subs	r2, r5, #3
 8016c18:	4296      	cmp	r6, r2
 8016c1a:	bf38      	it	cc
 8016c1c:	2300      	movcc	r3, #0
 8016c1e:	4423      	add	r3, r4
 8016c20:	e015      	b.n	8016c4e <rshift+0x68>
 8016c22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016c26:	f1c1 0820 	rsb	r8, r1, #32
 8016c2a:	40cf      	lsrs	r7, r1
 8016c2c:	f105 0e04 	add.w	lr, r5, #4
 8016c30:	46a1      	mov	r9, r4
 8016c32:	4576      	cmp	r6, lr
 8016c34:	46f4      	mov	ip, lr
 8016c36:	d815      	bhi.n	8016c64 <rshift+0x7e>
 8016c38:	1a9a      	subs	r2, r3, r2
 8016c3a:	0092      	lsls	r2, r2, #2
 8016c3c:	3a04      	subs	r2, #4
 8016c3e:	3501      	adds	r5, #1
 8016c40:	42ae      	cmp	r6, r5
 8016c42:	bf38      	it	cc
 8016c44:	2200      	movcc	r2, #0
 8016c46:	18a3      	adds	r3, r4, r2
 8016c48:	50a7      	str	r7, [r4, r2]
 8016c4a:	b107      	cbz	r7, 8016c4e <rshift+0x68>
 8016c4c:	3304      	adds	r3, #4
 8016c4e:	1b1a      	subs	r2, r3, r4
 8016c50:	42a3      	cmp	r3, r4
 8016c52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016c56:	bf08      	it	eq
 8016c58:	2300      	moveq	r3, #0
 8016c5a:	6102      	str	r2, [r0, #16]
 8016c5c:	bf08      	it	eq
 8016c5e:	6143      	streq	r3, [r0, #20]
 8016c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c64:	f8dc c000 	ldr.w	ip, [ip]
 8016c68:	fa0c fc08 	lsl.w	ip, ip, r8
 8016c6c:	ea4c 0707 	orr.w	r7, ip, r7
 8016c70:	f849 7b04 	str.w	r7, [r9], #4
 8016c74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016c78:	40cf      	lsrs	r7, r1
 8016c7a:	e7da      	b.n	8016c32 <rshift+0x4c>
 8016c7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8016c80:	f847 cf04 	str.w	ip, [r7, #4]!
 8016c84:	e7c3      	b.n	8016c0e <rshift+0x28>
 8016c86:	4623      	mov	r3, r4
 8016c88:	e7e1      	b.n	8016c4e <rshift+0x68>

08016c8a <__hexdig_fun>:
 8016c8a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016c8e:	2b09      	cmp	r3, #9
 8016c90:	d802      	bhi.n	8016c98 <__hexdig_fun+0xe>
 8016c92:	3820      	subs	r0, #32
 8016c94:	b2c0      	uxtb	r0, r0
 8016c96:	4770      	bx	lr
 8016c98:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016c9c:	2b05      	cmp	r3, #5
 8016c9e:	d801      	bhi.n	8016ca4 <__hexdig_fun+0x1a>
 8016ca0:	3847      	subs	r0, #71	@ 0x47
 8016ca2:	e7f7      	b.n	8016c94 <__hexdig_fun+0xa>
 8016ca4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016ca8:	2b05      	cmp	r3, #5
 8016caa:	d801      	bhi.n	8016cb0 <__hexdig_fun+0x26>
 8016cac:	3827      	subs	r0, #39	@ 0x27
 8016cae:	e7f1      	b.n	8016c94 <__hexdig_fun+0xa>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	4770      	bx	lr

08016cb4 <__gethex>:
 8016cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb8:	b085      	sub	sp, #20
 8016cba:	468a      	mov	sl, r1
 8016cbc:	9302      	str	r3, [sp, #8]
 8016cbe:	680b      	ldr	r3, [r1, #0]
 8016cc0:	9001      	str	r0, [sp, #4]
 8016cc2:	4690      	mov	r8, r2
 8016cc4:	1c9c      	adds	r4, r3, #2
 8016cc6:	46a1      	mov	r9, r4
 8016cc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016ccc:	2830      	cmp	r0, #48	@ 0x30
 8016cce:	d0fa      	beq.n	8016cc6 <__gethex+0x12>
 8016cd0:	eba9 0303 	sub.w	r3, r9, r3
 8016cd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8016cd8:	f7ff ffd7 	bl	8016c8a <__hexdig_fun>
 8016cdc:	4605      	mov	r5, r0
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d168      	bne.n	8016db4 <__gethex+0x100>
 8016ce2:	49a0      	ldr	r1, [pc, #640]	@ (8016f64 <__gethex+0x2b0>)
 8016ce4:	2201      	movs	r2, #1
 8016ce6:	4648      	mov	r0, r9
 8016ce8:	f7fd f959 	bl	8013f9e <strncmp>
 8016cec:	4607      	mov	r7, r0
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	d167      	bne.n	8016dc2 <__gethex+0x10e>
 8016cf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016cf6:	4626      	mov	r6, r4
 8016cf8:	f7ff ffc7 	bl	8016c8a <__hexdig_fun>
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	d062      	beq.n	8016dc6 <__gethex+0x112>
 8016d00:	4623      	mov	r3, r4
 8016d02:	7818      	ldrb	r0, [r3, #0]
 8016d04:	2830      	cmp	r0, #48	@ 0x30
 8016d06:	4699      	mov	r9, r3
 8016d08:	f103 0301 	add.w	r3, r3, #1
 8016d0c:	d0f9      	beq.n	8016d02 <__gethex+0x4e>
 8016d0e:	f7ff ffbc 	bl	8016c8a <__hexdig_fun>
 8016d12:	fab0 f580 	clz	r5, r0
 8016d16:	096d      	lsrs	r5, r5, #5
 8016d18:	f04f 0b01 	mov.w	fp, #1
 8016d1c:	464a      	mov	r2, r9
 8016d1e:	4616      	mov	r6, r2
 8016d20:	3201      	adds	r2, #1
 8016d22:	7830      	ldrb	r0, [r6, #0]
 8016d24:	f7ff ffb1 	bl	8016c8a <__hexdig_fun>
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	d1f8      	bne.n	8016d1e <__gethex+0x6a>
 8016d2c:	498d      	ldr	r1, [pc, #564]	@ (8016f64 <__gethex+0x2b0>)
 8016d2e:	2201      	movs	r2, #1
 8016d30:	4630      	mov	r0, r6
 8016d32:	f7fd f934 	bl	8013f9e <strncmp>
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d13f      	bne.n	8016dba <__gethex+0x106>
 8016d3a:	b944      	cbnz	r4, 8016d4e <__gethex+0x9a>
 8016d3c:	1c74      	adds	r4, r6, #1
 8016d3e:	4622      	mov	r2, r4
 8016d40:	4616      	mov	r6, r2
 8016d42:	3201      	adds	r2, #1
 8016d44:	7830      	ldrb	r0, [r6, #0]
 8016d46:	f7ff ffa0 	bl	8016c8a <__hexdig_fun>
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d1f8      	bne.n	8016d40 <__gethex+0x8c>
 8016d4e:	1ba4      	subs	r4, r4, r6
 8016d50:	00a7      	lsls	r7, r4, #2
 8016d52:	7833      	ldrb	r3, [r6, #0]
 8016d54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016d58:	2b50      	cmp	r3, #80	@ 0x50
 8016d5a:	d13e      	bne.n	8016dda <__gethex+0x126>
 8016d5c:	7873      	ldrb	r3, [r6, #1]
 8016d5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016d60:	d033      	beq.n	8016dca <__gethex+0x116>
 8016d62:	2b2d      	cmp	r3, #45	@ 0x2d
 8016d64:	d034      	beq.n	8016dd0 <__gethex+0x11c>
 8016d66:	1c71      	adds	r1, r6, #1
 8016d68:	2400      	movs	r4, #0
 8016d6a:	7808      	ldrb	r0, [r1, #0]
 8016d6c:	f7ff ff8d 	bl	8016c8a <__hexdig_fun>
 8016d70:	1e43      	subs	r3, r0, #1
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	2b18      	cmp	r3, #24
 8016d76:	d830      	bhi.n	8016dda <__gethex+0x126>
 8016d78:	f1a0 0210 	sub.w	r2, r0, #16
 8016d7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016d80:	f7ff ff83 	bl	8016c8a <__hexdig_fun>
 8016d84:	f100 3cff 	add.w	ip, r0, #4294967295
 8016d88:	fa5f fc8c 	uxtb.w	ip, ip
 8016d8c:	f1bc 0f18 	cmp.w	ip, #24
 8016d90:	f04f 030a 	mov.w	r3, #10
 8016d94:	d91e      	bls.n	8016dd4 <__gethex+0x120>
 8016d96:	b104      	cbz	r4, 8016d9a <__gethex+0xe6>
 8016d98:	4252      	negs	r2, r2
 8016d9a:	4417      	add	r7, r2
 8016d9c:	f8ca 1000 	str.w	r1, [sl]
 8016da0:	b1ed      	cbz	r5, 8016dde <__gethex+0x12a>
 8016da2:	f1bb 0f00 	cmp.w	fp, #0
 8016da6:	bf0c      	ite	eq
 8016da8:	2506      	moveq	r5, #6
 8016daa:	2500      	movne	r5, #0
 8016dac:	4628      	mov	r0, r5
 8016dae:	b005      	add	sp, #20
 8016db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016db4:	2500      	movs	r5, #0
 8016db6:	462c      	mov	r4, r5
 8016db8:	e7b0      	b.n	8016d1c <__gethex+0x68>
 8016dba:	2c00      	cmp	r4, #0
 8016dbc:	d1c7      	bne.n	8016d4e <__gethex+0x9a>
 8016dbe:	4627      	mov	r7, r4
 8016dc0:	e7c7      	b.n	8016d52 <__gethex+0x9e>
 8016dc2:	464e      	mov	r6, r9
 8016dc4:	462f      	mov	r7, r5
 8016dc6:	2501      	movs	r5, #1
 8016dc8:	e7c3      	b.n	8016d52 <__gethex+0x9e>
 8016dca:	2400      	movs	r4, #0
 8016dcc:	1cb1      	adds	r1, r6, #2
 8016dce:	e7cc      	b.n	8016d6a <__gethex+0xb6>
 8016dd0:	2401      	movs	r4, #1
 8016dd2:	e7fb      	b.n	8016dcc <__gethex+0x118>
 8016dd4:	fb03 0002 	mla	r0, r3, r2, r0
 8016dd8:	e7ce      	b.n	8016d78 <__gethex+0xc4>
 8016dda:	4631      	mov	r1, r6
 8016ddc:	e7de      	b.n	8016d9c <__gethex+0xe8>
 8016dde:	eba6 0309 	sub.w	r3, r6, r9
 8016de2:	3b01      	subs	r3, #1
 8016de4:	4629      	mov	r1, r5
 8016de6:	2b07      	cmp	r3, #7
 8016de8:	dc0a      	bgt.n	8016e00 <__gethex+0x14c>
 8016dea:	9801      	ldr	r0, [sp, #4]
 8016dec:	f7fe f87a 	bl	8014ee4 <_Balloc>
 8016df0:	4604      	mov	r4, r0
 8016df2:	b940      	cbnz	r0, 8016e06 <__gethex+0x152>
 8016df4:	4b5c      	ldr	r3, [pc, #368]	@ (8016f68 <__gethex+0x2b4>)
 8016df6:	4602      	mov	r2, r0
 8016df8:	21e4      	movs	r1, #228	@ 0xe4
 8016dfa:	485c      	ldr	r0, [pc, #368]	@ (8016f6c <__gethex+0x2b8>)
 8016dfc:	f7fd f96e 	bl	80140dc <__assert_func>
 8016e00:	3101      	adds	r1, #1
 8016e02:	105b      	asrs	r3, r3, #1
 8016e04:	e7ef      	b.n	8016de6 <__gethex+0x132>
 8016e06:	f100 0a14 	add.w	sl, r0, #20
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	4655      	mov	r5, sl
 8016e0e:	469b      	mov	fp, r3
 8016e10:	45b1      	cmp	r9, r6
 8016e12:	d337      	bcc.n	8016e84 <__gethex+0x1d0>
 8016e14:	f845 bb04 	str.w	fp, [r5], #4
 8016e18:	eba5 050a 	sub.w	r5, r5, sl
 8016e1c:	10ad      	asrs	r5, r5, #2
 8016e1e:	6125      	str	r5, [r4, #16]
 8016e20:	4658      	mov	r0, fp
 8016e22:	f7fe f951 	bl	80150c8 <__hi0bits>
 8016e26:	016d      	lsls	r5, r5, #5
 8016e28:	f8d8 6000 	ldr.w	r6, [r8]
 8016e2c:	1a2d      	subs	r5, r5, r0
 8016e2e:	42b5      	cmp	r5, r6
 8016e30:	dd54      	ble.n	8016edc <__gethex+0x228>
 8016e32:	1bad      	subs	r5, r5, r6
 8016e34:	4629      	mov	r1, r5
 8016e36:	4620      	mov	r0, r4
 8016e38:	f7fe fcda 	bl	80157f0 <__any_on>
 8016e3c:	4681      	mov	r9, r0
 8016e3e:	b178      	cbz	r0, 8016e60 <__gethex+0x1ac>
 8016e40:	1e6b      	subs	r3, r5, #1
 8016e42:	1159      	asrs	r1, r3, #5
 8016e44:	f003 021f 	and.w	r2, r3, #31
 8016e48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016e4c:	f04f 0901 	mov.w	r9, #1
 8016e50:	fa09 f202 	lsl.w	r2, r9, r2
 8016e54:	420a      	tst	r2, r1
 8016e56:	d003      	beq.n	8016e60 <__gethex+0x1ac>
 8016e58:	454b      	cmp	r3, r9
 8016e5a:	dc36      	bgt.n	8016eca <__gethex+0x216>
 8016e5c:	f04f 0902 	mov.w	r9, #2
 8016e60:	4629      	mov	r1, r5
 8016e62:	4620      	mov	r0, r4
 8016e64:	f7ff febf 	bl	8016be6 <rshift>
 8016e68:	442f      	add	r7, r5
 8016e6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e6e:	42bb      	cmp	r3, r7
 8016e70:	da42      	bge.n	8016ef8 <__gethex+0x244>
 8016e72:	9801      	ldr	r0, [sp, #4]
 8016e74:	4621      	mov	r1, r4
 8016e76:	f7fe f875 	bl	8014f64 <_Bfree>
 8016e7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	6013      	str	r3, [r2, #0]
 8016e80:	25a3      	movs	r5, #163	@ 0xa3
 8016e82:	e793      	b.n	8016dac <__gethex+0xf8>
 8016e84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016e88:	2a2e      	cmp	r2, #46	@ 0x2e
 8016e8a:	d012      	beq.n	8016eb2 <__gethex+0x1fe>
 8016e8c:	2b20      	cmp	r3, #32
 8016e8e:	d104      	bne.n	8016e9a <__gethex+0x1e6>
 8016e90:	f845 bb04 	str.w	fp, [r5], #4
 8016e94:	f04f 0b00 	mov.w	fp, #0
 8016e98:	465b      	mov	r3, fp
 8016e9a:	7830      	ldrb	r0, [r6, #0]
 8016e9c:	9303      	str	r3, [sp, #12]
 8016e9e:	f7ff fef4 	bl	8016c8a <__hexdig_fun>
 8016ea2:	9b03      	ldr	r3, [sp, #12]
 8016ea4:	f000 000f 	and.w	r0, r0, #15
 8016ea8:	4098      	lsls	r0, r3
 8016eaa:	ea4b 0b00 	orr.w	fp, fp, r0
 8016eae:	3304      	adds	r3, #4
 8016eb0:	e7ae      	b.n	8016e10 <__gethex+0x15c>
 8016eb2:	45b1      	cmp	r9, r6
 8016eb4:	d8ea      	bhi.n	8016e8c <__gethex+0x1d8>
 8016eb6:	492b      	ldr	r1, [pc, #172]	@ (8016f64 <__gethex+0x2b0>)
 8016eb8:	9303      	str	r3, [sp, #12]
 8016eba:	2201      	movs	r2, #1
 8016ebc:	4630      	mov	r0, r6
 8016ebe:	f7fd f86e 	bl	8013f9e <strncmp>
 8016ec2:	9b03      	ldr	r3, [sp, #12]
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d1e1      	bne.n	8016e8c <__gethex+0x1d8>
 8016ec8:	e7a2      	b.n	8016e10 <__gethex+0x15c>
 8016eca:	1ea9      	subs	r1, r5, #2
 8016ecc:	4620      	mov	r0, r4
 8016ece:	f7fe fc8f 	bl	80157f0 <__any_on>
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d0c2      	beq.n	8016e5c <__gethex+0x1a8>
 8016ed6:	f04f 0903 	mov.w	r9, #3
 8016eda:	e7c1      	b.n	8016e60 <__gethex+0x1ac>
 8016edc:	da09      	bge.n	8016ef2 <__gethex+0x23e>
 8016ede:	1b75      	subs	r5, r6, r5
 8016ee0:	4621      	mov	r1, r4
 8016ee2:	9801      	ldr	r0, [sp, #4]
 8016ee4:	462a      	mov	r2, r5
 8016ee6:	f7fe fa4d 	bl	8015384 <__lshift>
 8016eea:	1b7f      	subs	r7, r7, r5
 8016eec:	4604      	mov	r4, r0
 8016eee:	f100 0a14 	add.w	sl, r0, #20
 8016ef2:	f04f 0900 	mov.w	r9, #0
 8016ef6:	e7b8      	b.n	8016e6a <__gethex+0x1b6>
 8016ef8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016efc:	42bd      	cmp	r5, r7
 8016efe:	dd6f      	ble.n	8016fe0 <__gethex+0x32c>
 8016f00:	1bed      	subs	r5, r5, r7
 8016f02:	42ae      	cmp	r6, r5
 8016f04:	dc34      	bgt.n	8016f70 <__gethex+0x2bc>
 8016f06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016f0a:	2b02      	cmp	r3, #2
 8016f0c:	d022      	beq.n	8016f54 <__gethex+0x2a0>
 8016f0e:	2b03      	cmp	r3, #3
 8016f10:	d024      	beq.n	8016f5c <__gethex+0x2a8>
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	d115      	bne.n	8016f42 <__gethex+0x28e>
 8016f16:	42ae      	cmp	r6, r5
 8016f18:	d113      	bne.n	8016f42 <__gethex+0x28e>
 8016f1a:	2e01      	cmp	r6, #1
 8016f1c:	d10b      	bne.n	8016f36 <__gethex+0x282>
 8016f1e:	9a02      	ldr	r2, [sp, #8]
 8016f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016f24:	6013      	str	r3, [r2, #0]
 8016f26:	2301      	movs	r3, #1
 8016f28:	6123      	str	r3, [r4, #16]
 8016f2a:	f8ca 3000 	str.w	r3, [sl]
 8016f2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f30:	2562      	movs	r5, #98	@ 0x62
 8016f32:	601c      	str	r4, [r3, #0]
 8016f34:	e73a      	b.n	8016dac <__gethex+0xf8>
 8016f36:	1e71      	subs	r1, r6, #1
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f7fe fc59 	bl	80157f0 <__any_on>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d1ed      	bne.n	8016f1e <__gethex+0x26a>
 8016f42:	9801      	ldr	r0, [sp, #4]
 8016f44:	4621      	mov	r1, r4
 8016f46:	f7fe f80d 	bl	8014f64 <_Bfree>
 8016f4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	6013      	str	r3, [r2, #0]
 8016f50:	2550      	movs	r5, #80	@ 0x50
 8016f52:	e72b      	b.n	8016dac <__gethex+0xf8>
 8016f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d1f3      	bne.n	8016f42 <__gethex+0x28e>
 8016f5a:	e7e0      	b.n	8016f1e <__gethex+0x26a>
 8016f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d1dd      	bne.n	8016f1e <__gethex+0x26a>
 8016f62:	e7ee      	b.n	8016f42 <__gethex+0x28e>
 8016f64:	0801add9 	.word	0x0801add9
 8016f68:	0801ad6f 	.word	0x0801ad6f
 8016f6c:	0801adf4 	.word	0x0801adf4
 8016f70:	1e6f      	subs	r7, r5, #1
 8016f72:	f1b9 0f00 	cmp.w	r9, #0
 8016f76:	d130      	bne.n	8016fda <__gethex+0x326>
 8016f78:	b127      	cbz	r7, 8016f84 <__gethex+0x2d0>
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f7fe fc37 	bl	80157f0 <__any_on>
 8016f82:	4681      	mov	r9, r0
 8016f84:	117a      	asrs	r2, r7, #5
 8016f86:	2301      	movs	r3, #1
 8016f88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016f8c:	f007 071f 	and.w	r7, r7, #31
 8016f90:	40bb      	lsls	r3, r7
 8016f92:	4213      	tst	r3, r2
 8016f94:	4629      	mov	r1, r5
 8016f96:	4620      	mov	r0, r4
 8016f98:	bf18      	it	ne
 8016f9a:	f049 0902 	orrne.w	r9, r9, #2
 8016f9e:	f7ff fe22 	bl	8016be6 <rshift>
 8016fa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016fa6:	1b76      	subs	r6, r6, r5
 8016fa8:	2502      	movs	r5, #2
 8016faa:	f1b9 0f00 	cmp.w	r9, #0
 8016fae:	d047      	beq.n	8017040 <__gethex+0x38c>
 8016fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016fb4:	2b02      	cmp	r3, #2
 8016fb6:	d015      	beq.n	8016fe4 <__gethex+0x330>
 8016fb8:	2b03      	cmp	r3, #3
 8016fba:	d017      	beq.n	8016fec <__gethex+0x338>
 8016fbc:	2b01      	cmp	r3, #1
 8016fbe:	d109      	bne.n	8016fd4 <__gethex+0x320>
 8016fc0:	f019 0f02 	tst.w	r9, #2
 8016fc4:	d006      	beq.n	8016fd4 <__gethex+0x320>
 8016fc6:	f8da 3000 	ldr.w	r3, [sl]
 8016fca:	ea49 0903 	orr.w	r9, r9, r3
 8016fce:	f019 0f01 	tst.w	r9, #1
 8016fd2:	d10e      	bne.n	8016ff2 <__gethex+0x33e>
 8016fd4:	f045 0510 	orr.w	r5, r5, #16
 8016fd8:	e032      	b.n	8017040 <__gethex+0x38c>
 8016fda:	f04f 0901 	mov.w	r9, #1
 8016fde:	e7d1      	b.n	8016f84 <__gethex+0x2d0>
 8016fe0:	2501      	movs	r5, #1
 8016fe2:	e7e2      	b.n	8016faa <__gethex+0x2f6>
 8016fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fe6:	f1c3 0301 	rsb	r3, r3, #1
 8016fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d0f0      	beq.n	8016fd4 <__gethex+0x320>
 8016ff2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016ff6:	f104 0314 	add.w	r3, r4, #20
 8016ffa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016ffe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017002:	f04f 0c00 	mov.w	ip, #0
 8017006:	4618      	mov	r0, r3
 8017008:	f853 2b04 	ldr.w	r2, [r3], #4
 801700c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017010:	d01b      	beq.n	801704a <__gethex+0x396>
 8017012:	3201      	adds	r2, #1
 8017014:	6002      	str	r2, [r0, #0]
 8017016:	2d02      	cmp	r5, #2
 8017018:	f104 0314 	add.w	r3, r4, #20
 801701c:	d13c      	bne.n	8017098 <__gethex+0x3e4>
 801701e:	f8d8 2000 	ldr.w	r2, [r8]
 8017022:	3a01      	subs	r2, #1
 8017024:	42b2      	cmp	r2, r6
 8017026:	d109      	bne.n	801703c <__gethex+0x388>
 8017028:	1171      	asrs	r1, r6, #5
 801702a:	2201      	movs	r2, #1
 801702c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017030:	f006 061f 	and.w	r6, r6, #31
 8017034:	fa02 f606 	lsl.w	r6, r2, r6
 8017038:	421e      	tst	r6, r3
 801703a:	d13a      	bne.n	80170b2 <__gethex+0x3fe>
 801703c:	f045 0520 	orr.w	r5, r5, #32
 8017040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017042:	601c      	str	r4, [r3, #0]
 8017044:	9b02      	ldr	r3, [sp, #8]
 8017046:	601f      	str	r7, [r3, #0]
 8017048:	e6b0      	b.n	8016dac <__gethex+0xf8>
 801704a:	4299      	cmp	r1, r3
 801704c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017050:	d8d9      	bhi.n	8017006 <__gethex+0x352>
 8017052:	68a3      	ldr	r3, [r4, #8]
 8017054:	459b      	cmp	fp, r3
 8017056:	db17      	blt.n	8017088 <__gethex+0x3d4>
 8017058:	6861      	ldr	r1, [r4, #4]
 801705a:	9801      	ldr	r0, [sp, #4]
 801705c:	3101      	adds	r1, #1
 801705e:	f7fd ff41 	bl	8014ee4 <_Balloc>
 8017062:	4681      	mov	r9, r0
 8017064:	b918      	cbnz	r0, 801706e <__gethex+0x3ba>
 8017066:	4b1a      	ldr	r3, [pc, #104]	@ (80170d0 <__gethex+0x41c>)
 8017068:	4602      	mov	r2, r0
 801706a:	2184      	movs	r1, #132	@ 0x84
 801706c:	e6c5      	b.n	8016dfa <__gethex+0x146>
 801706e:	6922      	ldr	r2, [r4, #16]
 8017070:	3202      	adds	r2, #2
 8017072:	f104 010c 	add.w	r1, r4, #12
 8017076:	0092      	lsls	r2, r2, #2
 8017078:	300c      	adds	r0, #12
 801707a:	f7fd f81a 	bl	80140b2 <memcpy>
 801707e:	4621      	mov	r1, r4
 8017080:	9801      	ldr	r0, [sp, #4]
 8017082:	f7fd ff6f 	bl	8014f64 <_Bfree>
 8017086:	464c      	mov	r4, r9
 8017088:	6923      	ldr	r3, [r4, #16]
 801708a:	1c5a      	adds	r2, r3, #1
 801708c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017090:	6122      	str	r2, [r4, #16]
 8017092:	2201      	movs	r2, #1
 8017094:	615a      	str	r2, [r3, #20]
 8017096:	e7be      	b.n	8017016 <__gethex+0x362>
 8017098:	6922      	ldr	r2, [r4, #16]
 801709a:	455a      	cmp	r2, fp
 801709c:	dd0b      	ble.n	80170b6 <__gethex+0x402>
 801709e:	2101      	movs	r1, #1
 80170a0:	4620      	mov	r0, r4
 80170a2:	f7ff fda0 	bl	8016be6 <rshift>
 80170a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170aa:	3701      	adds	r7, #1
 80170ac:	42bb      	cmp	r3, r7
 80170ae:	f6ff aee0 	blt.w	8016e72 <__gethex+0x1be>
 80170b2:	2501      	movs	r5, #1
 80170b4:	e7c2      	b.n	801703c <__gethex+0x388>
 80170b6:	f016 061f 	ands.w	r6, r6, #31
 80170ba:	d0fa      	beq.n	80170b2 <__gethex+0x3fe>
 80170bc:	4453      	add	r3, sl
 80170be:	f1c6 0620 	rsb	r6, r6, #32
 80170c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80170c6:	f7fd ffff 	bl	80150c8 <__hi0bits>
 80170ca:	42b0      	cmp	r0, r6
 80170cc:	dbe7      	blt.n	801709e <__gethex+0x3ea>
 80170ce:	e7f0      	b.n	80170b2 <__gethex+0x3fe>
 80170d0:	0801ad6f 	.word	0x0801ad6f

080170d4 <L_shift>:
 80170d4:	f1c2 0208 	rsb	r2, r2, #8
 80170d8:	0092      	lsls	r2, r2, #2
 80170da:	b570      	push	{r4, r5, r6, lr}
 80170dc:	f1c2 0620 	rsb	r6, r2, #32
 80170e0:	6843      	ldr	r3, [r0, #4]
 80170e2:	6804      	ldr	r4, [r0, #0]
 80170e4:	fa03 f506 	lsl.w	r5, r3, r6
 80170e8:	432c      	orrs	r4, r5
 80170ea:	40d3      	lsrs	r3, r2
 80170ec:	6004      	str	r4, [r0, #0]
 80170ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80170f2:	4288      	cmp	r0, r1
 80170f4:	d3f4      	bcc.n	80170e0 <L_shift+0xc>
 80170f6:	bd70      	pop	{r4, r5, r6, pc}

080170f8 <__match>:
 80170f8:	b530      	push	{r4, r5, lr}
 80170fa:	6803      	ldr	r3, [r0, #0]
 80170fc:	3301      	adds	r3, #1
 80170fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017102:	b914      	cbnz	r4, 801710a <__match+0x12>
 8017104:	6003      	str	r3, [r0, #0]
 8017106:	2001      	movs	r0, #1
 8017108:	bd30      	pop	{r4, r5, pc}
 801710a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801710e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017112:	2d19      	cmp	r5, #25
 8017114:	bf98      	it	ls
 8017116:	3220      	addls	r2, #32
 8017118:	42a2      	cmp	r2, r4
 801711a:	d0f0      	beq.n	80170fe <__match+0x6>
 801711c:	2000      	movs	r0, #0
 801711e:	e7f3      	b.n	8017108 <__match+0x10>

08017120 <__hexnan>:
 8017120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017124:	680b      	ldr	r3, [r1, #0]
 8017126:	6801      	ldr	r1, [r0, #0]
 8017128:	115e      	asrs	r6, r3, #5
 801712a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801712e:	f013 031f 	ands.w	r3, r3, #31
 8017132:	b087      	sub	sp, #28
 8017134:	bf18      	it	ne
 8017136:	3604      	addne	r6, #4
 8017138:	2500      	movs	r5, #0
 801713a:	1f37      	subs	r7, r6, #4
 801713c:	4682      	mov	sl, r0
 801713e:	4690      	mov	r8, r2
 8017140:	9301      	str	r3, [sp, #4]
 8017142:	f846 5c04 	str.w	r5, [r6, #-4]
 8017146:	46b9      	mov	r9, r7
 8017148:	463c      	mov	r4, r7
 801714a:	9502      	str	r5, [sp, #8]
 801714c:	46ab      	mov	fp, r5
 801714e:	784a      	ldrb	r2, [r1, #1]
 8017150:	1c4b      	adds	r3, r1, #1
 8017152:	9303      	str	r3, [sp, #12]
 8017154:	b342      	cbz	r2, 80171a8 <__hexnan+0x88>
 8017156:	4610      	mov	r0, r2
 8017158:	9105      	str	r1, [sp, #20]
 801715a:	9204      	str	r2, [sp, #16]
 801715c:	f7ff fd95 	bl	8016c8a <__hexdig_fun>
 8017160:	2800      	cmp	r0, #0
 8017162:	d151      	bne.n	8017208 <__hexnan+0xe8>
 8017164:	9a04      	ldr	r2, [sp, #16]
 8017166:	9905      	ldr	r1, [sp, #20]
 8017168:	2a20      	cmp	r2, #32
 801716a:	d818      	bhi.n	801719e <__hexnan+0x7e>
 801716c:	9b02      	ldr	r3, [sp, #8]
 801716e:	459b      	cmp	fp, r3
 8017170:	dd13      	ble.n	801719a <__hexnan+0x7a>
 8017172:	454c      	cmp	r4, r9
 8017174:	d206      	bcs.n	8017184 <__hexnan+0x64>
 8017176:	2d07      	cmp	r5, #7
 8017178:	dc04      	bgt.n	8017184 <__hexnan+0x64>
 801717a:	462a      	mov	r2, r5
 801717c:	4649      	mov	r1, r9
 801717e:	4620      	mov	r0, r4
 8017180:	f7ff ffa8 	bl	80170d4 <L_shift>
 8017184:	4544      	cmp	r4, r8
 8017186:	d952      	bls.n	801722e <__hexnan+0x10e>
 8017188:	2300      	movs	r3, #0
 801718a:	f1a4 0904 	sub.w	r9, r4, #4
 801718e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017192:	f8cd b008 	str.w	fp, [sp, #8]
 8017196:	464c      	mov	r4, r9
 8017198:	461d      	mov	r5, r3
 801719a:	9903      	ldr	r1, [sp, #12]
 801719c:	e7d7      	b.n	801714e <__hexnan+0x2e>
 801719e:	2a29      	cmp	r2, #41	@ 0x29
 80171a0:	d157      	bne.n	8017252 <__hexnan+0x132>
 80171a2:	3102      	adds	r1, #2
 80171a4:	f8ca 1000 	str.w	r1, [sl]
 80171a8:	f1bb 0f00 	cmp.w	fp, #0
 80171ac:	d051      	beq.n	8017252 <__hexnan+0x132>
 80171ae:	454c      	cmp	r4, r9
 80171b0:	d206      	bcs.n	80171c0 <__hexnan+0xa0>
 80171b2:	2d07      	cmp	r5, #7
 80171b4:	dc04      	bgt.n	80171c0 <__hexnan+0xa0>
 80171b6:	462a      	mov	r2, r5
 80171b8:	4649      	mov	r1, r9
 80171ba:	4620      	mov	r0, r4
 80171bc:	f7ff ff8a 	bl	80170d4 <L_shift>
 80171c0:	4544      	cmp	r4, r8
 80171c2:	d936      	bls.n	8017232 <__hexnan+0x112>
 80171c4:	f1a8 0204 	sub.w	r2, r8, #4
 80171c8:	4623      	mov	r3, r4
 80171ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80171ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80171d2:	429f      	cmp	r7, r3
 80171d4:	d2f9      	bcs.n	80171ca <__hexnan+0xaa>
 80171d6:	1b3b      	subs	r3, r7, r4
 80171d8:	f023 0303 	bic.w	r3, r3, #3
 80171dc:	3304      	adds	r3, #4
 80171de:	3401      	adds	r4, #1
 80171e0:	3e03      	subs	r6, #3
 80171e2:	42b4      	cmp	r4, r6
 80171e4:	bf88      	it	hi
 80171e6:	2304      	movhi	r3, #4
 80171e8:	4443      	add	r3, r8
 80171ea:	2200      	movs	r2, #0
 80171ec:	f843 2b04 	str.w	r2, [r3], #4
 80171f0:	429f      	cmp	r7, r3
 80171f2:	d2fb      	bcs.n	80171ec <__hexnan+0xcc>
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	b91b      	cbnz	r3, 8017200 <__hexnan+0xe0>
 80171f8:	4547      	cmp	r7, r8
 80171fa:	d128      	bne.n	801724e <__hexnan+0x12e>
 80171fc:	2301      	movs	r3, #1
 80171fe:	603b      	str	r3, [r7, #0]
 8017200:	2005      	movs	r0, #5
 8017202:	b007      	add	sp, #28
 8017204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017208:	3501      	adds	r5, #1
 801720a:	2d08      	cmp	r5, #8
 801720c:	f10b 0b01 	add.w	fp, fp, #1
 8017210:	dd06      	ble.n	8017220 <__hexnan+0x100>
 8017212:	4544      	cmp	r4, r8
 8017214:	d9c1      	bls.n	801719a <__hexnan+0x7a>
 8017216:	2300      	movs	r3, #0
 8017218:	f844 3c04 	str.w	r3, [r4, #-4]
 801721c:	2501      	movs	r5, #1
 801721e:	3c04      	subs	r4, #4
 8017220:	6822      	ldr	r2, [r4, #0]
 8017222:	f000 000f 	and.w	r0, r0, #15
 8017226:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801722a:	6020      	str	r0, [r4, #0]
 801722c:	e7b5      	b.n	801719a <__hexnan+0x7a>
 801722e:	2508      	movs	r5, #8
 8017230:	e7b3      	b.n	801719a <__hexnan+0x7a>
 8017232:	9b01      	ldr	r3, [sp, #4]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d0dd      	beq.n	80171f4 <__hexnan+0xd4>
 8017238:	f1c3 0320 	rsb	r3, r3, #32
 801723c:	f04f 32ff 	mov.w	r2, #4294967295
 8017240:	40da      	lsrs	r2, r3
 8017242:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017246:	4013      	ands	r3, r2
 8017248:	f846 3c04 	str.w	r3, [r6, #-4]
 801724c:	e7d2      	b.n	80171f4 <__hexnan+0xd4>
 801724e:	3f04      	subs	r7, #4
 8017250:	e7d0      	b.n	80171f4 <__hexnan+0xd4>
 8017252:	2004      	movs	r0, #4
 8017254:	e7d5      	b.n	8017202 <__hexnan+0xe2>

08017256 <__ascii_mbtowc>:
 8017256:	b082      	sub	sp, #8
 8017258:	b901      	cbnz	r1, 801725c <__ascii_mbtowc+0x6>
 801725a:	a901      	add	r1, sp, #4
 801725c:	b142      	cbz	r2, 8017270 <__ascii_mbtowc+0x1a>
 801725e:	b14b      	cbz	r3, 8017274 <__ascii_mbtowc+0x1e>
 8017260:	7813      	ldrb	r3, [r2, #0]
 8017262:	600b      	str	r3, [r1, #0]
 8017264:	7812      	ldrb	r2, [r2, #0]
 8017266:	1e10      	subs	r0, r2, #0
 8017268:	bf18      	it	ne
 801726a:	2001      	movne	r0, #1
 801726c:	b002      	add	sp, #8
 801726e:	4770      	bx	lr
 8017270:	4610      	mov	r0, r2
 8017272:	e7fb      	b.n	801726c <__ascii_mbtowc+0x16>
 8017274:	f06f 0001 	mvn.w	r0, #1
 8017278:	e7f8      	b.n	801726c <__ascii_mbtowc+0x16>

0801727a <_realloc_r>:
 801727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727e:	4607      	mov	r7, r0
 8017280:	4614      	mov	r4, r2
 8017282:	460d      	mov	r5, r1
 8017284:	b921      	cbnz	r1, 8017290 <_realloc_r+0x16>
 8017286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801728a:	4611      	mov	r1, r2
 801728c:	f7fd bd9e 	b.w	8014dcc <_malloc_r>
 8017290:	b92a      	cbnz	r2, 801729e <_realloc_r+0x24>
 8017292:	f7fd fd27 	bl	8014ce4 <_free_r>
 8017296:	4625      	mov	r5, r4
 8017298:	4628      	mov	r0, r5
 801729a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801729e:	f000 f8ef 	bl	8017480 <_malloc_usable_size_r>
 80172a2:	4284      	cmp	r4, r0
 80172a4:	4606      	mov	r6, r0
 80172a6:	d802      	bhi.n	80172ae <_realloc_r+0x34>
 80172a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80172ac:	d8f4      	bhi.n	8017298 <_realloc_r+0x1e>
 80172ae:	4621      	mov	r1, r4
 80172b0:	4638      	mov	r0, r7
 80172b2:	f7fd fd8b 	bl	8014dcc <_malloc_r>
 80172b6:	4680      	mov	r8, r0
 80172b8:	b908      	cbnz	r0, 80172be <_realloc_r+0x44>
 80172ba:	4645      	mov	r5, r8
 80172bc:	e7ec      	b.n	8017298 <_realloc_r+0x1e>
 80172be:	42b4      	cmp	r4, r6
 80172c0:	4622      	mov	r2, r4
 80172c2:	4629      	mov	r1, r5
 80172c4:	bf28      	it	cs
 80172c6:	4632      	movcs	r2, r6
 80172c8:	f7fc fef3 	bl	80140b2 <memcpy>
 80172cc:	4629      	mov	r1, r5
 80172ce:	4638      	mov	r0, r7
 80172d0:	f7fd fd08 	bl	8014ce4 <_free_r>
 80172d4:	e7f1      	b.n	80172ba <_realloc_r+0x40>

080172d6 <__ascii_wctomb>:
 80172d6:	4603      	mov	r3, r0
 80172d8:	4608      	mov	r0, r1
 80172da:	b141      	cbz	r1, 80172ee <__ascii_wctomb+0x18>
 80172dc:	2aff      	cmp	r2, #255	@ 0xff
 80172de:	d904      	bls.n	80172ea <__ascii_wctomb+0x14>
 80172e0:	228a      	movs	r2, #138	@ 0x8a
 80172e2:	601a      	str	r2, [r3, #0]
 80172e4:	f04f 30ff 	mov.w	r0, #4294967295
 80172e8:	4770      	bx	lr
 80172ea:	700a      	strb	r2, [r1, #0]
 80172ec:	2001      	movs	r0, #1
 80172ee:	4770      	bx	lr

080172f0 <__swhatbuf_r>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	460c      	mov	r4, r1
 80172f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f8:	2900      	cmp	r1, #0
 80172fa:	b096      	sub	sp, #88	@ 0x58
 80172fc:	4615      	mov	r5, r2
 80172fe:	461e      	mov	r6, r3
 8017300:	da0d      	bge.n	801731e <__swhatbuf_r+0x2e>
 8017302:	89a3      	ldrh	r3, [r4, #12]
 8017304:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017308:	f04f 0100 	mov.w	r1, #0
 801730c:	bf14      	ite	ne
 801730e:	2340      	movne	r3, #64	@ 0x40
 8017310:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017314:	2000      	movs	r0, #0
 8017316:	6031      	str	r1, [r6, #0]
 8017318:	602b      	str	r3, [r5, #0]
 801731a:	b016      	add	sp, #88	@ 0x58
 801731c:	bd70      	pop	{r4, r5, r6, pc}
 801731e:	466a      	mov	r2, sp
 8017320:	f000 f878 	bl	8017414 <_fstat_r>
 8017324:	2800      	cmp	r0, #0
 8017326:	dbec      	blt.n	8017302 <__swhatbuf_r+0x12>
 8017328:	9901      	ldr	r1, [sp, #4]
 801732a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801732e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017332:	4259      	negs	r1, r3
 8017334:	4159      	adcs	r1, r3
 8017336:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801733a:	e7eb      	b.n	8017314 <__swhatbuf_r+0x24>

0801733c <__smakebuf_r>:
 801733c:	898b      	ldrh	r3, [r1, #12]
 801733e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017340:	079d      	lsls	r5, r3, #30
 8017342:	4606      	mov	r6, r0
 8017344:	460c      	mov	r4, r1
 8017346:	d507      	bpl.n	8017358 <__smakebuf_r+0x1c>
 8017348:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801734c:	6023      	str	r3, [r4, #0]
 801734e:	6123      	str	r3, [r4, #16]
 8017350:	2301      	movs	r3, #1
 8017352:	6163      	str	r3, [r4, #20]
 8017354:	b003      	add	sp, #12
 8017356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017358:	ab01      	add	r3, sp, #4
 801735a:	466a      	mov	r2, sp
 801735c:	f7ff ffc8 	bl	80172f0 <__swhatbuf_r>
 8017360:	9f00      	ldr	r7, [sp, #0]
 8017362:	4605      	mov	r5, r0
 8017364:	4639      	mov	r1, r7
 8017366:	4630      	mov	r0, r6
 8017368:	f7fd fd30 	bl	8014dcc <_malloc_r>
 801736c:	b948      	cbnz	r0, 8017382 <__smakebuf_r+0x46>
 801736e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017372:	059a      	lsls	r2, r3, #22
 8017374:	d4ee      	bmi.n	8017354 <__smakebuf_r+0x18>
 8017376:	f023 0303 	bic.w	r3, r3, #3
 801737a:	f043 0302 	orr.w	r3, r3, #2
 801737e:	81a3      	strh	r3, [r4, #12]
 8017380:	e7e2      	b.n	8017348 <__smakebuf_r+0xc>
 8017382:	89a3      	ldrh	r3, [r4, #12]
 8017384:	6020      	str	r0, [r4, #0]
 8017386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801738a:	81a3      	strh	r3, [r4, #12]
 801738c:	9b01      	ldr	r3, [sp, #4]
 801738e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017392:	b15b      	cbz	r3, 80173ac <__smakebuf_r+0x70>
 8017394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017398:	4630      	mov	r0, r6
 801739a:	f000 f84d 	bl	8017438 <_isatty_r>
 801739e:	b128      	cbz	r0, 80173ac <__smakebuf_r+0x70>
 80173a0:	89a3      	ldrh	r3, [r4, #12]
 80173a2:	f023 0303 	bic.w	r3, r3, #3
 80173a6:	f043 0301 	orr.w	r3, r3, #1
 80173aa:	81a3      	strh	r3, [r4, #12]
 80173ac:	89a3      	ldrh	r3, [r4, #12]
 80173ae:	431d      	orrs	r5, r3
 80173b0:	81a5      	strh	r5, [r4, #12]
 80173b2:	e7cf      	b.n	8017354 <__smakebuf_r+0x18>

080173b4 <_raise_r>:
 80173b4:	291f      	cmp	r1, #31
 80173b6:	b538      	push	{r3, r4, r5, lr}
 80173b8:	4605      	mov	r5, r0
 80173ba:	460c      	mov	r4, r1
 80173bc:	d904      	bls.n	80173c8 <_raise_r+0x14>
 80173be:	2316      	movs	r3, #22
 80173c0:	6003      	str	r3, [r0, #0]
 80173c2:	f04f 30ff 	mov.w	r0, #4294967295
 80173c6:	bd38      	pop	{r3, r4, r5, pc}
 80173c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80173ca:	b112      	cbz	r2, 80173d2 <_raise_r+0x1e>
 80173cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173d0:	b94b      	cbnz	r3, 80173e6 <_raise_r+0x32>
 80173d2:	4628      	mov	r0, r5
 80173d4:	f000 f852 	bl	801747c <_getpid_r>
 80173d8:	4622      	mov	r2, r4
 80173da:	4601      	mov	r1, r0
 80173dc:	4628      	mov	r0, r5
 80173de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173e2:	f000 b839 	b.w	8017458 <_kill_r>
 80173e6:	2b01      	cmp	r3, #1
 80173e8:	d00a      	beq.n	8017400 <_raise_r+0x4c>
 80173ea:	1c59      	adds	r1, r3, #1
 80173ec:	d103      	bne.n	80173f6 <_raise_r+0x42>
 80173ee:	2316      	movs	r3, #22
 80173f0:	6003      	str	r3, [r0, #0]
 80173f2:	2001      	movs	r0, #1
 80173f4:	e7e7      	b.n	80173c6 <_raise_r+0x12>
 80173f6:	2100      	movs	r1, #0
 80173f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80173fc:	4620      	mov	r0, r4
 80173fe:	4798      	blx	r3
 8017400:	2000      	movs	r0, #0
 8017402:	e7e0      	b.n	80173c6 <_raise_r+0x12>

08017404 <raise>:
 8017404:	4b02      	ldr	r3, [pc, #8]	@ (8017410 <raise+0xc>)
 8017406:	4601      	mov	r1, r0
 8017408:	6818      	ldr	r0, [r3, #0]
 801740a:	f7ff bfd3 	b.w	80173b4 <_raise_r>
 801740e:	bf00      	nop
 8017410:	2000004c 	.word	0x2000004c

08017414 <_fstat_r>:
 8017414:	b538      	push	{r3, r4, r5, lr}
 8017416:	4d07      	ldr	r5, [pc, #28]	@ (8017434 <_fstat_r+0x20>)
 8017418:	2300      	movs	r3, #0
 801741a:	4604      	mov	r4, r0
 801741c:	4608      	mov	r0, r1
 801741e:	4611      	mov	r1, r2
 8017420:	602b      	str	r3, [r5, #0]
 8017422:	f7ea f903 	bl	800162c <_fstat>
 8017426:	1c43      	adds	r3, r0, #1
 8017428:	d102      	bne.n	8017430 <_fstat_r+0x1c>
 801742a:	682b      	ldr	r3, [r5, #0]
 801742c:	b103      	cbz	r3, 8017430 <_fstat_r+0x1c>
 801742e:	6023      	str	r3, [r4, #0]
 8017430:	bd38      	pop	{r3, r4, r5, pc}
 8017432:	bf00      	nop
 8017434:	200082a0 	.word	0x200082a0

08017438 <_isatty_r>:
 8017438:	b538      	push	{r3, r4, r5, lr}
 801743a:	4d06      	ldr	r5, [pc, #24]	@ (8017454 <_isatty_r+0x1c>)
 801743c:	2300      	movs	r3, #0
 801743e:	4604      	mov	r4, r0
 8017440:	4608      	mov	r0, r1
 8017442:	602b      	str	r3, [r5, #0]
 8017444:	f7ea f902 	bl	800164c <_isatty>
 8017448:	1c43      	adds	r3, r0, #1
 801744a:	d102      	bne.n	8017452 <_isatty_r+0x1a>
 801744c:	682b      	ldr	r3, [r5, #0]
 801744e:	b103      	cbz	r3, 8017452 <_isatty_r+0x1a>
 8017450:	6023      	str	r3, [r4, #0]
 8017452:	bd38      	pop	{r3, r4, r5, pc}
 8017454:	200082a0 	.word	0x200082a0

08017458 <_kill_r>:
 8017458:	b538      	push	{r3, r4, r5, lr}
 801745a:	4d07      	ldr	r5, [pc, #28]	@ (8017478 <_kill_r+0x20>)
 801745c:	2300      	movs	r3, #0
 801745e:	4604      	mov	r4, r0
 8017460:	4608      	mov	r0, r1
 8017462:	4611      	mov	r1, r2
 8017464:	602b      	str	r3, [r5, #0]
 8017466:	f7ea f87f 	bl	8001568 <_kill>
 801746a:	1c43      	adds	r3, r0, #1
 801746c:	d102      	bne.n	8017474 <_kill_r+0x1c>
 801746e:	682b      	ldr	r3, [r5, #0]
 8017470:	b103      	cbz	r3, 8017474 <_kill_r+0x1c>
 8017472:	6023      	str	r3, [r4, #0]
 8017474:	bd38      	pop	{r3, r4, r5, pc}
 8017476:	bf00      	nop
 8017478:	200082a0 	.word	0x200082a0

0801747c <_getpid_r>:
 801747c:	f7ea b86c 	b.w	8001558 <_getpid>

08017480 <_malloc_usable_size_r>:
 8017480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017484:	1f18      	subs	r0, r3, #4
 8017486:	2b00      	cmp	r3, #0
 8017488:	bfbc      	itt	lt
 801748a:	580b      	ldrlt	r3, [r1, r0]
 801748c:	18c0      	addlt	r0, r0, r3
 801748e:	4770      	bx	lr

08017490 <_init>:
 8017490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017492:	bf00      	nop
 8017494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017496:	bc08      	pop	{r3}
 8017498:	469e      	mov	lr, r3
 801749a:	4770      	bx	lr

0801749c <_fini>:
 801749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749e:	bf00      	nop
 80174a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174a2:	bc08      	pop	{r3}
 80174a4:	469e      	mov	lr, r3
 80174a6:	4770      	bx	lr
