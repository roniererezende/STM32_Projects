
MTE-100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017288  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c00  08017488  08017488  00018488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b088  0801b088  0001d348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b088  0801b088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b090  0801b090  0001d348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b090  0801b090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b094  0801b094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0801b098  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000208  0801b2a0  0001d208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a8  0801b340  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007f68  20000348  0801b3e0  0001d348  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200082b0  0801b3e0  0001e2b0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001d348  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e47d  00000000  00000000  0001d376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005e60  00000000  00000000  0003b7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016e8  00000000  00000000  00041658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001228  00000000  00000000  00042d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036624  00000000  00000000  00043f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002937b  00000000  00000000  0007a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109230  00000000  00000000  000a3907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001acb37  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006de0  00000000  00000000  001acb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000079  00000000  00000000  001b395c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000348 	.word	0x20000348
 800021c:	00000000 	.word	0x00000000
 8000220:	08017470 	.word	0x08017470

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000034c 	.word	0x2000034c
 800023c:	08017470 	.word	0x08017470

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <MX_CAN1_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a10:	2206      	movs	r2, #6
 8000a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a2a:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_CAN1_Init+0x64>)
 8000a56:	f000 fffd 	bl	8001a54 <HAL_CAN_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 fafc 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000364 	.word	0x20000364
 8000a6c:	40006400 	.word	0x40006400

08000a70 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_CAN_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d128      	bne.n	8000ae4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_CAN_MspInit+0x80>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000ac2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad4:	2309      	movs	r3, #9
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_CAN_MspInit+0x84>)
 8000ae0:	f002 fb44 	bl	800316c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40006400 	.word	0x40006400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <can_init>:
  }
}

/* USER CODE BEGIN 1 */
void can_init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <can_reception>:
void can_reception(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
	mte100.data.altura       = ((payload_id_can_0x100[0] << 8) | payload_id_can_0x100[1]);
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <can_reception+0x94>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <can_reception+0x94>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <can_reception+0x98>)
 8000b26:	809a      	strh	r2, [r3, #4]
	mte100.data.peso		 = ((payload_id_can_0x100[2] << 8) | payload_id_can_0x100[3]);
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <can_reception+0x94>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <can_reception+0x94>)
 8000b34:	78db      	ldrb	r3, [r3, #3]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <can_reception+0x98>)
 8000b40:	80da      	strh	r2, [r3, #6]
	mte100.data.status_flags = payload_id_can_0x100[4];
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <can_reception+0x94>)
 8000b44:	791a      	ldrb	r2, [r3, #4]
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <can_reception+0x98>)
 8000b48:	721a      	strb	r2, [r3, #8]

	mte100.data.tensao       = (uint8_t) (payload_id_can_0x200[0] * 0.5);
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <can_reception+0x9c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b56:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b5e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b62:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b66:	793b      	ldrb	r3, [r7, #4]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <can_reception+0x98>)
 8000b6c:	725a      	strb	r2, [r3, #9]
	mte100.data.horimetro	 = ((payload_id_can_0x200[4] << 24) | (payload_id_can_0x200[5] << 16) |(payload_id_can_0x200[6] << 8) | payload_id_can_0x200[7]);
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <can_reception+0x9c>)
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	061a      	lsls	r2, r3, #24
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <can_reception+0x9c>)
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <can_reception+0x9c>)
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	4313      	orrs	r3, r2
 8000b84:	4a07      	ldr	r2, [pc, #28]	@ (8000ba4 <can_reception+0x9c>)
 8000b86:	79d2      	ldrb	r2, [r2, #7]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <can_reception+0x98>)
 8000b8e:	60da      	str	r2, [r3, #12]

}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000394 	.word	0x20000394
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <can_simulation_transmition>:

void can_simulation_transmition(uint8_t packet_num)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	switch (packet_num)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	f200 80cf 	bhi.w	8000d58 <can_simulation_transmition+0x1b0>
 8000bba:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc0 <can_simulation_transmition+0x18>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000c95 	.word	0x08000c95
 8000bcc:	08000cf7 	.word	0x08000cf7
	{
		case 0:
			payload_id_can_0x100[0] = 0x16; // altura_msb
 8000bd0:	4b64      	ldr	r3, [pc, #400]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd2:	2216      	movs	r2, #22
 8000bd4:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x03; // altura_lsb
 8000bd6:	4b63      	ldr	r3, [pc, #396]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x04; // peso_msb
 8000bdc:	4b61      	ldr	r3, [pc, #388]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xE9; // peso_lsb
 8000be2:	4b60      	ldr	r3, [pc, #384]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000be4:	22e9      	movs	r2, #233	@ 0xe9
 8000be6:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x07; // status_flags
 8000be8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000bee:	4b5d      	ldr	r3, [pc, #372]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x60; // tensao
 8000c00:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c02:	2260      	movs	r2, #96	@ 0x60
 8000c04:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c06:	4b58      	ldr	r3, [pc, #352]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c0c:	4b56      	ldr	r3, [pc, #344]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c12:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c18:	4b53      	ldr	r3, [pc, #332]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2A; // horimetro 1
 8000c24:	4b50      	ldr	r3, [pc, #320]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c26:	222a      	movs	r2, #42	@ 0x2a
 8000c28:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x62; // horimetro 0 lsb
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c2c:	2262      	movs	r2, #98	@ 0x62
 8000c2e:	721a      	strb	r2, [r3, #8]
		break;
 8000c30:	e092      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 1:
			payload_id_can_0x100[0] = 0x17; // altura_msb
 8000c32:	4b4c      	ldr	r3, [pc, #304]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c34:	2217      	movs	r2, #23
 8000c36:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x04; // altura_lsb
 8000c38:	4b4a      	ldr	r3, [pc, #296]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x05; // peso_msb
 8000c3e:	4b49      	ldr	r3, [pc, #292]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c40:	2205      	movs	r2, #5
 8000c42:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEA; // peso_lsb
 8000c44:	4b47      	ldr	r3, [pc, #284]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c46:	22ea      	movs	r2, #234	@ 0xea
 8000c48:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x06; // status_flags
 8000c4a:	4b46      	ldr	r3, [pc, #280]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c4c:	2206      	movs	r2, #6
 8000c4e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000c50:	4b44      	ldr	r3, [pc, #272]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000c56:	4b43      	ldr	r3, [pc, #268]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000c5c:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x62; // tensao
 8000c62:	4b41      	ldr	r3, [pc, #260]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c64:	2262      	movs	r2, #98	@ 0x62
 8000c66:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000c68:	4b3f      	ldr	r3, [pc, #252]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2B; // horimetro 1
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c88:	222b      	movs	r2, #43	@ 0x2b
 8000c8a:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x63; // horimetro 0 lsb
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000c8e:	2263      	movs	r2, #99	@ 0x63
 8000c90:	721a      	strb	r2, [r3, #8]
		break;
 8000c92:	e061      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 2:
			payload_id_can_0x100[0] = 0x18; // altura_msb
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c96:	2218      	movs	r2, #24
 8000c98:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x05; // altura_lsb
 8000c9a:	4b32      	ldr	r3, [pc, #200]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x06; // peso_msb
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca2:	2206      	movs	r2, #6
 8000ca4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEB; // peso_lsb
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000ca8:	22eb      	movs	r2, #235	@ 0xeb
 8000caa:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x05; // status_flags
 8000cac:	4b2d      	ldr	r3, [pc, #180]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cae:	2205      	movs	r2, #5
 8000cb0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x64; // tensao
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cc6:	2264      	movs	r2, #100	@ 0x64
 8000cc8:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2C; // horimetro 1
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cea:	222c      	movs	r2, #44	@ 0x2c
 8000cec:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x64; // horimetro 0 lsb
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000cf0:	2264      	movs	r2, #100	@ 0x64
 8000cf2:	721a      	strb	r2, [r3, #8]
		break;
 8000cf4:	e030      	b.n	8000d58 <can_simulation_transmition+0x1b0>

		case 3:
			payload_id_can_0x100[0] = 0x19; // altura_msb
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cf8:	2219      	movs	r2, #25
 8000cfa:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x100[1] = 0x06; // altura_lsb
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x100[2] = 0x07; // peso_msb
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x100[3] = 0xEC; // peso_lsb
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d0a:	22ec      	movs	r2, #236	@ 0xec
 8000d0c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x100[4] = 0x04; // status_flags
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x100[5] = 0x00;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x100[6] = 0x00;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x100[7] = 0x00;
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <can_simulation_transmition+0x1bc>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	71da      	strb	r2, [r3, #7]

			payload_id_can_0x200[0] = 0x66; // tensao
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d28:	2266      	movs	r2, #102	@ 0x66
 8000d2a:	701a      	strb	r2, [r3, #0]
			payload_id_can_0x200[1]	= 0x00;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	705a      	strb	r2, [r3, #1]
			payload_id_can_0x200[2] = 0x00;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	709a      	strb	r2, [r3, #2]
			payload_id_can_0x200[3] = 0x00;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
			payload_id_can_0x200[4] = 0x00; // horimetro 3 msb
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
			payload_id_can_0x200[5] = 0x00; // horimetro 2
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
			payload_id_can_0x200[6] = 0x2D; // horimetro 1
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d4c:	222d      	movs	r2, #45	@ 0x2d
 8000d4e:	719a      	strb	r2, [r3, #6]
			payload_id_can_0x200[8] = 0x65; // horimetro 0 lsb
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <can_simulation_transmition+0x1c0>)
 8000d52:	2265      	movs	r2, #101	@ 0x65
 8000d54:	721a      	strb	r2, [r3, #8]
		break;
 8000d56:	bf00      	nop
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a28      	ldr	r2, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a22      	ldr	r2, [pc, #136]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_GPIO_Init+0xbc>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_TERM_N_GPIO_Port, CAN_TERM_N_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dd0:	4816      	ldr	r0, [pc, #88]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dd2:	f002 fb77 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ddc:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000dde:	f002 fb71 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_TERM_N_Pin */
  GPIO_InitStruct.Pin = CAN_TERM_N_Pin;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_TERM_N_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <MX_GPIO_Init+0xc0>)
 8000dfc:	f002 f9b6 	bl	800316c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_GPIO_Init+0xc4>)
 8000e1a:	f002 f9a7 	bl	800316c <HAL_GPIO_Init>

}
 8000e1e:	bf00      	nop
 8000e20:	3720      	adds	r7, #32
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020800 	.word	0x40020800

08000e34 <led_init>:
/* INCLUDE */
#include <mte100.h>

/*  FUNCTIONS */
void led_init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	mte100.led.toggle  = false;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <led_init+0x14>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	20000394 	.word	0x20000394

08000e4c <led_idle_>:

void led_idle_(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	LED_STATUS_LOW();
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e56:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <led_idle_+0x1c>)
 8000e58:	f002 fb34 	bl	80034c4 <HAL_GPIO_WritePin>
	mte100.led.toggle = false;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <led_idle_+0x20>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	709a      	strb	r2, [r3, #2]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	20000394 	.word	0x20000394

08000e70 <led_rx_data_can>:

void led_rx_data_can(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <led_rx_data_can+0x20>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <led_rx_data_can+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000e7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <led_rx_data_can+0x24>)
 8000e82:	f002 fb38 	bl	80034f6 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000e86:	4b02      	ldr	r3, [pc, #8]	@ (8000e90 <led_rx_data_can+0x20>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	709a      	strb	r2, [r3, #2]
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000394 	.word	0x20000394
 8000e94:	40020800 	.word	0x40020800

08000e98 <led_tx_transmit_data_mqtt>:

void led_tx_transmit_data_mqtt(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	if(mte100.led.toggle == true)
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <led_tx_transmit_data_mqtt+0x20>)
 8000e9e:	789b      	ldrb	r3, [r3, #2]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <led_tx_transmit_data_mqtt+0x1c>
	{
		LED_STATUS_TOGGLE();
 8000ea4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <led_tx_transmit_data_mqtt+0x24>)
 8000eaa:	f002 fb24 	bl	80034f6 <HAL_GPIO_TogglePin>
		mte100.led.toggle = false;
 8000eae:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <led_tx_transmit_data_mqtt+0x20>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	709a      	strb	r2, [r3, #2]
	}

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000394 	.word	0x20000394
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <led_handle>:

void led_handle(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	switch (mte100.led.state)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <led_handle+0x40>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d817      	bhi.n	8000efc <led_handle+0x3c>
 8000ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <led_handle+0x14>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000eeb 	.word	0x08000eeb
 8000edc:	08000ef1 	.word	0x08000ef1
 8000ee0:	08000ef7 	.word	0x08000ef7
	{
		case led_initialization:
			led_init();
 8000ee4:	f7ff ffa6 	bl	8000e34 <led_init>
		break;
 8000ee8:	e008      	b.n	8000efc <led_handle+0x3c>

		case led_idle:
			led_idle_();
 8000eea:	f7ff ffaf 	bl	8000e4c <led_idle_>
			break;
 8000eee:	e005      	b.n	8000efc <led_handle+0x3c>

		case led_receive_data_can:
			led_rx_data_can();
 8000ef0:	f7ff ffbe 	bl	8000e70 <led_rx_data_can>
			break;
 8000ef4:	e002      	b.n	8000efc <led_handle+0x3c>

		case led_transmit_data_mqtt:
			led_tx_transmit_data_mqtt();
 8000ef6:	f7ff ffcf 	bl	8000e98 <led_tx_transmit_data_mqtt>
			break;
 8000efa:	bf00      	nop
	}
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000394 	.word	0x20000394

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f08:	f000 f87c 	bl	8001004 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fd21 	bl	8001952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f80a 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f7ff ff2a 	bl	8000d6c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000f18:	f7ff fd74 	bl	8000a04 <MX_CAN1_Init>
  MX_LWIP_Init();
 8000f1c:	f002 ffc2 	bl	8003ea4 <MX_LWIP_Init>
  while (true)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mte100_main();
 8000f20:	f000 f9d4 	bl	80012cc <mte100_main>
 8000f24:	e7fc      	b.n	8000f20 <main+0x1c>
	...

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	@ 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2234      	movs	r2, #52	@ 0x34
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f013 f819 	bl	8013f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <SystemClock_Config+0xd4>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	4a2a      	ldr	r2, [pc, #168]	@ (8000ffc <SystemClock_Config+0xd4>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <SystemClock_Config+0xd4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	4b26      	ldr	r3, [pc, #152]	@ (8001000 <SystemClock_Config+0xd8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <SystemClock_Config+0xd8>)
 8000f6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <SystemClock_Config+0xd8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2310      	movs	r3, #16
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f94:	23d8      	movs	r3, #216	@ 0xd8
 8000f96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fb0f 	bl	80035cc <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fb4:	f000 f852 	bl	800105c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb8:	f002 fab8 	bl	800352c <HAL_PWREx_EnableOverDrive>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fc2:	f000 f84b 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fdc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fd9f 	bl	8003b28 <HAL_RCC_ClockConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ff0:	f000 f834 	bl	800105c <Error_Handler>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3750      	adds	r7, #80	@ 0x50
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001016:	f000 feff 	bl	8001e18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800101a:	2301      	movs	r3, #1
 800101c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800101e:	2300      	movs	r3, #0
 8001020:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001026:	231f      	movs	r3, #31
 8001028:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800102a:	2387      	movs	r3, #135	@ 0x87
 800102c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800102e:	2300      	movs	r3, #0
 8001030:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001032:	2300      	movs	r3, #0
 8001034:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001036:	2301      	movs	r3, #1
 8001038:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800103a:	2301      	movs	r3, #1
 800103c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001046:	463b      	mov	r3, r7
 8001048:	4618      	mov	r0, r3
 800104a:	f000 ff1d 	bl	8001e88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800104e:	2004      	movs	r0, #4
 8001050:	f000 fefa 	bl	8001e48 <HAL_MPU_Enable>

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <mqtt_init>:
mqtt_client_t *client;
ip_addr_t     mqtt_server_ip;

/* FUNCTIONS */
void mqtt_init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af02      	add	r7, sp, #8
	mqtt_set_broker();
 800106e:	f000 f81f 	bl	80010b0 <mqtt_set_broker>
	err_t err = mqtt_client_connect(client, &mqtt_server_ip, MQTT_BROKER_PORT, mqtt_connection_cb, 0, NULL);
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <mqtt_init+0x3c>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	2300      	movs	r3, #0
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <mqtt_init+0x40>)
 8001080:	f240 725b 	movw	r2, #1883	@ 0x75b
 8001084:	4909      	ldr	r1, [pc, #36]	@ (80010ac <mqtt_init+0x44>)
 8001086:	f004 fcd5 	bl	8005a34 <mqtt_client_connect>
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]

	if(err != ERR_OK)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <mqtt_init+0x32>
	{
		mte100_error_handler();
 8001096:	f000 f94f 	bl	8001338 <mte100_error_handler>
	}
	else
	{

	}
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000038c 	.word	0x2000038c
 80010a8:	08001131 	.word	0x08001131
 80010ac:	20000390 	.word	0x20000390

080010b0 <mqtt_set_broker>:

void mqtt_set_broker(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// Configura IP do broker
	ipaddr_aton(MQTT_BROKER_IP, &mqtt_server_ip);
 80010b4:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <mqtt_set_broker+0x28>)
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <mqtt_set_broker+0x2c>)
 80010b8:	f010 fec4 	bl	8011e44 <ip4addr_aton>

	client = mqtt_client_new();
 80010bc:	f004 fcb0 	bl	8005a20 <mqtt_client_new>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <mqtt_set_broker+0x30>)
 80010c4:	6013      	str	r3, [r2, #0]

	if(client == NULL)
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <mqtt_set_broker+0x30>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <mqtt_set_broker+0x22>
	{
//		printf("Error to create MQTT client!\n");
		Error_Handler();
 80010ce:	f7ff ffc5 	bl	800105c <Error_Handler>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000390 	.word	0x20000390
 80010dc:	08017488 	.word	0x08017488
 80010e0:	2000038c 	.word	0x2000038c

080010e4 <mqtt_publish_data>:

void mqtt_publish_data(void)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af04      	add	r7, sp, #16
	mqtt_create_json_protocol();
 80010ea:	f000 f82f 	bl	800114c <mqtt_create_json_protocol>

	err_t result = mqtt_publish(client, MQTT_TOPIC, mte100.mqtt.payload, strlen((char *)mte100.mqtt.payload), 0, 0, NULL, NULL);
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <mqtt_publish_data+0x40>)
 80010f0:	681c      	ldr	r4, [r3, #0]
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <mqtt_publish_data+0x44>)
 80010f4:	f7ff f8f4 	bl	80002e0 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	9203      	str	r2, [sp, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <mqtt_publish_data+0x44>)
 800110e:	4907      	ldr	r1, [pc, #28]	@ (800112c <mqtt_publish_data+0x48>)
 8001110:	4620      	mov	r0, r4
 8001112:	f004 fbb1 	bl	8005878 <mqtt_publish>
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
//		printf("MQTT Published error (%d)\n", result);
	}
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
 8001122:	bf00      	nop
 8001124:	2000038c 	.word	0x2000038c
 8001128:	200003a5 	.word	0x200003a5
 800112c:	0801749c 	.word	0x0801749c

08001130 <mqtt_connection_cb>:


void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	4613      	mov	r3, r2
 800113c:	80fb      	strh	r3, [r7, #6]
	}
	else
	{
//		printf("MQTT connection failure. Code: %d\n", status);
	}
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <mqtt_create_json_protocol>:


void mqtt_create_json_protocol(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b092      	sub	sp, #72	@ 0x48
 8001150:	af08      	add	r7, sp, #32
    char motor_ligado[6]   = {};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	809a      	strh	r2, [r3, #4]
    char cesto_nivelado[6] = {};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	809a      	strh	r2, [r3, #4]
    char sobrecarga[6]     = {};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	809a      	strh	r2, [r3, #4]

    float altura  = mte100.data.altura / 1000;
 800116e:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <mqtt_create_json_protocol+0x114>)
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	4a3c      	ldr	r2, [pc, #240]	@ (8001264 <mqtt_create_json_protocol+0x118>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	099b      	lsrs	r3, r3, #6
 800117a:	b29b      	uxth	r3, r3
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001184:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    uint16_t peso = mte100.data.peso;
 8001188:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <mqtt_create_json_protocol+0x114>)
 800118a:	88db      	ldrh	r3, [r3, #6]
 800118c:	847b      	strh	r3, [r7, #34]	@ 0x22
    float tensao = (float)mte100.data.tensao;
 800118e:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <mqtt_create_json_protocol+0x114>)
 8001190:	7a5b      	ldrb	r3, [r3, #9]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119a:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t horimetro = mte100.data.horimetro;
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <mqtt_create_json_protocol+0x114>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	61bb      	str	r3, [r7, #24]


    // Motor ligado
    if(payload_id_can_0x100[4] == true)
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <mqtt_create_json_protocol+0x11c>)
 80011a6:	791b      	ldrb	r3, [r3, #4]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d108      	bne.n	80011be <mqtt_create_json_protocol+0x72>
    {
         strcpy(motor_ligado,"true");
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4a2e      	ldr	r2, [pc, #184]	@ (800126c <mqtt_create_json_protocol+0x120>)
 80011b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b6:	6018      	str	r0, [r3, #0]
 80011b8:	3304      	adds	r3, #4
 80011ba:	7019      	strb	r1, [r3, #0]
 80011bc:	e007      	b.n	80011ce <mqtt_create_json_protocol+0x82>
    }
    else
    {
        strcpy(motor_ligado,"false");
 80011be:	4a2c      	ldr	r2, [pc, #176]	@ (8001270 <mqtt_create_json_protocol+0x124>)
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	8019      	strh	r1, [r3, #0]
    }

    // Cesto Nivelado
    if(payload_id_can_0x100[4] == true)
 80011ce:	4b26      	ldr	r3, [pc, #152]	@ (8001268 <mqtt_create_json_protocol+0x11c>)
 80011d0:	791b      	ldrb	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <mqtt_create_json_protocol+0x9c>
    {
         strcpy(cesto_nivelado,"true");
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4a24      	ldr	r2, [pc, #144]	@ (800126c <mqtt_create_json_protocol+0x120>)
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	3304      	adds	r3, #4
 80011e4:	7019      	strb	r1, [r3, #0]
 80011e6:	e007      	b.n	80011f8 <mqtt_create_json_protocol+0xac>
    }
    else
    {
        strcpy(cesto_nivelado,"false");
 80011e8:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <mqtt_create_json_protocol+0x124>)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f2:	6018      	str	r0, [r3, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	8019      	strh	r1, [r3, #0]
    }

    // Sobrecarga
    if(payload_id_can_0x100[4] == true)
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <mqtt_create_json_protocol+0x11c>)
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d107      	bne.n	8001210 <mqtt_create_json_protocol+0xc4>
    {
         strcpy(sobrecarga,"true");
 8001200:	463b      	mov	r3, r7
 8001202:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <mqtt_create_json_protocol+0x120>)
 8001204:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001208:	6018      	str	r0, [r3, #0]
 800120a:	3304      	adds	r3, #4
 800120c:	7019      	strb	r1, [r3, #0]
 800120e:	e006      	b.n	800121e <mqtt_create_json_protocol+0xd2>
    }
    else
    {
        strcpy(sobrecarga,"false");
 8001210:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <mqtt_create_json_protocol+0x124>)
 8001212:	463b      	mov	r3, r7
 8001214:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001218:	6018      	str	r0, [r3, #0]
 800121a:	3304      	adds	r3, #4
 800121c:	8019      	strh	r1, [r3, #0]
    }


    sprintf((char *)mte100.mqtt.payload,
 800121e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001222:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001228:	edd7 7a07 	vldr	s15, [r7, #28]
 800122c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001230:	463a      	mov	r2, r7
 8001232:	9207      	str	r2, [sp, #28]
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	9206      	str	r2, [sp, #24]
 800123a:	f107 0210 	add.w	r2, r7, #16
 800123e:	9205      	str	r2, [sp, #20]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	9204      	str	r2, [sp, #16]
 8001244:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	ec53 2b16 	vmov	r2, r3, d6
 800124e:	4909      	ldr	r1, [pc, #36]	@ (8001274 <mqtt_create_json_protocol+0x128>)
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <mqtt_create_json_protocol+0x12c>)
 8001252:	f012 fdfd 	bl	8013e50 <siprintf>
        "\"motor_ligado\":%s,"
        "\"cesto_nivelado\":%s,"
        "\"sobrecarga\":%s"
        "}",
        altura, peso, tensao, horimetro, motor_ligado, cesto_nivelado, sobrecarga);
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	@ 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000394 	.word	0x20000394
 8001264:	10624dd3 	.word	0x10624dd3
 8001268:	20000000 	.word	0x20000000
 800126c:	080174cc 	.word	0x080174cc
 8001270:	080174d4 	.word	0x080174d4
 8001274:	080174dc 	.word	0x080174dc
 8001278:	200003a5 	.word	0x200003a5

0800127c <mqtt_transmission>:

void mqtt_transmission(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	MX_LWIP_Process();
 8001280:	f002 fe62 	bl	8003f48 <MX_LWIP_Process>

	if(mte100.mqtt.transmit == true)
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <mqtt_transmission+0x20>)
 8001286:	7c1b      	ldrb	r3, [r3, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <mqtt_transmission+0x1a>
	{
		mqtt_publish_data();
 800128c:	f7ff ff2a 	bl	80010e4 <mqtt_publish_data>
		mte100.mqtt.transmit = false;
 8001290:	4b02      	ldr	r3, [pc, #8]	@ (800129c <mqtt_transmission+0x20>)
 8001292:	2200      	movs	r2, #0
 8001294:	741a      	strb	r2, [r3, #16]
	}
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000394 	.word	0x20000394

080012a0 <mte100_init>:
mte100_s mte100;


/* FUNCTION DECLARATION */
void mte100_init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

	//Inicializa o protocolo CAN
	can_init();
 80012a4:	f7ff fc28 	bl	8000af8 <can_init>

	mte100.led.state  = led_initialization;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <mte100_init+0x18>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	705a      	strb	r2, [r3, #1]


	// Inicializa a variável que habilita a transmissão com "false"
	mte100.mqtt.transmit = false;
 80012ae:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <mte100_init+0x18>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	741a      	strb	r2, [r3, #16]
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000394 	.word	0x20000394

080012bc <mte100_idle_>:


void mte100_idle_(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <mte100_main>:

void mte100_main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	switch (mte100.state)
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <mte100_main+0x68>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d828      	bhi.n	800132a <mte100_main+0x5e>
 80012d8:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <mte100_main+0x14>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	080012f5 	.word	0x080012f5
 80012e4:	08001301 	.word	0x08001301
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	08001313 	.word	0x08001313
 80012f0:	0800131f 	.word	0x0800131f
	{
		case mte100_initialization:
			mte100_init();
 80012f4:	f7ff ffd4 	bl	80012a0 <mte100_init>
			mte100.state = mte100_set_broker_IP;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <mte100_main+0x68>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
		break;
 80012fe:	e014      	b.n	800132a <mte100_main+0x5e>

		case mte100_set_broker_IP:
			mqtt_init();
 8001300:	f7ff feb2 	bl	8001068 <mqtt_init>
			mte100.state = mte100_idle;
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <mte100_main+0x68>)
 8001306:	2202      	movs	r2, #2
 8001308:	701a      	strb	r2, [r3, #0]
		break;
 800130a:	e00e      	b.n	800132a <mte100_main+0x5e>

		case mte100_idle:
			mte100_idle_();
 800130c:	f7ff ffd6 	bl	80012bc <mte100_idle_>
		break;
 8001310:	e00b      	b.n	800132a <mte100_main+0x5e>

		case mte100_reception_can:
			can_reception();
 8001312:	f7ff fbf9 	bl	8000b08 <can_reception>
			mte100.state = mte100_idle;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <mte100_main+0x68>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
		break;
 800131c:	e005      	b.n	800132a <mte100_main+0x5e>

		case mte100_transmission_json:
			mqtt_transmission();
 800131e:	f7ff ffad 	bl	800127c <mqtt_transmission>
			mte100.state = mte100_idle;
 8001322:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <mte100_main+0x68>)
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
		break;
 8001328:	bf00      	nop
	}

	led_handle();
 800132a:	f7ff fdc9 	bl	8000ec0 <led_handle>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000394 	.word	0x20000394

08001338 <mte100_error_handler>:

void mte100_error_handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	while(true)
	{
		LED_STATUS_TOGGLE();
 800133c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <mte100_error_handler+0x18>)
 8001342:	f002 f8d8 	bl	80034f6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f000 fb60 	bl	8001a0c <HAL_Delay>
		LED_STATUS_TOGGLE();
 800134c:	bf00      	nop
 800134e:	e7f5      	b.n	800133c <mte100_error_handler+0x4>
 8001350:	40020800 	.word	0x40020800

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_MspInit+0x44>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_MspInit+0x44>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	@ 0x40
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_MspInit+0x44>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_MspInit+0x44>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_MspInit+0x44>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_MspInit+0x44>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <MemManage_Handler+0x4>

080013b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t packet_num = 0;
	static uint8_t led_counter = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 faea 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // Verifica se a interrupção é do TIM1
  	count_millissecond_can++;
 80013f8:	4b48      	ldr	r3, [pc, #288]	@ (800151c <SysTick_Handler+0x12c>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b46      	ldr	r3, [pc, #280]	@ (800151c <SysTick_Handler+0x12c>)
 8001402:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_receive_data_can)
 8001404:	4b46      	ldr	r3, [pc, #280]	@ (8001520 <SysTick_Handler+0x130>)
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d11f      	bne.n	800144c <SysTick_Handler+0x5c>
	{
		if(count_millissecond_can % 100 == 0)
 800140c:	4b43      	ldr	r3, [pc, #268]	@ (800151c <SysTick_Handler+0x12c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4a44      	ldr	r2, [pc, #272]	@ (8001524 <SysTick_Handler+0x134>)
 8001412:	fba2 1203 	umull	r1, r2, r2, r3
 8001416:	0952      	lsrs	r2, r2, #5
 8001418:	2164      	movs	r1, #100	@ 0x64
 800141a:	fb01 f202 	mul.w	r2, r1, r2
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d108      	bne.n	8001438 <SysTick_Handler+0x48>
		{
			mte100.led.toggle = true;
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <SysTick_Handler+0x130>)
 8001428:	2201      	movs	r2, #1
 800142a:	709a      	strb	r2, [r3, #2]
			led_counter++;
 800142c:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <SysTick_Handler+0x138>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b3c      	ldr	r3, [pc, #240]	@ (8001528 <SysTick_Handler+0x138>)
 8001436:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 1)
 8001438:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <SysTick_Handler+0x138>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d905      	bls.n	800144c <SysTick_Handler+0x5c>
		{
			mte100.led.state = led_idle;
 8001440:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <SysTick_Handler+0x130>)
 8001442:	2201      	movs	r2, #1
 8001444:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 8001446:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <SysTick_Handler+0x138>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
		}
	}

	// A cada 2 segundos é habilitado o estado "run" para que se seja realizado a transmissão dos dados via CAN
	if (count_millissecond_can > 1999)
 800144c:	4b33      	ldr	r3, [pc, #204]	@ (800151c <SysTick_Handler+0x12c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001454:	d311      	bcc.n	800147a <SysTick_Handler+0x8a>
	{
		can_simulation_transmition(packet_num);
 8001456:	4b35      	ldr	r3, [pc, #212]	@ (800152c <SysTick_Handler+0x13c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fba4 	bl	8000ba8 <can_simulation_transmition>

		mte100.state = mte100_reception_can;
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <SysTick_Handler+0x130>)
 8001462:	2203      	movs	r2, #3
 8001464:	701a      	strb	r2, [r3, #0]
		count_millissecond_can = 0;
 8001466:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <SysTick_Handler+0x12c>)
 8001468:	2200      	movs	r2, #0
 800146a:	801a      	strh	r2, [r3, #0]

		if(packet_num)
 800146c:	4b2f      	ldr	r3, [pc, #188]	@ (800152c <SysTick_Handler+0x13c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <SysTick_Handler+0x8a>
		{
			packet_num = 0;
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <SysTick_Handler+0x13c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
		}

	}

	/* Utilizado para controlar o tempo de transmissão do pacote MQTT a cada 5 minutos */
	count_millissecond_mqtt++;
 800147a:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <SysTick_Handler+0x140>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <SysTick_Handler+0x140>)
 8001484:	801a      	strh	r2, [r3, #0]

	if(mte100.led.state ==  led_transmit_data_mqtt)
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <SysTick_Handler+0x130>)
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d11f      	bne.n	80014ce <SysTick_Handler+0xde>
	{
		if(count_millissecond_mqtt % 100 == 0)
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <SysTick_Handler+0x140>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <SysTick_Handler+0x134>)
 8001494:	fba2 1203 	umull	r1, r2, r2, r3
 8001498:	0952      	lsrs	r2, r2, #5
 800149a:	2164      	movs	r1, #100	@ 0x64
 800149c:	fb01 f202 	mul.w	r2, r1, r2
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <SysTick_Handler+0xca>
		{
			mte100.led.toggle = true;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <SysTick_Handler+0x130>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	709a      	strb	r2, [r3, #2]
			led_counter++;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <SysTick_Handler+0x138>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <SysTick_Handler+0x138>)
 80014b8:	701a      	strb	r2, [r3, #0]

		}

		if(led_counter > 3)
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <SysTick_Handler+0x138>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d905      	bls.n	80014ce <SysTick_Handler+0xde>
		{
			mte100.led.state = led_idle;
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <SysTick_Handler+0x130>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	705a      	strb	r2, [r3, #1]
			led_counter = 0;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <SysTick_Handler+0x138>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(count_millissecond_mqtt > 999)
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <SysTick_Handler+0x140>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d6:	d31f      	bcc.n	8001518 <SysTick_Handler+0x128>
	{
		count_second_mqtt++;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <SysTick_Handler+0x144>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <SysTick_Handler+0x144>)
 80014e2:	801a      	strh	r2, [r3, #0]
		count_millissecond_mqtt = 0;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <SysTick_Handler+0x140>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	801a      	strh	r2, [r3, #0]

		if(count_second_mqtt > 59)
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <SysTick_Handler+0x144>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	2b3b      	cmp	r3, #59	@ 0x3b
 80014f0:	d912      	bls.n	8001518 <SysTick_Handler+0x128>
		{
			count_minute_mqtt++;
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <SysTick_Handler+0x148>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <SysTick_Handler+0x148>)
 80014fc:	801a      	strh	r2, [r3, #0]

			if(count_minute_mqtt > 5)
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <SysTick_Handler+0x148>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d908      	bls.n	8001518 <SysTick_Handler+0x128>
			{
				mte100.state = mte100_transmission_json;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <SysTick_Handler+0x130>)
 8001508:	2204      	movs	r2, #4
 800150a:	701a      	strb	r2, [r3, #0]
				mte100.mqtt.transmit = true;
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Handler+0x130>)
 800150e:	2201      	movs	r2, #1
 8001510:	741a      	strb	r2, [r3, #16]
				mte100.led.state = led_transmit_data_mqtt;
 8001512:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <SysTick_Handler+0x130>)
 8001514:	2203      	movs	r2, #3
 8001516:	705a      	strb	r2, [r3, #1]
			}
		}
	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200004a8 	.word	0x200004a8
 8001520:	20000394 	.word	0x20000394
 8001524:	51eb851f 	.word	0x51eb851f
 8001528:	200004b0 	.word	0x200004b0
 800152c:	200004b1 	.word	0x200004b1
 8001530:	200004aa 	.word	0x200004aa
 8001534:	200004ac 	.word	0x200004ac
 8001538:	200004ae 	.word	0x200004ae

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <_kill+0x20>)
 8001558:	2216      	movs	r2, #22
 800155a:	601a      	str	r2, [r3, #0]
  return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200082a0 	.word	0x200082a0

08001570 <_exit>:

void _exit (int status)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffe5 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001582:	bf00      	nop
 8001584:	e7fd      	b.n	8001582 <_exit+0x12>

08001586 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e00a      	b.n	80015ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001598:	f3af 8000 	nop.w
 800159c:	4601      	mov	r1, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbf0      	blt.n	8001598 <_read+0x12>
  }

  return len;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e009      	b.n	80015e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf1      	blt.n	80015d2 <_write+0x12>
  }
  return len;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_close>:

int _close(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001620:	605a      	str	r2, [r3, #4]
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_isatty>:

int _isatty(int file)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d205      	bcs.n	800169c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <_sbrk+0x6c>)
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20080000 	.word	0x20080000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	200004b4 	.word	0x200004b4
 80016c8:	200082b0 	.word	0x200082b0
 80016cc:	200082a0 	.word	0x200082a0

080016d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	@ (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800172c <LoopFillZerobss+0xe>
 80016f8:	f7ff ffea 	bl	80016d0 <SystemInit>
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <LoopFillZerobss+0x12>)
 80016fe:	490d      	ldr	r1, [pc, #52]	@ (8001734 <LoopFillZerobss+0x16>)
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <LoopFillZerobss+0x1a>)
 8001702:	2300      	movs	r3, #0
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:
 8001706:	58d4      	ldr	r4, [r2, r3]
 8001708:	50c4      	str	r4, [r0, r3]
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:
 800170c:	18c4      	adds	r4, r0, r3
 800170e:	428c      	cmp	r4, r1
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
 8001712:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <LoopFillZerobss+0x1e>)
 8001714:	4c0a      	ldr	r4, [pc, #40]	@ (8001740 <LoopFillZerobss+0x22>)
 8001716:	2300      	movs	r3, #0
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:
 800171e:	42a2      	cmp	r2, r4
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>
 8001722:	f012 fc8f 	bl	8014044 <__libc_init_array>
 8001726:	f7ff fbed 	bl	8000f04 <main>
 800172a:	4770      	bx	lr
 800172c:	20080000 	.word	0x20080000
 8001730:	20000000 	.word	0x20000000
 8001734:	20000208 	.word	0x20000208
 8001738:	0801b098 	.word	0x0801b098
 800173c:	20000348 	.word	0x20000348
 8001740:	200082b0 	.word	0x200082b0

08001744 <ADC_IRQHandler>:
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>

08001746 <LAN8742_RegisterBusIO>:
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <LAN8742_RegisterBusIO+0x28>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d007      	beq.n	800176e <LAN8742_RegisterBusIO+0x28>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <LAN8742_RegisterBusIO+0x28>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <LAN8742_RegisterBusIO+0x2e>
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e014      	b.n	800179e <LAN8742_RegisterBusIO+0x58>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
 800179c:	2300      	movs	r3, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <LAN8742_Init>:
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d139      	bne.n	800183a <LAN8742_Init+0x90>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <LAN8742_Init+0x2a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4798      	blx	r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e01c      	b.n	800181a <LAN8742_Init+0x70>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	f107 020c 	add.w	r2, r7, #12
 80017e8:	2112      	movs	r1, #18
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	da03      	bge.n	80017fc <LAN8742_Init+0x52>
 80017f4:	f06f 0304 	mvn.w	r3, #4
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	e00b      	b.n	8001814 <LAN8742_Init+0x6a>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	d105      	bne.n	8001814 <LAN8742_Init+0x6a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e005      	b.n	8001820 <LAN8742_Init+0x76>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b1f      	cmp	r3, #31
 800181e:	d9df      	bls.n	80017e0 <LAN8742_Init+0x36>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b1f      	cmp	r3, #31
 8001826:	d902      	bls.n	800182e <LAN8742_Init+0x84>
 8001828:	f06f 0302 	mvn.w	r3, #2
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <LAN8742_Init+0x90>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <LAN8742_GetLinkState>:
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	f107 020c 	add.w	r2, r7, #12
 800185c:	2101      	movs	r1, #1
 800185e:	4798      	blx	r3
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	da02      	bge.n	800186c <LAN8742_GetLinkState+0x28>
 8001866:	f06f 0304 	mvn.w	r3, #4
 800186a:	e06e      	b.n	800194a <LAN8742_GetLinkState+0x106>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6810      	ldr	r0, [r2, #0]
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	2101      	movs	r1, #1
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	da02      	bge.n	8001888 <LAN8742_GetLinkState+0x44>
 8001882:	f06f 0304 	mvn.w	r3, #4
 8001886:	e060      	b.n	800194a <LAN8742_GetLinkState+0x106>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <LAN8742_GetLinkState+0x52>
 8001892:	2301      	movs	r3, #1
 8001894:	e059      	b.n	800194a <LAN8742_GetLinkState+0x106>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6810      	ldr	r0, [r2, #0]
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	2100      	movs	r1, #0
 80018a4:	4798      	blx	r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da02      	bge.n	80018b2 <LAN8742_GetLinkState+0x6e>
 80018ac:	f06f 0304 	mvn.w	r3, #4
 80018b0:	e04b      	b.n	800194a <LAN8742_GetLinkState+0x106>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11b      	bne.n	80018f4 <LAN8742_GetLinkState+0xb0>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <LAN8742_GetLinkState+0x90>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <LAN8742_GetLinkState+0x90>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e03a      	b.n	800194a <LAN8742_GetLinkState+0x106>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <LAN8742_GetLinkState+0x9e>
 80018de:	2303      	movs	r3, #3
 80018e0:	e033      	b.n	800194a <LAN8742_GetLinkState+0x106>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <LAN8742_GetLinkState+0xac>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e02c      	b.n	800194a <LAN8742_GetLinkState+0x106>
 80018f0:	2305      	movs	r3, #5
 80018f2:	e02a      	b.n	800194a <LAN8742_GetLinkState+0x106>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6810      	ldr	r0, [r2, #0]
 80018fc:	f107 020c 	add.w	r2, r7, #12
 8001900:	211f      	movs	r1, #31
 8001902:	4798      	blx	r3
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	da02      	bge.n	8001910 <LAN8742_GetLinkState+0xcc>
 800190a:	f06f 0304 	mvn.w	r3, #4
 800190e:	e01c      	b.n	800194a <LAN8742_GetLinkState+0x106>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <LAN8742_GetLinkState+0xda>
 800191a:	2306      	movs	r3, #6
 800191c:	e015      	b.n	800194a <LAN8742_GetLinkState+0x106>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 031c 	and.w	r3, r3, #28
 8001924:	2b18      	cmp	r3, #24
 8001926:	d101      	bne.n	800192c <LAN8742_GetLinkState+0xe8>
 8001928:	2302      	movs	r3, #2
 800192a:	e00e      	b.n	800194a <LAN8742_GetLinkState+0x106>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 031c 	and.w	r3, r3, #28
 8001932:	2b08      	cmp	r3, #8
 8001934:	d101      	bne.n	800193a <LAN8742_GetLinkState+0xf6>
 8001936:	2303      	movs	r3, #3
 8001938:	e007      	b.n	800194a <LAN8742_GetLinkState+0x106>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 031c 	and.w	r3, r3, #28
 8001940:	2b14      	cmp	r3, #20
 8001942:	d101      	bne.n	8001948 <LAN8742_GetLinkState+0x104>
 8001944:	2304      	movs	r3, #4
 8001946:	e000      	b.n	800194a <LAN8742_GetLinkState+0x106>
 8001948:	2305      	movs	r3, #5
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 fa2a 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195c:	200f      	movs	r0, #15
 800195e:	f000 f805 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001962:	f7ff fcf7 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fa37 	bl	8001dfe <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 fa0d 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000010 	.word	0x20000010
 80019c4:	20000018 	.word	0x20000018
 80019c8:	20000014 	.word	0x20000014

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000018 	.word	0x20000018
 80019f0:	200004b8 	.word	0x200004b8

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200004b8 	.word	0x200004b8

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000018 	.word	0x20000018

08001a54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0ed      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe fffc 	bl	8000a70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a88:	f7ff ffb4 	bl	80019f4 <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a8e:	e012      	b.n	8001ab6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a90:	f7ff ffb0 	bl	80019f4 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d90b      	bls.n	8001ab6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2205      	movs	r2, #5
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0c5      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0e5      	beq.n	8001a90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0202 	bic.w	r2, r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7ff ff8e 	bl	80019f4 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ada:	e012      	b.n	8001b02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001adc:	f7ff ff8a 	bl	80019f4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b0a      	cmp	r3, #10
 8001ae8:	d90b      	bls.n	8001b02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2205      	movs	r2, #5
 8001afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09f      	b.n	8001c42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e5      	bne.n	8001adc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d108      	bne.n	8001b2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e5b      	ldrb	r3, [r3, #25]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e9b      	ldrb	r3, [r3, #26]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0220 	bic.w	r2, r2, #32
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7edb      	ldrb	r3, [r3, #27]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0210 	bic.w	r2, r2, #16
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e007      	b.n	8001bb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0210 	orr.w	r2, r2, #16
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7f1b      	ldrb	r3, [r3, #28]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0208 	orr.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0208 	bic.w	r2, r2, #8
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7f5b      	ldrb	r3, [r3, #29]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0204 	orr.w	r2, r2, #4
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	ea42 0103 	orr.w	r1, r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	1e5a      	subs	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x40>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x40>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	05fa0000 	.word	0x05fa0000

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	@ (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff47 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff5c 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffb0 	bl	8001d6c <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e1c:	f3bf 8f5f 	dmb	sy
}
 8001e20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_MPU_Disable+0x28>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <HAL_MPU_Disable+0x28>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_MPU_Disable+0x2c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	e000ed90 	.word	0xe000ed90

08001e48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e50:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <HAL_MPU_Enable+0x38>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_MPU_Enable+0x3c>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_MPU_Enable+0x3c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e66:	f3bf 8f4f 	dsb	sy
}
 8001e6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e6c:	f3bf 8f6f 	isb	sy
}
 8001e70:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed90 	.word	0xe000ed90
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	785a      	ldrb	r2, [r3, #1]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ea4:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7b1b      	ldrb	r3, [r3, #12]
 8001eb0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	7adb      	ldrb	r3, [r3, #11]
 8001eb6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7b5b      	ldrb	r3, [r3, #13]
 8001ec6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7b9b      	ldrb	r3, [r3, #14]
 8001ece:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7bdb      	ldrb	r3, [r3, #15]
 8001ed6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7a5b      	ldrb	r3, [r3, #9]
 8001ede:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7a1b      	ldrb	r3, [r3, #8]
 8001ee6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ee8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ef2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ef4:	6113      	str	r3, [r2, #16]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed90 	.word	0xe000ed90

08001f08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e086      	b.n	8002028 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f002 f9fb 	bl	8004328 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	4b3f      	ldr	r3, [pc, #252]	@ (8002030 <HAL_ETH_Init+0x128>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4a3e      	ldr	r2, [pc, #248]	@ (8002030 <HAL_ETH_Init+0x128>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002030 <HAL_ETH_Init+0x128>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_ETH_Init+0x12c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a39      	ldr	r2, [pc, #228]	@ (8002034 <HAL_ETH_Init+0x12c>)
 8001f50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f54:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f56:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <HAL_ETH_Init+0x12c>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4935      	ldr	r1, [pc, #212]	@ (8002034 <HAL_ETH_Init+0x12c>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_ETH_Init+0x12c>)
 8001f66:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7ff fd38 	bl	80019f4 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f86:	e011      	b.n	8001fac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f88:	f7ff fd34 	bl	80019f4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f96:	d909      	bls.n	8001fac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	22e0      	movs	r2, #224	@ 0xe0
 8001fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e03d      	b.n	8002028 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e4      	bne.n	8001f88 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fe18 	bl	8002bf4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fec3 	bl	8002d50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 ff19 	bl	8002e02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fe81 	bl	8002ce0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_ETH_Init+0x130>)
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002012:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2210      	movs	r2, #16
 8002022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40013800 	.word	0x40013800
 8002038:	00020060 	.word	0x00020060

0800203c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800204a:	2b10      	cmp	r3, #16
 800204c:	d150      	bne.n	80020f0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f9f9 	bl	8002454 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0208 	orr.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff fcc6 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0204 	orr.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff fcb3 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fc3c 	bl	800292c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	@ 0x40
 80020e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	d14a      	bne.n	80021a2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800212a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	f023 0302 	bic.w	r3, r3, #2
 800213e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002142:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0204 	bic.w	r2, r2, #4
 8002152:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff fc55 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 fbde 	bl	800292c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0208 	bic.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff fc3f 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2210      	movs	r2, #16
 800219a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
  }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e07c      	b.n	80022cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021d8:	2b40      	cmp	r3, #64	@ 0x40
 80021da:	d176      	bne.n	80022ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80021dc:	2200      	movs	r2, #0
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fe7d 	bl	8002ee0 <ETH_Prepare_Tx_Descriptors>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f043 0202 	orr.w	r2, r3, #2
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e065      	b.n	80022cc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8002200:	f3bf 8f4f 	dsb	sy
}
 8002204:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3206      	adds	r2, #6
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	2b03      	cmp	r3, #3
 8002224:	d904      	bls.n	8002230 <HAL_ETH_Transmit+0x84>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	1f1a      	subs	r2, r3, #4
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3106      	adds	r1, #6
 800223c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002246:	f7ff fbd5 	bl	80019f4 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800224c:	e037      	b.n	80022be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f043 0208 	orr.w	r2, r3, #8
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e023      	b.n	80022cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d018      	beq.n	80022be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800228c:	f7ff fbb2 	bl	80019f4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d302      	bcc.n	80022a2 <HAL_ETH_Transmit+0xf6>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10d      	bne.n	80022be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e006      	b.n	80022cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	dbc3      	blt.n	800224e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0a4      	b.n	800244a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d001      	beq.n	800230e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e09d      	b.n	800244a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	3212      	adds	r2, #18
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002324:	f1c3 0304 	rsb	r3, r3, #4
 8002328:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800232a:	e066      	b.n	80023fa <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <HAL_ETH_ReadData+0x88>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d03c      	beq.n	80023d6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800237e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002394:	2301      	movs	r3, #1
 8002396:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f002 f959 	bl	800466c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3301      	adds	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d902      	bls.n	80023e8 <HAL_ETH_ReadData+0x114>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b04      	subs	r3, #4
 80023e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	3212      	adds	r2, #18
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db06      	blt.n	8002410 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	429a      	cmp	r2, r3
 8002408:	d202      	bcs.n	8002410 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d08d      	beq.n	800232c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	441a      	add	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f815 	bl	8002454 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002468:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	3212      	adds	r2, #18
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800247a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800247c:	e042      	b.n	8002504 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d112      	bne.n	80024ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002486:	f107 0308 	add.w	r3, r7, #8
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f8be 	bl	800460c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	74fb      	strb	r3, [r7, #19]
 800249a:	e007      	b.n	80024ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	461a      	mov	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	461a      	mov	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d028      	beq.n	8002504 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	4b26      	ldr	r3, [pc, #152]	@ (8002558 <ETH_UpdateDescriptor+0x104>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	6053      	str	r3, [r2, #4]
 80024c6:	e005      	b.n	80024d4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	3301      	adds	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d902      	bls.n	80024f2 <ETH_UpdateDescriptor+0x9e>
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3b04      	subs	r3, #4
 80024f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	3212      	adds	r2, #18
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3b01      	subs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <ETH_UpdateDescriptor+0xbc>
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1b6      	bne.n	800247e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	429a      	cmp	r2, r3
 8002518:	d01a      	beq.n	8002550 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3303      	adds	r3, #3
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002524:	f3bf 8f5f 	dmb	sy
}
 8002528:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	18ca      	adds	r2, r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002542:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	80004000 	.word	0x80004000

0800255c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 031c 	and.w	r3, r3, #28
 8002578:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	02db      	lsls	r3, r3, #11
 800257e:	b29b      	uxth	r3, r3
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0302 	bic.w	r3, r3, #2
 800259a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80025ac:	f7ff fa22 	bl	80019f4 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025b2:	e00d      	b.n	80025d0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80025b4:	f7ff fa1e 	bl	80019f4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c2:	d301      	bcc.n	80025c8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e010      	b.n	80025ea <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1ec      	bne.n	80025b4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 031c 	and.w	r3, r3, #28
 800260e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	02db      	lsls	r3, r3, #11
 8002614:	b29b      	uxth	r3, r3
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	019b      	lsls	r3, r3, #6
 8002620:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f043 0302 	orr.w	r3, r3, #2
 8002630:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800264c:	f7ff f9d2 	bl	80019f4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002652:	e00d      	b.n	8002670 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002654:	f7ff f9ce 	bl	80019f4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002662:	d301      	bcc.n	8002668 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e009      	b.n	800267c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ec      	bne.n	8002654 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0e6      	b.n	8002866 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bf14      	ite	ne
 80027e6:	2301      	movne	r3, #1
 80027e8:	2300      	moveq	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf0c      	ite	eq
 8002802:	2301      	moveq	r3, #1
 8002804:	2300      	movne	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b29a      	uxth	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00b      	b.n	800289e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800288c:	2b10      	cmp	r3, #16
 800288e:	d105      	bne.n	800289c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f870 	bl	8002978 <ETH_SetMACConfig>

    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e000      	b.n	800289e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 031c 	bic.w	r3, r3, #28
 80028be:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028c0:	f001 fae4 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 80028c4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <HAL_ETH_SetMDIOClockRange+0x74>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d804      	bhi.n	80028d8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e019      	b.n	800290c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_ETH_SetMDIOClockRange+0x78>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d204      	bcs.n	80028ea <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 030c 	orr.w	r3, r3, #12
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e010      	b.n	800290c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d90c      	bls.n	800290c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <HAL_ETH_SetMDIOClockRange+0x80>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d804      	bhi.n	8002904 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e003      	b.n	800290c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	611a      	str	r2, [r3, #16]
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	02160ebf 	.word	0x02160ebf
 8002920:	03938700 	.word	0x03938700
 8002924:	05f5e0ff 	.word	0x05f5e0ff
 8002928:	08f0d17f 	.word	0x08f0d17f

0800292c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800294a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800294e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff f855 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800296c:	6193      	str	r3, [r2, #24]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <ETH_SetMACConfig+0x164>)
 800298e:	4013      	ands	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7b9b      	ldrb	r3, [r3, #14]
 8002996:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	7c12      	ldrb	r2, [r2, #16]
 800299c:	2a00      	cmp	r2, #0
 800299e:	d102      	bne.n	80029a6 <ETH_SetMACConfig+0x2e>
 80029a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029a4:	e000      	b.n	80029a8 <ETH_SetMACConfig+0x30>
 80029a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80029a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	7c52      	ldrb	r2, [r2, #17]
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d102      	bne.n	80029b8 <ETH_SetMACConfig+0x40>
 80029b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80029b6:	e000      	b.n	80029ba <ETH_SetMACConfig+0x42>
 80029b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7fdb      	ldrb	r3, [r3, #31]
 80029c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	7f92      	ldrb	r2, [r2, #30]
 80029d4:	2a00      	cmp	r2, #0
 80029d6:	d102      	bne.n	80029de <ETH_SetMACConfig+0x66>
 80029d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029dc:	e000      	b.n	80029e0 <ETH_SetMACConfig+0x68>
 80029de:	2200      	movs	r2, #0
                        macconf->Speed |
 80029e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	7f1b      	ldrb	r3, [r3, #28]
 80029e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	d102      	bne.n	8002a08 <ETH_SetMACConfig+0x90>
 8002a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a06:	e000      	b.n	8002a0a <ETH_SetMACConfig+0x92>
 8002a08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7bdb      	ldrb	r3, [r3, #15]
 8002a10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a22:	4313      	orrs	r3, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7fe ffe6 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a66:	2a00      	cmp	r2, #0
 8002a68:	d101      	bne.n	8002a6e <ETH_SetMACConfig+0xf6>
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	e000      	b.n	8002a70 <ETH_SetMACConfig+0xf8>
 8002a6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002a7e:	2a01      	cmp	r2, #1
 8002a80:	d101      	bne.n	8002a86 <ETH_SetMACConfig+0x10e>
 8002a82:	2208      	movs	r2, #8
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x110>
 8002a86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a90:	2a01      	cmp	r2, #1
 8002a92:	d101      	bne.n	8002a98 <ETH_SetMACConfig+0x120>
 8002a94:	2204      	movs	r2, #4
 8002a96:	e000      	b.n	8002a9a <ETH_SetMACConfig+0x122>
 8002a98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002aa2:	2a01      	cmp	r2, #1
 8002aa4:	d101      	bne.n	8002aaa <ETH_SetMACConfig+0x132>
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	e000      	b.n	8002aac <ETH_SetMACConfig+0x134>
 8002aaa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aac:	4313      	orrs	r3, r2
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fe ffa1 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	619a      	str	r2, [r3, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	fd20810f 	.word	0xfd20810f

08002ae0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf0 <ETH_SetDMAConfig+0x110>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	7b1b      	ldrb	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <ETH_SetDMAConfig+0x2c>
 8002b06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b0a:	e000      	b.n	8002b0e <ETH_SetDMAConfig+0x2e>
 8002b0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	7b5b      	ldrb	r3, [r3, #13]
 8002b12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	7f52      	ldrb	r2, [r2, #29]
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d102      	bne.n	8002b24 <ETH_SetDMAConfig+0x44>
 8002b1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b22:	e000      	b.n	8002b26 <ETH_SetDMAConfig+0x46>
 8002b24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	7b9b      	ldrb	r3, [r3, #14]
 8002b2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	7f1b      	ldrb	r3, [r3, #28]
 8002b3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	7f9b      	ldrb	r3, [r3, #30]
 8002b42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b54:	4313      	orrs	r3, r2
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b64:	461a      	mov	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7fe ff48 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b84:	461a      	mov	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ba0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ba8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002baa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7fe ff19 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	f8de3f23 	.word	0xf8de3f23

08002bf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b0a6      	sub	sp, #152	@ 0x98
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c36:	2300      	movs	r3, #0
 8002c38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c60:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fe7f 	bl	8002978 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002caa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cb4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff05 	bl	8002ae0 <ETH_SetDMAConfig>
}
 8002cd6:	bf00      	nop
 8002cd8:	3798      	adds	r7, #152	@ 0x98
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3305      	adds	r3, #5
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	3204      	adds	r2, #4
 8002cf8:	7812      	ldrb	r2, [r2, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <ETH_MACAddressConfig+0x68>)
 8002d02:	4413      	add	r3, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3303      	adds	r3, #3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	061a      	lsls	r2, r3, #24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3302      	adds	r3, #2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	4313      	orrs	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	7812      	ldrb	r2, [r2, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <ETH_MACAddressConfig+0x6c>)
 8002d32:	4413      	add	r3, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6013      	str	r3, [r2, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40028040 	.word	0x40028040
 8002d4c:	40028044 	.word	0x40028044

08002d50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e03e      	b.n	8002ddc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	3206      	adds	r2, #6
 8002d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d80c      	bhi.n	8002dc0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68d9      	ldr	r1, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e004      	b.n	8002dca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d9bd      	bls.n	8002d5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df4:	611a      	str	r2, [r3, #16]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e048      	b.n	8002ea2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6919      	ldr	r1, [r3, #16]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	3212      	adds	r2, #18
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d80c      	bhi.n	8002e92 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6919      	ldr	r1, [r3, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	440b      	add	r3, r1
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	e004      	b.n	8002e9c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	d9b3      	bls.n	8002e10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed2:	60da      	str	r2, [r3, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b091      	sub	sp, #68	@ 0x44
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3318      	adds	r3, #24
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f22:	d007      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f28:	3304      	adds	r3, #4
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	e111      	b.n	800315c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f46:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b86      	ldr	r3, [pc, #536]	@ (8003168 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f52:	6852      	ldr	r2, [r2, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f58:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f76:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002fba:	e082      	b.n	80030c2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e005      	b.n	8002fe8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fea:	3301      	adds	r3, #1
 8002fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d902      	bls.n	8002ffa <ETH_Prepare_Tx_Descriptors+0x11a>
 8002ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800300c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003010:	d007      	beq.n	8003022 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003016:	3304      	adds	r3, #4
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d029      	beq.n	8003076 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800302a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003030:	2300      	movs	r3, #0
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003034:	e019      	b.n	800306a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003036:	f3bf 8f5f 	dmb	sy
}
 800303a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304a:	3301      	adds	r3, #1
 800304c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800304e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003050:	2b03      	cmp	r3, #3
 8003052:	d902      	bls.n	800305a <ETH_Prepare_Tx_Descriptors+0x17a>
 8003054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003056:	3b04      	subs	r3, #4
 8003058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	3301      	adds	r3, #1
 8003068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800306a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	429a      	cmp	r2, r3
 8003070:	d3e1      	bcc.n	8003036 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	e072      	b.n	800315c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003084:	3301      	adds	r3, #1
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800308e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <ETH_Prepare_Tx_Descriptors+0x288>)
 800309e:	4013      	ands	r3, r2
 80030a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030a2:	6852      	ldr	r2, [r2, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	3301      	adds	r3, #1
 80030ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80030b0:	f3bf 8f5f 	dmb	sy
}
 80030b4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f af78 	bne.w	8002fbc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e005      	b.n	80030ec <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003102:	f3bf 8f5f 	dmb	sy
}
 8003106:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800311a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311c:	3304      	adds	r3, #4
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003128:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312a:	f3ef 8310 	mrs	r3, PRIMASK
 800312e:	613b      	str	r3, [r7, #16]
  return(result);
 8003130:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	2301      	movs	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	4413      	add	r3, r2
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f383 8810 	msr	PRIMASK, r3
}
 8003158:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3744      	adds	r7, #68	@ 0x44
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	ffffe000 	.word	0xffffe000

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e175      	b.n	8003478 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f040 8164 	bne.w	8003472 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d005      	beq.n	80031c2 <HAL_GPIO_Init+0x56>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d130      	bne.n	8003224 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	2203      	movs	r2, #3
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 0201 	and.w	r2, r3, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d017      	beq.n	8003260 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d123      	bne.n	80032b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	220f      	movs	r2, #15
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80be 	beq.w	8003472 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f6:	4b66      	ldr	r3, [pc, #408]	@ (8003490 <HAL_GPIO_Init+0x324>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	4a65      	ldr	r2, [pc, #404]	@ (8003490 <HAL_GPIO_Init+0x324>)
 80032fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003300:	6453      	str	r3, [r2, #68]	@ 0x44
 8003302:	4b63      	ldr	r3, [pc, #396]	@ (8003490 <HAL_GPIO_Init+0x324>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800330e:	4a61      	ldr	r2, [pc, #388]	@ (8003494 <HAL_GPIO_Init+0x328>)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	3302      	adds	r3, #2
 8003316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	220f      	movs	r2, #15
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a58      	ldr	r2, [pc, #352]	@ (8003498 <HAL_GPIO_Init+0x32c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d037      	beq.n	80033aa <HAL_GPIO_Init+0x23e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a57      	ldr	r2, [pc, #348]	@ (800349c <HAL_GPIO_Init+0x330>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_GPIO_Init+0x23a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a56      	ldr	r2, [pc, #344]	@ (80034a0 <HAL_GPIO_Init+0x334>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02b      	beq.n	80033a2 <HAL_GPIO_Init+0x236>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a55      	ldr	r2, [pc, #340]	@ (80034a4 <HAL_GPIO_Init+0x338>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d025      	beq.n	800339e <HAL_GPIO_Init+0x232>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a54      	ldr	r2, [pc, #336]	@ (80034a8 <HAL_GPIO_Init+0x33c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01f      	beq.n	800339a <HAL_GPIO_Init+0x22e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a53      	ldr	r2, [pc, #332]	@ (80034ac <HAL_GPIO_Init+0x340>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d019      	beq.n	8003396 <HAL_GPIO_Init+0x22a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	@ (80034b0 <HAL_GPIO_Init+0x344>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0x226>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a51      	ldr	r2, [pc, #324]	@ (80034b4 <HAL_GPIO_Init+0x348>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00d      	beq.n	800338e <HAL_GPIO_Init+0x222>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a50      	ldr	r2, [pc, #320]	@ (80034b8 <HAL_GPIO_Init+0x34c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d007      	beq.n	800338a <HAL_GPIO_Init+0x21e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4f      	ldr	r2, [pc, #316]	@ (80034bc <HAL_GPIO_Init+0x350>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d101      	bne.n	8003386 <HAL_GPIO_Init+0x21a>
 8003382:	2309      	movs	r3, #9
 8003384:	e012      	b.n	80033ac <HAL_GPIO_Init+0x240>
 8003386:	230a      	movs	r3, #10
 8003388:	e010      	b.n	80033ac <HAL_GPIO_Init+0x240>
 800338a:	2308      	movs	r3, #8
 800338c:	e00e      	b.n	80033ac <HAL_GPIO_Init+0x240>
 800338e:	2307      	movs	r3, #7
 8003390:	e00c      	b.n	80033ac <HAL_GPIO_Init+0x240>
 8003392:	2306      	movs	r3, #6
 8003394:	e00a      	b.n	80033ac <HAL_GPIO_Init+0x240>
 8003396:	2305      	movs	r3, #5
 8003398:	e008      	b.n	80033ac <HAL_GPIO_Init+0x240>
 800339a:	2304      	movs	r3, #4
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x240>
 800339e:	2303      	movs	r3, #3
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_Init+0x240>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_Init+0x240>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_Init+0x240>
 80033aa:	2300      	movs	r3, #0
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	f002 0203 	and.w	r2, r2, #3
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	4093      	lsls	r3, r2
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033bc:	4935      	ldr	r1, [pc, #212]	@ (8003494 <HAL_GPIO_Init+0x328>)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ca:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ee:	4a34      	ldr	r2, [pc, #208]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f4:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003418:	4a29      	ldr	r2, [pc, #164]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341e:	4b28      	ldr	r3, [pc, #160]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003442:	4a1f      	ldr	r2, [pc, #124]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800346c:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <HAL_GPIO_Init+0x354>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	f67f ae86 	bls.w	800318c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40013800 	.word	0x40013800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020c00 	.word	0x40020c00
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40021400 	.word	0x40021400
 80034b0:	40021800 	.word	0x40021800
 80034b4:	40021c00 	.word	0x40021c00
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40022400 	.word	0x40022400
 80034c0:	40013c00 	.word	0x40013c00

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034e0:	e003      	b.n	80034ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	619a      	str	r2, [r3, #24]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	041a      	lsls	r2, r3, #16
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43d9      	mvns	r1, r3
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	400b      	ands	r3, r1
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	619a      	str	r2, [r3, #24]
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b23      	ldr	r3, [pc, #140]	@ (80035c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	4a22      	ldr	r2, [pc, #136]	@ (80035c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	@ 0x40
 8003542:	4b20      	ldr	r3, [pc, #128]	@ (80035c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800354e:	4b1e      	ldr	r3, [pc, #120]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1d      	ldr	r2, [pc, #116]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003558:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800355a:	f7fe fa4b 	bl	80019f4 <HAL_GetTick>
 800355e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003560:	e009      	b.n	8003576 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003562:	f7fe fa47 	bl	80019f4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003570:	d901      	bls.n	8003576 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e022      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800357e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003582:	d1ee      	bne.n	8003562 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003584:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0f      	ldr	r2, [pc, #60]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003590:	f7fe fa30 	bl	80019f4 <HAL_GetTick>
 8003594:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003596:	e009      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003598:	f7fe fa2c 	bl	80019f4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035a6:	d901      	bls.n	80035ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e007      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035b8:	d1ee      	bne.n	8003598 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000

080035cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e29b      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8087 	beq.w	80036fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035f0:	4b96      	ldr	r3, [pc, #600]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d00c      	beq.n	8003616 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fc:	4b93      	ldr	r3, [pc, #588]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d112      	bne.n	800362e <HAL_RCC_OscConfig+0x62>
 8003608:	4b90      	ldr	r3, [pc, #576]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003614:	d10b      	bne.n	800362e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003616:	4b8d      	ldr	r3, [pc, #564]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d06c      	beq.n	80036fc <HAL_RCC_OscConfig+0x130>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d168      	bne.n	80036fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e275      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003636:	d106      	bne.n	8003646 <HAL_RCC_OscConfig+0x7a>
 8003638:	4b84      	ldr	r3, [pc, #528]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a83      	ldr	r2, [pc, #524]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	e02e      	b.n	80036a4 <HAL_RCC_OscConfig+0xd8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x9c>
 800364e:	4b7f      	ldr	r3, [pc, #508]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a7e      	ldr	r2, [pc, #504]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b7c      	ldr	r3, [pc, #496]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7b      	ldr	r2, [pc, #492]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e01d      	b.n	80036a4 <HAL_RCC_OscConfig+0xd8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0xc0>
 8003672:	4b76      	ldr	r3, [pc, #472]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a75      	ldr	r2, [pc, #468]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b73      	ldr	r3, [pc, #460]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a72      	ldr	r2, [pc, #456]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0xd8>
 800368c:	4b6f      	ldr	r3, [pc, #444]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a6e      	ldr	r2, [pc, #440]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	4b6c      	ldr	r3, [pc, #432]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6b      	ldr	r2, [pc, #428]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe f9a2 	bl	80019f4 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe f99e 	bl	80019f4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	@ 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e229      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0xe8>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f98e 	bl	80019f4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe f98a 	bl	80019f4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	@ 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e215      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ee:	4b57      	ldr	r3, [pc, #348]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x110>
 80036fa:	e000      	b.n	80036fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d069      	beq.n	80037de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800370a:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b4d      	ldr	r3, [pc, #308]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b08      	cmp	r3, #8
 8003720:	d11c      	bne.n	800375c <HAL_RCC_OscConfig+0x190>
 8003722:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_RCC_OscConfig+0x17a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e1e9      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	493d      	ldr	r1, [pc, #244]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	e040      	b.n	80037de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d023      	beq.n	80037ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a38      	ldr	r2, [pc, #224]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fe f940 	bl	80019f4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7fe f93c 	bl	80019f4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1c7      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4929      	ldr	r1, [pc, #164]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
 80037aa:	e018      	b.n	80037de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ac:	4b27      	ldr	r3, [pc, #156]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a26      	ldr	r2, [pc, #152]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe f91c 	bl	80019f4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fe f918 	bl	80019f4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1a3      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d038      	beq.n	800385c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d019      	beq.n	8003826 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f6:	4a15      	ldr	r2, [pc, #84]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe f8f9 	bl	80019f4 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe f8f5 	bl	80019f4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e180      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x23a>
 8003824:	e01a      	b.n	800385c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	4a08      	ldr	r2, [pc, #32]	@ (800384c <HAL_RCC_OscConfig+0x280>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fe f8df 	bl	80019f4 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800383a:	f7fe f8db 	bl	80019f4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d903      	bls.n	8003850 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e166      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
 800384c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b92      	ldr	r3, [pc, #584]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ee      	bne.n	800383a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a4 	beq.w	80039b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386a:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b89      	ldr	r3, [pc, #548]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	4a88      	ldr	r2, [pc, #544]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	@ 0x40
 8003882:	4b86      	ldr	r3, [pc, #536]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003892:	4b83      	ldr	r3, [pc, #524]	@ (8003aa0 <HAL_RCC_OscConfig+0x4d4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800389e:	4b80      	ldr	r3, [pc, #512]	@ (8003aa0 <HAL_RCC_OscConfig+0x4d4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa0 <HAL_RCC_OscConfig+0x4d4>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fe f8a3 	bl	80019f4 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fe f89f 	bl	80019f4 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b64      	cmp	r3, #100	@ 0x64
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e12a      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	4b76      	ldr	r3, [pc, #472]	@ (8003aa0 <HAL_RCC_OscConfig+0x4d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x31a>
 80038d8:	4b70      	ldr	r3, [pc, #448]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4a6f      	ldr	r2, [pc, #444]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e4:	e02d      	b.n	8003942 <HAL_RCC_OscConfig+0x376>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x33c>
 80038ee:	4b6b      	ldr	r3, [pc, #428]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fa:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a67      	ldr	r2, [pc, #412]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6713      	str	r3, [r2, #112]	@ 0x70
 8003906:	e01c      	b.n	8003942 <HAL_RCC_OscConfig+0x376>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x35e>
 8003910:	4b62      	ldr	r3, [pc, #392]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a61      	ldr	r2, [pc, #388]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	4b5f      	ldr	r3, [pc, #380]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a5e      	ldr	r2, [pc, #376]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0x376>
 800392a:	4b5c      	ldr	r3, [pc, #368]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6713      	str	r3, [r2, #112]	@ 0x70
 8003936:	4b59      	ldr	r3, [pc, #356]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a58      	ldr	r2, [pc, #352]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d015      	beq.n	8003976 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fe f853 	bl	80019f4 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fe f84f 	bl	80019f4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0d8      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RCC_OscConfig+0x386>
 8003974:	e014      	b.n	80039a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe f83d 	bl	80019f4 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe f839 	bl	80019f4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0c2      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ee      	bne.n	800397e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a3c      	ldr	r2, [pc, #240]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ae 	beq.w	8003b18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	4b37      	ldr	r3, [pc, #220]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d06d      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d14b      	bne.n	8003a68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b32      	ldr	r3, [pc, #200]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a31      	ldr	r2, [pc, #196]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe f80a 	bl	80019f4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe f806 	bl	80019f4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e091      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	071b      	lsls	r3, r3, #28
 8003a2e:	491b      	ldr	r1, [pc, #108]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd ffd8 	bl	80019f4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fd ffd4 	bl	80019f4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e05f      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x47c>
 8003a66:	e057      	b.n	8003b18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd ffbe 	bl	80019f4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fd ffba 	bl	80019f4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e045      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	4b03      	ldr	r3, [pc, #12]	@ (8003a9c <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4b0>
 8003a9a:	e03d      	b.n	8003b18 <HAL_RCC_OscConfig+0x54c>
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b24 <HAL_RCC_OscConfig+0x558>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d030      	beq.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d129      	bne.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d122      	bne.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ada:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d119      	bne.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0d0      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 020f 	bic.w	r2, r3, #15
 8003b56:	4965      	ldr	r1, [pc, #404]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b41      	ldr	r3, [pc, #260]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e073      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06b      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b39      	ldr	r3, [pc, #228]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4936      	ldr	r1, [pc, #216]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c1c:	f7fd feea 	bl	80019f4 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fd fee6 	bl	80019f4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e053      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d210      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 020f 	bic.w	r2, r3, #15
 8003c62:	4922      	ldr	r1, [pc, #136]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1d4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fe46 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	0801aaf4 	.word	0x0801aaf4
 8003cf8:	20000010 	.word	0x20000010
 8003cfc:	20000014 	.word	0x20000014

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b090      	sub	sp, #64	@ 0x40
 8003d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d10:	2300      	movs	r3, #0
 8003d12:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d18:	4b59      	ldr	r3, [pc, #356]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f200 80a1 	bhi.w	8003e6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d32:	e09b      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b53      	ldr	r3, [pc, #332]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d38:	e09b      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b53      	ldr	r3, [pc, #332]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d3e:	e098      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b4f      	ldr	r3, [pc, #316]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d028      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d6c:	fb03 f201 	mul.w	r2, r3, r1
 8003d70:	2300      	movs	r3, #0
 8003d72:	fb00 f303 	mul.w	r3, r0, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	4a43      	ldr	r2, [pc, #268]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d80:	460a      	mov	r2, r1
 8003d82:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d86:	4413      	add	r3, r2
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	61fa      	str	r2, [r7, #28]
 8003d92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d9a:	f7fc fc65 	bl	8000668 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da6:	e053      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4b35      	ldr	r3, [pc, #212]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	099b      	lsrs	r3, r3, #6
 8003dae:	2200      	movs	r2, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	617a      	str	r2, [r7, #20]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dba:	f04f 0b00 	mov.w	fp, #0
 8003dbe:	4652      	mov	r2, sl
 8003dc0:	465b      	mov	r3, fp
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	0159      	lsls	r1, r3, #5
 8003dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd0:	0150      	lsls	r0, r2, #5
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dda:	eb63 090b 	sbc.w	r9, r3, fp
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003df2:	ebb2 0408 	subs.w	r4, r2, r8
 8003df6:	eb63 0509 	sbc.w	r5, r3, r9
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	00eb      	lsls	r3, r5, #3
 8003e04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e08:	00e2      	lsls	r2, r4, #3
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	461d      	mov	r5, r3
 8003e0e:	eb14 030a 	adds.w	r3, r4, sl
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	eb45 030b 	adc.w	r3, r5, fp
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e26:	4629      	mov	r1, r5
 8003e28:	028b      	lsls	r3, r1, #10
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e30:	4621      	mov	r1, r4
 8003e32:	028a      	lsls	r2, r1, #10
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	60fa      	str	r2, [r7, #12]
 8003e40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e44:	f7fc fc10 	bl	8000668 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e6a:	e002      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3740      	adds	r7, #64	@ 0x40
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	017d7840 	.word	0x017d7840

08003e8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000010 	.word	0x20000010

08003ea4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003eaa:	f002 f86e 	bl	8005f8a <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <MX_LWIP_Init+0x54>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <MX_LWIP_Init+0x58>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003eba:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <MX_LWIP_Init+0x5c>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003ec0:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <MX_LWIP_Init+0x60>)
 8003ec2:	9302      	str	r3, [sp, #8]
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <MX_LWIP_Init+0x64>)
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <MX_LWIP_Init+0x5c>)
 8003ece:	4a0b      	ldr	r2, [pc, #44]	@ (8003efc <MX_LWIP_Init+0x58>)
 8003ed0:	4909      	ldr	r1, [pc, #36]	@ (8003ef8 <MX_LWIP_Init+0x54>)
 8003ed2:	480e      	ldr	r0, [pc, #56]	@ (8003f0c <MX_LWIP_Init+0x68>)
 8003ed4:	f002 fd68 	bl	80069a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ed8:	480c      	ldr	r0, [pc, #48]	@ (8003f0c <MX_LWIP_Init+0x68>)
 8003eda:	f002 ff1f 	bl	8006d1c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003ede:	480b      	ldr	r0, [pc, #44]	@ (8003f0c <MX_LWIP_Init+0x68>)
 8003ee0:	f002 ff2c 	bl	8006d3c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003ee4:	490a      	ldr	r1, [pc, #40]	@ (8003f10 <MX_LWIP_Init+0x6c>)
 8003ee6:	4809      	ldr	r0, [pc, #36]	@ (8003f0c <MX_LWIP_Init+0x68>)
 8003ee8:	f003 f82e 	bl	8006f48 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003eec:	4807      	ldr	r0, [pc, #28]	@ (8003f0c <MX_LWIP_Init+0x68>)
 8003eee:	f00b f8c5 	bl	800f07c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200004f8 	.word	0x200004f8
 8003efc:	200004fc 	.word	0x200004fc
 8003f00:	20000500 	.word	0x20000500
 8003f04:	08012d15 	.word	0x08012d15
 8003f08:	08004289 	.word	0x08004289
 8003f0c:	200004c0 	.word	0x200004c0
 8003f10:	08003f65 	.word	0x08003f65

08003f14 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003f1c:	f7fd fd6a 	bl	80019f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <Ethernet_Link_Periodic_Handle+0x30>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b63      	cmp	r3, #99	@ 0x63
 8003f2a:	d907      	bls.n	8003f3c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003f2c:	f7fd fd62 	bl	80019f4 <HAL_GetTick>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4a04      	ldr	r2, [pc, #16]	@ (8003f44 <Ethernet_Link_Periodic_Handle+0x30>)
 8003f34:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fadc 	bl	80044f4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200004bc 	.word	0x200004bc

08003f48 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003f4c:	4804      	ldr	r0, [pc, #16]	@ (8003f60 <MX_LWIP_Process+0x18>)
 8003f4e:	f000 f97b 	bl	8004248 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003f52:	f00a f817 	bl	800df84 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003f56:	4802      	ldr	r0, [pc, #8]	@ (8003f60 <MX_LWIP_Process+0x18>)
 8003f58:	f7ff ffdc 	bl	8003f14 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	200004c0 	.word	0x200004c0

08003f64 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <SCB_InvalidateDCache_by_Addr>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f8e:	f3bf 8f4f 	dsb	sy
}
 8003f92:	bf00      	nop
    while (op_size > 0) {
 8003f94:	e00b      	b.n	8003fae <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003f96:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <SCB_InvalidateDCache_by_Addr+0x54>)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dcf0      	bgt.n	8003f96 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fb4:	f3bf 8f4f 	dsb	sy
}
 8003fb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fba:	f3bf 8f6f 	isb	sy
}
 8003fbe:	bf00      	nop
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003fdc:	4b44      	ldr	r3, [pc, #272]	@ (80040f0 <low_level_init+0x120>)
 8003fde:	4a45      	ldr	r2, [pc, #276]	@ (80040f4 <low_level_init+0x124>)
 8003fe0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003fe6:	2380      	movs	r3, #128	@ 0x80
 8003fe8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003fea:	23e1      	movs	r3, #225	@ 0xe1
 8003fec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80040f0 <low_level_init+0x120>)
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004002:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <low_level_init+0x120>)
 8004004:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004008:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800400a:	4b39      	ldr	r3, [pc, #228]	@ (80040f0 <low_level_init+0x120>)
 800400c:	4a3a      	ldr	r2, [pc, #232]	@ (80040f8 <low_level_init+0x128>)
 800400e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004010:	4b37      	ldr	r3, [pc, #220]	@ (80040f0 <low_level_init+0x120>)
 8004012:	4a3a      	ldr	r2, [pc, #232]	@ (80040fc <low_level_init+0x12c>)
 8004014:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <low_level_init+0x120>)
 8004018:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800401c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800401e:	4834      	ldr	r0, [pc, #208]	@ (80040f0 <low_level_init+0x120>)
 8004020:	f7fd ff72 	bl	8001f08 <HAL_ETH_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004028:	2238      	movs	r2, #56	@ 0x38
 800402a:	2100      	movs	r1, #0
 800402c:	4834      	ldr	r0, [pc, #208]	@ (8004100 <low_level_init+0x130>)
 800402e:	f00f ff9e 	bl	8013f6e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004032:	4b33      	ldr	r3, [pc, #204]	@ (8004100 <low_level_init+0x130>)
 8004034:	2221      	movs	r2, #33	@ 0x21
 8004036:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004038:	4b31      	ldr	r3, [pc, #196]	@ (8004100 <low_level_init+0x130>)
 800403a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800403e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004040:	4b2f      	ldr	r3, [pc, #188]	@ (8004100 <low_level_init+0x130>)
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004046:	482f      	ldr	r0, [pc, #188]	@ (8004104 <low_level_init+0x134>)
 8004048:	f002 fb76 	bl	8006738 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2206      	movs	r2, #6
 8004050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004054:	4b26      	ldr	r3, [pc, #152]	@ (80040f0 <low_level_init+0x120>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004060:	4b23      	ldr	r3, [pc, #140]	@ (80040f0 <low_level_init+0x120>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	785a      	ldrb	r2, [r3, #1]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800406c:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <low_level_init+0x120>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	789a      	ldrb	r2, [r3, #2]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <low_level_init+0x120>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	78da      	ldrb	r2, [r3, #3]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <low_level_init+0x120>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	791a      	ldrb	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <low_level_init+0x120>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	795a      	ldrb	r2, [r3, #5]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80040a2:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040aa:	f043 030a 	orr.w	r3, r3, #10
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80040b6:	4914      	ldr	r1, [pc, #80]	@ (8004108 <low_level_init+0x138>)
 80040b8:	4814      	ldr	r0, [pc, #80]	@ (800410c <low_level_init+0x13c>)
 80040ba:	f7fd fb44 	bl	8001746 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80040be:	4813      	ldr	r0, [pc, #76]	@ (800410c <low_level_init+0x13c>)
 80040c0:	f7fd fb73 	bl	80017aa <LAN8742_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f002 ff0c 	bl	8006ee8 <netif_set_link_down>
    netif_set_down(netif);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f002 fe9f 	bl	8006e14 <netif_set_down>
 80040d6:	e008      	b.n	80040ea <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa08 	bl	80044f4 <ethernet_link_check_state>
 80040e4:	e001      	b.n	80040ea <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 80040e6:	f7fc ffb9 	bl	800105c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20004e90 	.word	0x20004e90
 80040f4:	40028000 	.word	0x40028000
 80040f8:	200002a8 	.word	0x200002a8
 80040fc:	20000208 	.word	0x20000208
 8004100:	20004f40 	.word	0x20004f40
 8004104:	0801ab04 	.word	0x0801ab04
 8004108:	2000001c 	.word	0x2000001c
 800410c:	20004f78 	.word	0x20004f78

08004110 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b092      	sub	sp, #72	@ 0x48
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	2230      	movs	r2, #48	@ 0x30
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f00f ff1c 	bl	8013f6e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004136:	f107 030c 	add.w	r3, r7, #12
 800413a:	2230      	movs	r2, #48	@ 0x30
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f00f ff15 	bl	8013f6e <memset>

  for(q = p; q != NULL; q = q->next)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	643b      	str	r3, [r7, #64]	@ 0x40
 8004148:	e045      	b.n	80041d6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800414a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414c:	2b03      	cmp	r3, #3
 800414e:	d902      	bls.n	8004156 <low_level_output+0x46>
      return ERR_IF;
 8004150:	f06f 030b 	mvn.w	r3, #11
 8004154:	e055      	b.n	8004202 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3348      	adds	r3, #72	@ 0x48
 8004166:	443b      	add	r3, r7
 8004168:	3b3c      	subs	r3, #60	@ 0x3c
 800416a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800416c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800416e:	895b      	ldrh	r3, [r3, #10]
 8004170:	4619      	mov	r1, r3
 8004172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	3348      	adds	r3, #72	@ 0x48
 800417e:	443b      	add	r3, r7
 8004180:	3b38      	subs	r3, #56	@ 0x38
 8004182:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800418a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418c:	1e5a      	subs	r2, r3, #1
 800418e:	f107 000c 	add.w	r0, r7, #12
 8004192:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004194:	460b      	mov	r3, r1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	440b      	add	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	18c1      	adds	r1, r0, r3
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	3348      	adds	r3, #72	@ 0x48
 80041a8:	443b      	add	r3, r7
 80041aa:	3b34      	subs	r3, #52	@ 0x34
 80041ac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80041ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80041b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	3348      	adds	r3, #72	@ 0x48
 80041c2:	443b      	add	r3, r7
 80041c4:	3b34      	subs	r3, #52	@ 0x34
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80041ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041cc:	3301      	adds	r3, #1
 80041ce:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80041d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1b6      	bne.n	800414a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	891b      	ldrh	r3, [r3, #8]
 80041e0:	461a      	mov	r2, r3
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <low_level_output+0xfc>)
 80041e4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80041e6:	4a09      	ldr	r2, [pc, #36]	@ (800420c <low_level_output+0xfc>)
 80041e8:	f107 030c 	add.w	r3, r7, #12
 80041ec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80041ee:	4a07      	ldr	r2, [pc, #28]	@ (800420c <low_level_output+0xfc>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80041f4:	2214      	movs	r2, #20
 80041f6:	4905      	ldr	r1, [pc, #20]	@ (800420c <low_level_output+0xfc>)
 80041f8:	4805      	ldr	r0, [pc, #20]	@ (8004210 <low_level_output+0x100>)
 80041fa:	f7fd ffd7 	bl	80021ac <HAL_ETH_Transmit>

  return errval;
 80041fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004202:	4618      	mov	r0, r3
 8004204:	3748      	adds	r7, #72	@ 0x48
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20004f40 	.word	0x20004f40
 8004210:	20004e90 	.word	0x20004e90

08004214 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <low_level_input+0x2c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	4619      	mov	r1, r3
 800422e:	4805      	ldr	r0, [pc, #20]	@ (8004244 <low_level_input+0x30>)
 8004230:	f7fe f850 	bl	80022d4 <HAL_ETH_ReadData>
  }

  return p;
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20004e8c 	.word	0x20004e8c
 8004244:	20004e90 	.word	0x20004e90

08004248 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffdd 	bl	8004214 <low_level_input>
 800425a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	4798      	blx	r3
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f003 f9e8 	bl	8007648 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ea      	bne.n	8004254 <ethernetif_input+0xc>
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <ethernetif_init+0x1c>
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <ethernetif_init+0x48>)
 8004298:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800429c:	490d      	ldr	r1, [pc, #52]	@ (80042d4 <ethernetif_init+0x4c>)
 800429e:	480e      	ldr	r0, [pc, #56]	@ (80042d8 <ethernetif_init+0x50>)
 80042a0:	f00f fdc4 	bl	8013e2c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2273      	movs	r2, #115	@ 0x73
 80042a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2274      	movs	r2, #116	@ 0x74
 80042b0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a09      	ldr	r2, [pc, #36]	@ (80042dc <ethernetif_init+0x54>)
 80042b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a08      	ldr	r2, [pc, #32]	@ (80042e0 <ethernetif_init+0x58>)
 80042be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fe85 	bl	8003fd0 <low_level_init>

  return ERR_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08017554 	.word	0x08017554
 80042d4:	08017570 	.word	0x08017570
 80042d8:	08017580 	.word	0x08017580
 80042dc:	08010f3d 	.word	0x08010f3d
 80042e0:	08004111 	.word	0x08004111

080042e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80042f0:	68f9      	ldr	r1, [r7, #12]
 80042f2:	4807      	ldr	r0, [pc, #28]	@ (8004310 <pbuf_free_custom+0x2c>)
 80042f4:	f002 fb02 	bl	80068fc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <pbuf_free_custom+0x30>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <pbuf_free_custom+0x30>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
  }
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	0801ab04 	.word	0x0801ab04
 8004314:	20004e8c 	.word	0x20004e8c

08004318 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800431c:	f7fd fb6a 	bl	80019f4 <HAL_GetTick>
 8004320:	4603      	mov	r3, r0
}
 8004322:	4618      	mov	r0, r3
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	@ 0x38
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3f      	ldr	r2, [pc, #252]	@ (8004444 <HAL_ETH_MspInit+0x11c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d178      	bne.n	800443c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800434a:	4b3f      	ldr	r3, [pc, #252]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	4a3e      	ldr	r2, [pc, #248]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004354:	6313      	str	r3, [r2, #48]	@ 0x30
 8004356:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	4b39      	ldr	r3, [pc, #228]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	4a38      	ldr	r2, [pc, #224]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004368:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800436c:	6313      	str	r3, [r2, #48]	@ 0x30
 800436e:	4b36      	ldr	r3, [pc, #216]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004372:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4b33      	ldr	r3, [pc, #204]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4a32      	ldr	r2, [pc, #200]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004384:	6313      	str	r3, [r2, #48]	@ 0x30
 8004386:	4b30      	ldr	r3, [pc, #192]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004392:	4b2d      	ldr	r3, [pc, #180]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	4a2c      	ldr	r2, [pc, #176]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6313      	str	r3, [r2, #48]	@ 0x30
 800439e:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043aa:	4b27      	ldr	r3, [pc, #156]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	4a26      	ldr	r2, [pc, #152]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b6:	4b24      	ldr	r3, [pc, #144]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c2:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a20      	ldr	r2, [pc, #128]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004448 <HAL_ETH_MspInit+0x120>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80043da:	2332      	movs	r3, #50	@ 0x32
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	2302      	movs	r3, #2
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e6:	2303      	movs	r3, #3
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ea:	230b      	movs	r3, #11
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f2:	4619      	mov	r1, r3
 80043f4:	4815      	ldr	r0, [pc, #84]	@ (800444c <HAL_ETH_MspInit+0x124>)
 80043f6:	f7fe feb9 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80043fa:	2386      	movs	r3, #134	@ 0x86
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004406:	2303      	movs	r3, #3
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800440a:	230b      	movs	r3, #11
 800440c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004412:	4619      	mov	r1, r3
 8004414:	480e      	ldr	r0, [pc, #56]	@ (8004450 <HAL_ETH_MspInit+0x128>)
 8004416:	f7fe fea9 	bl	800316c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800441a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004420:	2302      	movs	r3, #2
 8004422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004424:	2300      	movs	r3, #0
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004428:	2303      	movs	r3, #3
 800442a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800442c:	230b      	movs	r3, #11
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004434:	4619      	mov	r1, r3
 8004436:	4807      	ldr	r0, [pc, #28]	@ (8004454 <HAL_ETH_MspInit+0x12c>)
 8004438:	f7fe fe98 	bl	800316c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800443c:	bf00      	nop
 800443e:	3738      	adds	r7, #56	@ 0x38
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40028000 	.word	0x40028000
 8004448:	40023800 	.word	0x40023800
 800444c:	40020800 	.word	0x40020800
 8004450:	40020000 	.word	0x40020000
 8004454:	40020400 	.word	0x40020400

08004458 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800445c:	4802      	ldr	r0, [pc, #8]	@ (8004468 <ETH_PHY_IO_Init+0x10>)
 800445e:	f7fe fa23 	bl	80028a8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20004e90 	.word	0x20004e90

0800446c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return 0;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	68f9      	ldr	r1, [r7, #12]
 800448e:	4807      	ldr	r0, [pc, #28]	@ (80044ac <ETH_PHY_IO_ReadReg+0x30>)
 8004490:	f7fe f864 	bl	800255c <HAL_ETH_ReadPHYRegister>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	e000      	b.n	80044a2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20004e90 	.word	0x20004e90

080044b0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	4807      	ldr	r0, [pc, #28]	@ (80044e0 <ETH_PHY_IO_WriteReg+0x30>)
 80044c4:	f7fe f895 	bl	80025f2 <HAL_ETH_WritePHYRegister>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	e000      	b.n	80044d6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20004e90 	.word	0x20004e90

080044e4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044e8:	f7fd fa84 	bl	80019f4 <HAL_GetTick>
 80044ec:	4603      	mov	r3, r0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0a0      	sub	sp, #128	@ 0x80
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	2264      	movs	r2, #100	@ 0x64
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f00f fd32 	bl	8013f6e <memset>
  int32_t PHYLinkState = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004512:	2300      	movs	r3, #0
 8004514:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004516:	2300      	movs	r3, #0
 8004518:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800451a:	483a      	ldr	r0, [pc, #232]	@ (8004604 <ethernet_link_check_state+0x110>)
 800451c:	f7fd f992 	bl	8001844 <LAN8742_GetLinkState>
 8004520:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <ethernet_link_check_state+0x5a>
 8004534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004536:	2b01      	cmp	r3, #1
 8004538:	dc09      	bgt.n	800454e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800453a:	4833      	ldr	r0, [pc, #204]	@ (8004608 <ethernet_link_check_state+0x114>)
 800453c:	f7fd fddd 	bl	80020fa <HAL_ETH_Stop>
    netif_set_down(netif);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f002 fc67 	bl	8006e14 <netif_set_down>
    netif_set_link_down(netif);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fcce 	bl	8006ee8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800454c:	e055      	b.n	80045fa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d14e      	bne.n	80045fa <ethernet_link_check_state+0x106>
 800455c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800455e:	2b01      	cmp	r3, #1
 8004560:	dd4b      	ble.n	80045fa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004564:	3b02      	subs	r3, #2
 8004566:	2b03      	cmp	r3, #3
 8004568:	d82a      	bhi.n	80045c0 <ethernet_link_check_state+0xcc>
 800456a:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <ethernet_link_check_state+0x7c>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004581 	.word	0x08004581
 8004574:	08004593 	.word	0x08004593
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
      duplex = ETH_FULLDUPLEX_MODE;
 8004580:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004584:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004586:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800458a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800458c:	2301      	movs	r3, #1
 800458e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004590:	e017      	b.n	80045c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004592:	2300      	movs	r3, #0
 8004594:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004596:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800459a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800459c:	2301      	movs	r3, #1
 800459e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045a0:	e00f      	b.n	80045c2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80045a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045a6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80045a8:	2300      	movs	r3, #0
 80045aa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045b0:	e007      	b.n	80045c2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80045b2:	2300      	movs	r3, #0
 80045b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80045b6:	2300      	movs	r3, #0
 80045b8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80045be:	e000      	b.n	80045c2 <ethernet_link_check_state+0xce>
      break;
 80045c0:	bf00      	nop
    if(linkchanged)
 80045c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d018      	beq.n	80045fa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	4619      	mov	r1, r3
 80045ce:	480e      	ldr	r0, [pc, #56]	@ (8004608 <ethernet_link_check_state+0x114>)
 80045d0:	f7fe f858 	bl	8002684 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80045d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80045d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045da:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80045dc:	f107 030c 	add.w	r3, r7, #12
 80045e0:	4619      	mov	r1, r3
 80045e2:	4809      	ldr	r0, [pc, #36]	@ (8004608 <ethernet_link_check_state+0x114>)
 80045e4:	f7fe f945 	bl	8002872 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80045e8:	4807      	ldr	r0, [pc, #28]	@ (8004608 <ethernet_link_check_state+0x114>)
 80045ea:	f7fd fd27 	bl	800203c <HAL_ETH_Start>
      netif_set_up(netif);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f002 fba4 	bl	8006d3c <netif_set_up>
      netif_set_link_up(netif);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f002 fc3f 	bl	8006e78 <netif_set_link_up>
}
 80045fa:	bf00      	nop
 80045fc:	3780      	adds	r7, #128	@ 0x80
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20004f78 	.word	0x20004f78
 8004608:	20004e90 	.word	0x20004e90

0800460c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af02      	add	r7, sp, #8
 8004612:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004614:	4812      	ldr	r0, [pc, #72]	@ (8004660 <HAL_ETH_RxAllocateCallback+0x54>)
 8004616:	f002 f903 	bl	8006820 <memp_malloc_pool>
 800461a:	60f8      	str	r0, [r7, #12]
  if (p)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d014      	beq.n	800464c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f103 0220 	add.w	r2, r3, #32
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a0d      	ldr	r2, [pc, #52]	@ (8004664 <HAL_ETH_RxAllocateCallback+0x58>)
 8004630:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2241      	movs	r2, #65	@ 0x41
 8004642:	2100      	movs	r1, #0
 8004644:	2000      	movs	r0, #0
 8004646:	f002 fe45 	bl	80072d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800464a:	e005      	b.n	8004658 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_ETH_RxAllocateCallback+0x5c>)
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0801ab04 	.word	0x0801ab04
 8004664:	080042e5 	.word	0x080042e5
 8004668:	20004e8c 	.word	0x20004e8c

0800466c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3b20      	subs	r3, #32
 800468a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2200      	movs	r2, #0
 8004696:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e003      	b.n	80046b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e009      	b.n	80046d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	891a      	ldrh	r2, [r3, #8]
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	4413      	add	r3, r2
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f2      	bne.n	80046c4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff fc48 	bl	8003f78 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80046e8:	bf00      	nop
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	88db      	ldrh	r3, [r3, #6]
 80046fc:	3301      	adds	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	88db      	ldrh	r3, [r3, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	88db      	ldrh	r3, [r3, #6]
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	88db      	ldrh	r3, [r3, #6]
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	3301      	adds	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	2bff      	cmp	r3, #255	@ 0xff
 8004754:	d902      	bls.n	800475c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	801a      	strh	r2, [r3, #0]
  }
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	885b      	ldrh	r3, [r3, #2]
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	2bff      	cmp	r3, #255	@ 0xff
 8004798:	d905      	bls.n	80047a6 <mqtt_ringbuf_advance_get_idx+0x1e>
 800479a:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <mqtt_ringbuf_advance_get_idx+0x4c>)
 800479c:	22cb      	movs	r2, #203	@ 0xcb
 800479e:	490e      	ldr	r1, [pc, #56]	@ (80047d8 <mqtt_ringbuf_advance_get_idx+0x50>)
 80047a0:	480e      	ldr	r0, [pc, #56]	@ (80047dc <mqtt_ringbuf_advance_get_idx+0x54>)
 80047a2:	f00f fb43 	bl	8013e2c <iprintf>

  rb->get += len;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	885a      	ldrh	r2, [r3, #2]
 80047aa:	887b      	ldrh	r3, [r7, #2]
 80047ac:	4413      	add	r3, r2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	885b      	ldrh	r3, [r3, #2]
 80047b8:	2bff      	cmp	r3, #255	@ 0xff
 80047ba:	d906      	bls.n	80047ca <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	885b      	ldrh	r3, [r3, #2]
 80047c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	805a      	strh	r2, [r3, #2]
  }
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	080175a8 	.word	0x080175a8
 80047d8:	080175e0 	.word	0x080175e0
 80047dc:	08017620 	.word	0x08017620

080047e0 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	885b      	ldrh	r3, [r3, #2]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d303      	bcc.n	8004806 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004804:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	b29b      	uxth	r3, r3
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff ffda 	bl	80047e0 <mqtt_ringbuf_len>
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004838:	429a      	cmp	r2, r3
 800483a:	da04      	bge.n	8004846 <mqtt_output_send+0x2e>
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ffcf 	bl	80047e0 <mqtt_ringbuf_len>
 8004842:	4603      	mov	r3, r0
 8004844:	e004      	b.n	8004850 <mqtt_output_send+0x38>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	885b      	ldrh	r3, [r3, #2]
 800484a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800484e:	b29b      	uxth	r3, r3
 8004850:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8004858:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <mqtt_output_send+0x54>
 8004860:	4b44      	ldr	r3, [pc, #272]	@ (8004974 <mqtt_output_send+0x15c>)
 8004862:	22f0      	movs	r2, #240	@ 0xf0
 8004864:	4944      	ldr	r1, [pc, #272]	@ (8004978 <mqtt_output_send+0x160>)
 8004866:	4845      	ldr	r0, [pc, #276]	@ (800497c <mqtt_output_send+0x164>)
 8004868:	f00f fae0 	bl	8013e2c <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800486c:	89bb      	ldrh	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d07c      	beq.n	800496c <mqtt_output_send+0x154>
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d079      	beq.n	800496c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8004878:	89ba      	ldrh	r2, [r7, #12]
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	429a      	cmp	r2, r3
 800487e:	d90d      	bls.n	800489c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff ffab 	bl	80047e0 <mqtt_ringbuf_len>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	897b      	ldrh	r3, [r7, #10]
 8004890:	4293      	cmp	r3, r2
 8004892:	bf34      	ite	cc
 8004894:	2301      	movcc	r3, #1
 8004896:	2300      	movcs	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff63 	bl	8004768 <mqtt_ringbuf_get_ptr>
 80048a2:	4601      	mov	r1, r0
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <mqtt_output_send+0x96>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e000      	b.n	80048b0 <mqtt_output_send+0x98>
 80048ae:	2301      	movs	r3, #1
 80048b0:	89ba      	ldrh	r2, [r7, #12]
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f007 fcc6 	bl	800c244 <tcp_write>
 80048b8:	4603      	mov	r3, r0
 80048ba:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80048bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d146      	bne.n	8004952 <mqtt_output_send+0x13a>
 80048c4:	7bbb      	ldrb	r3, [r7, #14]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d043      	beq.n	8004952 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 80048ca:	89bb      	ldrh	r3, [r7, #12]
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff5a 	bl	8004788 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80048da:	461c      	mov	r4, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff7f 	bl	80047e0 <mqtt_ringbuf_len>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	885b      	ldrh	r3, [r3, #2]
 80048ea:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80048ee:	429a      	cmp	r2, r3
 80048f0:	da04      	bge.n	80048fc <mqtt_output_send+0xe4>
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff ff74 	bl	80047e0 <mqtt_ringbuf_len>
 80048f8:	4603      	mov	r3, r0
 80048fa:	e003      	b.n	8004904 <mqtt_output_send+0xec>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	885b      	ldrh	r3, [r3, #2]
 8004900:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004904:	42a3      	cmp	r3, r4
 8004906:	dd03      	ble.n	8004910 <mqtt_output_send+0xf8>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800490e:	e014      	b.n	800493a <mqtt_output_send+0x122>
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff65 	bl	80047e0 <mqtt_ringbuf_len>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	885b      	ldrh	r3, [r3, #2]
 800491e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004922:	429a      	cmp	r2, r3
 8004924:	da04      	bge.n	8004930 <mqtt_output_send+0x118>
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff5a 	bl	80047e0 <mqtt_ringbuf_len>
 800492c:	4603      	mov	r3, r0
 800492e:	e004      	b.n	800493a <mqtt_output_send+0x122>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	885b      	ldrh	r3, [r3, #2]
 8004934:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004938:	b29b      	uxth	r3, r3
 800493a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff13 	bl	8004768 <mqtt_ringbuf_get_ptr>
 8004942:	4601      	mov	r1, r0
 8004944:	89ba      	ldrh	r2, [r7, #12]
 8004946:	2301      	movs	r3, #1
 8004948:	6838      	ldr	r0, [r7, #0]
 800494a:	f007 fc7b 	bl	800c244 <tcp_write>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8004952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800495a:	89bb      	ldrh	r3, [r7, #12]
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ff12 	bl	8004788 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	f008 fa57 	bl	800ce18 <tcp_output>
 800496a:	e000      	b.n	800496e <mqtt_output_send+0x156>
    return;
 800496c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bd90      	pop	{r4, r7, pc}
 8004974:	080175a8 	.word	0x080175a8
 8004978:	08017648 	.word	0x08017648
 800497c:	08017620 	.word	0x08017620

08004980 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <mqtt_create_request+0x28>
 800499a:	4b19      	ldr	r3, [pc, #100]	@ (8004a00 <mqtt_create_request+0x80>)
 800499c:	f240 1223 	movw	r2, #291	@ 0x123
 80049a0:	4918      	ldr	r1, [pc, #96]	@ (8004a04 <mqtt_create_request+0x84>)
 80049a2:	4819      	ldr	r0, [pc, #100]	@ (8004a08 <mqtt_create_request+0x88>)
 80049a4:	f00f fa42 	bl	8013e2c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
 80049ac:	e01f      	b.n	80049ee <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	68f9      	ldr	r1, [r7, #12]
 80049be:	440b      	add	r3, r1
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d111      	bne.n	80049e8 <mqtt_create_request+0x68>
      r = &r_objs[n];
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	819a      	strh	r2, [r3, #12]
      break;
 80049e6:	e006      	b.n	80049f6 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	3301      	adds	r3, #1
 80049ec:	74fb      	strb	r3, [r7, #19]
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d8db      	bhi.n	80049ae <mqtt_create_request+0x2e>
    }
  }
  return r;
 80049f6:	697b      	ldr	r3, [r7, #20]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	080175a8 	.word	0x080175a8
 8004a04:	08017668 	.word	0x08017668
 8004a08:	08017620 	.word	0x08017620

08004a0c <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <mqtt_append_request+0x26>
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <mqtt_append_request+0x88>)
 8004a26:	f240 123f 	movw	r2, #319	@ 0x13f
 8004a2a:	491b      	ldr	r1, [pc, #108]	@ (8004a98 <mqtt_append_request+0x8c>)
 8004a2c:	481b      	ldr	r0, [pc, #108]	@ (8004a9c <mqtt_append_request+0x90>)
 8004a2e:	f00f f9fd 	bl	8013e2c <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e00a      	b.n	8004a50 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	89da      	ldrh	r2, [r3, #14]
 8004a3e:	8a7b      	ldrh	r3, [r7, #18]
 8004a40:	4413      	add	r3, r2
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	827b      	strh	r3, [r7, #18]
    head = iter;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f1      	bne.n	8004a3a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8004a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a5a:	2b1e      	cmp	r3, #30
 8004a5c:	dd06      	ble.n	8004a6c <mqtt_append_request+0x60>
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <mqtt_append_request+0x88>)
 8004a60:	f240 1247 	movw	r2, #327	@ 0x147
 8004a64:	490e      	ldr	r1, [pc, #56]	@ (8004aa0 <mqtt_append_request+0x94>)
 8004a66:	480d      	ldr	r0, [pc, #52]	@ (8004a9c <mqtt_append_request+0x90>)
 8004a68:	f00f f9e0 	bl	8013e2c <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8004a6c:	8a7b      	ldrh	r3, [r7, #18]
 8004a6e:	f1c3 031e 	rsb	r3, r3, #30
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <mqtt_append_request+0x7a>
    *tail = r;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8004a84:	e002      	b.n	8004a8c <mqtt_append_request+0x80>
    head->next = r;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	601a      	str	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	080175a8 	.word	0x080175a8
 8004a98:	0801768c 	.word	0x0801768c
 8004a9c:	08017620 	.word	0x08017620
 8004aa0:	080176b0 	.word	0x080176b0

08004aa4 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <mqtt_delete_request+0x14>
    r->next = r;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
  }
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <mqtt_take_request+0x28>
 8004ade:	4b1f      	ldr	r3, [pc, #124]	@ (8004b5c <mqtt_take_request+0x98>)
 8004ae0:	f240 1267 	movw	r2, #359	@ 0x167
 8004ae4:	491e      	ldr	r1, [pc, #120]	@ (8004b60 <mqtt_take_request+0x9c>)
 8004ae6:	481f      	ldr	r0, [pc, #124]	@ (8004b64 <mqtt_take_request+0xa0>)
 8004ae8:	f00f f9a0 	bl	8013e2c <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e009      	b.n	8004b08 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	899b      	ldrh	r3, [r3, #12]
 8004af8:	887a      	ldrh	r2, [r7, #2]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d008      	beq.n	8004b10 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f2      	bne.n	8004af4 <mqtt_take_request+0x30>
 8004b0e:	e000      	b.n	8004b12 <mqtt_take_request+0x4e>
      break;
 8004b10:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01c      	beq.n	8004b52 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <mqtt_take_request+0x64>
      *tail = iter->next;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e003      	b.n	8004b30 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	89d9      	ldrh	r1, [r3, #14]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	89da      	ldrh	r2, [r3, #14]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	440a      	add	r2, r1
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	080175a8 	.word	0x080175a8
 8004b60:	080176e8 	.word	0x080176e8
 8004b64:	08017620 	.word	0x08017620

08004b68 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <mqtt_request_time_elapsed+0x20>
 8004b7a:	4b21      	ldr	r3, [pc, #132]	@ (8004c00 <mqtt_request_time_elapsed+0x98>)
 8004b7c:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 8004b80:	4920      	ldr	r1, [pc, #128]	@ (8004c04 <mqtt_request_time_elapsed+0x9c>)
 8004b82:	4821      	ldr	r0, [pc, #132]	@ (8004c08 <mqtt_request_time_elapsed+0xa0>)
 8004b84:	f00f f952 	bl	8013e2c <iprintf>
  r = *tail;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8004b8e:	e02c      	b.n	8004bea <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	89db      	ldrh	r3, [r3, #14]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d31c      	bcc.n	8004bd6 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	89db      	ldrh	r3, [r3, #14]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	6892      	ldr	r2, [r2, #8]
 8004bc0:	f06f 0102 	mvn.w	r1, #2
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff6b 	bl	8004aa4 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e009      	b.n	8004bea <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	89da      	ldrh	r2, [r3, #14]
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	81da      	strh	r2, [r3, #14]
      t = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <mqtt_request_time_elapsed+0x8e>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1cc      	bne.n	8004b90 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	080175a8 	.word	0x080175a8
 8004c04:	08017708 	.word	0x08017708
 8004c08:	08017620 	.word	0x08017620

08004c0c <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <mqtt_clear_requests+0x1c>
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <mqtt_clear_requests+0x48>)
 8004c1c:	f240 12a7 	movw	r2, #423	@ 0x1a7
 8004c20:	490d      	ldr	r1, [pc, #52]	@ (8004c58 <mqtt_clear_requests+0x4c>)
 8004c22:	480e      	ldr	r0, [pc, #56]	@ (8004c5c <mqtt_clear_requests+0x50>)
 8004c24:	f00f f902 	bl	8013e2c <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	e007      	b.n	8004c40 <mqtt_clear_requests+0x34>
    next = iter->next;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff34 	bl	8004aa4 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f4      	bne.n	8004c30 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	080175a8 	.word	0x080175a8
 8004c58:	08017730 	.word	0x08017730
 8004c5c:	08017620 	.word	0x08017620

08004c60 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <mqtt_init_requests+0x1e>
 8004c70:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <mqtt_init_requests+0x50>)
 8004c72:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8004c76:	490f      	ldr	r1, [pc, #60]	@ (8004cb4 <mqtt_init_requests+0x54>)
 8004c78:	480f      	ldr	r0, [pc, #60]	@ (8004cb8 <mqtt_init_requests+0x58>)
 8004c7a:	f00f f8d7 	bl	8013e2c <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e00b      	b.n	8004c9c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	011a      	lsls	r2, r3, #4
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	440b      	add	r3, r1
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	440a      	add	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d8ef      	bhi.n	8004c84 <mqtt_init_requests+0x24>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	080175a8 	.word	0x080175a8
 8004cb4:	08017754 	.word	0x08017754
 8004cb8:	08017620 	.word	0x08017620

08004cbc <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fd2b 	bl	8004728 <mqtt_ringbuf_put>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fd19 	bl	8004728 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fd13 	bl	8004728 <mqtt_ringbuf_put>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8004d18:	2300      	movs	r3, #0
 8004d1a:	82fb      	strh	r3, [r7, #22]
 8004d1c:	e00a      	b.n	8004d34 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	4413      	add	r3, r2
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff fcfd 	bl	8004728 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004d2e:	8afb      	ldrh	r3, [r7, #22]
 8004d30:	3301      	adds	r3, #1
 8004d32:	82fb      	strh	r3, [r7, #22]
 8004d34:	8afa      	ldrh	r2, [r7, #22]
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3f0      	bcc.n	8004d1e <mqtt_output_append_buf+0x14>
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	4613      	mov	r3, r2
 8004d52:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fce2 	bl	8004728 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fcdc 	bl	8004728 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004d70:	2300      	movs	r3, #0
 8004d72:	82fb      	strh	r3, [r7, #22]
 8004d74:	e00a      	b.n	8004d8c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8004d76:	8afb      	ldrh	r3, [r7, #22]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff fcd1 	bl	8004728 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8004d86:	8afb      	ldrh	r3, [r7, #22]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	82fb      	strh	r3, [r7, #22]
 8004d8c:	8afa      	ldrh	r2, [r7, #22]
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3f0      	bcc.n	8004d76 <mqtt_output_append_string+0x30>
  }
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	4608      	mov	r0, r1
 8004da8:	4611      	mov	r1, r2
 8004daa:	461a      	mov	r2, r3
 8004dac:	4603      	mov	r3, r0
 8004dae:	70fb      	strb	r3, [r7, #3]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70bb      	strb	r3, [r7, #2]
 8004db4:	4613      	mov	r3, r2
 8004db6:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8004db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	b25a      	sxtb	r2, r3
 8004dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	b25b      	sxtb	r3, r3
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b25a      	sxtb	r2, r3
 8004dd2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	f003 0306 	and.w	r3, r3, #6
 8004dde:	b25b      	sxtb	r3, r3
 8004de0:	4313      	orrs	r3, r2
 8004de2:	b25a      	sxtb	r2, r3
 8004de4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	4313      	orrs	r3, r2
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff60 	bl	8004cbc <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8004dfc:	8abb      	ldrh	r3, [r7, #20]
 8004dfe:	b25b      	sxtb	r3, r3
 8004e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e04:	b25b      	sxtb	r3, r3
 8004e06:	8aba      	ldrh	r2, [r7, #20]
 8004e08:	2a7f      	cmp	r2, #127	@ 0x7f
 8004e0a:	d902      	bls.n	8004e12 <mqtt_output_append_fixed_header+0x74>
 8004e0c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004e10:	e000      	b.n	8004e14 <mqtt_output_append_fixed_header+0x76>
 8004e12:	2200      	movs	r2, #0
 8004e14:	4313      	orrs	r3, r2
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff ff4d 	bl	8004cbc <mqtt_output_append_u8>
    r_length >>= 7;
 8004e22:	8abb      	ldrh	r3, [r7, #20]
 8004e24:	09db      	lsrs	r3, r3, #7
 8004e26:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8004e28:	8abb      	ldrh	r3, [r7, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <mqtt_output_append_fixed_header+0x5e>
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8004e44:	887b      	ldrh	r3, [r7, #2]
 8004e46:	3301      	adds	r3, #1
 8004e48:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <mqtt_output_check_space+0x26>
 8004e50:	4b0f      	ldr	r3, [pc, #60]	@ (8004e90 <mqtt_output_check_space+0x58>)
 8004e52:	f240 2207 	movw	r2, #519	@ 0x207
 8004e56:	490f      	ldr	r1, [pc, #60]	@ (8004e94 <mqtt_output_check_space+0x5c>)
 8004e58:	480f      	ldr	r0, [pc, #60]	@ (8004e98 <mqtt_output_check_space+0x60>)
 8004e5a:	f00e ffe7 	bl	8013e2c <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8004e5e:	89fb      	ldrh	r3, [r7, #14]
 8004e60:	3301      	adds	r3, #1
 8004e62:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8004e64:	887b      	ldrh	r3, [r7, #2]
 8004e66:	09db      	lsrs	r3, r3, #7
 8004e68:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8004e6a:	887b      	ldrh	r3, [r7, #2]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f6      	bne.n	8004e5e <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8004e70:	89fc      	ldrh	r4, [r7, #14]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fcb4 	bl	80047e0 <mqtt_ringbuf_len>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	bfd4      	ite	le
 8004e82:	2301      	movle	r3, #1
 8004e84:	2300      	movgt	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	080175a8 	.word	0x080175a8
 8004e94:	08017778 	.word	0x08017778
 8004e98:	08017620 	.word	0x08017620

08004e9c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <mqtt_close+0x20>
 8004eae:	4b27      	ldr	r3, [pc, #156]	@ (8004f4c <mqtt_close+0xb0>)
 8004eb0:	f240 221b 	movw	r2, #539	@ 0x21b
 8004eb4:	4926      	ldr	r1, [pc, #152]	@ (8004f50 <mqtt_close+0xb4>)
 8004eb6:	4827      	ldr	r0, [pc, #156]	@ (8004f54 <mqtt_close+0xb8>)
 8004eb8:	f00e ffb8 	bl	8013e2c <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d024      	beq.n	8004f0e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 faa8 	bl	8009420 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f004 fae6 	bl	80094a8 <tcp_err>
    altcp_sent(client->conn, NULL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f004 fabe 	bl	8009464 <tcp_sent>
    res = altcp_close(client->conn);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 f8bd 	bl	800806c <tcp_close>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8004ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 f99c 	bl	8008240 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3318      	adds	r3, #24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fe7a 	bl	8004c0c <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	480f      	ldr	r0, [pc, #60]	@ (8004f58 <mqtt_close+0xbc>)
 8004f1c:	f008 fff8 	bl	800df10 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	7a9b      	ldrb	r3, [r3, #10]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00d      	beq.n	8004f44 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d006      	beq.n	8004f44 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6911      	ldr	r1, [r2, #16]
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
    }
  }
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	080175a8 	.word	0x080175a8
 8004f50:	0801779c 	.word	0x0801779c
 8004f54:	08017620 	.word	0x08017620
 8004f58:	08004f5d 	.word	0x08004f5d

08004f5c <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <mqtt_cyclic_timer+0x24>
 8004f72:	4b42      	ldr	r3, [pc, #264]	@ (800507c <mqtt_cyclic_timer+0x120>)
 8004f74:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8004f78:	4941      	ldr	r1, [pc, #260]	@ (8005080 <mqtt_cyclic_timer+0x124>)
 8004f7a:	4842      	ldr	r0, [pc, #264]	@ (8005084 <mqtt_cyclic_timer+0x128>)
 8004f7c:	f00e ff56 	bl	8013e2c <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	7a9b      	ldrb	r3, [r3, #10]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d115      	bne.n	8004fb4 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	2b63      	cmp	r3, #99	@ 0x63
 8004fa2:	dd5e      	ble.n	8005062 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004fa4:	f240 1101 	movw	r1, #257	@ 0x101
 8004fa8:	68b8      	ldr	r0, [r7, #8]
 8004faa:	f7ff ff77 	bl	8004e9c <mqtt_close>
      restart_timer = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e056      	b.n	8005062 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	7a9b      	ldrb	r3, [r3, #10]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d150      	bne.n	800505e <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	2105      	movs	r1, #5
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fdd0 	bl	8004b68 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	885b      	ldrh	r3, [r3, #2]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d048      	beq.n	8005062 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	889b      	ldrh	r3, [r3, #4]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	889b      	ldrh	r3, [r3, #4]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	885b      	ldrh	r3, [r3, #2]
 8004fec:	4619      	mov	r1, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	885b      	ldrh	r3, [r3, #2]
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	dd06      	ble.n	800500a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8004ffc:	f240 1101 	movw	r1, #257	@ 0x101
 8005000:	68b8      	ldr	r0, [r7, #8]
 8005002:	f7ff ff4b 	bl	8004e9c <mqtt_close>
        restart_timer = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	8852      	ldrh	r2, [r2, #2]
 800501a:	4293      	cmp	r3, r2
 800501c:	db18      	blt.n	8005050 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	33ec      	adds	r3, #236	@ 0xec
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff07 	bl	8004e38 <mqtt_output_check_space>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d018      	beq.n	8005062 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005036:	2300      	movs	r3, #0
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	2200      	movs	r2, #0
 8005042:	210c      	movs	r1, #12
 8005044:	f7ff feab 	bl	8004d9e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2200      	movs	r2, #0
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	e008      	b.n	8005062 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	e001      	b.n	8005062 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4907      	ldr	r1, [pc, #28]	@ (8005088 <mqtt_cyclic_timer+0x12c>)
 800506c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8005070:	f008 ff28 	bl	800dec4 <sys_timeout>
  }
}
 8005074:	bf00      	nop
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	080175a8 	.word	0x080175a8
 8005080:	080177b8 	.word	0x080177b8
 8005084:	08017620 	.word	0x08017620
 8005088:	08004f5d 	.word	0x08004f5d

0800508c <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	4608      	mov	r0, r1
 8005096:	4611      	mov	r1, r2
 8005098:	461a      	mov	r2, r3
 800509a:	4603      	mov	r3, r0
 800509c:	70fb      	strb	r3, [r7, #3]
 800509e:	460b      	mov	r3, r1
 80050a0:	803b      	strh	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	33ec      	adds	r3, #236	@ 0xec
 80050ae:	2102      	movs	r1, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fec1 	bl	8004e38 <mqtt_output_check_space>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01c      	beq.n	80050f6 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 80050c2:	78bb      	ldrb	r3, [r7, #2]
 80050c4:	78f9      	ldrb	r1, [r7, #3]
 80050c6:	2202      	movs	r2, #2
 80050c8:	9201      	str	r2, [sp, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	9200      	str	r2, [sp, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f7ff fe65 	bl	8004d9e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	33ec      	adds	r3, #236	@ 0xec
 80050d8:	883a      	ldrh	r2, [r7, #0]
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fdfc 	bl	8004cda <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7ff fb92 	bl	8004818 <mqtt_output_send>
 80050f4:	e001      	b.n	80050fa <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80050f6:	23ff      	movs	r3, #255	@ 0xff
 80050f8:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80050fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6890      	ldr	r0, [r2, #8]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	2a02      	cmp	r2, #2
 8005126:	d801      	bhi.n	800512c <mqtt_incomming_suback+0x26>
 8005128:	2200      	movs	r2, #0
 800512a:	e001      	b.n	8005130 <mqtt_incomming_suback+0x2a>
 800512c:	f06f 020c 	mvn.w	r2, #12
 8005130:	4611      	mov	r1, r2
 8005132:	4798      	blx	r3
  }
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b08f      	sub	sp, #60	@ 0x3c
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	72fb      	strb	r3, [r7, #11]
 800514a:	4613      	mov	r3, r2
 800514c:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800514e:	2300      	movs	r3, #0
 8005150:	86fb      	strh	r3, [r7, #54]	@ 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8005158:	7afb      	ldrb	r3, [r7, #11]
 800515a:	4413      	add	r3, r2
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u16_t pkt_id = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800517a:	2b7f      	cmp	r3, #127	@ 0x7f
 800517c:	d906      	bls.n	800518c <mqtt_message_received+0x50>
 800517e:	4b9a      	ldr	r3, [pc, #616]	@ (80053e8 <mqtt_message_received+0x2ac>)
 8005180:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8005184:	4999      	ldr	r1, [pc, #612]	@ (80053ec <mqtt_message_received+0x2b0>)
 8005186:	489a      	ldr	r0, [pc, #616]	@ (80053f0 <mqtt_message_received+0x2b4>)
 8005188:	f00e fe50 	bl	8013e2c <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800518c:	7afa      	ldrb	r2, [r7, #11]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005192:	429a      	cmp	r2, r3
 8005194:	d906      	bls.n	80051a4 <mqtt_message_received+0x68>
 8005196:	4b94      	ldr	r3, [pc, #592]	@ (80053e8 <mqtt_message_received+0x2ac>)
 8005198:	f44f 722b 	mov.w	r2, #684	@ 0x2ac
 800519c:	4995      	ldr	r1, [pc, #596]	@ (80053f4 <mqtt_message_received+0x2b8>)
 800519e:	4894      	ldr	r0, [pc, #592]	@ (80053f0 <mqtt_message_received+0x2b4>)
 80051a0:	f00e fe44 	bl	8013e2c <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80051a4:	7afa      	ldrb	r2, [r7, #11]
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	dd09      	ble.n	80051c2 <mqtt_message_received+0x86>
 80051ae:	4b8e      	ldr	r3, [pc, #568]	@ (80053e8 <mqtt_message_received+0x2ac>)
 80051b0:	f240 22ad 	movw	r2, #685	@ 0x2ad
 80051b4:	4990      	ldr	r1, [pc, #576]	@ (80053f8 <mqtt_message_received+0x2bc>)
 80051b6:	488e      	ldr	r0, [pc, #568]	@ (80053f0 <mqtt_message_received+0x2b4>)
 80051b8:	f00e fe38 	bl	8013e2c <iprintf>
 80051bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051c0:	e16a      	b.n	8005498 <mqtt_message_received+0x35c>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 80051c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d123      	bne.n	8005212 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	7a9b      	ldrb	r3, [r3, #10]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	f040 814d 	bne.w	800546e <mqtt_message_received+0x332>
      if (length < 2) {
 80051d4:	893b      	ldrh	r3, [r7, #8]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	f240 814b 	bls.w	8005472 <mqtt_message_received+0x336>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	3301      	adds	r3, #1
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80051e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 8141 	bne.w	800546e <mqtt_message_received+0x332>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2203      	movs	r2, #3
 80051f6:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 8136 	beq.w	800546e <mqtt_message_received+0x332>
          client->connect_cb(client, client->connect_arg, res);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	6911      	ldr	r1, [r2, #16]
 800520a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	4798      	blx	r3
 8005210:	e12d      	b.n	800546e <mqtt_message_received+0x332>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8005212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005216:	2b0d      	cmp	r3, #13
 8005218:	f000 8129 	beq.w	800546e <mqtt_message_received+0x332>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800521c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005220:	2b03      	cmp	r3, #3
 8005222:	f040 80bd 	bne.w	80053a0 <mqtt_message_received+0x264>
    u16_t payload_offset = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	86bb      	strh	r3, [r7, #52]	@ 0x34
    u16_t payload_length = length;
 800522a:	893b      	ldrh	r3, [r7, #8]
 800522c:	867b      	strh	r3, [r7, #50]	@ 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8005234:	105b      	asrs	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005242:	2b80      	cmp	r3, #128	@ 0x80
 8005244:	d87a      	bhi.n	800533c <mqtt_message_received+0x200>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8005246:	7ffb      	ldrb	r3, [r7, #31]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <mqtt_message_received+0x114>
 800524c:	2302      	movs	r3, #2
 800524e:	e000      	b.n	8005252 <mqtt_message_received+0x116>
 8005250:	2300      	movs	r3, #0
 8005252:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8005254:	8bbb      	ldrh	r3, [r7, #28]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	f280 810b 	bge.w	8005476 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8005266:	8b7b      	ldrh	r3, [r7, #26]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	b29b      	uxth	r3, r3
 800526c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800526e:	3201      	adds	r2, #1
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	4413      	add	r3, r2
 8005274:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8005276:	8b7a      	ldrh	r2, [r7, #26]
 8005278:	8939      	ldrh	r1, [r7, #8]
 800527a:	8bbb      	ldrh	r3, [r7, #28]
 800527c:	3302      	adds	r3, #2
 800527e:	1acb      	subs	r3, r1, r3
 8005280:	429a      	cmp	r2, r3
 8005282:	f300 80fa 	bgt.w	800547a <mqtt_message_received+0x33e>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8005286:	8b7a      	ldrh	r2, [r7, #26]
 8005288:	8bbb      	ldrh	r3, [r7, #28]
 800528a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800528c:	1acb      	subs	r3, r1, r3
 800528e:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	f200 80f2 	bhi.w	800547a <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	3302      	adds	r3, #2
 800529a:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800529c:	8b7b      	ldrh	r3, [r7, #26]
 800529e:	3302      	adds	r3, #2
 80052a0:	863b      	strh	r3, [r7, #48]	@ 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80052a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052a4:	7ffa      	ldrb	r2, [r7, #31]
 80052a6:	2a00      	cmp	r2, #0
 80052a8:	d001      	beq.n	80052ae <mqtt_message_received+0x172>
 80052aa:	2202      	movs	r2, #2
 80052ac:	e000      	b.n	80052b0 <mqtt_message_received+0x174>
 80052ae:	2201      	movs	r2, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b4:	429a      	cmp	r2, r3
 80052b6:	f0c0 80e2 	bcc.w	800547e <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d018      	beq.n	80052f2 <mqtt_message_received+0x1b6>
        if (length < after_topic + 2U) {
 80052c0:	893a      	ldrh	r2, [r7, #8]
 80052c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052c4:	3302      	adds	r3, #2
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f0c0 80db 	bcc.w	8005482 <mqtt_message_received+0x346>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80052cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052d0:	4413      	add	r3, r2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80052da:	3201      	adds	r2, #1
 80052dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052de:	440a      	add	r2, r1
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	4413      	add	r3, r2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80052ea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80052ec:	3302      	adds	r3, #2
 80052ee:	863b      	strh	r3, [r7, #48]	@ 0x30
 80052f0:	e002      	b.n	80052f8 <mqtt_message_received+0x1bc>
      } else {
        client->inpub_pkt_id = 0;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80052f8:	8b7b      	ldrh	r3, [r7, #26]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8005302:	8b7b      	ldrh	r3, [r7, #26]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	867b      	strh	r3, [r7, #50]	@ 0x32
      payload_offset = after_topic;
 8005314:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005316:	86bb      	strh	r3, [r7, #52]	@ 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <mqtt_message_received+0x1f6>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8005328:	8e79      	ldrh	r1, [r7, #50]	@ 0x32
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	440a      	add	r2, r1
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8005332:	8b7b      	ldrh	r3, [r7, #26]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	7cfa      	ldrb	r2, [r7, #19]
 800533a:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800533c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <mqtt_message_received+0x20e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 8092 	bne.w	800546e <mqtt_message_received+0x332>
      if (length < (size_t)(payload_offset + payload_length)) {
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 800534e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005350:	440a      	add	r2, r1
 8005352:	4293      	cmp	r3, r2
 8005354:	f0c0 8097 	bcc.w	8005486 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8005360:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005364:	18d1      	adds	r1, r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005374:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d178      	bne.n	800546e <mqtt_message_received+0x332>
 800537c:	7ffb      	ldrb	r3, [r7, #31]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d075      	beq.n	800546e <mqtt_message_received+0x332>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <mqtt_message_received+0x250>
 8005388:	2304      	movs	r3, #4
 800538a:	e000      	b.n	800538e <mqtt_message_received+0x252>
 800538c:	2305      	movs	r3, #5
 800538e:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	891a      	ldrh	r2, [r3, #8]
 8005394:	7cb9      	ldrb	r1, [r7, #18]
 8005396:	2300      	movs	r3, #0
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fe77 	bl	800508c <pub_ack_rec_rel_response>
 800539e:	e066      	b.n	800546e <mqtt_message_received+0x332>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	3301      	adds	r3, #1
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053b2:	4313      	orrs	r3, r2
 80053b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (pkt_id == 0) {
 80053b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d066      	beq.n	800548a <mqtt_message_received+0x34e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80053bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c0:	2b05      	cmp	r3, #5
 80053c2:	d106      	bne.n	80053d2 <mqtt_message_received+0x296>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80053c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053c6:	2301      	movs	r3, #1
 80053c8:	2106      	movs	r1, #6
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fe5e 	bl	800508c <pub_ack_rec_rel_response>
 80053d0:	e04d      	b.n	800546e <mqtt_message_received+0x332>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80053d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d110      	bne.n	80053fc <mqtt_message_received+0x2c0>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80053da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80053dc:	2300      	movs	r3, #0
 80053de:	2107      	movs	r1, #7
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff fe53 	bl	800508c <pub_ack_rec_rel_response>
 80053e6:	e042      	b.n	800546e <mqtt_message_received+0x332>
 80053e8:	080175a8 	.word	0x080175a8
 80053ec:	080177dc 	.word	0x080177dc
 80053f0:	08017620 	.word	0x08017620
 80053f4:	0801780c 	.word	0x0801780c
 80053f8:	08017830 	.word	0x08017830

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80053fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005400:	2b09      	cmp	r3, #9
 8005402:	d00b      	beq.n	800541c <mqtt_message_received+0x2e0>
 8005404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005408:	2b0b      	cmp	r3, #11
 800540a:	d007      	beq.n	800541c <mqtt_message_received+0x2e0>
 800540c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005410:	2b07      	cmp	r3, #7
 8005412:	d003      	beq.n	800541c <mqtt_message_received+0x2e0>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8005414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005418:	2b04      	cmp	r3, #4
 800541a:	d138      	bne.n	800548e <mqtt_message_received+0x352>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3318      	adds	r3, #24
 8005420:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fb4d 	bl	8004ac4 <mqtt_take_request>
 800542a:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01c      	beq.n	800546c <mqtt_message_received+0x330>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8005432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005436:	2b09      	cmp	r3, #9
 8005438:	d10a      	bne.n	8005450 <mqtt_message_received+0x314>
          if (length < 3) {
 800543a:	893b      	ldrh	r3, [r7, #8]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d928      	bls.n	8005492 <mqtt_message_received+0x356>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	3302      	adds	r3, #2
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	6a38      	ldr	r0, [r7, #32]
 800544a:	f7ff fe5c 	bl	8005106 <mqtt_incomming_suback>
 800544e:	e00a      	b.n	8005466 <mqtt_message_received+0x32a>
          }
        } else if (r->cb != NULL) {
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <mqtt_message_received+0x32a>
          r->cb(r->arg, ERR_OK);
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	6892      	ldr	r2, [r2, #8]
 8005460:	2100      	movs	r1, #0
 8005462:	4610      	mov	r0, r2
 8005464:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 8005466:	6a38      	ldr	r0, [r7, #32]
 8005468:	f7ff fb1c 	bl	8004aa4 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800546c:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800546e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005470:	e012      	b.n	8005498 <mqtt_message_received+0x35c>
        goto out_disconnect;
 8005472:	bf00      	nop
 8005474:	e00e      	b.n	8005494 <mqtt_message_received+0x358>
        goto out_disconnect;
 8005476:	bf00      	nop
 8005478:	e00c      	b.n	8005494 <mqtt_message_received+0x358>
        goto out_disconnect;
 800547a:	bf00      	nop
 800547c:	e00a      	b.n	8005494 <mqtt_message_received+0x358>
        goto out_disconnect;
 800547e:	bf00      	nop
 8005480:	e008      	b.n	8005494 <mqtt_message_received+0x358>
          goto out_disconnect;
 8005482:	bf00      	nop
 8005484:	e006      	b.n	8005494 <mqtt_message_received+0x358>
        goto out_disconnect;
 8005486:	bf00      	nop
 8005488:	e004      	b.n	8005494 <mqtt_message_received+0x358>
      goto out_disconnect;
 800548a:	bf00      	nop
 800548c:	e002      	b.n	8005494 <mqtt_message_received+0x358>
      goto out_disconnect;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <mqtt_message_received+0x358>
            goto out_disconnect;
 8005492:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 8005494:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8005498:	4618      	mov	r0, r3
 800549a:	373c      	adds	r7, #60	@ 0x3c
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}

080054a0 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80054ba:	e0be      	b.n	800563a <mqtt_parse_incoming+0x19a>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d903      	bls.n	80054ca <mqtt_parse_incoming+0x2a>
 80054c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da4d      	bge.n	8005566 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80054ca:	7dfa      	ldrb	r2, [r7, #23]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d206      	bcs.n	80054e2 <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80054de:	75bb      	strb	r3, [r7, #22]
 80054e0:	e012      	b.n	8005508 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80054e2:	8bfb      	ldrh	r3, [r7, #30]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	83fa      	strh	r2, [r7, #30]
 80054e8:	4619      	mov	r1, r3
 80054ea:	6838      	ldr	r0, [r7, #0]
 80054ec:	f002 fb74 	bl	8007bd8 <pbuf_get_at>
 80054f0:	4603      	mov	r3, r0
 80054f2:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054f8:	1c59      	adds	r1, r3, #1
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6691      	str	r1, [r2, #104]	@ 0x68
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4413      	add	r3, r2
 8005502:	7dba      	ldrb	r2, [r7, #22]
 8005504:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      }
      fixed_hdr_idx++;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	3301      	adds	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b01      	cmp	r3, #1
 8005512:	f240 8091 	bls.w	8005638 <mqtt_parse_incoming+0x198>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8005516:	7dbb      	ldrb	r3, [r7, #22]
 8005518:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	1e9a      	subs	r2, r3, #2
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8005530:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db7f      	blt.n	8005638 <mqtt_parse_incoming+0x198>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800553e:	7df9      	ldrb	r1, [r7, #23]
 8005540:	2300      	movs	r3, #0
 8005542:	2200      	movs	r2, #0
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fdf9 	bl	800513c <mqtt_message_received>
            client->msg_idx = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	669a      	str	r2, [r3, #104]	@ 0x68
            fixed_hdr_idx = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
      if (fixed_hdr_idx >= 2) {
 8005554:	e070      	b.n	8005638 <mqtt_parse_incoming+0x198>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8005556:	7dfa      	ldrb	r2, [r7, #23]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	441a      	add	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8005564:	e068      	b.n	8005638 <mqtt_parse_incoming+0x198>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	7dfa      	ldrb	r2, [r7, #23]
 8005570:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 8005574:	fbb3 f1f2 	udiv	r1, r3, r2
 8005578:	fb01 f202 	mul.w	r2, r1, r2
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	b29a      	uxth	r2, r3
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	b29b      	uxth	r3, r3
 8005584:	4413      	add	r3, r2
 8005586:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	891a      	ldrh	r2, [r3, #8]
 800558c:	8bfb      	ldrh	r3, [r7, #30]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	4293      	cmp	r3, r2
 8005598:	d905      	bls.n	80055a6 <mqtt_parse_incoming+0x106>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	891a      	ldrh	r2, [r3, #8]
 800559e:	8bfb      	ldrh	r3, [r7, #30]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	e001      	b.n	80055aa <mqtt_parse_incoming+0x10a>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80055ac:	8a7b      	ldrh	r3, [r7, #18]
 80055ae:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80055b2:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 80055b4:	8aba      	ldrh	r2, [r7, #20]
 80055b6:	8a3b      	ldrh	r3, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d901      	bls.n	80055c0 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 80055bc:	8a3b      	ldrh	r3, [r7, #16]
 80055be:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 80055c6:	8a7b      	ldrh	r3, [r7, #18]
 80055c8:	18d1      	adds	r1, r2, r3
 80055ca:	8bfb      	ldrh	r3, [r7, #30]
 80055cc:	8aba      	ldrh	r2, [r7, #20]
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f002 fa34 	bl	8007a3c <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80055d8:	8abb      	ldrh	r3, [r7, #20]
 80055da:	441a      	add	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	669a      	str	r2, [r3, #104]	@ 0x68
      in_offset += cpy_len;
 80055e0:	8bfa      	ldrh	r2, [r7, #30]
 80055e2:	8abb      	ldrh	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 80055e8:	8abb      	ldrh	r3, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <mqtt_parse_incoming+0x15e>
 80055f6:	8aba      	ldrh	r2, [r7, #20]
 80055f8:	8a3b      	ldrh	r3, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d11d      	bne.n	800563a <mqtt_parse_incoming+0x19a>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 80055fe:	8a7a      	ldrh	r2, [r7, #18]
 8005600:	8abb      	ldrh	r3, [r7, #20]
 8005602:	4413      	add	r3, r2
 8005604:	b29a      	uxth	r2, r3
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	b29b      	uxth	r3, r3
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	b29a      	uxth	r2, r3
 800560e:	7df9      	ldrb	r1, [r7, #23]
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fd92 	bl	800513c <mqtt_message_received>
 8005618:	4603      	mov	r3, r0
 800561a:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <mqtt_parse_incoming+0x186>
          return res;
 8005622:	89fb      	ldrh	r3, [r7, #14]
 8005624:	e010      	b.n	8005648 <mqtt_parse_incoming+0x1a8>
        }
        if (msg_rem_len == 0) {
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <mqtt_parse_incoming+0x19a>
          /* Reset parser state */
          client->msg_idx = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	669a      	str	r2, [r3, #104]	@ 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]
 8005636:	e000      	b.n	800563a <mqtt_parse_incoming+0x19a>
      if (fixed_hdr_idx >= 2) {
 8005638:	bf00      	nop
  while (p->tot_len > in_offset) {
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	891b      	ldrh	r3, [r3, #8]
 800563e:	8bfa      	ldrh	r2, [r7, #30]
 8005640:	429a      	cmp	r2, r3
 8005642:	f4ff af3b 	bcc.w	80054bc <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <mqtt_tcp_recv_cb+0x26>
 8005668:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <mqtt_tcp_recv_cb+0xac>)
 800566a:	f240 32a7 	movw	r2, #935	@ 0x3a7
 800566e:	4924      	ldr	r1, [pc, #144]	@ (8005700 <mqtt_tcp_recv_cb+0xb0>)
 8005670:	4824      	ldr	r0, [pc, #144]	@ (8005704 <mqtt_tcp_recv_cb+0xb4>)
 8005672:	f00e fbdb 	bl	8013e2c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d006      	beq.n	800568e <mqtt_tcp_recv_cb+0x3e>
 8005680:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <mqtt_tcp_recv_cb+0xac>)
 8005682:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8005686:	4920      	ldr	r1, [pc, #128]	@ (8005708 <mqtt_tcp_recv_cb+0xb8>)
 8005688:	481e      	ldr	r0, [pc, #120]	@ (8005704 <mqtt_tcp_recv_cb+0xb4>)
 800568a:	f00e fbcf 	bl	8013e2c <iprintf>

  if (p == NULL) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d105      	bne.n	80056a0 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8005694:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f7ff fbff 	bl	8004e9c <mqtt_close>
 800569e:	e027      	b.n	80056f0 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80056a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 ffcd 	bl	8007648 <pbuf_free>
      return err;
 80056ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b2:	e01e      	b.n	80056f2 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	891b      	ldrh	r3, [r3, #8]
 80056b8:	4619      	mov	r1, r3
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	f002 febe 	bl	800843c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6978      	ldr	r0, [r7, #20]
 80056c4:	f7ff feec 	bl	80054a0 <mqtt_parse_incoming>
 80056c8:	4603      	mov	r3, r0
 80056ca:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 ffbb 	bl	8007648 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 80056d2:	8a7b      	ldrh	r3, [r7, #18]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 80056d8:	8a7b      	ldrh	r3, [r7, #18]
 80056da:	4619      	mov	r1, r3
 80056dc:	6978      	ldr	r0, [r7, #20]
 80056de:	f7ff fbdd 	bl	8004e9c <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	885b      	ldrh	r3, [r3, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	080175a8 	.word	0x080175a8
 8005700:	08017848 	.word	0x08017848
 8005704:	08017620 	.word	0x08017620
 8005708:	0801786c 	.word	0x0801786c

0800570c <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	7a9b      	ldrb	r3, [r3, #10]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d127      	bne.n	8005776 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8005732:	e00d      	b.n	8005750 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	6892      	ldr	r2, [r2, #8]
 8005744:	2100      	movs	r1, #0
 8005746:	4610      	mov	r0, r2
 8005748:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f7ff f9aa 	bl	8004aa4 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3318      	adds	r3, #24
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff f9b4 	bl	8004ac4 <mqtt_take_request>
 800575c:	6138      	str	r0, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e7      	bne.n	8005734 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f7ff f851 	bl	8004818 <mqtt_output_send>
  }
  return ERR_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <mqtt_tcp_err_cb+0x24>
 8005796:	4b09      	ldr	r3, [pc, #36]	@ (80057bc <mqtt_tcp_err_cb+0x3c>)
 8005798:	f240 32f6 	movw	r2, #1014	@ 0x3f6
 800579c:	4908      	ldr	r1, [pc, #32]	@ (80057c0 <mqtt_tcp_err_cb+0x40>)
 800579e:	4809      	ldr	r0, [pc, #36]	@ (80057c4 <mqtt_tcp_err_cb+0x44>)
 80057a0:	f00e fb44 	bl	8013e2c <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80057aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fb74 	bl	8004e9c <mqtt_close>
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	080175a8 	.word	0x080175a8
 80057c0:	08017894 	.word	0x08017894
 80057c4:	08017620 	.word	0x08017620

080057c8 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	7a9b      	ldrb	r3, [r3, #10]
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d105      	bne.n	80057ea <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	33ec      	adds	r3, #236	@ 0xec
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff f817 	bl	8004818 <mqtt_output_send>
  }
  return ERR_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800580e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005812:	e025      	b.n	8005860 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2200      	movs	r2, #0
 8005818:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800581a:	4913      	ldr	r1, [pc, #76]	@ (8005868 <mqtt_tcp_connect_cb+0x74>)
 800581c:	68b8      	ldr	r0, [r7, #8]
 800581e:	f003 fdff 	bl	8009420 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8005822:	4912      	ldr	r1, [pc, #72]	@ (800586c <mqtt_tcp_connect_cb+0x78>)
 8005824:	68b8      	ldr	r0, [r7, #8]
 8005826:	f003 fe1d 	bl	8009464 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800582a:	2202      	movs	r2, #2
 800582c:	4910      	ldr	r1, [pc, #64]	@ (8005870 <mqtt_tcp_connect_cb+0x7c>)
 800582e:	68b8      	ldr	r0, [r7, #8]
 8005830:	f003 fe5c 	bl	80094ec <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2202      	movs	r2, #2
 8005838:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	490d      	ldr	r1, [pc, #52]	@ (8005874 <mqtt_tcp_connect_cb+0x80>)
 800583e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8005842:	f008 fb3f 	bl	800dec4 <sys_timeout>
  client->cyclic_tick = 0;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f7fe ffdd 	bl	8004818 <mqtt_output_send>

  return ERR_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08005651 	.word	0x08005651
 800586c:	0800570d 	.word	0x0800570d
 8005870:	080057c9 	.word	0x080057c9
 8005874:	08004f5d 	.word	0x08004f5d

08005878 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	@ 0x30
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <mqtt_publish+0x22>
 800588c:	4b5d      	ldr	r3, [pc, #372]	@ (8005a04 <mqtt_publish+0x18c>)
 800588e:	f240 4254 	movw	r2, #1108	@ 0x454
 8005892:	495d      	ldr	r1, [pc, #372]	@ (8005a08 <mqtt_publish+0x190>)
 8005894:	485d      	ldr	r0, [pc, #372]	@ (8005a0c <mqtt_publish+0x194>)
 8005896:	f00e fac9 	bl	8013e2c <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <mqtt_publish+0x36>
 80058a0:	4b58      	ldr	r3, [pc, #352]	@ (8005a04 <mqtt_publish+0x18c>)
 80058a2:	f240 4255 	movw	r2, #1109	@ 0x455
 80058a6:	495a      	ldr	r1, [pc, #360]	@ (8005a10 <mqtt_publish+0x198>)
 80058a8:	4858      	ldr	r0, [pc, #352]	@ (8005a0c <mqtt_publish+0x194>)
 80058aa:	f00e fabf 	bl	8013e2c <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	7a9b      	ldrb	r3, [r3, #10]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <mqtt_publish+0x52>
 80058b6:	4b53      	ldr	r3, [pc, #332]	@ (8005a04 <mqtt_publish+0x18c>)
 80058b8:	f240 4256 	movw	r2, #1110	@ 0x456
 80058bc:	4955      	ldr	r1, [pc, #340]	@ (8005a14 <mqtt_publish+0x19c>)
 80058be:	4853      	ldr	r0, [pc, #332]	@ (8005a0c <mqtt_publish+0x194>)
 80058c0:	f00e fab4 	bl	8013e2c <iprintf>
 80058c4:	f06f 030a 	mvn.w	r3, #10
 80058c8:	e097      	b.n	80059fa <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7fa fd08 	bl	80002e0 <strlen>
 80058d0:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80058d8:	4293      	cmp	r3, r2
 80058da:	d909      	bls.n	80058f0 <mqtt_publish+0x78>
 80058dc:	4b49      	ldr	r3, [pc, #292]	@ (8005a04 <mqtt_publish+0x18c>)
 80058de:	f240 4259 	movw	r2, #1113	@ 0x459
 80058e2:	494d      	ldr	r1, [pc, #308]	@ (8005a18 <mqtt_publish+0x1a0>)
 80058e4:	4849      	ldr	r0, [pc, #292]	@ (8005a0c <mqtt_publish+0x194>)
 80058e6:	f00e faa1 	bl	8013e2c <iprintf>
 80058ea:	f06f 030f 	mvn.w	r3, #15
 80058ee:	e084      	b.n	80059fa <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 80058f4:	8b7b      	ldrh	r3, [r7, #26]
 80058f6:	1c9a      	adds	r2, r3, #2
 80058f8:	887b      	ldrh	r3, [r7, #2]
 80058fa:	4413      	add	r3, r2
 80058fc:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 80058fe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <mqtt_publish+0xa0>
    total_len += 2;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	3302      	adds	r3, #2
 800590a:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7fe feef 	bl	80046f0 <msg_generate_packet_id>
 8005912:	4603      	mov	r3, r0
 8005914:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005916:	e001      	b.n	800591c <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005922:	d309      	bcc.n	8005938 <mqtt_publish+0xc0>
 8005924:	4b37      	ldr	r3, [pc, #220]	@ (8005a04 <mqtt_publish+0x18c>)
 8005926:	f240 4265 	movw	r2, #1125	@ 0x465
 800592a:	493c      	ldr	r1, [pc, #240]	@ (8005a1c <mqtt_publish+0x1a4>)
 800592c:	4837      	ldr	r0, [pc, #220]	@ (8005a0c <mqtt_publish+0x194>)
 800592e:	f00e fa7d 	bl	8013e2c <iprintf>
 8005932:	f06f 030f 	mvn.w	r3, #15
 8005936:	e060      	b.n	80059fa <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f103 001c 	add.w	r0, r3, #28
 8005942:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	2104      	movs	r1, #4
 800594c:	f7ff f818 	bl	8004980 <mqtt_create_request>
 8005950:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <mqtt_publish+0xe6>
    return ERR_MEM;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	e04d      	b.n	80059fa <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	33ec      	adds	r3, #236	@ 0xec
 8005962:	8b3a      	ldrh	r2, [r7, #24]
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fa66 	bl	8004e38 <mqtt_output_check_space>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f7ff f896 	bl	8004aa4 <mqtt_delete_request>
    return ERR_MEM;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	e03d      	b.n	80059fa <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005984:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005988:	8b3b      	ldrh	r3, [r7, #24]
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	2200      	movs	r2, #0
 8005996:	2103      	movs	r1, #3
 8005998:	f7ff fa01 	bl	8004d9e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	33ec      	adds	r3, #236	@ 0xec
 80059a0:	8b7a      	ldrh	r2, [r7, #26]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f9ce 	bl	8004d46 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 80059aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	33ec      	adds	r3, #236	@ 0xec
 80059b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f98d 	bl	8004cda <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <mqtt_publish+0x162>
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d006      	beq.n	80059da <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	33ec      	adds	r3, #236	@ 0xec
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff f998 	bl	8004d0a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3318      	adds	r3, #24
 80059de:	6979      	ldr	r1, [r7, #20]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff f813 	bl	8004a0c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7fe ff10 	bl	8004818 <mqtt_output_send>
  return ERR_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3728      	adds	r7, #40	@ 0x28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	080175a8 	.word	0x080175a8
 8005a08:	080178b4 	.word	0x080178b4
 8005a0c:	08017620 	.word	0x08017620
 8005a10:	080178d4 	.word	0x080178d4
 8005a14:	080178f0 	.word	0x080178f0
 8005a18:	08017910 	.word	0x08017910
 8005a1c:	08017934 	.word	0x08017934

08005a20 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8005a24:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f000 fe5d 	bl	80066e8 <mem_calloc>
 8005a2e:	4603      	mov	r3, r0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	@ 0x30
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8005a44:	230a      	movs	r3, #10
 8005a46:	84bb      	strh	r3, [r7, #36]	@ 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	83fb      	strh	r3, [r7, #30]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <mqtt_client_connect+0x42>
 8005a68:	4b9e      	ldr	r3, [pc, #632]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005a6a:	f240 520f 	movw	r2, #1295	@ 0x50f
 8005a6e:	499e      	ldr	r1, [pc, #632]	@ (8005ce8 <mqtt_client_connect+0x2b4>)
 8005a70:	489e      	ldr	r0, [pc, #632]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005a72:	f00e f9db 	bl	8013e2c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <mqtt_client_connect+0x56>
 8005a7c:	4b99      	ldr	r3, [pc, #612]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005a7e:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8005a82:	499b      	ldr	r1, [pc, #620]	@ (8005cf0 <mqtt_client_connect+0x2bc>)
 8005a84:	4899      	ldr	r0, [pc, #612]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005a86:	f00e f9d1 	bl	8013e2c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <mqtt_client_connect+0x6a>
 8005a90:	4b94      	ldr	r3, [pc, #592]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005a92:	f240 5211 	movw	r2, #1297	@ 0x511
 8005a96:	4997      	ldr	r1, [pc, #604]	@ (8005cf4 <mqtt_client_connect+0x2c0>)
 8005a98:	4894      	ldr	r0, [pc, #592]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005a9a:	f00e f9c7 	bl	8013e2c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <mqtt_client_connect+0x80>
 8005aa6:	4b8f      	ldr	r3, [pc, #572]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005aa8:	f240 5212 	movw	r2, #1298	@ 0x512
 8005aac:	4992      	ldr	r1, [pc, #584]	@ (8005cf8 <mqtt_client_connect+0x2c4>)
 8005aae:	488f      	ldr	r0, [pc, #572]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005ab0:	f00e f9bc 	bl	8013e2c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	7a9b      	ldrb	r3, [r3, #10]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8005abc:	f06f 0309 	mvn.w	r3, #9
 8005ac0:	e21f      	b.n	8005f02 <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8005ac2:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f00e fa50 	bl	8013f6e <memset>
  client->connect_arg = arg;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad2:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	899a      	ldrh	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	331c      	adds	r3, #28
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff f8b9 	bl	8004c60 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d074      	beq.n	8005be0 <mqtt_client_connect+0x1ac>
 8005af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d070      	beq.n	8005be0 <mqtt_client_connect+0x1ac>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8005afe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b02:	f043 0304 	orr.w	r3, r3, #4
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0c:	7e1b      	ldrb	r3, [r3, #24]
 8005b0e:	b25b      	sxtb	r3, r3
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f003 0318 	and.w	r3, r3, #24
 8005b18:	b25a      	sxtb	r2, r3
 8005b1a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	b25b      	sxtb	r3, r3
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (client_info->will_retain) {
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	7e5b      	ldrb	r3, [r3, #25]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <mqtt_client_connect+0x106>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8005b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b32:	f043 0320 	orr.w	r3, r3, #32
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
    len = strlen(client_info->will_topic);
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fa fbce 	bl	80002e0 <strlen>
 8005b44:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2bff      	cmp	r3, #255	@ 0xff
 8005b4a:	d909      	bls.n	8005b60 <mqtt_client_connect+0x12c>
 8005b4c:	4b65      	ldr	r3, [pc, #404]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005b4e:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 8005b52:	496a      	ldr	r1, [pc, #424]	@ (8005cfc <mqtt_client_connect+0x2c8>)
 8005b54:	4865      	ldr	r0, [pc, #404]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005b56:	f00e f969 	bl	8013e2c <iprintf>
 8005b5a:	f06f 0305 	mvn.w	r3, #5
 8005b5e:	e1d0      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <mqtt_client_connect+0x146>
 8005b66:	4b5f      	ldr	r3, [pc, #380]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005b68:	f240 5229 	movw	r2, #1321	@ 0x529
 8005b6c:	4964      	ldr	r1, [pc, #400]	@ (8005d00 <mqtt_client_connect+0x2cc>)
 8005b6e:	485f      	ldr	r0, [pc, #380]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005b70:	f00e f95c 	bl	8013e2c <iprintf>
 8005b74:	f06f 0305 	mvn.w	r3, #5
 8005b78:	e1c3      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    len = strlen(client_info->will_msg);
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fa fbab 	bl	80002e0 <strlen>
 8005b8a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2bff      	cmp	r3, #255	@ 0xff
 8005b90:	d909      	bls.n	8005ba6 <mqtt_client_connect+0x172>
 8005b92:	4b54      	ldr	r3, [pc, #336]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005b94:	f240 522c 	movw	r2, #1324	@ 0x52c
 8005b98:	495a      	ldr	r1, [pc, #360]	@ (8005d04 <mqtt_client_connect+0x2d0>)
 8005b9a:	4854      	ldr	r0, [pc, #336]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005b9c:	f00e f946 	bl	8013e2c <iprintf>
 8005ba0:	f06f 0305 	mvn.w	r3, #5
 8005ba4:	e1ad      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8005bac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bae:	1c9a      	adds	r2, r3, #2
 8005bb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005bb4:	4413      	add	r3, r2
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005bbc:	4413      	add	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc6:	d309      	bcc.n	8005bdc <mqtt_client_connect+0x1a8>
 8005bc8:	4b46      	ldr	r3, [pc, #280]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005bca:	f240 522f 	movw	r2, #1327	@ 0x52f
 8005bce:	494e      	ldr	r1, [pc, #312]	@ (8005d08 <mqtt_client_connect+0x2d4>)
 8005bd0:	4846      	ldr	r0, [pc, #280]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005bd2:	f00e f92b 	bl	8013e2c <iprintf>
 8005bd6:	f06f 0305 	mvn.w	r3, #5
 8005bda:	e192      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_user != NULL) {
 8005be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d03d      	beq.n	8005c64 <mqtt_client_connect+0x230>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8005be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005bf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_user);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fa fb71 	bl	80002e0 <strlen>
 8005bfe:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c06:	d309      	bcc.n	8005c1c <mqtt_client_connect+0x1e8>
 8005c08:	4b36      	ldr	r3, [pc, #216]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005c0a:	f240 5235 	movw	r2, #1333	@ 0x535
 8005c0e:	493f      	ldr	r1, [pc, #252]	@ (8005d0c <mqtt_client_connect+0x2d8>)
 8005c10:	4836      	ldr	r0, [pc, #216]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005c12:	f00e f90b 	bl	8013e2c <iprintf>
 8005c16:	f06f 0305 	mvn.w	r3, #5
 8005c1a:	e172      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <mqtt_client_connect+0x202>
 8005c22:	4b30      	ldr	r3, [pc, #192]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005c24:	f240 5236 	movw	r2, #1334	@ 0x536
 8005c28:	4939      	ldr	r1, [pc, #228]	@ (8005d10 <mqtt_client_connect+0x2dc>)
 8005c2a:	4830      	ldr	r0, [pc, #192]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005c2c:	f00e f8fe 	bl	8013e2c <iprintf>
 8005c30:	f06f 0305 	mvn.w	r3, #5
 8005c34:	e165      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8005c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	8bfb      	ldrh	r3, [r7, #30]
 8005c40:	4413      	add	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c4a:	d309      	bcc.n	8005c60 <mqtt_client_connect+0x22c>
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005c4e:	f240 5239 	movw	r2, #1337	@ 0x539
 8005c52:	492d      	ldr	r1, [pc, #180]	@ (8005d08 <mqtt_client_connect+0x2d4>)
 8005c54:	4825      	ldr	r0, [pc, #148]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005c56:	f00e f8e9 	bl	8013e2c <iprintf>
 8005c5a:	f06f 0305 	mvn.w	r3, #5
 8005c5e:	e150      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }
  if (client_info->client_pass != NULL) {
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d059      	beq.n	8005d20 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8005c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    len = strlen(client_info->client_pass);
 8005c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa fb2f 	bl	80002e0 <strlen>
 8005c82:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c8a:	d309      	bcc.n	8005ca0 <mqtt_client_connect+0x26c>
 8005c8c:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005c8e:	f240 523f 	movw	r2, #1343	@ 0x53f
 8005c92:	4920      	ldr	r1, [pc, #128]	@ (8005d14 <mqtt_client_connect+0x2e0>)
 8005c94:	4815      	ldr	r0, [pc, #84]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005c96:	f00e f8c9 	bl	8013e2c <iprintf>
 8005c9a:	f06f 0305 	mvn.w	r3, #5
 8005c9e:	e130      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <mqtt_client_connect+0x286>
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005ca8:	f44f 62a8 	mov.w	r2, #1344	@ 0x540
 8005cac:	491a      	ldr	r1, [pc, #104]	@ (8005d18 <mqtt_client_connect+0x2e4>)
 8005cae:	480f      	ldr	r0, [pc, #60]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005cb0:	f00e f8bc 	bl	8013e2c <iprintf>
 8005cb4:	f06f 0305 	mvn.w	r3, #5
 8005cb8:	e123      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8005cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cc0:	1c9a      	adds	r2, r3, #2
 8005cc2:	8bbb      	ldrh	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cce:	d325      	bcc.n	8005d1c <mqtt_client_connect+0x2e8>
 8005cd0:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <mqtt_client_connect+0x2b0>)
 8005cd2:	f240 5243 	movw	r2, #1347	@ 0x543
 8005cd6:	490c      	ldr	r1, [pc, #48]	@ (8005d08 <mqtt_client_connect+0x2d4>)
 8005cd8:	4804      	ldr	r0, [pc, #16]	@ (8005cec <mqtt_client_connect+0x2b8>)
 8005cda:	f00e f8a7 	bl	8013e2c <iprintf>
 8005cde:	f06f 0305 	mvn.w	r3, #5
 8005ce2:	e10e      	b.n	8005f02 <mqtt_client_connect+0x4ce>
 8005ce4:	080175a8 	.word	0x080175a8
 8005ce8:	08017a28 	.word	0x08017a28
 8005cec:	08017620 	.word	0x08017620
 8005cf0:	08017a4c 	.word	0x08017a4c
 8005cf4:	08017a74 	.word	0x08017a74
 8005cf8:	08017aa0 	.word	0x08017aa0
 8005cfc:	08017ad4 	.word	0x08017ad4
 8005d00:	08017b14 	.word	0x08017b14
 8005d04:	08017b54 	.word	0x08017b54
 8005d08:	08017b90 	.word	0x08017b90
 8005d0c:	08017bc0 	.word	0x08017bc0
 8005d10:	08017c00 	.word	0x08017c00
 8005d14:	08017c44 	.word	0x08017c44
 8005d18:	08017c84 	.word	0x08017c84
    remaining_length = (u16_t)len;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 8005d20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  len = strlen(client_info->client_id);
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fa fad5 	bl	80002e0 <strlen>
 8005d36:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3e:	d309      	bcc.n	8005d54 <mqtt_client_connect+0x320>
 8005d40:	4b72      	ldr	r3, [pc, #456]	@ (8005f0c <mqtt_client_connect+0x4d8>)
 8005d42:	f240 524b 	movw	r2, #1355	@ 0x54b
 8005d46:	4972      	ldr	r1, [pc, #456]	@ (8005f10 <mqtt_client_connect+0x4dc>)
 8005d48:	4872      	ldr	r0, [pc, #456]	@ (8005f14 <mqtt_client_connect+0x4e0>)
 8005d4a:	f00e f86f 	bl	8013e2c <iprintf>
 8005d4e:	f06f 0305 	mvn.w	r3, #5
 8005d52:	e0d6      	b.n	8005f02 <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8005d58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	8afb      	ldrh	r3, [r7, #22]
 8005d5e:	4413      	add	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d68:	d309      	bcc.n	8005d7e <mqtt_client_connect+0x34a>
 8005d6a:	4b68      	ldr	r3, [pc, #416]	@ (8005f0c <mqtt_client_connect+0x4d8>)
 8005d6c:	f240 524e 	movw	r2, #1358	@ 0x54e
 8005d70:	4969      	ldr	r1, [pc, #420]	@ (8005f18 <mqtt_client_connect+0x4e4>)
 8005d72:	4868      	ldr	r0, [pc, #416]	@ (8005f14 <mqtt_client_connect+0x4e0>)
 8005d74:	f00e f85a 	bl	8013e2c <iprintf>
 8005d78:	f06f 0305 	mvn.w	r3, #5
 8005d7c:	e0c1      	b.n	8005f02 <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	33ec      	adds	r3, #236	@ 0xec
 8005d86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff f854 	bl	8004e38 <mqtt_output_check_space>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <mqtt_client_connect+0x368>
    return ERR_MEM;
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	e0b2      	b.n	8005f02 <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f003 fb1f 	bl	80093e0 <tcp_new_ip_type>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <mqtt_client_connect+0x382>
    return ERR_MEM;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	e0a5      	b.n	8005f02 <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f003 fb1d 	bl	80093fc <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4954      	ldr	r1, [pc, #336]	@ (8005f1c <mqtt_client_connect+0x4e8>)
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f002 fa44 	bl	8008258 <tcp_bind>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8005dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f040 8084 	bne.w	8005ee8 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68d8      	ldr	r0, [r3, #12]
 8005de4:	88fa      	ldrh	r2, [r7, #6]
 8005de6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f20 <mqtt_client_connect+0x4ec>)
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	f002 fbbd 	bl	8008568 <tcp_connect>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8005df4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d177      	bne.n	8005eec <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4948      	ldr	r1, [pc, #288]	@ (8005f24 <mqtt_client_connect+0x4f0>)
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 fb50 	bl	80094a8 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2101      	movs	r1, #1
 8005e22:	f7fe ffbc 	bl	8004d9e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	33ec      	adds	r3, #236	@ 0xec
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	493e      	ldr	r1, [pc, #248]	@ (8005f28 <mqtt_client_connect+0x4f4>)
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ff89 	bl	8004d46 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	33ec      	adds	r3, #236	@ 0xec
 8005e38:	2104      	movs	r1, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe ff3e 	bl	8004cbc <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	33ec      	adds	r3, #236	@ 0xec
 8005e44:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe ff36 	bl	8004cbc <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8005e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e58:	899b      	ldrh	r3, [r3, #12]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f7fe ff3c 	bl	8004cda <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	8afa      	ldrh	r2, [r7, #22]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	f7fe ff69 	bl	8004d46 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8005e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fe ff58 	bl	8004d46 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	f7fe ff4d 	bl	8004d46 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 8005eac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da08      	bge.n	8005ec6 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	8bfa      	ldrh	r2, [r7, #30]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7fe ff40 	bl	8004d46 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8005ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f103 00ec 	add.w	r0, r3, #236	@ 0xec
 8005ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	8bba      	ldrh	r2, [r7, #28]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7fe ff31 	bl	8004d46 <mqtt_output_append_string>
  }
  return ERR_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e00c      	b.n	8005f02 <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 8005eec:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f002 f9a4 	bl	8008240 <tcp_abort>
  client->conn = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	60da      	str	r2, [r3, #12]
  return err;
 8005efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	@ 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080175a8 	.word	0x080175a8
 8005f10:	08017cc8 	.word	0x08017cc8
 8005f14:	08017620 	.word	0x08017620
 8005f18:	08017b90 	.word	0x08017b90
 8005f1c:	0801abf0 	.word	0x0801abf0
 8005f20:	080057f5 	.word	0x080057f5
 8005f24:	08005781 	.word	0x08005781
 8005f28:	08017d04 	.word	0x08017d04

08005f2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	b21a      	sxth	r2, r3
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	b29b      	uxth	r3, r3
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	061a      	lsls	r2, r3, #24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	0e1b      	lsrs	r3, r3, #24
 8005f7c:	4313      	orrs	r3, r2
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005f94:	f000 f8d4 	bl	8006140 <mem_init>
  memp_init();
 8005f98:	f000 fbfe 	bl	8006798 <memp_init>
  pbuf_init();
  netif_init();
 8005f9c:	f000 fcfc 	bl	8006998 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005fa0:	f008 f832 	bl	800e008 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005fa4:	f001 fe52 	bl	8007c4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005fa8:	f007 ff6a 	bl	800de80 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <ptr_to_mem+0x20>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	4413      	add	r3, r2
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20004fb0 	.word	0x20004fb0

08005fd8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <mem_to_ptr+0x20>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20004fb0 	.word	0x20004fb0

08005ffc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005ffc:	b590      	push	{r4, r7, lr}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006004:	4b45      	ldr	r3, [pc, #276]	@ (800611c <plug_holes+0x120>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	429a      	cmp	r2, r3
 800600c:	d206      	bcs.n	800601c <plug_holes+0x20>
 800600e:	4b44      	ldr	r3, [pc, #272]	@ (8006120 <plug_holes+0x124>)
 8006010:	f240 12df 	movw	r2, #479	@ 0x1df
 8006014:	4943      	ldr	r1, [pc, #268]	@ (8006124 <plug_holes+0x128>)
 8006016:	4844      	ldr	r0, [pc, #272]	@ (8006128 <plug_holes+0x12c>)
 8006018:	f00d ff08 	bl	8013e2c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800601c:	4b43      	ldr	r3, [pc, #268]	@ (800612c <plug_holes+0x130>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d306      	bcc.n	8006034 <plug_holes+0x38>
 8006026:	4b3e      	ldr	r3, [pc, #248]	@ (8006120 <plug_holes+0x124>)
 8006028:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800602c:	4940      	ldr	r1, [pc, #256]	@ (8006130 <plug_holes+0x134>)
 800602e:	483e      	ldr	r0, [pc, #248]	@ (8006128 <plug_holes+0x12c>)
 8006030:	f00d fefc 	bl	8013e2c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	791b      	ldrb	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <plug_holes+0x4e>
 800603c:	4b38      	ldr	r3, [pc, #224]	@ (8006120 <plug_holes+0x124>)
 800603e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006042:	493c      	ldr	r1, [pc, #240]	@ (8006134 <plug_holes+0x138>)
 8006044:	4838      	ldr	r0, [pc, #224]	@ (8006128 <plug_holes+0x12c>)
 8006046:	f00d fef1 	bl	8013e2c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006052:	d906      	bls.n	8006062 <plug_holes+0x66>
 8006054:	4b32      	ldr	r3, [pc, #200]	@ (8006120 <plug_holes+0x124>)
 8006056:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800605a:	4937      	ldr	r1, [pc, #220]	@ (8006138 <plug_holes+0x13c>)
 800605c:	4832      	ldr	r0, [pc, #200]	@ (8006128 <plug_holes+0x12c>)
 800605e:	f00d fee5 	bl	8013e2c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ffa4 	bl	8005fb4 <ptr_to_mem>
 800606c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	429a      	cmp	r2, r3
 8006074:	d024      	beq.n	80060c0 <plug_holes+0xc4>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	791b      	ldrb	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d120      	bne.n	80060c0 <plug_holes+0xc4>
 800607e:	4b2b      	ldr	r3, [pc, #172]	@ (800612c <plug_holes+0x130>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	429a      	cmp	r2, r3
 8006086:	d01b      	beq.n	80060c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006088:	4b2c      	ldr	r3, [pc, #176]	@ (800613c <plug_holes+0x140>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	429a      	cmp	r2, r3
 8006090:	d102      	bne.n	8006098 <plug_holes+0x9c>
      lfree = mem;
 8006092:	4a2a      	ldr	r2, [pc, #168]	@ (800613c <plug_holes+0x140>)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a8:	d00a      	beq.n	80060c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ff80 	bl	8005fb4 <ptr_to_mem>
 80060b4:	4604      	mov	r4, r0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff ff8e 	bl	8005fd8 <mem_to_ptr>
 80060bc:	4603      	mov	r3, r0
 80060be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	885b      	ldrh	r3, [r3, #2]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff ff75 	bl	8005fb4 <ptr_to_mem>
 80060ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d01f      	beq.n	8006114 <plug_holes+0x118>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11b      	bne.n	8006114 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80060dc:	4b17      	ldr	r3, [pc, #92]	@ (800613c <plug_holes+0x140>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d102      	bne.n	80060ec <plug_holes+0xf0>
      lfree = pmem;
 80060e6:	4a15      	ldr	r2, [pc, #84]	@ (800613c <plug_holes+0x140>)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060fc:	d00a      	beq.n	8006114 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ff56 	bl	8005fb4 <ptr_to_mem>
 8006108:	4604      	mov	r4, r0
 800610a:	68b8      	ldr	r0, [r7, #8]
 800610c:	f7ff ff64 	bl	8005fd8 <mem_to_ptr>
 8006110:	4603      	mov	r3, r0
 8006112:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bd90      	pop	{r4, r7, pc}
 800611c:	20004fb0 	.word	0x20004fb0
 8006120:	08017d58 	.word	0x08017d58
 8006124:	08017d88 	.word	0x08017d88
 8006128:	08017da0 	.word	0x08017da0
 800612c:	20004fb4 	.word	0x20004fb4
 8006130:	08017dc8 	.word	0x08017dc8
 8006134:	08017de4 	.word	0x08017de4
 8006138:	08017e00 	.word	0x08017e00
 800613c:	20004fb8 	.word	0x20004fb8

08006140 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006146:	4b16      	ldr	r3, [pc, #88]	@ (80061a0 <mem_init+0x60>)
 8006148:	4a16      	ldr	r2, [pc, #88]	@ (80061a4 <mem_init+0x64>)
 800614a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800614c:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <mem_init+0x60>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006158:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006166:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800616a:	f7ff ff23 	bl	8005fb4 <ptr_to_mem>
 800616e:	4603      	mov	r3, r0
 8006170:	4a0d      	ldr	r2, [pc, #52]	@ (80061a8 <mem_init+0x68>)
 8006172:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <mem_init+0x68>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2201      	movs	r2, #1
 800617a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800617c:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <mem_init+0x68>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006184:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <mem_init+0x68>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800618e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006190:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <mem_init+0x60>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a05      	ldr	r2, [pc, #20]	@ (80061ac <mem_init+0x6c>)
 8006196:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20004fb0 	.word	0x20004fb0
 80061a4:	20048000 	.word	0x20048000
 80061a8:	20004fb4 	.word	0x20004fb4
 80061ac:	20004fb8 	.word	0x20004fb8

080061b0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff ff0d 	bl	8005fd8 <mem_to_ptr>
 80061be:	4603      	mov	r3, r0
 80061c0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fef4 	bl	8005fb4 <ptr_to_mem>
 80061cc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	885b      	ldrh	r3, [r3, #2]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff feee 	bl	8005fb4 <ptr_to_mem>
 80061d8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e2:	d818      	bhi.n	8006216 <mem_link_valid+0x66>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ec:	d813      	bhi.n	8006216 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80061f2:	8afa      	ldrh	r2, [r7, #22]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d004      	beq.n	8006202 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	8afa      	ldrh	r2, [r7, #22]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d109      	bne.n	8006216 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006202:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <mem_link_valid+0x74>)
 8006204:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	d006      	beq.n	800621a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	885b      	ldrh	r3, [r3, #2]
 8006210:	8afa      	ldrh	r2, [r7, #22]
 8006212:	429a      	cmp	r2, r3
 8006214:	d001      	beq.n	800621a <mem_link_valid+0x6a>
    return 0;
 8006216:	2300      	movs	r3, #0
 8006218:	e000      	b.n	800621c <mem_link_valid+0x6c>
  }
  return 1;
 800621a:	2301      	movs	r3, #1
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20004fb4 	.word	0x20004fb4

08006228 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d04c      	beq.n	80062d0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006240:	4b25      	ldr	r3, [pc, #148]	@ (80062d8 <mem_free+0xb0>)
 8006242:	f240 2273 	movw	r2, #627	@ 0x273
 8006246:	4925      	ldr	r1, [pc, #148]	@ (80062dc <mem_free+0xb4>)
 8006248:	4825      	ldr	r0, [pc, #148]	@ (80062e0 <mem_free+0xb8>)
 800624a:	f00d fdef 	bl	8013e2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800624e:	e040      	b.n	80062d2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3b08      	subs	r3, #8
 8006254:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006256:	4b23      	ldr	r3, [pc, #140]	@ (80062e4 <mem_free+0xbc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d306      	bcc.n	800626e <mem_free+0x46>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 020c 	add.w	r2, r3, #12
 8006266:	4b20      	ldr	r3, [pc, #128]	@ (80062e8 <mem_free+0xc0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d907      	bls.n	800627e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800626e:	4b1a      	ldr	r3, [pc, #104]	@ (80062d8 <mem_free+0xb0>)
 8006270:	f240 227f 	movw	r2, #639	@ 0x27f
 8006274:	491d      	ldr	r1, [pc, #116]	@ (80062ec <mem_free+0xc4>)
 8006276:	481a      	ldr	r0, [pc, #104]	@ (80062e0 <mem_free+0xb8>)
 8006278:	f00d fdd8 	bl	8013e2c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800627c:	e029      	b.n	80062d2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	791b      	ldrb	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d107      	bne.n	8006296 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006286:	4b14      	ldr	r3, [pc, #80]	@ (80062d8 <mem_free+0xb0>)
 8006288:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800628c:	4918      	ldr	r1, [pc, #96]	@ (80062f0 <mem_free+0xc8>)
 800628e:	4814      	ldr	r0, [pc, #80]	@ (80062e0 <mem_free+0xb8>)
 8006290:	f00d fdcc 	bl	8013e2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006294:	e01d      	b.n	80062d2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff ff8a 	bl	80061b0 <mem_link_valid>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <mem_free+0xb0>)
 80062a4:	f240 2295 	movw	r2, #661	@ 0x295
 80062a8:	4912      	ldr	r1, [pc, #72]	@ (80062f4 <mem_free+0xcc>)
 80062aa:	480d      	ldr	r0, [pc, #52]	@ (80062e0 <mem_free+0xb8>)
 80062ac:	f00d fdbe 	bl	8013e2c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80062b0:	e00f      	b.n	80062d2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80062b8:	4b0f      	ldr	r3, [pc, #60]	@ (80062f8 <mem_free+0xd0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d202      	bcs.n	80062c8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80062c2:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <mem_free+0xd0>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fe97 	bl	8005ffc <plug_holes>
 80062ce:	e000      	b.n	80062d2 <mem_free+0xaa>
    return;
 80062d0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	08017d58 	.word	0x08017d58
 80062dc:	08017e2c 	.word	0x08017e2c
 80062e0:	08017da0 	.word	0x08017da0
 80062e4:	20004fb0 	.word	0x20004fb0
 80062e8:	20004fb4 	.word	0x20004fb4
 80062ec:	08017e50 	.word	0x08017e50
 80062f0:	08017e6c 	.word	0x08017e6c
 80062f4:	08017e94 	.word	0x08017e94
 80062f8:	20004fb8 	.word	0x20004fb8

080062fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006308:	887b      	ldrh	r3, [r7, #2]
 800630a:	3303      	adds	r3, #3
 800630c:	b29b      	uxth	r3, r3
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006314:	8bfb      	ldrh	r3, [r7, #30]
 8006316:	2b0b      	cmp	r3, #11
 8006318:	d801      	bhi.n	800631e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800631a:	230c      	movs	r3, #12
 800631c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800631e:	8bfb      	ldrh	r3, [r7, #30]
 8006320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006324:	d803      	bhi.n	800632e <mem_trim+0x32>
 8006326:	8bfa      	ldrh	r2, [r7, #30]
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	429a      	cmp	r2, r3
 800632c:	d201      	bcs.n	8006332 <mem_trim+0x36>
    return NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	e0cc      	b.n	80064cc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006332:	4b68      	ldr	r3, [pc, #416]	@ (80064d4 <mem_trim+0x1d8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	429a      	cmp	r2, r3
 800633a:	d304      	bcc.n	8006346 <mem_trim+0x4a>
 800633c:	4b66      	ldr	r3, [pc, #408]	@ (80064d8 <mem_trim+0x1dc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d306      	bcc.n	8006354 <mem_trim+0x58>
 8006346:	4b65      	ldr	r3, [pc, #404]	@ (80064dc <mem_trim+0x1e0>)
 8006348:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800634c:	4964      	ldr	r1, [pc, #400]	@ (80064e0 <mem_trim+0x1e4>)
 800634e:	4865      	ldr	r0, [pc, #404]	@ (80064e4 <mem_trim+0x1e8>)
 8006350:	f00d fd6c 	bl	8013e2c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006354:	4b5f      	ldr	r3, [pc, #380]	@ (80064d4 <mem_trim+0x1d8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d304      	bcc.n	8006368 <mem_trim+0x6c>
 800635e:	4b5e      	ldr	r3, [pc, #376]	@ (80064d8 <mem_trim+0x1dc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d301      	bcc.n	800636c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	e0af      	b.n	80064cc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3b08      	subs	r3, #8
 8006370:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006372:	69b8      	ldr	r0, [r7, #24]
 8006374:	f7ff fe30 	bl	8005fd8 <mem_to_ptr>
 8006378:	4603      	mov	r3, r0
 800637a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	8afb      	ldrh	r3, [r7, #22]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b08      	subs	r3, #8
 8006388:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800638a:	8bfa      	ldrh	r2, [r7, #30]
 800638c:	8abb      	ldrh	r3, [r7, #20]
 800638e:	429a      	cmp	r2, r3
 8006390:	d906      	bls.n	80063a0 <mem_trim+0xa4>
 8006392:	4b52      	ldr	r3, [pc, #328]	@ (80064dc <mem_trim+0x1e0>)
 8006394:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006398:	4953      	ldr	r1, [pc, #332]	@ (80064e8 <mem_trim+0x1ec>)
 800639a:	4852      	ldr	r0, [pc, #328]	@ (80064e4 <mem_trim+0x1e8>)
 800639c:	f00d fd46 	bl	8013e2c <iprintf>
  if (newsize > size) {
 80063a0:	8bfa      	ldrh	r2, [r7, #30]
 80063a2:	8abb      	ldrh	r3, [r7, #20]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d901      	bls.n	80063ac <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	e08f      	b.n	80064cc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80063ac:	8bfa      	ldrh	r2, [r7, #30]
 80063ae:	8abb      	ldrh	r3, [r7, #20]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d101      	bne.n	80063b8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	e089      	b.n	80064cc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fdf9 	bl	8005fb4 <ptr_to_mem>
 80063c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	791b      	ldrb	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d13f      	bne.n	800644c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d4:	d106      	bne.n	80063e4 <mem_trim+0xe8>
 80063d6:	4b41      	ldr	r3, [pc, #260]	@ (80064dc <mem_trim+0x1e0>)
 80063d8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80063dc:	4943      	ldr	r1, [pc, #268]	@ (80064ec <mem_trim+0x1f0>)
 80063de:	4841      	ldr	r0, [pc, #260]	@ (80064e4 <mem_trim+0x1e8>)
 80063e0:	f00d fd24 	bl	8013e2c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80063ea:	8afa      	ldrh	r2, [r7, #22]
 80063ec:	8bfb      	ldrh	r3, [r7, #30]
 80063ee:	4413      	add	r3, r2
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3308      	adds	r3, #8
 80063f4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80063f6:	4b3e      	ldr	r3, [pc, #248]	@ (80064f0 <mem_trim+0x1f4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d106      	bne.n	800640e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fdd6 	bl	8005fb4 <ptr_to_mem>
 8006408:	4603      	mov	r3, r0
 800640a:	4a39      	ldr	r2, [pc, #228]	@ (80064f0 <mem_trim+0x1f4>)
 800640c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800640e:	89fb      	ldrh	r3, [r7, #14]
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff fdcf 	bl	8005fb4 <ptr_to_mem>
 8006416:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	2200      	movs	r2, #0
 800641c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	89ba      	ldrh	r2, [r7, #12]
 8006422:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	8afa      	ldrh	r2, [r7, #22]
 8006428:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	89fa      	ldrh	r2, [r7, #14]
 800642e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006438:	d047      	beq.n	80064ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fdb8 	bl	8005fb4 <ptr_to_mem>
 8006444:	4602      	mov	r2, r0
 8006446:	89fb      	ldrh	r3, [r7, #14]
 8006448:	8053      	strh	r3, [r2, #2]
 800644a:	e03e      	b.n	80064ca <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800644c:	8bfb      	ldrh	r3, [r7, #30]
 800644e:	f103 0214 	add.w	r2, r3, #20
 8006452:	8abb      	ldrh	r3, [r7, #20]
 8006454:	429a      	cmp	r2, r3
 8006456:	d838      	bhi.n	80064ca <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006458:	8afa      	ldrh	r2, [r7, #22]
 800645a:	8bfb      	ldrh	r3, [r7, #30]
 800645c:	4413      	add	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	3308      	adds	r3, #8
 8006462:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646c:	d106      	bne.n	800647c <mem_trim+0x180>
 800646e:	4b1b      	ldr	r3, [pc, #108]	@ (80064dc <mem_trim+0x1e0>)
 8006470:	f240 3216 	movw	r2, #790	@ 0x316
 8006474:	491d      	ldr	r1, [pc, #116]	@ (80064ec <mem_trim+0x1f0>)
 8006476:	481b      	ldr	r0, [pc, #108]	@ (80064e4 <mem_trim+0x1e8>)
 8006478:	f00d fcd8 	bl	8013e2c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800647c:	89fb      	ldrh	r3, [r7, #14]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fd98 	bl	8005fb4 <ptr_to_mem>
 8006484:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006486:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <mem_trim+0x1f4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d202      	bcs.n	8006496 <mem_trim+0x19a>
      lfree = mem2;
 8006490:	4a17      	ldr	r2, [pc, #92]	@ (80064f0 <mem_trim+0x1f4>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2200      	movs	r2, #0
 800649a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	8afa      	ldrh	r2, [r7, #22]
 80064a8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	89fa      	ldrh	r2, [r7, #14]
 80064ae:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064b8:	d007      	beq.n	80064ca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fd78 	bl	8005fb4 <ptr_to_mem>
 80064c4:	4602      	mov	r2, r0
 80064c6:	89fb      	ldrh	r3, [r7, #14]
 80064c8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80064ca:	687b      	ldr	r3, [r7, #4]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20004fb0 	.word	0x20004fb0
 80064d8:	20004fb4 	.word	0x20004fb4
 80064dc:	08017d58 	.word	0x08017d58
 80064e0:	08017ec8 	.word	0x08017ec8
 80064e4:	08017da0 	.word	0x08017da0
 80064e8:	08017ee0 	.word	0x08017ee0
 80064ec:	08017f00 	.word	0x08017f00
 80064f0:	20004fb8 	.word	0x20004fb8

080064f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <mem_malloc+0x14>
    return NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	e0d9      	b.n	80066bc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	3303      	adds	r3, #3
 800650c:	b29b      	uxth	r3, r3
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006514:	8bbb      	ldrh	r3, [r7, #28]
 8006516:	2b0b      	cmp	r3, #11
 8006518:	d801      	bhi.n	800651e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800651a:	230c      	movs	r3, #12
 800651c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800651e:	8bbb      	ldrh	r3, [r7, #28]
 8006520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006524:	d803      	bhi.n	800652e <mem_malloc+0x3a>
 8006526:	8bba      	ldrh	r2, [r7, #28]
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	429a      	cmp	r2, r3
 800652c:	d201      	bcs.n	8006532 <mem_malloc+0x3e>
    return NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	e0c4      	b.n	80066bc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006532:	4b64      	ldr	r3, [pc, #400]	@ (80066c4 <mem_malloc+0x1d0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fd4e 	bl	8005fd8 <mem_to_ptr>
 800653c:	4603      	mov	r3, r0
 800653e:	83fb      	strh	r3, [r7, #30]
 8006540:	e0b4      	b.n	80066ac <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006542:	8bfb      	ldrh	r3, [r7, #30]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fd35 	bl	8005fb4 <ptr_to_mem>
 800654a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	791b      	ldrb	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 80a4 	bne.w	800669e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	8bfb      	ldrh	r3, [r7, #30]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f1a3 0208 	sub.w	r2, r3, #8
 8006564:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006566:	429a      	cmp	r2, r3
 8006568:	f0c0 8099 	bcc.w	800669e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	8bfb      	ldrh	r3, [r7, #30]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f1a3 0208 	sub.w	r2, r3, #8
 800657a:	8bbb      	ldrh	r3, [r7, #28]
 800657c:	3314      	adds	r3, #20
 800657e:	429a      	cmp	r2, r3
 8006580:	d333      	bcc.n	80065ea <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006582:	8bfa      	ldrh	r2, [r7, #30]
 8006584:	8bbb      	ldrh	r3, [r7, #28]
 8006586:	4413      	add	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	3308      	adds	r3, #8
 800658c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800658e:	8a7b      	ldrh	r3, [r7, #18]
 8006590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006594:	d106      	bne.n	80065a4 <mem_malloc+0xb0>
 8006596:	4b4c      	ldr	r3, [pc, #304]	@ (80066c8 <mem_malloc+0x1d4>)
 8006598:	f240 3287 	movw	r2, #903	@ 0x387
 800659c:	494b      	ldr	r1, [pc, #300]	@ (80066cc <mem_malloc+0x1d8>)
 800659e:	484c      	ldr	r0, [pc, #304]	@ (80066d0 <mem_malloc+0x1dc>)
 80065a0:	f00d fc44 	bl	8013e2c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80065a4:	8a7b      	ldrh	r3, [r7, #18]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fd04 	bl	8005fb4 <ptr_to_mem>
 80065ac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8bfa      	ldrh	r2, [r7, #30]
 80065c0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	8a7a      	ldrh	r2, [r7, #18]
 80065c6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2201      	movs	r2, #1
 80065cc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d6:	d00b      	beq.n	80065f0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fce9 	bl	8005fb4 <ptr_to_mem>
 80065e2:	4602      	mov	r2, r0
 80065e4:	8a7b      	ldrh	r3, [r7, #18]
 80065e6:	8053      	strh	r3, [r2, #2]
 80065e8:	e002      	b.n	80065f0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2201      	movs	r2, #1
 80065ee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80065f0:	4b34      	ldr	r3, [pc, #208]	@ (80066c4 <mem_malloc+0x1d0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d127      	bne.n	800664a <mem_malloc+0x156>
          struct mem *cur = lfree;
 80065fa:	4b32      	ldr	r3, [pc, #200]	@ (80066c4 <mem_malloc+0x1d0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006600:	e005      	b.n	800660e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fcd4 	bl	8005fb4 <ptr_to_mem>
 800660c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	791b      	ldrb	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <mem_malloc+0x12c>
 8006616:	4b2f      	ldr	r3, [pc, #188]	@ (80066d4 <mem_malloc+0x1e0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	429a      	cmp	r2, r3
 800661e:	d1f0      	bne.n	8006602 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006620:	4a28      	ldr	r2, [pc, #160]	@ (80066c4 <mem_malloc+0x1d0>)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006626:	4b27      	ldr	r3, [pc, #156]	@ (80066c4 <mem_malloc+0x1d0>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b2a      	ldr	r3, [pc, #168]	@ (80066d4 <mem_malloc+0x1e0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d00b      	beq.n	800664a <mem_malloc+0x156>
 8006632:	4b24      	ldr	r3, [pc, #144]	@ (80066c4 <mem_malloc+0x1d0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	791b      	ldrb	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d006      	beq.n	800664a <mem_malloc+0x156>
 800663c:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <mem_malloc+0x1d4>)
 800663e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006642:	4925      	ldr	r1, [pc, #148]	@ (80066d8 <mem_malloc+0x1e4>)
 8006644:	4822      	ldr	r0, [pc, #136]	@ (80066d0 <mem_malloc+0x1dc>)
 8006646:	f00d fbf1 	bl	8013e2c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800664a:	8bba      	ldrh	r2, [r7, #28]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4413      	add	r3, r2
 8006650:	3308      	adds	r3, #8
 8006652:	4a20      	ldr	r2, [pc, #128]	@ (80066d4 <mem_malloc+0x1e0>)
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	4293      	cmp	r3, r2
 8006658:	d906      	bls.n	8006668 <mem_malloc+0x174>
 800665a:	4b1b      	ldr	r3, [pc, #108]	@ (80066c8 <mem_malloc+0x1d4>)
 800665c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006660:	491e      	ldr	r1, [pc, #120]	@ (80066dc <mem_malloc+0x1e8>)
 8006662:	481b      	ldr	r0, [pc, #108]	@ (80066d0 <mem_malloc+0x1dc>)
 8006664:	f00d fbe2 	bl	8013e2c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d006      	beq.n	8006680 <mem_malloc+0x18c>
 8006672:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <mem_malloc+0x1d4>)
 8006674:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006678:	4919      	ldr	r1, [pc, #100]	@ (80066e0 <mem_malloc+0x1ec>)
 800667a:	4815      	ldr	r0, [pc, #84]	@ (80066d0 <mem_malloc+0x1dc>)
 800667c:	f00d fbd6 	bl	8013e2c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f003 0303 	and.w	r3, r3, #3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d006      	beq.n	8006698 <mem_malloc+0x1a4>
 800668a:	4b0f      	ldr	r3, [pc, #60]	@ (80066c8 <mem_malloc+0x1d4>)
 800668c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006690:	4914      	ldr	r1, [pc, #80]	@ (80066e4 <mem_malloc+0x1f0>)
 8006692:	480f      	ldr	r0, [pc, #60]	@ (80066d0 <mem_malloc+0x1dc>)
 8006694:	f00d fbca 	bl	8013e2c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3308      	adds	r3, #8
 800669c:	e00e      	b.n	80066bc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800669e:	8bfb      	ldrh	r3, [r7, #30]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fc87 	bl	8005fb4 <ptr_to_mem>
 80066a6:	4603      	mov	r3, r0
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80066ac:	8bfa      	ldrh	r2, [r7, #30]
 80066ae:	8bbb      	ldrh	r3, [r7, #28]
 80066b0:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 80066b4:	429a      	cmp	r2, r3
 80066b6:	f4ff af44 	bcc.w	8006542 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20004fb8 	.word	0x20004fb8
 80066c8:	08017d58 	.word	0x08017d58
 80066cc:	08017f00 	.word	0x08017f00
 80066d0:	08017da0 	.word	0x08017da0
 80066d4:	20004fb4 	.word	0x20004fb4
 80066d8:	08017f14 	.word	0x08017f14
 80066dc:	08017f30 	.word	0x08017f30
 80066e0:	08017f60 	.word	0x08017f60
 80066e4:	08017f90 	.word	0x08017f90

080066e8 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	460a      	mov	r2, r1
 80066f2:	80fb      	strh	r3, [r7, #6]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	88ba      	ldrh	r2, [r7, #4]
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	b29b      	uxth	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4293      	cmp	r3, r2
 800670c:	d001      	beq.n	8006712 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	e00e      	b.n	8006730 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	b29b      	uxth	r3, r3
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff feec 	bl	80064f4 <mem_malloc>
 800671c:	60b8      	str	r0, [r7, #8]
  if (p) {
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	2100      	movs	r1, #0
 8006728:	68b8      	ldr	r0, [r7, #8]
 800672a:	f00d fc20 	bl	8013f6e <memset>
  }
  return p;
 800672e:	68bb      	ldr	r3, [r7, #8]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	3303      	adds	r3, #3
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e011      	b.n	800677e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	885b      	ldrh	r3, [r3, #2]
 8006782:	461a      	mov	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4293      	cmp	r3, r2
 8006788:	dbe7      	blt.n	800675a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800679e:	2300      	movs	r3, #0
 80067a0:	80fb      	strh	r3, [r7, #6]
 80067a2:	e009      	b.n	80067b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <memp_init+0x30>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ffc3 	bl	8006738 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	3301      	adds	r3, #1
 80067b6:	80fb      	strh	r3, [r7, #6]
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d9f2      	bls.n	80067a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	0801ab7c 	.word	0x0801ab7c

080067cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	6812      	ldr	r2, [r2, #0]
 80067ea:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d006      	beq.n	8006804 <do_memp_malloc_pool+0x38>
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <do_memp_malloc_pool+0x48>)
 80067f8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80067fc:	4906      	ldr	r1, [pc, #24]	@ (8006818 <do_memp_malloc_pool+0x4c>)
 80067fe:	4807      	ldr	r0, [pc, #28]	@ (800681c <do_memp_malloc_pool+0x50>)
 8006800:	f00d fb14 	bl	8013e2c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	e000      	b.n	800680a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	08017fb4 	.word	0x08017fb4
 8006818:	08017fe4 	.word	0x08017fe4
 800681c:	08018008 	.word	0x08018008

08006820 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <memp_malloc_pool+0x1c>
 800682e:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <memp_malloc_pool+0x38>)
 8006830:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006834:	4909      	ldr	r1, [pc, #36]	@ (800685c <memp_malloc_pool+0x3c>)
 8006836:	480a      	ldr	r0, [pc, #40]	@ (8006860 <memp_malloc_pool+0x40>)
 8006838:	f00d faf8 	bl	8013e2c <iprintf>
  if (desc == NULL) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <memp_malloc_pool+0x26>
    return NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	e003      	b.n	800684e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff ffc0 	bl	80067cc <do_memp_malloc_pool>
 800684c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	08017fb4 	.word	0x08017fb4
 800685c:	08018030 	.word	0x08018030
 8006860:	08018008 	.word	0x08018008

08006864 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d908      	bls.n	8006886 <memp_malloc+0x22>
 8006874:	4b0a      	ldr	r3, [pc, #40]	@ (80068a0 <memp_malloc+0x3c>)
 8006876:	f240 1257 	movw	r2, #343	@ 0x157
 800687a:	490a      	ldr	r1, [pc, #40]	@ (80068a4 <memp_malloc+0x40>)
 800687c:	480a      	ldr	r0, [pc, #40]	@ (80068a8 <memp_malloc+0x44>)
 800687e:	f00d fad5 	bl	8013e2c <iprintf>
 8006882:	2300      	movs	r3, #0
 8006884:	e008      	b.n	8006898 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	4a08      	ldr	r2, [pc, #32]	@ (80068ac <memp_malloc+0x48>)
 800688a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff ff9c 	bl	80067cc <do_memp_malloc_pool>
 8006894:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	08017fb4 	.word	0x08017fb4
 80068a4:	08018044 	.word	0x08018044
 80068a8:	08018008 	.word	0x08018008
 80068ac:	0801ab7c 	.word	0x0801ab7c

080068b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f003 0303 	and.w	r3, r3, #3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <do_memp_free_pool+0x22>
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <do_memp_free_pool+0x40>)
 80068c6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80068ca:	490a      	ldr	r1, [pc, #40]	@ (80068f4 <do_memp_free_pool+0x44>)
 80068cc:	480a      	ldr	r0, [pc, #40]	@ (80068f8 <do_memp_free_pool+0x48>)
 80068ce:	f00d faad 	bl	8013e2c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	08017fb4 	.word	0x08017fb4
 80068f4:	08018064 	.word	0x08018064
 80068f8:	08018008 	.word	0x08018008

080068fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <memp_free_pool+0x1e>
 800690c:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <memp_free_pool+0x3c>)
 800690e:	f240 1295 	movw	r2, #405	@ 0x195
 8006912:	490a      	ldr	r1, [pc, #40]	@ (800693c <memp_free_pool+0x40>)
 8006914:	480a      	ldr	r0, [pc, #40]	@ (8006940 <memp_free_pool+0x44>)
 8006916:	f00d fa89 	bl	8013e2c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <memp_free_pool+0x34>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffc1 	bl	80068b0 <do_memp_free_pool>
 800692e:	e000      	b.n	8006932 <memp_free_pool+0x36>
    return;
 8006930:	bf00      	nop
}
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	08017fb4 	.word	0x08017fb4
 800693c:	08018030 	.word	0x08018030
 8006940:	08018008 	.word	0x08018008

08006944 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	2b08      	cmp	r3, #8
 8006954:	d907      	bls.n	8006966 <memp_free+0x22>
 8006956:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <memp_free+0x44>)
 8006958:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800695c:	490b      	ldr	r1, [pc, #44]	@ (800698c <memp_free+0x48>)
 800695e:	480c      	ldr	r0, [pc, #48]	@ (8006990 <memp_free+0x4c>)
 8006960:	f00d fa64 	bl	8013e2c <iprintf>
 8006964:	e00c      	b.n	8006980 <memp_free+0x3c>

  if (mem == NULL) {
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	4a09      	ldr	r2, [pc, #36]	@ (8006994 <memp_free+0x50>)
 8006970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff9a 	bl	80068b0 <do_memp_free_pool>
 800697c:	e000      	b.n	8006980 <memp_free+0x3c>
    return;
 800697e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	08017fb4 	.word	0x08017fb4
 800698c:	08018084 	.word	0x08018084
 8006990:	08018008 	.word	0x08018008
 8006994:	0801ab7c 	.word	0x0801ab7c

08006998 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800699c:	bf00      	nop
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d108      	bne.n	80069ce <netif_add+0x26>
 80069bc:	4b5b      	ldr	r3, [pc, #364]	@ (8006b2c <netif_add+0x184>)
 80069be:	f240 1227 	movw	r2, #295	@ 0x127
 80069c2:	495b      	ldr	r1, [pc, #364]	@ (8006b30 <netif_add+0x188>)
 80069c4:	485b      	ldr	r0, [pc, #364]	@ (8006b34 <netif_add+0x18c>)
 80069c6:	f00d fa31 	bl	8013e2c <iprintf>
 80069ca:	2300      	movs	r3, #0
 80069cc:	e0a9      	b.n	8006b22 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d108      	bne.n	80069e6 <netif_add+0x3e>
 80069d4:	4b55      	ldr	r3, [pc, #340]	@ (8006b2c <netif_add+0x184>)
 80069d6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80069da:	4957      	ldr	r1, [pc, #348]	@ (8006b38 <netif_add+0x190>)
 80069dc:	4855      	ldr	r0, [pc, #340]	@ (8006b34 <netif_add+0x18c>)
 80069de:	f00d fa25 	bl	8013e2c <iprintf>
 80069e2:	2300      	movs	r3, #0
 80069e4:	e09d      	b.n	8006b22 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80069ec:	4b53      	ldr	r3, [pc, #332]	@ (8006b3c <netif_add+0x194>)
 80069ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80069f6:	4b51      	ldr	r3, [pc, #324]	@ (8006b3c <netif_add+0x194>)
 80069f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006a00:	4b4e      	ldr	r3, [pc, #312]	@ (8006b3c <netif_add+0x194>)
 8006a02:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a49      	ldr	r2, [pc, #292]	@ (8006b40 <netif_add+0x198>)
 8006a1a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3324      	adds	r3, #36	@ 0x24
 8006a2e:	2204      	movs	r2, #4
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f00d fa9b 	bl	8013f6e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a3a      	ldr	r2, [r7, #32]
 8006a42:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006a44:	4b3f      	ldr	r3, [pc, #252]	@ (8006b44 <netif_add+0x19c>)
 8006a46:	781a      	ldrb	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a52:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f914 	bl	8006c88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	4798      	blx	r3
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <netif_add+0xc8>
    return NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e058      	b.n	8006b22 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a76:	2bff      	cmp	r3, #255	@ 0xff
 8006a78:	d103      	bne.n	8006a82 <netif_add+0xda>
        netif->num = 0;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006a86:	4b30      	ldr	r3, [pc, #192]	@ (8006b48 <netif_add+0x1a0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e02b      	b.n	8006ae6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d106      	bne.n	8006aa4 <netif_add+0xfc>
 8006a96:	4b25      	ldr	r3, [pc, #148]	@ (8006b2c <netif_add+0x184>)
 8006a98:	f240 128b 	movw	r2, #395	@ 0x18b
 8006a9c:	492b      	ldr	r1, [pc, #172]	@ (8006b4c <netif_add+0x1a4>)
 8006a9e:	4825      	ldr	r0, [pc, #148]	@ (8006b34 <netif_add+0x18c>)
 8006aa0:	f00d f9c4 	bl	8013e2c <iprintf>
        num_netifs++;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2bff      	cmp	r3, #255	@ 0xff
 8006aae:	dd06      	ble.n	8006abe <netif_add+0x116>
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b2c <netif_add+0x184>)
 8006ab2:	f240 128d 	movw	r2, #397	@ 0x18d
 8006ab6:	4926      	ldr	r1, [pc, #152]	@ (8006b50 <netif_add+0x1a8>)
 8006ab8:	481e      	ldr	r0, [pc, #120]	@ (8006b34 <netif_add+0x18c>)
 8006aba:	f00d f9b7 	bl	8013e2c <iprintf>
        if (netif2->num == netif->num) {
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d108      	bne.n	8006ae0 <netif_add+0x138>
          netif->num++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8006ade:	e005      	b.n	8006aec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1d0      	bne.n	8006a8e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1be      	bne.n	8006a70 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006af8:	2bfe      	cmp	r3, #254	@ 0xfe
 8006afa:	d103      	bne.n	8006b04 <netif_add+0x15c>
    netif_num = 0;
 8006afc:	4b11      	ldr	r3, [pc, #68]	@ (8006b44 <netif_add+0x19c>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e006      	b.n	8006b12 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <netif_add+0x19c>)
 8006b10:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <netif_add+0x1a0>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8006b48 <netif_add+0x1a0>)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	080180a0 	.word	0x080180a0
 8006b30:	08018134 	.word	0x08018134
 8006b34:	080180f0 	.word	0x080180f0
 8006b38:	08018150 	.word	0x08018150
 8006b3c:	0801abf0 	.word	0x0801abf0
 8006b40:	08006f6b 	.word	0x08006f6b
 8006b44:	20007fd0 	.word	0x20007fd0
 8006b48:	20007fc8 	.word	0x20007fc8
 8006b4c:	08018174 	.word	0x08018174
 8006b50:	08018188 	.word	0x08018188

08006b54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 fe69 	bl	8009838 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f007 fed9 	bl	800e920 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <netif_do_set_ipaddr+0x20>
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c00 <netif_do_set_ipaddr+0x88>)
 8006b8c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006b90:	491c      	ldr	r1, [pc, #112]	@ (8006c04 <netif_do_set_ipaddr+0x8c>)
 8006b92:	481d      	ldr	r0, [pc, #116]	@ (8006c08 <netif_do_set_ipaddr+0x90>)
 8006b94:	f00d f94a 	bl	8013e2c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <netif_do_set_ipaddr+0x34>
 8006b9e:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <netif_do_set_ipaddr+0x88>)
 8006ba0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006ba4:	4917      	ldr	r1, [pc, #92]	@ (8006c04 <netif_do_set_ipaddr+0x8c>)
 8006ba6:	4818      	ldr	r0, [pc, #96]	@ (8006c08 <netif_do_set_ipaddr+0x90>)
 8006ba8:	f00d f940 	bl	8013e2c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d01c      	beq.n	8006bf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ffbf 	bl	8006b54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <netif_do_set_ipaddr+0x6a>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	e000      	b.n	8006be4 <netif_do_set_ipaddr+0x6c>
 8006be2:	2300      	movs	r3, #0
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006be8:	2101      	movs	r1, #1
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8d2 	bl	8006d94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	080180a0 	.word	0x080180a0
 8006c04:	080181b8 	.word	0x080181b8
 8006c08:	080180f0 	.word	0x080180f0

08006c0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d00a      	beq.n	8006c3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <netif_do_set_netmask+0x26>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	e000      	b.n	8006c34 <netif_do_set_netmask+0x28>
 8006c32:	2300      	movs	r3, #0
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d00a      	beq.n	8006c7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <netif_do_set_gw+0x26>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	e000      	b.n	8006c72 <netif_do_set_gw+0x28>
 8006c70:	2300      	movs	r3, #0
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8006d18 <netif_set_addr+0x90>)
 8006ca6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006cae:	4b1a      	ldr	r3, [pc, #104]	@ (8006d18 <netif_set_addr+0x90>)
 8006cb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <netif_set_addr+0x90>)
 8006cba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <netif_set_addr+0x42>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <netif_set_addr+0x46>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <netif_set_addr+0x48>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006cd8:	f107 0310 	add.w	r3, r7, #16
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff ff49 	bl	8006b78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff ff8e 	bl	8006c0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff ffa8 	bl	8006c4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006d00:	f107 0310 	add.w	r3, r7, #16
 8006d04:	461a      	mov	r2, r3
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff ff35 	bl	8006b78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006d0e:	bf00      	nop
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	0801abf0 	.word	0x0801abf0

08006d1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006d24:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <netif_set_default+0x1c>)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20007fcc 	.word	0x20007fcc

08006d3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d107      	bne.n	8006d5a <netif_set_up+0x1e>
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d88 <netif_set_up+0x4c>)
 8006d4c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006d50:	490e      	ldr	r1, [pc, #56]	@ (8006d8c <netif_set_up+0x50>)
 8006d52:	480f      	ldr	r0, [pc, #60]	@ (8006d90 <netif_set_up+0x54>)
 8006d54:	f00d f86a 	bl	8013e2c <iprintf>
 8006d58:	e013      	b.n	8006d82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10c      	bne.n	8006d82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006d7a:	2103      	movs	r1, #3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f809 	bl	8006d94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	080180a0 	.word	0x080180a0
 8006d8c:	08018228 	.word	0x08018228
 8006d90:	080180f0 	.word	0x080180f0

08006d94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <netif_issue_reports+0x20>
 8006da6:	4b18      	ldr	r3, [pc, #96]	@ (8006e08 <netif_issue_reports+0x74>)
 8006da8:	f240 326d 	movw	r2, #877	@ 0x36d
 8006dac:	4917      	ldr	r1, [pc, #92]	@ (8006e0c <netif_issue_reports+0x78>)
 8006dae:	4818      	ldr	r0, [pc, #96]	@ (8006e10 <netif_issue_reports+0x7c>)
 8006db0:	f00d f83c 	bl	8013e2c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01e      	beq.n	8006e00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d017      	beq.n	8006e00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d013      	beq.n	8006e02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00e      	beq.n	8006e02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f00a fb8d 	bl	8011518 <etharp_request>
 8006dfe:	e000      	b.n	8006e02 <netif_issue_reports+0x6e>
    return;
 8006e00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	080180a0 	.word	0x080180a0
 8006e0c:	08018244 	.word	0x08018244
 8006e10:	080180f0 	.word	0x080180f0

08006e14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d107      	bne.n	8006e32 <netif_set_down+0x1e>
 8006e22:	4b12      	ldr	r3, [pc, #72]	@ (8006e6c <netif_set_down+0x58>)
 8006e24:	f240 329b 	movw	r2, #923	@ 0x39b
 8006e28:	4911      	ldr	r1, [pc, #68]	@ (8006e70 <netif_set_down+0x5c>)
 8006e2a:	4812      	ldr	r0, [pc, #72]	@ (8006e74 <netif_set_down+0x60>)
 8006e2c:	f00c fffe 	bl	8013e2c <iprintf>
 8006e30:	e019      	b.n	8006e66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d012      	beq.n	8006e66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e46:	f023 0301 	bic.w	r3, r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e58:	f003 0308 	and.w	r3, r3, #8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f009 ff13 	bl	8010c8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	080180a0 	.word	0x080180a0
 8006e70:	08018268 	.word	0x08018268
 8006e74:	080180f0 	.word	0x080180f0

08006e78 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d107      	bne.n	8006e96 <netif_set_link_up+0x1e>
 8006e86:	4b15      	ldr	r3, [pc, #84]	@ (8006edc <netif_set_link_up+0x64>)
 8006e88:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006e8c:	4914      	ldr	r1, [pc, #80]	@ (8006ee0 <netif_set_link_up+0x68>)
 8006e8e:	4815      	ldr	r0, [pc, #84]	@ (8006ee4 <netif_set_link_up+0x6c>)
 8006e90:	f00c ffcc 	bl	8013e2c <iprintf>
 8006e94:	e01e      	b.n	8006ed4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d117      	bne.n	8006ed4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006eaa:	f043 0304 	orr.w	r3, r3, #4
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f008 f95e 	bl	800f178 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006ebc:	2103      	movs	r1, #3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff ff68 	bl	8006d94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <netif_set_link_up+0x5c>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	080180a0 	.word	0x080180a0
 8006ee0:	08018288 	.word	0x08018288
 8006ee4:	080180f0 	.word	0x080180f0

08006ee8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d107      	bne.n	8006f06 <netif_set_link_down+0x1e>
 8006ef6:	4b11      	ldr	r3, [pc, #68]	@ (8006f3c <netif_set_link_down+0x54>)
 8006ef8:	f240 4206 	movw	r2, #1030	@ 0x406
 8006efc:	4910      	ldr	r1, [pc, #64]	@ (8006f40 <netif_set_link_down+0x58>)
 8006efe:	4811      	ldr	r0, [pc, #68]	@ (8006f44 <netif_set_link_down+0x5c>)
 8006f00:	f00c ff94 	bl	8013e2c <iprintf>
 8006f04:	e017      	b.n	8006f36 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d010      	beq.n	8006f36 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006f1a:	f023 0304 	bic.w	r3, r3, #4
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <netif_set_link_down+0x4e>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	080180a0 	.word	0x080180a0
 8006f40:	080182ac 	.word	0x080182ac
 8006f44:	080180f0 	.word	0x080180f0

08006f48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	61da      	str	r2, [r3, #28]
  }
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006f76:	f06f 030b 	mvn.w	r3, #11
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d013      	beq.n	8006fc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006f98:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd0 <netif_get_by_index+0x48>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e00c      	b.n	8006fba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	79fa      	ldrb	r2, [r7, #7]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d101      	bne.n	8006fb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e006      	b.n	8006fc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1ef      	bne.n	8006fa0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20007fc8 	.word	0x20007fc8

08006fd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <pbuf_free_ooseq+0x38>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <pbuf_free_ooseq+0x3c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	607b      	str	r3, [r7, #4]
 8006fe6:	e00a      	b.n	8006ffe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f002 fc5f 	bl	80098b4 <tcp_free_ooseq>
      return;
 8006ff6:	e005      	b.n	8007004 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f1      	bne.n	8006fe8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20007fd1 	.word	0x20007fd1
 8007010:	20007fe0 	.word	0x20007fe0

08007014 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007014:	b480      	push	{r7}
 8007016:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007018:	4b03      	ldr	r3, [pc, #12]	@ (8007028 <pbuf_pool_is_empty+0x14>)
 800701a:	2201      	movs	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800701e:	bf00      	nop
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	20007fd1 	.word	0x20007fd1

0800702c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4611      	mov	r1, r2
 8007038:	461a      	mov	r2, r3
 800703a:	460b      	mov	r3, r1
 800703c:	80fb      	strh	r3, [r7, #6]
 800703e:	4613      	mov	r3, r2
 8007040:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	88fa      	ldrh	r2, [r7, #6]
 8007052:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88ba      	ldrh	r2, [r7, #4]
 8007058:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800705a:	8b3b      	ldrh	r3, [r7, #24]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	7f3a      	ldrb	r2, [r7, #28]
 8007066:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	73da      	strb	r2, [r3, #15]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08c      	sub	sp, #48	@ 0x30
 8007084:	af02      	add	r7, sp, #8
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
 800708a:	460b      	mov	r3, r1
 800708c:	80bb      	strh	r3, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007096:	887b      	ldrh	r3, [r7, #2]
 8007098:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800709c:	d07f      	beq.n	800719e <pbuf_alloc+0x11e>
 800709e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80070a2:	f300 80c8 	bgt.w	8007236 <pbuf_alloc+0x1b6>
 80070a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80070aa:	d010      	beq.n	80070ce <pbuf_alloc+0x4e>
 80070ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80070b0:	f300 80c1 	bgt.w	8007236 <pbuf_alloc+0x1b6>
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d002      	beq.n	80070be <pbuf_alloc+0x3e>
 80070b8:	2b41      	cmp	r3, #65	@ 0x41
 80070ba:	f040 80bc 	bne.w	8007236 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80070be:	887a      	ldrh	r2, [r7, #2]
 80070c0:	88bb      	ldrh	r3, [r7, #4]
 80070c2:	4619      	mov	r1, r3
 80070c4:	2000      	movs	r0, #0
 80070c6:	f000 f8d1 	bl	800726c <pbuf_alloc_reference>
 80070ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80070cc:	e0bd      	b.n	800724a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80070d6:	88bb      	ldrh	r3, [r7, #4]
 80070d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80070da:	2008      	movs	r0, #8
 80070dc:	f7ff fbc2 	bl	8006864 <memp_malloc>
 80070e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80070e8:	f7ff ff94 	bl	8007014 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80070ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80070f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070f4:	f000 faa8 	bl	8007648 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e0a7      	b.n	800724c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80070fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070fe:	3303      	adds	r3, #3
 8007100:	b29b      	uxth	r3, r3
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	b29b      	uxth	r3, r3
 8007108:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800710c:	b29b      	uxth	r3, r3
 800710e:	8b7a      	ldrh	r2, [r7, #26]
 8007110:	4293      	cmp	r3, r2
 8007112:	bf28      	it	cs
 8007114:	4613      	movcs	r3, r2
 8007116:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800711a:	3310      	adds	r3, #16
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	3303      	adds	r3, #3
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	4618      	mov	r0, r3
 8007128:	89f9      	ldrh	r1, [r7, #14]
 800712a:	8b7a      	ldrh	r2, [r7, #26]
 800712c:	2300      	movs	r3, #0
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	887b      	ldrh	r3, [r7, #2]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	460b      	mov	r3, r1
 8007136:	4601      	mov	r1, r0
 8007138:	6938      	ldr	r0, [r7, #16]
 800713a:	f7ff ff77 	bl	800702c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <pbuf_alloc+0xd8>
 800714a:	4b42      	ldr	r3, [pc, #264]	@ (8007254 <pbuf_alloc+0x1d4>)
 800714c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007150:	4941      	ldr	r1, [pc, #260]	@ (8007258 <pbuf_alloc+0x1d8>)
 8007152:	4842      	ldr	r0, [pc, #264]	@ (800725c <pbuf_alloc+0x1dc>)
 8007154:	f00c fe6a 	bl	8013e2c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007158:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800715a:	3303      	adds	r3, #3
 800715c:	f023 0303 	bic.w	r3, r3, #3
 8007160:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007164:	d106      	bne.n	8007174 <pbuf_alloc+0xf4>
 8007166:	4b3b      	ldr	r3, [pc, #236]	@ (8007254 <pbuf_alloc+0x1d4>)
 8007168:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800716c:	493c      	ldr	r1, [pc, #240]	@ (8007260 <pbuf_alloc+0x1e0>)
 800716e:	483b      	ldr	r0, [pc, #236]	@ (800725c <pbuf_alloc+0x1dc>)
 8007170:	f00c fe5c 	bl	8013e2c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	627b      	str	r3, [r7, #36]	@ 0x24
 800717e:	e002      	b.n	8007186 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800718a:	8b7a      	ldrh	r2, [r7, #26]
 800718c:	89fb      	ldrh	r3, [r7, #14]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007196:	8b7b      	ldrh	r3, [r7, #26]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d19e      	bne.n	80070da <pbuf_alloc+0x5a>
      break;
 800719c:	e055      	b.n	800724a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800719e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071a0:	3303      	adds	r3, #3
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	88bb      	ldrh	r3, [r7, #4]
 80071ac:	3303      	adds	r3, #3
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f023 0303 	bic.w	r3, r3, #3
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80071ba:	8b3b      	ldrh	r3, [r7, #24]
 80071bc:	3310      	adds	r3, #16
 80071be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80071c0:	8b3a      	ldrh	r2, [r7, #24]
 80071c2:	88bb      	ldrh	r3, [r7, #4]
 80071c4:	3303      	adds	r3, #3
 80071c6:	f023 0303 	bic.w	r3, r3, #3
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d306      	bcc.n	80071dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80071ce:	8afa      	ldrh	r2, [r7, #22]
 80071d0:	88bb      	ldrh	r3, [r7, #4]
 80071d2:	3303      	adds	r3, #3
 80071d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80071d8:	429a      	cmp	r2, r3
 80071da:	d201      	bcs.n	80071e0 <pbuf_alloc+0x160>
        return NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	e035      	b.n	800724c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80071e0:	8afb      	ldrh	r3, [r7, #22]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff f986 	bl	80064f4 <mem_malloc>
 80071e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <pbuf_alloc+0x174>
        return NULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e02b      	b.n	800724c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80071f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071f6:	3310      	adds	r3, #16
 80071f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fa:	4413      	add	r3, r2
 80071fc:	3303      	adds	r3, #3
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	4618      	mov	r0, r3
 8007204:	88b9      	ldrh	r1, [r7, #4]
 8007206:	88ba      	ldrh	r2, [r7, #4]
 8007208:	2300      	movs	r3, #0
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	460b      	mov	r3, r1
 8007212:	4601      	mov	r1, r0
 8007214:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007216:	f7ff ff09 	bl	800702c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <pbuf_alloc+0x1c8>
 8007226:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <pbuf_alloc+0x1d4>)
 8007228:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800722c:	490d      	ldr	r1, [pc, #52]	@ (8007264 <pbuf_alloc+0x1e4>)
 800722e:	480b      	ldr	r0, [pc, #44]	@ (800725c <pbuf_alloc+0x1dc>)
 8007230:	f00c fdfc 	bl	8013e2c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007234:	e008      	b.n	8007248 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007236:	4b07      	ldr	r3, [pc, #28]	@ (8007254 <pbuf_alloc+0x1d4>)
 8007238:	f240 1227 	movw	r2, #295	@ 0x127
 800723c:	490a      	ldr	r1, [pc, #40]	@ (8007268 <pbuf_alloc+0x1e8>)
 800723e:	4807      	ldr	r0, [pc, #28]	@ (800725c <pbuf_alloc+0x1dc>)
 8007240:	f00c fdf4 	bl	8013e2c <iprintf>
      return NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	e001      	b.n	800724c <pbuf_alloc+0x1cc>
      break;
 8007248:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800724c:	4618      	mov	r0, r3
 800724e:	3728      	adds	r7, #40	@ 0x28
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	080182d0 	.word	0x080182d0
 8007258:	08018300 	.word	0x08018300
 800725c:	08018330 	.word	0x08018330
 8007260:	08018358 	.word	0x08018358
 8007264:	0801838c 	.word	0x0801838c
 8007268:	080183b8 	.word	0x080183b8

0800726c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af02      	add	r7, sp, #8
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	807b      	strh	r3, [r7, #2]
 8007278:	4613      	mov	r3, r2
 800727a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800727c:	883b      	ldrh	r3, [r7, #0]
 800727e:	2b41      	cmp	r3, #65	@ 0x41
 8007280:	d009      	beq.n	8007296 <pbuf_alloc_reference+0x2a>
 8007282:	883b      	ldrh	r3, [r7, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d006      	beq.n	8007296 <pbuf_alloc_reference+0x2a>
 8007288:	4b0f      	ldr	r3, [pc, #60]	@ (80072c8 <pbuf_alloc_reference+0x5c>)
 800728a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800728e:	490f      	ldr	r1, [pc, #60]	@ (80072cc <pbuf_alloc_reference+0x60>)
 8007290:	480f      	ldr	r0, [pc, #60]	@ (80072d0 <pbuf_alloc_reference+0x64>)
 8007292:	f00c fdcb 	bl	8013e2c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007296:	2007      	movs	r0, #7
 8007298:	f7ff fae4 	bl	8006864 <memp_malloc>
 800729c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e00b      	b.n	80072c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80072a8:	8879      	ldrh	r1, [r7, #2]
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	2300      	movs	r3, #0
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	883b      	ldrh	r3, [r7, #0]
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	460b      	mov	r3, r1
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff feb7 	bl	800702c <pbuf_init_alloced_pbuf>
  return p;
 80072be:	68fb      	ldr	r3, [r7, #12]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	080182d0 	.word	0x080182d0
 80072cc:	080183d4 	.word	0x080183d4
 80072d0:	08018330 	.word	0x08018330

080072d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af02      	add	r7, sp, #8
 80072da:	607b      	str	r3, [r7, #4]
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	460b      	mov	r3, r1
 80072e2:	81bb      	strh	r3, [r7, #12]
 80072e4:	4613      	mov	r3, r2
 80072e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80072ec:	8a7b      	ldrh	r3, [r7, #18]
 80072ee:	3303      	adds	r3, #3
 80072f0:	f023 0203 	bic.w	r2, r3, #3
 80072f4:	89bb      	ldrh	r3, [r7, #12]
 80072f6:	441a      	add	r2, r3
 80072f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d901      	bls.n	8007302 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	e018      	b.n	8007334 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d007      	beq.n	8007318 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007308:	8a7b      	ldrh	r3, [r7, #18]
 800730a:	3303      	adds	r3, #3
 800730c:	f023 0303 	bic.w	r3, r3, #3
 8007310:	6a3a      	ldr	r2, [r7, #32]
 8007312:	4413      	add	r3, r2
 8007314:	617b      	str	r3, [r7, #20]
 8007316:	e001      	b.n	800731c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	89b9      	ldrh	r1, [r7, #12]
 8007320:	89ba      	ldrh	r2, [r7, #12]
 8007322:	2302      	movs	r3, #2
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	897b      	ldrh	r3, [r7, #10]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	460b      	mov	r3, r1
 800732c:	6979      	ldr	r1, [r7, #20]
 800732e:	f7ff fe7d 	bl	800702c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007332:	687b      	ldr	r3, [r7, #4]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <pbuf_realloc+0x20>
 800734e:	4b3a      	ldr	r3, [pc, #232]	@ (8007438 <pbuf_realloc+0xfc>)
 8007350:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007354:	4939      	ldr	r1, [pc, #228]	@ (800743c <pbuf_realloc+0x100>)
 8007356:	483a      	ldr	r0, [pc, #232]	@ (8007440 <pbuf_realloc+0x104>)
 8007358:	f00c fd68 	bl	8013e2c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	891b      	ldrh	r3, [r3, #8]
 8007360:	887a      	ldrh	r2, [r7, #2]
 8007362:	429a      	cmp	r2, r3
 8007364:	d263      	bcs.n	800742e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	891a      	ldrh	r2, [r3, #8]
 800736a:	887b      	ldrh	r3, [r7, #2]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007370:	887b      	ldrh	r3, [r7, #2]
 8007372:	817b      	strh	r3, [r7, #10]
  q = p;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007378:	e018      	b.n	80073ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	895b      	ldrh	r3, [r3, #10]
 800737e:	897a      	ldrh	r2, [r7, #10]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	891a      	ldrh	r2, [r3, #8]
 8007388:	893b      	ldrh	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <pbuf_realloc+0x70>
 800739e:	4b26      	ldr	r3, [pc, #152]	@ (8007438 <pbuf_realloc+0xfc>)
 80073a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80073a4:	4927      	ldr	r1, [pc, #156]	@ (8007444 <pbuf_realloc+0x108>)
 80073a6:	4826      	ldr	r0, [pc, #152]	@ (8007440 <pbuf_realloc+0x104>)
 80073a8:	f00c fd40 	bl	8013e2c <iprintf>
  while (rem_len > q->len) {
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	895b      	ldrh	r3, [r3, #10]
 80073b0:	897a      	ldrh	r2, [r7, #10]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d8e1      	bhi.n	800737a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	7b1b      	ldrb	r3, [r3, #12]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d121      	bne.n	8007406 <pbuf_realloc+0xca>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	895b      	ldrh	r3, [r3, #10]
 80073c6:	897a      	ldrh	r2, [r7, #10]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d01c      	beq.n	8007406 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7b5b      	ldrb	r3, [r3, #13]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d116      	bne.n	8007406 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	4413      	add	r3, r2
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4619      	mov	r1, r3
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7fe ff86 	bl	80062fc <mem_trim>
 80073f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <pbuf_realloc+0xca>
 80073f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007438 <pbuf_realloc+0xfc>)
 80073fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80073fe:	4912      	ldr	r1, [pc, #72]	@ (8007448 <pbuf_realloc+0x10c>)
 8007400:	480f      	ldr	r0, [pc, #60]	@ (8007440 <pbuf_realloc+0x104>)
 8007402:	f00c fd13 	bl	8013e2c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	897a      	ldrh	r2, [r7, #10]
 800740a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	895a      	ldrh	r2, [r3, #10]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f911 	bl	8007648 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e000      	b.n	8007430 <pbuf_realloc+0xf4>
    return;
 800742e:	bf00      	nop

}
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	080182d0 	.word	0x080182d0
 800743c:	080183e8 	.word	0x080183e8
 8007440:	08018330 	.word	0x08018330
 8007444:	08018400 	.word	0x08018400
 8007448:	08018418 	.word	0x08018418

0800744c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <pbuf_add_header_impl+0x22>
 8007460:	4b2b      	ldr	r3, [pc, #172]	@ (8007510 <pbuf_add_header_impl+0xc4>)
 8007462:	f240 12df 	movw	r2, #479	@ 0x1df
 8007466:	492b      	ldr	r1, [pc, #172]	@ (8007514 <pbuf_add_header_impl+0xc8>)
 8007468:	482b      	ldr	r0, [pc, #172]	@ (8007518 <pbuf_add_header_impl+0xcc>)
 800746a:	f00c fcdf 	bl	8013e2c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <pbuf_add_header_impl+0x30>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800747a:	d301      	bcc.n	8007480 <pbuf_add_header_impl+0x34>
    return 1;
 800747c:	2301      	movs	r3, #1
 800747e:	e043      	b.n	8007508 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <pbuf_add_header_impl+0x3e>
    return 0;
 8007486:	2300      	movs	r3, #0
 8007488:	e03e      	b.n	8007508 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	891a      	ldrh	r2, [r3, #8]
 8007492:	8a7b      	ldrh	r3, [r7, #18]
 8007494:	4413      	add	r3, r2
 8007496:	b29b      	uxth	r3, r3
 8007498:	8a7a      	ldrh	r2, [r7, #18]
 800749a:	429a      	cmp	r2, r3
 800749c:	d901      	bls.n	80074a2 <pbuf_add_header_impl+0x56>
    return 1;
 800749e:	2301      	movs	r3, #1
 80074a0:	e032      	b.n	8007508 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	7b1b      	ldrb	r3, [r3, #12]
 80074a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80074a8:	8a3b      	ldrh	r3, [r7, #16]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	425b      	negs	r3, r3
 80074ba:	4413      	add	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3310      	adds	r3, #16
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d20d      	bcs.n	80074e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e01d      	b.n	8007508 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d006      	beq.n	80074e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	425b      	negs	r3, r3
 80074da:	4413      	add	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e001      	b.n	80074e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e011      	b.n	8007508 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	895a      	ldrh	r2, [r3, #10]
 80074ee:	8a7b      	ldrh	r3, [r7, #18]
 80074f0:	4413      	add	r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	891a      	ldrh	r2, [r3, #8]
 80074fc:	8a7b      	ldrh	r3, [r7, #18]
 80074fe:	4413      	add	r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	811a      	strh	r2, [r3, #8]


  return 0;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	080182d0 	.word	0x080182d0
 8007514:	08018434 	.word	0x08018434
 8007518:	08018330 	.word	0x08018330

0800751c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007526:	2200      	movs	r2, #0
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff ff8e 	bl	800744c <pbuf_add_header_impl>
 8007530:	4603      	mov	r3, r0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <pbuf_remove_header+0x1e>
 800754c:	4b20      	ldr	r3, [pc, #128]	@ (80075d0 <pbuf_remove_header+0x94>)
 800754e:	f240 224b 	movw	r2, #587	@ 0x24b
 8007552:	4920      	ldr	r1, [pc, #128]	@ (80075d4 <pbuf_remove_header+0x98>)
 8007554:	4820      	ldr	r0, [pc, #128]	@ (80075d8 <pbuf_remove_header+0x9c>)
 8007556:	f00c fc69 	bl	8013e2c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <pbuf_remove_header+0x2c>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007566:	d301      	bcc.n	800756c <pbuf_remove_header+0x30>
    return 1;
 8007568:	2301      	movs	r3, #1
 800756a:	e02c      	b.n	80075c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <pbuf_remove_header+0x3a>
    return 0;
 8007572:	2300      	movs	r3, #0
 8007574:	e027      	b.n	80075c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	895b      	ldrh	r3, [r3, #10]
 800757e:	89fa      	ldrh	r2, [r7, #14]
 8007580:	429a      	cmp	r2, r3
 8007582:	d908      	bls.n	8007596 <pbuf_remove_header+0x5a>
 8007584:	4b12      	ldr	r3, [pc, #72]	@ (80075d0 <pbuf_remove_header+0x94>)
 8007586:	f240 2255 	movw	r2, #597	@ 0x255
 800758a:	4914      	ldr	r1, [pc, #80]	@ (80075dc <pbuf_remove_header+0xa0>)
 800758c:	4812      	ldr	r0, [pc, #72]	@ (80075d8 <pbuf_remove_header+0x9c>)
 800758e:	f00c fc4d 	bl	8013e2c <iprintf>
 8007592:	2301      	movs	r3, #1
 8007594:	e017      	b.n	80075c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	441a      	add	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	895a      	ldrh	r2, [r3, #10]
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	891a      	ldrh	r2, [r3, #8]
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	080182d0 	.word	0x080182d0
 80075d4:	08018434 	.word	0x08018434
 80075d8:	08018330 	.word	0x08018330
 80075dc:	08018440 	.word	0x08018440

080075e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
 80075ec:	4613      	mov	r3, r2
 80075ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80075f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da08      	bge.n	800760a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80075f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075fc:	425b      	negs	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff ff9b 	bl	800753c <pbuf_remove_header>
 8007606:	4603      	mov	r3, r0
 8007608:	e007      	b.n	800761a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800760a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800760e:	787a      	ldrb	r2, [r7, #1]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff ff1a 	bl	800744c <pbuf_add_header_impl>
 8007618:	4603      	mov	r3, r0
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800762e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007632:	2201      	movs	r2, #1
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff ffd2 	bl	80075e0 <pbuf_header_impl>
 800763c:	4603      	mov	r3, r0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10b      	bne.n	800766e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <pbuf_free+0x22>
 800765c:	4b38      	ldr	r3, [pc, #224]	@ (8007740 <pbuf_free+0xf8>)
 800765e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007662:	4938      	ldr	r1, [pc, #224]	@ (8007744 <pbuf_free+0xfc>)
 8007664:	4838      	ldr	r0, [pc, #224]	@ (8007748 <pbuf_free+0x100>)
 8007666:	f00c fbe1 	bl	8013e2c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800766a:	2300      	movs	r3, #0
 800766c:	e063      	b.n	8007736 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007672:	e05c      	b.n	800772e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7b9b      	ldrb	r3, [r3, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d106      	bne.n	800768a <pbuf_free+0x42>
 800767c:	4b30      	ldr	r3, [pc, #192]	@ (8007740 <pbuf_free+0xf8>)
 800767e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007682:	4932      	ldr	r1, [pc, #200]	@ (800774c <pbuf_free+0x104>)
 8007684:	4830      	ldr	r0, [pc, #192]	@ (8007748 <pbuf_free+0x100>)
 8007686:	f00c fbd1 	bl	8013e2c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7b9b      	ldrb	r3, [r3, #14]
 800768e:	3b01      	subs	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	739a      	strb	r2, [r3, #14]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7b9b      	ldrb	r3, [r3, #14]
 800769a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800769c:	7dbb      	ldrb	r3, [r7, #22]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d143      	bne.n	800772a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	7b1b      	ldrb	r3, [r3, #12]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7b5b      	ldrb	r3, [r3, #13]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <pbuf_free+0x90>
 80076ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007740 <pbuf_free+0xf8>)
 80076cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80076d0:	491f      	ldr	r1, [pc, #124]	@ (8007750 <pbuf_free+0x108>)
 80076d2:	481d      	ldr	r0, [pc, #116]	@ (8007748 <pbuf_free+0x100>)
 80076d4:	f00c fbaa 	bl	8013e2c <iprintf>
        pc->custom_free_function(p);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	e01d      	b.n	800771e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d104      	bne.n	80076f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80076e8:	6879      	ldr	r1, [r7, #4]
 80076ea:	2008      	movs	r0, #8
 80076ec:	f7ff f92a 	bl	8006944 <memp_free>
 80076f0:	e015      	b.n	800771e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d104      	bne.n	8007702 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	2007      	movs	r0, #7
 80076fc:	f7ff f922 	bl	8006944 <memp_free>
 8007700:	e00d      	b.n	800771e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d103      	bne.n	8007710 <pbuf_free+0xc8>
          mem_free(p);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fe fd8d 	bl	8006228 <mem_free>
 800770e:	e006      	b.n	800771e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007710:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <pbuf_free+0xf8>)
 8007712:	f240 320f 	movw	r2, #783	@ 0x30f
 8007716:	490f      	ldr	r1, [pc, #60]	@ (8007754 <pbuf_free+0x10c>)
 8007718:	480b      	ldr	r0, [pc, #44]	@ (8007748 <pbuf_free+0x100>)
 800771a:	f00c fb87 	bl	8013e2c <iprintf>
        }
      }
      count++;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	3301      	adds	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	e001      	b.n	800772e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d19f      	bne.n	8007674 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	080182d0 	.word	0x080182d0
 8007744:	08018434 	.word	0x08018434
 8007748:	08018330 	.word	0x08018330
 800774c:	08018460 	.word	0x08018460
 8007750:	08018478 	.word	0x08018478
 8007754:	0801849c 	.word	0x0801849c

08007758 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007764:	e005      	b.n	8007772 <pbuf_clen+0x1a>
    ++len;
 8007766:	89fb      	ldrh	r3, [r7, #14]
 8007768:	3301      	adds	r3, #1
 800776a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f6      	bne.n	8007766 <pbuf_clen+0xe>
  }
  return len;
 8007778:	89fb      	ldrh	r3, [r7, #14]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d010      	beq.n	80077b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7b9b      	ldrb	r3, [r3, #14]
 800779a:	3301      	adds	r3, #1
 800779c:	b2da      	uxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7b9b      	ldrb	r3, [r3, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d106      	bne.n	80077b8 <pbuf_ref+0x30>
 80077aa:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <pbuf_ref+0x38>)
 80077ac:	f240 3242 	movw	r2, #834	@ 0x342
 80077b0:	4904      	ldr	r1, [pc, #16]	@ (80077c4 <pbuf_ref+0x3c>)
 80077b2:	4805      	ldr	r0, [pc, #20]	@ (80077c8 <pbuf_ref+0x40>)
 80077b4:	f00c fb3a 	bl	8013e2c <iprintf>
  }
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	080182d0 	.word	0x080182d0
 80077c4:	080184b0 	.word	0x080184b0
 80077c8:	08018330 	.word	0x08018330

080077cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <pbuf_cat+0x16>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d107      	bne.n	80077f2 <pbuf_cat+0x26>
 80077e2:	4b20      	ldr	r3, [pc, #128]	@ (8007864 <pbuf_cat+0x98>)
 80077e4:	f240 3259 	movw	r2, #857	@ 0x359
 80077e8:	491f      	ldr	r1, [pc, #124]	@ (8007868 <pbuf_cat+0x9c>)
 80077ea:	4820      	ldr	r0, [pc, #128]	@ (800786c <pbuf_cat+0xa0>)
 80077ec:	f00c fb1e 	bl	8013e2c <iprintf>
 80077f0:	e034      	b.n	800785c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e00a      	b.n	800780e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	891a      	ldrh	r2, [r3, #8]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	891b      	ldrh	r3, [r3, #8]
 8007800:	4413      	add	r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f0      	bne.n	80077f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	891a      	ldrh	r2, [r3, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	895b      	ldrh	r3, [r3, #10]
 800781e:	429a      	cmp	r2, r3
 8007820:	d006      	beq.n	8007830 <pbuf_cat+0x64>
 8007822:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <pbuf_cat+0x98>)
 8007824:	f240 3262 	movw	r2, #866	@ 0x362
 8007828:	4911      	ldr	r1, [pc, #68]	@ (8007870 <pbuf_cat+0xa4>)
 800782a:	4810      	ldr	r0, [pc, #64]	@ (800786c <pbuf_cat+0xa0>)
 800782c:	f00c fafe 	bl	8013e2c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d006      	beq.n	8007846 <pbuf_cat+0x7a>
 8007838:	4b0a      	ldr	r3, [pc, #40]	@ (8007864 <pbuf_cat+0x98>)
 800783a:	f240 3263 	movw	r2, #867	@ 0x363
 800783e:	490d      	ldr	r1, [pc, #52]	@ (8007874 <pbuf_cat+0xa8>)
 8007840:	480a      	ldr	r0, [pc, #40]	@ (800786c <pbuf_cat+0xa0>)
 8007842:	f00c faf3 	bl	8013e2c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	891a      	ldrh	r2, [r3, #8]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	891b      	ldrh	r3, [r3, #8]
 800784e:	4413      	add	r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	080182d0 	.word	0x080182d0
 8007868:	080184c4 	.word	0x080184c4
 800786c:	08018330 	.word	0x08018330
 8007870:	080184fc 	.word	0x080184fc
 8007874:	0801852c 	.word	0x0801852c

08007878 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ffa1 	bl	80077cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800788a:	6838      	ldr	r0, [r7, #0]
 800788c:	f7ff ff7c 	bl	8007788 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007890:	bf00      	nop
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <pbuf_copy+0x2a>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <pbuf_copy+0x2a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	891a      	ldrh	r2, [r3, #8]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	891b      	ldrh	r3, [r3, #8]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d209      	bcs.n	80078d6 <pbuf_copy+0x3e>
 80078c2:	4b57      	ldr	r3, [pc, #348]	@ (8007a20 <pbuf_copy+0x188>)
 80078c4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80078c8:	4956      	ldr	r1, [pc, #344]	@ (8007a24 <pbuf_copy+0x18c>)
 80078ca:	4857      	ldr	r0, [pc, #348]	@ (8007a28 <pbuf_copy+0x190>)
 80078cc:	f00c faae 	bl	8013e2c <iprintf>
 80078d0:	f06f 030f 	mvn.w	r3, #15
 80078d4:	e09f      	b.n	8007a16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	895b      	ldrh	r3, [r3, #10]
 80078da:	461a      	mov	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	895b      	ldrh	r3, [r3, #10]
 80078e4:	4619      	mov	r1, r3
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1acb      	subs	r3, r1, r3
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d306      	bcc.n	80078fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	895b      	ldrh	r3, [r3, #10]
 80078f2:	461a      	mov	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	60fb      	str	r3, [r7, #12]
 80078fa:	e005      	b.n	8007908 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	895b      	ldrh	r3, [r3, #10]
 8007900:	461a      	mov	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	18d0      	adds	r0, r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	4413      	add	r3, r2
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4619      	mov	r1, r3
 800791c:	f00c fbb9 	bl	8014092 <memcpy>
    offset_to += len;
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	895b      	ldrh	r3, [r3, #10]
 8007934:	461a      	mov	r2, r3
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4293      	cmp	r3, r2
 800793a:	d906      	bls.n	800794a <pbuf_copy+0xb2>
 800793c:	4b38      	ldr	r3, [pc, #224]	@ (8007a20 <pbuf_copy+0x188>)
 800793e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007942:	493a      	ldr	r1, [pc, #232]	@ (8007a2c <pbuf_copy+0x194>)
 8007944:	4838      	ldr	r0, [pc, #224]	@ (8007a28 <pbuf_copy+0x190>)
 8007946:	f00c fa71 	bl	8013e2c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	895b      	ldrh	r3, [r3, #10]
 800794e:	461a      	mov	r2, r3
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4293      	cmp	r3, r2
 8007954:	d906      	bls.n	8007964 <pbuf_copy+0xcc>
 8007956:	4b32      	ldr	r3, [pc, #200]	@ (8007a20 <pbuf_copy+0x188>)
 8007958:	f240 32da 	movw	r2, #986	@ 0x3da
 800795c:	4934      	ldr	r1, [pc, #208]	@ (8007a30 <pbuf_copy+0x198>)
 800795e:	4832      	ldr	r0, [pc, #200]	@ (8007a28 <pbuf_copy+0x190>)
 8007960:	f00c fa64 	bl	8013e2c <iprintf>
    if (offset_from >= p_from->len) {
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	895b      	ldrh	r3, [r3, #10]
 8007968:	461a      	mov	r2, r3
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4293      	cmp	r3, r2
 800796e:	d304      	bcc.n	800797a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	895b      	ldrh	r3, [r3, #10]
 800797e:	461a      	mov	r2, r3
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4293      	cmp	r3, r2
 8007984:	d114      	bne.n	80079b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10c      	bne.n	80079b0 <pbuf_copy+0x118>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <pbuf_copy+0x118>
 800799c:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <pbuf_copy+0x188>)
 800799e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80079a2:	4924      	ldr	r1, [pc, #144]	@ (8007a34 <pbuf_copy+0x19c>)
 80079a4:	4820      	ldr	r0, [pc, #128]	@ (8007a28 <pbuf_copy+0x190>)
 80079a6:	f00c fa41 	bl	8013e2c <iprintf>
 80079aa:	f06f 030f 	mvn.w	r3, #15
 80079ae:	e032      	b.n	8007a16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <pbuf_copy+0x146>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	895a      	ldrh	r2, [r3, #10]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	891b      	ldrh	r3, [r3, #8]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d10d      	bne.n	80079de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <pbuf_copy+0x146>
 80079ca:	4b15      	ldr	r3, [pc, #84]	@ (8007a20 <pbuf_copy+0x188>)
 80079cc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80079d0:	4919      	ldr	r1, [pc, #100]	@ (8007a38 <pbuf_copy+0x1a0>)
 80079d2:	4815      	ldr	r0, [pc, #84]	@ (8007a28 <pbuf_copy+0x190>)
 80079d4:	f00c fa2a 	bl	8013e2c <iprintf>
 80079d8:	f06f 0305 	mvn.w	r3, #5
 80079dc:	e01b      	b.n	8007a16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d013      	beq.n	8007a0c <pbuf_copy+0x174>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	895a      	ldrh	r2, [r3, #10]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	891b      	ldrh	r3, [r3, #8]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d10d      	bne.n	8007a0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <pbuf_copy+0x174>
 80079f8:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <pbuf_copy+0x188>)
 80079fa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80079fe:	490e      	ldr	r1, [pc, #56]	@ (8007a38 <pbuf_copy+0x1a0>)
 8007a00:	4809      	ldr	r0, [pc, #36]	@ (8007a28 <pbuf_copy+0x190>)
 8007a02:	f00c fa13 	bl	8013e2c <iprintf>
 8007a06:	f06f 0305 	mvn.w	r3, #5
 8007a0a:	e004      	b.n	8007a16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f47f af61 	bne.w	80078d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	080182d0 	.word	0x080182d0
 8007a24:	08018578 	.word	0x08018578
 8007a28:	08018330 	.word	0x08018330
 8007a2c:	080185a8 	.word	0x080185a8
 8007a30:	080185c0 	.word	0x080185c0
 8007a34:	080185dc 	.word	0x080185dc
 8007a38:	080185ec 	.word	0x080185ec

08007a3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	80fb      	strh	r3, [r7, #6]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d108      	bne.n	8007a72 <pbuf_copy_partial+0x36>
 8007a60:	4b2b      	ldr	r3, [pc, #172]	@ (8007b10 <pbuf_copy_partial+0xd4>)
 8007a62:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007a66:	492b      	ldr	r1, [pc, #172]	@ (8007b14 <pbuf_copy_partial+0xd8>)
 8007a68:	482b      	ldr	r0, [pc, #172]	@ (8007b18 <pbuf_copy_partial+0xdc>)
 8007a6a:	f00c f9df 	bl	8013e2c <iprintf>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e04a      	b.n	8007b08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d108      	bne.n	8007a8a <pbuf_copy_partial+0x4e>
 8007a78:	4b25      	ldr	r3, [pc, #148]	@ (8007b10 <pbuf_copy_partial+0xd4>)
 8007a7a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007a7e:	4927      	ldr	r1, [pc, #156]	@ (8007b1c <pbuf_copy_partial+0xe0>)
 8007a80:	4825      	ldr	r0, [pc, #148]	@ (8007b18 <pbuf_copy_partial+0xdc>)
 8007a82:	f00c f9d3 	bl	8013e2c <iprintf>
 8007a86:	2300      	movs	r3, #0
 8007a88:	e03e      	b.n	8007b08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e034      	b.n	8007afa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007a90:	88bb      	ldrh	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <pbuf_copy_partial+0x70>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	895b      	ldrh	r3, [r3, #10]
 8007a9a:	88ba      	ldrh	r2, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d305      	bcc.n	8007aac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	895b      	ldrh	r3, [r3, #10]
 8007aa4:	88ba      	ldrh	r2, [r7, #4]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	80bb      	strh	r3, [r7, #4]
 8007aaa:	e023      	b.n	8007af4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	895a      	ldrh	r2, [r3, #10]
 8007ab0:	88bb      	ldrh	r3, [r7, #4]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007ab6:	8b3a      	ldrh	r2, [r7, #24]
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d901      	bls.n	8007ac2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007abe:	88fb      	ldrh	r3, [r7, #6]
 8007ac0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ac2:	8b7b      	ldrh	r3, [r7, #26]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	18d0      	adds	r0, r2, r3
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	88bb      	ldrh	r3, [r7, #4]
 8007ace:	4413      	add	r3, r2
 8007ad0:	8b3a      	ldrh	r2, [r7, #24]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	f00c fadd 	bl	8014092 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007ad8:	8afa      	ldrh	r2, [r7, #22]
 8007ada:	8b3b      	ldrh	r3, [r7, #24]
 8007adc:	4413      	add	r3, r2
 8007ade:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007ae0:	8b7a      	ldrh	r2, [r7, #26]
 8007ae2:	8b3b      	ldrh	r3, [r7, #24]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ae8:	88fa      	ldrh	r2, [r7, #6]
 8007aea:	8b3b      	ldrh	r3, [r7, #24]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <pbuf_copy_partial+0xca>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1c4      	bne.n	8007a90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007b06:	8afb      	ldrh	r3, [r7, #22]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	080182d0 	.word	0x080182d0
 8007b14:	08018618 	.word	0x08018618
 8007b18:	08018330 	.word	0x08018330
 8007b1c:	08018638 	.word	0x08018638

08007b20 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8007b2e:	897b      	ldrh	r3, [r7, #10]
 8007b30:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007b36:	e007      	b.n	8007b48 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	895b      	ldrh	r3, [r3, #10]
 8007b3c:	8afa      	ldrh	r2, [r7, #22]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <pbuf_skip_const+0x38>
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	895b      	ldrh	r3, [r3, #10]
 8007b52:	8afa      	ldrh	r2, [r7, #22]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d2ef      	bcs.n	8007b38 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8afa      	ldrh	r2, [r7, #22]
 8007b62:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8007b64:	693b      	ldr	r3, [r7, #16]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	603a      	str	r2, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	460b      	mov	r3, r1
 8007b82:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	8919      	ldrh	r1, [r3, #8]
 8007b88:	88ba      	ldrh	r2, [r7, #4]
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fa77 	bl	8007080 <pbuf_alloc>
 8007b92:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <pbuf_clone+0x2a>
    return NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e011      	b.n	8007bc2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff fe79 	bl	8007898 <pbuf_copy>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007baa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d006      	beq.n	8007bc0 <pbuf_clone+0x4c>
 8007bb2:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <pbuf_clone+0x58>)
 8007bb4:	f240 5224 	movw	r2, #1316	@ 0x524
 8007bb8:	4905      	ldr	r1, [pc, #20]	@ (8007bd0 <pbuf_clone+0x5c>)
 8007bba:	4806      	ldr	r0, [pc, #24]	@ (8007bd4 <pbuf_clone+0x60>)
 8007bbc:	f00c f936 	bl	8013e2c <iprintf>
  return q;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	080182d0 	.word	0x080182d0
 8007bd0:	08018744 	.word	0x08018744
 8007bd4:	08018330 	.word	0x08018330

08007bd8 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8007be4:	887b      	ldrh	r3, [r7, #2]
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f80c 	bl	8007c06 <pbuf_try_get_at>
 8007bee:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	db02      	blt.n	8007bfc <pbuf_get_at+0x24>
    return (u8_t)ret;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	e000      	b.n	8007bfe <pbuf_get_at+0x26>
  }
  return 0;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007c12:	f107 020a 	add.w	r2, r7, #10
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff ff80 	bl	8007b20 <pbuf_skip_const>
 8007c20:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <pbuf_try_get_at+0x38>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	895a      	ldrh	r2, [r3, #10]
 8007c2c:	897b      	ldrh	r3, [r7, #10]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d905      	bls.n	8007c3e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	897a      	ldrh	r2, [r7, #10]
 8007c38:	4413      	add	r3, r2
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	e001      	b.n	8007c42 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007c50:	f00b f936 	bl	8012ec0 <rand>
 8007c54:	4603      	mov	r3, r0
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	4b01      	ldr	r3, [pc, #4]	@ (8007c6c <tcp_init+0x20>)
 8007c66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007c68:	bf00      	nop
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000030 	.word	0x20000030

08007c70 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7d1b      	ldrb	r3, [r3, #20]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d105      	bne.n	8007c8c <tcp_free+0x1c>
 8007c80:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <tcp_free+0x2c>)
 8007c82:	22d4      	movs	r2, #212	@ 0xd4
 8007c84:	4906      	ldr	r1, [pc, #24]	@ (8007ca0 <tcp_free+0x30>)
 8007c86:	4807      	ldr	r0, [pc, #28]	@ (8007ca4 <tcp_free+0x34>)
 8007c88:	f00c f8d0 	bl	8013e2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	2001      	movs	r0, #1
 8007c90:	f7fe fe58 	bl	8006944 <memp_free>
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	080187d0 	.word	0x080187d0
 8007ca0:	08018800 	.word	0x08018800
 8007ca4:	08018814 	.word	0x08018814

08007ca8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	7d1b      	ldrb	r3, [r3, #20]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d105      	bne.n	8007cc4 <tcp_free_listen+0x1c>
 8007cb8:	4b06      	ldr	r3, [pc, #24]	@ (8007cd4 <tcp_free_listen+0x2c>)
 8007cba:	22df      	movs	r2, #223	@ 0xdf
 8007cbc:	4906      	ldr	r1, [pc, #24]	@ (8007cd8 <tcp_free_listen+0x30>)
 8007cbe:	4807      	ldr	r0, [pc, #28]	@ (8007cdc <tcp_free_listen+0x34>)
 8007cc0:	f00c f8b4 	bl	8013e2c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	2002      	movs	r0, #2
 8007cc8:	f7fe fe3c 	bl	8006944 <memp_free>
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	080187d0 	.word	0x080187d0
 8007cd8:	0801883c 	.word	0x0801883c
 8007cdc:	08018814 	.word	0x08018814

08007ce0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007ce4:	f001 f89a 	bl	8008e1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007ce8:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <tcp_tmr+0x28>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	3301      	adds	r3, #1
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	4b05      	ldr	r3, [pc, #20]	@ (8007d08 <tcp_tmr+0x28>)
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <tcp_tmr+0x28>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007d00:	f000 fd4a 	bl	8008798 <tcp_slowtmr>
  }
}
 8007d04:	bf00      	nop
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20007fe9 	.word	0x20007fe9

08007d0c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d105      	bne.n	8007d28 <tcp_remove_listener+0x1c>
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <tcp_remove_listener+0x48>)
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	490d      	ldr	r1, [pc, #52]	@ (8007d58 <tcp_remove_listener+0x4c>)
 8007d22:	480e      	ldr	r0, [pc, #56]	@ (8007d5c <tcp_remove_listener+0x50>)
 8007d24:	f00c f882 	bl	8013e2c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e00a      	b.n	8007d44 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d102      	bne.n	8007d3e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f1      	bne.n	8007d2e <tcp_remove_listener+0x22>
    }
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	080187d0 	.word	0x080187d0
 8007d58:	08018858 	.word	0x08018858
 8007d5c:	08018814 	.word	0x08018814

08007d60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <tcp_listen_closed+0x1c>
 8007d6e:	4b14      	ldr	r3, [pc, #80]	@ (8007dc0 <tcp_listen_closed+0x60>)
 8007d70:	f240 1211 	movw	r2, #273	@ 0x111
 8007d74:	4913      	ldr	r1, [pc, #76]	@ (8007dc4 <tcp_listen_closed+0x64>)
 8007d76:	4814      	ldr	r0, [pc, #80]	@ (8007dc8 <tcp_listen_closed+0x68>)
 8007d78:	f00c f858 	bl	8013e2c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	7d1b      	ldrb	r3, [r3, #20]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d006      	beq.n	8007d92 <tcp_listen_closed+0x32>
 8007d84:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc0 <tcp_listen_closed+0x60>)
 8007d86:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007d8a:	4910      	ldr	r1, [pc, #64]	@ (8007dcc <tcp_listen_closed+0x6c>)
 8007d8c:	480e      	ldr	r0, [pc, #56]	@ (8007dc8 <tcp_listen_closed+0x68>)
 8007d8e:	f00c f84d 	bl	8013e2c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007d92:	2301      	movs	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	e00b      	b.n	8007db0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007d98:	4a0d      	ldr	r2, [pc, #52]	@ (8007dd0 <tcp_listen_closed+0x70>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff ffb1 	bl	8007d0c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d9f0      	bls.n	8007d98 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	080187d0 	.word	0x080187d0
 8007dc4:	08018880 	.word	0x08018880
 8007dc8:	08018814 	.word	0x08018814
 8007dcc:	0801888c 	.word	0x0801888c
 8007dd0:	0801abb8 	.word	0x0801abb8

08007dd4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007dd4:	b5b0      	push	{r4, r5, r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af04      	add	r7, sp, #16
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <tcp_close_shutdown+0x20>
 8007de6:	4b63      	ldr	r3, [pc, #396]	@ (8007f74 <tcp_close_shutdown+0x1a0>)
 8007de8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007dec:	4962      	ldr	r1, [pc, #392]	@ (8007f78 <tcp_close_shutdown+0x1a4>)
 8007dee:	4863      	ldr	r0, [pc, #396]	@ (8007f7c <tcp_close_shutdown+0x1a8>)
 8007df0:	f00c f81c 	bl	8013e2c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d066      	beq.n	8007ec8 <tcp_close_shutdown+0xf4>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7d1b      	ldrb	r3, [r3, #20]
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d003      	beq.n	8007e0a <tcp_close_shutdown+0x36>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7d1b      	ldrb	r3, [r3, #20]
 8007e06:	2b07      	cmp	r3, #7
 8007e08:	d15e      	bne.n	8007ec8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <tcp_close_shutdown+0x48>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e1a:	d055      	beq.n	8007ec8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8b5b      	ldrh	r3, [r3, #26]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d106      	bne.n	8007e36 <tcp_close_shutdown+0x62>
 8007e28:	4b52      	ldr	r3, [pc, #328]	@ (8007f74 <tcp_close_shutdown+0x1a0>)
 8007e2a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007e2e:	4954      	ldr	r1, [pc, #336]	@ (8007f80 <tcp_close_shutdown+0x1ac>)
 8007e30:	4852      	ldr	r0, [pc, #328]	@ (8007f7c <tcp_close_shutdown+0x1a8>)
 8007e32:	f00b fffb 	bl	8013e2c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007e3e:	687d      	ldr	r5, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	8ad2      	ldrh	r2, [r2, #22]
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	8b09      	ldrh	r1, [r1, #24]
 8007e4c:	9102      	str	r1, [sp, #8]
 8007e4e:	9201      	str	r2, [sp, #4]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	462b      	mov	r3, r5
 8007e54:	4622      	mov	r2, r4
 8007e56:	4601      	mov	r1, r0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f005 fd91 	bl	800d980 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fb74 	bl	800954c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007e64:	4b47      	ldr	r3, [pc, #284]	@ (8007f84 <tcp_close_shutdown+0x1b0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d105      	bne.n	8007e7a <tcp_close_shutdown+0xa6>
 8007e6e:	4b45      	ldr	r3, [pc, #276]	@ (8007f84 <tcp_close_shutdown+0x1b0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	4a43      	ldr	r2, [pc, #268]	@ (8007f84 <tcp_close_shutdown+0x1b0>)
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	e013      	b.n	8007ea2 <tcp_close_shutdown+0xce>
 8007e7a:	4b42      	ldr	r3, [pc, #264]	@ (8007f84 <tcp_close_shutdown+0x1b0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e00c      	b.n	8007e9c <tcp_close_shutdown+0xc8>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d104      	bne.n	8007e96 <tcp_close_shutdown+0xc2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	60da      	str	r2, [r3, #12]
 8007e94:	e005      	b.n	8007ea2 <tcp_close_shutdown+0xce>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1ef      	bne.n	8007e82 <tcp_close_shutdown+0xae>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	4b37      	ldr	r3, [pc, #220]	@ (8007f88 <tcp_close_shutdown+0x1b4>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007eae:	4b37      	ldr	r3, [pc, #220]	@ (8007f8c <tcp_close_shutdown+0x1b8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d102      	bne.n	8007ebe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007eb8:	f004 f808 	bl	800becc <tcp_trigger_input_pcb_close>
 8007ebc:	e002      	b.n	8007ec4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fed6 	bl	8007c70 <tcp_free>
      }
      return ERR_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e050      	b.n	8007f6a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7d1b      	ldrb	r3, [r3, #20]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d03b      	beq.n	8007f48 <tcp_close_shutdown+0x174>
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	dc44      	bgt.n	8007f5e <tcp_close_shutdown+0x18a>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <tcp_close_shutdown+0x10a>
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d02a      	beq.n	8007f32 <tcp_close_shutdown+0x15e>
 8007edc:	e03f      	b.n	8007f5e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8adb      	ldrh	r3, [r3, #22]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d021      	beq.n	8007f2a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f90 <tcp_close_shutdown+0x1bc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d105      	bne.n	8007efc <tcp_close_shutdown+0x128>
 8007ef0:	4b27      	ldr	r3, [pc, #156]	@ (8007f90 <tcp_close_shutdown+0x1bc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	4a26      	ldr	r2, [pc, #152]	@ (8007f90 <tcp_close_shutdown+0x1bc>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e013      	b.n	8007f24 <tcp_close_shutdown+0x150>
 8007efc:	4b24      	ldr	r3, [pc, #144]	@ (8007f90 <tcp_close_shutdown+0x1bc>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	e00c      	b.n	8007f1e <tcp_close_shutdown+0x14a>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d104      	bne.n	8007f18 <tcp_close_shutdown+0x144>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	60da      	str	r2, [r3, #12]
 8007f16:	e005      	b.n	8007f24 <tcp_close_shutdown+0x150>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	60bb      	str	r3, [r7, #8]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ef      	bne.n	8007f04 <tcp_close_shutdown+0x130>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff fea0 	bl	8007c70 <tcp_free>
      break;
 8007f30:	e01a      	b.n	8007f68 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff ff14 	bl	8007d60 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4816      	ldr	r0, [pc, #88]	@ (8007f94 <tcp_close_shutdown+0x1c0>)
 8007f3c:	f001 fb56 	bl	80095ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff feb1 	bl	8007ca8 <tcp_free_listen>
      break;
 8007f46:	e00f      	b.n	8007f68 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	480e      	ldr	r0, [pc, #56]	@ (8007f84 <tcp_close_shutdown+0x1b0>)
 8007f4c:	f001 fb4e 	bl	80095ec <tcp_pcb_remove>
 8007f50:	4b0d      	ldr	r3, [pc, #52]	@ (8007f88 <tcp_close_shutdown+0x1b4>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fe8a 	bl	8007c70 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007f5c:	e004      	b.n	8007f68 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f81a 	bl	8007f98 <tcp_close_shutdown_fin>
 8007f64:	4603      	mov	r3, r0
 8007f66:	e000      	b.n	8007f6a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bdb0      	pop	{r4, r5, r7, pc}
 8007f72:	bf00      	nop
 8007f74:	080187d0 	.word	0x080187d0
 8007f78:	080188a4 	.word	0x080188a4
 8007f7c:	08018814 	.word	0x08018814
 8007f80:	080188c4 	.word	0x080188c4
 8007f84:	20007fe0 	.word	0x20007fe0
 8007f88:	20007fe8 	.word	0x20007fe8
 8007f8c:	20008020 	.word	0x20008020
 8007f90:	20007fd8 	.word	0x20007fd8
 8007f94:	20007fdc 	.word	0x20007fdc

08007f98 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <tcp_close_shutdown_fin+0x1c>
 8007fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8008060 <tcp_close_shutdown_fin+0xc8>)
 8007fa8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007fac:	492d      	ldr	r1, [pc, #180]	@ (8008064 <tcp_close_shutdown_fin+0xcc>)
 8007fae:	482e      	ldr	r0, [pc, #184]	@ (8008068 <tcp_close_shutdown_fin+0xd0>)
 8007fb0:	f00b ff3c 	bl	8013e2c <iprintf>

  switch (pcb->state) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7d1b      	ldrb	r3, [r3, #20]
 8007fb8:	2b07      	cmp	r3, #7
 8007fba:	d020      	beq.n	8007ffe <tcp_close_shutdown_fin+0x66>
 8007fbc:	2b07      	cmp	r3, #7
 8007fbe:	dc2b      	bgt.n	8008018 <tcp_close_shutdown_fin+0x80>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d002      	beq.n	8007fca <tcp_close_shutdown_fin+0x32>
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d00d      	beq.n	8007fe4 <tcp_close_shutdown_fin+0x4c>
 8007fc8:	e026      	b.n	8008018 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f004 fde6 	bl	800cb9c <tcp_send_fin>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11f      	bne.n	800801c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2205      	movs	r2, #5
 8007fe0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007fe2:	e01b      	b.n	800801c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f004 fdd9 	bl	800cb9c <tcp_send_fin>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d114      	bne.n	8008020 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007ffc:	e010      	b.n	8008020 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f004 fdcc 	bl	800cb9c <tcp_send_fin>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2209      	movs	r2, #9
 8008014:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008016:	e005      	b.n	8008024 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e01c      	b.n	8008056 <tcp_close_shutdown_fin+0xbe>
      break;
 800801c:	bf00      	nop
 800801e:	e002      	b.n	8008026 <tcp_close_shutdown_fin+0x8e>
      break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <tcp_close_shutdown_fin+0x8e>
      break;
 8008024:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f004 fef2 	bl	800ce18 <tcp_output>
 8008034:	e00d      	b.n	8008052 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803e:	d108      	bne.n	8008052 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8b5b      	ldrh	r3, [r3, #26]
 8008044:	f043 0308 	orr.w	r3, r3, #8
 8008048:	b29a      	uxth	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e001      	b.n	8008056 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	080187d0 	.word	0x080187d0
 8008064:	08018880 	.word	0x08018880
 8008068:	08018814 	.word	0x08018814

0800806c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <tcp_close+0x22>
 800807a:	4b0f      	ldr	r3, [pc, #60]	@ (80080b8 <tcp_close+0x4c>)
 800807c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008080:	490e      	ldr	r1, [pc, #56]	@ (80080bc <tcp_close+0x50>)
 8008082:	480f      	ldr	r0, [pc, #60]	@ (80080c0 <tcp_close+0x54>)
 8008084:	f00b fed2 	bl	8013e2c <iprintf>
 8008088:	f06f 030f 	mvn.w	r3, #15
 800808c:	e00f      	b.n	80080ae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	7d1b      	ldrb	r3, [r3, #20]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d006      	beq.n	80080a4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8b5b      	ldrh	r3, [r3, #26]
 800809a:	f043 0310 	orr.w	r3, r3, #16
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80080a4:	2101      	movs	r1, #1
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff fe94 	bl	8007dd4 <tcp_close_shutdown>
 80080ac:	4603      	mov	r3, r0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	080187d0 	.word	0x080187d0
 80080bc:	080188e0 	.word	0x080188e0
 80080c0:	08018814 	.word	0x08018814

080080c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08e      	sub	sp, #56	@ 0x38
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <tcp_abandon+0x20>
 80080d4:	4b52      	ldr	r3, [pc, #328]	@ (8008220 <tcp_abandon+0x15c>)
 80080d6:	f240 223d 	movw	r2, #573	@ 0x23d
 80080da:	4952      	ldr	r1, [pc, #328]	@ (8008224 <tcp_abandon+0x160>)
 80080dc:	4852      	ldr	r0, [pc, #328]	@ (8008228 <tcp_abandon+0x164>)
 80080de:	f00b fea5 	bl	8013e2c <iprintf>
 80080e2:	e099      	b.n	8008218 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7d1b      	ldrb	r3, [r3, #20]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d106      	bne.n	80080fa <tcp_abandon+0x36>
 80080ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008220 <tcp_abandon+0x15c>)
 80080ee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80080f2:	494e      	ldr	r1, [pc, #312]	@ (800822c <tcp_abandon+0x168>)
 80080f4:	484c      	ldr	r0, [pc, #304]	@ (8008228 <tcp_abandon+0x164>)
 80080f6:	f00b fe99 	bl	8013e2c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7d1b      	ldrb	r3, [r3, #20]
 80080fe:	2b0a      	cmp	r3, #10
 8008100:	d107      	bne.n	8008112 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	484a      	ldr	r0, [pc, #296]	@ (8008230 <tcp_abandon+0x16c>)
 8008106:	f001 fa71 	bl	80095ec <tcp_pcb_remove>
    tcp_free(pcb);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff fdb0 	bl	8007c70 <tcp_free>
 8008110:	e082      	b.n	8008218 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008116:	2300      	movs	r3, #0
 8008118:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008124:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d126      	bne.n	800818a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8adb      	ldrh	r3, [r3, #22]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d02e      	beq.n	80081a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008144:	4b3b      	ldr	r3, [pc, #236]	@ (8008234 <tcp_abandon+0x170>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d105      	bne.n	800815a <tcp_abandon+0x96>
 800814e:	4b39      	ldr	r3, [pc, #228]	@ (8008234 <tcp_abandon+0x170>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4a37      	ldr	r2, [pc, #220]	@ (8008234 <tcp_abandon+0x170>)
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	e013      	b.n	8008182 <tcp_abandon+0xbe>
 800815a:	4b36      	ldr	r3, [pc, #216]	@ (8008234 <tcp_abandon+0x170>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e00c      	b.n	800817c <tcp_abandon+0xb8>
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d104      	bne.n	8008176 <tcp_abandon+0xb2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	60da      	str	r2, [r3, #12]
 8008174:	e005      	b.n	8008182 <tcp_abandon+0xbe>
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1ef      	bne.n	8008162 <tcp_abandon+0x9e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	60da      	str	r2, [r3, #12]
 8008188:	e00b      	b.n	80081a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8adb      	ldrh	r3, [r3, #22]
 8008192:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	4828      	ldr	r0, [pc, #160]	@ (8008238 <tcp_abandon+0x174>)
 8008198:	f001 fa28 	bl	80095ec <tcp_pcb_remove>
 800819c:	4b27      	ldr	r3, [pc, #156]	@ (800823c <tcp_abandon+0x178>)
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 ff14 	bl	8008fdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 ff0b 	bl	8008fdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 ff02 	bl	8008fdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	8b12      	ldrh	r2, [r2, #24]
 80081e8:	9202      	str	r2, [sp, #8]
 80081ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80081ec:	9201      	str	r2, [sp, #4]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	460b      	mov	r3, r1
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	69b9      	ldr	r1, [r7, #24]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f005 fbc2 	bl	800d980 <tcp_rst>
    }
    last_state = pcb->state;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fd34 	bl	8007c70 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <tcp_abandon+0x154>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f06f 010c 	mvn.w	r1, #12
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	4798      	blx	r3
  }
}
 8008218:	3728      	adds	r7, #40	@ 0x28
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	080187d0 	.word	0x080187d0
 8008224:	08018914 	.word	0x08018914
 8008228:	08018814 	.word	0x08018814
 800822c:	08018930 	.word	0x08018930
 8008230:	20007fe4 	.word	0x20007fe4
 8008234:	20007fd8 	.word	0x20007fd8
 8008238:	20007fe0 	.word	0x20007fe0
 800823c:	20007fe8 	.word	0x20007fe8

08008240 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008248:	2101      	movs	r1, #1
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff ff3a 	bl	80080c4 <tcp_abandon>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008266:	2304      	movs	r3, #4
 8008268:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008270:	4b3e      	ldr	r3, [pc, #248]	@ (800836c <tcp_bind+0x114>)
 8008272:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <tcp_bind+0x36>
 800827a:	4b3d      	ldr	r3, [pc, #244]	@ (8008370 <tcp_bind+0x118>)
 800827c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008280:	493c      	ldr	r1, [pc, #240]	@ (8008374 <tcp_bind+0x11c>)
 8008282:	483d      	ldr	r0, [pc, #244]	@ (8008378 <tcp_bind+0x120>)
 8008284:	f00b fdd2 	bl	8013e2c <iprintf>
 8008288:	f06f 030f 	mvn.w	r3, #15
 800828c:	e06a      	b.n	8008364 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	7d1b      	ldrb	r3, [r3, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <tcp_bind+0x52>
 8008296:	4b36      	ldr	r3, [pc, #216]	@ (8008370 <tcp_bind+0x118>)
 8008298:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800829c:	4937      	ldr	r1, [pc, #220]	@ (800837c <tcp_bind+0x124>)
 800829e:	4836      	ldr	r0, [pc, #216]	@ (8008378 <tcp_bind+0x120>)
 80082a0:	f00b fdc4 	bl	8013e2c <iprintf>
 80082a4:	f06f 0305 	mvn.w	r3, #5
 80082a8:	e05c      	b.n	8008364 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80082b0:	f000 f914 	bl	80084dc <tcp_new_port>
 80082b4:	4603      	mov	r3, r0
 80082b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d135      	bne.n	800832a <tcp_bind+0xd2>
      return ERR_BUF;
 80082be:	f06f 0301 	mvn.w	r3, #1
 80082c2:	e04f      	b.n	8008364 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80082c4:	2300      	movs	r3, #0
 80082c6:	61fb      	str	r3, [r7, #28]
 80082c8:	e02b      	b.n	8008322 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80082ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008380 <tcp_bind+0x128>)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e01e      	b.n	8008316 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	8adb      	ldrh	r3, [r3, #22]
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d116      	bne.n	8008310 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80082e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d010      	beq.n	800830a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <tcp_bind+0xb2>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008306:	429a      	cmp	r2, r3
 8008308:	d102      	bne.n	8008310 <tcp_bind+0xb8>
              return ERR_USE;
 800830a:	f06f 0307 	mvn.w	r3, #7
 800830e:	e029      	b.n	8008364 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1dd      	bne.n	80082d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	429a      	cmp	r2, r3
 8008328:	dbcf      	blt.n	80082ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00c      	beq.n	800834a <tcp_bind+0xf2>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <tcp_bind+0xec>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	e000      	b.n	8008346 <tcp_bind+0xee>
 8008344:	2300      	movs	r3, #0
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	88fa      	ldrh	r2, [r7, #6]
 800834e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008350:	4b0c      	ldr	r3, [pc, #48]	@ (8008384 <tcp_bind+0x12c>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	4a0a      	ldr	r2, [pc, #40]	@ (8008384 <tcp_bind+0x12c>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	f005 fccf 	bl	800dd00 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	0801abf0 	.word	0x0801abf0
 8008370:	080187d0 	.word	0x080187d0
 8008374:	08018964 	.word	0x08018964
 8008378:	08018814 	.word	0x08018814
 800837c:	0801897c 	.word	0x0801897c
 8008380:	0801abb8 	.word	0x0801abb8
 8008384:	20007fd8 	.word	0x20007fd8

08008388 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <tcp_update_rcv_ann_wnd+0x1c>
 8008396:	4b25      	ldr	r3, [pc, #148]	@ (800842c <tcp_update_rcv_ann_wnd+0xa4>)
 8008398:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800839c:	4924      	ldr	r1, [pc, #144]	@ (8008430 <tcp_update_rcv_ann_wnd+0xa8>)
 800839e:	4825      	ldr	r0, [pc, #148]	@ (8008434 <tcp_update_rcv_ann_wnd+0xac>)
 80083a0:	f00b fd44 	bl	8013e2c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80083ac:	4413      	add	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80083b8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80083bc:	bf28      	it	cs
 80083be:	f44f 6200 	movcs.w	r2, #2048	@ 0x800
 80083c2:	b292      	uxth	r2, r2
 80083c4:	4413      	add	r3, r2
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	db08      	blt.n	80083e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	e020      	b.n	8008422 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dd03      	ble.n	80083f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083f4:	e014      	b.n	8008420 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008408:	d306      	bcc.n	8008418 <tcp_update_rcv_ann_wnd+0x90>
 800840a:	4b08      	ldr	r3, [pc, #32]	@ (800842c <tcp_update_rcv_ann_wnd+0xa4>)
 800840c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008410:	4909      	ldr	r1, [pc, #36]	@ (8008438 <tcp_update_rcv_ann_wnd+0xb0>)
 8008412:	4808      	ldr	r0, [pc, #32]	@ (8008434 <tcp_update_rcv_ann_wnd+0xac>)
 8008414:	f00b fd0a 	bl	8013e2c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008420:	2300      	movs	r3, #0
  }
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	080187d0 	.word	0x080187d0
 8008430:	08018a2c 	.word	0x08018a2c
 8008434:	08018814 	.word	0x08018814
 8008438:	08018a50 	.word	0x08018a50

0800843c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <tcp_recved+0x22>
 800844e:	4b1f      	ldr	r3, [pc, #124]	@ (80084cc <tcp_recved+0x90>)
 8008450:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008454:	491e      	ldr	r1, [pc, #120]	@ (80084d0 <tcp_recved+0x94>)
 8008456:	481f      	ldr	r0, [pc, #124]	@ (80084d4 <tcp_recved+0x98>)
 8008458:	f00b fce8 	bl	8013e2c <iprintf>
 800845c:	e032      	b.n	80084c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	7d1b      	ldrb	r3, [r3, #20]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d106      	bne.n	8008474 <tcp_recved+0x38>
 8008466:	4b19      	ldr	r3, [pc, #100]	@ (80084cc <tcp_recved+0x90>)
 8008468:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800846c:	491a      	ldr	r1, [pc, #104]	@ (80084d8 <tcp_recved+0x9c>)
 800846e:	4819      	ldr	r0, [pc, #100]	@ (80084d4 <tcp_recved+0x98>)
 8008470:	f00b fcdc 	bl	8013e2c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008478:	887b      	ldrh	r3, [r7, #2]
 800847a:	4413      	add	r3, r2
 800847c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800847e:	89fb      	ldrh	r3, [r7, #14]
 8008480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008484:	d804      	bhi.n	8008490 <tcp_recved+0x54>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800848a:	89fa      	ldrh	r2, [r7, #14]
 800848c:	429a      	cmp	r2, r3
 800848e:	d204      	bcs.n	800849a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008496:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008498:	e002      	b.n	80084a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	89fa      	ldrh	r2, [r7, #14]
 800849e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff ff71 	bl	8008388 <tcp_update_rcv_ann_wnd>
 80084a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084ae:	d309      	bcc.n	80084c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	8b5b      	ldrh	r3, [r3, #26]
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f004 fcaa 	bl	800ce18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	080187d0 	.word	0x080187d0
 80084d0:	08018a6c 	.word	0x08018a6c
 80084d4:	08018814 	.word	0x08018814
 80084d8:	08018a84 	.word	0x08018a84

080084dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80084e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008560 <tcp_new_port+0x84>)
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	3301      	adds	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008560 <tcp_new_port+0x84>)
 80084f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80084f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008560 <tcp_new_port+0x84>)
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d103      	bne.n	8008506 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80084fe:	4b18      	ldr	r3, [pc, #96]	@ (8008560 <tcp_new_port+0x84>)
 8008500:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008504:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008506:	2300      	movs	r3, #0
 8008508:	71fb      	strb	r3, [r7, #7]
 800850a:	e01e      	b.n	800854a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	4a15      	ldr	r2, [pc, #84]	@ (8008564 <tcp_new_port+0x88>)
 8008510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	e011      	b.n	800853e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	8ada      	ldrh	r2, [r3, #22]
 800851e:	4b10      	ldr	r3, [pc, #64]	@ (8008560 <tcp_new_port+0x84>)
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d108      	bne.n	8008538 <tcp_new_port+0x5c>
        n++;
 8008526:	88bb      	ldrh	r3, [r7, #4]
 8008528:	3301      	adds	r3, #1
 800852a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800852c:	88bb      	ldrh	r3, [r7, #4]
 800852e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008532:	d3d8      	bcc.n	80084e6 <tcp_new_port+0xa>
          return 0;
 8008534:	2300      	movs	r3, #0
 8008536:	e00d      	b.n	8008554 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1ea      	bne.n	800851a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	3301      	adds	r3, #1
 8008548:	71fb      	strb	r3, [r7, #7]
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d9dd      	bls.n	800850c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008550:	4b03      	ldr	r3, [pc, #12]	@ (8008560 <tcp_new_port+0x84>)
 8008552:	881b      	ldrh	r3, [r3, #0]
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000030 	.word	0x20000030
 8008564:	0801abb8 	.word	0x0801abb8

08008568 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	@ 0x28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	4613      	mov	r3, r2
 8008576:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8008578:	2300      	movs	r3, #0
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d109      	bne.n	8008596 <tcp_connect+0x2e>
 8008582:	4b7d      	ldr	r3, [pc, #500]	@ (8008778 <tcp_connect+0x210>)
 8008584:	f240 4235 	movw	r2, #1077	@ 0x435
 8008588:	497c      	ldr	r1, [pc, #496]	@ (800877c <tcp_connect+0x214>)
 800858a:	487d      	ldr	r0, [pc, #500]	@ (8008780 <tcp_connect+0x218>)
 800858c:	f00b fc4e 	bl	8013e2c <iprintf>
 8008590:	f06f 030f 	mvn.w	r3, #15
 8008594:	e0ec      	b.n	8008770 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d109      	bne.n	80085b0 <tcp_connect+0x48>
 800859c:	4b76      	ldr	r3, [pc, #472]	@ (8008778 <tcp_connect+0x210>)
 800859e:	f240 4236 	movw	r2, #1078	@ 0x436
 80085a2:	4978      	ldr	r1, [pc, #480]	@ (8008784 <tcp_connect+0x21c>)
 80085a4:	4876      	ldr	r0, [pc, #472]	@ (8008780 <tcp_connect+0x218>)
 80085a6:	f00b fc41 	bl	8013e2c <iprintf>
 80085aa:	f06f 030f 	mvn.w	r3, #15
 80085ae:	e0df      	b.n	8008770 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	7d1b      	ldrb	r3, [r3, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d009      	beq.n	80085cc <tcp_connect+0x64>
 80085b8:	4b6f      	ldr	r3, [pc, #444]	@ (8008778 <tcp_connect+0x210>)
 80085ba:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80085be:	4972      	ldr	r1, [pc, #456]	@ (8008788 <tcp_connect+0x220>)
 80085c0:	486f      	ldr	r0, [pc, #444]	@ (8008780 <tcp_connect+0x218>)
 80085c2:	f00b fc33 	bl	8013e2c <iprintf>
 80085c6:	f06f 0309 	mvn.w	r3, #9
 80085ca:	e0d1      	b.n	8008770 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <tcp_connect+0x70>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	e000      	b.n	80085da <tcp_connect+0x72>
 80085d8:	2300      	movs	r3, #0
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	7a1b      	ldrb	r3, [r3, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7a1b      	ldrb	r3, [r3, #8]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fcc9 	bl	8006f88 <netif_get_by_index>
 80085f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80085f8:	e005      	b.n	8008606 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f009 f92a 	bl	8011858 <ip4_route>
 8008604:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800860c:	f06f 0303 	mvn.w	r3, #3
 8008610:	e0ae      	b.n	8008770 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <tcp_connect+0xb8>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d111      	bne.n	8008644 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <tcp_connect+0xc4>
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	3304      	adds	r3, #4
 800862a:	e000      	b.n	800862e <tcp_connect+0xc6>
 800862c:	2300      	movs	r3, #0
 800862e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <tcp_connect+0xd4>
      return ERR_RTE;
 8008636:	f06f 0303 	mvn.w	r3, #3
 800863a:	e099      	b.n	8008770 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8adb      	ldrh	r3, [r3, #22]
 8008648:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8adb      	ldrh	r3, [r3, #22]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10c      	bne.n	800866c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8008652:	f7ff ff43 	bl	80084dc <tcp_new_port>
 8008656:	4603      	mov	r3, r0
 8008658:	461a      	mov	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8adb      	ldrh	r3, [r3, #22]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <tcp_connect+0x104>
      return ERR_BUF;
 8008666:	f06f 0301 	mvn.w	r3, #1
 800866a:	e081      	b.n	8008770 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f001 f851 	bl	8009714 <tcp_next_iss>
 8008672:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	1e5a      	subs	r2, r3, #1
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800869e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80086b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80086c0:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3304      	adds	r3, #4
 80086ca:	461a      	mov	r2, r3
 80086cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086ce:	f001 f847 	bl	8009760 <tcp_eff_send_mss_netif>
 80086d2:	4603      	mov	r3, r0
 80086d4:	461a      	mov	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80086ea:	2102      	movs	r1, #2
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f004 faa5 	bl	800cc3c <tcp_enqueue_flags>
 80086f2:	4603      	mov	r3, r0
 80086f4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80086f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d136      	bne.n	800876c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2202      	movs	r2, #2
 8008702:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008704:	8b7b      	ldrh	r3, [r7, #26]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d021      	beq.n	800874e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800870a:	4b20      	ldr	r3, [pc, #128]	@ (800878c <tcp_connect+0x224>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	429a      	cmp	r2, r3
 8008712:	d105      	bne.n	8008720 <tcp_connect+0x1b8>
 8008714:	4b1d      	ldr	r3, [pc, #116]	@ (800878c <tcp_connect+0x224>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	4a1c      	ldr	r2, [pc, #112]	@ (800878c <tcp_connect+0x224>)
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e013      	b.n	8008748 <tcp_connect+0x1e0>
 8008720:	4b1a      	ldr	r3, [pc, #104]	@ (800878c <tcp_connect+0x224>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e00c      	b.n	8008742 <tcp_connect+0x1da>
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	429a      	cmp	r2, r3
 8008730:	d104      	bne.n	800873c <tcp_connect+0x1d4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e005      	b.n	8008748 <tcp_connect+0x1e0>
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	623b      	str	r3, [r7, #32]
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ef      	bne.n	8008728 <tcp_connect+0x1c0>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800874e:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <tcp_connect+0x228>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	4a0e      	ldr	r2, [pc, #56]	@ (8008790 <tcp_connect+0x228>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	f005 fad0 	bl	800dd00 <tcp_timer_needed>
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <tcp_connect+0x22c>)
 8008762:	2201      	movs	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f004 fb56 	bl	800ce18 <tcp_output>
  }
  return ret;
 800876c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3728      	adds	r7, #40	@ 0x28
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	080187d0 	.word	0x080187d0
 800877c:	08018aac 	.word	0x08018aac
 8008780:	08018814 	.word	0x08018814
 8008784:	08018ac8 	.word	0x08018ac8
 8008788:	08018ae4 	.word	0x08018ae4
 800878c:	20007fd8 	.word	0x20007fd8
 8008790:	20007fe0 	.word	0x20007fe0
 8008794:	20007fe8 	.word	0x20007fe8

08008798 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008798:	b5b0      	push	{r4, r5, r7, lr}
 800879a:	b090      	sub	sp, #64	@ 0x40
 800879c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80087a4:	4b95      	ldr	r3, [pc, #596]	@ (80089fc <tcp_slowtmr+0x264>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3301      	adds	r3, #1
 80087aa:	4a94      	ldr	r2, [pc, #592]	@ (80089fc <tcp_slowtmr+0x264>)
 80087ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80087ae:	4b94      	ldr	r3, [pc, #592]	@ (8008a00 <tcp_slowtmr+0x268>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	3301      	adds	r3, #1
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	4b92      	ldr	r3, [pc, #584]	@ (8008a00 <tcp_slowtmr+0x268>)
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	e000      	b.n	80087be <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80087bc:	bf00      	nop
  prev = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80087c2:	4b90      	ldr	r3, [pc, #576]	@ (8008a04 <tcp_slowtmr+0x26c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80087c8:	e29d      	b.n	8008d06 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80087ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087cc:	7d1b      	ldrb	r3, [r3, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <tcp_slowtmr+0x48>
 80087d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008a08 <tcp_slowtmr+0x270>)
 80087d4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80087d8:	498c      	ldr	r1, [pc, #560]	@ (8008a0c <tcp_slowtmr+0x274>)
 80087da:	488d      	ldr	r0, [pc, #564]	@ (8008a10 <tcp_slowtmr+0x278>)
 80087dc:	f00b fb26 	bl	8013e2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80087e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e2:	7d1b      	ldrb	r3, [r3, #20]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d106      	bne.n	80087f6 <tcp_slowtmr+0x5e>
 80087e8:	4b87      	ldr	r3, [pc, #540]	@ (8008a08 <tcp_slowtmr+0x270>)
 80087ea:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80087ee:	4989      	ldr	r1, [pc, #548]	@ (8008a14 <tcp_slowtmr+0x27c>)
 80087f0:	4887      	ldr	r0, [pc, #540]	@ (8008a10 <tcp_slowtmr+0x278>)
 80087f2:	f00b fb1b 	bl	8013e2c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80087f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f8:	7d1b      	ldrb	r3, [r3, #20]
 80087fa:	2b0a      	cmp	r3, #10
 80087fc:	d106      	bne.n	800880c <tcp_slowtmr+0x74>
 80087fe:	4b82      	ldr	r3, [pc, #520]	@ (8008a08 <tcp_slowtmr+0x270>)
 8008800:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008804:	4984      	ldr	r1, [pc, #528]	@ (8008a18 <tcp_slowtmr+0x280>)
 8008806:	4882      	ldr	r0, [pc, #520]	@ (8008a10 <tcp_slowtmr+0x278>)
 8008808:	f00b fb10 	bl	8013e2c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	7f9a      	ldrb	r2, [r3, #30]
 8008810:	4b7b      	ldr	r3, [pc, #492]	@ (8008a00 <tcp_slowtmr+0x268>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d105      	bne.n	8008824 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008822:	e270      	b.n	8008d06 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008824:	4b76      	ldr	r3, [pc, #472]	@ (8008a00 <tcp_slowtmr+0x268>)
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800883a:	7d1b      	ldrb	r3, [r3, #20]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d10a      	bne.n	8008856 <tcp_slowtmr+0xbe>
 8008840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008846:	2b05      	cmp	r3, #5
 8008848:	d905      	bls.n	8008856 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800884a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800884e:	3301      	adds	r3, #1
 8008850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008854:	e11e      	b.n	8008a94 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008858:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800885c:	2b0b      	cmp	r3, #11
 800885e:	d905      	bls.n	800886c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008860:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008864:	3301      	adds	r3, #1
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800886a:	e113      	b.n	8008a94 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800886c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008872:	2b00      	cmp	r3, #0
 8008874:	d075      	beq.n	8008962 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <tcp_slowtmr+0xf4>
 800887e:	4b62      	ldr	r3, [pc, #392]	@ (8008a08 <tcp_slowtmr+0x270>)
 8008880:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008884:	4965      	ldr	r1, [pc, #404]	@ (8008a1c <tcp_slowtmr+0x284>)
 8008886:	4862      	ldr	r0, [pc, #392]	@ (8008a10 <tcp_slowtmr+0x278>)
 8008888:	f00b fad0 	bl	8013e2c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800888c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <tcp_slowtmr+0x10a>
 8008894:	4b5c      	ldr	r3, [pc, #368]	@ (8008a08 <tcp_slowtmr+0x270>)
 8008896:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800889a:	4961      	ldr	r1, [pc, #388]	@ (8008a20 <tcp_slowtmr+0x288>)
 800889c:	485c      	ldr	r0, [pc, #368]	@ (8008a10 <tcp_slowtmr+0x278>)
 800889e:	f00b fac5 	bl	8013e2c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80088a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80088a8:	2b0b      	cmp	r3, #11
 80088aa:	d905      	bls.n	80088b8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80088ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088b0:	3301      	adds	r3, #1
 80088b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088b6:	e0ed      	b.n	8008a94 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80088be:	3b01      	subs	r3, #1
 80088c0:	4a58      	ldr	r2, [pc, #352]	@ (8008a24 <tcp_slowtmr+0x28c>)
 80088c2:	5cd3      	ldrb	r3, [r2, r3]
 80088c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80088c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80088cc:	7c7a      	ldrb	r2, [r7, #17]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d907      	bls.n	80088e2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80088d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80088d8:	3301      	adds	r3, #1
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80088e8:	7c7a      	ldrb	r2, [r7, #17]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	f200 80d2 	bhi.w	8008a94 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80088f0:	2301      	movs	r3, #1
 80088f2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d108      	bne.n	8008910 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80088fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008900:	f005 f930 	bl	800db64 <tcp_zero_window_probe>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800890a:	2300      	movs	r3, #0
 800890c:	623b      	str	r3, [r7, #32]
 800890e:	e011      	b.n	8008934 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008916:	4619      	mov	r1, r3
 8008918:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800891a:	f003 fff7 	bl	800c90c <tcp_split_unsent_seg>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d107      	bne.n	8008934 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008926:	f004 fa77 	bl	800ce18 <tcp_output>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80ac 	beq.w	8008a94 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800894a:	2b06      	cmp	r3, #6
 800894c:	f200 80a2 	bhi.w	8008a94 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008956:	3301      	adds	r3, #1
 8008958:	b2da      	uxtb	r2, r3
 800895a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008960:	e098      	b.n	8008a94 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008964:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	db0f      	blt.n	800898c <tcp_slowtmr+0x1f4>
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008972:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008976:	4293      	cmp	r3, r2
 8008978:	d008      	beq.n	800898c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008980:	b29b      	uxth	r3, r3
 8008982:	3301      	adds	r3, #1
 8008984:	b29b      	uxth	r3, r3
 8008986:	b21a      	sxth	r2, r3
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008998:	429a      	cmp	r2, r3
 800899a:	db7b      	blt.n	8008a94 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800899c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800899e:	f004 fd2f 	bl	800d400 <tcp_rexmit_rto_prepare>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <tcp_slowtmr+0x220>
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d171      	bne.n	8008a94 <tcp_slowtmr+0x2fc>
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d06d      	beq.n	8008a94 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	7d1b      	ldrb	r3, [r3, #20]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d03a      	beq.n	8008a36 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089c6:	2b0c      	cmp	r3, #12
 80089c8:	bf28      	it	cs
 80089ca:	230c      	movcs	r3, #12
 80089cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80089ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80089d4:	10db      	asrs	r3, r3, #3
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80089e0:	4413      	add	r3, r2
 80089e2:	7efa      	ldrb	r2, [r7, #27]
 80089e4:	4910      	ldr	r1, [pc, #64]	@ (8008a28 <tcp_slowtmr+0x290>)
 80089e6:	5c8a      	ldrb	r2, [r1, r2]
 80089e8:	4093      	lsls	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80089f2:	4293      	cmp	r3, r2
 80089f4:	dc1a      	bgt.n	8008a2c <tcp_slowtmr+0x294>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	b21a      	sxth	r2, r3
 80089fa:	e019      	b.n	8008a30 <tcp_slowtmr+0x298>
 80089fc:	20007fd4 	.word	0x20007fd4
 8008a00:	20007fea 	.word	0x20007fea
 8008a04:	20007fe0 	.word	0x20007fe0
 8008a08:	080187d0 	.word	0x080187d0
 8008a0c:	08018b14 	.word	0x08018b14
 8008a10:	08018814 	.word	0x08018814
 8008a14:	08018b40 	.word	0x08018b40
 8008a18:	08018b6c 	.word	0x08018b6c
 8008a1c:	08018b9c 	.word	0x08018b9c
 8008a20:	08018bd0 	.word	0x08018bd0
 8008a24:	0801abb0 	.word	0x0801abb0
 8008a28:	0801aba0 	.word	0x0801aba0
 8008a2c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a38:	2200      	movs	r2, #0
 8008a3a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	bf28      	it	cs
 8008a4c:	4613      	movcs	r3, r2
 8008a4e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008a50:	8a7b      	ldrh	r3, [r7, #18]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d206      	bcs.n	8008a7c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008a8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a90:	f004 fd26 	bl	800d4e0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	7d1b      	ldrb	r3, [r3, #20]
 8008a98:	2b06      	cmp	r3, #6
 8008a9a:	d111      	bne.n	8008ac0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	8b5b      	ldrh	r3, [r3, #26]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008aa8:	4b9c      	ldr	r3, [pc, #624]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b28      	cmp	r3, #40	@ 0x28
 8008ab4:	d904      	bls.n	8008ac0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aba:	3301      	adds	r3, #1
 8008abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	7a5b      	ldrb	r3, [r3, #9]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d04a      	beq.n	8008b62 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ace:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ad0:	2b04      	cmp	r3, #4
 8008ad2:	d003      	beq.n	8008adc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008ad8:	2b07      	cmp	r3, #7
 8008ada:	d142      	bne.n	8008b62 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008adc:	4b8f      	ldr	r3, [pc, #572]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008aec:	4b8c      	ldr	r3, [pc, #560]	@ (8008d20 <tcp_slowtmr+0x588>)
 8008aee:	440b      	add	r3, r1
 8008af0:	498c      	ldr	r1, [pc, #560]	@ (8008d24 <tcp_slowtmr+0x58c>)
 8008af2:	fba1 1303 	umull	r1, r3, r1, r3
 8008af6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d90a      	bls.n	8008b12 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b00:	3301      	adds	r3, #1
 8008b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008b06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b10:	e027      	b.n	8008b62 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b12:	4b82      	ldr	r3, [pc, #520]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b24:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d28 <tcp_slowtmr+0x590>)
 8008b2c:	fb00 f303 	mul.w	r3, r0, r3
 8008b30:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008b32:	497c      	ldr	r1, [pc, #496]	@ (8008d24 <tcp_slowtmr+0x58c>)
 8008b34:	fba1 1303 	umull	r1, r3, r1, r3
 8008b38:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d911      	bls.n	8008b62 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b40:	f004 ffd0 	bl	800dae4 <tcp_keepalive>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008b4a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d107      	bne.n	8008b62 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d011      	beq.n	8008b8e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	440b      	add	r3, r1
 8008b82:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d302      	bcc.n	8008b8e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b8a:	f000 fe93 	bl	80098b4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	7d1b      	ldrb	r3, [r3, #20]
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d10b      	bne.n	8008bae <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b96:	4b61      	ldr	r3, [pc, #388]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b28      	cmp	r3, #40	@ 0x28
 8008ba2:	d904      	bls.n	8008bae <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	7d1b      	ldrb	r3, [r3, #20]
 8008bb2:	2b09      	cmp	r3, #9
 8008bb4:	d10b      	bne.n	8008bce <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008bb6:	4b59      	ldr	r3, [pc, #356]	@ (8008d1c <tcp_slowtmr+0x584>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2bf0      	cmp	r3, #240	@ 0xf0
 8008bc2:	d904      	bls.n	8008bce <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc8:	3301      	adds	r3, #1
 8008bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d060      	beq.n	8008c98 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bdc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008be0:	f000 fcb4 	bl	800954c <tcp_pcb_purge>
      if (prev != NULL) {
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d010      	beq.n	8008c0c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008bea:	4b50      	ldr	r3, [pc, #320]	@ (8008d2c <tcp_slowtmr+0x594>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d106      	bne.n	8008c02 <tcp_slowtmr+0x46a>
 8008bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8008d30 <tcp_slowtmr+0x598>)
 8008bf6:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008bfa:	494e      	ldr	r1, [pc, #312]	@ (8008d34 <tcp_slowtmr+0x59c>)
 8008bfc:	484e      	ldr	r0, [pc, #312]	@ (8008d38 <tcp_slowtmr+0x5a0>)
 8008bfe:	f00b f915 	bl	8013e2c <iprintf>
        prev->next = pcb->next;
 8008c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c08:	60da      	str	r2, [r3, #12]
 8008c0a:	e00f      	b.n	8008c2c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c0c:	4b47      	ldr	r3, [pc, #284]	@ (8008d2c <tcp_slowtmr+0x594>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d006      	beq.n	8008c24 <tcp_slowtmr+0x48c>
 8008c16:	4b46      	ldr	r3, [pc, #280]	@ (8008d30 <tcp_slowtmr+0x598>)
 8008c18:	f240 5271 	movw	r2, #1393	@ 0x571
 8008c1c:	4947      	ldr	r1, [pc, #284]	@ (8008d3c <tcp_slowtmr+0x5a4>)
 8008c1e:	4846      	ldr	r0, [pc, #280]	@ (8008d38 <tcp_slowtmr+0x5a0>)
 8008c20:	f00b f904 	bl	8013e2c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	4a40      	ldr	r2, [pc, #256]	@ (8008d2c <tcp_slowtmr+0x594>)
 8008c2a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d013      	beq.n	8008c5c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c3c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c40:	3304      	adds	r3, #4
 8008c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c44:	8ad2      	ldrh	r2, [r2, #22]
 8008c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c48:	8b09      	ldrh	r1, [r1, #24]
 8008c4a:	9102      	str	r1, [sp, #8]
 8008c4c:	9201      	str	r2, [sp, #4]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	462b      	mov	r3, r5
 8008c52:	4622      	mov	r2, r4
 8008c54:	4601      	mov	r1, r0
 8008c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c58:	f004 fe92 	bl	800d980 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	7d1b      	ldrb	r3, [r3, #20]
 8008c66:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008c72:	6838      	ldr	r0, [r7, #0]
 8008c74:	f7fe fffc 	bl	8007c70 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008c78:	4b31      	ldr	r3, [pc, #196]	@ (8008d40 <tcp_slowtmr+0x5a8>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <tcp_slowtmr+0x4f6>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f06f 010c 	mvn.w	r1, #12
 8008c8a:	68b8      	ldr	r0, [r7, #8]
 8008c8c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d40 <tcp_slowtmr+0x5a8>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d037      	beq.n	8008d06 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008c96:	e592      	b.n	80087be <tcp_slowtmr+0x26>
      prev = pcb;
 8008c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca4:	7f1b      	ldrb	r3, [r3, #28]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	7f1a      	ldrb	r2, [r3, #28]
 8008cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb4:	7f5b      	ldrb	r3, [r3, #29]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d325      	bcc.n	8008d06 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8008d40 <tcp_slowtmr+0x5a8>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <tcp_slowtmr+0x550>
 8008cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cd8:	6912      	ldr	r2, [r2, #16]
 8008cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4798      	blx	r3
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008ce6:	e002      	b.n	8008cee <tcp_slowtmr+0x556>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008cee:	4b14      	ldr	r3, [pc, #80]	@ (8008d40 <tcp_slowtmr+0x5a8>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f47f ad62 	bne.w	80087bc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008cf8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d02:	f004 f889 	bl	800ce18 <tcp_output>
  while (pcb != NULL) {
 8008d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f ad5e 	bne.w	80087ca <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008d12:	4b0c      	ldr	r3, [pc, #48]	@ (8008d44 <tcp_slowtmr+0x5ac>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008d18:	e069      	b.n	8008dee <tcp_slowtmr+0x656>
 8008d1a:	bf00      	nop
 8008d1c:	20007fd4 	.word	0x20007fd4
 8008d20:	000a4cb8 	.word	0x000a4cb8
 8008d24:	10624dd3 	.word	0x10624dd3
 8008d28:	000124f8 	.word	0x000124f8
 8008d2c:	20007fe0 	.word	0x20007fe0
 8008d30:	080187d0 	.word	0x080187d0
 8008d34:	08018c08 	.word	0x08018c08
 8008d38:	08018814 	.word	0x08018814
 8008d3c:	08018c34 	.word	0x08018c34
 8008d40:	20007fe8 	.word	0x20007fe8
 8008d44:	20007fe4 	.word	0x20007fe4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4a:	7d1b      	ldrb	r3, [r3, #20]
 8008d4c:	2b0a      	cmp	r3, #10
 8008d4e:	d006      	beq.n	8008d5e <tcp_slowtmr+0x5c6>
 8008d50:	4b2b      	ldr	r3, [pc, #172]	@ (8008e00 <tcp_slowtmr+0x668>)
 8008d52:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008d56:	492b      	ldr	r1, [pc, #172]	@ (8008e04 <tcp_slowtmr+0x66c>)
 8008d58:	482b      	ldr	r0, [pc, #172]	@ (8008e08 <tcp_slowtmr+0x670>)
 8008d5a:	f00b f867 	bl	8013e2c <iprintf>
    pcb_remove = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008d64:	4b29      	ldr	r3, [pc, #164]	@ (8008e0c <tcp_slowtmr+0x674>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008d70:	d904      	bls.n	8008d7c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008d72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d76:	3301      	adds	r3, #1
 8008d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d02f      	beq.n	8008de4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d86:	f000 fbe1 	bl	800954c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008d90:	4b1f      	ldr	r3, [pc, #124]	@ (8008e10 <tcp_slowtmr+0x678>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d106      	bne.n	8008da8 <tcp_slowtmr+0x610>
 8008d9a:	4b19      	ldr	r3, [pc, #100]	@ (8008e00 <tcp_slowtmr+0x668>)
 8008d9c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008da0:	491c      	ldr	r1, [pc, #112]	@ (8008e14 <tcp_slowtmr+0x67c>)
 8008da2:	4819      	ldr	r0, [pc, #100]	@ (8008e08 <tcp_slowtmr+0x670>)
 8008da4:	f00b f842 	bl	8013e2c <iprintf>
        prev->next = pcb->next;
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	60da      	str	r2, [r3, #12]
 8008db0:	e00f      	b.n	8008dd2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008db2:	4b17      	ldr	r3, [pc, #92]	@ (8008e10 <tcp_slowtmr+0x678>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d006      	beq.n	8008dca <tcp_slowtmr+0x632>
 8008dbc:	4b10      	ldr	r3, [pc, #64]	@ (8008e00 <tcp_slowtmr+0x668>)
 8008dbe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008dc2:	4915      	ldr	r1, [pc, #84]	@ (8008e18 <tcp_slowtmr+0x680>)
 8008dc4:	4810      	ldr	r0, [pc, #64]	@ (8008e08 <tcp_slowtmr+0x670>)
 8008dc6:	f00b f831 	bl	8013e2c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	4a10      	ldr	r2, [pc, #64]	@ (8008e10 <tcp_slowtmr+0x678>)
 8008dd0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008ddc:	69f8      	ldr	r0, [r7, #28]
 8008dde:	f7fe ff47 	bl	8007c70 <tcp_free>
 8008de2:	e004      	b.n	8008dee <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1a9      	bne.n	8008d48 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	3730      	adds	r7, #48	@ 0x30
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	080187d0 	.word	0x080187d0
 8008e04:	08018c60 	.word	0x08018c60
 8008e08:	08018814 	.word	0x08018814
 8008e0c:	20007fd4 	.word	0x20007fd4
 8008e10:	20007fe4 	.word	0x20007fe4
 8008e14:	08018c90 	.word	0x08018c90
 8008e18:	08018cb8 	.word	0x08018cb8

08008e1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e22:	4b2d      	ldr	r3, [pc, #180]	@ (8008ed8 <tcp_fasttmr+0xbc>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8008ed8 <tcp_fasttmr+0xbc>)
 8008e2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008edc <tcp_fasttmr+0xc0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008e34:	e048      	b.n	8008ec8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7f9a      	ldrb	r2, [r3, #30]
 8008e3a:	4b27      	ldr	r3, [pc, #156]	@ (8008ed8 <tcp_fasttmr+0xbc>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d03f      	beq.n	8008ec2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008e42:	4b25      	ldr	r3, [pc, #148]	@ (8008ed8 <tcp_fasttmr+0xbc>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	8b5b      	ldrh	r3, [r3, #26]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d010      	beq.n	8008e78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	8b5b      	ldrh	r3, [r3, #26]
 8008e5a:	f043 0302 	orr.w	r3, r3, #2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f003 ffd7 	bl	800ce18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	8b5b      	ldrh	r3, [r3, #26]
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	8b5b      	ldrh	r3, [r3, #26]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d009      	beq.n	8008e98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8b5b      	ldrh	r3, [r3, #26]
 8008e88:	f023 0308 	bic.w	r3, r3, #8
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff f880 	bl	8007f98 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee0 <tcp_fasttmr+0xc4>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f819 	bl	8008ee4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ee0 <tcp_fasttmr+0xc4>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d000      	beq.n	8008ebc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008eba:	e7b8      	b.n	8008e2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	607b      	str	r3, [r7, #4]
 8008ec0:	e002      	b.n	8008ec8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1b3      	bne.n	8008e36 <tcp_fasttmr+0x1a>
    }
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20007fea 	.word	0x20007fea
 8008edc:	20007fe0 	.word	0x20007fe0
 8008ee0:	20007fe8 	.word	0x20007fe8

08008ee4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d109      	bne.n	8008f06 <tcp_process_refused_data+0x22>
 8008ef2:	4b37      	ldr	r3, [pc, #220]	@ (8008fd0 <tcp_process_refused_data+0xec>)
 8008ef4:	f240 6209 	movw	r2, #1545	@ 0x609
 8008ef8:	4936      	ldr	r1, [pc, #216]	@ (8008fd4 <tcp_process_refused_data+0xf0>)
 8008efa:	4837      	ldr	r0, [pc, #220]	@ (8008fd8 <tcp_process_refused_data+0xf4>)
 8008efc:	f00a ff96 	bl	8013e2c <iprintf>
 8008f00:	f06f 030f 	mvn.w	r3, #15
 8008f04:	e060      	b.n	8008fc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f0a:	7b5b      	ldrb	r3, [r3, #13]
 8008f0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <tcp_process_refused_data+0x58>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6918      	ldr	r0, [r3, #16]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	47a0      	blx	r4
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	e007      	b.n	8008f4c <tcp_process_refused_data+0x68>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	2000      	movs	r0, #0
 8008f44:	f000 f8a4 	bl	8009090 <tcp_recv_null>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d12a      	bne.n	8008faa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d033      	beq.n	8008fc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f66:	d005      	beq.n	8008f74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <tcp_process_refused_data+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6918      	ldr	r0, [r3, #16]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	47a0      	blx	r4
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
 8008f94:	e001      	b.n	8008f9a <tcp_process_refused_data+0xb6>
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f9e:	f113 0f0d 	cmn.w	r3, #13
 8008fa2:	d110      	bne.n	8008fc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008fa4:	f06f 030c 	mvn.w	r3, #12
 8008fa8:	e00e      	b.n	8008fc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fae:	f113 0f0d 	cmn.w	r3, #13
 8008fb2:	d102      	bne.n	8008fba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008fb4:	f06f 030c 	mvn.w	r3, #12
 8008fb8:	e006      	b.n	8008fc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008fc0:	f06f 0304 	mvn.w	r3, #4
 8008fc4:	e000      	b.n	8008fc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd90      	pop	{r4, r7, pc}
 8008fd0:	080187d0 	.word	0x080187d0
 8008fd4:	08018ce0 	.word	0x08018ce0
 8008fd8:	08018814 	.word	0x08018814

08008fdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008fe4:	e007      	b.n	8008ff6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f80a 	bl	8009006 <tcp_seg_free>
    seg = next;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1f4      	bne.n	8008fe6 <tcp_segs_free+0xa>
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00c      	beq.n	800902e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d004      	beq.n	8009026 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fb11 	bl	8007648 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009026:	6879      	ldr	r1, [r7, #4]
 8009028:	2003      	movs	r0, #3
 800902a:	f7fd fc8b 	bl	8006944 <memp_free>
  }
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <tcp_seg_copy+0x1c>
 8009046:	4b0f      	ldr	r3, [pc, #60]	@ (8009084 <tcp_seg_copy+0x4c>)
 8009048:	f240 6282 	movw	r2, #1666	@ 0x682
 800904c:	490e      	ldr	r1, [pc, #56]	@ (8009088 <tcp_seg_copy+0x50>)
 800904e:	480f      	ldr	r0, [pc, #60]	@ (800908c <tcp_seg_copy+0x54>)
 8009050:	f00a feec 	bl	8013e2c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009054:	2003      	movs	r0, #3
 8009056:	f7fd fc05 	bl	8006864 <memp_malloc>
 800905a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <tcp_seg_copy+0x2e>
    return NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	e00a      	b.n	800907c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009066:	2210      	movs	r2, #16
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f00b f811 	bl	8014092 <memcpy>
  pbuf_ref(cseg->p);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fb87 	bl	8007788 <pbuf_ref>
  return cseg;
 800907a:	68fb      	ldr	r3, [r7, #12]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	080187d0 	.word	0x080187d0
 8009088:	08018d24 	.word	0x08018d24
 800908c:	08018814 	.word	0x08018814

08009090 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d109      	bne.n	80090b8 <tcp_recv_null+0x28>
 80090a4:	4b12      	ldr	r3, [pc, #72]	@ (80090f0 <tcp_recv_null+0x60>)
 80090a6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80090aa:	4912      	ldr	r1, [pc, #72]	@ (80090f4 <tcp_recv_null+0x64>)
 80090ac:	4812      	ldr	r0, [pc, #72]	@ (80090f8 <tcp_recv_null+0x68>)
 80090ae:	f00a febd 	bl	8013e2c <iprintf>
 80090b2:	f06f 030f 	mvn.w	r3, #15
 80090b6:	e016      	b.n	80090e6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	891b      	ldrh	r3, [r3, #8]
 80090c2:	4619      	mov	r1, r3
 80090c4:	68b8      	ldr	r0, [r7, #8]
 80090c6:	f7ff f9b9 	bl	800843c <tcp_recved>
    pbuf_free(p);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7fe fabc 	bl	8007648 <pbuf_free>
 80090d0:	e008      	b.n	80090e4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80090d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80090da:	68b8      	ldr	r0, [r7, #8]
 80090dc:	f7fe ffc6 	bl	800806c <tcp_close>
 80090e0:	4603      	mov	r3, r0
 80090e2:	e000      	b.n	80090e6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	080187d0 	.word	0x080187d0
 80090f4:	08018d40 	.word	0x08018d40
 80090f8:	08018814 	.word	0x08018814

080090fc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910a:	2b00      	cmp	r3, #0
 800910c:	db01      	blt.n	8009112 <tcp_kill_prio+0x16>
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	e000      	b.n	8009114 <tcp_kill_prio+0x18>
 8009112:	237f      	movs	r3, #127	@ 0x7f
 8009114:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d034      	beq.n	8009186 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3b01      	subs	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800912a:	4b19      	ldr	r3, [pc, #100]	@ (8009190 <tcp_kill_prio+0x94>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	e01f      	b.n	8009172 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	7d5b      	ldrb	r3, [r3, #21]
 8009136:	7afa      	ldrb	r2, [r7, #11]
 8009138:	429a      	cmp	r2, r3
 800913a:	d80c      	bhi.n	8009156 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009140:	7afa      	ldrb	r2, [r7, #11]
 8009142:	429a      	cmp	r2, r3
 8009144:	d112      	bne.n	800916c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009146:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <tcp_kill_prio+0x98>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	429a      	cmp	r2, r3
 8009154:	d80a      	bhi.n	800916c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009156:	4b0f      	ldr	r3, [pc, #60]	@ (8009194 <tcp_kill_prio+0x98>)
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	7d5b      	ldrb	r3, [r3, #21]
 800916a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1dc      	bne.n	8009132 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800917e:	6938      	ldr	r0, [r7, #16]
 8009180:	f7ff f85e 	bl	8008240 <tcp_abort>
 8009184:	e000      	b.n	8009188 <tcp_kill_prio+0x8c>
    return;
 8009186:	bf00      	nop
  }
}
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20007fe0 	.word	0x20007fe0
 8009194:	20007fd4 	.word	0x20007fd4

08009198 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d009      	beq.n	80091bc <tcp_kill_state+0x24>
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	d006      	beq.n	80091bc <tcp_kill_state+0x24>
 80091ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <tcp_kill_state+0x80>)
 80091b0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80091b4:	4919      	ldr	r1, [pc, #100]	@ (800921c <tcp_kill_state+0x84>)
 80091b6:	481a      	ldr	r0, [pc, #104]	@ (8009220 <tcp_kill_state+0x88>)
 80091b8:	f00a fe38 	bl	8013e2c <iprintf>

  inactivity = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091c4:	4b17      	ldr	r3, [pc, #92]	@ (8009224 <tcp_kill_state+0x8c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e017      	b.n	80091fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	7d1b      	ldrb	r3, [r3, #20]
 80091d0:	79fa      	ldrb	r2, [r7, #7]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d10f      	bne.n	80091f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80091d6:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <tcp_kill_state+0x90>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d807      	bhi.n	80091f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80091e6:	4b10      	ldr	r3, [pc, #64]	@ (8009228 <tcp_kill_state+0x90>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1e4      	bne.n	80091cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009208:	2100      	movs	r1, #0
 800920a:	6938      	ldr	r0, [r7, #16]
 800920c:	f7fe ff5a 	bl	80080c4 <tcp_abandon>
  }
}
 8009210:	bf00      	nop
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	080187d0 	.word	0x080187d0
 800921c:	08018d5c 	.word	0x08018d5c
 8009220:	08018814 	.word	0x08018814
 8009224:	20007fe0 	.word	0x20007fe0
 8009228:	20007fd4 	.word	0x20007fd4

0800922c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800923a:	4b12      	ldr	r3, [pc, #72]	@ (8009284 <tcp_kill_timewait+0x58>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	e012      	b.n	8009268 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009242:	4b11      	ldr	r3, [pc, #68]	@ (8009288 <tcp_kill_timewait+0x5c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d807      	bhi.n	8009262 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009252:	4b0d      	ldr	r3, [pc, #52]	@ (8009288 <tcp_kill_timewait+0x5c>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e9      	bne.n	8009242 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009274:	68b8      	ldr	r0, [r7, #8]
 8009276:	f7fe ffe3 	bl	8008240 <tcp_abort>
  }
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	20007fe4 	.word	0x20007fe4
 8009288:	20007fd4 	.word	0x20007fd4

0800928c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009292:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <tcp_handle_closepend+0x48>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009298:	e014      	b.n	80092c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8b5b      	ldrh	r3, [r3, #26]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	8b5b      	ldrh	r3, [r3, #26]
 80092b0:	f023 0308 	bic.w	r3, r3, #8
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe fe6c 	bl	8007f98 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e7      	bne.n	800929a <tcp_handle_closepend+0xe>
  }
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20007fe0 	.word	0x20007fe0

080092d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092e2:	2001      	movs	r0, #1
 80092e4:	f7fd fabe 	bl	8006864 <memp_malloc>
 80092e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d126      	bne.n	800933e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80092f0:	f7ff ffcc 	bl	800928c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80092f4:	f7ff ff9a 	bl	800922c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092f8:	2001      	movs	r0, #1
 80092fa:	f7fd fab3 	bl	8006864 <memp_malloc>
 80092fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d11b      	bne.n	800933e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009306:	2009      	movs	r0, #9
 8009308:	f7ff ff46 	bl	8009198 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800930c:	2001      	movs	r0, #1
 800930e:	f7fd faa9 	bl	8006864 <memp_malloc>
 8009312:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d111      	bne.n	800933e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800931a:	2008      	movs	r0, #8
 800931c:	f7ff ff3c 	bl	8009198 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009320:	2001      	movs	r0, #1
 8009322:	f7fd fa9f 	bl	8006864 <memp_malloc>
 8009326:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d107      	bne.n	800933e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fee3 	bl	80090fc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009336:	2001      	movs	r0, #1
 8009338:	f7fd fa94 	bl	8006864 <memp_malloc>
 800933c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d03f      	beq.n	80093c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009344:	229c      	movs	r2, #156	@ 0x9c
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f00a fe10 	bl	8013f6e <memset>
    pcb->prio = prio;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	79fa      	ldrb	r2, [r7, #7]
 8009352:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800935a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009364:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	22ff      	movs	r2, #255	@ 0xff
 8009372:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800937a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2206      	movs	r2, #6
 8009380:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2206      	movs	r2, #6
 8009388:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009390:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800939a:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <tcp_alloc+0xf8>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <tcp_alloc+0xfc>)
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80093b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4a08      	ldr	r2, [pc, #32]	@ (80093d8 <tcp_alloc+0x100>)
 80093b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4a07      	ldr	r2, [pc, #28]	@ (80093dc <tcp_alloc+0x104>)
 80093c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80093c4:	68fb      	ldr	r3, [r7, #12]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20007fd4 	.word	0x20007fd4
 80093d4:	20007fea 	.word	0x20007fea
 80093d8:	08009091 	.word	0x08009091
 80093dc:	006ddd00 	.word	0x006ddd00

080093e0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80093ea:	2040      	movs	r0, #64	@ 0x40
 80093ec:	f7ff ff74 	bl	80092d8 <tcp_alloc>
 80093f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80093f2:	68fb      	ldr	r3, [r7, #12]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	611a      	str	r2, [r3, #16]
  }
}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
	...

08009420 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00e      	beq.n	800944e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	7d1b      	ldrb	r3, [r3, #20]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d106      	bne.n	8009446 <tcp_recv+0x26>
 8009438:	4b07      	ldr	r3, [pc, #28]	@ (8009458 <tcp_recv+0x38>)
 800943a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800943e:	4907      	ldr	r1, [pc, #28]	@ (800945c <tcp_recv+0x3c>)
 8009440:	4807      	ldr	r0, [pc, #28]	@ (8009460 <tcp_recv+0x40>)
 8009442:	f00a fcf3 	bl	8013e2c <iprintf>
    pcb->recv = recv;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	080187d0 	.word	0x080187d0
 800945c:	08018d6c 	.word	0x08018d6c
 8009460:	08018814 	.word	0x08018814

08009464 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00e      	beq.n	8009492 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7d1b      	ldrb	r3, [r3, #20]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d106      	bne.n	800948a <tcp_sent+0x26>
 800947c:	4b07      	ldr	r3, [pc, #28]	@ (800949c <tcp_sent+0x38>)
 800947e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8009482:	4907      	ldr	r1, [pc, #28]	@ (80094a0 <tcp_sent+0x3c>)
 8009484:	4807      	ldr	r0, [pc, #28]	@ (80094a4 <tcp_sent+0x40>)
 8009486:	f00a fcd1 	bl	8013e2c <iprintf>
    pcb->sent = sent;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	080187d0 	.word	0x080187d0
 80094a0:	08018d94 	.word	0x08018d94
 80094a4:	08018814 	.word	0x08018814

080094a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00e      	beq.n	80094d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	7d1b      	ldrb	r3, [r3, #20]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d106      	bne.n	80094ce <tcp_err+0x26>
 80094c0:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <tcp_err+0x38>)
 80094c2:	f640 020d 	movw	r2, #2061	@ 0x80d
 80094c6:	4907      	ldr	r1, [pc, #28]	@ (80094e4 <tcp_err+0x3c>)
 80094c8:	4807      	ldr	r0, [pc, #28]	@ (80094e8 <tcp_err+0x40>)
 80094ca:	f00a fcaf 	bl	8013e2c <iprintf>
    pcb->errf = err;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	080187d0 	.word	0x080187d0
 80094e4:	08018dbc 	.word	0x08018dbc
 80094e8:	08018814 	.word	0x08018814

080094ec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d107      	bne.n	8009510 <tcp_poll+0x24>
 8009500:	4b0e      	ldr	r3, [pc, #56]	@ (800953c <tcp_poll+0x50>)
 8009502:	f640 023d 	movw	r2, #2109	@ 0x83d
 8009506:	490e      	ldr	r1, [pc, #56]	@ (8009540 <tcp_poll+0x54>)
 8009508:	480e      	ldr	r0, [pc, #56]	@ (8009544 <tcp_poll+0x58>)
 800950a:	f00a fc8f 	bl	8013e2c <iprintf>
 800950e:	e011      	b.n	8009534 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	7d1b      	ldrb	r3, [r3, #20]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d106      	bne.n	8009526 <tcp_poll+0x3a>
 8009518:	4b08      	ldr	r3, [pc, #32]	@ (800953c <tcp_poll+0x50>)
 800951a:	f640 023e 	movw	r2, #2110	@ 0x83e
 800951e:	490a      	ldr	r1, [pc, #40]	@ (8009548 <tcp_poll+0x5c>)
 8009520:	4808      	ldr	r0, [pc, #32]	@ (8009544 <tcp_poll+0x58>)
 8009522:	f00a fc83 	bl	8013e2c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	79fa      	ldrb	r2, [r7, #7]
 8009532:	775a      	strb	r2, [r3, #29]
}
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	080187d0 	.word	0x080187d0
 8009540:	08018de4 	.word	0x08018de4
 8009544:	08018814 	.word	0x08018814
 8009548:	08018dfc 	.word	0x08018dfc

0800954c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d107      	bne.n	800956a <tcp_pcb_purge+0x1e>
 800955a:	4b21      	ldr	r3, [pc, #132]	@ (80095e0 <tcp_pcb_purge+0x94>)
 800955c:	f640 0251 	movw	r2, #2129	@ 0x851
 8009560:	4920      	ldr	r1, [pc, #128]	@ (80095e4 <tcp_pcb_purge+0x98>)
 8009562:	4821      	ldr	r0, [pc, #132]	@ (80095e8 <tcp_pcb_purge+0x9c>)
 8009564:	f00a fc62 	bl	8013e2c <iprintf>
 8009568:	e037      	b.n	80095da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7d1b      	ldrb	r3, [r3, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d033      	beq.n	80095da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009576:	2b0a      	cmp	r3, #10
 8009578:	d02f      	beq.n	80095da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800957e:	2b01      	cmp	r3, #1
 8009580:	d02b      	beq.n	80095da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009586:	2b00      	cmp	r3, #0
 8009588:	d007      	beq.n	800959a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe f85a 	bl	8007648 <pbuf_free>
      pcb->refused_data = NULL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f986 	bl	80098b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ae:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fd11 	bl	8008fdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fd0c 	bl	8008fdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	080187d0 	.word	0x080187d0
 80095e4:	08018e1c 	.word	0x08018e1c
 80095e8:	08018814 	.word	0x08018814

080095ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <tcp_pcb_remove+0x1e>
 80095fc:	4b3e      	ldr	r3, [pc, #248]	@ (80096f8 <tcp_pcb_remove+0x10c>)
 80095fe:	f640 0283 	movw	r2, #2179	@ 0x883
 8009602:	493e      	ldr	r1, [pc, #248]	@ (80096fc <tcp_pcb_remove+0x110>)
 8009604:	483e      	ldr	r0, [pc, #248]	@ (8009700 <tcp_pcb_remove+0x114>)
 8009606:	f00a fc11 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <tcp_pcb_remove+0x32>
 8009610:	4b39      	ldr	r3, [pc, #228]	@ (80096f8 <tcp_pcb_remove+0x10c>)
 8009612:	f640 0284 	movw	r2, #2180	@ 0x884
 8009616:	493b      	ldr	r1, [pc, #236]	@ (8009704 <tcp_pcb_remove+0x118>)
 8009618:	4839      	ldr	r0, [pc, #228]	@ (8009700 <tcp_pcb_remove+0x114>)
 800961a:	f00a fc07 	bl	8013e2c <iprintf>

  TCP_RMV(pcblist, pcb);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d105      	bne.n	8009634 <tcp_pcb_remove+0x48>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68da      	ldr	r2, [r3, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e013      	b.n	800965c <tcp_pcb_remove+0x70>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e00c      	b.n	8009656 <tcp_pcb_remove+0x6a>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d104      	bne.n	8009650 <tcp_pcb_remove+0x64>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	60da      	str	r2, [r3, #12]
 800964e:	e005      	b.n	800965c <tcp_pcb_remove+0x70>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1ef      	bne.n	800963c <tcp_pcb_remove+0x50>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2200      	movs	r2, #0
 8009660:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009662:	6838      	ldr	r0, [r7, #0]
 8009664:	f7ff ff72 	bl	800954c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	7d1b      	ldrb	r3, [r3, #20]
 800966c:	2b0a      	cmp	r3, #10
 800966e:	d013      	beq.n	8009698 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009674:	2b01      	cmp	r3, #1
 8009676:	d00f      	beq.n	8009698 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	8b5b      	ldrh	r3, [r3, #26]
 800967c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	8b5b      	ldrh	r3, [r3, #26]
 8009688:	f043 0302 	orr.w	r3, r3, #2
 800968c:	b29a      	uxth	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009692:	6838      	ldr	r0, [r7, #0]
 8009694:	f003 fbc0 	bl	800ce18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	7d1b      	ldrb	r3, [r3, #20]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d020      	beq.n	80096e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d006      	beq.n	80096b6 <tcp_pcb_remove+0xca>
 80096a8:	4b13      	ldr	r3, [pc, #76]	@ (80096f8 <tcp_pcb_remove+0x10c>)
 80096aa:	f640 0293 	movw	r2, #2195	@ 0x893
 80096ae:	4916      	ldr	r1, [pc, #88]	@ (8009708 <tcp_pcb_remove+0x11c>)
 80096b0:	4813      	ldr	r0, [pc, #76]	@ (8009700 <tcp_pcb_remove+0x114>)
 80096b2:	f00a fbbb 	bl	8013e2c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <tcp_pcb_remove+0xe0>
 80096be:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <tcp_pcb_remove+0x10c>)
 80096c0:	f640 0294 	movw	r2, #2196	@ 0x894
 80096c4:	4911      	ldr	r1, [pc, #68]	@ (800970c <tcp_pcb_remove+0x120>)
 80096c6:	480e      	ldr	r0, [pc, #56]	@ (8009700 <tcp_pcb_remove+0x114>)
 80096c8:	f00a fbb0 	bl	8013e2c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d006      	beq.n	80096e2 <tcp_pcb_remove+0xf6>
 80096d4:	4b08      	ldr	r3, [pc, #32]	@ (80096f8 <tcp_pcb_remove+0x10c>)
 80096d6:	f640 0296 	movw	r2, #2198	@ 0x896
 80096da:	490d      	ldr	r1, [pc, #52]	@ (8009710 <tcp_pcb_remove+0x124>)
 80096dc:	4808      	ldr	r0, [pc, #32]	@ (8009700 <tcp_pcb_remove+0x114>)
 80096de:	f00a fba5 	bl	8013e2c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2200      	movs	r2, #0
 80096e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	080187d0 	.word	0x080187d0
 80096fc:	08018e38 	.word	0x08018e38
 8009700:	08018814 	.word	0x08018814
 8009704:	08018e54 	.word	0x08018e54
 8009708:	08018e74 	.word	0x08018e74
 800970c:	08018e8c 	.word	0x08018e8c
 8009710:	08018ea8 	.word	0x08018ea8

08009714 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <tcp_next_iss+0x1c>
 8009722:	4b0a      	ldr	r3, [pc, #40]	@ (800974c <tcp_next_iss+0x38>)
 8009724:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009728:	4909      	ldr	r1, [pc, #36]	@ (8009750 <tcp_next_iss+0x3c>)
 800972a:	480a      	ldr	r0, [pc, #40]	@ (8009754 <tcp_next_iss+0x40>)
 800972c:	f00a fb7e 	bl	8013e2c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009730:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <tcp_next_iss+0x44>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	4b09      	ldr	r3, [pc, #36]	@ (800975c <tcp_next_iss+0x48>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4413      	add	r3, r2
 800973a:	4a07      	ldr	r2, [pc, #28]	@ (8009758 <tcp_next_iss+0x44>)
 800973c:	6013      	str	r3, [r2, #0]
  return iss;
 800973e:	4b06      	ldr	r3, [pc, #24]	@ (8009758 <tcp_next_iss+0x44>)
 8009740:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	080187d0 	.word	0x080187d0
 8009750:	08018ec0 	.word	0x08018ec0
 8009754:	08018814 	.word	0x08018814
 8009758:	20000034 	.word	0x20000034
 800975c:	20007fd4 	.word	0x20007fd4

08009760 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d106      	bne.n	8009782 <tcp_eff_send_mss_netif+0x22>
 8009774:	4b14      	ldr	r3, [pc, #80]	@ (80097c8 <tcp_eff_send_mss_netif+0x68>)
 8009776:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800977a:	4914      	ldr	r1, [pc, #80]	@ (80097cc <tcp_eff_send_mss_netif+0x6c>)
 800977c:	4814      	ldr	r0, [pc, #80]	@ (80097d0 <tcp_eff_send_mss_netif+0x70>)
 800977e:	f00a fb55 	bl	8013e2c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009788:	89fb      	ldrh	r3, [r7, #14]
 800978a:	e019      	b.n	80097c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009790:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009792:	8afb      	ldrh	r3, [r7, #22]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d012      	beq.n	80097be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009798:	2328      	movs	r3, #40	@ 0x28
 800979a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800979c:	8afa      	ldrh	r2, [r7, #22]
 800979e:	8abb      	ldrh	r3, [r7, #20]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d904      	bls.n	80097ae <tcp_eff_send_mss_netif+0x4e>
 80097a4:	8afa      	ldrh	r2, [r7, #22]
 80097a6:	8abb      	ldrh	r3, [r7, #20]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	e000      	b.n	80097b0 <tcp_eff_send_mss_netif+0x50>
 80097ae:	2300      	movs	r3, #0
 80097b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80097b2:	8a7a      	ldrh	r2, [r7, #18]
 80097b4:	89fb      	ldrh	r3, [r7, #14]
 80097b6:	4293      	cmp	r3, r2
 80097b8:	bf28      	it	cs
 80097ba:	4613      	movcs	r3, r2
 80097bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80097be:	89fb      	ldrh	r3, [r7, #14]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	080187d0 	.word	0x080187d0
 80097cc:	08018edc 	.word	0x08018edc
 80097d0:	08018814 	.word	0x08018814

080097d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d119      	bne.n	800981c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80097e8:	4b10      	ldr	r3, [pc, #64]	@ (800982c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80097ea:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80097ee:	4910      	ldr	r1, [pc, #64]	@ (8009830 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80097f0:	4810      	ldr	r0, [pc, #64]	@ (8009834 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80097f2:	f00a fb1b 	bl	8013e2c <iprintf>

  while (pcb != NULL) {
 80097f6:	e011      	b.n	800981c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d108      	bne.n	8009816 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7fe fd18 	bl	8008240 <tcp_abort>
      pcb = next;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	e002      	b.n	800981c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1ea      	bne.n	80097f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	080187d0 	.word	0x080187d0
 8009830:	08018f04 	.word	0x08018f04
 8009834:	08018814 	.word	0x08018814

08009838 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d02a      	beq.n	800989e <tcp_netif_ip_addr_changed+0x66>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d026      	beq.n	800989e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009850:	4b15      	ldr	r3, [pc, #84]	@ (80098a8 <tcp_netif_ip_addr_changed+0x70>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ffbc 	bl	80097d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800985c:	4b13      	ldr	r3, [pc, #76]	@ (80098ac <tcp_netif_ip_addr_changed+0x74>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff ffb6 	bl	80097d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d017      	beq.n	800989e <tcp_netif_ip_addr_changed+0x66>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d013      	beq.n	800989e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009876:	4b0e      	ldr	r3, [pc, #56]	@ (80098b0 <tcp_netif_ip_addr_changed+0x78>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	e00c      	b.n	8009898 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d103      	bne.n	8009892 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1ef      	bne.n	800987e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800989e:	bf00      	nop
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20007fe0 	.word	0x20007fe0
 80098ac:	20007fd8 	.word	0x20007fd8
 80098b0:	20007fdc 	.word	0x20007fdc

080098b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff fb87 	bl	8008fdc <tcp_segs_free>
    pcb->ooseq = NULL;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b08d      	sub	sp, #52	@ 0x34
 80098e0:	af04      	add	r7, sp, #16
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <tcp_input+0x1c>
 80098ec:	4b9b      	ldr	r3, [pc, #620]	@ (8009b5c <tcp_input+0x280>)
 80098ee:	2283      	movs	r2, #131	@ 0x83
 80098f0:	499b      	ldr	r1, [pc, #620]	@ (8009b60 <tcp_input+0x284>)
 80098f2:	489c      	ldr	r0, [pc, #624]	@ (8009b64 <tcp_input+0x288>)
 80098f4:	f00a fa9a 	bl	8013e2c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a9a      	ldr	r2, [pc, #616]	@ (8009b68 <tcp_input+0x28c>)
 80098fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	895b      	ldrh	r3, [r3, #10]
 8009904:	2b13      	cmp	r3, #19
 8009906:	f240 83d1 	bls.w	800a0ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800990a:	4b98      	ldr	r3, [pc, #608]	@ (8009b6c <tcp_input+0x290>)
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4a97      	ldr	r2, [pc, #604]	@ (8009b6c <tcp_input+0x290>)
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f008 fa53 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 83c7 	bne.w	800a0b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009922:	4b92      	ldr	r3, [pc, #584]	@ (8009b6c <tcp_input+0x290>)
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800992a:	2be0      	cmp	r3, #224	@ 0xe0
 800992c:	f000 83c0 	beq.w	800a0b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009930:	4b8d      	ldr	r3, [pc, #564]	@ (8009b68 <tcp_input+0x28c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	b29b      	uxth	r3, r3
 8009938:	4618      	mov	r0, r3
 800993a:	f7fc faf7 	bl	8005f2c <lwip_htons>
 800993e:	4603      	mov	r3, r0
 8009940:	0b1b      	lsrs	r3, r3, #12
 8009942:	b29b      	uxth	r3, r3
 8009944:	b2db      	uxtb	r3, r3
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800994a:	7cbb      	ldrb	r3, [r7, #18]
 800994c:	2b13      	cmp	r3, #19
 800994e:	f240 83b1 	bls.w	800a0b4 <tcp_input+0x7d8>
 8009952:	7cbb      	ldrb	r3, [r7, #18]
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	891b      	ldrh	r3, [r3, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	f200 83aa 	bhi.w	800a0b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009960:	7cbb      	ldrb	r3, [r7, #18]
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b14      	subs	r3, #20
 8009966:	b29a      	uxth	r2, r3
 8009968:	4b81      	ldr	r3, [pc, #516]	@ (8009b70 <tcp_input+0x294>)
 800996a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800996c:	4b81      	ldr	r3, [pc, #516]	@ (8009b74 <tcp_input+0x298>)
 800996e:	2200      	movs	r2, #0
 8009970:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	895a      	ldrh	r2, [r3, #10]
 8009976:	7cbb      	ldrb	r3, [r7, #18]
 8009978:	b29b      	uxth	r3, r3
 800997a:	429a      	cmp	r2, r3
 800997c:	d309      	bcc.n	8009992 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800997e:	4b7c      	ldr	r3, [pc, #496]	@ (8009b70 <tcp_input+0x294>)
 8009980:	881a      	ldrh	r2, [r3, #0]
 8009982:	4b7d      	ldr	r3, [pc, #500]	@ (8009b78 <tcp_input+0x29c>)
 8009984:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009986:	7cbb      	ldrb	r3, [r7, #18]
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fd fdd6 	bl	800753c <pbuf_remove_header>
 8009990:	e04e      	b.n	8009a30 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d105      	bne.n	80099a6 <tcp_input+0xca>
 800999a:	4b70      	ldr	r3, [pc, #448]	@ (8009b5c <tcp_input+0x280>)
 800999c:	22c2      	movs	r2, #194	@ 0xc2
 800999e:	4977      	ldr	r1, [pc, #476]	@ (8009b7c <tcp_input+0x2a0>)
 80099a0:	4870      	ldr	r0, [pc, #448]	@ (8009b64 <tcp_input+0x288>)
 80099a2:	f00a fa43 	bl	8013e2c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80099a6:	2114      	movs	r1, #20
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7fd fdc7 	bl	800753c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	895a      	ldrh	r2, [r3, #10]
 80099b2:	4b71      	ldr	r3, [pc, #452]	@ (8009b78 <tcp_input+0x29c>)
 80099b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80099b6:	4b6e      	ldr	r3, [pc, #440]	@ (8009b70 <tcp_input+0x294>)
 80099b8:	881a      	ldrh	r2, [r3, #0]
 80099ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009b78 <tcp_input+0x29c>)
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80099c2:	4b6d      	ldr	r3, [pc, #436]	@ (8009b78 <tcp_input+0x29c>)
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fd fdb7 	bl	800753c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	895b      	ldrh	r3, [r3, #10]
 80099d4:	8a3a      	ldrh	r2, [r7, #16]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	f200 836e 	bhi.w	800a0b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	4a64      	ldr	r2, [pc, #400]	@ (8009b74 <tcp_input+0x298>)
 80099e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	8a3a      	ldrh	r2, [r7, #16]
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fd fda4 	bl	800753c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	891a      	ldrh	r2, [r3, #8]
 80099f8:	8a3b      	ldrh	r3, [r7, #16]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	895b      	ldrh	r3, [r3, #10]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <tcp_input+0x13a>
 8009a0a:	4b54      	ldr	r3, [pc, #336]	@ (8009b5c <tcp_input+0x280>)
 8009a0c:	22df      	movs	r2, #223	@ 0xdf
 8009a0e:	495c      	ldr	r1, [pc, #368]	@ (8009b80 <tcp_input+0x2a4>)
 8009a10:	4854      	ldr	r0, [pc, #336]	@ (8009b64 <tcp_input+0x288>)
 8009a12:	f00a fa0b 	bl	8013e2c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	891a      	ldrh	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	891b      	ldrh	r3, [r3, #8]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d005      	beq.n	8009a30 <tcp_input+0x154>
 8009a24:	4b4d      	ldr	r3, [pc, #308]	@ (8009b5c <tcp_input+0x280>)
 8009a26:	22e0      	movs	r2, #224	@ 0xe0
 8009a28:	4956      	ldr	r1, [pc, #344]	@ (8009b84 <tcp_input+0x2a8>)
 8009a2a:	484e      	ldr	r0, [pc, #312]	@ (8009b64 <tcp_input+0x288>)
 8009a2c:	f00a f9fe 	bl	8013e2c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009a30:	4b4d      	ldr	r3, [pc, #308]	@ (8009b68 <tcp_input+0x28c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	4a4b      	ldr	r2, [pc, #300]	@ (8009b68 <tcp_input+0x28c>)
 8009a3a:	6814      	ldr	r4, [r2, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fc fa75 	bl	8005f2c <lwip_htons>
 8009a42:	4603      	mov	r3, r0
 8009a44:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009a46:	4b48      	ldr	r3, [pc, #288]	@ (8009b68 <tcp_input+0x28c>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	885b      	ldrh	r3, [r3, #2]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	4a46      	ldr	r2, [pc, #280]	@ (8009b68 <tcp_input+0x28c>)
 8009a50:	6814      	ldr	r4, [r2, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fc fa6a 	bl	8005f2c <lwip_htons>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009a5c:	4b42      	ldr	r3, [pc, #264]	@ (8009b68 <tcp_input+0x28c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4a41      	ldr	r2, [pc, #260]	@ (8009b68 <tcp_input+0x28c>)
 8009a64:	6814      	ldr	r4, [r2, #0]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fc fa76 	bl	8005f58 <lwip_htonl>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	6863      	ldr	r3, [r4, #4]
 8009a72:	4a45      	ldr	r2, [pc, #276]	@ (8009b88 <tcp_input+0x2ac>)
 8009a74:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009a76:	4b3c      	ldr	r3, [pc, #240]	@ (8009b68 <tcp_input+0x28c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8009b68 <tcp_input+0x28c>)
 8009a7e:	6814      	ldr	r4, [r2, #0]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fc fa69 	bl	8005f58 <lwip_htonl>
 8009a86:	4603      	mov	r3, r0
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009b8c <tcp_input+0x2b0>)
 8009a8e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009a90:	4b35      	ldr	r3, [pc, #212]	@ (8009b68 <tcp_input+0x28c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	89db      	ldrh	r3, [r3, #14]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	4a33      	ldr	r2, [pc, #204]	@ (8009b68 <tcp_input+0x28c>)
 8009a9a:	6814      	ldr	r4, [r2, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fc fa45 	bl	8005f2c <lwip_htons>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009aa6:	4b30      	ldr	r3, [pc, #192]	@ (8009b68 <tcp_input+0x28c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	899b      	ldrh	r3, [r3, #12]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fc fa3c 	bl	8005f2c <lwip_htons>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	4b34      	ldr	r3, [pc, #208]	@ (8009b90 <tcp_input+0x2b4>)
 8009ac0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	891a      	ldrh	r2, [r3, #8]
 8009ac6:	4b33      	ldr	r3, [pc, #204]	@ (8009b94 <tcp_input+0x2b8>)
 8009ac8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009aca:	4b31      	ldr	r3, [pc, #196]	@ (8009b90 <tcp_input+0x2b4>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00c      	beq.n	8009af0 <tcp_input+0x214>
    tcplen++;
 8009ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b94 <tcp_input+0x2b8>)
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	4b2d      	ldr	r3, [pc, #180]	@ (8009b94 <tcp_input+0x2b8>)
 8009ae0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	891a      	ldrh	r2, [r3, #8]
 8009ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8009b94 <tcp_input+0x2b8>)
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	f200 82e6 	bhi.w	800a0bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009af0:	2300      	movs	r3, #0
 8009af2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009af4:	4b28      	ldr	r3, [pc, #160]	@ (8009b98 <tcp_input+0x2bc>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	61fb      	str	r3, [r7, #28]
 8009afa:	e09d      	b.n	8009c38 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <tcp_input+0x234>
 8009b04:	4b15      	ldr	r3, [pc, #84]	@ (8009b5c <tcp_input+0x280>)
 8009b06:	22fb      	movs	r2, #251	@ 0xfb
 8009b08:	4924      	ldr	r1, [pc, #144]	@ (8009b9c <tcp_input+0x2c0>)
 8009b0a:	4816      	ldr	r0, [pc, #88]	@ (8009b64 <tcp_input+0x288>)
 8009b0c:	f00a f98e 	bl	8013e2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	7d1b      	ldrb	r3, [r3, #20]
 8009b14:	2b0a      	cmp	r3, #10
 8009b16:	d105      	bne.n	8009b24 <tcp_input+0x248>
 8009b18:	4b10      	ldr	r3, [pc, #64]	@ (8009b5c <tcp_input+0x280>)
 8009b1a:	22fc      	movs	r2, #252	@ 0xfc
 8009b1c:	4920      	ldr	r1, [pc, #128]	@ (8009ba0 <tcp_input+0x2c4>)
 8009b1e:	4811      	ldr	r0, [pc, #68]	@ (8009b64 <tcp_input+0x288>)
 8009b20:	f00a f984 	bl	8013e2c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	7d1b      	ldrb	r3, [r3, #20]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d105      	bne.n	8009b38 <tcp_input+0x25c>
 8009b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009b5c <tcp_input+0x280>)
 8009b2e:	22fd      	movs	r2, #253	@ 0xfd
 8009b30:	491c      	ldr	r1, [pc, #112]	@ (8009ba4 <tcp_input+0x2c8>)
 8009b32:	480c      	ldr	r0, [pc, #48]	@ (8009b64 <tcp_input+0x288>)
 8009b34:	f00a f97a 	bl	8013e2c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	7a1b      	ldrb	r3, [r3, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d033      	beq.n	8009ba8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	7a1a      	ldrb	r2, [r3, #8]
 8009b44:	4b09      	ldr	r3, [pc, #36]	@ (8009b6c <tcp_input+0x290>)
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d029      	beq.n	8009ba8 <tcp_input+0x2cc>
      prev = pcb;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	61bb      	str	r3, [r7, #24]
      continue;
 8009b58:	e06b      	b.n	8009c32 <tcp_input+0x356>
 8009b5a:	bf00      	nop
 8009b5c:	08018f38 	.word	0x08018f38
 8009b60:	08018f6c 	.word	0x08018f6c
 8009b64:	08018f84 	.word	0x08018f84
 8009b68:	20007ffc 	.word	0x20007ffc
 8009b6c:	20004f98 	.word	0x20004f98
 8009b70:	20008000 	.word	0x20008000
 8009b74:	20008004 	.word	0x20008004
 8009b78:	20008002 	.word	0x20008002
 8009b7c:	08018fac 	.word	0x08018fac
 8009b80:	08018fbc 	.word	0x08018fbc
 8009b84:	08018fc8 	.word	0x08018fc8
 8009b88:	2000800c 	.word	0x2000800c
 8009b8c:	20008010 	.word	0x20008010
 8009b90:	20008018 	.word	0x20008018
 8009b94:	20008016 	.word	0x20008016
 8009b98:	20007fe0 	.word	0x20007fe0
 8009b9c:	08018fe8 	.word	0x08018fe8
 8009ba0:	08019010 	.word	0x08019010
 8009ba4:	0801903c 	.word	0x0801903c
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	8b1a      	ldrh	r2, [r3, #24]
 8009bac:	4b72      	ldr	r3, [pc, #456]	@ (8009d78 <tcp_input+0x49c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d13a      	bne.n	8009c2e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	8ada      	ldrh	r2, [r3, #22]
 8009bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8009d78 <tcp_input+0x49c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	885b      	ldrh	r3, [r3, #2]
 8009bc2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d132      	bne.n	8009c2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8009d7c <tcp_input+0x4a0>)
 8009bce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d12c      	bne.n	8009c2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	4b68      	ldr	r3, [pc, #416]	@ (8009d7c <tcp_input+0x4a0>)
 8009bda:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d126      	bne.n	8009c2e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	69fa      	ldr	r2, [r7, #28]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d106      	bne.n	8009bf8 <tcp_input+0x31c>
 8009bea:	4b65      	ldr	r3, [pc, #404]	@ (8009d80 <tcp_input+0x4a4>)
 8009bec:	f240 120d 	movw	r2, #269	@ 0x10d
 8009bf0:	4964      	ldr	r1, [pc, #400]	@ (8009d84 <tcp_input+0x4a8>)
 8009bf2:	4865      	ldr	r0, [pc, #404]	@ (8009d88 <tcp_input+0x4ac>)
 8009bf4:	f00a f91a 	bl	8013e2c <iprintf>
      if (prev != NULL) {
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <tcp_input+0x338>
        prev->next = pcb->next;
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	68da      	ldr	r2, [r3, #12]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009c06:	4b61      	ldr	r3, [pc, #388]	@ (8009d8c <tcp_input+0x4b0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8009d8c <tcp_input+0x4b0>)
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d111      	bne.n	8009c42 <tcp_input+0x366>
 8009c1e:	4b58      	ldr	r3, [pc, #352]	@ (8009d80 <tcp_input+0x4a4>)
 8009c20:	f240 1215 	movw	r2, #277	@ 0x115
 8009c24:	495a      	ldr	r1, [pc, #360]	@ (8009d90 <tcp_input+0x4b4>)
 8009c26:	4858      	ldr	r0, [pc, #352]	@ (8009d88 <tcp_input+0x4ac>)
 8009c28:	f00a f900 	bl	8013e2c <iprintf>
      break;
 8009c2c:	e009      	b.n	8009c42 <tcp_input+0x366>
    }
    prev = pcb;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	61fb      	str	r3, [r7, #28]
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f47f af5e 	bne.w	8009afc <tcp_input+0x220>
 8009c40:	e000      	b.n	8009c44 <tcp_input+0x368>
      break;
 8009c42:	bf00      	nop
  }

  if (pcb == NULL) {
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 80aa 	bne.w	8009da0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c4c:	4b51      	ldr	r3, [pc, #324]	@ (8009d94 <tcp_input+0x4b8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	e03f      	b.n	8009cd4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	7d1b      	ldrb	r3, [r3, #20]
 8009c58:	2b0a      	cmp	r3, #10
 8009c5a:	d006      	beq.n	8009c6a <tcp_input+0x38e>
 8009c5c:	4b48      	ldr	r3, [pc, #288]	@ (8009d80 <tcp_input+0x4a4>)
 8009c5e:	f240 121f 	movw	r2, #287	@ 0x11f
 8009c62:	494d      	ldr	r1, [pc, #308]	@ (8009d98 <tcp_input+0x4bc>)
 8009c64:	4848      	ldr	r0, [pc, #288]	@ (8009d88 <tcp_input+0x4ac>)
 8009c66:	f00a f8e1 	bl	8013e2c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	7a1b      	ldrb	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d009      	beq.n	8009c86 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	7a1a      	ldrb	r2, [r3, #8]
 8009c76:	4b41      	ldr	r3, [pc, #260]	@ (8009d7c <tcp_input+0x4a0>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c7e:	3301      	adds	r3, #1
 8009c80:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d122      	bne.n	8009ccc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	8b1a      	ldrh	r2, [r3, #24]
 8009c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d78 <tcp_input+0x49c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d11b      	bne.n	8009cce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	8ada      	ldrh	r2, [r3, #22]
 8009c9a:	4b37      	ldr	r3, [pc, #220]	@ (8009d78 <tcp_input+0x49c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	885b      	ldrh	r3, [r3, #2]
 8009ca0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d113      	bne.n	8009cce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	4b34      	ldr	r3, [pc, #208]	@ (8009d7c <tcp_input+0x4a0>)
 8009cac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d10d      	bne.n	8009cce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	4b31      	ldr	r3, [pc, #196]	@ (8009d7c <tcp_input+0x4a0>)
 8009cb8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d107      	bne.n	8009cce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009cbe:	69f8      	ldr	r0, [r7, #28]
 8009cc0:	f000 fb56 	bl	800a370 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7fd fcbf 	bl	8007648 <pbuf_free>
        return;
 8009cca:	e1fd      	b.n	800a0c8 <tcp_input+0x7ec>
        continue;
 8009ccc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	61fb      	str	r3, [r7, #28]
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1bc      	bne.n	8009c54 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cde:	4b2f      	ldr	r3, [pc, #188]	@ (8009d9c <tcp_input+0x4c0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	617b      	str	r3, [r7, #20]
 8009ce4:	e02a      	b.n	8009d3c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	7a1b      	ldrb	r3, [r3, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00c      	beq.n	8009d08 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	7a1a      	ldrb	r2, [r3, #8]
 8009cf2:	4b22      	ldr	r3, [pc, #136]	@ (8009d7c <tcp_input+0x4a0>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d002      	beq.n	8009d08 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	61bb      	str	r3, [r7, #24]
        continue;
 8009d06:	e016      	b.n	8009d36 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	8ada      	ldrh	r2, [r3, #22]
 8009d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d78 <tcp_input+0x49c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	885b      	ldrh	r3, [r3, #2]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d10c      	bne.n	8009d32 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	4b17      	ldr	r3, [pc, #92]	@ (8009d7c <tcp_input+0x4a0>)
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d00f      	beq.n	8009d44 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00d      	beq.n	8009d46 <tcp_input+0x46a>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1d1      	bne.n	8009ce6 <tcp_input+0x40a>
 8009d42:	e000      	b.n	8009d46 <tcp_input+0x46a>
            break;
 8009d44:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d029      	beq.n	8009da0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009d5a:	4b10      	ldr	r3, [pc, #64]	@ (8009d9c <tcp_input+0x4c0>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009d62:	4a0e      	ldr	r2, [pc, #56]	@ (8009d9c <tcp_input+0x4c0>)
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009d68:	6978      	ldr	r0, [r7, #20]
 8009d6a:	f000 fa03 	bl	800a174 <tcp_listen_input>
      }
      pbuf_free(p);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fd fc6a 	bl	8007648 <pbuf_free>
      return;
 8009d74:	e1a8      	b.n	800a0c8 <tcp_input+0x7ec>
 8009d76:	bf00      	nop
 8009d78:	20007ffc 	.word	0x20007ffc
 8009d7c:	20004f98 	.word	0x20004f98
 8009d80:	08018f38 	.word	0x08018f38
 8009d84:	08019064 	.word	0x08019064
 8009d88:	08018f84 	.word	0x08018f84
 8009d8c:	20007fe0 	.word	0x20007fe0
 8009d90:	08019090 	.word	0x08019090
 8009d94:	20007fe4 	.word	0x20007fe4
 8009d98:	080190bc 	.word	0x080190bc
 8009d9c:	20007fdc 	.word	0x20007fdc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 8158 	beq.w	800a058 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009da8:	4b95      	ldr	r3, [pc, #596]	@ (800a000 <tcp_input+0x724>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	891a      	ldrh	r2, [r3, #8]
 8009db2:	4b93      	ldr	r3, [pc, #588]	@ (800a000 <tcp_input+0x724>)
 8009db4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009db6:	4a92      	ldr	r2, [pc, #584]	@ (800a000 <tcp_input+0x724>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009dbc:	4b91      	ldr	r3, [pc, #580]	@ (800a004 <tcp_input+0x728>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a8f      	ldr	r2, [pc, #572]	@ (800a000 <tcp_input+0x724>)
 8009dc2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009dc4:	4b90      	ldr	r3, [pc, #576]	@ (800a008 <tcp_input+0x72c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009dca:	4b90      	ldr	r3, [pc, #576]	@ (800a00c <tcp_input+0x730>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009dd0:	4b8f      	ldr	r3, [pc, #572]	@ (800a010 <tcp_input+0x734>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009dd6:	4b8f      	ldr	r3, [pc, #572]	@ (800a014 <tcp_input+0x738>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0308 	and.w	r3, r3, #8
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d006      	beq.n	8009df0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7b5b      	ldrb	r3, [r3, #13]
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d017      	beq.n	8009e28 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009df8:	69f8      	ldr	r0, [r7, #28]
 8009dfa:	f7ff f873 	bl	8008ee4 <tcp_process_refused_data>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f113 0f0d 	cmn.w	r3, #13
 8009e04:	d007      	beq.n	8009e16 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00c      	beq.n	8009e28 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009e0e:	4b82      	ldr	r3, [pc, #520]	@ (800a018 <tcp_input+0x73c>)
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d008      	beq.n	8009e28 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 80e3 	bne.w	8009fe6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009e20:	69f8      	ldr	r0, [r7, #28]
 8009e22:	f003 fdfd 	bl	800da20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009e26:	e0de      	b.n	8009fe6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009e28:	4a7c      	ldr	r2, [pc, #496]	@ (800a01c <tcp_input+0x740>)
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009e2e:	69f8      	ldr	r0, [r7, #28]
 8009e30:	f000 fb18 	bl	800a464 <tcp_process>
 8009e34:	4603      	mov	r3, r0
 8009e36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009e38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e3c:	f113 0f0d 	cmn.w	r3, #13
 8009e40:	f000 80d3 	beq.w	8009fea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009e44:	4b71      	ldr	r3, [pc, #452]	@ (800a00c <tcp_input+0x730>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d015      	beq.n	8009e7c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d008      	beq.n	8009e6c <tcp_input+0x590>
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	6912      	ldr	r2, [r2, #16]
 8009e64:	f06f 010d 	mvn.w	r1, #13
 8009e68:	4610      	mov	r0, r2
 8009e6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009e6c:	69f9      	ldr	r1, [r7, #28]
 8009e6e:	486c      	ldr	r0, [pc, #432]	@ (800a020 <tcp_input+0x744>)
 8009e70:	f7ff fbbc 	bl	80095ec <tcp_pcb_remove>
        tcp_free(pcb);
 8009e74:	69f8      	ldr	r0, [r7, #28]
 8009e76:	f7fd fefb 	bl	8007c70 <tcp_free>
 8009e7a:	e0da      	b.n	800a032 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009e80:	4b63      	ldr	r3, [pc, #396]	@ (800a010 <tcp_input+0x734>)
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01d      	beq.n	8009ec4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009e88:	4b61      	ldr	r3, [pc, #388]	@ (800a010 <tcp_input+0x734>)
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00a      	beq.n	8009eae <tcp_input+0x5d2>
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	6910      	ldr	r0, [r2, #16]
 8009ea2:	89fa      	ldrh	r2, [r7, #14]
 8009ea4:	69f9      	ldr	r1, [r7, #28]
 8009ea6:	4798      	blx	r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	74fb      	strb	r3, [r7, #19]
 8009eac:	e001      	b.n	8009eb2 <tcp_input+0x5d6>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009eb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009eb6:	f113 0f0d 	cmn.w	r3, #13
 8009eba:	f000 8098 	beq.w	8009fee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009ebe:	4b54      	ldr	r3, [pc, #336]	@ (800a010 <tcp_input+0x734>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009ec4:	69f8      	ldr	r0, [r7, #28]
 8009ec6:	f000 f915 	bl	800a0f4 <tcp_input_delayed_close>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f040 8090 	bne.w	8009ff2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009ed2:	4b4d      	ldr	r3, [pc, #308]	@ (800a008 <tcp_input+0x72c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d041      	beq.n	8009f5e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d006      	beq.n	8009ef0 <tcp_input+0x614>
 8009ee2:	4b50      	ldr	r3, [pc, #320]	@ (800a024 <tcp_input+0x748>)
 8009ee4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009ee8:	494f      	ldr	r1, [pc, #316]	@ (800a028 <tcp_input+0x74c>)
 8009eea:	4850      	ldr	r0, [pc, #320]	@ (800a02c <tcp_input+0x750>)
 8009eec:	f009 ff9e 	bl	8013e2c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	8b5b      	ldrh	r3, [r3, #26]
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009efc:	4b42      	ldr	r3, [pc, #264]	@ (800a008 <tcp_input+0x72c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fd fba1 	bl	8007648 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009f06:	69f8      	ldr	r0, [r7, #28]
 8009f08:	f7fe f99a 	bl	8008240 <tcp_abort>
            goto aborted;
 8009f0c:	e091      	b.n	800a032 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00c      	beq.n	8009f32 <tcp_input+0x656>
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	6918      	ldr	r0, [r3, #16]
 8009f22:	4b39      	ldr	r3, [pc, #228]	@ (800a008 <tcp_input+0x72c>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	2300      	movs	r3, #0
 8009f28:	69f9      	ldr	r1, [r7, #28]
 8009f2a:	47a0      	blx	r4
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	74fb      	strb	r3, [r7, #19]
 8009f30:	e008      	b.n	8009f44 <tcp_input+0x668>
 8009f32:	4b35      	ldr	r3, [pc, #212]	@ (800a008 <tcp_input+0x72c>)
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	2300      	movs	r3, #0
 8009f38:	69f9      	ldr	r1, [r7, #28]
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	f7ff f8a8 	bl	8009090 <tcp_recv_null>
 8009f40:	4603      	mov	r3, r0
 8009f42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009f44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f48:	f113 0f0d 	cmn.w	r3, #13
 8009f4c:	d053      	beq.n	8009ff6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009f4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009f56:	4b2c      	ldr	r3, [pc, #176]	@ (800a008 <tcp_input+0x72c>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800a00c <tcp_input+0x730>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	f003 0320 	and.w	r3, r3, #32
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d030      	beq.n	8009fcc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d009      	beq.n	8009f86 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f76:	7b5a      	ldrb	r2, [r3, #13]
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f7c:	f042 0220 	orr.w	r2, r2, #32
 8009f80:	b2d2      	uxtb	r2, r2
 8009f82:	735a      	strb	r2, [r3, #13]
 8009f84:	e022      	b.n	8009fcc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f8e:	d005      	beq.n	8009f9c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f94:	3301      	adds	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <tcp_input+0x6e2>
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	6918      	ldr	r0, [r3, #16]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	69f9      	ldr	r1, [r7, #28]
 8009fb6:	47a0      	blx	r4
 8009fb8:	4603      	mov	r3, r0
 8009fba:	74fb      	strb	r3, [r7, #19]
 8009fbc:	e001      	b.n	8009fc2 <tcp_input+0x6e6>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009fc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fc6:	f113 0f0d 	cmn.w	r3, #13
 8009fca:	d016      	beq.n	8009ffa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009fcc:	4b13      	ldr	r3, [pc, #76]	@ (800a01c <tcp_input+0x740>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009fd2:	69f8      	ldr	r0, [r7, #28]
 8009fd4:	f000 f88e 	bl	800a0f4 <tcp_input_delayed_close>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d128      	bne.n	800a030 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009fde:	69f8      	ldr	r0, [r7, #28]
 8009fe0:	f002 ff1a 	bl	800ce18 <tcp_output>
 8009fe4:	e025      	b.n	800a032 <tcp_input+0x756>
        goto aborted;
 8009fe6:	bf00      	nop
 8009fe8:	e023      	b.n	800a032 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009fea:	bf00      	nop
 8009fec:	e021      	b.n	800a032 <tcp_input+0x756>
              goto aborted;
 8009fee:	bf00      	nop
 8009ff0:	e01f      	b.n	800a032 <tcp_input+0x756>
          goto aborted;
 8009ff2:	bf00      	nop
 8009ff4:	e01d      	b.n	800a032 <tcp_input+0x756>
            goto aborted;
 8009ff6:	bf00      	nop
 8009ff8:	e01b      	b.n	800a032 <tcp_input+0x756>
              goto aborted;
 8009ffa:	bf00      	nop
 8009ffc:	e019      	b.n	800a032 <tcp_input+0x756>
 8009ffe:	bf00      	nop
 800a000:	20007fec 	.word	0x20007fec
 800a004:	20007ffc 	.word	0x20007ffc
 800a008:	2000801c 	.word	0x2000801c
 800a00c:	20008019 	.word	0x20008019
 800a010:	20008014 	.word	0x20008014
 800a014:	20008018 	.word	0x20008018
 800a018:	20008016 	.word	0x20008016
 800a01c:	20008020 	.word	0x20008020
 800a020:	20007fe0 	.word	0x20007fe0
 800a024:	08018f38 	.word	0x08018f38
 800a028:	080190ec 	.word	0x080190ec
 800a02c:	08018f84 	.word	0x08018f84
          goto aborted;
 800a030:	bf00      	nop
    tcp_input_pcb = NULL;
 800a032:	4b27      	ldr	r3, [pc, #156]	@ (800a0d0 <tcp_input+0x7f4>)
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a038:	4b26      	ldr	r3, [pc, #152]	@ (800a0d4 <tcp_input+0x7f8>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a03e:	4b26      	ldr	r3, [pc, #152]	@ (800a0d8 <tcp_input+0x7fc>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d03f      	beq.n	800a0c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a046:	4b24      	ldr	r3, [pc, #144]	@ (800a0d8 <tcp_input+0x7fc>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fd fafc 	bl	8007648 <pbuf_free>
      inseg.p = NULL;
 800a050:	4b21      	ldr	r3, [pc, #132]	@ (800a0d8 <tcp_input+0x7fc>)
 800a052:	2200      	movs	r2, #0
 800a054:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a056:	e036      	b.n	800a0c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a058:	4b20      	ldr	r3, [pc, #128]	@ (800a0dc <tcp_input+0x800>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	899b      	ldrh	r3, [r3, #12]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4618      	mov	r0, r3
 800a062:	f7fb ff63 	bl	8005f2c <lwip_htons>
 800a066:	4603      	mov	r3, r0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	f003 0304 	and.w	r3, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d118      	bne.n	800a0a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a072:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e0 <tcp_input+0x804>)
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	4b1b      	ldr	r3, [pc, #108]	@ (800a0e4 <tcp_input+0x808>)
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e8 <tcp_input+0x80c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a082:	4b16      	ldr	r3, [pc, #88]	@ (800a0dc <tcp_input+0x800>)
 800a084:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a086:	885b      	ldrh	r3, [r3, #2]
 800a088:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a08a:	4a14      	ldr	r2, [pc, #80]	@ (800a0dc <tcp_input+0x800>)
 800a08c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a08e:	8812      	ldrh	r2, [r2, #0]
 800a090:	b292      	uxth	r2, r2
 800a092:	9202      	str	r2, [sp, #8]
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	4b15      	ldr	r3, [pc, #84]	@ (800a0ec <tcp_input+0x810>)
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	4b15      	ldr	r3, [pc, #84]	@ (800a0f0 <tcp_input+0x814>)
 800a09c:	4602      	mov	r2, r0
 800a09e:	2000      	movs	r0, #0
 800a0a0:	f003 fc6e 	bl	800d980 <tcp_rst>
    pbuf_free(p);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7fd facf 	bl	8007648 <pbuf_free>
  return;
 800a0aa:	e00c      	b.n	800a0c6 <tcp_input+0x7ea>
    goto dropped;
 800a0ac:	bf00      	nop
 800a0ae:	e006      	b.n	800a0be <tcp_input+0x7e2>
    goto dropped;
 800a0b0:	bf00      	nop
 800a0b2:	e004      	b.n	800a0be <tcp_input+0x7e2>
    goto dropped;
 800a0b4:	bf00      	nop
 800a0b6:	e002      	b.n	800a0be <tcp_input+0x7e2>
      goto dropped;
 800a0b8:	bf00      	nop
 800a0ba:	e000      	b.n	800a0be <tcp_input+0x7e2>
      goto dropped;
 800a0bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7fd fac2 	bl	8007648 <pbuf_free>
 800a0c4:	e000      	b.n	800a0c8 <tcp_input+0x7ec>
  return;
 800a0c6:	bf00      	nop
}
 800a0c8:	3724      	adds	r7, #36	@ 0x24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd90      	pop	{r4, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20008020 	.word	0x20008020
 800a0d4:	2000801c 	.word	0x2000801c
 800a0d8:	20007fec 	.word	0x20007fec
 800a0dc:	20007ffc 	.word	0x20007ffc
 800a0e0:	20008010 	.word	0x20008010
 800a0e4:	20008016 	.word	0x20008016
 800a0e8:	2000800c 	.word	0x2000800c
 800a0ec:	20004fa8 	.word	0x20004fa8
 800a0f0:	20004fac 	.word	0x20004fac

0800a0f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <tcp_input_delayed_close+0x1c>
 800a102:	4b17      	ldr	r3, [pc, #92]	@ (800a160 <tcp_input_delayed_close+0x6c>)
 800a104:	f240 225a 	movw	r2, #602	@ 0x25a
 800a108:	4916      	ldr	r1, [pc, #88]	@ (800a164 <tcp_input_delayed_close+0x70>)
 800a10a:	4817      	ldr	r0, [pc, #92]	@ (800a168 <tcp_input_delayed_close+0x74>)
 800a10c:	f009 fe8e 	bl	8013e2c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a110:	4b16      	ldr	r3, [pc, #88]	@ (800a16c <tcp_input_delayed_close+0x78>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f003 0310 	and.w	r3, r3, #16
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01c      	beq.n	800a156 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8b5b      	ldrh	r3, [r3, #26]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10d      	bne.n	800a144 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d008      	beq.n	800a144 <tcp_input_delayed_close+0x50>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6912      	ldr	r2, [r2, #16]
 800a13c:	f06f 010e 	mvn.w	r1, #14
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	480a      	ldr	r0, [pc, #40]	@ (800a170 <tcp_input_delayed_close+0x7c>)
 800a148:	f7ff fa50 	bl	80095ec <tcp_pcb_remove>
    tcp_free(pcb);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7fd fd8f 	bl	8007c70 <tcp_free>
    return 1;
 800a152:	2301      	movs	r3, #1
 800a154:	e000      	b.n	800a158 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	08018f38 	.word	0x08018f38
 800a164:	08019108 	.word	0x08019108
 800a168:	08018f84 	.word	0x08018f84
 800a16c:	20008019 	.word	0x20008019
 800a170:	20007fe0 	.word	0x20007fe0

0800a174 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a174:	b590      	push	{r4, r7, lr}
 800a176:	b08b      	sub	sp, #44	@ 0x2c
 800a178:	af04      	add	r7, sp, #16
 800a17a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a17c:	4b6f      	ldr	r3, [pc, #444]	@ (800a33c <tcp_listen_input+0x1c8>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 80d2 	bne.w	800a32e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <tcp_listen_input+0x2a>
 800a190:	4b6b      	ldr	r3, [pc, #428]	@ (800a340 <tcp_listen_input+0x1cc>)
 800a192:	f240 2281 	movw	r2, #641	@ 0x281
 800a196:	496b      	ldr	r1, [pc, #428]	@ (800a344 <tcp_listen_input+0x1d0>)
 800a198:	486b      	ldr	r0, [pc, #428]	@ (800a348 <tcp_listen_input+0x1d4>)
 800a19a:	f009 fe47 	bl	8013e2c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a19e:	4b67      	ldr	r3, [pc, #412]	@ (800a33c <tcp_listen_input+0x1c8>)
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	f003 0310 	and.w	r3, r3, #16
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d019      	beq.n	800a1de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1aa:	4b68      	ldr	r3, [pc, #416]	@ (800a34c <tcp_listen_input+0x1d8>)
 800a1ac:	6819      	ldr	r1, [r3, #0]
 800a1ae:	4b68      	ldr	r3, [pc, #416]	@ (800a350 <tcp_listen_input+0x1dc>)
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4b67      	ldr	r3, [pc, #412]	@ (800a354 <tcp_listen_input+0x1e0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1ba:	4b67      	ldr	r3, [pc, #412]	@ (800a358 <tcp_listen_input+0x1e4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1be:	885b      	ldrh	r3, [r3, #2]
 800a1c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1c2:	4a65      	ldr	r2, [pc, #404]	@ (800a358 <tcp_listen_input+0x1e4>)
 800a1c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1c6:	8812      	ldrh	r2, [r2, #0]
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	9202      	str	r2, [sp, #8]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	4b63      	ldr	r3, [pc, #396]	@ (800a35c <tcp_listen_input+0x1e8>)
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	4b63      	ldr	r3, [pc, #396]	@ (800a360 <tcp_listen_input+0x1ec>)
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f003 fbd2 	bl	800d980 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a1dc:	e0a9      	b.n	800a332 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a1de:	4b57      	ldr	r3, [pc, #348]	@ (800a33c <tcp_listen_input+0x1c8>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80a3 	beq.w	800a332 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	7d5b      	ldrb	r3, [r3, #21]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff f871 	bl	80092d8 <tcp_alloc>
 800a1f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d111      	bne.n	800a222 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <tcp_listen_input+0xa8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	6910      	ldr	r0, [r2, #16]
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295
 800a212:	2100      	movs	r1, #0
 800a214:	4798      	blx	r3
 800a216:	4603      	mov	r3, r0
 800a218:	73bb      	strb	r3, [r7, #14]
      return;
 800a21a:	e08b      	b.n	800a334 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a21c:	23f0      	movs	r3, #240	@ 0xf0
 800a21e:	73bb      	strb	r3, [r7, #14]
      return;
 800a220:	e088      	b.n	800a334 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a222:	4b50      	ldr	r3, [pc, #320]	@ (800a364 <tcp_listen_input+0x1f0>)
 800a224:	695a      	ldr	r2, [r3, #20]
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a22a:	4b4e      	ldr	r3, [pc, #312]	@ (800a364 <tcp_listen_input+0x1f0>)
 800a22c:	691a      	ldr	r2, [r3, #16]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	8ada      	ldrh	r2, [r3, #22]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a23a:	4b47      	ldr	r3, [pc, #284]	@ (800a358 <tcp_listen_input+0x1e4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29a      	uxth	r2, r3
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2203      	movs	r2, #3
 800a24a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a24c:	4b41      	ldr	r3, [pc, #260]	@ (800a354 <tcp_listen_input+0x1e0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	1c5a      	adds	r2, r3, #1
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a25e:	6978      	ldr	r0, [r7, #20]
 800a260:	f7ff fa58 	bl	8009714 <tcp_next_iss>
 800a264:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a27e:	4b35      	ldr	r3, [pc, #212]	@ (800a354 <tcp_listen_input+0x1e0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	1e5a      	subs	r2, r3, #1
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691a      	ldr	r2, [r3, #16]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	7a5b      	ldrb	r3, [r3, #9]
 800a29a:	f003 030c 	and.w	r3, r3, #12
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7a1a      	ldrb	r2, [r3, #8]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a2ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a368 <tcp_listen_input+0x1f4>)
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	60da      	str	r2, [r3, #12]
 800a2b4:	4a2c      	ldr	r2, [pc, #176]	@ (800a368 <tcp_listen_input+0x1f4>)
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	f003 fd21 	bl	800dd00 <tcp_timer_needed>
 800a2be:	4b2b      	ldr	r3, [pc, #172]	@ (800a36c <tcp_listen_input+0x1f8>)
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f001 fd8b 	bl	800bde0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a2ca:	4b23      	ldr	r3, [pc, #140]	@ (800a358 <tcp_listen_input+0x1e4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	89db      	ldrh	r3, [r3, #14]
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f007 fab3 	bl	8011858 <ip4_route>
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff fa30 	bl	8009760 <tcp_eff_send_mss_netif>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a308:	2112      	movs	r1, #18
 800a30a:	6978      	ldr	r0, [r7, #20]
 800a30c:	f002 fc96 	bl	800cc3c <tcp_enqueue_flags>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a31c:	2100      	movs	r1, #0
 800a31e:	6978      	ldr	r0, [r7, #20]
 800a320:	f7fd fed0 	bl	80080c4 <tcp_abandon>
      return;
 800a324:	e006      	b.n	800a334 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a326:	6978      	ldr	r0, [r7, #20]
 800a328:	f002 fd76 	bl	800ce18 <tcp_output>
  return;
 800a32c:	e001      	b.n	800a332 <tcp_listen_input+0x1be>
    return;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <tcp_listen_input+0x1c0>
  return;
 800a332:	bf00      	nop
}
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd90      	pop	{r4, r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20008018 	.word	0x20008018
 800a340:	08018f38 	.word	0x08018f38
 800a344:	08019130 	.word	0x08019130
 800a348:	08018f84 	.word	0x08018f84
 800a34c:	20008010 	.word	0x20008010
 800a350:	20008016 	.word	0x20008016
 800a354:	2000800c 	.word	0x2000800c
 800a358:	20007ffc 	.word	0x20007ffc
 800a35c:	20004fa8 	.word	0x20004fa8
 800a360:	20004fac 	.word	0x20004fac
 800a364:	20004f98 	.word	0x20004f98
 800a368:	20007fe0 	.word	0x20007fe0
 800a36c:	20007fe8 	.word	0x20007fe8

0800a370 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af04      	add	r7, sp, #16
 800a376:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a378:	4b2f      	ldr	r3, [pc, #188]	@ (800a438 <tcp_timewait_input+0xc8>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d153      	bne.n	800a42c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <tcp_timewait_input+0x28>
 800a38a:	4b2c      	ldr	r3, [pc, #176]	@ (800a43c <tcp_timewait_input+0xcc>)
 800a38c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a390:	492b      	ldr	r1, [pc, #172]	@ (800a440 <tcp_timewait_input+0xd0>)
 800a392:	482c      	ldr	r0, [pc, #176]	@ (800a444 <tcp_timewait_input+0xd4>)
 800a394:	f009 fd4a 	bl	8013e2c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a398:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <tcp_timewait_input+0xc8>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 0302 	and.w	r3, r3, #2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d02a      	beq.n	800a3fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a3a4:	4b28      	ldr	r3, [pc, #160]	@ (800a448 <tcp_timewait_input+0xd8>)
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	db2d      	blt.n	800a40e <tcp_timewait_input+0x9e>
 800a3b2:	4b25      	ldr	r3, [pc, #148]	@ (800a448 <tcp_timewait_input+0xd8>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a3be:	440b      	add	r3, r1
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dc23      	bgt.n	800a40e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3c6:	4b21      	ldr	r3, [pc, #132]	@ (800a44c <tcp_timewait_input+0xdc>)
 800a3c8:	6819      	ldr	r1, [r3, #0]
 800a3ca:	4b21      	ldr	r3, [pc, #132]	@ (800a450 <tcp_timewait_input+0xe0>)
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <tcp_timewait_input+0xd8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a454 <tcp_timewait_input+0xe4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3da:	885b      	ldrh	r3, [r3, #2]
 800a3dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3de:	4a1d      	ldr	r2, [pc, #116]	@ (800a454 <tcp_timewait_input+0xe4>)
 800a3e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3e2:	8812      	ldrh	r2, [r2, #0]
 800a3e4:	b292      	uxth	r2, r2
 800a3e6:	9202      	str	r2, [sp, #8]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a458 <tcp_timewait_input+0xe8>)
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a45c <tcp_timewait_input+0xec>)
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f003 fac4 	bl	800d980 <tcp_rst>
      return;
 800a3f8:	e01b      	b.n	800a432 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a438 <tcp_timewait_input+0xc8>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a406:	4b16      	ldr	r3, [pc, #88]	@ (800a460 <tcp_timewait_input+0xf0>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a40e:	4b10      	ldr	r3, [pc, #64]	@ (800a450 <tcp_timewait_input+0xe0>)
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8b5b      	ldrh	r3, [r3, #26]
 800a41a:	f043 0302 	orr.w	r3, r3, #2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f002 fcf7 	bl	800ce18 <tcp_output>
  }
  return;
 800a42a:	e001      	b.n	800a430 <tcp_timewait_input+0xc0>
    return;
 800a42c:	bf00      	nop
 800a42e:	e000      	b.n	800a432 <tcp_timewait_input+0xc2>
  return;
 800a430:	bf00      	nop
}
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20008018 	.word	0x20008018
 800a43c:	08018f38 	.word	0x08018f38
 800a440:	08019150 	.word	0x08019150
 800a444:	08018f84 	.word	0x08018f84
 800a448:	2000800c 	.word	0x2000800c
 800a44c:	20008010 	.word	0x20008010
 800a450:	20008016 	.word	0x20008016
 800a454:	20007ffc 	.word	0x20007ffc
 800a458:	20004fa8 	.word	0x20004fa8
 800a45c:	20004fac 	.word	0x20004fac
 800a460:	20007fd4 	.word	0x20007fd4

0800a464 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b08d      	sub	sp, #52	@ 0x34
 800a468:	af04      	add	r7, sp, #16
 800a46a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d106      	bne.n	800a488 <tcp_process+0x24>
 800a47a:	4b9d      	ldr	r3, [pc, #628]	@ (800a6f0 <tcp_process+0x28c>)
 800a47c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a480:	499c      	ldr	r1, [pc, #624]	@ (800a6f4 <tcp_process+0x290>)
 800a482:	489d      	ldr	r0, [pc, #628]	@ (800a6f8 <tcp_process+0x294>)
 800a484:	f009 fcd2 	bl	8013e2c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a488:	4b9c      	ldr	r3, [pc, #624]	@ (800a6fc <tcp_process+0x298>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d04e      	beq.n	800a532 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7d1b      	ldrb	r3, [r3, #20]
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d108      	bne.n	800a4ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4a0:	4b97      	ldr	r3, [pc, #604]	@ (800a700 <tcp_process+0x29c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d123      	bne.n	800a4f0 <tcp_process+0x8c>
        acceptable = 1;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	76fb      	strb	r3, [r7, #27]
 800a4ac:	e020      	b.n	800a4f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4b2:	4b94      	ldr	r3, [pc, #592]	@ (800a704 <tcp_process+0x2a0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d102      	bne.n	800a4c0 <tcp_process+0x5c>
        acceptable = 1;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	76fb      	strb	r3, [r7, #27]
 800a4be:	e017      	b.n	800a4f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a4c0:	4b90      	ldr	r3, [pc, #576]	@ (800a704 <tcp_process+0x2a0>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	db10      	blt.n	800a4f0 <tcp_process+0x8c>
 800a4ce:	4b8d      	ldr	r3, [pc, #564]	@ (800a704 <tcp_process+0x2a0>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a4da:	440b      	add	r3, r1
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	dc06      	bgt.n	800a4f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	8b5b      	ldrh	r3, [r3, #26]
 800a4e6:	f043 0302 	orr.w	r3, r3, #2
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a4f0:	7efb      	ldrb	r3, [r7, #27]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d01b      	beq.n	800a52e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	7d1b      	ldrb	r3, [r3, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d106      	bne.n	800a50c <tcp_process+0xa8>
 800a4fe:	4b7c      	ldr	r3, [pc, #496]	@ (800a6f0 <tcp_process+0x28c>)
 800a500:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a504:	4980      	ldr	r1, [pc, #512]	@ (800a708 <tcp_process+0x2a4>)
 800a506:	487c      	ldr	r0, [pc, #496]	@ (800a6f8 <tcp_process+0x294>)
 800a508:	f009 fc90 	bl	8013e2c <iprintf>
      recv_flags |= TF_RESET;
 800a50c:	4b7f      	ldr	r3, [pc, #508]	@ (800a70c <tcp_process+0x2a8>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	b2da      	uxtb	r2, r3
 800a516:	4b7d      	ldr	r3, [pc, #500]	@ (800a70c <tcp_process+0x2a8>)
 800a518:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	8b5b      	ldrh	r3, [r3, #26]
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a528:	f06f 030d 	mvn.w	r3, #13
 800a52c:	e37a      	b.n	800ac24 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e378      	b.n	800ac24 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a532:	4b72      	ldr	r3, [pc, #456]	@ (800a6fc <tcp_process+0x298>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d010      	beq.n	800a560 <tcp_process+0xfc>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d00c      	beq.n	800a560 <tcp_process+0xfc>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7d1b      	ldrb	r3, [r3, #20]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d008      	beq.n	800a560 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	8b5b      	ldrh	r3, [r3, #26]
 800a552:	f043 0302 	orr.w	r3, r3, #2
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	e361      	b.n	800ac24 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	8b5b      	ldrh	r3, [r3, #26]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a56c:	4b68      	ldr	r3, [pc, #416]	@ (800a710 <tcp_process+0x2ac>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fc2b 	bl	800bde0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	7d1b      	ldrb	r3, [r3, #20]
 800a58e:	3b02      	subs	r3, #2
 800a590:	2b07      	cmp	r3, #7
 800a592:	f200 8337 	bhi.w	800ac04 <tcp_process+0x7a0>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <tcp_process+0x138>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a7ed 	.word	0x0800a7ed
 800a5a4:	0800a965 	.word	0x0800a965
 800a5a8:	0800a98f 	.word	0x0800a98f
 800a5ac:	0800aab3 	.word	0x0800aab3
 800a5b0:	0800a965 	.word	0x0800a965
 800a5b4:	0800ab3f 	.word	0x0800ab3f
 800a5b8:	0800abcf 	.word	0x0800abcf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a5bc:	4b4f      	ldr	r3, [pc, #316]	@ (800a6fc <tcp_process+0x298>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 80e4 	beq.w	800a792 <tcp_process+0x32e>
 800a5ca:	4b4c      	ldr	r3, [pc, #304]	@ (800a6fc <tcp_process+0x298>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 80dd 	beq.w	800a792 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	4b48      	ldr	r3, [pc, #288]	@ (800a700 <tcp_process+0x29c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	f040 80d5 	bne.w	800a792 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a5e8:	4b46      	ldr	r3, [pc, #280]	@ (800a704 <tcp_process+0x2a0>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a5fa:	4b41      	ldr	r3, [pc, #260]	@ (800a700 <tcp_process+0x29c>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a602:	4b44      	ldr	r3, [pc, #272]	@ (800a714 <tcp_process+0x2b0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	89db      	ldrh	r3, [r3, #14]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a61c:	4b39      	ldr	r3, [pc, #228]	@ (800a704 <tcp_process+0x2a0>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2204      	movs	r2, #4
 800a62a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f007 f90f 	bl	8011858 <ip4_route>
 800a63a:	4601      	mov	r1, r0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3304      	adds	r3, #4
 800a640:	461a      	mov	r2, r3
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff f88c 	bl	8009760 <tcp_eff_send_mss_netif>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a654:	009a      	lsls	r2, r3, #2
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a660:	428b      	cmp	r3, r1
 800a662:	bf38      	it	cc
 800a664:	460b      	movcc	r3, r1
 800a666:	429a      	cmp	r2, r3
 800a668:	d204      	bcs.n	800a674 <tcp_process+0x210>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	b29b      	uxth	r3, r3
 800a672:	e00d      	b.n	800a690 <tcp_process+0x22c>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a67e:	4293      	cmp	r3, r2
 800a680:	d904      	bls.n	800a68c <tcp_process+0x228>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	b29b      	uxth	r3, r3
 800a68a:	e001      	b.n	800a690 <tcp_process+0x22c>
 800a68c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <tcp_process+0x24a>
 800a6a0:	4b13      	ldr	r3, [pc, #76]	@ (800a6f0 <tcp_process+0x28c>)
 800a6a2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a6a6:	491c      	ldr	r1, [pc, #112]	@ (800a718 <tcp_process+0x2b4>)
 800a6a8:	4813      	ldr	r0, [pc, #76]	@ (800a6f8 <tcp_process+0x294>)
 800a6aa:	f009 fbbf 	bl	8013e2c <iprintf>
        --pcb->snd_queuelen;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d12a      	bne.n	800a720 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <tcp_process+0x280>
 800a6d6:	4b06      	ldr	r3, [pc, #24]	@ (800a6f0 <tcp_process+0x28c>)
 800a6d8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a6dc:	490f      	ldr	r1, [pc, #60]	@ (800a71c <tcp_process+0x2b8>)
 800a6de:	4806      	ldr	r0, [pc, #24]	@ (800a6f8 <tcp_process+0x294>)
 800a6e0:	f009 fba4 	bl	8013e2c <iprintf>
          pcb->unsent = rseg->next;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a6ec:	e01c      	b.n	800a728 <tcp_process+0x2c4>
 800a6ee:	bf00      	nop
 800a6f0:	08018f38 	.word	0x08018f38
 800a6f4:	08019170 	.word	0x08019170
 800a6f8:	08018f84 	.word	0x08018f84
 800a6fc:	20008018 	.word	0x20008018
 800a700:	20008010 	.word	0x20008010
 800a704:	2000800c 	.word	0x2000800c
 800a708:	0801918c 	.word	0x0801918c
 800a70c:	20008019 	.word	0x20008019
 800a710:	20007fd4 	.word	0x20007fd4
 800a714:	20007ffc 	.word	0x20007ffc
 800a718:	080191ac 	.word	0x080191ac
 800a71c:	080191c4 	.word	0x080191c4
        } else {
          pcb->unacked = rseg->next;
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a728:	69f8      	ldr	r0, [r7, #28]
 800a72a:	f7fe fc6c 	bl	8009006 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a732:	2b00      	cmp	r3, #0
 800a734:	d104      	bne.n	800a740 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a73c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a73e:	e006      	b.n	800a74e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <tcp_process+0x30a>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6910      	ldr	r0, [r2, #16]
 800a762:	2200      	movs	r2, #0
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	4798      	blx	r3
 800a768:	4603      	mov	r3, r0
 800a76a:	76bb      	strb	r3, [r7, #26]
 800a76c:	e001      	b.n	800a772 <tcp_process+0x30e>
 800a76e:	2300      	movs	r3, #0
 800a770:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a772:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a776:	f113 0f0d 	cmn.w	r3, #13
 800a77a:	d102      	bne.n	800a782 <tcp_process+0x31e>
          return ERR_ABRT;
 800a77c:	f06f 030c 	mvn.w	r3, #12
 800a780:	e250      	b.n	800ac24 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	8b5b      	ldrh	r3, [r3, #26]
 800a786:	f043 0302 	orr.w	r3, r3, #2
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a790:	e23a      	b.n	800ac08 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a792:	4b98      	ldr	r3, [pc, #608]	@ (800a9f4 <tcp_process+0x590>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 0310 	and.w	r3, r3, #16
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 8234 	beq.w	800ac08 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7a0:	4b95      	ldr	r3, [pc, #596]	@ (800a9f8 <tcp_process+0x594>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	4b95      	ldr	r3, [pc, #596]	@ (800a9fc <tcp_process+0x598>)
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4b95      	ldr	r3, [pc, #596]	@ (800aa00 <tcp_process+0x59c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7b0:	4b94      	ldr	r3, [pc, #592]	@ (800aa04 <tcp_process+0x5a0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7b4:	885b      	ldrh	r3, [r3, #2]
 800a7b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a7b8:	4a92      	ldr	r2, [pc, #584]	@ (800aa04 <tcp_process+0x5a0>)
 800a7ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a7bc:	8812      	ldrh	r2, [r2, #0]
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	9202      	str	r2, [sp, #8]
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	4b90      	ldr	r3, [pc, #576]	@ (800aa08 <tcp_process+0x5a4>)
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	4b90      	ldr	r3, [pc, #576]	@ (800aa0c <tcp_process+0x5a8>)
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f003 f8d7 	bl	800d980 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a7d8:	2b05      	cmp	r3, #5
 800a7da:	f200 8215 	bhi.w	800ac08 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f002 fea3 	bl	800d530 <tcp_rexmit_rto>
      break;
 800a7ea:	e20d      	b.n	800ac08 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a7ec:	4b81      	ldr	r3, [pc, #516]	@ (800a9f4 <tcp_process+0x590>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80a1 	beq.w	800a93c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a7fa:	4b7f      	ldr	r3, [pc, #508]	@ (800a9f8 <tcp_process+0x594>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	3b01      	subs	r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	db7e      	blt.n	800a908 <tcp_process+0x4a4>
 800a80a:	4b7b      	ldr	r3, [pc, #492]	@ (800a9f8 <tcp_process+0x594>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc77      	bgt.n	800a908 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2204      	movs	r2, #4
 800a81c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d102      	bne.n	800a82c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a826:	23fa      	movs	r3, #250	@ 0xfa
 800a828:	76bb      	strb	r3, [r7, #26]
 800a82a:	e01d      	b.n	800a868 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d106      	bne.n	800a844 <tcp_process+0x3e0>
 800a836:	4b76      	ldr	r3, [pc, #472]	@ (800aa10 <tcp_process+0x5ac>)
 800a838:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a83c:	4975      	ldr	r1, [pc, #468]	@ (800aa14 <tcp_process+0x5b0>)
 800a83e:	4876      	ldr	r0, [pc, #472]	@ (800aa18 <tcp_process+0x5b4>)
 800a840:	f009 faf4 	bl	8013e2c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <tcp_process+0x400>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6910      	ldr	r0, [r2, #16]
 800a858:	2200      	movs	r2, #0
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	76bb      	strb	r3, [r7, #26]
 800a862:	e001      	b.n	800a868 <tcp_process+0x404>
 800a864:	23f0      	movs	r3, #240	@ 0xf0
 800a866:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a868:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00a      	beq.n	800a886 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a870:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a874:	f113 0f0d 	cmn.w	r3, #13
 800a878:	d002      	beq.n	800a880 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7fd fce0 	bl	8008240 <tcp_abort>
            }
            return ERR_ABRT;
 800a880:	f06f 030c 	mvn.w	r3, #12
 800a884:	e1ce      	b.n	800ac24 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fae0 	bl	800ae4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a88c:	4b63      	ldr	r3, [pc, #396]	@ (800aa1c <tcp_process+0x5b8>)
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <tcp_process+0x43c>
            recv_acked--;
 800a894:	4b61      	ldr	r3, [pc, #388]	@ (800aa1c <tcp_process+0x5b8>)
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	3b01      	subs	r3, #1
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	4b5f      	ldr	r3, [pc, #380]	@ (800aa1c <tcp_process+0x5b8>)
 800a89e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8a4:	009a      	lsls	r2, r3, #2
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a8b0:	428b      	cmp	r3, r1
 800a8b2:	bf38      	it	cc
 800a8b4:	460b      	movcc	r3, r1
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d204      	bcs.n	800a8c4 <tcp_process+0x460>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	e00d      	b.n	800a8e0 <tcp_process+0x47c>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d904      	bls.n	800a8dc <tcp_process+0x478>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	e001      	b.n	800a8e0 <tcp_process+0x47c>
 800a8dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a8e6:	4b4e      	ldr	r3, [pc, #312]	@ (800aa20 <tcp_process+0x5bc>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d037      	beq.n	800a962 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8b5b      	ldrh	r3, [r3, #26]
 800a8f6:	f043 0302 	orr.w	r3, r3, #2
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2207      	movs	r2, #7
 800a904:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a906:	e02c      	b.n	800a962 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a908:	4b3b      	ldr	r3, [pc, #236]	@ (800a9f8 <tcp_process+0x594>)
 800a90a:	6819      	ldr	r1, [r3, #0]
 800a90c:	4b3b      	ldr	r3, [pc, #236]	@ (800a9fc <tcp_process+0x598>)
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	461a      	mov	r2, r3
 800a912:	4b3b      	ldr	r3, [pc, #236]	@ (800aa00 <tcp_process+0x59c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a918:	4b3a      	ldr	r3, [pc, #232]	@ (800aa04 <tcp_process+0x5a0>)
 800a91a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a91c:	885b      	ldrh	r3, [r3, #2]
 800a91e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a920:	4a38      	ldr	r2, [pc, #224]	@ (800aa04 <tcp_process+0x5a0>)
 800a922:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a924:	8812      	ldrh	r2, [r2, #0]
 800a926:	b292      	uxth	r2, r2
 800a928:	9202      	str	r2, [sp, #8]
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	4b36      	ldr	r3, [pc, #216]	@ (800aa08 <tcp_process+0x5a4>)
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4b36      	ldr	r3, [pc, #216]	@ (800aa0c <tcp_process+0x5a8>)
 800a932:	4602      	mov	r2, r0
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f003 f823 	bl	800d980 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a93a:	e167      	b.n	800ac0c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a93c:	4b2d      	ldr	r3, [pc, #180]	@ (800a9f4 <tcp_process+0x590>)
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 8161 	beq.w	800ac0c <tcp_process+0x7a8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	1e5a      	subs	r2, r3, #1
 800a950:	4b2b      	ldr	r3, [pc, #172]	@ (800aa00 <tcp_process+0x59c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	f040 8159 	bne.w	800ac0c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f002 fe0a 	bl	800d574 <tcp_rexmit>
      break;
 800a960:	e154      	b.n	800ac0c <tcp_process+0x7a8>
 800a962:	e153      	b.n	800ac0c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fa71 	bl	800ae4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a96a:	4b2d      	ldr	r3, [pc, #180]	@ (800aa20 <tcp_process+0x5bc>)
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	f003 0320 	and.w	r3, r3, #32
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 814c 	beq.w	800ac10 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8b5b      	ldrh	r3, [r3, #26]
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	b29a      	uxth	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2207      	movs	r2, #7
 800a98a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a98c:	e140      	b.n	800ac10 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fa5c 	bl	800ae4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a994:	4b22      	ldr	r3, [pc, #136]	@ (800aa20 <tcp_process+0x5bc>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d071      	beq.n	800aa84 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9a0:	4b14      	ldr	r3, [pc, #80]	@ (800a9f4 <tcp_process+0x590>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d060      	beq.n	800aa6e <tcp_process+0x60a>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9b0:	4b11      	ldr	r3, [pc, #68]	@ (800a9f8 <tcp_process+0x594>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d15a      	bne.n	800aa6e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d156      	bne.n	800aa6e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	8b5b      	ldrh	r3, [r3, #26]
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fe fdbc 	bl	800954c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a9d4:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <tcp_process+0x5c0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d105      	bne.n	800a9ea <tcp_process+0x586>
 800a9de:	4b11      	ldr	r3, [pc, #68]	@ (800aa24 <tcp_process+0x5c0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	4a0f      	ldr	r2, [pc, #60]	@ (800aa24 <tcp_process+0x5c0>)
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	e02e      	b.n	800aa48 <tcp_process+0x5e4>
 800a9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800aa24 <tcp_process+0x5c0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	e027      	b.n	800aa42 <tcp_process+0x5de>
 800a9f2:	bf00      	nop
 800a9f4:	20008018 	.word	0x20008018
 800a9f8:	20008010 	.word	0x20008010
 800a9fc:	20008016 	.word	0x20008016
 800aa00:	2000800c 	.word	0x2000800c
 800aa04:	20007ffc 	.word	0x20007ffc
 800aa08:	20004fa8 	.word	0x20004fa8
 800aa0c:	20004fac 	.word	0x20004fac
 800aa10:	08018f38 	.word	0x08018f38
 800aa14:	080191d8 	.word	0x080191d8
 800aa18:	08018f84 	.word	0x08018f84
 800aa1c:	20008014 	.word	0x20008014
 800aa20:	20008019 	.word	0x20008019
 800aa24:	20007fe0 	.word	0x20007fe0
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d104      	bne.n	800aa3c <tcp_process+0x5d8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	e005      	b.n	800aa48 <tcp_process+0x5e4>
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1ef      	bne.n	800aa28 <tcp_process+0x5c4>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	60da      	str	r2, [r3, #12]
 800aa4e:	4b77      	ldr	r3, [pc, #476]	@ (800ac2c <tcp_process+0x7c8>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	220a      	movs	r2, #10
 800aa58:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aa5a:	4b75      	ldr	r3, [pc, #468]	@ (800ac30 <tcp_process+0x7cc>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	60da      	str	r2, [r3, #12]
 800aa62:	4a73      	ldr	r2, [pc, #460]	@ (800ac30 <tcp_process+0x7cc>)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	f003 f94a 	bl	800dd00 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aa6c:	e0d2      	b.n	800ac14 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8b5b      	ldrh	r3, [r3, #26]
 800aa72:	f043 0302 	orr.w	r3, r3, #2
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2208      	movs	r2, #8
 800aa80:	751a      	strb	r2, [r3, #20]
      break;
 800aa82:	e0c7      	b.n	800ac14 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa84:	4b6b      	ldr	r3, [pc, #428]	@ (800ac34 <tcp_process+0x7d0>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f003 0310 	and.w	r3, r3, #16
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 80c1 	beq.w	800ac14 <tcp_process+0x7b0>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa96:	4b68      	ldr	r3, [pc, #416]	@ (800ac38 <tcp_process+0x7d4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	f040 80ba 	bne.w	800ac14 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 80b5 	bne.w	800ac14 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2206      	movs	r2, #6
 800aaae:	751a      	strb	r2, [r3, #20]
      break;
 800aab0:	e0b0      	b.n	800ac14 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f9ca 	bl	800ae4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aab8:	4b60      	ldr	r3, [pc, #384]	@ (800ac3c <tcp_process+0x7d8>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f003 0320 	and.w	r3, r3, #32
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80a9 	beq.w	800ac18 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8b5b      	ldrh	r3, [r3, #26]
 800aaca:	f043 0302 	orr.w	r3, r3, #2
 800aace:	b29a      	uxth	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7fe fd39 	bl	800954c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aada:	4b59      	ldr	r3, [pc, #356]	@ (800ac40 <tcp_process+0x7dc>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d105      	bne.n	800aaf0 <tcp_process+0x68c>
 800aae4:	4b56      	ldr	r3, [pc, #344]	@ (800ac40 <tcp_process+0x7dc>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	4a55      	ldr	r2, [pc, #340]	@ (800ac40 <tcp_process+0x7dc>)
 800aaec:	6013      	str	r3, [r2, #0]
 800aaee:	e013      	b.n	800ab18 <tcp_process+0x6b4>
 800aaf0:	4b53      	ldr	r3, [pc, #332]	@ (800ac40 <tcp_process+0x7dc>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	613b      	str	r3, [r7, #16]
 800aaf6:	e00c      	b.n	800ab12 <tcp_process+0x6ae>
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d104      	bne.n	800ab0c <tcp_process+0x6a8>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68da      	ldr	r2, [r3, #12]
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	60da      	str	r2, [r3, #12]
 800ab0a:	e005      	b.n	800ab18 <tcp_process+0x6b4>
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	613b      	str	r3, [r7, #16]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1ef      	bne.n	800aaf8 <tcp_process+0x694>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	60da      	str	r2, [r3, #12]
 800ab1e:	4b43      	ldr	r3, [pc, #268]	@ (800ac2c <tcp_process+0x7c8>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	220a      	movs	r2, #10
 800ab28:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab2a:	4b41      	ldr	r3, [pc, #260]	@ (800ac30 <tcp_process+0x7cc>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	4a3f      	ldr	r2, [pc, #252]	@ (800ac30 <tcp_process+0x7cc>)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	f003 f8e2 	bl	800dd00 <tcp_timer_needed>
      }
      break;
 800ab3c:	e06c      	b.n	800ac18 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f984 	bl	800ae4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab44:	4b3b      	ldr	r3, [pc, #236]	@ (800ac34 <tcp_process+0x7d0>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d065      	beq.n	800ac1c <tcp_process+0x7b8>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab54:	4b38      	ldr	r3, [pc, #224]	@ (800ac38 <tcp_process+0x7d4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d15f      	bne.n	800ac1c <tcp_process+0x7b8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d15b      	bne.n	800ac1c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7fe fcf1 	bl	800954c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab6a:	4b35      	ldr	r3, [pc, #212]	@ (800ac40 <tcp_process+0x7dc>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d105      	bne.n	800ab80 <tcp_process+0x71c>
 800ab74:	4b32      	ldr	r3, [pc, #200]	@ (800ac40 <tcp_process+0x7dc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4a31      	ldr	r2, [pc, #196]	@ (800ac40 <tcp_process+0x7dc>)
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	e013      	b.n	800aba8 <tcp_process+0x744>
 800ab80:	4b2f      	ldr	r3, [pc, #188]	@ (800ac40 <tcp_process+0x7dc>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e00c      	b.n	800aba2 <tcp_process+0x73e>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d104      	bne.n	800ab9c <tcp_process+0x738>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	60da      	str	r2, [r3, #12]
 800ab9a:	e005      	b.n	800aba8 <tcp_process+0x744>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1ef      	bne.n	800ab88 <tcp_process+0x724>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	60da      	str	r2, [r3, #12]
 800abae:	4b1f      	ldr	r3, [pc, #124]	@ (800ac2c <tcp_process+0x7c8>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	220a      	movs	r2, #10
 800abb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800abba:	4b1d      	ldr	r3, [pc, #116]	@ (800ac30 <tcp_process+0x7cc>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	60da      	str	r2, [r3, #12]
 800abc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ac30 <tcp_process+0x7cc>)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	f003 f89a 	bl	800dd00 <tcp_timer_needed>
      }
      break;
 800abcc:	e026      	b.n	800ac1c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f93c 	bl	800ae4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800abd4:	4b17      	ldr	r3, [pc, #92]	@ (800ac34 <tcp_process+0x7d0>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	f003 0310 	and.w	r3, r3, #16
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01f      	beq.n	800ac20 <tcp_process+0x7bc>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abe4:	4b14      	ldr	r3, [pc, #80]	@ (800ac38 <tcp_process+0x7d4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d119      	bne.n	800ac20 <tcp_process+0x7bc>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d115      	bne.n	800ac20 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800abf4:	4b11      	ldr	r3, [pc, #68]	@ (800ac3c <tcp_process+0x7d8>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f043 0310 	orr.w	r3, r3, #16
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ac3c <tcp_process+0x7d8>)
 800ac00:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ac02:	e00d      	b.n	800ac20 <tcp_process+0x7bc>
    default:
      break;
 800ac04:	bf00      	nop
 800ac06:	e00c      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e00a      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e008      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac10:	bf00      	nop
 800ac12:	e006      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac14:	bf00      	nop
 800ac16:	e004      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e002      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac1c:	bf00      	nop
 800ac1e:	e000      	b.n	800ac22 <tcp_process+0x7be>
      break;
 800ac20:	bf00      	nop
  }
  return ERR_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3724      	adds	r7, #36	@ 0x24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd90      	pop	{r4, r7, pc}
 800ac2c:	20007fe8 	.word	0x20007fe8
 800ac30:	20007fe4 	.word	0x20007fe4
 800ac34:	20008018 	.word	0x20008018
 800ac38:	20008010 	.word	0x20008010
 800ac3c:	20008019 	.word	0x20008019
 800ac40:	20007fe0 	.word	0x20007fe0

0800ac44 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ac44:	b590      	push	{r4, r7, lr}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <tcp_oos_insert_segment+0x1e>
 800ac54:	4b3b      	ldr	r3, [pc, #236]	@ (800ad44 <tcp_oos_insert_segment+0x100>)
 800ac56:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ac5a:	493b      	ldr	r1, [pc, #236]	@ (800ad48 <tcp_oos_insert_segment+0x104>)
 800ac5c:	483b      	ldr	r0, [pc, #236]	@ (800ad4c <tcp_oos_insert_segment+0x108>)
 800ac5e:	f009 f8e5 	bl	8013e2c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	899b      	ldrh	r3, [r3, #12]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fb f95e 	bl	8005f2c <lwip_htons>
 800ac70:	4603      	mov	r3, r0
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d028      	beq.n	800acce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ac7c:	6838      	ldr	r0, [r7, #0]
 800ac7e:	f7fe f9ad 	bl	8008fdc <tcp_segs_free>
    next = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	603b      	str	r3, [r7, #0]
 800ac86:	e056      	b.n	800ad36 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fb f94b 	bl	8005f2c <lwip_htons>
 800ac96:	4603      	mov	r3, r0
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00d      	beq.n	800acbe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	899b      	ldrh	r3, [r3, #12]
 800aca8:	b29c      	uxth	r4, r3
 800acaa:	2001      	movs	r0, #1
 800acac:	f7fb f93e 	bl	8005f2c <lwip_htons>
 800acb0:	4603      	mov	r3, r0
 800acb2:	461a      	mov	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4322      	orrs	r2, r4
 800acba:	b292      	uxth	r2, r2
 800acbc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7fe f99c 	bl	8009006 <tcp_seg_free>
    while (next &&
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00e      	beq.n	800acf2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	891b      	ldrh	r3, [r3, #8]
 800acd8:	461a      	mov	r2, r3
 800acda:	4b1d      	ldr	r3, [pc, #116]	@ (800ad50 <tcp_oos_insert_segment+0x10c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	441a      	add	r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	8909      	ldrh	r1, [r1, #8]
 800acea:	440b      	add	r3, r1
 800acec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800acee:	2b00      	cmp	r3, #0
 800acf0:	daca      	bge.n	800ac88 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01e      	beq.n	800ad36 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	891b      	ldrh	r3, [r3, #8]
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b14      	ldr	r3, [pc, #80]	@ (800ad50 <tcp_oos_insert_segment+0x10c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	441a      	add	r2, r3
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd12      	ble.n	800ad36 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <tcp_oos_insert_segment+0x10c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	891b      	ldrh	r3, [r3, #8]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fc fb03 	bl	800733c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	601a      	str	r2, [r3, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd90      	pop	{r4, r7, pc}
 800ad44:	08018f38 	.word	0x08018f38
 800ad48:	080191f8 	.word	0x080191f8
 800ad4c:	08018f84 	.word	0x08018f84
 800ad50:	2000800c 	.word	0x2000800c

0800ad54 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ad54:	b5b0      	push	{r4, r5, r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ad62:	e03e      	b.n	800ade2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fc fcf0 	bl	8007758 <pbuf_clen>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad82:	8a7a      	ldrh	r2, [r7, #18]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d906      	bls.n	800ad96 <tcp_free_acked_segments+0x42>
 800ad88:	4b2a      	ldr	r3, [pc, #168]	@ (800ae34 <tcp_free_acked_segments+0xe0>)
 800ad8a:	f240 4257 	movw	r2, #1111	@ 0x457
 800ad8e:	492a      	ldr	r1, [pc, #168]	@ (800ae38 <tcp_free_acked_segments+0xe4>)
 800ad90:	482a      	ldr	r0, [pc, #168]	@ (800ae3c <tcp_free_acked_segments+0xe8>)
 800ad92:	f009 f84b 	bl	8013e2c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ad9c:	8a7b      	ldrh	r3, [r7, #18]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	891a      	ldrh	r2, [r3, #8]
 800adac:	4b24      	ldr	r3, [pc, #144]	@ (800ae40 <tcp_free_acked_segments+0xec>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	4b22      	ldr	r3, [pc, #136]	@ (800ae40 <tcp_free_acked_segments+0xec>)
 800adb6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800adb8:	6978      	ldr	r0, [r7, #20]
 800adba:	f7fe f924 	bl	8009006 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00c      	beq.n	800ade2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <tcp_free_acked_segments+0x8e>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <tcp_free_acked_segments+0x8e>
 800add4:	4b17      	ldr	r3, [pc, #92]	@ (800ae34 <tcp_free_acked_segments+0xe0>)
 800add6:	f240 4261 	movw	r2, #1121	@ 0x461
 800adda:	491a      	ldr	r1, [pc, #104]	@ (800ae44 <tcp_free_acked_segments+0xf0>)
 800addc:	4817      	ldr	r0, [pc, #92]	@ (800ae3c <tcp_free_acked_segments+0xe8>)
 800adde:	f009 f825 	bl	8013e2c <iprintf>
  while (seg_list != NULL &&
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d020      	beq.n	800ae2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fb f8b2 	bl	8005f58 <lwip_htonl>
 800adf4:	4604      	mov	r4, r0
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	891b      	ldrh	r3, [r3, #8]
 800adfa:	461d      	mov	r5, r3
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	899b      	ldrh	r3, [r3, #12]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fb f891 	bl	8005f2c <lwip_htons>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <tcp_free_acked_segments+0xc6>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e000      	b.n	800ae1c <tcp_free_acked_segments+0xc8>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	442b      	add	r3, r5
 800ae1e:	18e2      	adds	r2, r4, r3
 800ae20:	4b09      	ldr	r3, [pc, #36]	@ (800ae48 <tcp_free_acked_segments+0xf4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd9c      	ble.n	800ad64 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bdb0      	pop	{r4, r5, r7, pc}
 800ae34:	08018f38 	.word	0x08018f38
 800ae38:	08019220 	.word	0x08019220
 800ae3c:	08018f84 	.word	0x08018f84
 800ae40:	20008014 	.word	0x20008014
 800ae44:	08019248 	.word	0x08019248
 800ae48:	20008010 	.word	0x20008010

0800ae4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ae4c:	b5b0      	push	{r4, r5, r7, lr}
 800ae4e:	b094      	sub	sp, #80	@ 0x50
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <tcp_receive+0x20>
 800ae5e:	4b91      	ldr	r3, [pc, #580]	@ (800b0a4 <tcp_receive+0x258>)
 800ae60:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ae64:	4990      	ldr	r1, [pc, #576]	@ (800b0a8 <tcp_receive+0x25c>)
 800ae66:	4891      	ldr	r0, [pc, #580]	@ (800b0ac <tcp_receive+0x260>)
 800ae68:	f008 ffe0 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7d1b      	ldrb	r3, [r3, #20]
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d806      	bhi.n	800ae82 <tcp_receive+0x36>
 800ae74:	4b8b      	ldr	r3, [pc, #556]	@ (800b0a4 <tcp_receive+0x258>)
 800ae76:	f240 427c 	movw	r2, #1148	@ 0x47c
 800ae7a:	498d      	ldr	r1, [pc, #564]	@ (800b0b0 <tcp_receive+0x264>)
 800ae7c:	488b      	ldr	r0, [pc, #556]	@ (800b0ac <tcp_receive+0x260>)
 800ae7e:	f008 ffd5 	bl	8013e2c <iprintf>

  if (flags & TCP_ACK) {
 800ae82:	4b8c      	ldr	r3, [pc, #560]	@ (800b0b4 <tcp_receive+0x268>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	f003 0310 	and.w	r3, r3, #16
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	f000 8264 	beq.w	800b358 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae96:	461a      	mov	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae9c:	4413      	add	r3, r2
 800ae9e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aea4:	4b84      	ldr	r3, [pc, #528]	@ (800b0b8 <tcp_receive+0x26c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	db1b      	blt.n	800aee6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aeb2:	4b81      	ldr	r3, [pc, #516]	@ (800b0b8 <tcp_receive+0x26c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d106      	bne.n	800aec8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aebe:	4b7f      	ldr	r3, [pc, #508]	@ (800b0bc <tcp_receive+0x270>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	db0e      	blt.n	800aee6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aecc:	4b7b      	ldr	r3, [pc, #492]	@ (800b0bc <tcp_receive+0x270>)
 800aece:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d125      	bne.n	800af20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800aed4:	4b7a      	ldr	r3, [pc, #488]	@ (800b0c0 <tcp_receive+0x274>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	89db      	ldrh	r3, [r3, #14]
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d91c      	bls.n	800af20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800aee6:	4b76      	ldr	r3, [pc, #472]	@ (800b0c0 <tcp_receive+0x274>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	89db      	ldrh	r3, [r3, #14]
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af00:	429a      	cmp	r2, r3
 800af02:	d205      	bcs.n	800af10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800af10:	4b69      	ldr	r3, [pc, #420]	@ (800b0b8 <tcp_receive+0x26c>)
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800af18:	4b68      	ldr	r3, [pc, #416]	@ (800b0bc <tcp_receive+0x270>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800af20:	4b66      	ldr	r3, [pc, #408]	@ (800b0bc <tcp_receive+0x270>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	dc58      	bgt.n	800afe0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800af2e:	4b65      	ldr	r3, [pc, #404]	@ (800b0c4 <tcp_receive+0x278>)
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d14b      	bne.n	800afce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800af40:	4413      	add	r3, r2
 800af42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af44:	429a      	cmp	r2, r3
 800af46:	d142      	bne.n	800afce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800af4e:	2b00      	cmp	r3, #0
 800af50:	db3d      	blt.n	800afce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af56:	4b59      	ldr	r3, [pc, #356]	@ (800b0bc <tcp_receive+0x270>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d137      	bne.n	800afce <tcp_receive+0x182>
              found_dupack = 1;
 800af5e:	2301      	movs	r3, #1
 800af60:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af68:	2bff      	cmp	r3, #255	@ 0xff
 800af6a:	d007      	beq.n	800af7c <tcp_receive+0x130>
                ++pcb->dupacks;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af72:	3301      	adds	r3, #1
 800af74:	b2da      	uxtb	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af82:	2b03      	cmp	r3, #3
 800af84:	d91b      	bls.n	800afbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af90:	4413      	add	r3, r2
 800af92:	b29a      	uxth	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d30a      	bcc.n	800afb4 <tcp_receive+0x168>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afa8:	4413      	add	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800afb2:	e004      	b.n	800afbe <tcp_receive+0x172>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800afba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d902      	bls.n	800afce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f002 fb3f 	bl	800d64c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800afce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f040 8161 	bne.w	800b298 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afde:	e15b      	b.n	800b298 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800afe0:	4b36      	ldr	r3, [pc, #216]	@ (800b0bc <tcp_receive+0x270>)
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	f2c0 814e 	blt.w	800b28e <tcp_receive+0x442>
 800aff2:	4b32      	ldr	r3, [pc, #200]	@ (800b0bc <tcp_receive+0x270>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	f300 8146 	bgt.w	800b28e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	8b5b      	ldrh	r3, [r3, #26]
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d010      	beq.n	800b030 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	8b5b      	ldrh	r3, [r3, #26]
 800b012:	f023 0304 	bic.w	r3, r3, #4
 800b016:	b29a      	uxth	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b03e:	10db      	asrs	r3, r3, #3
 800b040:	b21b      	sxth	r3, r3
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4413      	add	r3, r2
 800b04e:	b29b      	uxth	r3, r3
 800b050:	b21a      	sxth	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b058:	4b18      	ldr	r3, [pc, #96]	@ (800b0bc <tcp_receive+0x270>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b062:	b29b      	uxth	r3, r3
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b070:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <tcp_receive+0x270>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	7d1b      	ldrb	r3, [r3, #20]
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	f240 8097 	bls.w	800b1b0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b08e:	429a      	cmp	r2, r3
 800b090:	d245      	bcs.n	800b11e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8b5b      	ldrh	r3, [r3, #26]
 800b096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d014      	beq.n	800b0c8 <tcp_receive+0x27c>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e013      	b.n	800b0ca <tcp_receive+0x27e>
 800b0a2:	bf00      	nop
 800b0a4:	08018f38 	.word	0x08018f38
 800b0a8:	08019268 	.word	0x08019268
 800b0ac:	08018f84 	.word	0x08018f84
 800b0b0:	08019284 	.word	0x08019284
 800b0b4:	20008018 	.word	0x20008018
 800b0b8:	2000800c 	.word	0x2000800c
 800b0bc:	20008010 	.word	0x20008010
 800b0c0:	20007ffc 	.word	0x20007ffc
 800b0c4:	20008016 	.word	0x20008016
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b0ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0d8:	fb12 f303 	smulbb	r3, r2, r3
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	bf28      	it	cs
 800b0e4:	4613      	movcs	r3, r2
 800b0e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b0f0:	4413      	add	r3, r2
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d309      	bcc.n	800b112 <tcp_receive+0x2c6>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b104:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b106:	4413      	add	r3, r2
 800b108:	b29a      	uxth	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b110:	e04e      	b.n	800b1b0 <tcp_receive+0x364>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b118:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b11c:	e048      	b.n	800b1b0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b124:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b126:	4413      	add	r3, r2
 800b128:	b29a      	uxth	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b130:	429a      	cmp	r2, r3
 800b132:	d309      	bcc.n	800b148 <tcp_receive+0x2fc>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b13a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b13c:	4413      	add	r3, r2
 800b13e:	b29a      	uxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b146:	e004      	b.n	800b152 <tcp_receive+0x306>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b14e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b15e:	429a      	cmp	r2, r3
 800b160:	d326      	bcc.n	800b1b0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	b29a      	uxth	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b182:	4413      	add	r3, r2
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d30a      	bcc.n	800b1a6 <tcp_receive+0x35a>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b19a:	4413      	add	r3, r2
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b1a4:	e004      	b.n	800b1b0 <tcp_receive+0x364>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1b8:	4a98      	ldr	r2, [pc, #608]	@ (800b41c <tcp_receive+0x5d0>)
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff fdca 	bl	800ad54 <tcp_free_acked_segments>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1ce:	4a94      	ldr	r2, [pc, #592]	@ (800b420 <tcp_receive+0x5d4>)
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fdbf 	bl	800ad54 <tcp_free_acked_segments>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d104      	bne.n	800b1ee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1ea:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b1ec:	e002      	b.n	800b1f4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d103      	bne.n	800b20a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b210:	4b84      	ldr	r3, [pc, #528]	@ (800b424 <tcp_receive+0x5d8>)
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	4413      	add	r3, r2
 800b216:	b29a      	uxth	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	8b5b      	ldrh	r3, [r3, #26]
 800b222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b226:	2b00      	cmp	r3, #0
 800b228:	d035      	beq.n	800b296 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d118      	bne.n	800b264 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00c      	beq.n	800b254 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4618      	mov	r0, r3
 800b248:	f7fa fe86 	bl	8005f58 <lwip_htonl>
 800b24c:	4603      	mov	r3, r0
 800b24e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b250:	2b00      	cmp	r3, #0
 800b252:	dc20      	bgt.n	800b296 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	8b5b      	ldrh	r3, [r3, #26]
 800b258:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b262:	e018      	b.n	800b296 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	4618      	mov	r0, r3
 800b272:	f7fa fe71 	bl	8005f58 <lwip_htonl>
 800b276:	4603      	mov	r3, r0
 800b278:	1ae3      	subs	r3, r4, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc0b      	bgt.n	800b296 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	8b5b      	ldrh	r3, [r3, #26]
 800b282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b28c:	e003      	b.n	800b296 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f002 fbc6 	bl	800da20 <tcp_send_empty_ack>
 800b294:	e000      	b.n	800b298 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b296:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d05b      	beq.n	800b358 <tcp_receive+0x50c>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2a4:	4b60      	ldr	r3, [pc, #384]	@ (800b428 <tcp_receive+0x5dc>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da54      	bge.n	800b358 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b2ae:	4b5f      	ldr	r3, [pc, #380]	@ (800b42c <tcp_receive+0x5e0>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b2c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2cc:	10db      	asrs	r3, r3, #3
 800b2ce:	b21b      	sxth	r3, r3
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	b21a      	sxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b2f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da05      	bge.n	800b304 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b2f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b2fc:	425b      	negs	r3, r3
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b304:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b30e:	109b      	asrs	r3, r3, #2
 800b310:	b21b      	sxth	r3, r3
 800b312:	b29b      	uxth	r3, r3
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	b29b      	uxth	r3, r3
 800b318:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b322:	b29a      	uxth	r2, r3
 800b324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b328:	4413      	add	r3, r2
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	b21a      	sxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b338:	10db      	asrs	r3, r3, #3
 800b33a:	b21b      	sxth	r3, r3
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b344:	b29b      	uxth	r3, r3
 800b346:	4413      	add	r3, r2
 800b348:	b29b      	uxth	r3, r3
 800b34a:	b21a      	sxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b358:	4b35      	ldr	r3, [pc, #212]	@ (800b430 <tcp_receive+0x5e4>)
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 84df 	beq.w	800bd20 <tcp_receive+0xed4>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	7d1b      	ldrb	r3, [r3, #20]
 800b366:	2b06      	cmp	r3, #6
 800b368:	f200 84da 	bhi.w	800bd20 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b370:	4b30      	ldr	r3, [pc, #192]	@ (800b434 <tcp_receive+0x5e8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f2c0 808f 	blt.w	800b49c <tcp_receive+0x650>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b382:	4b2b      	ldr	r3, [pc, #172]	@ (800b430 <tcp_receive+0x5e4>)
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	4619      	mov	r1, r3
 800b388:	4b2a      	ldr	r3, [pc, #168]	@ (800b434 <tcp_receive+0x5e8>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	440b      	add	r3, r1
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	3301      	adds	r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	f300 8082 	bgt.w	800b49c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b398:	4b27      	ldr	r3, [pc, #156]	@ (800b438 <tcp_receive+0x5ec>)
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3a2:	4b24      	ldr	r3, [pc, #144]	@ (800b434 <tcp_receive+0x5e8>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b3aa:	4b23      	ldr	r3, [pc, #140]	@ (800b438 <tcp_receive+0x5ec>)
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <tcp_receive+0x574>
 800b3b2:	4b22      	ldr	r3, [pc, #136]	@ (800b43c <tcp_receive+0x5f0>)
 800b3b4:	f240 5294 	movw	r2, #1428	@ 0x594
 800b3b8:	4921      	ldr	r1, [pc, #132]	@ (800b440 <tcp_receive+0x5f4>)
 800b3ba:	4822      	ldr	r0, [pc, #136]	@ (800b444 <tcp_receive+0x5f8>)
 800b3bc:	f008 fd36 	bl	8013e2c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d906      	bls.n	800b3d8 <tcp_receive+0x58c>
 800b3ca:	4b1c      	ldr	r3, [pc, #112]	@ (800b43c <tcp_receive+0x5f0>)
 800b3cc:	f240 5295 	movw	r2, #1429	@ 0x595
 800b3d0:	491d      	ldr	r1, [pc, #116]	@ (800b448 <tcp_receive+0x5fc>)
 800b3d2:	481c      	ldr	r0, [pc, #112]	@ (800b444 <tcp_receive+0x5f8>)
 800b3d4:	f008 fd2a 	bl	8013e2c <iprintf>
      off = (u16_t)off32;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b3de:	4b16      	ldr	r3, [pc, #88]	@ (800b438 <tcp_receive+0x5ec>)
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	891b      	ldrh	r3, [r3, #8]
 800b3e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d906      	bls.n	800b3fa <tcp_receive+0x5ae>
 800b3ec:	4b13      	ldr	r3, [pc, #76]	@ (800b43c <tcp_receive+0x5f0>)
 800b3ee:	f240 5297 	movw	r2, #1431	@ 0x597
 800b3f2:	4916      	ldr	r1, [pc, #88]	@ (800b44c <tcp_receive+0x600>)
 800b3f4:	4813      	ldr	r0, [pc, #76]	@ (800b444 <tcp_receive+0x5f8>)
 800b3f6:	f008 fd19 	bl	8013e2c <iprintf>
      inseg.len -= off;
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b438 <tcp_receive+0x5ec>)
 800b3fc:	891a      	ldrh	r2, [r3, #8]
 800b3fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	b29a      	uxth	r2, r3
 800b406:	4b0c      	ldr	r3, [pc, #48]	@ (800b438 <tcp_receive+0x5ec>)
 800b408:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b40a:	4b0b      	ldr	r3, [pc, #44]	@ (800b438 <tcp_receive+0x5ec>)
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	891a      	ldrh	r2, [r3, #8]
 800b410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b418:	e02a      	b.n	800b470 <tcp_receive+0x624>
 800b41a:	bf00      	nop
 800b41c:	080192a0 	.word	0x080192a0
 800b420:	080192a8 	.word	0x080192a8
 800b424:	20008014 	.word	0x20008014
 800b428:	20008010 	.word	0x20008010
 800b42c:	20007fd4 	.word	0x20007fd4
 800b430:	20008016 	.word	0x20008016
 800b434:	2000800c 	.word	0x2000800c
 800b438:	20007fec 	.word	0x20007fec
 800b43c:	08018f38 	.word	0x08018f38
 800b440:	080192b0 	.word	0x080192b0
 800b444:	08018f84 	.word	0x08018f84
 800b448:	080192c0 	.word	0x080192c0
 800b44c:	080192d0 	.word	0x080192d0
        off -= p->len;
 800b450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b452:	895b      	ldrh	r3, [r3, #10]
 800b454:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b460:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b462:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b466:	2200      	movs	r2, #0
 800b468:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b472:	895b      	ldrh	r3, [r3, #10]
 800b474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b478:	429a      	cmp	r2, r3
 800b47a:	d8e9      	bhi.n	800b450 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b47c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b480:	4619      	mov	r1, r3
 800b482:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b484:	f7fc f85a 	bl	800753c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48c:	4a90      	ldr	r2, [pc, #576]	@ (800b6d0 <tcp_receive+0x884>)
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	4b90      	ldr	r3, [pc, #576]	@ (800b6d4 <tcp_receive+0x888>)
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	4a8e      	ldr	r2, [pc, #568]	@ (800b6d0 <tcp_receive+0x884>)
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b49a:	e00d      	b.n	800b4b8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b49c:	4b8c      	ldr	r3, [pc, #560]	@ (800b6d0 <tcp_receive+0x884>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da06      	bge.n	800b4b8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8b5b      	ldrh	r3, [r3, #26]
 800b4ae:	f043 0302 	orr.w	r3, r3, #2
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4b8:	4b85      	ldr	r3, [pc, #532]	@ (800b6d0 <tcp_receive+0x884>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f2c0 8427 	blt.w	800bd16 <tcp_receive+0xeca>
 800b4c8:	4b81      	ldr	r3, [pc, #516]	@ (800b6d0 <tcp_receive+0x884>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b4d4:	440b      	add	r3, r1
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	3301      	adds	r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f300 841b 	bgt.w	800bd16 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4e4:	4b7a      	ldr	r3, [pc, #488]	@ (800b6d0 <tcp_receive+0x884>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	f040 8298 	bne.w	800ba1e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b4ee:	4b79      	ldr	r3, [pc, #484]	@ (800b6d4 <tcp_receive+0x888>)
 800b4f0:	891c      	ldrh	r4, [r3, #8]
 800b4f2:	4b78      	ldr	r3, [pc, #480]	@ (800b6d4 <tcp_receive+0x888>)
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	899b      	ldrh	r3, [r3, #12]
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fa fd16 	bl	8005f2c <lwip_htons>
 800b500:	4603      	mov	r3, r0
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <tcp_receive+0x6c4>
 800b50c:	2301      	movs	r3, #1
 800b50e:	e000      	b.n	800b512 <tcp_receive+0x6c6>
 800b510:	2300      	movs	r3, #0
 800b512:	4423      	add	r3, r4
 800b514:	b29a      	uxth	r2, r3
 800b516:	4b70      	ldr	r3, [pc, #448]	@ (800b6d8 <tcp_receive+0x88c>)
 800b518:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b51e:	4b6e      	ldr	r3, [pc, #440]	@ (800b6d8 <tcp_receive+0x88c>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d274      	bcs.n	800b610 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b526:	4b6b      	ldr	r3, [pc, #428]	@ (800b6d4 <tcp_receive+0x888>)
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	899b      	ldrh	r3, [r3, #12]
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fa fcfc 	bl	8005f2c <lwip_htons>
 800b534:	4603      	mov	r3, r0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d01e      	beq.n	800b57e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b540:	4b64      	ldr	r3, [pc, #400]	@ (800b6d4 <tcp_receive+0x888>)
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	899b      	ldrh	r3, [r3, #12]
 800b546:	b29b      	uxth	r3, r3
 800b548:	b21b      	sxth	r3, r3
 800b54a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b54e:	b21c      	sxth	r4, r3
 800b550:	4b60      	ldr	r3, [pc, #384]	@ (800b6d4 <tcp_receive+0x888>)
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	899b      	ldrh	r3, [r3, #12]
 800b556:	b29b      	uxth	r3, r3
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fa fce7 	bl	8005f2c <lwip_htons>
 800b55e:	4603      	mov	r3, r0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b566:	b29b      	uxth	r3, r3
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fa fcdf 	bl	8005f2c <lwip_htons>
 800b56e:	4603      	mov	r3, r0
 800b570:	b21b      	sxth	r3, r3
 800b572:	4323      	orrs	r3, r4
 800b574:	b21a      	sxth	r2, r3
 800b576:	4b57      	ldr	r3, [pc, #348]	@ (800b6d4 <tcp_receive+0x888>)
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	b292      	uxth	r2, r2
 800b57c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b582:	4b54      	ldr	r3, [pc, #336]	@ (800b6d4 <tcp_receive+0x888>)
 800b584:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b586:	4b53      	ldr	r3, [pc, #332]	@ (800b6d4 <tcp_receive+0x888>)
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	899b      	ldrh	r3, [r3, #12]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fa fccc 	bl	8005f2c <lwip_htons>
 800b594:	4603      	mov	r3, r0
 800b596:	b2db      	uxtb	r3, r3
 800b598:	f003 0302 	and.w	r3, r3, #2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d005      	beq.n	800b5ac <tcp_receive+0x760>
            inseg.len -= 1;
 800b5a0:	4b4c      	ldr	r3, [pc, #304]	@ (800b6d4 <tcp_receive+0x888>)
 800b5a2:	891b      	ldrh	r3, [r3, #8]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	4b4a      	ldr	r3, [pc, #296]	@ (800b6d4 <tcp_receive+0x888>)
 800b5aa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b5ac:	4b49      	ldr	r3, [pc, #292]	@ (800b6d4 <tcp_receive+0x888>)
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	4a48      	ldr	r2, [pc, #288]	@ (800b6d4 <tcp_receive+0x888>)
 800b5b2:	8912      	ldrh	r2, [r2, #8]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fb fec0 	bl	800733c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b5bc:	4b45      	ldr	r3, [pc, #276]	@ (800b6d4 <tcp_receive+0x888>)
 800b5be:	891c      	ldrh	r4, [r3, #8]
 800b5c0:	4b44      	ldr	r3, [pc, #272]	@ (800b6d4 <tcp_receive+0x888>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	899b      	ldrh	r3, [r3, #12]
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fa fcaf 	bl	8005f2c <lwip_htons>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 0303 	and.w	r3, r3, #3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <tcp_receive+0x792>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <tcp_receive+0x794>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4423      	add	r3, r4
 800b5e2:	b29a      	uxth	r2, r3
 800b5e4:	4b3c      	ldr	r3, [pc, #240]	@ (800b6d8 <tcp_receive+0x88c>)
 800b5e6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b5e8:	4b3b      	ldr	r3, [pc, #236]	@ (800b6d8 <tcp_receive+0x88c>)
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	4b38      	ldr	r3, [pc, #224]	@ (800b6d0 <tcp_receive+0x884>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	441a      	add	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f8:	6879      	ldr	r1, [r7, #4]
 800b5fa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b5fc:	440b      	add	r3, r1
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d006      	beq.n	800b610 <tcp_receive+0x7c4>
 800b602:	4b36      	ldr	r3, [pc, #216]	@ (800b6dc <tcp_receive+0x890>)
 800b604:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b608:	4935      	ldr	r1, [pc, #212]	@ (800b6e0 <tcp_receive+0x894>)
 800b60a:	4836      	ldr	r0, [pc, #216]	@ (800b6e4 <tcp_receive+0x898>)
 800b60c:	f008 fc0e 	bl	8013e2c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80e6 	beq.w	800b7e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b61a:	4b2e      	ldr	r3, [pc, #184]	@ (800b6d4 <tcp_receive+0x888>)
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	899b      	ldrh	r3, [r3, #12]
 800b620:	b29b      	uxth	r3, r3
 800b622:	4618      	mov	r0, r3
 800b624:	f7fa fc82 	bl	8005f2c <lwip_htons>
 800b628:	4603      	mov	r3, r0
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b634:	e00a      	b.n	800b64c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b63a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7fd fcdd 	bl	8009006 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1f0      	bne.n	800b636 <tcp_receive+0x7ea>
 800b654:	e0c7      	b.n	800b7e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b65c:	e051      	b.n	800b702 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	899b      	ldrh	r3, [r3, #12]
 800b664:	b29b      	uxth	r3, r3
 800b666:	4618      	mov	r0, r3
 800b668:	f7fa fc60 	bl	8005f2c <lwip_htons>
 800b66c:	4603      	mov	r3, r0
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	d03c      	beq.n	800b6f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b678:	4b16      	ldr	r3, [pc, #88]	@ (800b6d4 <tcp_receive+0x888>)
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	899b      	ldrh	r3, [r3, #12]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	4618      	mov	r0, r3
 800b682:	f7fa fc53 	bl	8005f2c <lwip_htons>
 800b686:	4603      	mov	r3, r0
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d12f      	bne.n	800b6f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b692:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <tcp_receive+0x888>)
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	899b      	ldrh	r3, [r3, #12]
 800b698:	b29c      	uxth	r4, r3
 800b69a:	2001      	movs	r0, #1
 800b69c:	f7fa fc46 	bl	8005f2c <lwip_htons>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d4 <tcp_receive+0x888>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	4322      	orrs	r2, r4
 800b6aa:	b292      	uxth	r2, r2
 800b6ac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b6ae:	4b09      	ldr	r3, [pc, #36]	@ (800b6d4 <tcp_receive+0x888>)
 800b6b0:	891c      	ldrh	r4, [r3, #8]
 800b6b2:	4b08      	ldr	r3, [pc, #32]	@ (800b6d4 <tcp_receive+0x888>)
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	899b      	ldrh	r3, [r3, #12]
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fa fc36 	bl	8005f2c <lwip_htons>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00d      	beq.n	800b6e8 <tcp_receive+0x89c>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e00c      	b.n	800b6ea <tcp_receive+0x89e>
 800b6d0:	2000800c 	.word	0x2000800c
 800b6d4:	20007fec 	.word	0x20007fec
 800b6d8:	20008016 	.word	0x20008016
 800b6dc:	08018f38 	.word	0x08018f38
 800b6e0:	080192e0 	.word	0x080192e0
 800b6e4:	08018f84 	.word	0x08018f84
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4423      	add	r3, r4
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	4b98      	ldr	r3, [pc, #608]	@ (800b950 <tcp_receive+0xb04>)
 800b6f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b6fc:	6938      	ldr	r0, [r7, #16]
 800b6fe:	f7fd fc82 	bl	8009006 <tcp_seg_free>
            while (next &&
 800b702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00e      	beq.n	800b726 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b708:	4b91      	ldr	r3, [pc, #580]	@ (800b950 <tcp_receive+0xb04>)
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	4b91      	ldr	r3, [pc, #580]	@ (800b954 <tcp_receive+0xb08>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	441a      	add	r2, r3
 800b714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b71c:	8909      	ldrh	r1, [r1, #8]
 800b71e:	440b      	add	r3, r1
 800b720:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b722:	2b00      	cmp	r3, #0
 800b724:	da9b      	bge.n	800b65e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d059      	beq.n	800b7e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b72c:	4b88      	ldr	r3, [pc, #544]	@ (800b950 <tcp_receive+0xb04>)
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	4b88      	ldr	r3, [pc, #544]	@ (800b954 <tcp_receive+0xb08>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	441a      	add	r2, r3
 800b738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b740:	2b00      	cmp	r3, #0
 800b742:	dd4d      	ble.n	800b7e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	4b81      	ldr	r3, [pc, #516]	@ (800b954 <tcp_receive+0xb08>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	b29b      	uxth	r3, r3
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	b29a      	uxth	r2, r3
 800b756:	4b80      	ldr	r3, [pc, #512]	@ (800b958 <tcp_receive+0xb0c>)
 800b758:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b75a:	4b7f      	ldr	r3, [pc, #508]	@ (800b958 <tcp_receive+0xb0c>)
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	899b      	ldrh	r3, [r3, #12]
 800b760:	b29b      	uxth	r3, r3
 800b762:	4618      	mov	r0, r3
 800b764:	f7fa fbe2 	bl	8005f2c <lwip_htons>
 800b768:	4603      	mov	r3, r0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <tcp_receive+0x934>
                inseg.len -= 1;
 800b774:	4b78      	ldr	r3, [pc, #480]	@ (800b958 <tcp_receive+0xb0c>)
 800b776:	891b      	ldrh	r3, [r3, #8]
 800b778:	3b01      	subs	r3, #1
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	4b76      	ldr	r3, [pc, #472]	@ (800b958 <tcp_receive+0xb0c>)
 800b77e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b780:	4b75      	ldr	r3, [pc, #468]	@ (800b958 <tcp_receive+0xb0c>)
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4a74      	ldr	r2, [pc, #464]	@ (800b958 <tcp_receive+0xb0c>)
 800b786:	8912      	ldrh	r2, [r2, #8]
 800b788:	4611      	mov	r1, r2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fb fdd6 	bl	800733c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b790:	4b71      	ldr	r3, [pc, #452]	@ (800b958 <tcp_receive+0xb0c>)
 800b792:	891c      	ldrh	r4, [r3, #8]
 800b794:	4b70      	ldr	r3, [pc, #448]	@ (800b958 <tcp_receive+0xb0c>)
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	899b      	ldrh	r3, [r3, #12]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fa fbc5 	bl	8005f2c <lwip_htons>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <tcp_receive+0x966>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <tcp_receive+0x968>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4423      	add	r3, r4
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	4b65      	ldr	r3, [pc, #404]	@ (800b950 <tcp_receive+0xb04>)
 800b7ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b7bc:	4b64      	ldr	r3, [pc, #400]	@ (800b950 <tcp_receive+0xb04>)
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4b64      	ldr	r3, [pc, #400]	@ (800b954 <tcp_receive+0xb08>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	441a      	add	r2, r3
 800b7c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d006      	beq.n	800b7e0 <tcp_receive+0x994>
 800b7d2:	4b62      	ldr	r3, [pc, #392]	@ (800b95c <tcp_receive+0xb10>)
 800b7d4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b7d8:	4961      	ldr	r1, [pc, #388]	@ (800b960 <tcp_receive+0xb14>)
 800b7da:	4862      	ldr	r0, [pc, #392]	@ (800b964 <tcp_receive+0xb18>)
 800b7dc:	f008 fb26 	bl	8013e2c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7e4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b7e6:	4b5a      	ldr	r3, [pc, #360]	@ (800b950 <tcp_receive+0xb04>)
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	4b59      	ldr	r3, [pc, #356]	@ (800b954 <tcp_receive+0xb08>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	441a      	add	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b7fa:	4b55      	ldr	r3, [pc, #340]	@ (800b950 <tcp_receive+0xb04>)
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d206      	bcs.n	800b810 <tcp_receive+0x9c4>
 800b802:	4b56      	ldr	r3, [pc, #344]	@ (800b95c <tcp_receive+0xb10>)
 800b804:	f240 6207 	movw	r2, #1543	@ 0x607
 800b808:	4957      	ldr	r1, [pc, #348]	@ (800b968 <tcp_receive+0xb1c>)
 800b80a:	4856      	ldr	r0, [pc, #344]	@ (800b964 <tcp_receive+0xb18>)
 800b80c:	f008 fb0e 	bl	8013e2c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b814:	4b4e      	ldr	r3, [pc, #312]	@ (800b950 <tcp_receive+0xb04>)
 800b816:	881b      	ldrh	r3, [r3, #0]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7fc fdb1 	bl	8008388 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b826:	4b4c      	ldr	r3, [pc, #304]	@ (800b958 <tcp_receive+0xb0c>)
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	891b      	ldrh	r3, [r3, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d006      	beq.n	800b83e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b830:	4b49      	ldr	r3, [pc, #292]	@ (800b958 <tcp_receive+0xb0c>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	4a4d      	ldr	r2, [pc, #308]	@ (800b96c <tcp_receive+0xb20>)
 800b836:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b838:	4b47      	ldr	r3, [pc, #284]	@ (800b958 <tcp_receive+0xb0c>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b83e:	4b46      	ldr	r3, [pc, #280]	@ (800b958 <tcp_receive+0xb0c>)
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	899b      	ldrh	r3, [r3, #12]
 800b844:	b29b      	uxth	r3, r3
 800b846:	4618      	mov	r0, r3
 800b848:	f7fa fb70 	bl	8005f2c <lwip_htons>
 800b84c:	4603      	mov	r3, r0
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80b8 	beq.w	800b9ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b85a:	4b45      	ldr	r3, [pc, #276]	@ (800b970 <tcp_receive+0xb24>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f043 0320 	orr.w	r3, r3, #32
 800b862:	b2da      	uxtb	r2, r3
 800b864:	4b42      	ldr	r3, [pc, #264]	@ (800b970 <tcp_receive+0xb24>)
 800b866:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b868:	e0af      	b.n	800b9ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b86e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4a36      	ldr	r2, [pc, #216]	@ (800b954 <tcp_receive+0xb08>)
 800b87a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	891b      	ldrh	r3, [r3, #8]
 800b880:	461c      	mov	r4, r3
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	899b      	ldrh	r3, [r3, #12]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fa fb4e 	bl	8005f2c <lwip_htons>
 800b890:	4603      	mov	r3, r0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 0303 	and.w	r3, r3, #3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <tcp_receive+0xa54>
 800b89c:	2301      	movs	r3, #1
 800b89e:	e000      	b.n	800b8a2 <tcp_receive+0xa56>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	191a      	adds	r2, r3, r4
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	441a      	add	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8b2:	461c      	mov	r4, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	891b      	ldrh	r3, [r3, #8]
 800b8b8:	461d      	mov	r5, r3
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	899b      	ldrh	r3, [r3, #12]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fa fb32 	bl	8005f2c <lwip_htons>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <tcp_receive+0xa8c>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e000      	b.n	800b8da <tcp_receive+0xa8e>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	442b      	add	r3, r5
 800b8dc:	429c      	cmp	r4, r3
 800b8de:	d206      	bcs.n	800b8ee <tcp_receive+0xaa2>
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	@ (800b95c <tcp_receive+0xb10>)
 800b8e2:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b8e6:	4923      	ldr	r1, [pc, #140]	@ (800b974 <tcp_receive+0xb28>)
 800b8e8:	481e      	ldr	r0, [pc, #120]	@ (800b964 <tcp_receive+0xb18>)
 800b8ea:	f008 fa9f 	bl	8013e2c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	891b      	ldrh	r3, [r3, #8]
 800b8f2:	461c      	mov	r4, r3
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	899b      	ldrh	r3, [r3, #12]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fa fb15 	bl	8005f2c <lwip_htons>
 800b902:	4603      	mov	r3, r0
 800b904:	b2db      	uxtb	r3, r3
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <tcp_receive+0xac6>
 800b90e:	2301      	movs	r3, #1
 800b910:	e000      	b.n	800b914 <tcp_receive+0xac8>
 800b912:	2300      	movs	r3, #0
 800b914:	1919      	adds	r1, r3, r4
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b91a:	b28b      	uxth	r3, r1
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	b29a      	uxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7fc fd2f 	bl	8008388 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	891b      	ldrh	r3, [r3, #8]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d028      	beq.n	800b986 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b934:	4b0d      	ldr	r3, [pc, #52]	@ (800b96c <tcp_receive+0xb20>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d01d      	beq.n	800b978 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b93c:	4b0b      	ldr	r3, [pc, #44]	@ (800b96c <tcp_receive+0xb20>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fb ff40 	bl	80077cc <pbuf_cat>
 800b94c:	e018      	b.n	800b980 <tcp_receive+0xb34>
 800b94e:	bf00      	nop
 800b950:	20008016 	.word	0x20008016
 800b954:	2000800c 	.word	0x2000800c
 800b958:	20007fec 	.word	0x20007fec
 800b95c:	08018f38 	.word	0x08018f38
 800b960:	08019318 	.word	0x08019318
 800b964:	08018f84 	.word	0x08018f84
 800b968:	08019354 	.word	0x08019354
 800b96c:	2000801c 	.word	0x2000801c
 800b970:	20008019 	.word	0x20008019
 800b974:	08019374 	.word	0x08019374
            } else {
              recv_data = cseg->p;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	4a70      	ldr	r2, [pc, #448]	@ (800bb40 <tcp_receive+0xcf4>)
 800b97e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2200      	movs	r2, #0
 800b984:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	899b      	ldrh	r3, [r3, #12]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fa facc 	bl	8005f2c <lwip_htons>
 800b994:	4603      	mov	r3, r0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00d      	beq.n	800b9bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b9a0:	4b68      	ldr	r3, [pc, #416]	@ (800bb44 <tcp_receive+0xcf8>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	f043 0320 	orr.w	r3, r3, #32
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	4b66      	ldr	r3, [pc, #408]	@ (800bb44 <tcp_receive+0xcf8>)
 800b9ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7d1b      	ldrb	r3, [r3, #20]
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d102      	bne.n	800b9bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2207      	movs	r2, #7
 800b9ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b9c4:	68b8      	ldr	r0, [r7, #8]
 800b9c6:	f7fd fb1e 	bl	8009006 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d008      	beq.n	800b9e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	f43f af43 	beq.w	800b86a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8b5b      	ldrh	r3, [r3, #26]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <tcp_receive+0xbc2>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8b5b      	ldrh	r3, [r3, #26]
 800b9f4:	f023 0301 	bic.w	r3, r3, #1
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	835a      	strh	r2, [r3, #26]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	8b5b      	ldrh	r3, [r3, #26]
 800ba02:	f043 0302 	orr.w	r3, r3, #2
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba0c:	e187      	b.n	800bd1e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8b5b      	ldrh	r3, [r3, #26]
 800ba12:	f043 0301 	orr.w	r3, r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ba1c:	e17f      	b.n	800bd1e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ba26:	4848      	ldr	r0, [pc, #288]	@ (800bb48 <tcp_receive+0xcfc>)
 800ba28:	f7fd fb06 	bl	8009038 <tcp_seg_copy>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	675a      	str	r2, [r3, #116]	@ 0x74
 800ba32:	e16c      	b.n	800bd0e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba3e:	e156      	b.n	800bcee <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ba40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	4b41      	ldr	r3, [pc, #260]	@ (800bb4c <tcp_receive+0xd00>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d11d      	bne.n	800ba8a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ba4e:	4b3e      	ldr	r3, [pc, #248]	@ (800bb48 <tcp_receive+0xcfc>)
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba54:	891b      	ldrh	r3, [r3, #8]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	f240 814e 	bls.w	800bcf8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba5c:	483a      	ldr	r0, [pc, #232]	@ (800bb48 <tcp_receive+0xcfc>)
 800ba5e:	f7fd faeb 	bl	8009038 <tcp_seg_copy>
 800ba62:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 8148 	beq.w	800bcfc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ba72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	e002      	b.n	800ba80 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ba80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba82:	6978      	ldr	r0, [r7, #20]
 800ba84:	f7ff f8de 	bl	800ac44 <tcp_oos_insert_segment>
                }
                break;
 800ba88:	e138      	b.n	800bcfc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ba8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d117      	bne.n	800bac0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ba90:	4b2e      	ldr	r3, [pc, #184]	@ (800bb4c <tcp_receive+0xd00>)
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	da57      	bge.n	800bb50 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800baa0:	4829      	ldr	r0, [pc, #164]	@ (800bb48 <tcp_receive+0xcfc>)
 800baa2:	f7fd fac9 	bl	8009038 <tcp_seg_copy>
 800baa6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8128 	beq.w	800bd00 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bab6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bab8:	69b8      	ldr	r0, [r7, #24]
 800baba:	f7ff f8c3 	bl	800ac44 <tcp_oos_insert_segment>
                  }
                  break;
 800babe:	e11f      	b.n	800bd00 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bac0:	4b22      	ldr	r3, [pc, #136]	@ (800bb4c <tcp_receive+0xd00>)
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	2b00      	cmp	r3, #0
 800bad0:	db3e      	blt.n	800bb50 <tcp_receive+0xd04>
 800bad2:	4b1e      	ldr	r3, [pc, #120]	@ (800bb4c <tcp_receive+0xd00>)
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	3301      	adds	r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dc35      	bgt.n	800bb50 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bae4:	4818      	ldr	r0, [pc, #96]	@ (800bb48 <tcp_receive+0xcfc>)
 800bae6:	f7fd faa7 	bl	8009038 <tcp_seg_copy>
 800baea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 8108 	beq.w	800bd04 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800baf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bafc:	8912      	ldrh	r2, [r2, #8]
 800bafe:	441a      	add	r2, r3
 800bb00:	4b12      	ldr	r3, [pc, #72]	@ (800bb4c <tcp_receive+0xd00>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd12      	ble.n	800bb30 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bb0a:	4b10      	ldr	r3, [pc, #64]	@ (800bb4c <tcp_receive+0xd00>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb26:	891b      	ldrh	r3, [r3, #8]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f7fb fc06 	bl	800733c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bb30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb32:	69fa      	ldr	r2, [r7, #28]
 800bb34:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bb36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bb38:	69f8      	ldr	r0, [r7, #28]
 800bb3a:	f7ff f883 	bl	800ac44 <tcp_oos_insert_segment>
                  }
                  break;
 800bb3e:	e0e1      	b.n	800bd04 <tcp_receive+0xeb8>
 800bb40:	2000801c 	.word	0x2000801c
 800bb44:	20008019 	.word	0x20008019
 800bb48:	20007fec 	.word	0x20007fec
 800bb4c:	2000800c 	.word	0x2000800c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f040 80c5 	bne.w	800bce8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bb5e:	4b7f      	ldr	r3, [pc, #508]	@ (800bd5c <tcp_receive+0xf10>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f340 80bc 	ble.w	800bce8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	899b      	ldrh	r3, [r3, #12]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fa f9d7 	bl	8005f2c <lwip_htons>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f040 80be 	bne.w	800bd08 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bb8c:	4874      	ldr	r0, [pc, #464]	@ (800bd60 <tcp_receive+0xf14>)
 800bb8e:	f7fd fa53 	bl	8009038 <tcp_seg_copy>
 800bb92:	4602      	mov	r2, r0
 800bb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb96:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 80b5 	beq.w	800bd0c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbaa:	8912      	ldrh	r2, [r2, #8]
 800bbac:	441a      	add	r2, r3
 800bbae:	4b6b      	ldr	r3, [pc, #428]	@ (800bd5c <tcp_receive+0xf10>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dd12      	ble.n	800bbde <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bbb8:	4b68      	ldr	r3, [pc, #416]	@ (800bd5c <tcp_receive+0xf10>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbcc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd4:	891b      	ldrh	r3, [r3, #8]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4610      	mov	r0, r2
 800bbda:	f7fb fbaf 	bl	800733c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bbde:	4b61      	ldr	r3, [pc, #388]	@ (800bd64 <tcp_receive+0xf18>)
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4b5d      	ldr	r3, [pc, #372]	@ (800bd5c <tcp_receive+0xf10>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	441a      	add	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bbf2:	440b      	add	r3, r1
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f340 8088 	ble.w	800bd0c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	899b      	ldrh	r3, [r3, #12]
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fa f990 	bl	8005f2c <lwip_htons>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d021      	beq.n	800bc5c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	899b      	ldrh	r3, [r3, #12]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	b21b      	sxth	r3, r3
 800bc24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bc28:	b21c      	sxth	r4, r3
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	899b      	ldrh	r3, [r3, #12]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fa f979 	bl	8005f2c <lwip_htons>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fa f971 	bl	8005f2c <lwip_htons>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	b21b      	sxth	r3, r3
 800bc4e:	4323      	orrs	r3, r4
 800bc50:	b21a      	sxth	r2, r3
 800bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	b292      	uxth	r2, r2
 800bc5a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc66:	4413      	add	r3, r2
 800bc68:	b299      	uxth	r1, r3
 800bc6a:	4b3c      	ldr	r3, [pc, #240]	@ (800bd5c <tcp_receive+0xf10>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	1a8a      	subs	r2, r1, r2
 800bc76:	b292      	uxth	r2, r2
 800bc78:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	4619      	mov	r1, r3
 800bc88:	4610      	mov	r0, r2
 800bc8a:	f7fb fb57 	bl	800733c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	891c      	ldrh	r4, [r3, #8]
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	899b      	ldrh	r3, [r3, #12]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fa f944 	bl	8005f2c <lwip_htons>
 800bca4:	4603      	mov	r3, r0
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <tcp_receive+0xe68>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e000      	b.n	800bcb6 <tcp_receive+0xe6a>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4423      	add	r3, r4
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	4b2a      	ldr	r3, [pc, #168]	@ (800bd64 <tcp_receive+0xf18>)
 800bcbc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bcbe:	4b29      	ldr	r3, [pc, #164]	@ (800bd64 <tcp_receive+0xf18>)
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4b25      	ldr	r3, [pc, #148]	@ (800bd5c <tcp_receive+0xf10>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	441a      	add	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bcd2:	440b      	add	r3, r1
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d019      	beq.n	800bd0c <tcp_receive+0xec0>
 800bcd8:	4b23      	ldr	r3, [pc, #140]	@ (800bd68 <tcp_receive+0xf1c>)
 800bcda:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bcde:	4923      	ldr	r1, [pc, #140]	@ (800bd6c <tcp_receive+0xf20>)
 800bce0:	4823      	ldr	r0, [pc, #140]	@ (800bd70 <tcp_receive+0xf24>)
 800bce2:	f008 f8a3 	bl	8013e2c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bce6:	e011      	b.n	800bd0c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f47f aea5 	bne.w	800ba40 <tcp_receive+0xbf4>
 800bcf6:	e00a      	b.n	800bd0e <tcp_receive+0xec2>
                break;
 800bcf8:	bf00      	nop
 800bcfa:	e008      	b.n	800bd0e <tcp_receive+0xec2>
                break;
 800bcfc:	bf00      	nop
 800bcfe:	e006      	b.n	800bd0e <tcp_receive+0xec2>
                  break;
 800bd00:	bf00      	nop
 800bd02:	e004      	b.n	800bd0e <tcp_receive+0xec2>
                  break;
 800bd04:	bf00      	nop
 800bd06:	e002      	b.n	800bd0e <tcp_receive+0xec2>
                  break;
 800bd08:	bf00      	nop
 800bd0a:	e000      	b.n	800bd0e <tcp_receive+0xec2>
                break;
 800bd0c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 fe86 	bl	800da20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bd14:	e003      	b.n	800bd1e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f001 fe82 	bl	800da20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd1c:	e01a      	b.n	800bd54 <tcp_receive+0xf08>
 800bd1e:	e019      	b.n	800bd54 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bd20:	4b0e      	ldr	r3, [pc, #56]	@ (800bd5c <tcp_receive+0xf10>)
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	db0a      	blt.n	800bd44 <tcp_receive+0xef8>
 800bd2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd5c <tcp_receive+0xf10>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bd3a:	440b      	add	r3, r1
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	3301      	adds	r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd07      	ble.n	800bd54 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8b5b      	ldrh	r3, [r3, #26]
 800bd48:	f043 0302 	orr.w	r3, r3, #2
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bd52:	e7ff      	b.n	800bd54 <tcp_receive+0xf08>
 800bd54:	bf00      	nop
 800bd56:	3750      	adds	r7, #80	@ 0x50
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5c:	2000800c 	.word	0x2000800c
 800bd60:	20007fec 	.word	0x20007fec
 800bd64:	20008016 	.word	0x20008016
 800bd68:	08018f38 	.word	0x08018f38
 800bd6c:	080192e0 	.word	0x080192e0
 800bd70:	08018f84 	.word	0x08018f84

0800bd74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bd7a:	4b15      	ldr	r3, [pc, #84]	@ (800bdd0 <tcp_get_next_optbyte+0x5c>)
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	1c5a      	adds	r2, r3, #1
 800bd80:	b291      	uxth	r1, r2
 800bd82:	4a13      	ldr	r2, [pc, #76]	@ (800bdd0 <tcp_get_next_optbyte+0x5c>)
 800bd84:	8011      	strh	r1, [r2, #0]
 800bd86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bd88:	4b12      	ldr	r3, [pc, #72]	@ (800bdd4 <tcp_get_next_optbyte+0x60>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <tcp_get_next_optbyte+0x26>
 800bd90:	4b11      	ldr	r3, [pc, #68]	@ (800bdd8 <tcp_get_next_optbyte+0x64>)
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	88fa      	ldrh	r2, [r7, #6]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d208      	bcs.n	800bdac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bd9a:	4b10      	ldr	r3, [pc, #64]	@ (800bddc <tcp_get_next_optbyte+0x68>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bda2:	88fb      	ldrh	r3, [r7, #6]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	4413      	add	r3, r2
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	e00b      	b.n	800bdc4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bdac:	88fb      	ldrh	r3, [r7, #6]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	4b09      	ldr	r3, [pc, #36]	@ (800bdd8 <tcp_get_next_optbyte+0x64>)
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bdba:	4b06      	ldr	r3, [pc, #24]	@ (800bdd4 <tcp_get_next_optbyte+0x60>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	797b      	ldrb	r3, [r7, #5]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	20008008 	.word	0x20008008
 800bdd4:	20008004 	.word	0x20008004
 800bdd8:	20008002 	.word	0x20008002
 800bddc:	20007ffc 	.word	0x20007ffc

0800bde0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <tcp_parseopt+0x1c>
 800bdee:	4b32      	ldr	r3, [pc, #200]	@ (800beb8 <tcp_parseopt+0xd8>)
 800bdf0:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bdf4:	4931      	ldr	r1, [pc, #196]	@ (800bebc <tcp_parseopt+0xdc>)
 800bdf6:	4832      	ldr	r0, [pc, #200]	@ (800bec0 <tcp_parseopt+0xe0>)
 800bdf8:	f008 f818 	bl	8013e2c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bdfc:	4b31      	ldr	r3, [pc, #196]	@ (800bec4 <tcp_parseopt+0xe4>)
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d056      	beq.n	800beb2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be04:	4b30      	ldr	r3, [pc, #192]	@ (800bec8 <tcp_parseopt+0xe8>)
 800be06:	2200      	movs	r2, #0
 800be08:	801a      	strh	r2, [r3, #0]
 800be0a:	e046      	b.n	800be9a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800be0c:	f7ff ffb2 	bl	800bd74 <tcp_get_next_optbyte>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d006      	beq.n	800be28 <tcp_parseopt+0x48>
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	dc2a      	bgt.n	800be74 <tcp_parseopt+0x94>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d042      	beq.n	800bea8 <tcp_parseopt+0xc8>
 800be22:	2b01      	cmp	r3, #1
 800be24:	d038      	beq.n	800be98 <tcp_parseopt+0xb8>
 800be26:	e025      	b.n	800be74 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800be28:	f7ff ffa4 	bl	800bd74 <tcp_get_next_optbyte>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d13c      	bne.n	800beac <tcp_parseopt+0xcc>
 800be32:	4b25      	ldr	r3, [pc, #148]	@ (800bec8 <tcp_parseopt+0xe8>)
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	3301      	adds	r3, #1
 800be38:	4a22      	ldr	r2, [pc, #136]	@ (800bec4 <tcp_parseopt+0xe4>)
 800be3a:	8812      	ldrh	r2, [r2, #0]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	da35      	bge.n	800beac <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800be40:	f7ff ff98 	bl	800bd74 <tcp_get_next_optbyte>
 800be44:	4603      	mov	r3, r0
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800be4a:	f7ff ff93 	bl	800bd74 <tcp_get_next_optbyte>
 800be4e:	4603      	mov	r3, r0
 800be50:	461a      	mov	r2, r3
 800be52:	89bb      	ldrh	r3, [r7, #12]
 800be54:	4313      	orrs	r3, r2
 800be56:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800be58:	89bb      	ldrh	r3, [r7, #12]
 800be5a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800be5e:	d804      	bhi.n	800be6a <tcp_parseopt+0x8a>
 800be60:	89bb      	ldrh	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <tcp_parseopt+0x8a>
 800be66:	89ba      	ldrh	r2, [r7, #12]
 800be68:	e001      	b.n	800be6e <tcp_parseopt+0x8e>
 800be6a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800be72:	e012      	b.n	800be9a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800be74:	f7ff ff7e 	bl	800bd74 <tcp_get_next_optbyte>
 800be78:	4603      	mov	r3, r0
 800be7a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800be7c:	7afb      	ldrb	r3, [r7, #11]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d916      	bls.n	800beb0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	b29a      	uxth	r2, r3
 800be86:	4b10      	ldr	r3, [pc, #64]	@ (800bec8 <tcp_parseopt+0xe8>)
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	4413      	add	r3, r2
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	3b02      	subs	r3, #2
 800be90:	b29a      	uxth	r2, r3
 800be92:	4b0d      	ldr	r3, [pc, #52]	@ (800bec8 <tcp_parseopt+0xe8>)
 800be94:	801a      	strh	r2, [r3, #0]
 800be96:	e000      	b.n	800be9a <tcp_parseopt+0xba>
          break;
 800be98:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800be9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bec8 <tcp_parseopt+0xe8>)
 800be9c:	881a      	ldrh	r2, [r3, #0]
 800be9e:	4b09      	ldr	r3, [pc, #36]	@ (800bec4 <tcp_parseopt+0xe4>)
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d3b2      	bcc.n	800be0c <tcp_parseopt+0x2c>
 800bea6:	e004      	b.n	800beb2 <tcp_parseopt+0xd2>
          return;
 800bea8:	bf00      	nop
 800beaa:	e002      	b.n	800beb2 <tcp_parseopt+0xd2>
            return;
 800beac:	bf00      	nop
 800beae:	e000      	b.n	800beb2 <tcp_parseopt+0xd2>
            return;
 800beb0:	bf00      	nop
      }
    }
  }
}
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	08018f38 	.word	0x08018f38
 800bebc:	0801939c 	.word	0x0801939c
 800bec0:	08018f84 	.word	0x08018f84
 800bec4:	20008000 	.word	0x20008000
 800bec8:	20008008 	.word	0x20008008

0800becc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800becc:	b480      	push	{r7}
 800bece:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bed0:	4b05      	ldr	r3, [pc, #20]	@ (800bee8 <tcp_trigger_input_pcb_close+0x1c>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	f043 0310 	orr.w	r3, r3, #16
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <tcp_trigger_input_pcb_close+0x1c>)
 800bedc:	701a      	strb	r2, [r3, #0]
}
 800bede:	bf00      	nop
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20008019 	.word	0x20008019

0800beec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d00a      	beq.n	800bf14 <tcp_route+0x28>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	7a1b      	ldrb	r3, [r3, #8]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d006      	beq.n	800bf14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	7a1b      	ldrb	r3, [r3, #8]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fb f83c 	bl	8006f88 <netif_get_by_index>
 800bf10:	4603      	mov	r3, r0
 800bf12:	e003      	b.n	800bf1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f005 fc9f 	bl	8011858 <ip4_route>
 800bf1a:	4603      	mov	r3, r0
  }
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bf24:	b590      	push	{r4, r7, lr}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	603b      	str	r3, [r7, #0]
 800bf30:	4613      	mov	r3, r2
 800bf32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d105      	bne.n	800bf46 <tcp_create_segment+0x22>
 800bf3a:	4b43      	ldr	r3, [pc, #268]	@ (800c048 <tcp_create_segment+0x124>)
 800bf3c:	22a3      	movs	r2, #163	@ 0xa3
 800bf3e:	4943      	ldr	r1, [pc, #268]	@ (800c04c <tcp_create_segment+0x128>)
 800bf40:	4843      	ldr	r0, [pc, #268]	@ (800c050 <tcp_create_segment+0x12c>)
 800bf42:	f007 ff73 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d105      	bne.n	800bf58 <tcp_create_segment+0x34>
 800bf4c:	4b3e      	ldr	r3, [pc, #248]	@ (800c048 <tcp_create_segment+0x124>)
 800bf4e:	22a4      	movs	r2, #164	@ 0xa4
 800bf50:	4940      	ldr	r1, [pc, #256]	@ (800c054 <tcp_create_segment+0x130>)
 800bf52:	483f      	ldr	r0, [pc, #252]	@ (800c050 <tcp_create_segment+0x12c>)
 800bf54:	f007 ff6a 	bl	8013e2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bf66:	2003      	movs	r0, #3
 800bf68:	f7fa fc7c 	bl	8006864 <memp_malloc>
 800bf6c:	6138      	str	r0, [r7, #16]
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d104      	bne.n	800bf7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bf74:	68b8      	ldr	r0, [r7, #8]
 800bf76:	f7fb fb67 	bl	8007648 <pbuf_free>
    return NULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e060      	b.n	800c040 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bf84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	891a      	ldrh	r2, [r3, #8]
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d205      	bcs.n	800bfaa <tcp_create_segment+0x86>
 800bf9e:	4b2a      	ldr	r3, [pc, #168]	@ (800c048 <tcp_create_segment+0x124>)
 800bfa0:	22b0      	movs	r2, #176	@ 0xb0
 800bfa2:	492d      	ldr	r1, [pc, #180]	@ (800c058 <tcp_create_segment+0x134>)
 800bfa4:	482a      	ldr	r0, [pc, #168]	@ (800c050 <tcp_create_segment+0x12c>)
 800bfa6:	f007 ff41 	bl	8013e2c <iprintf>
  seg->len = p->tot_len - optlen;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	891a      	ldrh	r2, [r3, #8]
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bfba:	2114      	movs	r1, #20
 800bfbc:	68b8      	ldr	r0, [r7, #8]
 800bfbe:	f7fb faad 	bl	800751c <pbuf_add_header>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bfc8:	6938      	ldr	r0, [r7, #16]
 800bfca:	f7fd f81c 	bl	8009006 <tcp_seg_free>
    return NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e036      	b.n	800c040 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8ada      	ldrh	r2, [r3, #22]
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	68dc      	ldr	r4, [r3, #12]
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	f7f9 ffa1 	bl	8005f2c <lwip_htons>
 800bfea:	4603      	mov	r3, r0
 800bfec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	8b1a      	ldrh	r2, [r3, #24]
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	68dc      	ldr	r4, [r3, #12]
 800bff6:	4610      	mov	r0, r2
 800bff8:	f7f9 ff98 	bl	8005f2c <lwip_htons>
 800bffc:	4603      	mov	r3, r0
 800bffe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	68dc      	ldr	r4, [r3, #12]
 800c004:	6838      	ldr	r0, [r7, #0]
 800c006:	f7f9 ffa7 	bl	8005f58 <lwip_htonl>
 800c00a:	4603      	mov	r3, r0
 800c00c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	089b      	lsrs	r3, r3, #2
 800c012:	b2db      	uxtb	r3, r3
 800c014:	3305      	adds	r3, #5
 800c016:	b29b      	uxth	r3, r3
 800c018:	031b      	lsls	r3, r3, #12
 800c01a:	b29a      	uxth	r2, r3
 800c01c:	79fb      	ldrb	r3, [r7, #7]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	4313      	orrs	r3, r2
 800c022:	b29a      	uxth	r2, r3
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	68dc      	ldr	r4, [r3, #12]
 800c028:	4610      	mov	r0, r2
 800c02a:	f7f9 ff7f 	bl	8005f2c <lwip_htons>
 800c02e:	4603      	mov	r3, r0
 800c030:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	749a      	strb	r2, [r3, #18]
 800c03a:	2200      	movs	r2, #0
 800c03c:	74da      	strb	r2, [r3, #19]
  return seg;
 800c03e:	693b      	ldr	r3, [r7, #16]
}
 800c040:	4618      	mov	r0, r3
 800c042:	371c      	adds	r7, #28
 800c044:	46bd      	mov	sp, r7
 800c046:	bd90      	pop	{r4, r7, pc}
 800c048:	080193b8 	.word	0x080193b8
 800c04c:	080193ec 	.word	0x080193ec
 800c050:	0801940c 	.word	0x0801940c
 800c054:	08019434 	.word	0x08019434
 800c058:	08019458 	.word	0x08019458

0800c05c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	607b      	str	r3, [r7, #4]
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
 800c068:	460b      	mov	r3, r1
 800c06a:	81bb      	strh	r3, [r7, #12]
 800c06c:	4613      	mov	r3, r2
 800c06e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c070:	89bb      	ldrh	r3, [r7, #12]
 800c072:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d105      	bne.n	800c086 <tcp_pbuf_prealloc+0x2a>
 800c07a:	4b30      	ldr	r3, [pc, #192]	@ (800c13c <tcp_pbuf_prealloc+0xe0>)
 800c07c:	22e8      	movs	r2, #232	@ 0xe8
 800c07e:	4930      	ldr	r1, [pc, #192]	@ (800c140 <tcp_pbuf_prealloc+0xe4>)
 800c080:	4830      	ldr	r0, [pc, #192]	@ (800c144 <tcp_pbuf_prealloc+0xe8>)
 800c082:	f007 fed3 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d105      	bne.n	800c098 <tcp_pbuf_prealloc+0x3c>
 800c08c:	4b2b      	ldr	r3, [pc, #172]	@ (800c13c <tcp_pbuf_prealloc+0xe0>)
 800c08e:	22e9      	movs	r2, #233	@ 0xe9
 800c090:	492d      	ldr	r1, [pc, #180]	@ (800c148 <tcp_pbuf_prealloc+0xec>)
 800c092:	482c      	ldr	r0, [pc, #176]	@ (800c144 <tcp_pbuf_prealloc+0xe8>)
 800c094:	f007 feca 	bl	8013e2c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c098:	89ba      	ldrh	r2, [r7, #12]
 800c09a:	897b      	ldrh	r3, [r7, #10]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d221      	bcs.n	800c0e4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c0a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c0a4:	f003 0302 	and.w	r3, r3, #2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d111      	bne.n	800c0d0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	8b5b      	ldrh	r3, [r3, #26]
 800c0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d115      	bne.n	800c0e4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d103      	bne.n	800c0d0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d009      	beq.n	800c0e4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c0d0:	89bb      	ldrh	r3, [r7, #12]
 800c0d2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800c0d6:	f023 0203 	bic.w	r2, r3, #3
 800c0da:	897b      	ldrh	r3, [r7, #10]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	bf28      	it	cs
 800c0e0:	4613      	movcs	r3, r2
 800c0e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c0e4:	8af9      	ldrh	r1, [r7, #22]
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fa ffc7 	bl	8007080 <pbuf_alloc>
 800c0f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e019      	b.n	800c132 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d006      	beq.n	800c114 <tcp_pbuf_prealloc+0xb8>
 800c106:	4b0d      	ldr	r3, [pc, #52]	@ (800c13c <tcp_pbuf_prealloc+0xe0>)
 800c108:	f240 120b 	movw	r2, #267	@ 0x10b
 800c10c:	490f      	ldr	r1, [pc, #60]	@ (800c14c <tcp_pbuf_prealloc+0xf0>)
 800c10e:	480d      	ldr	r0, [pc, #52]	@ (800c144 <tcp_pbuf_prealloc+0xe8>)
 800c110:	f007 fe8c 	bl	8013e2c <iprintf>
  *oversize = p->len - length;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	895a      	ldrh	r2, [r3, #10]
 800c118:	89bb      	ldrh	r3, [r7, #12]
 800c11a:	1ad3      	subs	r3, r2, r3
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	89ba      	ldrh	r2, [r7, #12]
 800c126:	811a      	strh	r2, [r3, #8]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	891a      	ldrh	r2, [r3, #8]
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	815a      	strh	r2, [r3, #10]
  return p;
 800c130:	693b      	ldr	r3, [r7, #16]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	080193b8 	.word	0x080193b8
 800c140:	08019470 	.word	0x08019470
 800c144:	0801940c 	.word	0x0801940c
 800c148:	08019494 	.word	0x08019494
 800c14c:	080194b4 	.word	0x080194b4

0800c150 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	460b      	mov	r3, r1
 800c15a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <tcp_write_checks+0x20>
 800c162:	4b33      	ldr	r3, [pc, #204]	@ (800c230 <tcp_write_checks+0xe0>)
 800c164:	f240 1233 	movw	r2, #307	@ 0x133
 800c168:	4932      	ldr	r1, [pc, #200]	@ (800c234 <tcp_write_checks+0xe4>)
 800c16a:	4833      	ldr	r0, [pc, #204]	@ (800c238 <tcp_write_checks+0xe8>)
 800c16c:	f007 fe5e 	bl	8013e2c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	7d1b      	ldrb	r3, [r3, #20]
 800c174:	2b04      	cmp	r3, #4
 800c176:	d00e      	beq.n	800c196 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c17c:	2b07      	cmp	r3, #7
 800c17e:	d00a      	beq.n	800c196 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c184:	2b02      	cmp	r3, #2
 800c186:	d006      	beq.n	800c196 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d002      	beq.n	800c196 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c190:	f06f 030a 	mvn.w	r3, #10
 800c194:	e048      	b.n	800c228 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c196:	887b      	ldrh	r3, [r7, #2]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <tcp_write_checks+0x50>
    return ERR_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	e043      	b.n	800c228 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c1a6:	887a      	ldrh	r2, [r7, #2]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d909      	bls.n	800c1c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8b5b      	ldrh	r3, [r3, #26]
 800c1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c1be:	e033      	b.n	800c228 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1c6:	2b1e      	cmp	r3, #30
 800c1c8:	d909      	bls.n	800c1de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	8b5b      	ldrh	r3, [r3, #26]
 800c1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1dc:	e024      	b.n	800c228 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00f      	beq.n	800c208 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d11a      	bne.n	800c226 <tcp_write_checks+0xd6>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d116      	bne.n	800c226 <tcp_write_checks+0xd6>
 800c1f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c230 <tcp_write_checks+0xe0>)
 800c1fa:	f240 1255 	movw	r2, #341	@ 0x155
 800c1fe:	490f      	ldr	r1, [pc, #60]	@ (800c23c <tcp_write_checks+0xec>)
 800c200:	480d      	ldr	r0, [pc, #52]	@ (800c238 <tcp_write_checks+0xe8>)
 800c202:	f007 fe13 	bl	8013e2c <iprintf>
 800c206:	e00e      	b.n	800c226 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <tcp_write_checks+0xc8>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c214:	2b00      	cmp	r3, #0
 800c216:	d006      	beq.n	800c226 <tcp_write_checks+0xd6>
 800c218:	4b05      	ldr	r3, [pc, #20]	@ (800c230 <tcp_write_checks+0xe0>)
 800c21a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800c21e:	4908      	ldr	r1, [pc, #32]	@ (800c240 <tcp_write_checks+0xf0>)
 800c220:	4805      	ldr	r0, [pc, #20]	@ (800c238 <tcp_write_checks+0xe8>)
 800c222:	f007 fe03 	bl	8013e2c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	080193b8 	.word	0x080193b8
 800c234:	080194c8 	.word	0x080194c8
 800c238:	0801940c 	.word	0x0801940c
 800c23c:	080194e8 	.word	0x080194e8
 800c240:	08019524 	.word	0x08019524

0800c244 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c244:	b590      	push	{r4, r7, lr}
 800c246:	b09b      	sub	sp, #108	@ 0x6c
 800c248:	af04      	add	r7, sp, #16
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4611      	mov	r1, r2
 800c250:	461a      	mov	r2, r3
 800c252:	460b      	mov	r3, r1
 800c254:	80fb      	strh	r3, [r7, #6]
 800c256:	4613      	mov	r3, r2
 800c258:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	653b      	str	r3, [r7, #80]	@ 0x50
 800c262:	2300      	movs	r3, #0
 800c264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c266:	2300      	movs	r3, #0
 800c268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c26a:	2300      	movs	r3, #0
 800c26c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c26e:	2300      	movs	r3, #0
 800c270:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d109      	bne.n	800c2a0 <tcp_write+0x5c>
 800c28c:	4ba4      	ldr	r3, [pc, #656]	@ (800c520 <tcp_write+0x2dc>)
 800c28e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800c292:	49a4      	ldr	r1, [pc, #656]	@ (800c524 <tcp_write+0x2e0>)
 800c294:	48a4      	ldr	r0, [pc, #656]	@ (800c528 <tcp_write+0x2e4>)
 800c296:	f007 fdc9 	bl	8013e2c <iprintf>
 800c29a:	f06f 030f 	mvn.w	r3, #15
 800c29e:	e32a      	b.n	800c8f6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c2a6:	085b      	lsrs	r3, r3, #1
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	bf28      	it	cs
 800c2b2:	4613      	movcs	r3, r2
 800c2b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c2b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d102      	bne.n	800c2c2 <tcp_write+0x7e>
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2c0:	e000      	b.n	800c2c4 <tcp_write+0x80>
 800c2c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d109      	bne.n	800c2e0 <tcp_write+0x9c>
 800c2cc:	4b94      	ldr	r3, [pc, #592]	@ (800c520 <tcp_write+0x2dc>)
 800c2ce:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c2d2:	4996      	ldr	r1, [pc, #600]	@ (800c52c <tcp_write+0x2e8>)
 800c2d4:	4894      	ldr	r0, [pc, #592]	@ (800c528 <tcp_write+0x2e4>)
 800c2d6:	f007 fda9 	bl	8013e2c <iprintf>
 800c2da:	f06f 030f 	mvn.w	r3, #15
 800c2de:	e30a      	b.n	800c8f6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff ff33 	bl	800c150 <tcp_write_checks>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c2f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d002      	beq.n	800c2fe <tcp_write+0xba>
    return err;
 800c2f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c2fc:	e2fb      	b.n	800c8f6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c304:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c308:	2300      	movs	r3, #0
 800c30a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 80f6 	beq.w	800c504 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c31c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c31e:	e002      	b.n	800c326 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1f8      	bne.n	800c320 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c32e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c330:	7a9b      	ldrb	r3, [r3, #10]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	b29b      	uxth	r3, r3
 800c336:	f003 0304 	and.w	r3, r3, #4
 800c33a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c33c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c340:	891b      	ldrh	r3, [r3, #8]
 800c342:	4619      	mov	r1, r3
 800c344:	8c3b      	ldrh	r3, [r7, #32]
 800c346:	440b      	add	r3, r1
 800c348:	429a      	cmp	r2, r3
 800c34a:	da06      	bge.n	800c35a <tcp_write+0x116>
 800c34c:	4b74      	ldr	r3, [pc, #464]	@ (800c520 <tcp_write+0x2dc>)
 800c34e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c352:	4977      	ldr	r1, [pc, #476]	@ (800c530 <tcp_write+0x2ec>)
 800c354:	4874      	ldr	r0, [pc, #464]	@ (800c528 <tcp_write+0x2e4>)
 800c356:	f007 fd69 	bl	8013e2c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c35c:	891a      	ldrh	r2, [r3, #8]
 800c35e:	8c3b      	ldrh	r3, [r7, #32]
 800c360:	4413      	add	r3, r2
 800c362:	b29b      	uxth	r3, r3
 800c364:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c370:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c372:	8a7b      	ldrh	r3, [r7, #18]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d026      	beq.n	800c3c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c378:	8a7b      	ldrh	r3, [r7, #18]
 800c37a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d206      	bcs.n	800c38e <tcp_write+0x14a>
 800c380:	4b67      	ldr	r3, [pc, #412]	@ (800c520 <tcp_write+0x2dc>)
 800c382:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c386:	496b      	ldr	r1, [pc, #428]	@ (800c534 <tcp_write+0x2f0>)
 800c388:	4867      	ldr	r0, [pc, #412]	@ (800c528 <tcp_write+0x2e4>)
 800c38a:	f007 fd4f 	bl	8013e2c <iprintf>
      seg = last_unsent;
 800c38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c390:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c392:	8a7b      	ldrh	r3, [r7, #18]
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	4293      	cmp	r3, r2
 800c398:	bf28      	it	cs
 800c39a:	4613      	movcs	r3, r2
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	bf28      	it	cs
 800c3a4:	4613      	movcs	r3, r2
 800c3a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c3a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c3b4:	8a7a      	ldrh	r2, [r7, #18]
 800c3b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c3be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c3c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c3c6:	8a7b      	ldrh	r3, [r7, #18]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <tcp_write+0x1a0>
 800c3cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d006      	beq.n	800c3e4 <tcp_write+0x1a0>
 800c3d6:	4b52      	ldr	r3, [pc, #328]	@ (800c520 <tcp_write+0x2dc>)
 800c3d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3dc:	4956      	ldr	r1, [pc, #344]	@ (800c538 <tcp_write+0x2f4>)
 800c3de:	4852      	ldr	r0, [pc, #328]	@ (800c528 <tcp_write+0x2e4>)
 800c3e0:	f007 fd24 	bl	8013e2c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c3e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3e8:	88fb      	ldrh	r3, [r7, #6]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	f080 8167 	bcs.w	800c6be <tcp_write+0x47a>
 800c3f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8163 	beq.w	800c6be <tcp_write+0x47a>
 800c3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3fa:	891b      	ldrh	r3, [r3, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f000 815e 	beq.w	800c6be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c402:	88fa      	ldrh	r2, [r7, #6]
 800c404:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c408:	1ad2      	subs	r2, r2, r3
 800c40a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c40c:	4293      	cmp	r3, r2
 800c40e:	bfa8      	it	ge
 800c410:	4613      	movge	r3, r2
 800c412:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c416:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c418:	797b      	ldrb	r3, [r7, #5]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d027      	beq.n	800c472 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c422:	f107 0012 	add.w	r0, r7, #18
 800c426:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c428:	8bf9      	ldrh	r1, [r7, #30]
 800c42a:	2301      	movs	r3, #1
 800c42c:	9302      	str	r3, [sp, #8]
 800c42e:	797b      	ldrb	r3, [r7, #5]
 800c430:	9301      	str	r3, [sp, #4]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	4603      	mov	r3, r0
 800c438:	2000      	movs	r0, #0
 800c43a:	f7ff fe0f 	bl	800c05c <tcp_pbuf_prealloc>
 800c43e:	6578      	str	r0, [r7, #84]	@ 0x54
 800c440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 8225 	beq.w	800c892 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c44a:	6858      	ldr	r0, [r3, #4]
 800c44c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	4413      	add	r3, r2
 800c454:	8bfa      	ldrh	r2, [r7, #30]
 800c456:	4619      	mov	r1, r3
 800c458:	f007 fe1b 	bl	8014092 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c45c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c45e:	f7fb f97b 	bl	8007758 <pbuf_clen>
 800c462:	4603      	mov	r3, r0
 800c464:	461a      	mov	r2, r3
 800c466:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c46a:	4413      	add	r3, r2
 800c46c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c470:	e041      	b.n	800c4f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	637b      	str	r3, [r7, #52]	@ 0x34
 800c478:	e002      	b.n	800c480 <tcp_write+0x23c>
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f8      	bne.n	800c47a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48a:	7b1b      	ldrb	r3, [r3, #12]
 800c48c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d115      	bne.n	800c4c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c49a:	8952      	ldrh	r2, [r2, #10]
 800c49c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d10d      	bne.n	800c4c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c4a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d006      	beq.n	800c4ba <tcp_write+0x276>
 800c4ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c520 <tcp_write+0x2dc>)
 800c4ae:	f240 2231 	movw	r2, #561	@ 0x231
 800c4b2:	4922      	ldr	r1, [pc, #136]	@ (800c53c <tcp_write+0x2f8>)
 800c4b4:	481c      	ldr	r0, [pc, #112]	@ (800c528 <tcp_write+0x2e4>)
 800c4b6:	f007 fcb9 	bl	8013e2c <iprintf>
          extendlen = seglen;
 800c4ba:	8bfb      	ldrh	r3, [r7, #30]
 800c4bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c4be:	e01a      	b.n	800c4f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c4c0:	8bfb      	ldrh	r3, [r7, #30]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	f7fa fdda 	bl	8007080 <pbuf_alloc>
 800c4cc:	6578      	str	r0, [r7, #84]	@ 0x54
 800c4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 81e0 	beq.w	800c896 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c4d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	441a      	add	r2, r3
 800c4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c4e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c4e4:	f7fb f938 	bl	8007758 <pbuf_clen>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c4f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c4fa:	8bfb      	ldrh	r3, [r7, #30]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c502:	e0dc      	b.n	800c6be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 80d7 	beq.w	800c6be <tcp_write+0x47a>
 800c510:	4b03      	ldr	r3, [pc, #12]	@ (800c520 <tcp_write+0x2dc>)
 800c512:	f240 224a 	movw	r2, #586	@ 0x24a
 800c516:	490a      	ldr	r1, [pc, #40]	@ (800c540 <tcp_write+0x2fc>)
 800c518:	4803      	ldr	r0, [pc, #12]	@ (800c528 <tcp_write+0x2e4>)
 800c51a:	f007 fc87 	bl	8013e2c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c51e:	e0ce      	b.n	800c6be <tcp_write+0x47a>
 800c520:	080193b8 	.word	0x080193b8
 800c524:	08019558 	.word	0x08019558
 800c528:	0801940c 	.word	0x0801940c
 800c52c:	08019570 	.word	0x08019570
 800c530:	080195a4 	.word	0x080195a4
 800c534:	080195bc 	.word	0x080195bc
 800c538:	080195dc 	.word	0x080195dc
 800c53c:	080195fc 	.word	0x080195fc
 800c540:	08019628 	.word	0x08019628
    struct pbuf *p;
    u16_t left = len - pos;
 800c544:	88fa      	ldrh	r2, [r7, #6]
 800c546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c54e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c552:	b29b      	uxth	r3, r3
 800c554:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c55a:	8b7a      	ldrh	r2, [r7, #26]
 800c55c:	8bbb      	ldrh	r3, [r7, #28]
 800c55e:	4293      	cmp	r3, r2
 800c560:	bf28      	it	cs
 800c562:	4613      	movcs	r3, r2
 800c564:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c566:	797b      	ldrb	r3, [r7, #5]
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d036      	beq.n	800c5de <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c574:	b29a      	uxth	r2, r3
 800c576:	8b3b      	ldrh	r3, [r7, #24]
 800c578:	4413      	add	r3, r2
 800c57a:	b299      	uxth	r1, r3
 800c57c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c57e:	2b00      	cmp	r3, #0
 800c580:	bf0c      	ite	eq
 800c582:	2301      	moveq	r3, #1
 800c584:	2300      	movne	r3, #0
 800c586:	b2db      	uxtb	r3, r3
 800c588:	f107 0012 	add.w	r0, r7, #18
 800c58c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c58e:	9302      	str	r3, [sp, #8]
 800c590:	797b      	ldrb	r3, [r7, #5]
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	4603      	mov	r3, r0
 800c59a:	2036      	movs	r0, #54	@ 0x36
 800c59c:	f7ff fd5e 	bl	800c05c <tcp_pbuf_prealloc>
 800c5a0:	6338      	str	r0, [r7, #48]	@ 0x30
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 8178 	beq.w	800c89a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	8b3a      	ldrh	r2, [r7, #24]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d906      	bls.n	800c5c2 <tcp_write+0x37e>
 800c5b4:	4b8c      	ldr	r3, [pc, #560]	@ (800c7e8 <tcp_write+0x5a4>)
 800c5b6:	f240 2266 	movw	r2, #614	@ 0x266
 800c5ba:	498c      	ldr	r1, [pc, #560]	@ (800c7ec <tcp_write+0x5a8>)
 800c5bc:	488c      	ldr	r0, [pc, #560]	@ (800c7f0 <tcp_write+0x5ac>)
 800c5be:	f007 fc35 	bl	8013e2c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c5ca:	18d0      	adds	r0, r2, r3
 800c5cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	8b3a      	ldrh	r2, [r7, #24]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	f007 fd5b 	bl	8014092 <memcpy>
 800c5dc:	e02f      	b.n	800c63e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c5de:	8a7b      	ldrh	r3, [r7, #18]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d006      	beq.n	800c5f2 <tcp_write+0x3ae>
 800c5e4:	4b80      	ldr	r3, [pc, #512]	@ (800c7e8 <tcp_write+0x5a4>)
 800c5e6:	f240 2271 	movw	r2, #625	@ 0x271
 800c5ea:	4982      	ldr	r1, [pc, #520]	@ (800c7f4 <tcp_write+0x5b0>)
 800c5ec:	4880      	ldr	r0, [pc, #512]	@ (800c7f0 <tcp_write+0x5ac>)
 800c5ee:	f007 fc1d 	bl	8013e2c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c5f2:	8b3b      	ldrh	r3, [r7, #24]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	2036      	movs	r0, #54	@ 0x36
 800c5fa:	f7fa fd41 	bl	8007080 <pbuf_alloc>
 800c5fe:	6178      	str	r0, [r7, #20]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 814b 	beq.w	800c89e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	441a      	add	r2, r3
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c614:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c61e:	4619      	mov	r1, r3
 800c620:	2036      	movs	r0, #54	@ 0x36
 800c622:	f7fa fd2d 	bl	8007080 <pbuf_alloc>
 800c626:	6338      	str	r0, [r7, #48]	@ 0x30
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d103      	bne.n	800c636 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7fb f80a 	bl	8007648 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c634:	e136      	b.n	800c8a4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c636:	6979      	ldr	r1, [r7, #20]
 800c638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c63a:	f7fb f8c7 	bl	80077cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c63e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c640:	f7fb f88a 	bl	8007758 <pbuf_clen>
 800c644:	4603      	mov	r3, r0
 800c646:	461a      	mov	r2, r3
 800c648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c64c:	4413      	add	r3, r2
 800c64e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c656:	2b1f      	cmp	r3, #31
 800c658:	d903      	bls.n	800c662 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c65a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c65c:	f7fa fff4 	bl	8007648 <pbuf_free>
      goto memerr;
 800c660:	e120      	b.n	800c8a4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c666:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c66a:	441a      	add	r2, r3
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	2200      	movs	r2, #0
 800c676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff fc53 	bl	800bf24 <tcp_create_segment>
 800c67e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 810d 	beq.w	800c8a2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <tcp_write+0x450>
      queue = seg;
 800c68e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c690:	647b      	str	r3, [r7, #68]	@ 0x44
 800c692:	e00c      	b.n	800c6ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c696:	2b00      	cmp	r3, #0
 800c698:	d106      	bne.n	800c6a8 <tcp_write+0x464>
 800c69a:	4b53      	ldr	r3, [pc, #332]	@ (800c7e8 <tcp_write+0x5a4>)
 800c69c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c6a0:	4955      	ldr	r1, [pc, #340]	@ (800c7f8 <tcp_write+0x5b4>)
 800c6a2:	4853      	ldr	r0, [pc, #332]	@ (800c7f0 <tcp_write+0x5ac>)
 800c6a4:	f007 fbc2 	bl	8013e2c <iprintf>
      prev_seg->next = seg;
 800c6a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6b0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c6b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6b6:	8b3b      	ldrh	r3, [r7, #24]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c6be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c6c2:	88fb      	ldrh	r3, [r7, #6]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	f4ff af3d 	bcc.w	800c544 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c6ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d02c      	beq.n	800c72a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c6d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6d6:	e01e      	b.n	800c716 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6da:	891a      	ldrh	r2, [r3, #8]
 800c6dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c6de:	4413      	add	r3, r2
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d110      	bne.n	800c710 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6f4:	8952      	ldrh	r2, [r2, #10]
 800c6f6:	4413      	add	r3, r2
 800c6f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f007 fcc8 	bl	8014092 <memcpy>
        p->len += oversize_used;
 800c702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c704:	895a      	ldrh	r2, [r3, #10]
 800c706:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c708:	4413      	add	r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1dd      	bne.n	800c6d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c71e:	891a      	ldrh	r2, [r3, #8]
 800c720:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c722:	4413      	add	r3, r2
 800c724:	b29a      	uxth	r2, r3
 800c726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c728:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c72a:	8a7a      	ldrh	r2, [r7, #18]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c734:	2b00      	cmp	r3, #0
 800c736:	d018      	beq.n	800c76a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <tcp_write+0x508>
 800c73e:	4b2a      	ldr	r3, [pc, #168]	@ (800c7e8 <tcp_write+0x5a4>)
 800c740:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c744:	492d      	ldr	r1, [pc, #180]	@ (800c7fc <tcp_write+0x5b8>)
 800c746:	482a      	ldr	r0, [pc, #168]	@ (800c7f0 <tcp_write+0x5ac>)
 800c748:	f007 fb70 	bl	8013e2c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c74c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c752:	4618      	mov	r0, r3
 800c754:	f7fb f83a 	bl	80077cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c75a:	891a      	ldrh	r2, [r3, #8]
 800c75c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c75e:	891b      	ldrh	r3, [r3, #8]
 800c760:	4413      	add	r3, r2
 800c762:	b29a      	uxth	r2, r3
 800c764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c766:	811a      	strh	r2, [r3, #8]
 800c768:	e037      	b.n	800c7da <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c76a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d034      	beq.n	800c7da <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <tcp_write+0x53a>
 800c776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d106      	bne.n	800c78c <tcp_write+0x548>
 800c77e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e8 <tcp_write+0x5a4>)
 800c780:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c784:	491e      	ldr	r1, [pc, #120]	@ (800c800 <tcp_write+0x5bc>)
 800c786:	481a      	ldr	r0, [pc, #104]	@ (800c7f0 <tcp_write+0x5ac>)
 800c788:	f007 fb50 	bl	8013e2c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c78c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c792:	e009      	b.n	800c7a8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c796:	891a      	ldrh	r2, [r3, #8]
 800c798:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c79a:	4413      	add	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1f1      	bne.n	800c794 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b2:	891a      	ldrh	r2, [r3, #8]
 800c7b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7b6:	4413      	add	r3, r2
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c0:	895a      	ldrh	r2, [r3, #10]
 800c7c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7c4:	4413      	add	r3, r2
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7ce:	891a      	ldrh	r2, [r3, #8]
 800c7d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c7d2:	4413      	add	r3, r2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d111      	bne.n	800c804 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c7e6:	e010      	b.n	800c80a <tcp_write+0x5c6>
 800c7e8:	080193b8 	.word	0x080193b8
 800c7ec:	08019658 	.word	0x08019658
 800c7f0:	0801940c 	.word	0x0801940c
 800c7f4:	08019698 	.word	0x08019698
 800c7f8:	080196a8 	.word	0x080196a8
 800c7fc:	080196bc 	.word	0x080196bc
 800c800:	080196f4 	.word	0x080196f4
  } else {
    last_unsent->next = queue;
 800c804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c808:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c80e:	88fb      	ldrh	r3, [r7, #6]
 800c810:	441a      	add	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c81c:	88fb      	ldrh	r3, [r7, #6]
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	b29a      	uxth	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c82e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00e      	beq.n	800c85a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10a      	bne.n	800c85a <tcp_write+0x616>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d106      	bne.n	800c85a <tcp_write+0x616>
 800c84c:	4b2c      	ldr	r3, [pc, #176]	@ (800c900 <tcp_write+0x6bc>)
 800c84e:	f240 3212 	movw	r2, #786	@ 0x312
 800c852:	492c      	ldr	r1, [pc, #176]	@ (800c904 <tcp_write+0x6c0>)
 800c854:	482c      	ldr	r0, [pc, #176]	@ (800c908 <tcp_write+0x6c4>)
 800c856:	f007 fae9 	bl	8013e2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c85a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d016      	beq.n	800c88e <tcp_write+0x64a>
 800c860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d012      	beq.n	800c88e <tcp_write+0x64a>
 800c868:	797b      	ldrb	r3, [r7, #5]
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10d      	bne.n	800c88e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	899b      	ldrh	r3, [r3, #12]
 800c878:	b29c      	uxth	r4, r3
 800c87a:	2008      	movs	r0, #8
 800c87c:	f7f9 fb56 	bl	8005f2c <lwip_htons>
 800c880:	4603      	mov	r3, r0
 800c882:	461a      	mov	r2, r3
 800c884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	4322      	orrs	r2, r4
 800c88a:	b292      	uxth	r2, r2
 800c88c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	e031      	b.n	800c8f6 <tcp_write+0x6b2>
          goto memerr;
 800c892:	bf00      	nop
 800c894:	e006      	b.n	800c8a4 <tcp_write+0x660>
            goto memerr;
 800c896:	bf00      	nop
 800c898:	e004      	b.n	800c8a4 <tcp_write+0x660>
        goto memerr;
 800c89a:	bf00      	nop
 800c89c:	e002      	b.n	800c8a4 <tcp_write+0x660>
        goto memerr;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <tcp_write+0x660>
      goto memerr;
 800c8a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	8b5b      	ldrh	r3, [r3, #26]
 800c8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ac:	b29a      	uxth	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c8b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c8b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c8ba:	f7fa fec5 	bl	8007648 <pbuf_free>
  }
  if (queue != NULL) {
 800c8be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <tcp_write+0x686>
    tcp_segs_free(queue);
 800c8c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c8c6:	f7fc fb89 	bl	8008fdc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00e      	beq.n	800c8f2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10a      	bne.n	800c8f2 <tcp_write+0x6ae>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <tcp_write+0x6ae>
 800c8e4:	4b06      	ldr	r3, [pc, #24]	@ (800c900 <tcp_write+0x6bc>)
 800c8e6:	f240 3227 	movw	r2, #807	@ 0x327
 800c8ea:	4906      	ldr	r1, [pc, #24]	@ (800c904 <tcp_write+0x6c0>)
 800c8ec:	4806      	ldr	r0, [pc, #24]	@ (800c908 <tcp_write+0x6c4>)
 800c8ee:	f007 fa9d 	bl	8013e2c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c8f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	375c      	adds	r7, #92	@ 0x5c
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd90      	pop	{r4, r7, pc}
 800c8fe:	bf00      	nop
 800c900:	080193b8 	.word	0x080193b8
 800c904:	0801972c 	.word	0x0801972c
 800c908:	0801940c 	.word	0x0801940c

0800c90c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c90c:	b590      	push	{r4, r7, lr}
 800c90e:	b08b      	sub	sp, #44	@ 0x2c
 800c910:	af02      	add	r7, sp, #8
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c918:	2300      	movs	r3, #0
 800c91a:	61fb      	str	r3, [r7, #28]
 800c91c:	2300      	movs	r3, #0
 800c91e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d106      	bne.n	800c938 <tcp_split_unsent_seg+0x2c>
 800c92a:	4b95      	ldr	r3, [pc, #596]	@ (800cb80 <tcp_split_unsent_seg+0x274>)
 800c92c:	f240 324b 	movw	r2, #843	@ 0x34b
 800c930:	4994      	ldr	r1, [pc, #592]	@ (800cb84 <tcp_split_unsent_seg+0x278>)
 800c932:	4895      	ldr	r0, [pc, #596]	@ (800cb88 <tcp_split_unsent_seg+0x27c>)
 800c934:	f007 fa7a 	bl	8013e2c <iprintf>

  useg = pcb->unsent;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c93c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d102      	bne.n	800c94a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c944:	f04f 33ff 	mov.w	r3, #4294967295
 800c948:	e116      	b.n	800cb78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c94a:	887b      	ldrh	r3, [r7, #2]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d109      	bne.n	800c964 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c950:	4b8b      	ldr	r3, [pc, #556]	@ (800cb80 <tcp_split_unsent_seg+0x274>)
 800c952:	f240 3253 	movw	r2, #851	@ 0x353
 800c956:	498d      	ldr	r1, [pc, #564]	@ (800cb8c <tcp_split_unsent_seg+0x280>)
 800c958:	488b      	ldr	r0, [pc, #556]	@ (800cb88 <tcp_split_unsent_seg+0x27c>)
 800c95a:	f007 fa67 	bl	8013e2c <iprintf>
    return ERR_VAL;
 800c95e:	f06f 0305 	mvn.w	r3, #5
 800c962:	e109      	b.n	800cb78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	891b      	ldrh	r3, [r3, #8]
 800c968:	887a      	ldrh	r2, [r7, #2]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d301      	bcc.n	800c972 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	e102      	b.n	800cb78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c976:	887a      	ldrh	r2, [r7, #2]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d906      	bls.n	800c98a <tcp_split_unsent_seg+0x7e>
 800c97c:	4b80      	ldr	r3, [pc, #512]	@ (800cb80 <tcp_split_unsent_seg+0x274>)
 800c97e:	f240 325b 	movw	r2, #859	@ 0x35b
 800c982:	4983      	ldr	r1, [pc, #524]	@ (800cb90 <tcp_split_unsent_seg+0x284>)
 800c984:	4880      	ldr	r0, [pc, #512]	@ (800cb88 <tcp_split_unsent_seg+0x27c>)
 800c986:	f007 fa51 	bl	8013e2c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	891b      	ldrh	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <tcp_split_unsent_seg+0x94>
 800c992:	4b7b      	ldr	r3, [pc, #492]	@ (800cb80 <tcp_split_unsent_seg+0x274>)
 800c994:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c998:	497e      	ldr	r1, [pc, #504]	@ (800cb94 <tcp_split_unsent_seg+0x288>)
 800c99a:	487b      	ldr	r0, [pc, #492]	@ (800cb88 <tcp_split_unsent_seg+0x27c>)
 800c99c:	f007 fa46 	bl	8013e2c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	7a9b      	ldrb	r3, [r3, #10]
 800c9a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	891a      	ldrh	r2, [r3, #8]
 800c9b6:	887b      	ldrh	r3, [r7, #2]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	89bb      	ldrh	r3, [r7, #12]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	2036      	movs	r0, #54	@ 0x36
 800c9ce:	f7fa fb57 	bl	8007080 <pbuf_alloc>
 800c9d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80b7 	beq.w	800cb4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	891a      	ldrh	r2, [r3, #8]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	891b      	ldrh	r3, [r3, #8]
 800c9e6:	1ad3      	subs	r3, r2, r3
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	887b      	ldrh	r3, [r7, #2]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	6858      	ldr	r0, [r3, #4]
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	685a      	ldr	r2, [r3, #4]
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	18d1      	adds	r1, r2, r3
 800c9fc:	897b      	ldrh	r3, [r7, #10]
 800c9fe:	89ba      	ldrh	r2, [r7, #12]
 800ca00:	f7fb f81c 	bl	8007a3c <pbuf_copy_partial>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	89bb      	ldrh	r3, [r7, #12]
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	f040 809f 	bne.w	800cb4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	899b      	ldrh	r3, [r3, #12]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7f9 fa87 	bl	8005f2c <lwip_htons>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ca28:	2300      	movs	r3, #0
 800ca2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ca2c:	7efb      	ldrb	r3, [r7, #27]
 800ca2e:	f003 0308 	and.w	r3, r3, #8
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d007      	beq.n	800ca46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ca36:	7efb      	ldrb	r3, [r7, #27]
 800ca38:	f023 0308 	bic.w	r3, r3, #8
 800ca3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ca3e:	7ebb      	ldrb	r3, [r7, #26]
 800ca40:	f043 0308 	orr.w	r3, r3, #8
 800ca44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ca46:	7efb      	ldrb	r3, [r7, #27]
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d007      	beq.n	800ca60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ca50:	7efb      	ldrb	r3, [r7, #27]
 800ca52:	f023 0301 	bic.w	r3, r3, #1
 800ca56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ca58:	7ebb      	ldrb	r3, [r7, #26]
 800ca5a:	f043 0301 	orr.w	r3, r3, #1
 800ca5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f9 fa76 	bl	8005f58 <lwip_htonl>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	887b      	ldrh	r3, [r7, #2]
 800ca70:	18d1      	adds	r1, r2, r3
 800ca72:	7eba      	ldrb	r2, [r7, #26]
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	6939      	ldr	r1, [r7, #16]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff fa51 	bl	800bf24 <tcp_create_segment>
 800ca82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d063      	beq.n	800cb52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fa fe62 	bl	8007758 <pbuf_clen>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ca9e:	1a9b      	subs	r3, r3, r2
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	6858      	ldr	r0, [r3, #4]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	891a      	ldrh	r2, [r3, #8]
 800cab2:	89bb      	ldrh	r3, [r7, #12]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	4619      	mov	r1, r3
 800caba:	f7fa fc3f 	bl	800733c <pbuf_realloc>
  useg->len -= remainder;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	891a      	ldrh	r2, [r3, #8]
 800cac2:	89bb      	ldrh	r3, [r7, #12]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	899b      	ldrh	r3, [r3, #12]
 800cad2:	b29c      	uxth	r4, r3
 800cad4:	7efb      	ldrb	r3, [r7, #27]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f9 fa27 	bl	8005f2c <lwip_htons>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	4322      	orrs	r2, r4
 800cae8:	b292      	uxth	r2, r2
 800caea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7fa fe31 	bl	8007758 <pbuf_clen>
 800caf6:	4603      	mov	r3, r0
 800caf8:	461a      	mov	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb00:	4413      	add	r3, r2
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fa fe22 	bl	8007758 <pbuf_clen>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb1e:	4413      	add	r3, r2
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	69fa      	ldr	r2, [r7, #28]
 800cb34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d103      	bne.n	800cb46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e016      	b.n	800cb78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cb4a:	bf00      	nop
 800cb4c:	e002      	b.n	800cb54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb4e:	bf00      	nop
 800cb50:	e000      	b.n	800cb54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d006      	beq.n	800cb68 <tcp_split_unsent_seg+0x25c>
 800cb5a:	4b09      	ldr	r3, [pc, #36]	@ (800cb80 <tcp_split_unsent_seg+0x274>)
 800cb5c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800cb60:	490d      	ldr	r1, [pc, #52]	@ (800cb98 <tcp_split_unsent_seg+0x28c>)
 800cb62:	4809      	ldr	r0, [pc, #36]	@ (800cb88 <tcp_split_unsent_seg+0x27c>)
 800cb64:	f007 f962 	bl	8013e2c <iprintf>
  if (p != NULL) {
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cb6e:	6938      	ldr	r0, [r7, #16]
 800cb70:	f7fa fd6a 	bl	8007648 <pbuf_free>
  }

  return ERR_MEM;
 800cb74:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3724      	adds	r7, #36	@ 0x24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd90      	pop	{r4, r7, pc}
 800cb80:	080193b8 	.word	0x080193b8
 800cb84:	0801974c 	.word	0x0801974c
 800cb88:	0801940c 	.word	0x0801940c
 800cb8c:	08019770 	.word	0x08019770
 800cb90:	08019794 	.word	0x08019794
 800cb94:	080197a4 	.word	0x080197a4
 800cb98:	080197b4 	.word	0x080197b4

0800cb9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d106      	bne.n	800cbb8 <tcp_send_fin+0x1c>
 800cbaa:	4b21      	ldr	r3, [pc, #132]	@ (800cc30 <tcp_send_fin+0x94>)
 800cbac:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800cbb0:	4920      	ldr	r1, [pc, #128]	@ (800cc34 <tcp_send_fin+0x98>)
 800cbb2:	4821      	ldr	r0, [pc, #132]	@ (800cc38 <tcp_send_fin+0x9c>)
 800cbb4:	f007 f93a 	bl	8013e2c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d02e      	beq.n	800cc1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	e002      	b.n	800cbce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1f8      	bne.n	800cbc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	899b      	ldrh	r3, [r3, #12]
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f9 f9a4 	bl	8005f2c <lwip_htons>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d116      	bne.n	800cc1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	899b      	ldrh	r3, [r3, #12]
 800cbf6:	b29c      	uxth	r4, r3
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	f7f9 f997 	bl	8005f2c <lwip_htons>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	461a      	mov	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	4322      	orrs	r2, r4
 800cc08:	b292      	uxth	r2, r2
 800cc0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	8b5b      	ldrh	r3, [r3, #26]
 800cc10:	f043 0320 	orr.w	r3, r3, #32
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e004      	b.n	800cc28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cc1e:	2101      	movs	r1, #1
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f80b 	bl	800cc3c <tcp_enqueue_flags>
 800cc26:	4603      	mov	r3, r0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd90      	pop	{r4, r7, pc}
 800cc30:	080193b8 	.word	0x080193b8
 800cc34:	080197c0 	.word	0x080197c0
 800cc38:	0801940c 	.word	0x0801940c

0800cc3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08a      	sub	sp, #40	@ 0x28
 800cc40:	af02      	add	r7, sp, #8
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	460b      	mov	r3, r1
 800cc46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cc50:	78fb      	ldrb	r3, [r7, #3]
 800cc52:	f003 0303 	and.w	r3, r3, #3
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d106      	bne.n	800cc68 <tcp_enqueue_flags+0x2c>
 800cc5a:	4b67      	ldr	r3, [pc, #412]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800cc5c:	f240 4211 	movw	r2, #1041	@ 0x411
 800cc60:	4966      	ldr	r1, [pc, #408]	@ (800cdfc <tcp_enqueue_flags+0x1c0>)
 800cc62:	4867      	ldr	r0, [pc, #412]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800cc64:	f007 f8e2 	bl	8013e2c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d106      	bne.n	800cc7c <tcp_enqueue_flags+0x40>
 800cc6e:	4b62      	ldr	r3, [pc, #392]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800cc70:	f240 4213 	movw	r2, #1043	@ 0x413
 800cc74:	4963      	ldr	r1, [pc, #396]	@ (800ce04 <tcp_enqueue_flags+0x1c8>)
 800cc76:	4862      	ldr	r0, [pc, #392]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800cc78:	f007 f8d8 	bl	8013e2c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cc86:	2301      	movs	r3, #1
 800cc88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc8a:	7ffb      	ldrb	r3, [r7, #31]
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 0304 	and.w	r3, r3, #4
 800cc94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc9e:	4619      	mov	r1, r3
 800cca0:	2036      	movs	r0, #54	@ 0x36
 800cca2:	f7fa f9ed 	bl	8007080 <pbuf_alloc>
 800cca6:	6138      	str	r0, [r7, #16]
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d109      	bne.n	800ccc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	8b5b      	ldrh	r3, [r3, #26]
 800ccb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ccbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc0:	e095      	b.n	800cdee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	895a      	ldrh	r2, [r3, #10]
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d206      	bcs.n	800ccdc <tcp_enqueue_flags+0xa0>
 800ccce:	4b4a      	ldr	r3, [pc, #296]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800ccd0:	f240 4239 	movw	r2, #1081	@ 0x439
 800ccd4:	494c      	ldr	r1, [pc, #304]	@ (800ce08 <tcp_enqueue_flags+0x1cc>)
 800ccd6:	484a      	ldr	r0, [pc, #296]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800ccd8:	f007 f8a8 	bl	8013e2c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800cce0:	78fa      	ldrb	r2, [r7, #3]
 800cce2:	7ffb      	ldrb	r3, [r7, #31]
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	460b      	mov	r3, r1
 800cce8:	6939      	ldr	r1, [r7, #16]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff f91a 	bl	800bf24 <tcp_create_segment>
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d109      	bne.n	800cd0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8b5b      	ldrh	r3, [r3, #26]
 800ccfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0a:	e070      	b.n	800cdee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d006      	beq.n	800cd26 <tcp_enqueue_flags+0xea>
 800cd18:	4b37      	ldr	r3, [pc, #220]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800cd1a:	f240 4242 	movw	r2, #1090	@ 0x442
 800cd1e:	493b      	ldr	r1, [pc, #236]	@ (800ce0c <tcp_enqueue_flags+0x1d0>)
 800cd20:	4837      	ldr	r0, [pc, #220]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800cd22:	f007 f883 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	891b      	ldrh	r3, [r3, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d006      	beq.n	800cd3c <tcp_enqueue_flags+0x100>
 800cd2e:	4b32      	ldr	r3, [pc, #200]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800cd30:	f240 4243 	movw	r2, #1091	@ 0x443
 800cd34:	4936      	ldr	r1, [pc, #216]	@ (800ce10 <tcp_enqueue_flags+0x1d4>)
 800cd36:	4832      	ldr	r0, [pc, #200]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800cd38:	f007 f878 	bl	8013e2c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d103      	bne.n	800cd4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cd4a:	e00d      	b.n	800cd68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd50:	61bb      	str	r3, [r7, #24]
 800cd52:	e002      	b.n	800cd5a <tcp_enqueue_flags+0x11e>
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	61bb      	str	r3, [r7, #24]
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1f8      	bne.n	800cd54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 0302 	and.w	r3, r3, #2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d104      	bne.n	800cd84 <tcp_enqueue_flags+0x148>
 800cd7a:	78fb      	ldrb	r3, [r7, #3]
 800cd7c:	f003 0301 	and.w	r3, r3, #1
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cd8e:	78fb      	ldrb	r3, [r7, #3]
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	8b5b      	ldrh	r3, [r3, #26]
 800cd9c:	f043 0320 	orr.w	r3, r3, #32
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fa fcd4 	bl	8007758 <pbuf_clen>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdba:	4413      	add	r3, r2
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00e      	beq.n	800cdec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10a      	bne.n	800cdec <tcp_enqueue_flags+0x1b0>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <tcp_enqueue_flags+0x1b0>
 800cdde:	4b06      	ldr	r3, [pc, #24]	@ (800cdf8 <tcp_enqueue_flags+0x1bc>)
 800cde0:	f240 4265 	movw	r2, #1125	@ 0x465
 800cde4:	490b      	ldr	r1, [pc, #44]	@ (800ce14 <tcp_enqueue_flags+0x1d8>)
 800cde6:	4806      	ldr	r0, [pc, #24]	@ (800ce00 <tcp_enqueue_flags+0x1c4>)
 800cde8:	f007 f820 	bl	8013e2c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3720      	adds	r7, #32
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	080193b8 	.word	0x080193b8
 800cdfc:	080197dc 	.word	0x080197dc
 800ce00:	0801940c 	.word	0x0801940c
 800ce04:	08019834 	.word	0x08019834
 800ce08:	08019854 	.word	0x08019854
 800ce0c:	08019890 	.word	0x08019890
 800ce10:	080198a8 	.word	0x080198a8
 800ce14:	080198d4 	.word	0x080198d4

0800ce18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ce18:	b5b0      	push	{r4, r5, r7, lr}
 800ce1a:	b08a      	sub	sp, #40	@ 0x28
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d106      	bne.n	800ce34 <tcp_output+0x1c>
 800ce26:	4b8a      	ldr	r3, [pc, #552]	@ (800d050 <tcp_output+0x238>)
 800ce28:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ce2c:	4989      	ldr	r1, [pc, #548]	@ (800d054 <tcp_output+0x23c>)
 800ce2e:	488a      	ldr	r0, [pc, #552]	@ (800d058 <tcp_output+0x240>)
 800ce30:	f006 fffc 	bl	8013e2c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7d1b      	ldrb	r3, [r3, #20]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d106      	bne.n	800ce4a <tcp_output+0x32>
 800ce3c:	4b84      	ldr	r3, [pc, #528]	@ (800d050 <tcp_output+0x238>)
 800ce3e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ce42:	4986      	ldr	r1, [pc, #536]	@ (800d05c <tcp_output+0x244>)
 800ce44:	4884      	ldr	r0, [pc, #528]	@ (800d058 <tcp_output+0x240>)
 800ce46:	f006 fff1 	bl	8013e2c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ce4a:	4b85      	ldr	r3, [pc, #532]	@ (800d060 <tcp_output+0x248>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d101      	bne.n	800ce58 <tcp_output+0x40>
    return ERR_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e1ce      	b.n	800d1f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ce64:	4293      	cmp	r3, r2
 800ce66:	bf28      	it	cs
 800ce68:	4613      	movcs	r3, r2
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800ce74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10b      	bne.n	800ce92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	8b5b      	ldrh	r3, [r3, #26]
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 81aa 	beq.w	800d1dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fdc9 	bl	800da20 <tcp_send_empty_ack>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	e1b1      	b.n	800d1f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ce92:	6879      	ldr	r1, [r7, #4]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff f826 	bl	800beec <tcp_route>
 800cea0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <tcp_output+0x96>
    return ERR_RTE;
 800cea8:	f06f 0303 	mvn.w	r3, #3
 800ceac:	e1a3      	b.n	800d1f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d003      	beq.n	800cebc <tcp_output+0xa4>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d111      	bne.n	800cee0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <tcp_output+0xb0>
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	3304      	adds	r3, #4
 800cec6:	e000      	b.n	800ceca <tcp_output+0xb2>
 800cec8:	2300      	movs	r3, #0
 800ceca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <tcp_output+0xc0>
      return ERR_RTE;
 800ced2:	f06f 0303 	mvn.w	r3, #3
 800ced6:	e18e      	b.n	800d1f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f9 f836 	bl	8005f58 <lwip_htonl>
 800ceec:	4602      	mov	r2, r0
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cef6:	8912      	ldrh	r2, [r2, #8]
 800cef8:	4413      	add	r3, r2
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d227      	bcs.n	800cf50 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf06:	461a      	mov	r2, r3
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d114      	bne.n	800cf38 <tcp_output+0x120>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d110      	bne.n	800cf38 <tcp_output+0x120>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10b      	bne.n	800cf38 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	8b5b      	ldrh	r3, [r3, #26]
 800cf3c:	f003 0302 	and.w	r3, r3, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 814d 	beq.w	800d1e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fd6a 	bl	800da20 <tcp_send_empty_ack>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	e152      	b.n	800d1f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf5c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 811c 	beq.w	800d19e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cf66:	e002      	b.n	800cf6e <tcp_output+0x156>
 800cf68:	6a3b      	ldr	r3, [r7, #32]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	623b      	str	r3, [r7, #32]
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1f8      	bne.n	800cf68 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf76:	e112      	b.n	800d19e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	899b      	ldrh	r3, [r3, #12]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7f8 ffd3 	bl	8005f2c <lwip_htons>
 800cf86:	4603      	mov	r3, r0
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	f003 0304 	and.w	r3, r3, #4
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d006      	beq.n	800cfa0 <tcp_output+0x188>
 800cf92:	4b2f      	ldr	r3, [pc, #188]	@ (800d050 <tcp_output+0x238>)
 800cf94:	f240 5236 	movw	r2, #1334	@ 0x536
 800cf98:	4932      	ldr	r1, [pc, #200]	@ (800d064 <tcp_output+0x24c>)
 800cf9a:	482f      	ldr	r0, [pc, #188]	@ (800d058 <tcp_output+0x240>)
 800cf9c:	f006 ff46 	bl	8013e2c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d01f      	beq.n	800cfe8 <tcp_output+0x1d0>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	8b5b      	ldrh	r3, [r3, #26]
 800cfac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d119      	bne.n	800cfe8 <tcp_output+0x1d0>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00b      	beq.n	800cfd4 <tcp_output+0x1bc>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d110      	bne.n	800cfe8 <tcp_output+0x1d0>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfca:	891a      	ldrh	r2, [r3, #8]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d209      	bcs.n	800cfe8 <tcp_output+0x1d0>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d004      	beq.n	800cfe8 <tcp_output+0x1d0>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cfe4:	2b1e      	cmp	r3, #30
 800cfe6:	d901      	bls.n	800cfec <tcp_output+0x1d4>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e000      	b.n	800cfee <tcp_output+0x1d6>
 800cfec:	2300      	movs	r3, #0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d106      	bne.n	800d000 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	8b5b      	ldrh	r3, [r3, #26]
 800cff6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f000 80e4 	beq.w	800d1c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7d1b      	ldrb	r3, [r3, #20]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d00d      	beq.n	800d024 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	899b      	ldrh	r3, [r3, #12]
 800d00e:	b29c      	uxth	r4, r3
 800d010:	2010      	movs	r0, #16
 800d012:	f7f8 ff8b 	bl	8005f2c <lwip_htons>
 800d016:	4603      	mov	r3, r0
 800d018:	461a      	mov	r2, r3
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	4322      	orrs	r2, r4
 800d020:	b292      	uxth	r2, r2
 800d022:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d024:	697a      	ldr	r2, [r7, #20]
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d02a:	f000 f909 	bl	800d240 <tcp_output_segment>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d016      	beq.n	800d068 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	8b5b      	ldrh	r3, [r3, #26]
 800d03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d042:	b29a      	uxth	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	835a      	strh	r2, [r3, #26]
      return err;
 800d048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d04c:	e0d3      	b.n	800d1f6 <tcp_output+0x3de>
 800d04e:	bf00      	nop
 800d050:	080193b8 	.word	0x080193b8
 800d054:	080198fc 	.word	0x080198fc
 800d058:	0801940c 	.word	0x0801940c
 800d05c:	08019914 	.word	0x08019914
 800d060:	20008020 	.word	0x20008020
 800d064:	0801993c 	.word	0x0801993c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7d1b      	ldrb	r3, [r3, #20]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d006      	beq.n	800d086 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	8b5b      	ldrh	r3, [r3, #26]
 800d07c:	f023 0303 	bic.w	r3, r3, #3
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7f8 ff63 	bl	8005f58 <lwip_htonl>
 800d092:	4604      	mov	r4, r0
 800d094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d096:	891b      	ldrh	r3, [r3, #8]
 800d098:	461d      	mov	r5, r3
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	899b      	ldrh	r3, [r3, #12]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f8 ff42 	bl	8005f2c <lwip_htons>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	f003 0303 	and.w	r3, r3, #3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <tcp_output+0x2a0>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e000      	b.n	800d0ba <tcp_output+0x2a2>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	442b      	add	r3, r5
 800d0bc:	4423      	add	r3, r4
 800d0be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	da02      	bge.n	800d0d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68ba      	ldr	r2, [r7, #8]
 800d0d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d4:	891b      	ldrh	r3, [r3, #8]
 800d0d6:	461c      	mov	r4, r3
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	899b      	ldrh	r3, [r3, #12]
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7f8 ff23 	bl	8005f2c <lwip_htons>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <tcp_output+0x2de>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e000      	b.n	800d0f8 <tcp_output+0x2e0>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	4423      	add	r3, r4
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d049      	beq.n	800d192 <tcp_output+0x37a>
      seg->next = NULL;
 800d0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d105      	bne.n	800d118 <tcp_output+0x300>
        pcb->unacked = seg;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d110:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800d112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d114:	623b      	str	r3, [r7, #32]
 800d116:	e03f      	b.n	800d198 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f8 ff1a 	bl	8005f58 <lwip_htonl>
 800d124:	4604      	mov	r4, r0
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7f8 ff13 	bl	8005f58 <lwip_htonl>
 800d132:	4603      	mov	r3, r0
 800d134:	1ae3      	subs	r3, r4, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	da24      	bge.n	800d184 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3370      	adds	r3, #112	@ 0x70
 800d13e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d140:	e002      	b.n	800d148 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d011      	beq.n	800d174 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	4618      	mov	r0, r3
 800d15a:	f7f8 fefd 	bl	8005f58 <lwip_htonl>
 800d15e:	4604      	mov	r4, r0
 800d160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	4618      	mov	r0, r3
 800d168:	f7f8 fef6 	bl	8005f58 <lwip_htonl>
 800d16c:	4603      	mov	r3, r0
 800d16e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d170:	2b00      	cmp	r3, #0
 800d172:	dbe6      	blt.n	800d142 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	e009      	b.n	800d198 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d188:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	623b      	str	r3, [r7, #32]
 800d190:	e002      	b.n	800d198 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d192:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d194:	f7fb ff37 	bl	8009006 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d19c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800d19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d012      	beq.n	800d1ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7f8 fed4 	bl	8005f58 <lwip_htonl>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1ba:	8912      	ldrh	r2, [r2, #8]
 800d1bc:	4413      	add	r3, r2
  while (seg != NULL &&
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	f4bf aed9 	bcs.w	800cf78 <tcp_output+0x160>
 800d1c6:	e000      	b.n	800d1ca <tcp_output+0x3b2>
      break;
 800d1c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d108      	bne.n	800d1e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800d1da:	e004      	b.n	800d1e6 <tcp_output+0x3ce>
    goto output_done;
 800d1dc:	bf00      	nop
 800d1de:	e002      	b.n	800d1e6 <tcp_output+0x3ce>
    goto output_done;
 800d1e0:	bf00      	nop
 800d1e2:	e000      	b.n	800d1e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d1e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3728      	adds	r7, #40	@ 0x28
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bdb0      	pop	{r4, r5, r7, pc}
 800d1fe:	bf00      	nop

0800d200 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <tcp_output_segment_busy+0x1c>
 800d20e:	4b09      	ldr	r3, [pc, #36]	@ (800d234 <tcp_output_segment_busy+0x34>)
 800d210:	f240 529a 	movw	r2, #1434	@ 0x59a
 800d214:	4908      	ldr	r1, [pc, #32]	@ (800d238 <tcp_output_segment_busy+0x38>)
 800d216:	4809      	ldr	r0, [pc, #36]	@ (800d23c <tcp_output_segment_busy+0x3c>)
 800d218:	f006 fe08 	bl	8013e2c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	7b9b      	ldrb	r3, [r3, #14]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d001      	beq.n	800d22a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d226:	2301      	movs	r3, #1
 800d228:	e000      	b.n	800d22c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	080193b8 	.word	0x080193b8
 800d238:	08019954 	.word	0x08019954
 800d23c:	0801940c 	.word	0x0801940c

0800d240 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d240:	b5b0      	push	{r4, r5, r7, lr}
 800d242:	b08c      	sub	sp, #48	@ 0x30
 800d244:	af04      	add	r7, sp, #16
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <tcp_output_segment+0x20>
 800d252:	4b64      	ldr	r3, [pc, #400]	@ (800d3e4 <tcp_output_segment+0x1a4>)
 800d254:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800d258:	4963      	ldr	r1, [pc, #396]	@ (800d3e8 <tcp_output_segment+0x1a8>)
 800d25a:	4864      	ldr	r0, [pc, #400]	@ (800d3ec <tcp_output_segment+0x1ac>)
 800d25c:	f006 fde6 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <tcp_output_segment+0x34>
 800d266:	4b5f      	ldr	r3, [pc, #380]	@ (800d3e4 <tcp_output_segment+0x1a4>)
 800d268:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800d26c:	4960      	ldr	r1, [pc, #384]	@ (800d3f0 <tcp_output_segment+0x1b0>)
 800d26e:	485f      	ldr	r0, [pc, #380]	@ (800d3ec <tcp_output_segment+0x1ac>)
 800d270:	f006 fddc 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <tcp_output_segment+0x48>
 800d27a:	4b5a      	ldr	r3, [pc, #360]	@ (800d3e4 <tcp_output_segment+0x1a4>)
 800d27c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800d280:	495c      	ldr	r1, [pc, #368]	@ (800d3f4 <tcp_output_segment+0x1b4>)
 800d282:	485a      	ldr	r0, [pc, #360]	@ (800d3ec <tcp_output_segment+0x1ac>)
 800d284:	f006 fdd2 	bl	8013e2c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f7ff ffb9 	bl	800d200 <tcp_output_segment_busy>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d001      	beq.n	800d298 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	e0a1      	b.n	800d3dc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	68dc      	ldr	r4, [r3, #12]
 800d2a0:	4610      	mov	r0, r2
 800d2a2:	f7f8 fe59 	bl	8005f58 <lwip_htonl>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	68dc      	ldr	r4, [r3, #12]
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	f7f8 fe3a 	bl	8005f2c <lwip_htons>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d2c4:	441a      	add	r2, r3
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	3314      	adds	r3, #20
 800d2d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	7a9b      	ldrb	r3, [r3, #10]
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d015      	beq.n	800d30a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d2ea:	f7fc fa39 	bl	8009760 <tcp_eff_send_mss_netif>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d2f2:	8b7b      	ldrh	r3, [r7, #26]
 800d2f4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f8 fe2d 	bl	8005f58 <lwip_htonl>
 800d2fe:	4602      	mov	r2, r0
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	3304      	adds	r3, #4
 800d308:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d310:	2b00      	cmp	r3, #0
 800d312:	da02      	bge.n	800d31a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2200      	movs	r2, #0
 800d318:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10c      	bne.n	800d33c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d322:	4b35      	ldr	r3, [pc, #212]	@ (800d3f8 <tcp_output_segment+0x1b8>)
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	4618      	mov	r0, r3
 800d332:	f7f8 fe11 	bl	8005f58 <lwip_htonl>
 800d336:	4602      	mov	r2, r0
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	8959      	ldrh	r1, [r3, #10]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	8b3a      	ldrh	r2, [r7, #24]
 800d356:	1a8a      	subs	r2, r1, r2
 800d358:	b292      	uxth	r2, r2
 800d35a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	8919      	ldrh	r1, [r3, #8]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	8b3a      	ldrh	r2, [r7, #24]
 800d368:	1a8a      	subs	r2, r1, r2
 800d36a:	b292      	uxth	r2, r2
 800d36c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	68d2      	ldr	r2, [r2, #12]
 800d376:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	741a      	strb	r2, [r3, #16]
 800d380:	2200      	movs	r2, #0
 800d382:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	68da      	ldr	r2, [r3, #12]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	7a9b      	ldrb	r3, [r3, #10]
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <tcp_output_segment+0x158>
 800d394:	2318      	movs	r3, #24
 800d396:	e000      	b.n	800d39a <tcp_output_segment+0x15a>
 800d398:	2314      	movs	r3, #20
 800d39a:	4413      	add	r3, r2
 800d39c:	69fa      	ldr	r2, [r7, #28]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d006      	beq.n	800d3b0 <tcp_output_segment+0x170>
 800d3a2:	4b10      	ldr	r3, [pc, #64]	@ (800d3e4 <tcp_output_segment+0x1a4>)
 800d3a4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d3a8:	4914      	ldr	r1, [pc, #80]	@ (800d3fc <tcp_output_segment+0x1bc>)
 800d3aa:	4810      	ldr	r0, [pc, #64]	@ (800d3ec <tcp_output_segment+0x1ac>)
 800d3ac:	f006 fd3e 	bl	8013e2c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6858      	ldr	r0, [r3, #4]
 800d3b4:	68b9      	ldr	r1, [r7, #8]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	1d1c      	adds	r4, r3, #4
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	7add      	ldrb	r5, [r3, #11]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	7a9b      	ldrb	r3, [r3, #10]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	9202      	str	r2, [sp, #8]
 800d3c6:	2206      	movs	r2, #6
 800d3c8:	9201      	str	r2, [sp, #4]
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	462b      	mov	r3, r5
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	f004 fc1e 	bl	8011c10 <ip4_output_if>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d3d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3720      	adds	r7, #32
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e4:	080193b8 	.word	0x080193b8
 800d3e8:	0801997c 	.word	0x0801997c
 800d3ec:	0801940c 	.word	0x0801940c
 800d3f0:	0801999c 	.word	0x0801999c
 800d3f4:	080199bc 	.word	0x080199bc
 800d3f8:	20007fd4 	.word	0x20007fd4
 800d3fc:	080199e0 	.word	0x080199e0

0800d400 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d400:	b5b0      	push	{r4, r5, r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <tcp_rexmit_rto_prepare+0x1c>
 800d40e:	4b31      	ldr	r3, [pc, #196]	@ (800d4d4 <tcp_rexmit_rto_prepare+0xd4>)
 800d410:	f240 6263 	movw	r2, #1635	@ 0x663
 800d414:	4930      	ldr	r1, [pc, #192]	@ (800d4d8 <tcp_rexmit_rto_prepare+0xd8>)
 800d416:	4831      	ldr	r0, [pc, #196]	@ (800d4dc <tcp_rexmit_rto_prepare+0xdc>)
 800d418:	f006 fd08 	bl	8013e2c <iprintf>

  if (pcb->unacked == NULL) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d424:	f06f 0305 	mvn.w	r3, #5
 800d428:	e050      	b.n	800d4cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d42e:	60fb      	str	r3, [r7, #12]
 800d430:	e00b      	b.n	800d44a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fee4 	bl	800d200 <tcp_output_segment_busy>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d43e:	f06f 0305 	mvn.w	r3, #5
 800d442:	e043      	b.n	800d4cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	60fb      	str	r3, [r7, #12]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1ef      	bne.n	800d432 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f7ff fed4 	bl	800d200 <tcp_output_segment_busy>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d45e:	f06f 0305 	mvn.w	r3, #5
 800d462:	e033      	b.n	800d4cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8b5b      	ldrh	r3, [r3, #26]
 800d47e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f8 fd62 	bl	8005f58 <lwip_htonl>
 800d494:	4604      	mov	r4, r0
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	891b      	ldrh	r3, [r3, #8]
 800d49a:	461d      	mov	r5, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	899b      	ldrh	r3, [r3, #12]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7f8 fd41 	bl	8005f2c <lwip_htons>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	f003 0303 	and.w	r3, r3, #3
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d001      	beq.n	800d4ba <tcp_rexmit_rto_prepare+0xba>
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e000      	b.n	800d4bc <tcp_rexmit_rto_prepare+0xbc>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	442b      	add	r3, r5
 800d4be:	18e2      	adds	r2, r4, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d4d4:	080193b8 	.word	0x080193b8
 800d4d8:	080199f4 	.word	0x080199f4
 800d4dc:	0801940c 	.word	0x0801940c

0800d4e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <tcp_rexmit_rto_commit+0x1c>
 800d4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d524 <tcp_rexmit_rto_commit+0x44>)
 800d4f0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d4f4:	490c      	ldr	r1, [pc, #48]	@ (800d528 <tcp_rexmit_rto_commit+0x48>)
 800d4f6:	480d      	ldr	r0, [pc, #52]	@ (800d52c <tcp_rexmit_rto_commit+0x4c>)
 800d4f8:	f006 fc98 	bl	8013e2c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d502:	2bff      	cmp	r3, #255	@ 0xff
 800d504:	d007      	beq.n	800d516 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff fc7e 	bl	800ce18 <tcp_output>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	080193b8 	.word	0x080193b8
 800d528:	08019a18 	.word	0x08019a18
 800d52c:	0801940c 	.word	0x0801940c

0800d530 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <tcp_rexmit_rto+0x1c>
 800d53e:	4b0a      	ldr	r3, [pc, #40]	@ (800d568 <tcp_rexmit_rto+0x38>)
 800d540:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d544:	4909      	ldr	r1, [pc, #36]	@ (800d56c <tcp_rexmit_rto+0x3c>)
 800d546:	480a      	ldr	r0, [pc, #40]	@ (800d570 <tcp_rexmit_rto+0x40>)
 800d548:	f006 fc70 	bl	8013e2c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f7ff ff57 	bl	800d400 <tcp_rexmit_rto_prepare>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d102      	bne.n	800d55e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff ffc1 	bl	800d4e0 <tcp_rexmit_rto_commit>
  }
}
 800d55e:	bf00      	nop
 800d560:	3708      	adds	r7, #8
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	080193b8 	.word	0x080193b8
 800d56c:	08019a3c 	.word	0x08019a3c
 800d570:	0801940c 	.word	0x0801940c

0800d574 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d574:	b590      	push	{r4, r7, lr}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <tcp_rexmit+0x1c>
 800d582:	4b2f      	ldr	r3, [pc, #188]	@ (800d640 <tcp_rexmit+0xcc>)
 800d584:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d588:	492e      	ldr	r1, [pc, #184]	@ (800d644 <tcp_rexmit+0xd0>)
 800d58a:	482f      	ldr	r0, [pc, #188]	@ (800d648 <tcp_rexmit+0xd4>)
 800d58c:	f006 fc4e 	bl	8013e2c <iprintf>

  if (pcb->unacked == NULL) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d598:	f06f 0305 	mvn.w	r3, #5
 800d59c:	e04c      	b.n	800d638 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d5a4:	68b8      	ldr	r0, [r7, #8]
 800d5a6:	f7ff fe2b 	bl	800d200 <tcp_output_segment_busy>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d5b0:	f06f 0305 	mvn.w	r3, #5
 800d5b4:	e040      	b.n	800d638 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	336c      	adds	r3, #108	@ 0x6c
 800d5c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d5c4:	e002      	b.n	800d5cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d011      	beq.n	800d5f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7f8 fcbb 	bl	8005f58 <lwip_htonl>
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7f8 fcb4 	bl	8005f58 <lwip_htonl>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dbe6      	blt.n	800d5c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d103      	bne.n	800d616 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d61c:	2bff      	cmp	r3, #255	@ 0xff
 800d61e:	d007      	beq.n	800d630 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd90      	pop	{r4, r7, pc}
 800d640:	080193b8 	.word	0x080193b8
 800d644:	08019a58 	.word	0x08019a58
 800d648:	0801940c 	.word	0x0801940c

0800d64c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d106      	bne.n	800d668 <tcp_rexmit_fast+0x1c>
 800d65a:	4b2a      	ldr	r3, [pc, #168]	@ (800d704 <tcp_rexmit_fast+0xb8>)
 800d65c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d660:	4929      	ldr	r1, [pc, #164]	@ (800d708 <tcp_rexmit_fast+0xbc>)
 800d662:	482a      	ldr	r0, [pc, #168]	@ (800d70c <tcp_rexmit_fast+0xc0>)
 800d664:	f006 fbe2 	bl	8013e2c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d045      	beq.n	800d6fc <tcp_rexmit_fast+0xb0>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	8b5b      	ldrh	r3, [r3, #26]
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d13f      	bne.n	800d6fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff ff79 	bl	800d574 <tcp_rexmit>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d139      	bne.n	800d6fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d694:	4293      	cmp	r3, r2
 800d696:	bf28      	it	cs
 800d698:	4613      	movcs	r3, r2
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	da00      	bge.n	800d6a2 <tcp_rexmit_fast+0x56>
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	105b      	asrs	r3, r3, #1
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d206      	bcs.n	800d6cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	b29a      	uxth	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	0049      	lsls	r1, r1, #1
 800d6da:	440b      	add	r3, r1
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	4413      	add	r3, r2
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	8b5b      	ldrh	r3, [r3, #26]
 800d6ec:	f043 0304 	orr.w	r3, r3, #4
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d6fc:	bf00      	nop
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	080193b8 	.word	0x080193b8
 800d708:	08019a70 	.word	0x08019a70
 800d70c:	0801940c 	.word	0x0801940c

0800d710 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	460b      	mov	r3, r1
 800d71c:	817b      	strh	r3, [r7, #10]
 800d71e:	4613      	mov	r3, r2
 800d720:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d722:	897a      	ldrh	r2, [r7, #10]
 800d724:	893b      	ldrh	r3, [r7, #8]
 800d726:	4413      	add	r3, r2
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3314      	adds	r3, #20
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d732:	4619      	mov	r1, r3
 800d734:	2022      	movs	r0, #34	@ 0x22
 800d736:	f7f9 fca3 	bl	8007080 <pbuf_alloc>
 800d73a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d04d      	beq.n	800d7de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d742:	897b      	ldrh	r3, [r7, #10]
 800d744:	3313      	adds	r3, #19
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	8952      	ldrh	r2, [r2, #10]
 800d74a:	4293      	cmp	r3, r2
 800d74c:	db06      	blt.n	800d75c <tcp_output_alloc_header_common+0x4c>
 800d74e:	4b26      	ldr	r3, [pc, #152]	@ (800d7e8 <tcp_output_alloc_header_common+0xd8>)
 800d750:	f240 7223 	movw	r2, #1827	@ 0x723
 800d754:	4925      	ldr	r1, [pc, #148]	@ (800d7ec <tcp_output_alloc_header_common+0xdc>)
 800d756:	4826      	ldr	r0, [pc, #152]	@ (800d7f0 <tcp_output_alloc_header_common+0xe0>)
 800d758:	f006 fb68 	bl	8013e2c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d762:	8c3b      	ldrh	r3, [r7, #32]
 800d764:	4618      	mov	r0, r3
 800d766:	f7f8 fbe1 	bl	8005f2c <lwip_htons>
 800d76a:	4603      	mov	r3, r0
 800d76c:	461a      	mov	r2, r3
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d772:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d774:	4618      	mov	r0, r3
 800d776:	f7f8 fbd9 	bl	8005f2c <lwip_htons>
 800d77a:	4603      	mov	r3, r0
 800d77c:	461a      	mov	r2, r3
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7f8 fbe5 	bl	8005f58 <lwip_htonl>
 800d78e:	4602      	mov	r2, r0
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d794:	897b      	ldrh	r3, [r7, #10]
 800d796:	089b      	lsrs	r3, r3, #2
 800d798:	b29b      	uxth	r3, r3
 800d79a:	3305      	adds	r3, #5
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	031b      	lsls	r3, r3, #12
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7f8 fbbd 	bl	8005f2c <lwip_htons>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d7ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f8 fbb5 	bl	8005f2c <lwip_htons>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	741a      	strb	r2, [r3, #16]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	749a      	strb	r2, [r3, #18]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d7de:	697b      	ldr	r3, [r7, #20]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	080193b8 	.word	0x080193b8
 800d7ec:	08019a90 	.word	0x08019a90
 800d7f0:	0801940c 	.word	0x0801940c

0800d7f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d7f4:	b5b0      	push	{r4, r5, r7, lr}
 800d7f6:	b08a      	sub	sp, #40	@ 0x28
 800d7f8:	af04      	add	r7, sp, #16
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	607b      	str	r3, [r7, #4]
 800d7fe:	460b      	mov	r3, r1
 800d800:	817b      	strh	r3, [r7, #10]
 800d802:	4613      	mov	r3, r2
 800d804:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d106      	bne.n	800d81a <tcp_output_alloc_header+0x26>
 800d80c:	4b15      	ldr	r3, [pc, #84]	@ (800d864 <tcp_output_alloc_header+0x70>)
 800d80e:	f240 7242 	movw	r2, #1858	@ 0x742
 800d812:	4915      	ldr	r1, [pc, #84]	@ (800d868 <tcp_output_alloc_header+0x74>)
 800d814:	4815      	ldr	r0, [pc, #84]	@ (800d86c <tcp_output_alloc_header+0x78>)
 800d816:	f006 fb09 	bl	8013e2c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	8adb      	ldrh	r3, [r3, #22]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	8b12      	ldrh	r2, [r2, #24]
 800d826:	68f9      	ldr	r1, [r7, #12]
 800d828:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d82a:	893d      	ldrh	r5, [r7, #8]
 800d82c:	897c      	ldrh	r4, [r7, #10]
 800d82e:	9103      	str	r1, [sp, #12]
 800d830:	2110      	movs	r1, #16
 800d832:	9102      	str	r1, [sp, #8]
 800d834:	9201      	str	r2, [sp, #4]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	462a      	mov	r2, r5
 800d83c:	4621      	mov	r1, r4
 800d83e:	f7ff ff67 	bl	800d710 <tcp_output_alloc_header_common>
 800d842:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d006      	beq.n	800d858 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d852:	441a      	add	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d858:	697b      	ldr	r3, [r7, #20]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3718      	adds	r7, #24
 800d85e:	46bd      	mov	sp, r7
 800d860:	bdb0      	pop	{r4, r5, r7, pc}
 800d862:	bf00      	nop
 800d864:	080193b8 	.word	0x080193b8
 800d868:	08019ac0 	.word	0x08019ac0
 800d86c:	0801940c 	.word	0x0801940c

0800d870 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b088      	sub	sp, #32
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	460b      	mov	r3, r1
 800d880:	71fb      	strb	r3, [r7, #7]
 800d882:	4613      	mov	r3, r2
 800d884:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d106      	bne.n	800d89e <tcp_output_fill_options+0x2e>
 800d890:	4b12      	ldr	r3, [pc, #72]	@ (800d8dc <tcp_output_fill_options+0x6c>)
 800d892:	f240 7256 	movw	r2, #1878	@ 0x756
 800d896:	4912      	ldr	r1, [pc, #72]	@ (800d8e0 <tcp_output_fill_options+0x70>)
 800d898:	4812      	ldr	r0, [pc, #72]	@ (800d8e4 <tcp_output_fill_options+0x74>)
 800d89a:	f006 fac7 	bl	8013e2c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	3314      	adds	r3, #20
 800d8a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d8aa:	8bfb      	ldrh	r3, [r7, #30]
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	79fb      	ldrb	r3, [r7, #7]
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	f003 0304 	and.w	r3, r3, #4
 800d8b8:	4413      	add	r3, r2
 800d8ba:	3314      	adds	r3, #20
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	4413      	add	r3, r2
 800d8c0:	697a      	ldr	r2, [r7, #20]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d006      	beq.n	800d8d4 <tcp_output_fill_options+0x64>
 800d8c6:	4b05      	ldr	r3, [pc, #20]	@ (800d8dc <tcp_output_fill_options+0x6c>)
 800d8c8:	f240 7275 	movw	r2, #1909	@ 0x775
 800d8cc:	4906      	ldr	r1, [pc, #24]	@ (800d8e8 <tcp_output_fill_options+0x78>)
 800d8ce:	4805      	ldr	r0, [pc, #20]	@ (800d8e4 <tcp_output_fill_options+0x74>)
 800d8d0:	f006 faac 	bl	8013e2c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d8d4:	bf00      	nop
 800d8d6:	3720      	adds	r7, #32
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	080193b8 	.word	0x080193b8
 800d8e0:	08019ae8 	.word	0x08019ae8
 800d8e4:	0801940c 	.word	0x0801940c
 800d8e8:	080199e0 	.word	0x080199e0

0800d8ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b08a      	sub	sp, #40	@ 0x28
 800d8f0:	af04      	add	r7, sp, #16
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <tcp_output_control_segment+0x22>
 800d900:	4b1c      	ldr	r3, [pc, #112]	@ (800d974 <tcp_output_control_segment+0x88>)
 800d902:	f240 7287 	movw	r2, #1927	@ 0x787
 800d906:	491c      	ldr	r1, [pc, #112]	@ (800d978 <tcp_output_control_segment+0x8c>)
 800d908:	481c      	ldr	r0, [pc, #112]	@ (800d97c <tcp_output_control_segment+0x90>)
 800d90a:	f006 fa8f 	bl	8013e2c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f7fe faea 	bl	800beec <tcp_route>
 800d918:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d920:	23fc      	movs	r3, #252	@ 0xfc
 800d922:	75fb      	strb	r3, [r7, #23]
 800d924:	e01c      	b.n	800d960 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d006      	beq.n	800d93a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	7adb      	ldrb	r3, [r3, #11]
 800d930:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	7a9b      	ldrb	r3, [r3, #10]
 800d936:	757b      	strb	r3, [r7, #21]
 800d938:	e003      	b.n	800d942 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d93a:	23ff      	movs	r3, #255	@ 0xff
 800d93c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d942:	7dba      	ldrb	r2, [r7, #22]
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	9302      	str	r3, [sp, #8]
 800d948:	2306      	movs	r3, #6
 800d94a:	9301      	str	r3, [sp, #4]
 800d94c:	7d7b      	ldrb	r3, [r7, #21]
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	4613      	mov	r3, r2
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	68b8      	ldr	r0, [r7, #8]
 800d958:	f004 f95a 	bl	8011c10 <ip4_output_if>
 800d95c:	4603      	mov	r3, r0
 800d95e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d960:	68b8      	ldr	r0, [r7, #8]
 800d962:	f7f9 fe71 	bl	8007648 <pbuf_free>
  return err;
 800d966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	080193b8 	.word	0x080193b8
 800d978:	08019b10 	.word	0x08019b10
 800d97c:	0801940c 	.word	0x0801940c

0800d980 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d980:	b590      	push	{r4, r7, lr}
 800d982:	b08b      	sub	sp, #44	@ 0x2c
 800d984:	af04      	add	r7, sp, #16
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <tcp_rst+0x22>
 800d994:	4b1e      	ldr	r3, [pc, #120]	@ (800da10 <tcp_rst+0x90>)
 800d996:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d99a:	491e      	ldr	r1, [pc, #120]	@ (800da14 <tcp_rst+0x94>)
 800d99c:	481e      	ldr	r0, [pc, #120]	@ (800da18 <tcp_rst+0x98>)
 800d99e:	f006 fa45 	bl	8013e2c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d106      	bne.n	800d9b6 <tcp_rst+0x36>
 800d9a8:	4b19      	ldr	r3, [pc, #100]	@ (800da10 <tcp_rst+0x90>)
 800d9aa:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d9ae:	491b      	ldr	r1, [pc, #108]	@ (800da1c <tcp_rst+0x9c>)
 800d9b0:	4819      	ldr	r0, [pc, #100]	@ (800da18 <tcp_rst+0x98>)
 800d9b2:	f006 fa3b 	bl	8013e2c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d9ba:	2310      	movs	r3, #16
 800d9bc:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d9be:	7dfb      	ldrb	r3, [r7, #23]
 800d9c0:	b29c      	uxth	r4, r3
 800d9c2:	68b8      	ldr	r0, [r7, #8]
 800d9c4:	f7f8 fac8 	bl	8005f58 <lwip_htonl>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	8abb      	ldrh	r3, [r7, #20]
 800d9cc:	9303      	str	r3, [sp, #12]
 800d9ce:	2314      	movs	r3, #20
 800d9d0:	9302      	str	r3, [sp, #8]
 800d9d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	2200      	movs	r2, #0
 800d9de:	4621      	mov	r1, r4
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff fe95 	bl	800d710 <tcp_output_alloc_header_common>
 800d9e6:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00c      	beq.n	800da08 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	6939      	ldr	r1, [r7, #16]
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7ff ff3b 	bl	800d870 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fc:	683a      	ldr	r2, [r7, #0]
 800d9fe:	6939      	ldr	r1, [r7, #16]
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f7ff ff73 	bl	800d8ec <tcp_output_control_segment>
 800da06:	e000      	b.n	800da0a <tcp_rst+0x8a>
    return;
 800da08:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800da0a:	371c      	adds	r7, #28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd90      	pop	{r4, r7, pc}
 800da10:	080193b8 	.word	0x080193b8
 800da14:	08019b3c 	.word	0x08019b3c
 800da18:	0801940c 	.word	0x0801940c
 800da1c:	08019b58 	.word	0x08019b58

0800da20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800da20:	b590      	push	{r4, r7, lr}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <tcp_send_empty_ack+0x24>
 800da36:	4b28      	ldr	r3, [pc, #160]	@ (800dad8 <tcp_send_empty_ack+0xb8>)
 800da38:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800da3c:	4927      	ldr	r1, [pc, #156]	@ (800dadc <tcp_send_empty_ack+0xbc>)
 800da3e:	4828      	ldr	r0, [pc, #160]	@ (800dae0 <tcp_send_empty_ack+0xc0>)
 800da40:	f006 f9f4 	bl	8013e2c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da44:	7dfb      	ldrb	r3, [r7, #23]
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800da50:	7d7b      	ldrb	r3, [r7, #21]
 800da52:	b29c      	uxth	r4, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f8 fa7d 	bl	8005f58 <lwip_htonl>
 800da5e:	4603      	mov	r3, r0
 800da60:	2200      	movs	r2, #0
 800da62:	4621      	mov	r1, r4
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff fec5 	bl	800d7f4 <tcp_output_alloc_header>
 800da6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d109      	bne.n	800da86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8b5b      	ldrh	r3, [r3, #26]
 800da76:	f043 0303 	orr.w	r3, r3, #3
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800da80:	f06f 0301 	mvn.w	r3, #1
 800da84:	e023      	b.n	800dace <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800da86:	7dbb      	ldrb	r3, [r7, #22]
 800da88:	7dfa      	ldrb	r2, [r7, #23]
 800da8a:	6939      	ldr	r1, [r7, #16]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff feef 	bl	800d870 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	3304      	adds	r3, #4
 800da98:	6939      	ldr	r1, [r7, #16]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff ff26 	bl	800d8ec <tcp_output_control_segment>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800daa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d007      	beq.n	800dabc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	8b5b      	ldrh	r3, [r3, #26]
 800dab0:	f043 0303 	orr.w	r3, r3, #3
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	835a      	strh	r2, [r3, #26]
 800daba:	e006      	b.n	800daca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	8b5b      	ldrh	r3, [r3, #26]
 800dac0:	f023 0303 	bic.w	r3, r3, #3
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800daca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	371c      	adds	r7, #28
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd90      	pop	{r4, r7, pc}
 800dad6:	bf00      	nop
 800dad8:	080193b8 	.word	0x080193b8
 800dadc:	08019b74 	.word	0x08019b74
 800dae0:	0801940c 	.word	0x0801940c

0800dae4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800daec:	2300      	movs	r3, #0
 800daee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <tcp_keepalive+0x20>
 800daf6:	4b18      	ldr	r3, [pc, #96]	@ (800db58 <tcp_keepalive+0x74>)
 800daf8:	f640 0224 	movw	r2, #2084	@ 0x824
 800dafc:	4917      	ldr	r1, [pc, #92]	@ (800db5c <tcp_keepalive+0x78>)
 800dafe:	4818      	ldr	r0, [pc, #96]	@ (800db60 <tcp_keepalive+0x7c>)
 800db00:	f006 f994 	bl	8013e2c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800db04:	7dfb      	ldrb	r3, [r7, #23]
 800db06:	b29c      	uxth	r4, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db0c:	3b01      	subs	r3, #1
 800db0e:	4618      	mov	r0, r3
 800db10:	f7f8 fa22 	bl	8005f58 <lwip_htonl>
 800db14:	4603      	mov	r3, r0
 800db16:	2200      	movs	r2, #0
 800db18:	4621      	mov	r1, r4
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fe6a 	bl	800d7f4 <tcp_output_alloc_header>
 800db20:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d102      	bne.n	800db2e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800db28:	f04f 33ff 	mov.w	r3, #4294967295
 800db2c:	e010      	b.n	800db50 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2200      	movs	r2, #0
 800db32:	6939      	ldr	r1, [r7, #16]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fe9b 	bl	800d870 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	3304      	adds	r3, #4
 800db40:	6939      	ldr	r1, [r7, #16]
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7ff fed2 	bl	800d8ec <tcp_output_control_segment>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800db4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	371c      	adds	r7, #28
 800db54:	46bd      	mov	sp, r7
 800db56:	bd90      	pop	{r4, r7, pc}
 800db58:	080193b8 	.word	0x080193b8
 800db5c:	08019b94 	.word	0x08019b94
 800db60:	0801940c 	.word	0x0801940c

0800db64 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db64:	b590      	push	{r4, r7, lr}
 800db66:	b08b      	sub	sp, #44	@ 0x2c
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <tcp_zero_window_probe+0x22>
 800db78:	4b4c      	ldr	r3, [pc, #304]	@ (800dcac <tcp_zero_window_probe+0x148>)
 800db7a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800db7e:	494c      	ldr	r1, [pc, #304]	@ (800dcb0 <tcp_zero_window_probe+0x14c>)
 800db80:	484c      	ldr	r0, [pc, #304]	@ (800dcb4 <tcp_zero_window_probe+0x150>)
 800db82:	f006 f953 	bl	8013e2c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db8a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	e086      	b.n	800dca4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800db9c:	2bff      	cmp	r3, #255	@ 0xff
 800db9e:	d007      	beq.n	800dbb0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dba6:	3301      	adds	r3, #1
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dbb0:	6a3b      	ldr	r3, [r7, #32]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	899b      	ldrh	r3, [r3, #12]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f8 f9b7 	bl	8005f2c <lwip_htons>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d005      	beq.n	800dbd6 <tcp_zero_window_probe+0x72>
 800dbca:	6a3b      	ldr	r3, [r7, #32]
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <tcp_zero_window_probe+0x72>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e000      	b.n	800dbd8 <tcp_zero_window_probe+0x74>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dbda:	7ffb      	ldrb	r3, [r7, #31]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	bf0c      	ite	eq
 800dbe0:	2301      	moveq	r3, #1
 800dbe2:	2300      	movne	r3, #0
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbec:	b299      	uxth	r1, r3
 800dbee:	6a3b      	ldr	r3, [r7, #32]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	8bba      	ldrh	r2, [r7, #28]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fdfc 	bl	800d7f4 <tcp_output_alloc_header>
 800dbfc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d102      	bne.n	800dc0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	e04c      	b.n	800dca4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dc10:	7ffb      	ldrb	r3, [r7, #31]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d011      	beq.n	800dc3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	899b      	ldrh	r3, [r3, #12]
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dc22:	b21c      	sxth	r4, r3
 800dc24:	2011      	movs	r0, #17
 800dc26:	f7f8 f981 	bl	8005f2c <lwip_htons>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	b21b      	sxth	r3, r3
 800dc2e:	4323      	orrs	r3, r4
 800dc30:	b21b      	sxth	r3, r3
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	819a      	strh	r2, [r3, #12]
 800dc38:	e010      	b.n	800dc5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	3314      	adds	r3, #20
 800dc40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	6858      	ldr	r0, [r3, #4]
 800dc46:	6a3b      	ldr	r3, [r7, #32]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	891a      	ldrh	r2, [r3, #8]
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	891b      	ldrh	r3, [r3, #8]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	2201      	movs	r2, #1
 800dc56:	6939      	ldr	r1, [r7, #16]
 800dc58:	f7f9 fef0 	bl	8007a3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7f8 f978 	bl	8005f58 <lwip_htonl>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	da02      	bge.n	800dc80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc84:	2200      	movs	r2, #0
 800dc86:	69b9      	ldr	r1, [r7, #24]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff fdf1 	bl	800d870 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3304      	adds	r3, #4
 800dc94:	69b9      	ldr	r1, [r7, #24]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fe28 	bl	800d8ec <tcp_output_control_segment>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	372c      	adds	r7, #44	@ 0x2c
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd90      	pop	{r4, r7, pc}
 800dcac:	080193b8 	.word	0x080193b8
 800dcb0:	08019bb0 	.word	0x08019bb0
 800dcb4:	0801940c 	.word	0x0801940c

0800dcb8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dcc0:	f7fa f80e 	bl	8007ce0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dcc4:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf0 <tcpip_tcp_timer+0x38>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d103      	bne.n	800dcd4 <tcpip_tcp_timer+0x1c>
 800dccc:	4b09      	ldr	r3, [pc, #36]	@ (800dcf4 <tcpip_tcp_timer+0x3c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d005      	beq.n	800dce0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	4908      	ldr	r1, [pc, #32]	@ (800dcf8 <tcpip_tcp_timer+0x40>)
 800dcd8:	20fa      	movs	r0, #250	@ 0xfa
 800dcda:	f000 f8f3 	bl	800dec4 <sys_timeout>
 800dcde:	e003      	b.n	800dce8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dce0:	4b06      	ldr	r3, [pc, #24]	@ (800dcfc <tcpip_tcp_timer+0x44>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
  }
}
 800dce6:	bf00      	nop
 800dce8:	bf00      	nop
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	20007fe0 	.word	0x20007fe0
 800dcf4:	20007fe4 	.word	0x20007fe4
 800dcf8:	0800dcb9 	.word	0x0800dcb9
 800dcfc:	2000802c 	.word	0x2000802c

0800dd00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dd04:	4b0a      	ldr	r3, [pc, #40]	@ (800dd30 <tcp_timer_needed+0x30>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10f      	bne.n	800dd2c <tcp_timer_needed+0x2c>
 800dd0c:	4b09      	ldr	r3, [pc, #36]	@ (800dd34 <tcp_timer_needed+0x34>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <tcp_timer_needed+0x1c>
 800dd14:	4b08      	ldr	r3, [pc, #32]	@ (800dd38 <tcp_timer_needed+0x38>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dd1c:	4b04      	ldr	r3, [pc, #16]	@ (800dd30 <tcp_timer_needed+0x30>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dd22:	2200      	movs	r2, #0
 800dd24:	4905      	ldr	r1, [pc, #20]	@ (800dd3c <tcp_timer_needed+0x3c>)
 800dd26:	20fa      	movs	r0, #250	@ 0xfa
 800dd28:	f000 f8cc 	bl	800dec4 <sys_timeout>
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	2000802c 	.word	0x2000802c
 800dd34:	20007fe0 	.word	0x20007fe0
 800dd38:	20007fe4 	.word	0x20007fe4
 800dd3c:	0800dcb9 	.word	0x0800dcb9

0800dd40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dd4c:	2006      	movs	r0, #6
 800dd4e:	f7f8 fd89 	bl	8006864 <memp_malloc>
 800dd52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d109      	bne.n	800dd6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d151      	bne.n	800de04 <sys_timeout_abs+0xc4>
 800dd60:	4b2a      	ldr	r3, [pc, #168]	@ (800de0c <sys_timeout_abs+0xcc>)
 800dd62:	22be      	movs	r2, #190	@ 0xbe
 800dd64:	492a      	ldr	r1, [pc, #168]	@ (800de10 <sys_timeout_abs+0xd0>)
 800dd66:	482b      	ldr	r0, [pc, #172]	@ (800de14 <sys_timeout_abs+0xd4>)
 800dd68:	f006 f860 	bl	8013e2c <iprintf>
    return;
 800dd6c:	e04a      	b.n	800de04 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	2200      	movs	r2, #0
 800dd72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dd86:	4b24      	ldr	r3, [pc, #144]	@ (800de18 <sys_timeout_abs+0xd8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d103      	bne.n	800dd96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dd8e:	4a22      	ldr	r2, [pc, #136]	@ (800de18 <sys_timeout_abs+0xd8>)
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	6013      	str	r3, [r2, #0]
    return;
 800dd94:	e037      	b.n	800de06 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	685a      	ldr	r2, [r3, #4]
 800dd9a:	4b1f      	ldr	r3, [pc, #124]	@ (800de18 <sys_timeout_abs+0xd8>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	0fdb      	lsrs	r3, r3, #31
 800dda4:	f003 0301 	and.w	r3, r3, #1
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d007      	beq.n	800ddbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ddae:	4b1a      	ldr	r3, [pc, #104]	@ (800de18 <sys_timeout_abs+0xd8>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ddb6:	4a18      	ldr	r2, [pc, #96]	@ (800de18 <sys_timeout_abs+0xd8>)
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	6013      	str	r3, [r2, #0]
 800ddbc:	e023      	b.n	800de06 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ddbe:	4b16      	ldr	r3, [pc, #88]	@ (800de18 <sys_timeout_abs+0xd8>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	e01a      	b.n	800ddfc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00b      	beq.n	800dde6 <sys_timeout_abs+0xa6>
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	0fdb      	lsrs	r3, r3, #31
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d007      	beq.n	800ddf6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	601a      	str	r2, [r3, #0]
        break;
 800ddf4:	e007      	b.n	800de06 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	617b      	str	r3, [r7, #20]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e1      	bne.n	800ddc6 <sys_timeout_abs+0x86>
 800de02:	e000      	b.n	800de06 <sys_timeout_abs+0xc6>
    return;
 800de04:	bf00      	nop
      }
    }
  }
}
 800de06:	3718      	adds	r7, #24
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	08019bd4 	.word	0x08019bd4
 800de10:	08019c08 	.word	0x08019c08
 800de14:	08019c48 	.word	0x08019c48
 800de18:	20008024 	.word	0x20008024

0800de1c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b086      	sub	sp, #24
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	4798      	blx	r3

  now = sys_now();
 800de2e:	f7f6 fa73 	bl	8004318 <sys_now>
 800de32:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	4b0f      	ldr	r3, [pc, #60]	@ (800de78 <lwip_cyclic_timer+0x5c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4413      	add	r3, r2
 800de3e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	0fdb      	lsrs	r3, r3, #31
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d009      	beq.n	800de66 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	4413      	add	r3, r2
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	4907      	ldr	r1, [pc, #28]	@ (800de7c <lwip_cyclic_timer+0x60>)
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff ff6e 	bl	800dd40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800de64:	e004      	b.n	800de70 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	4904      	ldr	r1, [pc, #16]	@ (800de7c <lwip_cyclic_timer+0x60>)
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff ff68 	bl	800dd40 <sys_timeout_abs>
}
 800de70:	bf00      	nop
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	20008028 	.word	0x20008028
 800de7c:	0800de1d 	.word	0x0800de1d

0800de80 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de86:	2301      	movs	r3, #1
 800de88:	607b      	str	r3, [r7, #4]
 800de8a:	e00e      	b.n	800deaa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800de8c:	4a0b      	ldr	r2, [pc, #44]	@ (800debc <sys_timeouts_init+0x3c>)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	00db      	lsls	r3, r3, #3
 800de98:	4a08      	ldr	r2, [pc, #32]	@ (800debc <sys_timeouts_init+0x3c>)
 800de9a:	4413      	add	r3, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	4908      	ldr	r1, [pc, #32]	@ (800dec0 <sys_timeouts_init+0x40>)
 800dea0:	f000 f810 	bl	800dec4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3301      	adds	r3, #1
 800dea8:	607b      	str	r3, [r7, #4]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b04      	cmp	r3, #4
 800deae:	d9ed      	bls.n	800de8c <sys_timeouts_init+0xc>
  }
}
 800deb0:	bf00      	nop
 800deb2:	bf00      	nop
 800deb4:	3708      	adds	r7, #8
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	0801abc8 	.word	0x0801abc8
 800dec0:	0800de1d 	.word	0x0800de1d

0800dec4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ded6:	d306      	bcc.n	800dee6 <sys_timeout+0x22>
 800ded8:	4b0a      	ldr	r3, [pc, #40]	@ (800df04 <sys_timeout+0x40>)
 800deda:	f240 1229 	movw	r2, #297	@ 0x129
 800dede:	490a      	ldr	r1, [pc, #40]	@ (800df08 <sys_timeout+0x44>)
 800dee0:	480a      	ldr	r0, [pc, #40]	@ (800df0c <sys_timeout+0x48>)
 800dee2:	f005 ffa3 	bl	8013e2c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dee6:	f7f6 fa17 	bl	8004318 <sys_now>
 800deea:	4602      	mov	r2, r0
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	68b9      	ldr	r1, [r7, #8]
 800def6:	6978      	ldr	r0, [r7, #20]
 800def8:	f7ff ff22 	bl	800dd40 <sys_timeout_abs>
#endif
}
 800defc:	bf00      	nop
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	08019bd4 	.word	0x08019bd4
 800df08:	08019c70 	.word	0x08019c70
 800df0c:	08019c48 	.word	0x08019c48

0800df10 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800df1a:	4b19      	ldr	r3, [pc, #100]	@ (800df80 <sys_untimeout+0x70>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d029      	beq.n	800df76 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800df22:	4b17      	ldr	r3, [pc, #92]	@ (800df80 <sys_untimeout+0x70>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60bb      	str	r3, [r7, #8]
 800df28:	2300      	movs	r3, #0
 800df2a:	60fb      	str	r3, [r7, #12]
 800df2c:	e01f      	b.n	800df6e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	429a      	cmp	r2, r3
 800df36:	d115      	bne.n	800df64 <sys_untimeout+0x54>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d110      	bne.n	800df64 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d104      	bne.n	800df52 <sys_untimeout+0x42>
        next_timeout = t->next;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a0c      	ldr	r2, [pc, #48]	@ (800df80 <sys_untimeout+0x70>)
 800df4e:	6013      	str	r3, [r2, #0]
 800df50:	e003      	b.n	800df5a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 800df5a:	68b9      	ldr	r1, [r7, #8]
 800df5c:	2006      	movs	r0, #6
 800df5e:	f7f8 fcf1 	bl	8006944 <memp_free>
      return;
 800df62:	e009      	b.n	800df78 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	60bb      	str	r3, [r7, #8]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1dc      	bne.n	800df2e <sys_untimeout+0x1e>
    }
  }
  return;
 800df74:	e000      	b.n	800df78 <sys_untimeout+0x68>
    return;
 800df76:	bf00      	nop
}
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	20008024 	.word	0x20008024

0800df84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800df8a:	f7f6 f9c5 	bl	8004318 <sys_now>
 800df8e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800df90:	4b1a      	ldr	r3, [pc, #104]	@ (800dffc <sys_check_timeouts+0x78>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <sys_check_timeouts+0x1a>
 800df9a:	f7f9 f81b 	bl	8006fd4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800df9e:	4b18      	ldr	r3, [pc, #96]	@ (800e000 <sys_check_timeouts+0x7c>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d022      	beq.n	800dff0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	0fdb      	lsrs	r3, r3, #31
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d11a      	bne.n	800dff4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a0f      	ldr	r2, [pc, #60]	@ (800e000 <sys_check_timeouts+0x7c>)
 800dfc4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	4a0b      	ldr	r2, [pc, #44]	@ (800e004 <sys_check_timeouts+0x80>)
 800dfd8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	2006      	movs	r0, #6
 800dfde:	f7f8 fcb1 	bl	8006944 <memp_free>
    if (handler != NULL) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0d3      	beq.n	800df90 <sys_check_timeouts+0xc>
      handler(arg);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6838      	ldr	r0, [r7, #0]
 800dfec:	4798      	blx	r3
  do {
 800dfee:	e7cf      	b.n	800df90 <sys_check_timeouts+0xc>
      return;
 800dff0:	bf00      	nop
 800dff2:	e000      	b.n	800dff6 <sys_check_timeouts+0x72>
      return;
 800dff4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	20007fd1 	.word	0x20007fd1
 800e000:	20008024 	.word	0x20008024
 800e004:	20008028 	.word	0x20008028

0800e008 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e00c:	f004 ff58 	bl	8012ec0 <rand>
 800e010:	4603      	mov	r3, r0
 800e012:	b29b      	uxth	r3, r3
 800e014:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e018:	b29b      	uxth	r3, r3
 800e01a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e01e:	b29a      	uxth	r2, r3
 800e020:	4b01      	ldr	r3, [pc, #4]	@ (800e028 <udp_init+0x20>)
 800e022:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e024:	bf00      	nop
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20000038 	.word	0x20000038

0800e02c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e036:	4b17      	ldr	r3, [pc, #92]	@ (800e094 <udp_new_port+0x68>)
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	b291      	uxth	r1, r2
 800e03e:	4a15      	ldr	r2, [pc, #84]	@ (800e094 <udp_new_port+0x68>)
 800e040:	8011      	strh	r1, [r2, #0]
 800e042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e046:	4293      	cmp	r3, r2
 800e048:	d103      	bne.n	800e052 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e04a:	4b12      	ldr	r3, [pc, #72]	@ (800e094 <udp_new_port+0x68>)
 800e04c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e050:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e052:	4b11      	ldr	r3, [pc, #68]	@ (800e098 <udp_new_port+0x6c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	e011      	b.n	800e07e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	8a5a      	ldrh	r2, [r3, #18]
 800e05e:	4b0d      	ldr	r3, [pc, #52]	@ (800e094 <udp_new_port+0x68>)
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d108      	bne.n	800e078 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e066:	88fb      	ldrh	r3, [r7, #6]
 800e068:	3301      	adds	r3, #1
 800e06a:	80fb      	strh	r3, [r7, #6]
 800e06c:	88fb      	ldrh	r3, [r7, #6]
 800e06e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e072:	d3e0      	bcc.n	800e036 <udp_new_port+0xa>
        return 0;
 800e074:	2300      	movs	r3, #0
 800e076:	e007      	b.n	800e088 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	603b      	str	r3, [r7, #0]
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d1ea      	bne.n	800e05a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e084:	4b03      	ldr	r3, [pc, #12]	@ (800e094 <udp_new_port+0x68>)
 800e086:	881b      	ldrh	r3, [r3, #0]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	20000038 	.word	0x20000038
 800e098:	20008030 	.word	0x20008030

0800e09c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d105      	bne.n	800e0bc <udp_input_local_match+0x20>
 800e0b0:	4b27      	ldr	r3, [pc, #156]	@ (800e150 <udp_input_local_match+0xb4>)
 800e0b2:	2287      	movs	r2, #135	@ 0x87
 800e0b4:	4927      	ldr	r1, [pc, #156]	@ (800e154 <udp_input_local_match+0xb8>)
 800e0b6:	4828      	ldr	r0, [pc, #160]	@ (800e158 <udp_input_local_match+0xbc>)
 800e0b8:	f005 feb8 	bl	8013e2c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <udp_input_local_match+0x32>
 800e0c2:	4b23      	ldr	r3, [pc, #140]	@ (800e150 <udp_input_local_match+0xb4>)
 800e0c4:	2288      	movs	r2, #136	@ 0x88
 800e0c6:	4925      	ldr	r1, [pc, #148]	@ (800e15c <udp_input_local_match+0xc0>)
 800e0c8:	4823      	ldr	r0, [pc, #140]	@ (800e158 <udp_input_local_match+0xbc>)
 800e0ca:	f005 feaf 	bl	8013e2c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	7a1b      	ldrb	r3, [r3, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00b      	beq.n	800e0ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	7a1a      	ldrb	r2, [r3, #8]
 800e0da:	4b21      	ldr	r3, [pc, #132]	@ (800e160 <udp_input_local_match+0xc4>)
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d001      	beq.n	800e0ee <udp_input_local_match+0x52>
    return 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e02b      	b.n	800e146 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e0ee:	79fb      	ldrb	r3, [r7, #7]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d018      	beq.n	800e126 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d013      	beq.n	800e122 <udp_input_local_match+0x86>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00f      	beq.n	800e122 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e102:	4b17      	ldr	r3, [pc, #92]	@ (800e160 <udp_input_local_match+0xc4>)
 800e104:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10a:	d00a      	beq.n	800e122 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	4b13      	ldr	r3, [pc, #76]	@ (800e160 <udp_input_local_match+0xc4>)
 800e112:	695b      	ldr	r3, [r3, #20]
 800e114:	405a      	eors	r2, r3
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	3308      	adds	r3, #8
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d110      	bne.n	800e144 <udp_input_local_match+0xa8>
          return 1;
 800e122:	2301      	movs	r3, #1
 800e124:	e00f      	b.n	800e146 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d009      	beq.n	800e140 <udp_input_local_match+0xa4>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d005      	beq.n	800e140 <udp_input_local_match+0xa4>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	4b09      	ldr	r3, [pc, #36]	@ (800e160 <udp_input_local_match+0xc4>)
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d101      	bne.n	800e144 <udp_input_local_match+0xa8>
        return 1;
 800e140:	2301      	movs	r3, #1
 800e142:	e000      	b.n	800e146 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	08019cbc 	.word	0x08019cbc
 800e154:	08019cec 	.word	0x08019cec
 800e158:	08019d10 	.word	0x08019d10
 800e15c:	08019d38 	.word	0x08019d38
 800e160:	20004f98 	.word	0x20004f98

0800e164 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b08d      	sub	sp, #52	@ 0x34
 800e168:	af02      	add	r7, sp, #8
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d105      	bne.n	800e184 <udp_input+0x20>
 800e178:	4b7c      	ldr	r3, [pc, #496]	@ (800e36c <udp_input+0x208>)
 800e17a:	22cf      	movs	r2, #207	@ 0xcf
 800e17c:	497c      	ldr	r1, [pc, #496]	@ (800e370 <udp_input+0x20c>)
 800e17e:	487d      	ldr	r0, [pc, #500]	@ (800e374 <udp_input+0x210>)
 800e180:	f005 fe54 	bl	8013e2c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d105      	bne.n	800e196 <udp_input+0x32>
 800e18a:	4b78      	ldr	r3, [pc, #480]	@ (800e36c <udp_input+0x208>)
 800e18c:	22d0      	movs	r2, #208	@ 0xd0
 800e18e:	497a      	ldr	r1, [pc, #488]	@ (800e378 <udp_input+0x214>)
 800e190:	4878      	ldr	r0, [pc, #480]	@ (800e374 <udp_input+0x210>)
 800e192:	f005 fe4b 	bl	8013e2c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	895b      	ldrh	r3, [r3, #10]
 800e19a:	2b07      	cmp	r3, #7
 800e19c:	d803      	bhi.n	800e1a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7f9 fa52 	bl	8007648 <pbuf_free>
    goto end;
 800e1a4:	e0de      	b.n	800e364 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e1ac:	4b73      	ldr	r3, [pc, #460]	@ (800e37c <udp_input+0x218>)
 800e1ae:	695b      	ldr	r3, [r3, #20]
 800e1b0:	4a72      	ldr	r2, [pc, #456]	@ (800e37c <udp_input+0x218>)
 800e1b2:	6812      	ldr	r2, [r2, #0]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f003 fe02 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 feb0 	bl	8005f2c <lwip_htons>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	885b      	ldrh	r3, [r3, #2]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7f7 fea8 	bl	8005f2c <lwip_htons>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1ec:	4b64      	ldr	r3, [pc, #400]	@ (800e380 <udp_input+0x21c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1f2:	e054      	b.n	800e29e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1f6:	8a5b      	ldrh	r3, [r3, #18]
 800e1f8:	89fa      	ldrh	r2, [r7, #14]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d14a      	bne.n	800e294 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e1fe:	7cfb      	ldrb	r3, [r7, #19]
 800e200:	461a      	mov	r2, r3
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e206:	f7ff ff49 	bl	800e09c <udp_input_local_match>
 800e20a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d041      	beq.n	800e294 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e212:	7c1b      	ldrb	r3, [r3, #16]
 800e214:	f003 0304 	and.w	r3, r3, #4
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d11d      	bne.n	800e258 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d102      	bne.n	800e228 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e224:	61fb      	str	r3, [r7, #28]
 800e226:	e017      	b.n	800e258 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e228:	7cfb      	ldrb	r3, [r7, #19]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d014      	beq.n	800e258 <udp_input+0xf4>
 800e22e:	4b53      	ldr	r3, [pc, #332]	@ (800e37c <udp_input+0x218>)
 800e230:	695b      	ldr	r3, [r3, #20]
 800e232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e236:	d10f      	bne.n	800e258 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	3304      	adds	r3, #4
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	429a      	cmp	r2, r3
 800e244:	d008      	beq.n	800e258 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	3304      	adds	r3, #4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	429a      	cmp	r2, r3
 800e252:	d101      	bne.n	800e258 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	8a9b      	ldrh	r3, [r3, #20]
 800e25c:	8a3a      	ldrh	r2, [r7, #16]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d118      	bne.n	800e294 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e264:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e266:	2b00      	cmp	r3, #0
 800e268:	d005      	beq.n	800e276 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	4b43      	ldr	r3, [pc, #268]	@ (800e37c <udp_input+0x218>)
 800e270:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e272:	429a      	cmp	r2, r3
 800e274:	d10e      	bne.n	800e294 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d014      	beq.n	800e2a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27e:	68da      	ldr	r2, [r3, #12]
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e284:	4b3e      	ldr	r3, [pc, #248]	@ (800e380 <udp_input+0x21c>)
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e28c:	4a3c      	ldr	r2, [pc, #240]	@ (800e380 <udp_input+0x21c>)
 800e28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e290:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e292:	e008      	b.n	800e2a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e296:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1a7      	bne.n	800e1f4 <udp_input+0x90>
 800e2a4:	e000      	b.n	800e2a8 <udp_input+0x144>
        break;
 800e2a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d101      	bne.n	800e2b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <udp_input+0x15a>
    for_us = 1;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	76fb      	strb	r3, [r7, #27]
 800e2bc:	e00a      	b.n	800e2d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	4b2d      	ldr	r3, [pc, #180]	@ (800e37c <udp_input+0x218>)
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	bf0c      	ite	eq
 800e2cc:	2301      	moveq	r3, #1
 800e2ce:	2300      	movne	r3, #0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e2d4:	7efb      	ldrb	r3, [r7, #27]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d041      	beq.n	800e35e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e2da:	2108      	movs	r1, #8
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7f9 f92d 	bl	800753c <pbuf_remove_header>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00a      	beq.n	800e2fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e2e8:	4b20      	ldr	r3, [pc, #128]	@ (800e36c <udp_input+0x208>)
 800e2ea:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800e2ee:	4925      	ldr	r1, [pc, #148]	@ (800e384 <udp_input+0x220>)
 800e2f0:	4820      	ldr	r0, [pc, #128]	@ (800e374 <udp_input+0x210>)
 800e2f2:	f005 fd9b 	bl	8013e2c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7f9 f9a6 	bl	8007648 <pbuf_free>
      goto end;
 800e2fc:	e032      	b.n	800e364 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	2b00      	cmp	r3, #0
 800e302:	d012      	beq.n	800e32a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00a      	beq.n	800e322 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30e:	699c      	ldr	r4, [r3, #24]
 800e310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e312:	69d8      	ldr	r0, [r3, #28]
 800e314:	8a3b      	ldrh	r3, [r7, #16]
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	4b1b      	ldr	r3, [pc, #108]	@ (800e388 <udp_input+0x224>)
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e31e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e320:	e021      	b.n	800e366 <udp_input+0x202>
        pbuf_free(p);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7f9 f990 	bl	8007648 <pbuf_free>
        goto end;
 800e328:	e01c      	b.n	800e364 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e32a:	7cfb      	ldrb	r3, [r7, #19]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d112      	bne.n	800e356 <udp_input+0x1f2>
 800e330:	4b12      	ldr	r3, [pc, #72]	@ (800e37c <udp_input+0x218>)
 800e332:	695b      	ldr	r3, [r3, #20]
 800e334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e338:	2be0      	cmp	r3, #224	@ 0xe0
 800e33a:	d00c      	beq.n	800e356 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e33c:	4b0f      	ldr	r3, [pc, #60]	@ (800e37c <udp_input+0x218>)
 800e33e:	899b      	ldrh	r3, [r3, #12]
 800e340:	3308      	adds	r3, #8
 800e342:	b29b      	uxth	r3, r3
 800e344:	b21b      	sxth	r3, r3
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7f9 f96a 	bl	8007622 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e34e:	2103      	movs	r1, #3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f003 f9f7 	bl	8011744 <icmp_dest_unreach>
      pbuf_free(p);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f7f9 f976 	bl	8007648 <pbuf_free>
  return;
 800e35c:	e003      	b.n	800e366 <udp_input+0x202>
    pbuf_free(p);
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7f9 f972 	bl	8007648 <pbuf_free>
  return;
 800e364:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e366:	372c      	adds	r7, #44	@ 0x2c
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd90      	pop	{r4, r7, pc}
 800e36c:	08019cbc 	.word	0x08019cbc
 800e370:	08019d60 	.word	0x08019d60
 800e374:	08019d10 	.word	0x08019d10
 800e378:	08019d78 	.word	0x08019d78
 800e37c:	20004f98 	.word	0x20004f98
 800e380:	20008030 	.word	0x20008030
 800e384:	08019d94 	.word	0x08019d94
 800e388:	20004fa8 	.word	0x20004fa8

0800e38c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af02      	add	r7, sp, #8
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <udp_sendto_if+0x28>
 800e3a0:	4b2e      	ldr	r3, [pc, #184]	@ (800e45c <udp_sendto_if+0xd0>)
 800e3a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3a6:	492e      	ldr	r1, [pc, #184]	@ (800e460 <udp_sendto_if+0xd4>)
 800e3a8:	482e      	ldr	r0, [pc, #184]	@ (800e464 <udp_sendto_if+0xd8>)
 800e3aa:	f005 fd3f 	bl	8013e2c <iprintf>
 800e3ae:	f06f 030f 	mvn.w	r3, #15
 800e3b2:	e04f      	b.n	800e454 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d109      	bne.n	800e3ce <udp_sendto_if+0x42>
 800e3ba:	4b28      	ldr	r3, [pc, #160]	@ (800e45c <udp_sendto_if+0xd0>)
 800e3bc:	f240 2281 	movw	r2, #641	@ 0x281
 800e3c0:	4929      	ldr	r1, [pc, #164]	@ (800e468 <udp_sendto_if+0xdc>)
 800e3c2:	4828      	ldr	r0, [pc, #160]	@ (800e464 <udp_sendto_if+0xd8>)
 800e3c4:	f005 fd32 	bl	8013e2c <iprintf>
 800e3c8:	f06f 030f 	mvn.w	r3, #15
 800e3cc:	e042      	b.n	800e454 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d109      	bne.n	800e3e8 <udp_sendto_if+0x5c>
 800e3d4:	4b21      	ldr	r3, [pc, #132]	@ (800e45c <udp_sendto_if+0xd0>)
 800e3d6:	f240 2282 	movw	r2, #642	@ 0x282
 800e3da:	4924      	ldr	r1, [pc, #144]	@ (800e46c <udp_sendto_if+0xe0>)
 800e3dc:	4821      	ldr	r0, [pc, #132]	@ (800e464 <udp_sendto_if+0xd8>)
 800e3de:	f005 fd25 	bl	8013e2c <iprintf>
 800e3e2:	f06f 030f 	mvn.w	r3, #15
 800e3e6:	e035      	b.n	800e454 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e3e8:	6a3b      	ldr	r3, [r7, #32]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d109      	bne.n	800e402 <udp_sendto_if+0x76>
 800e3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e45c <udp_sendto_if+0xd0>)
 800e3f0:	f240 2283 	movw	r2, #643	@ 0x283
 800e3f4:	491e      	ldr	r1, [pc, #120]	@ (800e470 <udp_sendto_if+0xe4>)
 800e3f6:	481b      	ldr	r0, [pc, #108]	@ (800e464 <udp_sendto_if+0xd8>)
 800e3f8:	f005 fd18 	bl	8013e2c <iprintf>
 800e3fc:	f06f 030f 	mvn.w	r3, #15
 800e400:	e028      	b.n	800e454 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d009      	beq.n	800e41c <udp_sendto_if+0x90>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e418:	2be0      	cmp	r3, #224	@ 0xe0
 800e41a:	d103      	bne.n	800e424 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e41c:	6a3b      	ldr	r3, [r7, #32]
 800e41e:	3304      	adds	r3, #4
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	e00b      	b.n	800e43c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	6a3b      	ldr	r3, [r7, #32]
 800e42a:	3304      	adds	r3, #4
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d002      	beq.n	800e438 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e432:	f06f 0303 	mvn.w	r3, #3
 800e436:	e00d      	b.n	800e454 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e43c:	887a      	ldrh	r2, [r7, #2]
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	9301      	str	r3, [sp, #4]
 800e442:	6a3b      	ldr	r3, [r7, #32]
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	4613      	mov	r3, r2
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	68b9      	ldr	r1, [r7, #8]
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f000 f811 	bl	800e474 <udp_sendto_if_src>
 800e452:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	08019cbc 	.word	0x08019cbc
 800e460:	08019e30 	.word	0x08019e30
 800e464:	08019d10 	.word	0x08019d10
 800e468:	08019e4c 	.word	0x08019e4c
 800e46c:	08019e68 	.word	0x08019e68
 800e470:	08019e88 	.word	0x08019e88

0800e474 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b08c      	sub	sp, #48	@ 0x30
 800e478:	af04      	add	r7, sp, #16
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	607a      	str	r2, [r7, #4]
 800e480:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d109      	bne.n	800e49c <udp_sendto_if_src+0x28>
 800e488:	4b65      	ldr	r3, [pc, #404]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e48a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e48e:	4965      	ldr	r1, [pc, #404]	@ (800e624 <udp_sendto_if_src+0x1b0>)
 800e490:	4865      	ldr	r0, [pc, #404]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e492:	f005 fccb 	bl	8013e2c <iprintf>
 800e496:	f06f 030f 	mvn.w	r3, #15
 800e49a:	e0bc      	b.n	800e616 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d109      	bne.n	800e4b6 <udp_sendto_if_src+0x42>
 800e4a2:	4b5f      	ldr	r3, [pc, #380]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e4a4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800e4a8:	4960      	ldr	r1, [pc, #384]	@ (800e62c <udp_sendto_if_src+0x1b8>)
 800e4aa:	485f      	ldr	r0, [pc, #380]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e4ac:	f005 fcbe 	bl	8013e2c <iprintf>
 800e4b0:	f06f 030f 	mvn.w	r3, #15
 800e4b4:	e0af      	b.n	800e616 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d109      	bne.n	800e4d0 <udp_sendto_if_src+0x5c>
 800e4bc:	4b58      	ldr	r3, [pc, #352]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e4be:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800e4c2:	495b      	ldr	r1, [pc, #364]	@ (800e630 <udp_sendto_if_src+0x1bc>)
 800e4c4:	4858      	ldr	r0, [pc, #352]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e4c6:	f005 fcb1 	bl	8013e2c <iprintf>
 800e4ca:	f06f 030f 	mvn.w	r3, #15
 800e4ce:	e0a2      	b.n	800e616 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d109      	bne.n	800e4ea <udp_sendto_if_src+0x76>
 800e4d6:	4b52      	ldr	r3, [pc, #328]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e4d8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800e4dc:	4955      	ldr	r1, [pc, #340]	@ (800e634 <udp_sendto_if_src+0x1c0>)
 800e4de:	4852      	ldr	r0, [pc, #328]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e4e0:	f005 fca4 	bl	8013e2c <iprintf>
 800e4e4:	f06f 030f 	mvn.w	r3, #15
 800e4e8:	e095      	b.n	800e616 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d109      	bne.n	800e504 <udp_sendto_if_src+0x90>
 800e4f0:	4b4b      	ldr	r3, [pc, #300]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e4f2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800e4f6:	4950      	ldr	r1, [pc, #320]	@ (800e638 <udp_sendto_if_src+0x1c4>)
 800e4f8:	484b      	ldr	r0, [pc, #300]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e4fa:	f005 fc97 	bl	8013e2c <iprintf>
 800e4fe:	f06f 030f 	mvn.w	r3, #15
 800e502:	e088      	b.n	800e616 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	8a5b      	ldrh	r3, [r3, #18]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10f      	bne.n	800e52c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e50c:	68f9      	ldr	r1, [r7, #12]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	8a5b      	ldrh	r3, [r3, #18]
 800e512:	461a      	mov	r2, r3
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f893 	bl	800e640 <udp_bind>
 800e51a:	4603      	mov	r3, r0
 800e51c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e51e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d002      	beq.n	800e52c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e526:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e52a:	e074      	b.n	800e616 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	891b      	ldrh	r3, [r3, #8]
 800e530:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e534:	4293      	cmp	r3, r2
 800e536:	d902      	bls.n	800e53e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e538:	f04f 33ff 	mov.w	r3, #4294967295
 800e53c:	e06b      	b.n	800e616 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e53e:	2108      	movs	r1, #8
 800e540:	68b8      	ldr	r0, [r7, #8]
 800e542:	f7f8 ffeb 	bl	800751c <pbuf_add_header>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d015      	beq.n	800e578 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e54c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e550:	2108      	movs	r1, #8
 800e552:	2022      	movs	r0, #34	@ 0x22
 800e554:	f7f8 fd94 	bl	8007080 <pbuf_alloc>
 800e558:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e560:	f04f 33ff 	mov.w	r3, #4294967295
 800e564:	e057      	b.n	800e616 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	891b      	ldrh	r3, [r3, #8]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d006      	beq.n	800e57c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	69f8      	ldr	r0, [r7, #28]
 800e572:	f7f9 f981 	bl	8007878 <pbuf_chain>
 800e576:	e001      	b.n	800e57c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	895b      	ldrh	r3, [r3, #10]
 800e580:	2b07      	cmp	r3, #7
 800e582:	d806      	bhi.n	800e592 <udp_sendto_if_src+0x11e>
 800e584:	4b26      	ldr	r3, [pc, #152]	@ (800e620 <udp_sendto_if_src+0x1ac>)
 800e586:	f240 320d 	movw	r2, #781	@ 0x30d
 800e58a:	492c      	ldr	r1, [pc, #176]	@ (800e63c <udp_sendto_if_src+0x1c8>)
 800e58c:	4826      	ldr	r0, [pc, #152]	@ (800e628 <udp_sendto_if_src+0x1b4>)
 800e58e:	f005 fc4d 	bl	8013e2c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	8a5b      	ldrh	r3, [r3, #18]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7f7 fcc5 	bl	8005f2c <lwip_htons>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e5aa:	887b      	ldrh	r3, [r7, #2]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f7 fcbd 	bl	8005f2c <lwip_htons>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	719a      	strb	r2, [r3, #6]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	891b      	ldrh	r3, [r3, #8]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f7 fcaf 	bl	8005f2c <lwip_htons>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e5d6:	2311      	movs	r3, #17
 800e5d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	7adb      	ldrb	r3, [r3, #11]
 800e5de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	7a9b      	ldrb	r3, [r3, #10]
 800e5e4:	7cb9      	ldrb	r1, [r7, #18]
 800e5e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5e8:	9202      	str	r2, [sp, #8]
 800e5ea:	7cfa      	ldrb	r2, [r7, #19]
 800e5ec:	9201      	str	r2, [sp, #4]
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5f6:	69f8      	ldr	r0, [r7, #28]
 800e5f8:	f003 fb34 	bl	8011c64 <ip4_output_if_src>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	429a      	cmp	r2, r3
 800e606:	d004      	beq.n	800e612 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e608:	69f8      	ldr	r0, [r7, #28]
 800e60a:	f7f9 f81d 	bl	8007648 <pbuf_free>
    q = NULL;
 800e60e:	2300      	movs	r3, #0
 800e610:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e612:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	08019cbc 	.word	0x08019cbc
 800e624:	08019ea8 	.word	0x08019ea8
 800e628:	08019d10 	.word	0x08019d10
 800e62c:	08019ec8 	.word	0x08019ec8
 800e630:	08019ee8 	.word	0x08019ee8
 800e634:	08019f0c 	.word	0x08019f0c
 800e638:	08019f30 	.word	0x08019f30
 800e63c:	08019f54 	.word	0x08019f54

0800e640 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	4613      	mov	r3, r2
 800e64c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d101      	bne.n	800e658 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e654:	4b39      	ldr	r3, [pc, #228]	@ (800e73c <udp_bind+0xfc>)
 800e656:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d109      	bne.n	800e672 <udp_bind+0x32>
 800e65e:	4b38      	ldr	r3, [pc, #224]	@ (800e740 <udp_bind+0x100>)
 800e660:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800e664:	4937      	ldr	r1, [pc, #220]	@ (800e744 <udp_bind+0x104>)
 800e666:	4838      	ldr	r0, [pc, #224]	@ (800e748 <udp_bind+0x108>)
 800e668:	f005 fbe0 	bl	8013e2c <iprintf>
 800e66c:	f06f 030f 	mvn.w	r3, #15
 800e670:	e060      	b.n	800e734 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e676:	4b35      	ldr	r3, [pc, #212]	@ (800e74c <udp_bind+0x10c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	e009      	b.n	800e692 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	429a      	cmp	r2, r3
 800e684:	d102      	bne.n	800e68c <udp_bind+0x4c>
      rebind = 1;
 800e686:	2301      	movs	r3, #1
 800e688:	74fb      	strb	r3, [r7, #19]
      break;
 800e68a:	e005      	b.n	800e698 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f2      	bne.n	800e67e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e698:	88fb      	ldrh	r3, [r7, #6]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d109      	bne.n	800e6b2 <udp_bind+0x72>
    port = udp_new_port();
 800e69e:	f7ff fcc5 	bl	800e02c <udp_new_port>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e6a6:	88fb      	ldrh	r3, [r7, #6]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d12c      	bne.n	800e706 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e6ac:	f06f 0307 	mvn.w	r3, #7
 800e6b0:	e040      	b.n	800e734 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6b2:	4b26      	ldr	r3, [pc, #152]	@ (800e74c <udp_bind+0x10c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	617b      	str	r3, [r7, #20]
 800e6b8:	e022      	b.n	800e700 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d01b      	beq.n	800e6fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	8a5b      	ldrh	r3, [r3, #18]
 800e6c6:	88fa      	ldrh	r2, [r7, #6]
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d116      	bne.n	800e6fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d00d      	beq.n	800e6f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00a      	beq.n	800e6f4 <udp_bind+0xb4>
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d003      	beq.n	800e6f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e6f4:	f06f 0307 	mvn.w	r3, #7
 800e6f8:	e01c      	b.n	800e734 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1d9      	bne.n	800e6ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <udp_bind+0xd2>
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	e000      	b.n	800e714 <udp_bind+0xd4>
 800e712:	2300      	movs	r3, #0
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	88fa      	ldrh	r2, [r7, #6]
 800e71c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e71e:	7cfb      	ldrb	r3, [r7, #19]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d106      	bne.n	800e732 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e724:	4b09      	ldr	r3, [pc, #36]	@ (800e74c <udp_bind+0x10c>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e72c:	4a07      	ldr	r2, [pc, #28]	@ (800e74c <udp_bind+0x10c>)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	0801abf0 	.word	0x0801abf0
 800e740:	08019cbc 	.word	0x08019cbc
 800e744:	08019f84 	.word	0x08019f84
 800e748:	08019d10 	.word	0x08019d10
 800e74c:	20008030 	.word	0x20008030

0800e750 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	4613      	mov	r3, r2
 800e75c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d109      	bne.n	800e778 <udp_connect+0x28>
 800e764:	4b2c      	ldr	r3, [pc, #176]	@ (800e818 <udp_connect+0xc8>)
 800e766:	f240 4235 	movw	r2, #1077	@ 0x435
 800e76a:	492c      	ldr	r1, [pc, #176]	@ (800e81c <udp_connect+0xcc>)
 800e76c:	482c      	ldr	r0, [pc, #176]	@ (800e820 <udp_connect+0xd0>)
 800e76e:	f005 fb5d 	bl	8013e2c <iprintf>
 800e772:	f06f 030f 	mvn.w	r3, #15
 800e776:	e04b      	b.n	800e810 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d109      	bne.n	800e792 <udp_connect+0x42>
 800e77e:	4b26      	ldr	r3, [pc, #152]	@ (800e818 <udp_connect+0xc8>)
 800e780:	f240 4236 	movw	r2, #1078	@ 0x436
 800e784:	4927      	ldr	r1, [pc, #156]	@ (800e824 <udp_connect+0xd4>)
 800e786:	4826      	ldr	r0, [pc, #152]	@ (800e820 <udp_connect+0xd0>)
 800e788:	f005 fb50 	bl	8013e2c <iprintf>
 800e78c:	f06f 030f 	mvn.w	r3, #15
 800e790:	e03e      	b.n	800e810 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	8a5b      	ldrh	r3, [r3, #18]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d10f      	bne.n	800e7ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e79a:	68f9      	ldr	r1, [r7, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8a5b      	ldrh	r3, [r3, #18]
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f7ff ff4c 	bl	800e640 <udp_bind>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <udp_connect+0x6a>
      return err;
 800e7b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7b8:	e02a      	b.n	800e810 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <udp_connect+0x76>
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	e000      	b.n	800e7c8 <udp_connect+0x78>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	88fa      	ldrh	r2, [r7, #6]
 800e7d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	7c1b      	ldrb	r3, [r3, #16]
 800e7d6:	f043 0304 	orr.w	r3, r3, #4
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7e0:	4b11      	ldr	r3, [pc, #68]	@ (800e828 <udp_connect+0xd8>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	617b      	str	r3, [r7, #20]
 800e7e6:	e008      	b.n	800e7fa <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d101      	bne.n	800e7f4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	e00d      	b.n	800e810 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	617b      	str	r3, [r7, #20]
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1f3      	bne.n	800e7e8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e800:	4b09      	ldr	r3, [pc, #36]	@ (800e828 <udp_connect+0xd8>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e808:	4a07      	ldr	r2, [pc, #28]	@ (800e828 <udp_connect+0xd8>)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	08019cbc 	.word	0x08019cbc
 800e81c:	08019f9c 	.word	0x08019f9c
 800e820:	08019d10 	.word	0x08019d10
 800e824:	08019fb8 	.word	0x08019fb8
 800e828:	20008030 	.word	0x20008030

0800e82c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d107      	bne.n	800e84e <udp_recv+0x22>
 800e83e:	4b08      	ldr	r3, [pc, #32]	@ (800e860 <udp_recv+0x34>)
 800e840:	f240 428a 	movw	r2, #1162	@ 0x48a
 800e844:	4907      	ldr	r1, [pc, #28]	@ (800e864 <udp_recv+0x38>)
 800e846:	4808      	ldr	r0, [pc, #32]	@ (800e868 <udp_recv+0x3c>)
 800e848:	f005 faf0 	bl	8013e2c <iprintf>
 800e84c:	e005      	b.n	800e85a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	61da      	str	r2, [r3, #28]
}
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	08019cbc 	.word	0x08019cbc
 800e864:	08019ff0 	.word	0x08019ff0
 800e868:	08019d10 	.word	0x08019d10

0800e86c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d107      	bne.n	800e88a <udp_remove+0x1e>
 800e87a:	4b19      	ldr	r3, [pc, #100]	@ (800e8e0 <udp_remove+0x74>)
 800e87c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800e880:	4918      	ldr	r1, [pc, #96]	@ (800e8e4 <udp_remove+0x78>)
 800e882:	4819      	ldr	r0, [pc, #100]	@ (800e8e8 <udp_remove+0x7c>)
 800e884:	f005 fad2 	bl	8013e2c <iprintf>
 800e888:	e026      	b.n	800e8d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e88a:	4b18      	ldr	r3, [pc, #96]	@ (800e8ec <udp_remove+0x80>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d105      	bne.n	800e8a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e894:	4b15      	ldr	r3, [pc, #84]	@ (800e8ec <udp_remove+0x80>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	4a14      	ldr	r2, [pc, #80]	@ (800e8ec <udp_remove+0x80>)
 800e89c:	6013      	str	r3, [r2, #0]
 800e89e:	e017      	b.n	800e8d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e8a0:	4b12      	ldr	r3, [pc, #72]	@ (800e8ec <udp_remove+0x80>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60fb      	str	r3, [r7, #12]
 800e8a6:	e010      	b.n	800e8ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d009      	beq.n	800e8c4 <udp_remove+0x58>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d104      	bne.n	800e8c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	60da      	str	r2, [r3, #12]
        break;
 800e8c2:	e005      	b.n	800e8d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	60fb      	str	r3, [r7, #12]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1eb      	bne.n	800e8a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	f7f8 f836 	bl	8006944 <memp_free>
}
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	08019cbc 	.word	0x08019cbc
 800e8e4:	0801a008 	.word	0x0801a008
 800e8e8:	08019d10 	.word	0x08019d10
 800e8ec:	20008030 	.word	0x20008030

0800e8f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f7f7 ffb4 	bl	8006864 <memp_malloc>
 800e8fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e904:	2220      	movs	r2, #32
 800e906:	2100      	movs	r1, #0
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f005 fb30 	bl	8013f6e <memset>
    pcb->ttl = UDP_TTL;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	22ff      	movs	r2, #255	@ 0xff
 800e912:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e914:	687b      	ldr	r3, [r7, #4]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d01e      	beq.n	800e96e <udp_netif_ip_addr_changed+0x4e>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01a      	beq.n	800e96e <udp_netif_ip_addr_changed+0x4e>
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d017      	beq.n	800e96e <udp_netif_ip_addr_changed+0x4e>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d013      	beq.n	800e96e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e946:	4b0d      	ldr	r3, [pc, #52]	@ (800e97c <udp_netif_ip_addr_changed+0x5c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	e00c      	b.n	800e968 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	429a      	cmp	r2, r3
 800e958:	d103      	bne.n	800e962 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1ef      	bne.n	800e94e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e96e:	bf00      	nop
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	20008030 	.word	0x20008030

0800e980 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e984:	4b20      	ldr	r3, [pc, #128]	@ (800ea08 <dhcp_inc_pcb_refcount+0x88>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d133      	bne.n	800e9f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e98c:	4b1f      	ldr	r3, [pc, #124]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <dhcp_inc_pcb_refcount+0x20>
 800e994:	4b1e      	ldr	r3, [pc, #120]	@ (800ea10 <dhcp_inc_pcb_refcount+0x90>)
 800e996:	22e5      	movs	r2, #229	@ 0xe5
 800e998:	491e      	ldr	r1, [pc, #120]	@ (800ea14 <dhcp_inc_pcb_refcount+0x94>)
 800e99a:	481f      	ldr	r0, [pc, #124]	@ (800ea18 <dhcp_inc_pcb_refcount+0x98>)
 800e99c:	f005 fa46 	bl	8013e2c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e9a0:	f7ff ffa6 	bl	800e8f0 <udp_new>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	4a19      	ldr	r2, [pc, #100]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9a8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e9aa:	4b18      	ldr	r3, [pc, #96]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b6:	e024      	b.n	800ea02 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e9b8:	4b14      	ldr	r3, [pc, #80]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	7a5a      	ldrb	r2, [r3, #9]
 800e9be:	4b13      	ldr	r3, [pc, #76]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f042 0220 	orr.w	r2, r2, #32
 800e9c6:	b2d2      	uxtb	r2, r2
 800e9c8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e9ca:	4b10      	ldr	r3, [pc, #64]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2244      	movs	r2, #68	@ 0x44
 800e9d0:	4912      	ldr	r1, [pc, #72]	@ (800ea1c <dhcp_inc_pcb_refcount+0x9c>)
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7ff fe34 	bl	800e640 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2243      	movs	r2, #67	@ 0x43
 800e9de:	490f      	ldr	r1, [pc, #60]	@ (800ea1c <dhcp_inc_pcb_refcount+0x9c>)
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7ff feb5 	bl	800e750 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e9e6:	4b09      	ldr	r3, [pc, #36]	@ (800ea0c <dhcp_inc_pcb_refcount+0x8c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	490c      	ldr	r1, [pc, #48]	@ (800ea20 <dhcp_inc_pcb_refcount+0xa0>)
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff ff1c 	bl	800e82c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ea08 <dhcp_inc_pcb_refcount+0x88>)
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	4b02      	ldr	r3, [pc, #8]	@ (800ea08 <dhcp_inc_pcb_refcount+0x88>)
 800e9fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20008060 	.word	0x20008060
 800ea0c:	2000805c 	.word	0x2000805c
 800ea10:	0801a020 	.word	0x0801a020
 800ea14:	0801a058 	.word	0x0801a058
 800ea18:	0801a080 	.word	0x0801a080
 800ea1c:	0801abf0 	.word	0x0801abf0
 800ea20:	080102ad 	.word	0x080102ad

0800ea24 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ea28:	4b0e      	ldr	r3, [pc, #56]	@ (800ea64 <dhcp_dec_pcb_refcount+0x40>)
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d105      	bne.n	800ea3c <dhcp_dec_pcb_refcount+0x18>
 800ea30:	4b0d      	ldr	r3, [pc, #52]	@ (800ea68 <dhcp_dec_pcb_refcount+0x44>)
 800ea32:	22ff      	movs	r2, #255	@ 0xff
 800ea34:	490d      	ldr	r1, [pc, #52]	@ (800ea6c <dhcp_dec_pcb_refcount+0x48>)
 800ea36:	480e      	ldr	r0, [pc, #56]	@ (800ea70 <dhcp_dec_pcb_refcount+0x4c>)
 800ea38:	f005 f9f8 	bl	8013e2c <iprintf>
  dhcp_pcb_refcount--;
 800ea3c:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <dhcp_dec_pcb_refcount+0x40>)
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	3b01      	subs	r3, #1
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	4b07      	ldr	r3, [pc, #28]	@ (800ea64 <dhcp_dec_pcb_refcount+0x40>)
 800ea46:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ea48:	4b06      	ldr	r3, [pc, #24]	@ (800ea64 <dhcp_dec_pcb_refcount+0x40>)
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d107      	bne.n	800ea60 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ea50:	4b08      	ldr	r3, [pc, #32]	@ (800ea74 <dhcp_dec_pcb_refcount+0x50>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7ff ff09 	bl	800e86c <udp_remove>
    dhcp_pcb = NULL;
 800ea5a:	4b06      	ldr	r3, [pc, #24]	@ (800ea74 <dhcp_dec_pcb_refcount+0x50>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	601a      	str	r2, [r3, #0]
  }
}
 800ea60:	bf00      	nop
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	20008060 	.word	0x20008060
 800ea68:	0801a020 	.word	0x0801a020
 800ea6c:	0801a0a8 	.word	0x0801a0a8
 800ea70:	0801a080 	.word	0x0801a080
 800ea74:	2000805c 	.word	0x2000805c

0800ea78 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea84:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ea86:	210c      	movs	r1, #12
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f001 f851 	bl	800fb30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ea8e:	4b06      	ldr	r3, [pc, #24]	@ (800eaa8 <dhcp_handle_nak+0x30>)
 800ea90:	4a05      	ldr	r2, [pc, #20]	@ (800eaa8 <dhcp_handle_nak+0x30>)
 800ea92:	4905      	ldr	r1, [pc, #20]	@ (800eaa8 <dhcp_handle_nak+0x30>)
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7f8 f8f7 	bl	8006c88 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 fc4a 	bl	800f334 <dhcp_discover>
}
 800eaa0:	bf00      	nop
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	0801abf0 	.word	0x0801abf0

0800eaac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eab8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800eaba:	2108      	movs	r1, #8
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f001 f837 	bl	800fb30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	331c      	adds	r3, #28
 800eac6:	2200      	movs	r2, #0
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f002 fb38 	bl	8011140 <etharp_query>
 800ead0:	4603      	mov	r3, r0
 800ead2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	799b      	ldrb	r3, [r3, #6]
 800ead8:	2bff      	cmp	r3, #255	@ 0xff
 800eada:	d005      	beq.n	800eae8 <dhcp_check+0x3c>
    dhcp->tries++;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	799b      	ldrb	r3, [r3, #6]
 800eae0:	3301      	adds	r3, #1
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800eae8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800eaec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eaee:	893b      	ldrh	r3, [r7, #8]
 800eaf0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800eaf4:	4a06      	ldr	r2, [pc, #24]	@ (800eb10 <dhcp_check+0x64>)
 800eaf6:	fb82 1203 	smull	r1, r2, r2, r3
 800eafa:	1152      	asrs	r2, r2, #5
 800eafc:	17db      	asrs	r3, r3, #31
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800eb06:	bf00      	nop
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	10624dd3 	.word	0x10624dd3

0800eb14 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb22:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800eb24:	4b0c      	ldr	r3, [pc, #48]	@ (800eb58 <dhcp_handle_offer+0x44>)
 800eb26:	789b      	ldrb	r3, [r3, #2]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d011      	beq.n	800eb50 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800eb32:	4b0a      	ldr	r3, [pc, #40]	@ (800eb5c <dhcp_handle_offer+0x48>)
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f7 fa0e 	bl	8005f58 <lwip_htonl>
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	691a      	ldr	r2, [r3, #16]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f808 	bl	800eb60 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800eb50:	bf00      	nop
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20008054 	.word	0x20008054
 800eb5c:	20008034 	.word	0x20008034

0800eb60 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eb60:	b5b0      	push	{r4, r5, r7, lr}
 800eb62:	b08a      	sub	sp, #40	@ 0x28
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d109      	bne.n	800eb82 <dhcp_select+0x22>
 800eb6e:	4b71      	ldr	r3, [pc, #452]	@ (800ed34 <dhcp_select+0x1d4>)
 800eb70:	f240 1277 	movw	r2, #375	@ 0x177
 800eb74:	4970      	ldr	r1, [pc, #448]	@ (800ed38 <dhcp_select+0x1d8>)
 800eb76:	4871      	ldr	r0, [pc, #452]	@ (800ed3c <dhcp_select+0x1dc>)
 800eb78:	f005 f958 	bl	8013e2c <iprintf>
 800eb7c:	f06f 030f 	mvn.w	r3, #15
 800eb80:	e0d3      	b.n	800ed2a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb86:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d109      	bne.n	800eba2 <dhcp_select+0x42>
 800eb8e:	4b69      	ldr	r3, [pc, #420]	@ (800ed34 <dhcp_select+0x1d4>)
 800eb90:	f240 1279 	movw	r2, #377	@ 0x179
 800eb94:	496a      	ldr	r1, [pc, #424]	@ (800ed40 <dhcp_select+0x1e0>)
 800eb96:	4869      	ldr	r0, [pc, #420]	@ (800ed3c <dhcp_select+0x1dc>)
 800eb98:	f005 f948 	bl	8013e2c <iprintf>
 800eb9c:	f06f 0305 	mvn.w	r3, #5
 800eba0:	e0c3      	b.n	800ed2a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800eba2:	2101      	movs	r1, #1
 800eba4:	69b8      	ldr	r0, [r7, #24]
 800eba6:	f000 ffc3 	bl	800fb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ebaa:	f107 030c 	add.w	r3, r7, #12
 800ebae:	2203      	movs	r2, #3
 800ebb0:	69b9      	ldr	r1, [r7, #24]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f001 fc48 	bl	8010448 <dhcp_create_msg>
 800ebb8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 8085 	beq.w	800eccc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ebc8:	89b8      	ldrh	r0, [r7, #12]
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ebd0:	2302      	movs	r3, #2
 800ebd2:	2239      	movs	r2, #57	@ 0x39
 800ebd4:	f000 ffc6 	bl	800fb64 <dhcp_option>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ebdc:	89b8      	ldrh	r0, [r7, #12]
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebe8:	461a      	mov	r2, r3
 800ebea:	f001 f815 	bl	800fc18 <dhcp_option_short>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ebf2:	89b8      	ldrh	r0, [r7, #12]
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ebfa:	2304      	movs	r3, #4
 800ebfc:	2232      	movs	r2, #50	@ 0x32
 800ebfe:	f000 ffb1 	bl	800fb64 <dhcp_option>
 800ec02:	4603      	mov	r3, r0
 800ec04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ec06:	89bc      	ldrh	r4, [r7, #12]
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	69db      	ldr	r3, [r3, #28]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7f7 f9a0 	bl	8005f58 <lwip_htonl>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f001 f82c 	bl	800fc7c <dhcp_option_long>
 800ec24:	4603      	mov	r3, r0
 800ec26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ec28:	89b8      	ldrh	r0, [r7, #12]
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec30:	2304      	movs	r3, #4
 800ec32:	2236      	movs	r2, #54	@ 0x36
 800ec34:	f000 ff96 	bl	800fb64 <dhcp_option>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ec3c:	89bc      	ldrh	r4, [r7, #12]
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	699b      	ldr	r3, [r3, #24]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7f7 f985 	bl	8005f58 <lwip_htonl>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	461a      	mov	r2, r3
 800ec52:	4629      	mov	r1, r5
 800ec54:	4620      	mov	r0, r4
 800ec56:	f001 f811 	bl	800fc7c <dhcp_option_long>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec5e:	89b8      	ldrh	r0, [r7, #12]
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec66:	2303      	movs	r3, #3
 800ec68:	2237      	movs	r2, #55	@ 0x37
 800ec6a:	f000 ff7b 	bl	800fb64 <dhcp_option>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec72:	2300      	movs	r3, #0
 800ec74:	77bb      	strb	r3, [r7, #30]
 800ec76:	e00e      	b.n	800ec96 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec78:	89b8      	ldrh	r0, [r7, #12]
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ec80:	7fbb      	ldrb	r3, [r7, #30]
 800ec82:	4a30      	ldr	r2, [pc, #192]	@ (800ed44 <dhcp_select+0x1e4>)
 800ec84:	5cd3      	ldrb	r3, [r2, r3]
 800ec86:	461a      	mov	r2, r3
 800ec88:	f000 ffa0 	bl	800fbcc <dhcp_option_byte>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec90:	7fbb      	ldrb	r3, [r7, #30]
 800ec92:	3301      	adds	r3, #1
 800ec94:	77bb      	strb	r3, [r7, #30]
 800ec96:	7fbb      	ldrb	r3, [r7, #30]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d9ed      	bls.n	800ec78 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec9c:	89b8      	ldrh	r0, [r7, #12]
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	33f0      	adds	r3, #240	@ 0xf0
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	4619      	mov	r1, r3
 800eca6:	f001 fca5 	bl	80105f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ecaa:	4b27      	ldr	r3, [pc, #156]	@ (800ed48 <dhcp_select+0x1e8>)
 800ecac:	6818      	ldr	r0, [r3, #0]
 800ecae:	4b27      	ldr	r3, [pc, #156]	@ (800ed4c <dhcp_select+0x1ec>)
 800ecb0:	9301      	str	r3, [sp, #4]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	2343      	movs	r3, #67	@ 0x43
 800ecb8:	4a25      	ldr	r2, [pc, #148]	@ (800ed50 <dhcp_select+0x1f0>)
 800ecba:	6979      	ldr	r1, [r7, #20]
 800ecbc:	f7ff fbda 	bl	800e474 <udp_sendto_if_src>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ecc4:	6978      	ldr	r0, [r7, #20]
 800ecc6:	f7f8 fcbf 	bl	8007648 <pbuf_free>
 800ecca:	e001      	b.n	800ecd0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800eccc:	23ff      	movs	r3, #255	@ 0xff
 800ecce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	799b      	ldrb	r3, [r3, #6]
 800ecd4:	2bff      	cmp	r3, #255	@ 0xff
 800ecd6:	d005      	beq.n	800ece4 <dhcp_select+0x184>
    dhcp->tries++;
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	799b      	ldrb	r3, [r3, #6]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	799b      	ldrb	r3, [r3, #6]
 800ece8:	2b05      	cmp	r3, #5
 800ecea:	d80d      	bhi.n	800ed08 <dhcp_select+0x1a8>
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	799b      	ldrb	r3, [r3, #6]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	4093      	lsls	r3, r2
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	0152      	lsls	r2, r2, #5
 800ecfc:	1ad2      	subs	r2, r2, r3
 800ecfe:	0092      	lsls	r2, r2, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	e001      	b.n	800ed0c <dhcp_select+0x1ac>
 800ed08:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800ed0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
 800ed10:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800ed14:	4a0f      	ldr	r2, [pc, #60]	@ (800ed54 <dhcp_select+0x1f4>)
 800ed16:	fb82 1203 	smull	r1, r2, r2, r3
 800ed1a:	1152      	asrs	r2, r2, #5
 800ed1c:	17db      	asrs	r3, r3, #31
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ed26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3720      	adds	r7, #32
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bdb0      	pop	{r4, r5, r7, pc}
 800ed32:	bf00      	nop
 800ed34:	0801a020 	.word	0x0801a020
 800ed38:	0801a0cc 	.word	0x0801a0cc
 800ed3c:	0801a080 	.word	0x0801a080
 800ed40:	0801a0e8 	.word	0x0801a0e8
 800ed44:	2000003c 	.word	0x2000003c
 800ed48:	2000805c 	.word	0x2000805c
 800ed4c:	0801abf0 	.word	0x0801abf0
 800ed50:	0801abf4 	.word	0x0801abf4
 800ed54:	10624dd3 	.word	0x10624dd3

0800ed58 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800ed5e:	4b27      	ldr	r3, [pc, #156]	@ (800edfc <dhcp_coarse_tmr+0xa4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	607b      	str	r3, [r7, #4]
 800ed64:	e042      	b.n	800edec <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed6a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d039      	beq.n	800ede6 <dhcp_coarse_tmr+0x8e>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	795b      	ldrb	r3, [r3, #5]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d035      	beq.n	800ede6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	8a9b      	ldrh	r3, [r3, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d012      	beq.n	800eda8 <dhcp_coarse_tmr+0x50>
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	8a5b      	ldrh	r3, [r3, #18]
 800ed86:	3301      	adds	r3, #1
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	825a      	strh	r2, [r3, #18]
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	8a5a      	ldrh	r2, [r3, #18]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	8a9b      	ldrh	r3, [r3, #20]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d106      	bne.n	800eda8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fe2e 	bl	800f9fc <dhcp_release_and_stop>
        dhcp_start(netif);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 f96b 	bl	800f07c <dhcp_start>
 800eda6:	e01e      	b.n	800ede6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	8a1b      	ldrh	r3, [r3, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <dhcp_coarse_tmr+0x70>
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	8a1b      	ldrh	r3, [r3, #16]
 800edb4:	1e5a      	subs	r2, r3, #1
 800edb6:	b291      	uxth	r1, r2
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	8211      	strh	r1, [r2, #16]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d103      	bne.n	800edc8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f8c7 	bl	800ef54 <dhcp_t2_timeout>
 800edc6:	e00e      	b.n	800ede6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	89db      	ldrh	r3, [r3, #14]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00a      	beq.n	800ede6 <dhcp_coarse_tmr+0x8e>
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	89db      	ldrh	r3, [r3, #14]
 800edd4:	1e5a      	subs	r2, r3, #1
 800edd6:	b291      	uxth	r1, r2
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	81d1      	strh	r1, [r2, #14]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d102      	bne.n	800ede6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f888 	bl	800eef6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1b9      	bne.n	800ed66 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	20007fc8 	.word	0x20007fc8

0800ee00 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ee06:	4b16      	ldr	r3, [pc, #88]	@ (800ee60 <dhcp_fine_tmr+0x60>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	607b      	str	r3, [r7, #4]
 800ee0c:	e020      	b.n	800ee50 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee12:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d017      	beq.n	800ee4a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	891b      	ldrh	r3, [r3, #8]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d906      	bls.n	800ee30 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	891b      	ldrh	r3, [r3, #8]
 800ee26:	3b01      	subs	r3, #1
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	811a      	strh	r2, [r3, #8]
 800ee2e:	e00c      	b.n	800ee4a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	891b      	ldrh	r3, [r3, #8]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d108      	bne.n	800ee4a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	891b      	ldrh	r3, [r3, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f80d 	bl	800ee64 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	607b      	str	r3, [r7, #4]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1db      	bne.n	800ee0e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ee56:	bf00      	nop
 800ee58:	bf00      	nop
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20007fc8 	.word	0x20007fc8

0800ee64 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	795b      	ldrb	r3, [r3, #5]
 800ee76:	2b0c      	cmp	r3, #12
 800ee78:	d003      	beq.n	800ee82 <dhcp_timeout+0x1e>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	795b      	ldrb	r3, [r3, #5]
 800ee7e:	2b06      	cmp	r3, #6
 800ee80:	d103      	bne.n	800ee8a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 fa56 	bl	800f334 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ee88:	e031      	b.n	800eeee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	795b      	ldrb	r3, [r3, #5]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d10e      	bne.n	800eeb0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	799b      	ldrb	r3, [r3, #6]
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	d803      	bhi.n	800eea2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fe60 	bl	800eb60 <dhcp_select>
}
 800eea0:	e025      	b.n	800eeee <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fdaa 	bl	800f9fc <dhcp_release_and_stop>
      dhcp_start(netif);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f000 f8e7 	bl	800f07c <dhcp_start>
}
 800eeae:	e01e      	b.n	800eeee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	795b      	ldrb	r3, [r3, #5]
 800eeb4:	2b08      	cmp	r3, #8
 800eeb6:	d10b      	bne.n	800eed0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	799b      	ldrb	r3, [r3, #6]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d803      	bhi.n	800eec8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff fdf3 	bl	800eaac <dhcp_check>
}
 800eec6:	e012      	b.n	800eeee <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fad5 	bl	800f478 <dhcp_bind>
}
 800eece:	e00e      	b.n	800eeee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	795b      	ldrb	r3, [r3, #5]
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d10a      	bne.n	800eeee <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	799b      	ldrb	r3, [r3, #6]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d803      	bhi.n	800eee8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fcd7 	bl	800f894 <dhcp_reboot>
}
 800eee6:	e002      	b.n	800eeee <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fa23 	bl	800f334 <dhcp_discover>
}
 800eeee:	bf00      	nop
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	795b      	ldrb	r3, [r3, #5]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d007      	beq.n	800ef1c <dhcp_t1_timeout+0x26>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	795b      	ldrb	r3, [r3, #5]
 800ef10:	2b0a      	cmp	r3, #10
 800ef12:	d003      	beq.n	800ef1c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef18:	2b05      	cmp	r3, #5
 800ef1a:	d117      	bne.n	800ef4c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fb85 	bl	800f62c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	899b      	ldrh	r3, [r3, #12]
 800ef26:	461a      	mov	r2, r3
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8a5b      	ldrh	r3, [r3, #18]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	dd0c      	ble.n	800ef4c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	899b      	ldrh	r3, [r3, #12]
 800ef36:	461a      	mov	r2, r3
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	8a5b      	ldrh	r3, [r3, #18]
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	da00      	bge.n	800ef44 <dhcp_t1_timeout+0x4e>
 800ef42:	3301      	adds	r3, #1
 800ef44:	105b      	asrs	r3, r3, #1
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ef4c:	bf00      	nop
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	795b      	ldrb	r3, [r3, #5]
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d00b      	beq.n	800ef82 <dhcp_t2_timeout+0x2e>
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	795b      	ldrb	r3, [r3, #5]
 800ef6e:	2b0a      	cmp	r3, #10
 800ef70:	d007      	beq.n	800ef82 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef76:	2b05      	cmp	r3, #5
 800ef78:	d003      	beq.n	800ef82 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	795b      	ldrb	r3, [r3, #5]
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d117      	bne.n	800efb2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fbec 	bl	800f760 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	8a9b      	ldrh	r3, [r3, #20]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	8a5b      	ldrh	r3, [r3, #18]
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	dd0c      	ble.n	800efb2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	8a9b      	ldrh	r3, [r3, #20]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	8a5b      	ldrh	r3, [r3, #18]
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	da00      	bge.n	800efaa <dhcp_t2_timeout+0x56>
 800efa8:	3301      	adds	r3, #1
 800efaa:	105b      	asrs	r3, r3, #1
 800efac:	b29a      	uxth	r2, r3
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800efb2:	bf00      	nop
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efca:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2200      	movs	r2, #0
 800efd6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800efd8:	4b26      	ldr	r3, [pc, #152]	@ (800f074 <dhcp_handle_ack+0xb8>)
 800efda:	78db      	ldrb	r3, [r3, #3]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d003      	beq.n	800efe8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800efe0:	4b25      	ldr	r3, [pc, #148]	@ (800f078 <dhcp_handle_ack+0xbc>)
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800efe8:	4b22      	ldr	r3, [pc, #136]	@ (800f074 <dhcp_handle_ack+0xb8>)
 800efea:	791b      	ldrb	r3, [r3, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d004      	beq.n	800effa <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800eff0:	4b21      	ldr	r3, [pc, #132]	@ (800f078 <dhcp_handle_ack+0xbc>)
 800eff2:	691a      	ldr	r2, [r3, #16]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eff8:	e004      	b.n	800f004 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800effe:	085a      	lsrs	r2, r3, #1
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f004:	4b1b      	ldr	r3, [pc, #108]	@ (800f074 <dhcp_handle_ack+0xb8>)
 800f006:	795b      	ldrb	r3, [r3, #5]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f00c:	4b1a      	ldr	r3, [pc, #104]	@ (800f078 <dhcp_handle_ack+0xbc>)
 800f00e:	695a      	ldr	r2, [r3, #20]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	631a      	str	r2, [r3, #48]	@ 0x30
 800f014:	e007      	b.n	800f026 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f01a:	4613      	mov	r3, r2
 800f01c:	00db      	lsls	r3, r3, #3
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	08da      	lsrs	r2, r3, #3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	691a      	ldr	r2, [r3, #16]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f02e:	4b11      	ldr	r3, [pc, #68]	@ (800f074 <dhcp_handle_ack+0xb8>)
 800f030:	799b      	ldrb	r3, [r3, #6]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00b      	beq.n	800f04e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f036:	4b10      	ldr	r3, [pc, #64]	@ (800f078 <dhcp_handle_ack+0xbc>)
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7f6 ff8c 	bl	8005f58 <lwip_htonl>
 800f040:	4602      	mov	r2, r0
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2201      	movs	r2, #1
 800f04a:	71da      	strb	r2, [r3, #7]
 800f04c:	e002      	b.n	800f054 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	2200      	movs	r2, #0
 800f052:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f054:	4b07      	ldr	r3, [pc, #28]	@ (800f074 <dhcp_handle_ack+0xb8>)
 800f056:	79db      	ldrb	r3, [r3, #7]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d007      	beq.n	800f06c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f05c:	4b06      	ldr	r3, [pc, #24]	@ (800f078 <dhcp_handle_ack+0xbc>)
 800f05e:	69db      	ldr	r3, [r3, #28]
 800f060:	4618      	mov	r0, r3
 800f062:	f7f6 ff79 	bl	8005f58 <lwip_htonl>
 800f066:	4602      	mov	r2, r0
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f06c:	bf00      	nop
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20008054 	.word	0x20008054
 800f078:	20008034 	.word	0x20008034

0800f07c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d109      	bne.n	800f09e <dhcp_start+0x22>
 800f08a:	4b37      	ldr	r3, [pc, #220]	@ (800f168 <dhcp_start+0xec>)
 800f08c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800f090:	4936      	ldr	r1, [pc, #216]	@ (800f16c <dhcp_start+0xf0>)
 800f092:	4837      	ldr	r0, [pc, #220]	@ (800f170 <dhcp_start+0xf4>)
 800f094:	f004 feca 	bl	8013e2c <iprintf>
 800f098:	f06f 030f 	mvn.w	r3, #15
 800f09c:	e060      	b.n	800f160 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d109      	bne.n	800f0c0 <dhcp_start+0x44>
 800f0ac:	4b2e      	ldr	r3, [pc, #184]	@ (800f168 <dhcp_start+0xec>)
 800f0ae:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800f0b2:	4930      	ldr	r1, [pc, #192]	@ (800f174 <dhcp_start+0xf8>)
 800f0b4:	482e      	ldr	r0, [pc, #184]	@ (800f170 <dhcp_start+0xf4>)
 800f0b6:	f004 feb9 	bl	8013e2c <iprintf>
 800f0ba:	f06f 030f 	mvn.w	r3, #15
 800f0be:	e04f      	b.n	800f160 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0ca:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800f0ce:	d202      	bcs.n	800f0d6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d4:	e044      	b.n	800f160 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d10d      	bne.n	800f0f8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f0dc:	2034      	movs	r0, #52	@ 0x34
 800f0de:	f7f7 fa09 	bl	80064f4 <mem_malloc>
 800f0e2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d102      	bne.n	800f0f0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ee:	e037      	b.n	800f160 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800f0f6:	e005      	b.n	800f104 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	791b      	ldrb	r3, [r3, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f100:	f7ff fc90 	bl	800ea24 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f104:	2234      	movs	r2, #52	@ 0x34
 800f106:	2100      	movs	r1, #0
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f004 ff30 	bl	8013f6e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f10e:	f7ff fc37 	bl	800e980 <dhcp_inc_pcb_refcount>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <dhcp_start+0xa2>
    return ERR_MEM;
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	e020      	b.n	800f160 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2201      	movs	r2, #1
 800f122:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f12a:	f003 0304 	and.w	r3, r3, #4
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d105      	bne.n	800f13e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f132:	2102      	movs	r1, #2
 800f134:	68f8      	ldr	r0, [r7, #12]
 800f136:	f000 fcfb 	bl	800fb30 <dhcp_set_state>
    return ERR_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	e010      	b.n	800f160 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f8f8 	bl	800f334 <dhcp_discover>
 800f144:	4603      	mov	r3, r0
 800f146:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f148:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d005      	beq.n	800f15c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fc53 	bl	800f9fc <dhcp_release_and_stop>
    return ERR_MEM;
 800f156:	f04f 33ff 	mov.w	r3, #4294967295
 800f15a:	e001      	b.n	800f160 <dhcp_start+0xe4>
  }
  return result;
 800f15c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	0801a020 	.word	0x0801a020
 800f16c:	0801a104 	.word	0x0801a104
 800f170:	0801a080 	.word	0x0801a080
 800f174:	0801a148 	.word	0x0801a148

0800f178 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f184:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d025      	beq.n	800f1d8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	795b      	ldrb	r3, [r3, #5]
 800f190:	2b0a      	cmp	r3, #10
 800f192:	d008      	beq.n	800f1a6 <dhcp_network_changed+0x2e>
 800f194:	2b0a      	cmp	r3, #10
 800f196:	dc0d      	bgt.n	800f1b4 <dhcp_network_changed+0x3c>
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d01f      	beq.n	800f1dc <dhcp_network_changed+0x64>
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	db09      	blt.n	800f1b4 <dhcp_network_changed+0x3c>
 800f1a0:	3b03      	subs	r3, #3
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d806      	bhi.n	800f1b4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fb71 	bl	800f894 <dhcp_reboot>
      break;
 800f1b2:	e014      	b.n	800f1de <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	795b      	ldrb	r3, [r3, #5]
 800f1b8:	2b0c      	cmp	r3, #12
 800f1ba:	d906      	bls.n	800f1ca <dhcp_network_changed+0x52>
 800f1bc:	4b09      	ldr	r3, [pc, #36]	@ (800f1e4 <dhcp_network_changed+0x6c>)
 800f1be:	f240 326d 	movw	r2, #877	@ 0x36d
 800f1c2:	4909      	ldr	r1, [pc, #36]	@ (800f1e8 <dhcp_network_changed+0x70>)
 800f1c4:	4809      	ldr	r0, [pc, #36]	@ (800f1ec <dhcp_network_changed+0x74>)
 800f1c6:	f004 fe31 	bl	8013e2c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 f8af 	bl	800f334 <dhcp_discover>
      break;
 800f1d6:	e002      	b.n	800f1de <dhcp_network_changed+0x66>
    return;
 800f1d8:	bf00      	nop
 800f1da:	e000      	b.n	800f1de <dhcp_network_changed+0x66>
      break;
 800f1dc:	bf00      	nop
  }
}
 800f1de:	3710      	adds	r7, #16
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	0801a020 	.word	0x0801a020
 800f1e8:	0801a16c 	.word	0x0801a16c
 800f1ec:	0801a080 	.word	0x0801a080

0800f1f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d107      	bne.n	800f210 <dhcp_arp_reply+0x20>
 800f200:	4b0e      	ldr	r3, [pc, #56]	@ (800f23c <dhcp_arp_reply+0x4c>)
 800f202:	f240 328b 	movw	r2, #907	@ 0x38b
 800f206:	490e      	ldr	r1, [pc, #56]	@ (800f240 <dhcp_arp_reply+0x50>)
 800f208:	480e      	ldr	r0, [pc, #56]	@ (800f244 <dhcp_arp_reply+0x54>)
 800f20a:	f004 fe0f 	bl	8013e2c <iprintf>
 800f20e:	e012      	b.n	800f236 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f214:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00c      	beq.n	800f236 <dhcp_arp_reply+0x46>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	795b      	ldrb	r3, [r3, #5]
 800f220:	2b08      	cmp	r3, #8
 800f222:	d108      	bne.n	800f236 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	69db      	ldr	r3, [r3, #28]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d102      	bne.n	800f236 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 f809 	bl	800f248 <dhcp_decline>
    }
  }
}
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	0801a020 	.word	0x0801a020
 800f240:	0801a104 	.word	0x0801a104
 800f244:	0801a080 	.word	0x0801a080

0800f248 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f248:	b5b0      	push	{r4, r5, r7, lr}
 800f24a:	b08a      	sub	sp, #40	@ 0x28
 800f24c:	af02      	add	r7, sp, #8
 800f24e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f254:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f256:	210c      	movs	r1, #12
 800f258:	69b8      	ldr	r0, [r7, #24]
 800f25a:	f000 fc69 	bl	800fb30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f25e:	f107 030c 	add.w	r3, r7, #12
 800f262:	2204      	movs	r2, #4
 800f264:	69b9      	ldr	r1, [r7, #24]
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f001 f8ee 	bl	8010448 <dhcp_create_msg>
 800f26c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d035      	beq.n	800f2e0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f27a:	89b8      	ldrh	r0, [r7, #12]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f282:	2304      	movs	r3, #4
 800f284:	2232      	movs	r2, #50	@ 0x32
 800f286:	f000 fc6d 	bl	800fb64 <dhcp_option>
 800f28a:	4603      	mov	r3, r0
 800f28c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f28e:	89bc      	ldrh	r4, [r7, #12]
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	69db      	ldr	r3, [r3, #28]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f6 fe5c 	bl	8005f58 <lwip_htonl>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fce8 	bl	800fc7c <dhcp_option_long>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f2b0:	89b8      	ldrh	r0, [r7, #12]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	33f0      	adds	r3, #240	@ 0xf0
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	f001 f99b 	bl	80105f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f2be:	4b19      	ldr	r3, [pc, #100]	@ (800f324 <dhcp_decline+0xdc>)
 800f2c0:	6818      	ldr	r0, [r3, #0]
 800f2c2:	4b19      	ldr	r3, [pc, #100]	@ (800f328 <dhcp_decline+0xe0>)
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	2343      	movs	r3, #67	@ 0x43
 800f2cc:	4a17      	ldr	r2, [pc, #92]	@ (800f32c <dhcp_decline+0xe4>)
 800f2ce:	6979      	ldr	r1, [r7, #20]
 800f2d0:	f7ff f8d0 	bl	800e474 <udp_sendto_if_src>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f2d8:	6978      	ldr	r0, [r7, #20]
 800f2da:	f7f8 f9b5 	bl	8007648 <pbuf_free>
 800f2de:	e001      	b.n	800f2e4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f2e0:	23ff      	movs	r3, #255	@ 0xff
 800f2e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	799b      	ldrb	r3, [r3, #6]
 800f2e8:	2bff      	cmp	r3, #255	@ 0xff
 800f2ea:	d005      	beq.n	800f2f8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	799b      	ldrb	r3, [r3, #6]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f2f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f2fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f2fe:	89fb      	ldrh	r3, [r7, #14]
 800f300:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f304:	4a0a      	ldr	r2, [pc, #40]	@ (800f330 <dhcp_decline+0xe8>)
 800f306:	fb82 1203 	smull	r1, r2, r2, r3
 800f30a:	1152      	asrs	r2, r2, #5
 800f30c:	17db      	asrs	r3, r3, #31
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	b29a      	uxth	r2, r3
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f316:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3720      	adds	r7, #32
 800f31e:	46bd      	mov	sp, r7
 800f320:	bdb0      	pop	{r4, r5, r7, pc}
 800f322:	bf00      	nop
 800f324:	2000805c 	.word	0x2000805c
 800f328:	0801abf0 	.word	0x0801abf0
 800f32c:	0801abf4 	.word	0x0801abf4
 800f330:	10624dd3 	.word	0x10624dd3

0800f334 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b08a      	sub	sp, #40	@ 0x28
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f340:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f342:	2300      	movs	r3, #0
 800f344:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2200      	movs	r2, #0
 800f34a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f34c:	2106      	movs	r1, #6
 800f34e:	69b8      	ldr	r0, [r7, #24]
 800f350:	f000 fbee 	bl	800fb30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f354:	f107 0308 	add.w	r3, r7, #8
 800f358:	2201      	movs	r2, #1
 800f35a:	69b9      	ldr	r1, [r7, #24]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f001 f873 	bl	8010448 <dhcp_create_msg>
 800f362:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d04b      	beq.n	800f402 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f370:	8938      	ldrh	r0, [r7, #8]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f378:	2302      	movs	r3, #2
 800f37a:	2239      	movs	r2, #57	@ 0x39
 800f37c:	f000 fbf2 	bl	800fb64 <dhcp_option>
 800f380:	4603      	mov	r3, r0
 800f382:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f384:	8938      	ldrh	r0, [r7, #8]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f390:	461a      	mov	r2, r3
 800f392:	f000 fc41 	bl	800fc18 <dhcp_option_short>
 800f396:	4603      	mov	r3, r0
 800f398:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f39a:	8938      	ldrh	r0, [r7, #8]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	2237      	movs	r2, #55	@ 0x37
 800f3a6:	f000 fbdd 	bl	800fb64 <dhcp_option>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	77fb      	strb	r3, [r7, #31]
 800f3b2:	e00e      	b.n	800f3d2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f3b4:	8938      	ldrh	r0, [r7, #8]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f3bc:	7ffb      	ldrb	r3, [r7, #31]
 800f3be:	4a29      	ldr	r2, [pc, #164]	@ (800f464 <dhcp_discover+0x130>)
 800f3c0:	5cd3      	ldrb	r3, [r2, r3]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f000 fc02 	bl	800fbcc <dhcp_option_byte>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3cc:	7ffb      	ldrb	r3, [r7, #31]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	77fb      	strb	r3, [r7, #31]
 800f3d2:	7ffb      	ldrb	r3, [r7, #31]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d9ed      	bls.n	800f3b4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f3d8:	8938      	ldrh	r0, [r7, #8]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	33f0      	adds	r3, #240	@ 0xf0
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	f001 f907 	bl	80105f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f3e6:	4b20      	ldr	r3, [pc, #128]	@ (800f468 <dhcp_discover+0x134>)
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	4b20      	ldr	r3, [pc, #128]	@ (800f46c <dhcp_discover+0x138>)
 800f3ec:	9301      	str	r3, [sp, #4]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	2343      	movs	r3, #67	@ 0x43
 800f3f4:	4a1e      	ldr	r2, [pc, #120]	@ (800f470 <dhcp_discover+0x13c>)
 800f3f6:	6939      	ldr	r1, [r7, #16]
 800f3f8:	f7ff f83c 	bl	800e474 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f3fc:	6938      	ldr	r0, [r7, #16]
 800f3fe:	f7f8 f923 	bl	8007648 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	799b      	ldrb	r3, [r3, #6]
 800f406:	2bff      	cmp	r3, #255	@ 0xff
 800f408:	d005      	beq.n	800f416 <dhcp_discover+0xe2>
    dhcp->tries++;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	799b      	ldrb	r3, [r3, #6]
 800f40e:	3301      	adds	r3, #1
 800f410:	b2da      	uxtb	r2, r3
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	799b      	ldrb	r3, [r3, #6]
 800f41a:	2b05      	cmp	r3, #5
 800f41c:	d80d      	bhi.n	800f43a <dhcp_discover+0x106>
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	799b      	ldrb	r3, [r3, #6]
 800f422:	461a      	mov	r2, r3
 800f424:	2301      	movs	r3, #1
 800f426:	4093      	lsls	r3, r2
 800f428:	b29b      	uxth	r3, r3
 800f42a:	461a      	mov	r2, r3
 800f42c:	0152      	lsls	r2, r2, #5
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	0092      	lsls	r2, r2, #2
 800f432:	4413      	add	r3, r2
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	b29b      	uxth	r3, r3
 800f438:	e001      	b.n	800f43e <dhcp_discover+0x10a>
 800f43a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800f43e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f440:	897b      	ldrh	r3, [r7, #10]
 800f442:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f446:	4a0b      	ldr	r2, [pc, #44]	@ (800f474 <dhcp_discover+0x140>)
 800f448:	fb82 1203 	smull	r1, r2, r2, r3
 800f44c:	1152      	asrs	r2, r2, #5
 800f44e:	17db      	asrs	r3, r3, #31
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	b29a      	uxth	r2, r3
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	2000003c 	.word	0x2000003c
 800f468:	2000805c 	.word	0x2000805c
 800f46c:	0801abf0 	.word	0x0801abf0
 800f470:	0801abf4 	.word	0x0801abf4
 800f474:	10624dd3 	.word	0x10624dd3

0800f478 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d107      	bne.n	800f496 <dhcp_bind+0x1e>
 800f486:	4b64      	ldr	r3, [pc, #400]	@ (800f618 <dhcp_bind+0x1a0>)
 800f488:	f240 4215 	movw	r2, #1045	@ 0x415
 800f48c:	4963      	ldr	r1, [pc, #396]	@ (800f61c <dhcp_bind+0x1a4>)
 800f48e:	4864      	ldr	r0, [pc, #400]	@ (800f620 <dhcp_bind+0x1a8>)
 800f490:	f004 fccc 	bl	8013e2c <iprintf>
 800f494:	e0bc      	b.n	800f610 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f49a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d107      	bne.n	800f4b2 <dhcp_bind+0x3a>
 800f4a2:	4b5d      	ldr	r3, [pc, #372]	@ (800f618 <dhcp_bind+0x1a0>)
 800f4a4:	f240 4217 	movw	r2, #1047	@ 0x417
 800f4a8:	495e      	ldr	r1, [pc, #376]	@ (800f624 <dhcp_bind+0x1ac>)
 800f4aa:	485d      	ldr	r0, [pc, #372]	@ (800f620 <dhcp_bind+0x1a8>)
 800f4ac:	f004 fcbe 	bl	8013e2c <iprintf>
 800f4b0:	e0ae      	b.n	800f610 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c0:	d019      	beq.n	800f4f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4c6:	331e      	adds	r3, #30
 800f4c8:	4a57      	ldr	r2, [pc, #348]	@ (800f628 <dhcp_bind+0x1b0>)
 800f4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ce:	095b      	lsrs	r3, r3, #5
 800f4d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f4d2:	69fb      	ldr	r3, [r7, #28]
 800f4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4d8:	d302      	bcc.n	800f4e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f4da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	b29a      	uxth	r2, r3
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	8a9b      	ldrh	r3, [r3, #20]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fe:	d01d      	beq.n	800f53c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f500:	69bb      	ldr	r3, [r7, #24]
 800f502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f504:	331e      	adds	r3, #30
 800f506:	4a48      	ldr	r2, [pc, #288]	@ (800f628 <dhcp_bind+0x1b0>)
 800f508:	fba2 2303 	umull	r2, r3, r2, r3
 800f50c:	095b      	lsrs	r3, r3, #5
 800f50e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f516:	d302      	bcc.n	800f51e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f518:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f51c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	b29a      	uxth	r2, r3
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	895b      	ldrh	r3, [r3, #10]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d102      	bne.n	800f534 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	2201      	movs	r2, #1
 800f532:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	895a      	ldrh	r2, [r3, #10]
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f544:	d01d      	beq.n	800f582 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f54a:	331e      	adds	r3, #30
 800f54c:	4a36      	ldr	r2, [pc, #216]	@ (800f628 <dhcp_bind+0x1b0>)
 800f54e:	fba2 2303 	umull	r2, r3, r2, r3
 800f552:	095b      	lsrs	r3, r3, #5
 800f554:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f55c:	d302      	bcc.n	800f564 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f55e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f562:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	b29a      	uxth	r2, r3
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	899b      	ldrh	r3, [r3, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d102      	bne.n	800f57a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f574:	69bb      	ldr	r3, [r7, #24]
 800f576:	2201      	movs	r2, #1
 800f578:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	899a      	ldrh	r2, [r3, #12]
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	895a      	ldrh	r2, [r3, #10]
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	899b      	ldrh	r3, [r3, #12]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d306      	bcc.n	800f59c <dhcp_bind+0x124>
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	899b      	ldrh	r3, [r3, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d002      	beq.n	800f59c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2200      	movs	r2, #0
 800f59a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	79db      	ldrb	r3, [r3, #7]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d003      	beq.n	800f5ac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f5a4:	69bb      	ldr	r3, [r7, #24]
 800f5a6:	6a1b      	ldr	r3, [r3, #32]
 800f5a8:	613b      	str	r3, [r7, #16]
 800f5aa:	e014      	b.n	800f5d6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	331c      	adds	r3, #28
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f5b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	db02      	blt.n	800f5c2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f5bc:	23ff      	movs	r3, #255	@ 0xff
 800f5be:	613b      	str	r3, [r7, #16]
 800f5c0:	e009      	b.n	800f5d6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
 800f5c4:	2bbf      	cmp	r3, #191	@ 0xbf
 800f5c6:	d903      	bls.n	800f5d0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f5c8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800f5cc:	613b      	str	r3, [r7, #16]
 800f5ce:	e002      	b.n	800f5d6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f5d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5d4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5da:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d108      	bne.n	800f5f4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	69da      	ldr	r2, [r3, #28]
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f5f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f5f4:	210a      	movs	r1, #10
 800f5f6:	69b8      	ldr	r0, [r7, #24]
 800f5f8:	f000 fa9a 	bl	800fb30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	f103 011c 	add.w	r1, r3, #28
 800f602:	f107 030c 	add.w	r3, r7, #12
 800f606:	f107 0210 	add.w	r2, r7, #16
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7f7 fb3c 	bl	8006c88 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f610:	3720      	adds	r7, #32
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	0801a020 	.word	0x0801a020
 800f61c:	0801a180 	.word	0x0801a180
 800f620:	0801a080 	.word	0x0801a080
 800f624:	0801a19c 	.word	0x0801a19c
 800f628:	88888889 	.word	0x88888889

0800f62c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08a      	sub	sp, #40	@ 0x28
 800f630:	af02      	add	r7, sp, #8
 800f632:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f638:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f63a:	2105      	movs	r1, #5
 800f63c:	69b8      	ldr	r0, [r7, #24]
 800f63e:	f000 fa77 	bl	800fb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f642:	f107 030c 	add.w	r3, r7, #12
 800f646:	2203      	movs	r2, #3
 800f648:	69b9      	ldr	r1, [r7, #24]
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fefc 	bl	8010448 <dhcp_create_msg>
 800f650:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d04e      	beq.n	800f6f6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f65e:	89b8      	ldrh	r0, [r7, #12]
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f666:	2302      	movs	r3, #2
 800f668:	2239      	movs	r2, #57	@ 0x39
 800f66a:	f000 fa7b 	bl	800fb64 <dhcp_option>
 800f66e:	4603      	mov	r3, r0
 800f670:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f672:	89b8      	ldrh	r0, [r7, #12]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f67e:	461a      	mov	r2, r3
 800f680:	f000 faca 	bl	800fc18 <dhcp_option_short>
 800f684:	4603      	mov	r3, r0
 800f686:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f688:	89b8      	ldrh	r0, [r7, #12]
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f690:	2303      	movs	r3, #3
 800f692:	2237      	movs	r2, #55	@ 0x37
 800f694:	f000 fa66 	bl	800fb64 <dhcp_option>
 800f698:	4603      	mov	r3, r0
 800f69a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f69c:	2300      	movs	r3, #0
 800f69e:	77bb      	strb	r3, [r7, #30]
 800f6a0:	e00e      	b.n	800f6c0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f6a2:	89b8      	ldrh	r0, [r7, #12]
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f6aa:	7fbb      	ldrb	r3, [r7, #30]
 800f6ac:	4a29      	ldr	r2, [pc, #164]	@ (800f754 <dhcp_renew+0x128>)
 800f6ae:	5cd3      	ldrb	r3, [r2, r3]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	f000 fa8b 	bl	800fbcc <dhcp_option_byte>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6ba:	7fbb      	ldrb	r3, [r7, #30]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	77bb      	strb	r3, [r7, #30]
 800f6c0:	7fbb      	ldrb	r3, [r7, #30]
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d9ed      	bls.n	800f6a2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f6c6:	89b8      	ldrh	r0, [r7, #12]
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	33f0      	adds	r3, #240	@ 0xf0
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	f000 ff90 	bl	80105f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f6d4:	4b20      	ldr	r3, [pc, #128]	@ (800f758 <dhcp_renew+0x12c>)
 800f6d6:	6818      	ldr	r0, [r3, #0]
 800f6d8:	69bb      	ldr	r3, [r7, #24]
 800f6da:	f103 0218 	add.w	r2, r3, #24
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	2343      	movs	r3, #67	@ 0x43
 800f6e4:	6979      	ldr	r1, [r7, #20]
 800f6e6:	f7fe fe51 	bl	800e38c <udp_sendto_if>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f6ee:	6978      	ldr	r0, [r7, #20]
 800f6f0:	f7f7 ffaa 	bl	8007648 <pbuf_free>
 800f6f4:	e001      	b.n	800f6fa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f6f6:	23ff      	movs	r3, #255	@ 0xff
 800f6f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	799b      	ldrb	r3, [r3, #6]
 800f6fe:	2bff      	cmp	r3, #255	@ 0xff
 800f700:	d005      	beq.n	800f70e <dhcp_renew+0xe2>
    dhcp->tries++;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	799b      	ldrb	r3, [r3, #6]
 800f706:	3301      	adds	r3, #1
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	799b      	ldrb	r3, [r3, #6]
 800f712:	2b09      	cmp	r3, #9
 800f714:	d809      	bhi.n	800f72a <dhcp_renew+0xfe>
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	799b      	ldrb	r3, [r3, #6]
 800f71a:	461a      	mov	r2, r3
 800f71c:	0152      	lsls	r2, r2, #5
 800f71e:	1ad2      	subs	r2, r2, r3
 800f720:	0092      	lsls	r2, r2, #2
 800f722:	4413      	add	r3, r2
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	b29b      	uxth	r3, r3
 800f728:	e001      	b.n	800f72e <dhcp_renew+0x102>
 800f72a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800f72e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f730:	89fb      	ldrh	r3, [r7, #14]
 800f732:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f736:	4a09      	ldr	r2, [pc, #36]	@ (800f75c <dhcp_renew+0x130>)
 800f738:	fb82 1203 	smull	r1, r2, r2, r3
 800f73c:	1152      	asrs	r2, r2, #5
 800f73e:	17db      	asrs	r3, r3, #31
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	b29a      	uxth	r2, r3
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f748:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	2000003c 	.word	0x2000003c
 800f758:	2000805c 	.word	0x2000805c
 800f75c:	10624dd3 	.word	0x10624dd3

0800f760 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08a      	sub	sp, #40	@ 0x28
 800f764:	af02      	add	r7, sp, #8
 800f766:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f76c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f76e:	2104      	movs	r1, #4
 800f770:	69b8      	ldr	r0, [r7, #24]
 800f772:	f000 f9dd 	bl	800fb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f776:	f107 030c 	add.w	r3, r7, #12
 800f77a:	2203      	movs	r2, #3
 800f77c:	69b9      	ldr	r1, [r7, #24]
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 fe62 	bl	8010448 <dhcp_create_msg>
 800f784:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d04c      	beq.n	800f826 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f792:	89b8      	ldrh	r0, [r7, #12]
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f79a:	2302      	movs	r3, #2
 800f79c:	2239      	movs	r2, #57	@ 0x39
 800f79e:	f000 f9e1 	bl	800fb64 <dhcp_option>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f7a6:	89b8      	ldrh	r0, [r7, #12]
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	f000 fa30 	bl	800fc18 <dhcp_option_short>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f7bc:	89b8      	ldrh	r0, [r7, #12]
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	2237      	movs	r2, #55	@ 0x37
 800f7c8:	f000 f9cc 	bl	800fb64 <dhcp_option>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	77bb      	strb	r3, [r7, #30]
 800f7d4:	e00e      	b.n	800f7f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f7d6:	89b8      	ldrh	r0, [r7, #12]
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f7de:	7fbb      	ldrb	r3, [r7, #30]
 800f7e0:	4a28      	ldr	r2, [pc, #160]	@ (800f884 <dhcp_rebind+0x124>)
 800f7e2:	5cd3      	ldrb	r3, [r2, r3]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	f000 f9f1 	bl	800fbcc <dhcp_option_byte>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f7ee:	7fbb      	ldrb	r3, [r7, #30]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	77bb      	strb	r3, [r7, #30]
 800f7f4:	7fbb      	ldrb	r3, [r7, #30]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d9ed      	bls.n	800f7d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f7fa:	89b8      	ldrh	r0, [r7, #12]
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	33f0      	adds	r3, #240	@ 0xf0
 800f800:	697a      	ldr	r2, [r7, #20]
 800f802:	4619      	mov	r1, r3
 800f804:	f000 fef6 	bl	80105f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f808:	4b1f      	ldr	r3, [pc, #124]	@ (800f888 <dhcp_rebind+0x128>)
 800f80a:	6818      	ldr	r0, [r3, #0]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	2343      	movs	r3, #67	@ 0x43
 800f812:	4a1e      	ldr	r2, [pc, #120]	@ (800f88c <dhcp_rebind+0x12c>)
 800f814:	6979      	ldr	r1, [r7, #20]
 800f816:	f7fe fdb9 	bl	800e38c <udp_sendto_if>
 800f81a:	4603      	mov	r3, r0
 800f81c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f81e:	6978      	ldr	r0, [r7, #20]
 800f820:	f7f7 ff12 	bl	8007648 <pbuf_free>
 800f824:	e001      	b.n	800f82a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f826:	23ff      	movs	r3, #255	@ 0xff
 800f828:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	799b      	ldrb	r3, [r3, #6]
 800f82e:	2bff      	cmp	r3, #255	@ 0xff
 800f830:	d005      	beq.n	800f83e <dhcp_rebind+0xde>
    dhcp->tries++;
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	799b      	ldrb	r3, [r3, #6]
 800f836:	3301      	adds	r3, #1
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	799b      	ldrb	r3, [r3, #6]
 800f842:	2b09      	cmp	r3, #9
 800f844:	d809      	bhi.n	800f85a <dhcp_rebind+0xfa>
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	799b      	ldrb	r3, [r3, #6]
 800f84a:	461a      	mov	r2, r3
 800f84c:	0152      	lsls	r2, r2, #5
 800f84e:	1ad2      	subs	r2, r2, r3
 800f850:	0092      	lsls	r2, r2, #2
 800f852:	4413      	add	r3, r2
 800f854:	00db      	lsls	r3, r3, #3
 800f856:	b29b      	uxth	r3, r3
 800f858:	e001      	b.n	800f85e <dhcp_rebind+0xfe>
 800f85a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f85e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f860:	89fb      	ldrh	r3, [r7, #14]
 800f862:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f866:	4a0a      	ldr	r2, [pc, #40]	@ (800f890 <dhcp_rebind+0x130>)
 800f868:	fb82 1203 	smull	r1, r2, r2, r3
 800f86c:	1152      	asrs	r2, r2, #5
 800f86e:	17db      	asrs	r3, r3, #31
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	b29a      	uxth	r2, r3
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f878:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3720      	adds	r7, #32
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	2000003c 	.word	0x2000003c
 800f888:	2000805c 	.word	0x2000805c
 800f88c:	0801abf4 	.word	0x0801abf4
 800f890:	10624dd3 	.word	0x10624dd3

0800f894 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f894:	b5b0      	push	{r4, r5, r7, lr}
 800f896:	b08a      	sub	sp, #40	@ 0x28
 800f898:	af02      	add	r7, sp, #8
 800f89a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f8a2:	2103      	movs	r1, #3
 800f8a4:	69b8      	ldr	r0, [r7, #24]
 800f8a6:	f000 f943 	bl	800fb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f8aa:	f107 030c 	add.w	r3, r7, #12
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	69b9      	ldr	r1, [r7, #24]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fdc8 	bl	8010448 <dhcp_create_msg>
 800f8b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d066      	beq.n	800f98e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f8c6:	89b8      	ldrh	r0, [r7, #12]
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	2239      	movs	r2, #57	@ 0x39
 800f8d2:	f000 f947 	bl	800fb64 <dhcp_option>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f8da:	89b8      	ldrh	r0, [r7, #12]
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	33f0      	adds	r3, #240	@ 0xf0
 800f8e0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	f000 f997 	bl	800fc18 <dhcp_option_short>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f8ee:	89b8      	ldrh	r0, [r7, #12]
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f8f6:	2304      	movs	r3, #4
 800f8f8:	2232      	movs	r2, #50	@ 0x32
 800f8fa:	f000 f933 	bl	800fb64 <dhcp_option>
 800f8fe:	4603      	mov	r3, r0
 800f900:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f902:	89bc      	ldrh	r4, [r7, #12]
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	4618      	mov	r0, r3
 800f910:	f7f6 fb22 	bl	8005f58 <lwip_htonl>
 800f914:	4603      	mov	r3, r0
 800f916:	461a      	mov	r2, r3
 800f918:	4629      	mov	r1, r5
 800f91a:	4620      	mov	r0, r4
 800f91c:	f000 f9ae 	bl	800fc7c <dhcp_option_long>
 800f920:	4603      	mov	r3, r0
 800f922:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f924:	89b8      	ldrh	r0, [r7, #12]
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f92c:	2303      	movs	r3, #3
 800f92e:	2237      	movs	r2, #55	@ 0x37
 800f930:	f000 f918 	bl	800fb64 <dhcp_option>
 800f934:	4603      	mov	r3, r0
 800f936:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f938:	2300      	movs	r3, #0
 800f93a:	77bb      	strb	r3, [r7, #30]
 800f93c:	e00e      	b.n	800f95c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f93e:	89b8      	ldrh	r0, [r7, #12]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800f946:	7fbb      	ldrb	r3, [r7, #30]
 800f948:	4a28      	ldr	r2, [pc, #160]	@ (800f9ec <dhcp_reboot+0x158>)
 800f94a:	5cd3      	ldrb	r3, [r2, r3]
 800f94c:	461a      	mov	r2, r3
 800f94e:	f000 f93d 	bl	800fbcc <dhcp_option_byte>
 800f952:	4603      	mov	r3, r0
 800f954:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f956:	7fbb      	ldrb	r3, [r7, #30]
 800f958:	3301      	adds	r3, #1
 800f95a:	77bb      	strb	r3, [r7, #30]
 800f95c:	7fbb      	ldrb	r3, [r7, #30]
 800f95e:	2b02      	cmp	r3, #2
 800f960:	d9ed      	bls.n	800f93e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f962:	89b8      	ldrh	r0, [r7, #12]
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	33f0      	adds	r3, #240	@ 0xf0
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	4619      	mov	r1, r3
 800f96c:	f000 fe42 	bl	80105f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f970:	4b1f      	ldr	r3, [pc, #124]	@ (800f9f0 <dhcp_reboot+0x15c>)
 800f972:	6818      	ldr	r0, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	2343      	movs	r3, #67	@ 0x43
 800f97a:	4a1e      	ldr	r2, [pc, #120]	@ (800f9f4 <dhcp_reboot+0x160>)
 800f97c:	6979      	ldr	r1, [r7, #20]
 800f97e:	f7fe fd05 	bl	800e38c <udp_sendto_if>
 800f982:	4603      	mov	r3, r0
 800f984:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f986:	6978      	ldr	r0, [r7, #20]
 800f988:	f7f7 fe5e 	bl	8007648 <pbuf_free>
 800f98c:	e001      	b.n	800f992 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f98e:	23ff      	movs	r3, #255	@ 0xff
 800f990:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f992:	69bb      	ldr	r3, [r7, #24]
 800f994:	799b      	ldrb	r3, [r3, #6]
 800f996:	2bff      	cmp	r3, #255	@ 0xff
 800f998:	d005      	beq.n	800f9a6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	799b      	ldrb	r3, [r3, #6]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	b2da      	uxtb	r2, r3
 800f9a2:	69bb      	ldr	r3, [r7, #24]
 800f9a4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	799b      	ldrb	r3, [r3, #6]
 800f9aa:	2b09      	cmp	r3, #9
 800f9ac:	d809      	bhi.n	800f9c2 <dhcp_reboot+0x12e>
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	799b      	ldrb	r3, [r3, #6]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	0152      	lsls	r2, r2, #5
 800f9b6:	1ad2      	subs	r2, r2, r3
 800f9b8:	0092      	lsls	r2, r2, #2
 800f9ba:	4413      	add	r3, r2
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	e001      	b.n	800f9c6 <dhcp_reboot+0x132>
 800f9c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f9c6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f9c8:	89fb      	ldrh	r3, [r7, #14]
 800f9ca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800f9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800f9f8 <dhcp_reboot+0x164>)
 800f9d0:	fb82 1203 	smull	r1, r2, r2, r3
 800f9d4:	1152      	asrs	r2, r2, #5
 800f9d6:	17db      	asrs	r3, r3, #31
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f9e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3720      	adds	r7, #32
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f9ec:	2000003c 	.word	0x2000003c
 800f9f0:	2000805c 	.word	0x2000805c
 800f9f4:	0801abf4 	.word	0x0801abf4
 800f9f8:	10624dd3 	.word	0x10624dd3

0800f9fc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f9fc:	b5b0      	push	{r4, r5, r7, lr}
 800f9fe:	b08a      	sub	sp, #40	@ 0x28
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa08:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f000 8084 	beq.w	800fb1a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	795b      	ldrb	r3, [r3, #5]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f000 8081 	beq.w	800fb1e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	699b      	ldr	r3, [r3, #24]
 800fa20:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	2200      	movs	r2, #0
 800fa26:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	2200      	movs	r2, #0
 800fa32:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	2200      	movs	r2, #0
 800fa38:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	2200      	movs	r2, #0
 800fa54:	829a      	strh	r2, [r3, #20]
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	8a9a      	ldrh	r2, [r3, #20]
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	825a      	strh	r2, [r3, #18]
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	8a5a      	ldrh	r2, [r3, #18]
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	821a      	strh	r2, [r3, #16]
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	8a1a      	ldrh	r2, [r3, #16]
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fdee 	bl	8010650 <dhcp_supplied_address>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d03b      	beq.n	800faf2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fa7a:	f107 030e 	add.w	r3, r7, #14
 800fa7e:	2207      	movs	r2, #7
 800fa80:	69f9      	ldr	r1, [r7, #28]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 fce0 	bl	8010448 <dhcp_create_msg>
 800fa88:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d030      	beq.n	800faf2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fa96:	89f8      	ldrh	r0, [r7, #14]
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fa9e:	2304      	movs	r3, #4
 800faa0:	2236      	movs	r2, #54	@ 0x36
 800faa2:	f000 f85f 	bl	800fb64 <dhcp_option>
 800faa6:	4603      	mov	r3, r0
 800faa8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800faaa:	89fc      	ldrh	r4, [r7, #14]
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f6 fa4f 	bl	8005f58 <lwip_htonl>
 800faba:	4603      	mov	r3, r0
 800fabc:	461a      	mov	r2, r3
 800fabe:	4629      	mov	r1, r5
 800fac0:	4620      	mov	r0, r4
 800fac2:	f000 f8db 	bl	800fc7c <dhcp_option_long>
 800fac6:	4603      	mov	r3, r0
 800fac8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800faca:	89f8      	ldrh	r0, [r7, #14]
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	33f0      	adds	r3, #240	@ 0xf0
 800fad0:	69ba      	ldr	r2, [r7, #24]
 800fad2:	4619      	mov	r1, r3
 800fad4:	f000 fd8e 	bl	80105f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fad8:	4b13      	ldr	r3, [pc, #76]	@ (800fb28 <dhcp_release_and_stop+0x12c>)
 800fada:	6818      	ldr	r0, [r3, #0]
 800fadc:	f107 0210 	add.w	r2, r7, #16
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	2343      	movs	r3, #67	@ 0x43
 800fae6:	69b9      	ldr	r1, [r7, #24]
 800fae8:	f7fe fc50 	bl	800e38c <udp_sendto_if>
      pbuf_free(p_out);
 800faec:	69b8      	ldr	r0, [r7, #24]
 800faee:	f7f7 fdab 	bl	8007648 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800faf2:	4b0e      	ldr	r3, [pc, #56]	@ (800fb2c <dhcp_release_and_stop+0x130>)
 800faf4:	4a0d      	ldr	r2, [pc, #52]	@ (800fb2c <dhcp_release_and_stop+0x130>)
 800faf6:	490d      	ldr	r1, [pc, #52]	@ (800fb2c <dhcp_release_and_stop+0x130>)
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7f7 f8c5 	bl	8006c88 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fafe:	2100      	movs	r1, #0
 800fb00:	69f8      	ldr	r0, [r7, #28]
 800fb02:	f000 f815 	bl	800fb30 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	791b      	ldrb	r3, [r3, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d008      	beq.n	800fb20 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fb0e:	f7fe ff89 	bl	800ea24 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	2200      	movs	r2, #0
 800fb16:	711a      	strb	r2, [r3, #4]
 800fb18:	e002      	b.n	800fb20 <dhcp_release_and_stop+0x124>
    return;
 800fb1a:	bf00      	nop
 800fb1c:	e000      	b.n	800fb20 <dhcp_release_and_stop+0x124>
    return;
 800fb1e:	bf00      	nop
  }
}
 800fb20:	3720      	adds	r7, #32
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bdb0      	pop	{r4, r5, r7, pc}
 800fb26:	bf00      	nop
 800fb28:	2000805c 	.word	0x2000805c
 800fb2c:	0801abf0 	.word	0x0801abf0

0800fb30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	795b      	ldrb	r3, [r3, #5]
 800fb40:	78fa      	ldrb	r2, [r7, #3]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d008      	beq.n	800fb58 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	78fa      	ldrb	r2, [r7, #3]
 800fb4a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	811a      	strh	r2, [r3, #8]
  }
}
 800fb58:	bf00      	nop
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6039      	str	r1, [r7, #0]
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	461a      	mov	r2, r3
 800fb70:	4603      	mov	r3, r0
 800fb72:	80fb      	strh	r3, [r7, #6]
 800fb74:	460b      	mov	r3, r1
 800fb76:	717b      	strb	r3, [r7, #5]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fb7c:	88fa      	ldrh	r2, [r7, #6]
 800fb7e:	793b      	ldrb	r3, [r7, #4]
 800fb80:	4413      	add	r3, r2
 800fb82:	3302      	adds	r3, #2
 800fb84:	2b44      	cmp	r3, #68	@ 0x44
 800fb86:	d906      	bls.n	800fb96 <dhcp_option+0x32>
 800fb88:	4b0d      	ldr	r3, [pc, #52]	@ (800fbc0 <dhcp_option+0x5c>)
 800fb8a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fb8e:	490d      	ldr	r1, [pc, #52]	@ (800fbc4 <dhcp_option+0x60>)
 800fb90:	480d      	ldr	r0, [pc, #52]	@ (800fbc8 <dhcp_option+0x64>)
 800fb92:	f004 f94b 	bl	8013e2c <iprintf>
  options[options_out_len++] = option_type;
 800fb96:	88fb      	ldrh	r3, [r7, #6]
 800fb98:	1c5a      	adds	r2, r3, #1
 800fb9a:	80fa      	strh	r2, [r7, #6]
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	4413      	add	r3, r2
 800fba2:	797a      	ldrb	r2, [r7, #5]
 800fba4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	80fa      	strh	r2, [r7, #6]
 800fbac:	461a      	mov	r2, r3
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	793a      	ldrb	r2, [r7, #4]
 800fbb4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fbb6:	88fb      	ldrh	r3, [r7, #6]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	0801a020 	.word	0x0801a020
 800fbc4:	0801a1b4 	.word	0x0801a1b4
 800fbc8:	0801a080 	.word	0x0801a080

0800fbcc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	80fb      	strh	r3, [r7, #6]
 800fbd8:	4613      	mov	r3, r2
 800fbda:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fbdc:	88fb      	ldrh	r3, [r7, #6]
 800fbde:	2b43      	cmp	r3, #67	@ 0x43
 800fbe0:	d906      	bls.n	800fbf0 <dhcp_option_byte+0x24>
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <dhcp_option_byte+0x40>)
 800fbe4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800fbe8:	4909      	ldr	r1, [pc, #36]	@ (800fc10 <dhcp_option_byte+0x44>)
 800fbea:	480a      	ldr	r0, [pc, #40]	@ (800fc14 <dhcp_option_byte+0x48>)
 800fbec:	f004 f91e 	bl	8013e2c <iprintf>
  options[options_out_len++] = value;
 800fbf0:	88fb      	ldrh	r3, [r7, #6]
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	80fa      	strh	r2, [r7, #6]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	797a      	ldrb	r2, [r7, #5]
 800fbfe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fc00:	88fb      	ldrh	r3, [r7, #6]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	0801a020 	.word	0x0801a020
 800fc10:	0801a1f8 	.word	0x0801a1f8
 800fc14:	0801a080 	.word	0x0801a080

0800fc18 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	6039      	str	r1, [r7, #0]
 800fc22:	80fb      	strh	r3, [r7, #6]
 800fc24:	4613      	mov	r3, r2
 800fc26:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fc28:	88fb      	ldrh	r3, [r7, #6]
 800fc2a:	3302      	adds	r3, #2
 800fc2c:	2b44      	cmp	r3, #68	@ 0x44
 800fc2e:	d906      	bls.n	800fc3e <dhcp_option_short+0x26>
 800fc30:	4b0f      	ldr	r3, [pc, #60]	@ (800fc70 <dhcp_option_short+0x58>)
 800fc32:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800fc36:	490f      	ldr	r1, [pc, #60]	@ (800fc74 <dhcp_option_short+0x5c>)
 800fc38:	480f      	ldr	r0, [pc, #60]	@ (800fc78 <dhcp_option_short+0x60>)
 800fc3a:	f004 f8f7 	bl	8013e2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fc3e:	88bb      	ldrh	r3, [r7, #4]
 800fc40:	0a1b      	lsrs	r3, r3, #8
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	1c59      	adds	r1, r3, #1
 800fc48:	80f9      	strh	r1, [r7, #6]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	440b      	add	r3, r1
 800fc50:	b2d2      	uxtb	r2, r2
 800fc52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fc54:	88fb      	ldrh	r3, [r7, #6]
 800fc56:	1c5a      	adds	r2, r3, #1
 800fc58:	80fa      	strh	r2, [r7, #6]
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	4413      	add	r3, r2
 800fc60:	88ba      	ldrh	r2, [r7, #4]
 800fc62:	b2d2      	uxtb	r2, r2
 800fc64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fc66:	88fb      	ldrh	r3, [r7, #6]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3708      	adds	r7, #8
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	0801a020 	.word	0x0801a020
 800fc74:	0801a230 	.word	0x0801a230
 800fc78:	0801a080 	.word	0x0801a080

0800fc7c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
 800fc88:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fc8a:	89fb      	ldrh	r3, [r7, #14]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	2b44      	cmp	r3, #68	@ 0x44
 800fc90:	d906      	bls.n	800fca0 <dhcp_option_long+0x24>
 800fc92:	4b19      	ldr	r3, [pc, #100]	@ (800fcf8 <dhcp_option_long+0x7c>)
 800fc94:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800fc98:	4918      	ldr	r1, [pc, #96]	@ (800fcfc <dhcp_option_long+0x80>)
 800fc9a:	4819      	ldr	r0, [pc, #100]	@ (800fd00 <dhcp_option_long+0x84>)
 800fc9c:	f004 f8c6 	bl	8013e2c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	0e1a      	lsrs	r2, r3, #24
 800fca4:	89fb      	ldrh	r3, [r7, #14]
 800fca6:	1c59      	adds	r1, r3, #1
 800fca8:	81f9      	strh	r1, [r7, #14]
 800fcaa:	4619      	mov	r1, r3
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	440b      	add	r3, r1
 800fcb0:	b2d2      	uxtb	r2, r2
 800fcb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	0c1a      	lsrs	r2, r3, #16
 800fcb8:	89fb      	ldrh	r3, [r7, #14]
 800fcba:	1c59      	adds	r1, r3, #1
 800fcbc:	81f9      	strh	r1, [r7, #14]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	440b      	add	r3, r1
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	0a1a      	lsrs	r2, r3, #8
 800fccc:	89fb      	ldrh	r3, [r7, #14]
 800fcce:	1c59      	adds	r1, r3, #1
 800fcd0:	81f9      	strh	r1, [r7, #14]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	440b      	add	r3, r1
 800fcd8:	b2d2      	uxtb	r2, r2
 800fcda:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fcdc:	89fb      	ldrh	r3, [r7, #14]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	81fa      	strh	r2, [r7, #14]
 800fce2:	461a      	mov	r2, r3
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	4413      	add	r3, r2
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	b2d2      	uxtb	r2, r2
 800fcec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fcee:	89fb      	ldrh	r3, [r7, #14]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	0801a020 	.word	0x0801a020
 800fcfc:	0801a26c 	.word	0x0801a26c
 800fd00:	0801a080 	.word	0x0801a080

0800fd04 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b090      	sub	sp, #64	@ 0x40
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800fd12:	2300      	movs	r3, #0
 800fd14:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fd16:	2208      	movs	r2, #8
 800fd18:	2100      	movs	r1, #0
 800fd1a:	48b5      	ldr	r0, [pc, #724]	@ (800fff0 <dhcp_parse_reply+0x2ec>)
 800fd1c:	f004 f927 	bl	8013f6e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	895b      	ldrh	r3, [r3, #10]
 800fd24:	2b2b      	cmp	r3, #43	@ 0x2b
 800fd26:	d802      	bhi.n	800fd2e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fd28:	f06f 0301 	mvn.w	r3, #1
 800fd2c:	e2a7      	b.n	801027e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fd34:	23f0      	movs	r3, #240	@ 0xf0
 800fd36:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	891b      	ldrh	r3, [r3, #8]
 800fd3c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fd42:	e00c      	b.n	800fd5e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd46:	895b      	ldrh	r3, [r3, #10]
 800fd48:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd50:	895b      	ldrh	r3, [r3, #10]
 800fd52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800fd54:	1ad3      	subs	r3, r2, r3
 800fd56:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800fd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <dhcp_parse_reply+0x6a>
 800fd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd66:	895b      	ldrh	r3, [r3, #10]
 800fd68:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d2ea      	bcs.n	800fd44 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d102      	bne.n	800fd7a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fd74:	f06f 0301 	mvn.w	r3, #1
 800fd78:	e281      	b.n	801027e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800fd7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fd7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800fd7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fd80:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800fd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fd88:	e239      	b.n	80101fe <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800fd8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fd8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fd8e:	4413      	add	r3, r2
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fd94:	2300      	movs	r3, #0
 800fd96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800fd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fda0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fda2:	3302      	adds	r3, #2
 800fda4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fda6:	8bfa      	ldrh	r2, [r7, #30]
 800fda8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d202      	bcs.n	800fdb4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800fdae:	f06f 0301 	mvn.w	r3, #1
 800fdb2:	e264      	b.n	801027e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800fdb4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdba:	8952      	ldrh	r2, [r2, #10]
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	da07      	bge.n	800fdd0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fdc0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fdc6:	4413      	add	r3, r2
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fdce:	e00b      	b.n	800fde8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d004      	beq.n	800fde2 <dhcp_parse_reply+0xde>
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	e000      	b.n	800fde4 <dhcp_parse_reply+0xe0>
 800fde2:	2300      	movs	r3, #0
 800fde4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fde8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800fdf0:	7dfb      	ldrb	r3, [r7, #23]
 800fdf2:	2b3b      	cmp	r3, #59	@ 0x3b
 800fdf4:	f200 812c 	bhi.w	8010050 <dhcp_parse_reply+0x34c>
 800fdf8:	a201      	add	r2, pc, #4	@ (adr r2, 800fe00 <dhcp_parse_reply+0xfc>)
 800fdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdfe:	bf00      	nop
 800fe00:	0800fef1 	.word	0x0800fef1
 800fe04:	0800ff01 	.word	0x0800ff01
 800fe08:	08010051 	.word	0x08010051
 800fe0c:	0800ff23 	.word	0x0800ff23
 800fe10:	08010051 	.word	0x08010051
 800fe14:	08010051 	.word	0x08010051
 800fe18:	08010051 	.word	0x08010051
 800fe1c:	08010051 	.word	0x08010051
 800fe20:	08010051 	.word	0x08010051
 800fe24:	08010051 	.word	0x08010051
 800fe28:	08010051 	.word	0x08010051
 800fe2c:	08010051 	.word	0x08010051
 800fe30:	08010051 	.word	0x08010051
 800fe34:	08010051 	.word	0x08010051
 800fe38:	08010051 	.word	0x08010051
 800fe3c:	08010051 	.word	0x08010051
 800fe40:	08010051 	.word	0x08010051
 800fe44:	08010051 	.word	0x08010051
 800fe48:	08010051 	.word	0x08010051
 800fe4c:	08010051 	.word	0x08010051
 800fe50:	08010051 	.word	0x08010051
 800fe54:	08010051 	.word	0x08010051
 800fe58:	08010051 	.word	0x08010051
 800fe5c:	08010051 	.word	0x08010051
 800fe60:	08010051 	.word	0x08010051
 800fe64:	08010051 	.word	0x08010051
 800fe68:	08010051 	.word	0x08010051
 800fe6c:	08010051 	.word	0x08010051
 800fe70:	08010051 	.word	0x08010051
 800fe74:	08010051 	.word	0x08010051
 800fe78:	08010051 	.word	0x08010051
 800fe7c:	08010051 	.word	0x08010051
 800fe80:	08010051 	.word	0x08010051
 800fe84:	08010051 	.word	0x08010051
 800fe88:	08010051 	.word	0x08010051
 800fe8c:	08010051 	.word	0x08010051
 800fe90:	08010051 	.word	0x08010051
 800fe94:	08010051 	.word	0x08010051
 800fe98:	08010051 	.word	0x08010051
 800fe9c:	08010051 	.word	0x08010051
 800fea0:	08010051 	.word	0x08010051
 800fea4:	08010051 	.word	0x08010051
 800fea8:	08010051 	.word	0x08010051
 800feac:	08010051 	.word	0x08010051
 800feb0:	08010051 	.word	0x08010051
 800feb4:	08010051 	.word	0x08010051
 800feb8:	08010051 	.word	0x08010051
 800febc:	08010051 	.word	0x08010051
 800fec0:	08010051 	.word	0x08010051
 800fec4:	08010051 	.word	0x08010051
 800fec8:	08010051 	.word	0x08010051
 800fecc:	0800ff4f 	.word	0x0800ff4f
 800fed0:	0800ff71 	.word	0x0800ff71
 800fed4:	0800ffad 	.word	0x0800ffad
 800fed8:	0800ffcf 	.word	0x0800ffcf
 800fedc:	08010051 	.word	0x08010051
 800fee0:	08010051 	.word	0x08010051
 800fee4:	08010051 	.word	0x08010051
 800fee8:	0801000d 	.word	0x0801000d
 800feec:	0801002f 	.word	0x0801002f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fef0:	2300      	movs	r3, #0
 800fef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fef6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fefa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800fefe:	e0ab      	b.n	8010058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff04:	2b04      	cmp	r3, #4
 800ff06:	d009      	beq.n	800ff1c <dhcp_parse_reply+0x218>
 800ff08:	4b3a      	ldr	r3, [pc, #232]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ff0a:	f240 622e 	movw	r2, #1582	@ 0x62e
 800ff0e:	493a      	ldr	r1, [pc, #232]	@ (800fff8 <dhcp_parse_reply+0x2f4>)
 800ff10:	483a      	ldr	r0, [pc, #232]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ff12:	f003 ff8b 	bl	8013e2c <iprintf>
 800ff16:	f06f 0305 	mvn.w	r3, #5
 800ff1a:	e1b0      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ff1c:	2306      	movs	r3, #6
 800ff1e:	623b      	str	r3, [r7, #32]
        break;
 800ff20:	e09a      	b.n	8010058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ff22:	2304      	movs	r3, #4
 800ff24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ff28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ff2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d209      	bcs.n	800ff48 <dhcp_parse_reply+0x244>
 800ff34:	4b2f      	ldr	r3, [pc, #188]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ff36:	f240 6233 	movw	r2, #1587	@ 0x633
 800ff3a:	4931      	ldr	r1, [pc, #196]	@ (8010000 <dhcp_parse_reply+0x2fc>)
 800ff3c:	482f      	ldr	r0, [pc, #188]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ff3e:	f003 ff75 	bl	8013e2c <iprintf>
 800ff42:	f06f 0305 	mvn.w	r3, #5
 800ff46:	e19a      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ff48:	2307      	movs	r3, #7
 800ff4a:	623b      	str	r3, [r7, #32]
        break;
 800ff4c:	e084      	b.n	8010058 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff52:	2b04      	cmp	r3, #4
 800ff54:	d009      	beq.n	800ff6a <dhcp_parse_reply+0x266>
 800ff56:	4b27      	ldr	r3, [pc, #156]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ff58:	f240 6241 	movw	r2, #1601	@ 0x641
 800ff5c:	4926      	ldr	r1, [pc, #152]	@ (800fff8 <dhcp_parse_reply+0x2f4>)
 800ff5e:	4827      	ldr	r0, [pc, #156]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ff60:	f003 ff64 	bl	8013e2c <iprintf>
 800ff64:	f06f 0305 	mvn.w	r3, #5
 800ff68:	e189      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ff6a:	2303      	movs	r3, #3
 800ff6c:	623b      	str	r3, [r7, #32]
        break;
 800ff6e:	e073      	b.n	8010058 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ff70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d009      	beq.n	800ff8c <dhcp_parse_reply+0x288>
 800ff78:	4b1e      	ldr	r3, [pc, #120]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ff7a:	f240 624f 	movw	r2, #1615	@ 0x64f
 800ff7e:	4921      	ldr	r1, [pc, #132]	@ (8010004 <dhcp_parse_reply+0x300>)
 800ff80:	481e      	ldr	r0, [pc, #120]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ff82:	f003 ff53 	bl	8013e2c <iprintf>
 800ff86:	f06f 0305 	mvn.w	r3, #5
 800ff8a:	e178      	b.n	801027e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ff8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ff8e:	2bf0      	cmp	r3, #240	@ 0xf0
 800ff90:	d009      	beq.n	800ffa6 <dhcp_parse_reply+0x2a2>
 800ff92:	4b18      	ldr	r3, [pc, #96]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ff94:	f240 6251 	movw	r2, #1617	@ 0x651
 800ff98:	491b      	ldr	r1, [pc, #108]	@ (8010008 <dhcp_parse_reply+0x304>)
 800ff9a:	4818      	ldr	r0, [pc, #96]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ff9c:	f003 ff46 	bl	8013e2c <iprintf>
 800ffa0:	f06f 0305 	mvn.w	r3, #5
 800ffa4:	e16b      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	623b      	str	r3, [r7, #32]
        break;
 800ffaa:	e055      	b.n	8010058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ffac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d009      	beq.n	800ffc8 <dhcp_parse_reply+0x2c4>
 800ffb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ffb6:	f240 6255 	movw	r2, #1621	@ 0x655
 800ffba:	4912      	ldr	r1, [pc, #72]	@ (8010004 <dhcp_parse_reply+0x300>)
 800ffbc:	480f      	ldr	r0, [pc, #60]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ffbe:	f003 ff35 	bl	8013e2c <iprintf>
 800ffc2:	f06f 0305 	mvn.w	r3, #5
 800ffc6:	e15a      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	623b      	str	r3, [r7, #32]
        break;
 800ffcc:	e044      	b.n	8010058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ffce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffd2:	2b04      	cmp	r3, #4
 800ffd4:	d009      	beq.n	800ffea <dhcp_parse_reply+0x2e6>
 800ffd6:	4b07      	ldr	r3, [pc, #28]	@ (800fff4 <dhcp_parse_reply+0x2f0>)
 800ffd8:	f240 6259 	movw	r2, #1625	@ 0x659
 800ffdc:	4906      	ldr	r1, [pc, #24]	@ (800fff8 <dhcp_parse_reply+0x2f4>)
 800ffde:	4807      	ldr	r0, [pc, #28]	@ (800fffc <dhcp_parse_reply+0x2f8>)
 800ffe0:	f003 ff24 	bl	8013e2c <iprintf>
 800ffe4:	f06f 0305 	mvn.w	r3, #5
 800ffe8:	e149      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ffea:	2302      	movs	r3, #2
 800ffec:	623b      	str	r3, [r7, #32]
        break;
 800ffee:	e033      	b.n	8010058 <dhcp_parse_reply+0x354>
 800fff0:	20008054 	.word	0x20008054
 800fff4:	0801a020 	.word	0x0801a020
 800fff8:	0801a2a8 	.word	0x0801a2a8
 800fffc:	0801a080 	.word	0x0801a080
 8010000:	0801a2b4 	.word	0x0801a2b4
 8010004:	0801a2c8 	.word	0x0801a2c8
 8010008:	0801a2d4 	.word	0x0801a2d4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801000c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010010:	2b04      	cmp	r3, #4
 8010012:	d009      	beq.n	8010028 <dhcp_parse_reply+0x324>
 8010014:	4b9c      	ldr	r3, [pc, #624]	@ (8010288 <dhcp_parse_reply+0x584>)
 8010016:	f240 625d 	movw	r2, #1629	@ 0x65d
 801001a:	499c      	ldr	r1, [pc, #624]	@ (801028c <dhcp_parse_reply+0x588>)
 801001c:	489c      	ldr	r0, [pc, #624]	@ (8010290 <dhcp_parse_reply+0x58c>)
 801001e:	f003 ff05 	bl	8013e2c <iprintf>
 8010022:	f06f 0305 	mvn.w	r3, #5
 8010026:	e12a      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010028:	2304      	movs	r3, #4
 801002a:	623b      	str	r3, [r7, #32]
        break;
 801002c:	e014      	b.n	8010058 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801002e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010032:	2b04      	cmp	r3, #4
 8010034:	d009      	beq.n	801004a <dhcp_parse_reply+0x346>
 8010036:	4b94      	ldr	r3, [pc, #592]	@ (8010288 <dhcp_parse_reply+0x584>)
 8010038:	f240 6261 	movw	r2, #1633	@ 0x661
 801003c:	4993      	ldr	r1, [pc, #588]	@ (801028c <dhcp_parse_reply+0x588>)
 801003e:	4894      	ldr	r0, [pc, #592]	@ (8010290 <dhcp_parse_reply+0x58c>)
 8010040:	f003 fef4 	bl	8013e2c <iprintf>
 8010044:	f06f 0305 	mvn.w	r3, #5
 8010048:	e119      	b.n	801027e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801004a:	2305      	movs	r3, #5
 801004c:	623b      	str	r3, [r7, #32]
        break;
 801004e:	e003      	b.n	8010058 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010050:	2300      	movs	r3, #0
 8010052:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010056:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010058:	7dfb      	ldrb	r3, [r7, #23]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d103      	bne.n	8010066 <dhcp_parse_reply+0x362>
      offset++;
 801005e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010060:	3301      	adds	r3, #1
 8010062:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8010064:	e0a1      	b.n	80101aa <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010066:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010068:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801006c:	4413      	add	r3, r2
 801006e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8010072:	4293      	cmp	r3, r2
 8010074:	dd02      	ble.n	801007c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010076:	f06f 0301 	mvn.w	r3, #1
 801007a:	e100      	b.n	801027e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801007c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010080:	b29a      	uxth	r2, r3
 8010082:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010084:	4413      	add	r3, r2
 8010086:	b29b      	uxth	r3, r3
 8010088:	3302      	adds	r3, #2
 801008a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801008c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010090:	2b00      	cmp	r3, #0
 8010092:	f000 808a 	beq.w	80101aa <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	2b00      	cmp	r3, #0
 801009e:	db02      	blt.n	80100a6 <dhcp_parse_reply+0x3a2>
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	2b07      	cmp	r3, #7
 80100a4:	dd06      	ble.n	80100b4 <dhcp_parse_reply+0x3b0>
 80100a6:	4b78      	ldr	r3, [pc, #480]	@ (8010288 <dhcp_parse_reply+0x584>)
 80100a8:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80100ac:	4979      	ldr	r1, [pc, #484]	@ (8010294 <dhcp_parse_reply+0x590>)
 80100ae:	4878      	ldr	r0, [pc, #480]	@ (8010290 <dhcp_parse_reply+0x58c>)
 80100b0:	f003 febc 	bl	8013e2c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80100b4:	4a78      	ldr	r2, [pc, #480]	@ (8010298 <dhcp_parse_reply+0x594>)
 80100b6:	6a3b      	ldr	r3, [r7, #32]
 80100b8:	4413      	add	r3, r2
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d174      	bne.n	80101aa <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80100c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100c4:	2b04      	cmp	r3, #4
 80100c6:	bf28      	it	cs
 80100c8:	2304      	movcs	r3, #4
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80100ce:	8bfb      	ldrh	r3, [r7, #30]
 80100d0:	8aba      	ldrh	r2, [r7, #20]
 80100d2:	f107 0108 	add.w	r1, r7, #8
 80100d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100d8:	f7f7 fcb0 	bl	8007a3c <pbuf_copy_partial>
 80100dc:	4603      	mov	r3, r0
 80100de:	461a      	mov	r2, r3
 80100e0:	8abb      	ldrh	r3, [r7, #20]
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d002      	beq.n	80100ec <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80100e6:	f06f 0301 	mvn.w	r3, #1
 80100ea:	e0c8      	b.n	801027e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80100ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100f0:	2b04      	cmp	r3, #4
 80100f2:	d933      	bls.n	801015c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80100f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100f8:	f003 0303 	and.w	r3, r3, #3
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d009      	beq.n	8010116 <dhcp_parse_reply+0x412>
 8010102:	4b61      	ldr	r3, [pc, #388]	@ (8010288 <dhcp_parse_reply+0x584>)
 8010104:	f240 6281 	movw	r2, #1665	@ 0x681
 8010108:	4964      	ldr	r1, [pc, #400]	@ (801029c <dhcp_parse_reply+0x598>)
 801010a:	4861      	ldr	r0, [pc, #388]	@ (8010290 <dhcp_parse_reply+0x58c>)
 801010c:	f003 fe8e 	bl	8013e2c <iprintf>
 8010110:	f06f 0305 	mvn.w	r3, #5
 8010114:	e0b3      	b.n	801027e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010116:	4a60      	ldr	r2, [pc, #384]	@ (8010298 <dhcp_parse_reply+0x594>)
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	4413      	add	r3, r2
 801011c:	2201      	movs	r2, #1
 801011e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	4618      	mov	r0, r3
 8010124:	f7f5 ff18 	bl	8005f58 <lwip_htonl>
 8010128:	4602      	mov	r2, r0
 801012a:	495d      	ldr	r1, [pc, #372]	@ (80102a0 <dhcp_parse_reply+0x59c>)
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010132:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010136:	3b04      	subs	r3, #4
 8010138:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801013c:	8bfb      	ldrh	r3, [r7, #30]
 801013e:	3304      	adds	r3, #4
 8010140:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010142:	8a7a      	ldrh	r2, [r7, #18]
 8010144:	8bfb      	ldrh	r3, [r7, #30]
 8010146:	429a      	cmp	r2, r3
 8010148:	d202      	bcs.n	8010150 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801014a:	f06f 0301 	mvn.w	r3, #1
 801014e:	e096      	b.n	801027e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010150:	8a7b      	ldrh	r3, [r7, #18]
 8010152:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	3301      	adds	r3, #1
 8010158:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801015a:	e79e      	b.n	801009a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801015c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010160:	2b04      	cmp	r3, #4
 8010162:	d106      	bne.n	8010172 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	4618      	mov	r0, r3
 8010168:	f7f5 fef6 	bl	8005f58 <lwip_htonl>
 801016c:	4603      	mov	r3, r0
 801016e:	60bb      	str	r3, [r7, #8]
 8010170:	e011      	b.n	8010196 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010176:	2b01      	cmp	r3, #1
 8010178:	d009      	beq.n	801018e <dhcp_parse_reply+0x48a>
 801017a:	4b43      	ldr	r3, [pc, #268]	@ (8010288 <dhcp_parse_reply+0x584>)
 801017c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8010180:	4948      	ldr	r1, [pc, #288]	@ (80102a4 <dhcp_parse_reply+0x5a0>)
 8010182:	4843      	ldr	r0, [pc, #268]	@ (8010290 <dhcp_parse_reply+0x58c>)
 8010184:	f003 fe52 	bl	8013e2c <iprintf>
 8010188:	f06f 0305 	mvn.w	r3, #5
 801018c:	e077      	b.n	801027e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801018e:	f107 0308 	add.w	r3, r7, #8
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010196:	4a40      	ldr	r2, [pc, #256]	@ (8010298 <dhcp_parse_reply+0x594>)
 8010198:	6a3b      	ldr	r3, [r7, #32]
 801019a:	4413      	add	r3, r2
 801019c:	2201      	movs	r2, #1
 801019e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	493f      	ldr	r1, [pc, #252]	@ (80102a0 <dhcp_parse_reply+0x59c>)
 80101a4:	6a3b      	ldr	r3, [r7, #32]
 80101a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80101aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ac:	895b      	ldrh	r3, [r3, #10]
 80101ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d324      	bcc.n	80101fe <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80101b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b6:	895b      	ldrh	r3, [r3, #10]
 80101b8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101ba:	1ad3      	subs	r3, r2, r3
 80101bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80101be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c0:	895b      	ldrh	r3, [r3, #10]
 80101c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80101c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80101ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d213      	bcs.n	80101f8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80101d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80101d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d109      	bne.n	80101f0 <dhcp_parse_reply+0x4ec>
 80101dc:	4b2a      	ldr	r3, [pc, #168]	@ (8010288 <dhcp_parse_reply+0x584>)
 80101de:	f240 629d 	movw	r2, #1693	@ 0x69d
 80101e2:	4931      	ldr	r1, [pc, #196]	@ (80102a8 <dhcp_parse_reply+0x5a4>)
 80101e4:	482a      	ldr	r0, [pc, #168]	@ (8010290 <dhcp_parse_reply+0x58c>)
 80101e6:	f003 fe21 	bl	8013e2c <iprintf>
 80101ea:	f06f 0305 	mvn.w	r3, #5
 80101ee:	e046      	b.n	801027e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80101f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101f6:	e002      	b.n	80101fe <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80101f8:	f06f 0301 	mvn.w	r3, #1
 80101fc:	e03f      	b.n	801027e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80101fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00a      	beq.n	801021a <dhcp_parse_reply+0x516>
 8010204:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010206:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8010208:	429a      	cmp	r2, r3
 801020a:	d206      	bcs.n	801021a <dhcp_parse_reply+0x516>
 801020c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801020e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010210:	4413      	add	r3, r2
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	2bff      	cmp	r3, #255	@ 0xff
 8010216:	f47f adb8 	bne.w	800fd8a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801021a:	4b1f      	ldr	r3, [pc, #124]	@ (8010298 <dhcp_parse_reply+0x594>)
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d018      	beq.n	8010254 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010222:	4b1f      	ldr	r3, [pc, #124]	@ (80102a0 <dhcp_parse_reply+0x59c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010228:	4b1b      	ldr	r3, [pc, #108]	@ (8010298 <dhcp_parse_reply+0x594>)
 801022a:	2200      	movs	r2, #0
 801022c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b01      	cmp	r3, #1
 8010232:	d102      	bne.n	801023a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010234:	2301      	movs	r3, #1
 8010236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010238:	e00c      	b.n	8010254 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b02      	cmp	r3, #2
 801023e:	d102      	bne.n	8010246 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010240:	2301      	movs	r3, #1
 8010242:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010244:	e006      	b.n	8010254 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b03      	cmp	r3, #3
 801024a:	d103      	bne.n	8010254 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801024c:	2301      	movs	r3, #1
 801024e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8010250:	2301      	movs	r3, #1
 8010252:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	2b00      	cmp	r3, #0
 8010258:	d006      	beq.n	8010268 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801025a:	2300      	movs	r3, #0
 801025c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801025e:	236c      	movs	r3, #108	@ 0x6c
 8010260:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010262:	23ec      	movs	r3, #236	@ 0xec
 8010264:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010266:	e56a      	b.n	800fd3e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8010272:	232c      	movs	r3, #44	@ 0x2c
 8010274:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010276:	236c      	movs	r3, #108	@ 0x6c
 8010278:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801027a:	e560      	b.n	800fd3e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3740      	adds	r7, #64	@ 0x40
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	0801a020 	.word	0x0801a020
 801028c:	0801a2a8 	.word	0x0801a2a8
 8010290:	0801a080 	.word	0x0801a080
 8010294:	0801a2ec 	.word	0x0801a2ec
 8010298:	20008054 	.word	0x20008054
 801029c:	0801a300 	.word	0x0801a300
 80102a0:	20008034 	.word	0x20008034
 80102a4:	0801a318 	.word	0x0801a318
 80102a8:	0801a32c 	.word	0x0801a32c

080102ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08a      	sub	sp, #40	@ 0x28
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80102ba:	4b60      	ldr	r3, [pc, #384]	@ (801043c <dhcp_recv+0x190>)
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f000 809d 	beq.w	801040e <dhcp_recv+0x162>
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	791b      	ldrb	r3, [r3, #4]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 8098 	beq.w	801040e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	895b      	ldrh	r3, [r3, #10]
 80102e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80102e4:	f240 8095 	bls.w	8010412 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	f040 8092 	bne.w	8010416 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80102f2:	2300      	movs	r3, #0
 80102f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102f8:	e012      	b.n	8010320 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80102fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102fe:	6a3a      	ldr	r2, [r7, #32]
 8010300:	4413      	add	r3, r2
 8010302:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8010306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801030a:	69b9      	ldr	r1, [r7, #24]
 801030c:	440b      	add	r3, r1
 801030e:	7f1b      	ldrb	r3, [r3, #28]
 8010310:	429a      	cmp	r2, r3
 8010312:	f040 8082 	bne.w	801041a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010316:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801031a:	3301      	adds	r3, #1
 801031c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010320:	6a3b      	ldr	r3, [r7, #32]
 8010322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010326:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801032a:	429a      	cmp	r2, r3
 801032c:	d203      	bcs.n	8010336 <dhcp_recv+0x8a>
 801032e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010332:	2b05      	cmp	r3, #5
 8010334:	d9e1      	bls.n	80102fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	4618      	mov	r0, r3
 801033c:	f7f5 fe0c 	bl	8005f58 <lwip_htonl>
 8010340:	4602      	mov	r2, r0
 8010342:	69fb      	ldr	r3, [r7, #28]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	429a      	cmp	r2, r3
 8010348:	d169      	bne.n	801041e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801034a:	69f9      	ldr	r1, [r7, #28]
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff fcd9 	bl	800fd04 <dhcp_parse_reply>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d164      	bne.n	8010422 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010358:	4b39      	ldr	r3, [pc, #228]	@ (8010440 <dhcp_recv+0x194>)
 801035a:	785b      	ldrb	r3, [r3, #1]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d062      	beq.n	8010426 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010366:	4b37      	ldr	r3, [pc, #220]	@ (8010444 <dhcp_recv+0x198>)
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801036c:	7cfb      	ldrb	r3, [r7, #19]
 801036e:	2b05      	cmp	r3, #5
 8010370:	d12a      	bne.n	80103c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	795b      	ldrb	r3, [r3, #5]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d112      	bne.n	80103a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801037a:	6979      	ldr	r1, [r7, #20]
 801037c:	6a38      	ldr	r0, [r7, #32]
 801037e:	f7fe fe1d 	bl	800efbc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010382:	6a3b      	ldr	r3, [r7, #32]
 8010384:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010388:	f003 0308 	and.w	r3, r3, #8
 801038c:	2b00      	cmp	r3, #0
 801038e:	d003      	beq.n	8010398 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010390:	6a38      	ldr	r0, [r7, #32]
 8010392:	f7fe fb8b 	bl	800eaac <dhcp_check>
 8010396:	e049      	b.n	801042c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010398:	6a38      	ldr	r0, [r7, #32]
 801039a:	f7ff f86d 	bl	800f478 <dhcp_bind>
 801039e:	e045      	b.n	801042c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	795b      	ldrb	r3, [r3, #5]
 80103a4:	2b03      	cmp	r3, #3
 80103a6:	d007      	beq.n	80103b8 <dhcp_recv+0x10c>
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	795b      	ldrb	r3, [r3, #5]
 80103ac:	2b04      	cmp	r3, #4
 80103ae:	d003      	beq.n	80103b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80103b4:	2b05      	cmp	r3, #5
 80103b6:	d139      	bne.n	801042c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80103b8:	6979      	ldr	r1, [r7, #20]
 80103ba:	6a38      	ldr	r0, [r7, #32]
 80103bc:	f7fe fdfe 	bl	800efbc <dhcp_handle_ack>
      dhcp_bind(netif);
 80103c0:	6a38      	ldr	r0, [r7, #32]
 80103c2:	f7ff f859 	bl	800f478 <dhcp_bind>
 80103c6:	e031      	b.n	801042c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80103c8:	7cfb      	ldrb	r3, [r7, #19]
 80103ca:	2b06      	cmp	r3, #6
 80103cc:	d113      	bne.n	80103f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d00b      	beq.n	80103ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	795b      	ldrb	r3, [r3, #5]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d007      	beq.n	80103ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80103e2:	2b04      	cmp	r3, #4
 80103e4:	d003      	beq.n	80103ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	795b      	ldrb	r3, [r3, #5]
 80103ea:	2b05      	cmp	r3, #5
 80103ec:	d103      	bne.n	80103f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80103ee:	6a38      	ldr	r0, [r7, #32]
 80103f0:	f7fe fb42 	bl	800ea78 <dhcp_handle_nak>
 80103f4:	e01a      	b.n	801042c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80103f6:	7cfb      	ldrb	r3, [r7, #19]
 80103f8:	2b02      	cmp	r3, #2
 80103fa:	d116      	bne.n	801042a <dhcp_recv+0x17e>
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	795b      	ldrb	r3, [r3, #5]
 8010400:	2b06      	cmp	r3, #6
 8010402:	d112      	bne.n	801042a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010404:	6979      	ldr	r1, [r7, #20]
 8010406:	6a38      	ldr	r0, [r7, #32]
 8010408:	f7fe fb84 	bl	800eb14 <dhcp_handle_offer>
 801040c:	e00e      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801040e:	bf00      	nop
 8010410:	e00c      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010412:	bf00      	nop
 8010414:	e00a      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010416:	bf00      	nop
 8010418:	e008      	b.n	801042c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801041a:	bf00      	nop
 801041c:	e006      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801041e:	bf00      	nop
 8010420:	e004      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010422:	bf00      	nop
 8010424:	e002      	b.n	801042c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010426:	bf00      	nop
 8010428:	e000      	b.n	801042c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801042a:	bf00      	nop
  pbuf_free(p);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f7f7 f90b 	bl	8007648 <pbuf_free>
}
 8010432:	bf00      	nop
 8010434:	3728      	adds	r7, #40	@ 0x28
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	20004f98 	.word	0x20004f98
 8010440:	20008054 	.word	0x20008054
 8010444:	20008034 	.word	0x20008034

08010448 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	4613      	mov	r3, r2
 8010456:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d108      	bne.n	8010470 <dhcp_create_msg+0x28>
 801045e:	4b5f      	ldr	r3, [pc, #380]	@ (80105dc <dhcp_create_msg+0x194>)
 8010460:	f240 7269 	movw	r2, #1897	@ 0x769
 8010464:	495e      	ldr	r1, [pc, #376]	@ (80105e0 <dhcp_create_msg+0x198>)
 8010466:	485f      	ldr	r0, [pc, #380]	@ (80105e4 <dhcp_create_msg+0x19c>)
 8010468:	f003 fce0 	bl	8013e2c <iprintf>
 801046c:	2300      	movs	r3, #0
 801046e:	e0b1      	b.n	80105d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d108      	bne.n	8010488 <dhcp_create_msg+0x40>
 8010476:	4b59      	ldr	r3, [pc, #356]	@ (80105dc <dhcp_create_msg+0x194>)
 8010478:	f240 726a 	movw	r2, #1898	@ 0x76a
 801047c:	495a      	ldr	r1, [pc, #360]	@ (80105e8 <dhcp_create_msg+0x1a0>)
 801047e:	4859      	ldr	r0, [pc, #356]	@ (80105e4 <dhcp_create_msg+0x19c>)
 8010480:	f003 fcd4 	bl	8013e2c <iprintf>
 8010484:	2300      	movs	r3, #0
 8010486:	e0a5      	b.n	80105d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010488:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801048c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8010490:	2036      	movs	r0, #54	@ 0x36
 8010492:	f7f6 fdf5 	bl	8007080 <pbuf_alloc>
 8010496:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d101      	bne.n	80104a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	e098      	b.n	80105d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	895b      	ldrh	r3, [r3, #10]
 80104a6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80104aa:	d206      	bcs.n	80104ba <dhcp_create_msg+0x72>
 80104ac:	4b4b      	ldr	r3, [pc, #300]	@ (80105dc <dhcp_create_msg+0x194>)
 80104ae:	f240 7271 	movw	r2, #1905	@ 0x771
 80104b2:	494e      	ldr	r1, [pc, #312]	@ (80105ec <dhcp_create_msg+0x1a4>)
 80104b4:	484b      	ldr	r0, [pc, #300]	@ (80105e4 <dhcp_create_msg+0x19c>)
 80104b6:	f003 fcb9 	bl	8013e2c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	2b03      	cmp	r3, #3
 80104be:	d103      	bne.n	80104c8 <dhcp_create_msg+0x80>
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	795b      	ldrb	r3, [r3, #5]
 80104c4:	2b03      	cmp	r3, #3
 80104c6:	d10d      	bne.n	80104e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	799b      	ldrb	r3, [r3, #6]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d105      	bne.n	80104dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80104d0:	f002 fcf6 	bl	8012ec0 <rand>
 80104d4:	4603      	mov	r3, r0
 80104d6:	461a      	mov	r2, r3
 80104d8:	4b45      	ldr	r3, [pc, #276]	@ (80105f0 <dhcp_create_msg+0x1a8>)
 80104da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80104dc:	4b44      	ldr	r3, [pc, #272]	@ (80105f0 <dhcp_create_msg+0x1a8>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80104ea:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80104ee:	2100      	movs	r1, #0
 80104f0:	6978      	ldr	r0, [r7, #20]
 80104f2:	f003 fd3c 	bl	8013f6e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	2201      	movs	r2, #1
 80104fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	2201      	movs	r2, #1
 8010500:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4618      	mov	r0, r3
 8010512:	f7f5 fd21 	bl	8005f58 <lwip_htonl>
 8010516:	4602      	mov	r2, r0
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	2b08      	cmp	r3, #8
 8010520:	d010      	beq.n	8010544 <dhcp_create_msg+0xfc>
 8010522:	79fb      	ldrb	r3, [r7, #7]
 8010524:	2b04      	cmp	r3, #4
 8010526:	d00d      	beq.n	8010544 <dhcp_create_msg+0xfc>
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	2b07      	cmp	r3, #7
 801052c:	d00a      	beq.n	8010544 <dhcp_create_msg+0xfc>
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	2b03      	cmp	r3, #3
 8010532:	d10c      	bne.n	801054e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010538:	2b05      	cmp	r3, #5
 801053a:	d003      	beq.n	8010544 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	795b      	ldrb	r3, [r3, #5]
 8010540:	2b04      	cmp	r3, #4
 8010542:	d104      	bne.n	801054e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	3304      	adds	r3, #4
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801054e:	2300      	movs	r3, #0
 8010550:	83fb      	strh	r3, [r7, #30]
 8010552:	e00c      	b.n	801056e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010554:	8bfa      	ldrh	r2, [r7, #30]
 8010556:	8bfb      	ldrh	r3, [r7, #30]
 8010558:	68f9      	ldr	r1, [r7, #12]
 801055a:	440a      	add	r2, r1
 801055c:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	4413      	add	r3, r2
 8010564:	460a      	mov	r2, r1
 8010566:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010568:	8bfb      	ldrh	r3, [r7, #30]
 801056a:	3301      	adds	r3, #1
 801056c:	83fb      	strh	r3, [r7, #30]
 801056e:	8bfb      	ldrh	r3, [r7, #30]
 8010570:	2b05      	cmp	r3, #5
 8010572:	d9ef      	bls.n	8010554 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2200      	movs	r2, #0
 8010578:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801057c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8010580:	2200      	movs	r2, #0
 8010582:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8010586:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801058a:	2200      	movs	r2, #0
 801058c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8010590:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8010594:	2200      	movs	r2, #0
 8010596:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801059a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105a4:	2301      	movs	r3, #1
 80105a6:	2235      	movs	r2, #53	@ 0x35
 80105a8:	2000      	movs	r0, #0
 80105aa:	f7ff fadb 	bl	800fb64 <dhcp_option>
 80105ae:	4603      	mov	r3, r0
 80105b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80105b8:	79fa      	ldrb	r2, [r7, #7]
 80105ba:	8a7b      	ldrh	r3, [r7, #18]
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff fb05 	bl	800fbcc <dhcp_option_byte>
 80105c2:	4603      	mov	r3, r0
 80105c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	8a7a      	ldrh	r2, [r7, #18]
 80105d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80105d2:	69bb      	ldr	r3, [r7, #24]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	0801a020 	.word	0x0801a020
 80105e0:	0801a340 	.word	0x0801a340
 80105e4:	0801a080 	.word	0x0801a080
 80105e8:	0801a360 	.word	0x0801a360
 80105ec:	0801a380 	.word	0x0801a380
 80105f0:	20008064 	.word	0x20008064

080105f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010602:	89fb      	ldrh	r3, [r7, #14]
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	81fa      	strh	r2, [r7, #14]
 8010608:	461a      	mov	r2, r3
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	4413      	add	r3, r2
 801060e:	22ff      	movs	r2, #255	@ 0xff
 8010610:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010612:	e007      	b.n	8010624 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010614:	89fb      	ldrh	r3, [r7, #14]
 8010616:	1c5a      	adds	r2, r3, #1
 8010618:	81fa      	strh	r2, [r7, #14]
 801061a:	461a      	mov	r2, r3
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	4413      	add	r3, r2
 8010620:	2200      	movs	r2, #0
 8010622:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010624:	89fb      	ldrh	r3, [r7, #14]
 8010626:	2b43      	cmp	r3, #67	@ 0x43
 8010628:	d904      	bls.n	8010634 <dhcp_option_trailer+0x40>
 801062a:	89fb      	ldrh	r3, [r7, #14]
 801062c:	f003 0303 	and.w	r3, r3, #3
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <dhcp_option_trailer+0x46>
 8010634:	89fb      	ldrh	r3, [r7, #14]
 8010636:	2b43      	cmp	r3, #67	@ 0x43
 8010638:	d9ec      	bls.n	8010614 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801063a:	89fb      	ldrh	r3, [r7, #14]
 801063c:	33f0      	adds	r3, #240	@ 0xf0
 801063e:	b29b      	uxth	r3, r3
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7f6 fe7a 	bl	800733c <pbuf_realloc>
}
 8010648:	bf00      	nop
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d017      	beq.n	801068e <dhcp_supplied_address+0x3e>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	d013      	beq.n	801068e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801066a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	795b      	ldrb	r3, [r3, #5]
 8010670:	2b0a      	cmp	r3, #10
 8010672:	d007      	beq.n	8010684 <dhcp_supplied_address+0x34>
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	795b      	ldrb	r3, [r3, #5]
 8010678:	2b05      	cmp	r3, #5
 801067a:	d003      	beq.n	8010684 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010680:	2b04      	cmp	r3, #4
 8010682:	d101      	bne.n	8010688 <dhcp_supplied_address+0x38>
 8010684:	2301      	movs	r3, #1
 8010686:	e000      	b.n	801068a <dhcp_supplied_address+0x3a>
 8010688:	2300      	movs	r3, #0
 801068a:	b2db      	uxtb	r3, r3
 801068c:	e000      	b.n	8010690 <dhcp_supplied_address+0x40>
  }
  return 0;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3714      	adds	r7, #20
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80106a4:	4915      	ldr	r1, [pc, #84]	@ (80106fc <etharp_free_entry+0x60>)
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	4613      	mov	r3, r2
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	4413      	add	r3, r2
 80106ae:	00db      	lsls	r3, r3, #3
 80106b0:	440b      	add	r3, r1
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d013      	beq.n	80106e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80106b8:	4910      	ldr	r1, [pc, #64]	@ (80106fc <etharp_free_entry+0x60>)
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	4613      	mov	r3, r2
 80106be:	005b      	lsls	r3, r3, #1
 80106c0:	4413      	add	r3, r2
 80106c2:	00db      	lsls	r3, r3, #3
 80106c4:	440b      	add	r3, r1
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7f6 ffbd 	bl	8007648 <pbuf_free>
    arp_table[i].q = NULL;
 80106ce:	490b      	ldr	r1, [pc, #44]	@ (80106fc <etharp_free_entry+0x60>)
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	4613      	mov	r3, r2
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4413      	add	r3, r2
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	440b      	add	r3, r1
 80106dc:	2200      	movs	r2, #0
 80106de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80106e0:	4906      	ldr	r1, [pc, #24]	@ (80106fc <etharp_free_entry+0x60>)
 80106e2:	687a      	ldr	r2, [r7, #4]
 80106e4:	4613      	mov	r3, r2
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	4413      	add	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	440b      	add	r3, r1
 80106ee:	3314      	adds	r3, #20
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80106f4:	bf00      	nop
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	20008068 	.word	0x20008068

08010700 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010706:	2300      	movs	r3, #0
 8010708:	607b      	str	r3, [r7, #4]
 801070a:	e096      	b.n	801083a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801070c:	494f      	ldr	r1, [pc, #316]	@ (801084c <etharp_tmr+0x14c>)
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	4613      	mov	r3, r2
 8010712:	005b      	lsls	r3, r3, #1
 8010714:	4413      	add	r3, r2
 8010716:	00db      	lsls	r3, r3, #3
 8010718:	440b      	add	r3, r1
 801071a:	3314      	adds	r3, #20
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010720:	78fb      	ldrb	r3, [r7, #3]
 8010722:	2b00      	cmp	r3, #0
 8010724:	f000 8086 	beq.w	8010834 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010728:	4948      	ldr	r1, [pc, #288]	@ (801084c <etharp_tmr+0x14c>)
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	4613      	mov	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	440b      	add	r3, r1
 8010736:	3312      	adds	r3, #18
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	3301      	adds	r3, #1
 801073c:	b298      	uxth	r0, r3
 801073e:	4943      	ldr	r1, [pc, #268]	@ (801084c <etharp_tmr+0x14c>)
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	4613      	mov	r3, r2
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	4413      	add	r3, r2
 8010748:	00db      	lsls	r3, r3, #3
 801074a:	440b      	add	r3, r1
 801074c:	3312      	adds	r3, #18
 801074e:	4602      	mov	r2, r0
 8010750:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010752:	493e      	ldr	r1, [pc, #248]	@ (801084c <etharp_tmr+0x14c>)
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	4613      	mov	r3, r2
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	4413      	add	r3, r2
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	440b      	add	r3, r1
 8010760:	3312      	adds	r3, #18
 8010762:	881b      	ldrh	r3, [r3, #0]
 8010764:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010768:	d215      	bcs.n	8010796 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801076a:	4938      	ldr	r1, [pc, #224]	@ (801084c <etharp_tmr+0x14c>)
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	4613      	mov	r3, r2
 8010770:	005b      	lsls	r3, r3, #1
 8010772:	4413      	add	r3, r2
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	440b      	add	r3, r1
 8010778:	3314      	adds	r3, #20
 801077a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801077c:	2b01      	cmp	r3, #1
 801077e:	d10e      	bne.n	801079e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010780:	4932      	ldr	r1, [pc, #200]	@ (801084c <etharp_tmr+0x14c>)
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	4613      	mov	r3, r2
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	4413      	add	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	440b      	add	r3, r1
 801078e:	3312      	adds	r3, #18
 8010790:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010792:	2b04      	cmp	r3, #4
 8010794:	d903      	bls.n	801079e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff ff80 	bl	801069c <etharp_free_entry>
 801079c:	e04a      	b.n	8010834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801079e:	492b      	ldr	r1, [pc, #172]	@ (801084c <etharp_tmr+0x14c>)
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	4613      	mov	r3, r2
 80107a4:	005b      	lsls	r3, r3, #1
 80107a6:	4413      	add	r3, r2
 80107a8:	00db      	lsls	r3, r3, #3
 80107aa:	440b      	add	r3, r1
 80107ac:	3314      	adds	r3, #20
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b03      	cmp	r3, #3
 80107b2:	d10a      	bne.n	80107ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80107b4:	4925      	ldr	r1, [pc, #148]	@ (801084c <etharp_tmr+0x14c>)
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	4613      	mov	r3, r2
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	4413      	add	r3, r2
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	440b      	add	r3, r1
 80107c2:	3314      	adds	r3, #20
 80107c4:	2204      	movs	r2, #4
 80107c6:	701a      	strb	r2, [r3, #0]
 80107c8:	e034      	b.n	8010834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80107ca:	4920      	ldr	r1, [pc, #128]	@ (801084c <etharp_tmr+0x14c>)
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	4613      	mov	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	4413      	add	r3, r2
 80107d4:	00db      	lsls	r3, r3, #3
 80107d6:	440b      	add	r3, r1
 80107d8:	3314      	adds	r3, #20
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	2b04      	cmp	r3, #4
 80107de:	d10a      	bne.n	80107f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80107e0:	491a      	ldr	r1, [pc, #104]	@ (801084c <etharp_tmr+0x14c>)
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	4613      	mov	r3, r2
 80107e6:	005b      	lsls	r3, r3, #1
 80107e8:	4413      	add	r3, r2
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	440b      	add	r3, r1
 80107ee:	3314      	adds	r3, #20
 80107f0:	2202      	movs	r2, #2
 80107f2:	701a      	strb	r2, [r3, #0]
 80107f4:	e01e      	b.n	8010834 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80107f6:	4915      	ldr	r1, [pc, #84]	@ (801084c <etharp_tmr+0x14c>)
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	4613      	mov	r3, r2
 80107fc:	005b      	lsls	r3, r3, #1
 80107fe:	4413      	add	r3, r2
 8010800:	00db      	lsls	r3, r3, #3
 8010802:	440b      	add	r3, r1
 8010804:	3314      	adds	r3, #20
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d113      	bne.n	8010834 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801080c:	490f      	ldr	r1, [pc, #60]	@ (801084c <etharp_tmr+0x14c>)
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	4613      	mov	r3, r2
 8010812:	005b      	lsls	r3, r3, #1
 8010814:	4413      	add	r3, r2
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	440b      	add	r3, r1
 801081a:	3308      	adds	r3, #8
 801081c:	6818      	ldr	r0, [r3, #0]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	4613      	mov	r3, r2
 8010822:	005b      	lsls	r3, r3, #1
 8010824:	4413      	add	r3, r2
 8010826:	00db      	lsls	r3, r3, #3
 8010828:	4a08      	ldr	r2, [pc, #32]	@ (801084c <etharp_tmr+0x14c>)
 801082a:	4413      	add	r3, r2
 801082c:	3304      	adds	r3, #4
 801082e:	4619      	mov	r1, r3
 8010830:	f000 fe72 	bl	8011518 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	3301      	adds	r3, #1
 8010838:	607b      	str	r3, [r7, #4]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2b09      	cmp	r3, #9
 801083e:	f77f af65 	ble.w	801070c <etharp_tmr+0xc>
      }
    }
  }
}
 8010842:	bf00      	nop
 8010844:	bf00      	nop
 8010846:	3708      	adds	r7, #8
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	20008068 	.word	0x20008068

08010850 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b08a      	sub	sp, #40	@ 0x28
 8010854:	af00      	add	r7, sp, #0
 8010856:	60f8      	str	r0, [r7, #12]
 8010858:	460b      	mov	r3, r1
 801085a:	607a      	str	r2, [r7, #4]
 801085c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801085e:	230a      	movs	r3, #10
 8010860:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010862:	230a      	movs	r3, #10
 8010864:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010866:	230a      	movs	r3, #10
 8010868:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801086a:	2300      	movs	r3, #0
 801086c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801086e:	230a      	movs	r3, #10
 8010870:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	83bb      	strh	r3, [r7, #28]
 8010876:	2300      	movs	r3, #0
 8010878:	837b      	strh	r3, [r7, #26]
 801087a:	2300      	movs	r3, #0
 801087c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801087e:	2300      	movs	r3, #0
 8010880:	843b      	strh	r3, [r7, #32]
 8010882:	e0ae      	b.n	80109e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010884:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010888:	49a6      	ldr	r1, [pc, #664]	@ (8010b24 <etharp_find_entry+0x2d4>)
 801088a:	4613      	mov	r3, r2
 801088c:	005b      	lsls	r3, r3, #1
 801088e:	4413      	add	r3, r2
 8010890:	00db      	lsls	r3, r3, #3
 8010892:	440b      	add	r3, r1
 8010894:	3314      	adds	r3, #20
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801089a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801089e:	2b0a      	cmp	r3, #10
 80108a0:	d105      	bne.n	80108ae <etharp_find_entry+0x5e>
 80108a2:	7dfb      	ldrb	r3, [r7, #23]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80108a8:	8c3b      	ldrh	r3, [r7, #32]
 80108aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80108ac:	e095      	b.n	80109da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80108ae:	7dfb      	ldrb	r3, [r7, #23]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 8092 	beq.w	80109da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80108b6:	7dfb      	ldrb	r3, [r7, #23]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d009      	beq.n	80108d0 <etharp_find_entry+0x80>
 80108bc:	7dfb      	ldrb	r3, [r7, #23]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d806      	bhi.n	80108d0 <etharp_find_entry+0x80>
 80108c2:	4b99      	ldr	r3, [pc, #612]	@ (8010b28 <etharp_find_entry+0x2d8>)
 80108c4:	f240 1223 	movw	r2, #291	@ 0x123
 80108c8:	4998      	ldr	r1, [pc, #608]	@ (8010b2c <etharp_find_entry+0x2dc>)
 80108ca:	4899      	ldr	r0, [pc, #612]	@ (8010b30 <etharp_find_entry+0x2e0>)
 80108cc:	f003 faae 	bl	8013e2c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d020      	beq.n	8010918 <etharp_find_entry+0xc8>
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6819      	ldr	r1, [r3, #0]
 80108da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108de:	4891      	ldr	r0, [pc, #580]	@ (8010b24 <etharp_find_entry+0x2d4>)
 80108e0:	4613      	mov	r3, r2
 80108e2:	005b      	lsls	r3, r3, #1
 80108e4:	4413      	add	r3, r2
 80108e6:	00db      	lsls	r3, r3, #3
 80108e8:	4403      	add	r3, r0
 80108ea:	3304      	adds	r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4299      	cmp	r1, r3
 80108f0:	d112      	bne.n	8010918 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00c      	beq.n	8010912 <etharp_find_entry+0xc2>
 80108f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108fc:	4989      	ldr	r1, [pc, #548]	@ (8010b24 <etharp_find_entry+0x2d4>)
 80108fe:	4613      	mov	r3, r2
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	4413      	add	r3, r2
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	440b      	add	r3, r1
 8010908:	3308      	adds	r3, #8
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	429a      	cmp	r2, r3
 8010910:	d102      	bne.n	8010918 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010916:	e100      	b.n	8010b1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010918:	7dfb      	ldrb	r3, [r7, #23]
 801091a:	2b01      	cmp	r3, #1
 801091c:	d140      	bne.n	80109a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801091e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010922:	4980      	ldr	r1, [pc, #512]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010924:	4613      	mov	r3, r2
 8010926:	005b      	lsls	r3, r3, #1
 8010928:	4413      	add	r3, r2
 801092a:	00db      	lsls	r3, r3, #3
 801092c:	440b      	add	r3, r1
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01a      	beq.n	801096a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010938:	497a      	ldr	r1, [pc, #488]	@ (8010b24 <etharp_find_entry+0x2d4>)
 801093a:	4613      	mov	r3, r2
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	4413      	add	r3, r2
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	440b      	add	r3, r1
 8010944:	3312      	adds	r3, #18
 8010946:	881b      	ldrh	r3, [r3, #0]
 8010948:	8bba      	ldrh	r2, [r7, #28]
 801094a:	429a      	cmp	r2, r3
 801094c:	d845      	bhi.n	80109da <etharp_find_entry+0x18a>
            old_queue = i;
 801094e:	8c3b      	ldrh	r3, [r7, #32]
 8010950:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010956:	4973      	ldr	r1, [pc, #460]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010958:	4613      	mov	r3, r2
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4413      	add	r3, r2
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	440b      	add	r3, r1
 8010962:	3312      	adds	r3, #18
 8010964:	881b      	ldrh	r3, [r3, #0]
 8010966:	83bb      	strh	r3, [r7, #28]
 8010968:	e037      	b.n	80109da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801096a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801096e:	496d      	ldr	r1, [pc, #436]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010970:	4613      	mov	r3, r2
 8010972:	005b      	lsls	r3, r3, #1
 8010974:	4413      	add	r3, r2
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	440b      	add	r3, r1
 801097a:	3312      	adds	r3, #18
 801097c:	881b      	ldrh	r3, [r3, #0]
 801097e:	8b7a      	ldrh	r2, [r7, #26]
 8010980:	429a      	cmp	r2, r3
 8010982:	d82a      	bhi.n	80109da <etharp_find_entry+0x18a>
            old_pending = i;
 8010984:	8c3b      	ldrh	r3, [r7, #32]
 8010986:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801098c:	4965      	ldr	r1, [pc, #404]	@ (8010b24 <etharp_find_entry+0x2d4>)
 801098e:	4613      	mov	r3, r2
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	4413      	add	r3, r2
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	440b      	add	r3, r1
 8010998:	3312      	adds	r3, #18
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	837b      	strh	r3, [r7, #26]
 801099e:	e01c      	b.n	80109da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80109a0:	7dfb      	ldrb	r3, [r7, #23]
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d919      	bls.n	80109da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80109a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109aa:	495e      	ldr	r1, [pc, #376]	@ (8010b24 <etharp_find_entry+0x2d4>)
 80109ac:	4613      	mov	r3, r2
 80109ae:	005b      	lsls	r3, r3, #1
 80109b0:	4413      	add	r3, r2
 80109b2:	00db      	lsls	r3, r3, #3
 80109b4:	440b      	add	r3, r1
 80109b6:	3312      	adds	r3, #18
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	8b3a      	ldrh	r2, [r7, #24]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d80c      	bhi.n	80109da <etharp_find_entry+0x18a>
            old_stable = i;
 80109c0:	8c3b      	ldrh	r3, [r7, #32]
 80109c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80109c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109c8:	4956      	ldr	r1, [pc, #344]	@ (8010b24 <etharp_find_entry+0x2d4>)
 80109ca:	4613      	mov	r3, r2
 80109cc:	005b      	lsls	r3, r3, #1
 80109ce:	4413      	add	r3, r2
 80109d0:	00db      	lsls	r3, r3, #3
 80109d2:	440b      	add	r3, r1
 80109d4:	3312      	adds	r3, #18
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109da:	8c3b      	ldrh	r3, [r7, #32]
 80109dc:	3301      	adds	r3, #1
 80109de:	b29b      	uxth	r3, r3
 80109e0:	843b      	strh	r3, [r7, #32]
 80109e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109e6:	2b09      	cmp	r3, #9
 80109e8:	f77f af4c 	ble.w	8010884 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80109ec:	7afb      	ldrb	r3, [r7, #11]
 80109ee:	f003 0302 	and.w	r3, r3, #2
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d108      	bne.n	8010a08 <etharp_find_entry+0x1b8>
 80109f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80109fa:	2b0a      	cmp	r3, #10
 80109fc:	d107      	bne.n	8010a0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80109fe:	7afb      	ldrb	r3, [r7, #11]
 8010a00:	f003 0301 	and.w	r3, r3, #1
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d102      	bne.n	8010a0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010a08:	f04f 33ff 	mov.w	r3, #4294967295
 8010a0c:	e085      	b.n	8010b1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010a0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010a12:	2b09      	cmp	r3, #9
 8010a14:	dc02      	bgt.n	8010a1c <etharp_find_entry+0x1cc>
    i = empty;
 8010a16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a18:	843b      	strh	r3, [r7, #32]
 8010a1a:	e039      	b.n	8010a90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010a1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010a20:	2b09      	cmp	r3, #9
 8010a22:	dc14      	bgt.n	8010a4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010a24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a2c:	493d      	ldr	r1, [pc, #244]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010a2e:	4613      	mov	r3, r2
 8010a30:	005b      	lsls	r3, r3, #1
 8010a32:	4413      	add	r3, r2
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	440b      	add	r3, r1
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d018      	beq.n	8010a70 <etharp_find_entry+0x220>
 8010a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8010b28 <etharp_find_entry+0x2d8>)
 8010a40:	f240 126d 	movw	r2, #365	@ 0x16d
 8010a44:	493b      	ldr	r1, [pc, #236]	@ (8010b34 <etharp_find_entry+0x2e4>)
 8010a46:	483a      	ldr	r0, [pc, #232]	@ (8010b30 <etharp_find_entry+0x2e0>)
 8010a48:	f003 f9f0 	bl	8013e2c <iprintf>
 8010a4c:	e010      	b.n	8010a70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010a4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010a52:	2b09      	cmp	r3, #9
 8010a54:	dc02      	bgt.n	8010a5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010a58:	843b      	strh	r3, [r7, #32]
 8010a5a:	e009      	b.n	8010a70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010a5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010a60:	2b09      	cmp	r3, #9
 8010a62:	dc02      	bgt.n	8010a6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010a64:	8bfb      	ldrh	r3, [r7, #30]
 8010a66:	843b      	strh	r3, [r7, #32]
 8010a68:	e002      	b.n	8010a70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6e:	e054      	b.n	8010b1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a74:	2b09      	cmp	r3, #9
 8010a76:	dd06      	ble.n	8010a86 <etharp_find_entry+0x236>
 8010a78:	4b2b      	ldr	r3, [pc, #172]	@ (8010b28 <etharp_find_entry+0x2d8>)
 8010a7a:	f240 127f 	movw	r2, #383	@ 0x17f
 8010a7e:	492e      	ldr	r1, [pc, #184]	@ (8010b38 <etharp_find_entry+0x2e8>)
 8010a80:	482b      	ldr	r0, [pc, #172]	@ (8010b30 <etharp_find_entry+0x2e0>)
 8010a82:	f003 f9d3 	bl	8013e2c <iprintf>
    etharp_free_entry(i);
 8010a86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff fe06 	bl	801069c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010a90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010a94:	2b09      	cmp	r3, #9
 8010a96:	dd06      	ble.n	8010aa6 <etharp_find_entry+0x256>
 8010a98:	4b23      	ldr	r3, [pc, #140]	@ (8010b28 <etharp_find_entry+0x2d8>)
 8010a9a:	f240 1283 	movw	r2, #387	@ 0x183
 8010a9e:	4926      	ldr	r1, [pc, #152]	@ (8010b38 <etharp_find_entry+0x2e8>)
 8010aa0:	4823      	ldr	r0, [pc, #140]	@ (8010b30 <etharp_find_entry+0x2e0>)
 8010aa2:	f003 f9c3 	bl	8013e2c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010aa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aaa:	491e      	ldr	r1, [pc, #120]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010aac:	4613      	mov	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	440b      	add	r3, r1
 8010ab6:	3314      	adds	r3, #20
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d006      	beq.n	8010acc <etharp_find_entry+0x27c>
 8010abe:	4b1a      	ldr	r3, [pc, #104]	@ (8010b28 <etharp_find_entry+0x2d8>)
 8010ac0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010ac4:	491d      	ldr	r1, [pc, #116]	@ (8010b3c <etharp_find_entry+0x2ec>)
 8010ac6:	481a      	ldr	r0, [pc, #104]	@ (8010b30 <etharp_find_entry+0x2e0>)
 8010ac8:	f003 f9b0 	bl	8013e2c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00b      	beq.n	8010aea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010ad2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6819      	ldr	r1, [r3, #0]
 8010ada:	4812      	ldr	r0, [pc, #72]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010adc:	4613      	mov	r3, r2
 8010ade:	005b      	lsls	r3, r3, #1
 8010ae0:	4413      	add	r3, r2
 8010ae2:	00db      	lsls	r3, r3, #3
 8010ae4:	4403      	add	r3, r0
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010aea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010aee:	490d      	ldr	r1, [pc, #52]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3312      	adds	r3, #18
 8010afc:	2200      	movs	r2, #0
 8010afe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b04:	4907      	ldr	r1, [pc, #28]	@ (8010b24 <etharp_find_entry+0x2d4>)
 8010b06:	4613      	mov	r3, r2
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	440b      	add	r3, r1
 8010b10:	3308      	adds	r3, #8
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010b16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3728      	adds	r7, #40	@ 0x28
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	20008068 	.word	0x20008068
 8010b28:	0801a3c0 	.word	0x0801a3c0
 8010b2c:	0801a3f8 	.word	0x0801a3f8
 8010b30:	0801a438 	.word	0x0801a438
 8010b34:	0801a460 	.word	0x0801a460
 8010b38:	0801a478 	.word	0x0801a478
 8010b3c:	0801a48c 	.word	0x0801a48c

08010b40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af02      	add	r7, sp, #8
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010b54:	2b06      	cmp	r3, #6
 8010b56:	d006      	beq.n	8010b66 <etharp_update_arp_entry+0x26>
 8010b58:	4b48      	ldr	r3, [pc, #288]	@ (8010c7c <etharp_update_arp_entry+0x13c>)
 8010b5a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8010b5e:	4948      	ldr	r1, [pc, #288]	@ (8010c80 <etharp_update_arp_entry+0x140>)
 8010b60:	4848      	ldr	r0, [pc, #288]	@ (8010c84 <etharp_update_arp_entry+0x144>)
 8010b62:	f003 f963 	bl	8013e2c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d012      	beq.n	8010b92 <etharp_update_arp_entry+0x52>
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d00e      	beq.n	8010b92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68f9      	ldr	r1, [r7, #12]
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f001 f920 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8010b80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010b8e:	2be0      	cmp	r3, #224	@ 0xe0
 8010b90:	d102      	bne.n	8010b98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010b92:	f06f 030f 	mvn.w	r3, #15
 8010b96:	e06c      	b.n	8010c72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010b98:	78fb      	ldrb	r3, [r7, #3]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	68b8      	ldr	r0, [r7, #8]
 8010ba0:	f7ff fe56 	bl	8010850 <etharp_find_entry>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010ba8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	da02      	bge.n	8010bb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010bb0:	8afb      	ldrh	r3, [r7, #22]
 8010bb2:	b25b      	sxtb	r3, r3
 8010bb4:	e05d      	b.n	8010c72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010bb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bba:	4933      	ldr	r1, [pc, #204]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	440b      	add	r3, r1
 8010bc6:	3314      	adds	r3, #20
 8010bc8:	2202      	movs	r2, #2
 8010bca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010bd0:	492d      	ldr	r1, [pc, #180]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	440b      	add	r3, r1
 8010bdc:	3308      	adds	r3, #8
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010be2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010be6:	4613      	mov	r3, r2
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4413      	add	r3, r2
 8010bec:	00db      	lsls	r3, r3, #3
 8010bee:	3308      	adds	r3, #8
 8010bf0:	4a25      	ldr	r2, [pc, #148]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010bf2:	4413      	add	r3, r2
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	2206      	movs	r2, #6
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f003 fa49 	bl	8014092 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010c00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c04:	4920      	ldr	r1, [pc, #128]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3312      	adds	r3, #18
 8010c12:	2200      	movs	r2, #0
 8010c14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010c16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c1a:	491b      	ldr	r1, [pc, #108]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	440b      	add	r3, r1
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d021      	beq.n	8010c70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010c2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c30:	4915      	ldr	r1, [pc, #84]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010c32:	4613      	mov	r3, r2
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	4413      	add	r3, r2
 8010c38:	00db      	lsls	r3, r3, #3
 8010c3a:	440b      	add	r3, r1
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010c40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010c44:	4910      	ldr	r1, [pc, #64]	@ (8010c88 <etharp_update_arp_entry+0x148>)
 8010c46:	4613      	mov	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4413      	add	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	440b      	add	r3, r1
 8010c50:	2200      	movs	r2, #0
 8010c52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8010c5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6939      	ldr	r1, [r7, #16]
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f002 f8e3 	bl	8012e30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010c6a:	6938      	ldr	r0, [r7, #16]
 8010c6c:	f7f6 fcec 	bl	8007648 <pbuf_free>
  }
  return ERR_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3718      	adds	r7, #24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	0801a3c0 	.word	0x0801a3c0
 8010c80:	0801a4b8 	.word	0x0801a4b8
 8010c84:	0801a438 	.word	0x0801a438
 8010c88:	20008068 	.word	0x20008068

08010c8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c94:	2300      	movs	r3, #0
 8010c96:	60fb      	str	r3, [r7, #12]
 8010c98:	e01e      	b.n	8010cd8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010c9a:	4913      	ldr	r1, [pc, #76]	@ (8010ce8 <etharp_cleanup_netif+0x5c>)
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	4413      	add	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	440b      	add	r3, r1
 8010ca8:	3314      	adds	r3, #20
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010cae:	7afb      	ldrb	r3, [r7, #11]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00e      	beq.n	8010cd2 <etharp_cleanup_netif+0x46>
 8010cb4:	490c      	ldr	r1, [pc, #48]	@ (8010ce8 <etharp_cleanup_netif+0x5c>)
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	4613      	mov	r3, r2
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	4413      	add	r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	440b      	add	r3, r1
 8010cc2:	3308      	adds	r3, #8
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d102      	bne.n	8010cd2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f7ff fce5 	bl	801069c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	60fb      	str	r3, [r7, #12]
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2b09      	cmp	r3, #9
 8010cdc:	dddd      	ble.n	8010c9a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010cde:	bf00      	nop
 8010ce0:	bf00      	nop
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	20008068 	.word	0x20008068

08010cec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010cec:	b5b0      	push	{r4, r5, r7, lr}
 8010cee:	b08a      	sub	sp, #40	@ 0x28
 8010cf0:	af04      	add	r7, sp, #16
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d107      	bne.n	8010d0c <etharp_input+0x20>
 8010cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8010dfc <etharp_input+0x110>)
 8010cfe:	f240 228a 	movw	r2, #650	@ 0x28a
 8010d02:	493f      	ldr	r1, [pc, #252]	@ (8010e00 <etharp_input+0x114>)
 8010d04:	483f      	ldr	r0, [pc, #252]	@ (8010e04 <etharp_input+0x118>)
 8010d06:	f003 f891 	bl	8013e2c <iprintf>
 8010d0a:	e074      	b.n	8010df6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	881b      	ldrh	r3, [r3, #0]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d1c:	d10c      	bne.n	8010d38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010d22:	2b06      	cmp	r3, #6
 8010d24:	d108      	bne.n	8010d38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010d2a:	2b04      	cmp	r3, #4
 8010d2c:	d104      	bne.n	8010d38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	885b      	ldrh	r3, [r3, #2]
 8010d32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010d34:	2b08      	cmp	r3, #8
 8010d36:	d003      	beq.n	8010d40 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f7f6 fc85 	bl	8007648 <pbuf_free>
    return;
 8010d3e:	e05a      	b.n	8010df6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	330e      	adds	r3, #14
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	3318      	adds	r3, #24
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	3304      	adds	r3, #4
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d102      	bne.n	8010d60 <etharp_input+0x74>
    for_us = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	75fb      	strb	r3, [r7, #23]
 8010d5e:	e009      	b.n	8010d74 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	3304      	adds	r3, #4
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	bf0c      	ite	eq
 8010d6c:	2301      	moveq	r3, #1
 8010d6e:	2300      	movne	r3, #0
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	f103 0208 	add.w	r2, r3, #8
 8010d7a:	7dfb      	ldrb	r3, [r7, #23]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <etharp_input+0x98>
 8010d80:	2301      	movs	r3, #1
 8010d82:	e000      	b.n	8010d86 <etharp_input+0x9a>
 8010d84:	2302      	movs	r3, #2
 8010d86:	f107 010c 	add.w	r1, r7, #12
 8010d8a:	6838      	ldr	r0, [r7, #0]
 8010d8c:	f7ff fed8 	bl	8010b40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	88db      	ldrh	r3, [r3, #6]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010d9a:	d003      	beq.n	8010da4 <etharp_input+0xb8>
 8010d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010da0:	d01e      	beq.n	8010de0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010da2:	e025      	b.n	8010df0 <etharp_input+0x104>
      if (for_us) {
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d021      	beq.n	8010dee <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010dc4:	2102      	movs	r1, #2
 8010dc6:	9103      	str	r1, [sp, #12]
 8010dc8:	f107 010c 	add.w	r1, r7, #12
 8010dcc:	9102      	str	r1, [sp, #8]
 8010dce:	9201      	str	r2, [sp, #4]
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	462b      	mov	r3, r5
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	4601      	mov	r1, r0
 8010dd8:	6838      	ldr	r0, [r7, #0]
 8010dda:	f000 faef 	bl	80113bc <etharp_raw>
      break;
 8010dde:	e006      	b.n	8010dee <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010de0:	f107 030c 	add.w	r3, r7, #12
 8010de4:	4619      	mov	r1, r3
 8010de6:	6838      	ldr	r0, [r7, #0]
 8010de8:	f7fe fa02 	bl	800f1f0 <dhcp_arp_reply>
      break;
 8010dec:	e000      	b.n	8010df0 <etharp_input+0x104>
      break;
 8010dee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f7f6 fc29 	bl	8007648 <pbuf_free>
}
 8010df6:	3718      	adds	r7, #24
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8010dfc:	0801a3c0 	.word	0x0801a3c0
 8010e00:	0801a510 	.word	0x0801a510
 8010e04:	0801a438 	.word	0x0801a438

08010e08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af02      	add	r7, sp, #8
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	4613      	mov	r3, r2
 8010e14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010e16:	79fa      	ldrb	r2, [r7, #7]
 8010e18:	4944      	ldr	r1, [pc, #272]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	440b      	add	r3, r1
 8010e24:	3314      	adds	r3, #20
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d806      	bhi.n	8010e3a <etharp_output_to_arp_index+0x32>
 8010e2c:	4b40      	ldr	r3, [pc, #256]	@ (8010f30 <etharp_output_to_arp_index+0x128>)
 8010e2e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010e32:	4940      	ldr	r1, [pc, #256]	@ (8010f34 <etharp_output_to_arp_index+0x12c>)
 8010e34:	4840      	ldr	r0, [pc, #256]	@ (8010f38 <etharp_output_to_arp_index+0x130>)
 8010e36:	f002 fff9 	bl	8013e2c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010e3a:	79fa      	ldrb	r2, [r7, #7]
 8010e3c:	493b      	ldr	r1, [pc, #236]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010e3e:	4613      	mov	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4413      	add	r3, r2
 8010e44:	00db      	lsls	r3, r3, #3
 8010e46:	440b      	add	r3, r1
 8010e48:	3314      	adds	r3, #20
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d153      	bne.n	8010ef8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010e50:	79fa      	ldrb	r2, [r7, #7]
 8010e52:	4936      	ldr	r1, [pc, #216]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010e54:	4613      	mov	r3, r2
 8010e56:	005b      	lsls	r3, r3, #1
 8010e58:	4413      	add	r3, r2
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	440b      	add	r3, r1
 8010e5e:	3312      	adds	r3, #18
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010e66:	d919      	bls.n	8010e9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010e68:	79fa      	ldrb	r2, [r7, #7]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	005b      	lsls	r3, r3, #1
 8010e6e:	4413      	add	r3, r2
 8010e70:	00db      	lsls	r3, r3, #3
 8010e72:	4a2e      	ldr	r2, [pc, #184]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010e74:	4413      	add	r3, r2
 8010e76:	3304      	adds	r3, #4
 8010e78:	4619      	mov	r1, r3
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f000 fb4c 	bl	8011518 <etharp_request>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d138      	bne.n	8010ef8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e86:	79fa      	ldrb	r2, [r7, #7]
 8010e88:	4928      	ldr	r1, [pc, #160]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	4413      	add	r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	440b      	add	r3, r1
 8010e94:	3314      	adds	r3, #20
 8010e96:	2203      	movs	r2, #3
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	e02d      	b.n	8010ef8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010e9c:	79fa      	ldrb	r2, [r7, #7]
 8010e9e:	4923      	ldr	r1, [pc, #140]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010ea0:	4613      	mov	r3, r2
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	4413      	add	r3, r2
 8010ea6:	00db      	lsls	r3, r3, #3
 8010ea8:	440b      	add	r3, r1
 8010eaa:	3312      	adds	r3, #18
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010eb2:	d321      	bcc.n	8010ef8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010eb4:	79fa      	ldrb	r2, [r7, #7]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	005b      	lsls	r3, r3, #1
 8010eba:	4413      	add	r3, r2
 8010ebc:	00db      	lsls	r3, r3, #3
 8010ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010ec0:	4413      	add	r3, r2
 8010ec2:	1d19      	adds	r1, r3, #4
 8010ec4:	79fa      	ldrb	r2, [r7, #7]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	3308      	adds	r3, #8
 8010ed0:	4a16      	ldr	r2, [pc, #88]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010ed2:	4413      	add	r3, r2
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f000 fafb 	bl	80114d4 <etharp_request_dst>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d109      	bne.n	8010ef8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010ee4:	79fa      	ldrb	r2, [r7, #7]
 8010ee6:	4911      	ldr	r1, [pc, #68]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010ee8:	4613      	mov	r3, r2
 8010eea:	005b      	lsls	r3, r3, #1
 8010eec:	4413      	add	r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	440b      	add	r3, r1
 8010ef2:	3314      	adds	r3, #20
 8010ef4:	2203      	movs	r2, #3
 8010ef6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8010efe:	79fa      	ldrb	r2, [r7, #7]
 8010f00:	4613      	mov	r3, r2
 8010f02:	005b      	lsls	r3, r3, #1
 8010f04:	4413      	add	r3, r2
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	3308      	adds	r3, #8
 8010f0a:	4a08      	ldr	r2, [pc, #32]	@ (8010f2c <etharp_output_to_arp_index+0x124>)
 8010f0c:	4413      	add	r3, r2
 8010f0e:	3304      	adds	r3, #4
 8010f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f14:	9200      	str	r2, [sp, #0]
 8010f16:	460a      	mov	r2, r1
 8010f18:	68b9      	ldr	r1, [r7, #8]
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	f001 ff88 	bl	8012e30 <ethernet_output>
 8010f20:	4603      	mov	r3, r0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	20008068 	.word	0x20008068
 8010f30:	0801a3c0 	.word	0x0801a3c0
 8010f34:	0801a530 	.word	0x0801a530
 8010f38:	0801a438 	.word	0x0801a438

08010f3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b08a      	sub	sp, #40	@ 0x28
 8010f40:	af02      	add	r7, sp, #8
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d106      	bne.n	8010f60 <etharp_output+0x24>
 8010f52:	4b73      	ldr	r3, [pc, #460]	@ (8011120 <etharp_output+0x1e4>)
 8010f54:	f240 321e 	movw	r2, #798	@ 0x31e
 8010f58:	4972      	ldr	r1, [pc, #456]	@ (8011124 <etharp_output+0x1e8>)
 8010f5a:	4873      	ldr	r0, [pc, #460]	@ (8011128 <etharp_output+0x1ec>)
 8010f5c:	f002 ff66 	bl	8013e2c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d106      	bne.n	8010f74 <etharp_output+0x38>
 8010f66:	4b6e      	ldr	r3, [pc, #440]	@ (8011120 <etharp_output+0x1e4>)
 8010f68:	f240 321f 	movw	r2, #799	@ 0x31f
 8010f6c:	496f      	ldr	r1, [pc, #444]	@ (801112c <etharp_output+0x1f0>)
 8010f6e:	486e      	ldr	r0, [pc, #440]	@ (8011128 <etharp_output+0x1ec>)
 8010f70:	f002 ff5c 	bl	8013e2c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d106      	bne.n	8010f88 <etharp_output+0x4c>
 8010f7a:	4b69      	ldr	r3, [pc, #420]	@ (8011120 <etharp_output+0x1e4>)
 8010f7c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010f80:	496b      	ldr	r1, [pc, #428]	@ (8011130 <etharp_output+0x1f4>)
 8010f82:	4869      	ldr	r0, [pc, #420]	@ (8011128 <etharp_output+0x1ec>)
 8010f84:	f002 ff52 	bl	8013e2c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	68f9      	ldr	r1, [r7, #12]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f000 ff16 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d002      	beq.n	8010fa0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010f9a:	4b66      	ldr	r3, [pc, #408]	@ (8011134 <etharp_output+0x1f8>)
 8010f9c:	61fb      	str	r3, [r7, #28]
 8010f9e:	e0af      	b.n	8011100 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010fa8:	2be0      	cmp	r3, #224	@ 0xe0
 8010faa:	d118      	bne.n	8010fde <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010fac:	2301      	movs	r3, #1
 8010fae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010fb4:	235e      	movs	r3, #94	@ 0x5e
 8010fb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	3302      	adds	r3, #2
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	3303      	adds	r3, #3
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010fd6:	f107 0310 	add.w	r3, r7, #16
 8010fda:	61fb      	str	r3, [r7, #28]
 8010fdc:	e090      	b.n	8011100 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	405a      	eors	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	3308      	adds	r3, #8
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d012      	beq.n	801101c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ffc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011000:	4293      	cmp	r3, r2
 8011002:	d00b      	beq.n	801101c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	330c      	adds	r3, #12
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d003      	beq.n	8011016 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	330c      	adds	r3, #12
 8011012:	61bb      	str	r3, [r7, #24]
 8011014:	e002      	b.n	801101c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011016:	f06f 0303 	mvn.w	r3, #3
 801101a:	e07d      	b.n	8011118 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801101c:	4b46      	ldr	r3, [pc, #280]	@ (8011138 <etharp_output+0x1fc>)
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	4619      	mov	r1, r3
 8011022:	4a46      	ldr	r2, [pc, #280]	@ (801113c <etharp_output+0x200>)
 8011024:	460b      	mov	r3, r1
 8011026:	005b      	lsls	r3, r3, #1
 8011028:	440b      	add	r3, r1
 801102a:	00db      	lsls	r3, r3, #3
 801102c:	4413      	add	r3, r2
 801102e:	3314      	adds	r3, #20
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d925      	bls.n	8011082 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011036:	4b40      	ldr	r3, [pc, #256]	@ (8011138 <etharp_output+0x1fc>)
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	4619      	mov	r1, r3
 801103c:	4a3f      	ldr	r2, [pc, #252]	@ (801113c <etharp_output+0x200>)
 801103e:	460b      	mov	r3, r1
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	440b      	add	r3, r1
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	4413      	add	r3, r2
 8011048:	3308      	adds	r3, #8
 801104a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	429a      	cmp	r2, r3
 8011050:	d117      	bne.n	8011082 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	4b38      	ldr	r3, [pc, #224]	@ (8011138 <etharp_output+0x1fc>)
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	4618      	mov	r0, r3
 801105c:	4937      	ldr	r1, [pc, #220]	@ (801113c <etharp_output+0x200>)
 801105e:	4603      	mov	r3, r0
 8011060:	005b      	lsls	r3, r3, #1
 8011062:	4403      	add	r3, r0
 8011064:	00db      	lsls	r3, r3, #3
 8011066:	440b      	add	r3, r1
 8011068:	3304      	adds	r3, #4
 801106a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801106c:	429a      	cmp	r2, r3
 801106e:	d108      	bne.n	8011082 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011070:	4b31      	ldr	r3, [pc, #196]	@ (8011138 <etharp_output+0x1fc>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	461a      	mov	r2, r3
 8011076:	68b9      	ldr	r1, [r7, #8]
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f7ff fec5 	bl	8010e08 <etharp_output_to_arp_index>
 801107e:	4603      	mov	r3, r0
 8011080:	e04a      	b.n	8011118 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011082:	2300      	movs	r3, #0
 8011084:	75fb      	strb	r3, [r7, #23]
 8011086:	e031      	b.n	80110ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011088:	7dfa      	ldrb	r2, [r7, #23]
 801108a:	492c      	ldr	r1, [pc, #176]	@ (801113c <etharp_output+0x200>)
 801108c:	4613      	mov	r3, r2
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	4413      	add	r3, r2
 8011092:	00db      	lsls	r3, r3, #3
 8011094:	440b      	add	r3, r1
 8011096:	3314      	adds	r3, #20
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	2b01      	cmp	r3, #1
 801109c:	d923      	bls.n	80110e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801109e:	7dfa      	ldrb	r2, [r7, #23]
 80110a0:	4926      	ldr	r1, [pc, #152]	@ (801113c <etharp_output+0x200>)
 80110a2:	4613      	mov	r3, r2
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	00db      	lsls	r3, r3, #3
 80110aa:	440b      	add	r3, r1
 80110ac:	3308      	adds	r3, #8
 80110ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80110b0:	68fa      	ldr	r2, [r7, #12]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d117      	bne.n	80110e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	6819      	ldr	r1, [r3, #0]
 80110ba:	7dfa      	ldrb	r2, [r7, #23]
 80110bc:	481f      	ldr	r0, [pc, #124]	@ (801113c <etharp_output+0x200>)
 80110be:	4613      	mov	r3, r2
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	4413      	add	r3, r2
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	4403      	add	r3, r0
 80110c8:	3304      	adds	r3, #4
 80110ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80110cc:	4299      	cmp	r1, r3
 80110ce:	d10a      	bne.n	80110e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80110d0:	4a19      	ldr	r2, [pc, #100]	@ (8011138 <etharp_output+0x1fc>)
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
 80110d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80110d6:	7dfb      	ldrb	r3, [r7, #23]
 80110d8:	461a      	mov	r2, r3
 80110da:	68b9      	ldr	r1, [r7, #8]
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f7ff fe93 	bl	8010e08 <etharp_output_to_arp_index>
 80110e2:	4603      	mov	r3, r0
 80110e4:	e018      	b.n	8011118 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
 80110e8:	3301      	adds	r3, #1
 80110ea:	75fb      	strb	r3, [r7, #23]
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	2b09      	cmp	r3, #9
 80110f0:	d9ca      	bls.n	8011088 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	69b9      	ldr	r1, [r7, #24]
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f000 f822 	bl	8011140 <etharp_query>
 80110fc:	4603      	mov	r3, r0
 80110fe:	e00b      	b.n	8011118 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	68b9      	ldr	r1, [r7, #8]
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f001 fe8d 	bl	8012e30 <ethernet_output>
 8011116:	4603      	mov	r3, r0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3720      	adds	r7, #32
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0801a3c0 	.word	0x0801a3c0
 8011124:	0801a510 	.word	0x0801a510
 8011128:	0801a438 	.word	0x0801a438
 801112c:	0801a560 	.word	0x0801a560
 8011130:	0801a500 	.word	0x0801a500
 8011134:	0801abf8 	.word	0x0801abf8
 8011138:	20008158 	.word	0x20008158
 801113c:	20008068 	.word	0x20008068

08011140 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b08c      	sub	sp, #48	@ 0x30
 8011144:	af02      	add	r7, sp, #8
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	332a      	adds	r3, #42	@ 0x2a
 8011150:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011152:	23ff      	movs	r3, #255	@ 0xff
 8011154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8011158:	2300      	movs	r3, #0
 801115a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	68f9      	ldr	r1, [r7, #12]
 8011162:	4618      	mov	r0, r3
 8011164:	f000 fe2c 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10c      	bne.n	8011188 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011176:	2be0      	cmp	r3, #224	@ 0xe0
 8011178:	d006      	beq.n	8011188 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d003      	beq.n	8011188 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d102      	bne.n	801118e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011188:	f06f 030f 	mvn.w	r3, #15
 801118c:	e101      	b.n	8011392 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	2101      	movs	r1, #1
 8011192:	68b8      	ldr	r0, [r7, #8]
 8011194:	f7ff fb5c 	bl	8010850 <etharp_find_entry>
 8011198:	4603      	mov	r3, r0
 801119a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801119c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	da02      	bge.n	80111aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80111a4:	8a7b      	ldrh	r3, [r7, #18]
 80111a6:	b25b      	sxtb	r3, r3
 80111a8:	e0f3      	b.n	8011392 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80111aa:	8a7b      	ldrh	r3, [r7, #18]
 80111ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80111ae:	d906      	bls.n	80111be <etharp_query+0x7e>
 80111b0:	4b7a      	ldr	r3, [pc, #488]	@ (801139c <etharp_query+0x25c>)
 80111b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80111b6:	497a      	ldr	r1, [pc, #488]	@ (80113a0 <etharp_query+0x260>)
 80111b8:	487a      	ldr	r0, [pc, #488]	@ (80113a4 <etharp_query+0x264>)
 80111ba:	f002 fe37 	bl	8013e2c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80111be:	8a7b      	ldrh	r3, [r7, #18]
 80111c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80111c2:	7c7a      	ldrb	r2, [r7, #17]
 80111c4:	4978      	ldr	r1, [pc, #480]	@ (80113a8 <etharp_query+0x268>)
 80111c6:	4613      	mov	r3, r2
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	4413      	add	r3, r2
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	440b      	add	r3, r1
 80111d0:	3314      	adds	r3, #20
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d115      	bne.n	8011204 <etharp_query+0xc4>
    is_new_entry = 1;
 80111d8:	2301      	movs	r3, #1
 80111da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80111dc:	7c7a      	ldrb	r2, [r7, #17]
 80111de:	4972      	ldr	r1, [pc, #456]	@ (80113a8 <etharp_query+0x268>)
 80111e0:	4613      	mov	r3, r2
 80111e2:	005b      	lsls	r3, r3, #1
 80111e4:	4413      	add	r3, r2
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	440b      	add	r3, r1
 80111ea:	3314      	adds	r3, #20
 80111ec:	2201      	movs	r2, #1
 80111ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80111f0:	7c7a      	ldrb	r2, [r7, #17]
 80111f2:	496d      	ldr	r1, [pc, #436]	@ (80113a8 <etharp_query+0x268>)
 80111f4:	4613      	mov	r3, r2
 80111f6:	005b      	lsls	r3, r3, #1
 80111f8:	4413      	add	r3, r2
 80111fa:	00db      	lsls	r3, r3, #3
 80111fc:	440b      	add	r3, r1
 80111fe:	3308      	adds	r3, #8
 8011200:	68fa      	ldr	r2, [r7, #12]
 8011202:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011204:	7c7a      	ldrb	r2, [r7, #17]
 8011206:	4968      	ldr	r1, [pc, #416]	@ (80113a8 <etharp_query+0x268>)
 8011208:	4613      	mov	r3, r2
 801120a:	005b      	lsls	r3, r3, #1
 801120c:	4413      	add	r3, r2
 801120e:	00db      	lsls	r3, r3, #3
 8011210:	440b      	add	r3, r1
 8011212:	3314      	adds	r3, #20
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d011      	beq.n	801123e <etharp_query+0xfe>
 801121a:	7c7a      	ldrb	r2, [r7, #17]
 801121c:	4962      	ldr	r1, [pc, #392]	@ (80113a8 <etharp_query+0x268>)
 801121e:	4613      	mov	r3, r2
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	4413      	add	r3, r2
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	440b      	add	r3, r1
 8011228:	3314      	adds	r3, #20
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d806      	bhi.n	801123e <etharp_query+0xfe>
 8011230:	4b5a      	ldr	r3, [pc, #360]	@ (801139c <etharp_query+0x25c>)
 8011232:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8011236:	495d      	ldr	r1, [pc, #372]	@ (80113ac <etharp_query+0x26c>)
 8011238:	485a      	ldr	r0, [pc, #360]	@ (80113a4 <etharp_query+0x264>)
 801123a:	f002 fdf7 	bl	8013e2c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d102      	bne.n	801124a <etharp_query+0x10a>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10c      	bne.n	8011264 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801124a:	68b9      	ldr	r1, [r7, #8]
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f000 f963 	bl	8011518 <etharp_request>
 8011252:	4603      	mov	r3, r0
 8011254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d102      	bne.n	8011264 <etharp_query+0x124>
      return result;
 801125e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011262:	e096      	b.n	8011392 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d106      	bne.n	8011278 <etharp_query+0x138>
 801126a:	4b4c      	ldr	r3, [pc, #304]	@ (801139c <etharp_query+0x25c>)
 801126c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8011270:	494f      	ldr	r1, [pc, #316]	@ (80113b0 <etharp_query+0x270>)
 8011272:	484c      	ldr	r0, [pc, #304]	@ (80113a4 <etharp_query+0x264>)
 8011274:	f002 fdda 	bl	8013e2c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011278:	7c7a      	ldrb	r2, [r7, #17]
 801127a:	494b      	ldr	r1, [pc, #300]	@ (80113a8 <etharp_query+0x268>)
 801127c:	4613      	mov	r3, r2
 801127e:	005b      	lsls	r3, r3, #1
 8011280:	4413      	add	r3, r2
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	440b      	add	r3, r1
 8011286:	3314      	adds	r3, #20
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	2b01      	cmp	r3, #1
 801128c:	d917      	bls.n	80112be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801128e:	4a49      	ldr	r2, [pc, #292]	@ (80113b4 <etharp_query+0x274>)
 8011290:	7c7b      	ldrb	r3, [r7, #17]
 8011292:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011294:	7c7a      	ldrb	r2, [r7, #17]
 8011296:	4613      	mov	r3, r2
 8011298:	005b      	lsls	r3, r3, #1
 801129a:	4413      	add	r3, r2
 801129c:	00db      	lsls	r3, r3, #3
 801129e:	3308      	adds	r3, #8
 80112a0:	4a41      	ldr	r2, [pc, #260]	@ (80113a8 <etharp_query+0x268>)
 80112a2:	4413      	add	r3, r2
 80112a4:	3304      	adds	r3, #4
 80112a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112aa:	9200      	str	r2, [sp, #0]
 80112ac:	697a      	ldr	r2, [r7, #20]
 80112ae:	6879      	ldr	r1, [r7, #4]
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f001 fdbd 	bl	8012e30 <ethernet_output>
 80112b6:	4603      	mov	r3, r0
 80112b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80112bc:	e067      	b.n	801138e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80112be:	7c7a      	ldrb	r2, [r7, #17]
 80112c0:	4939      	ldr	r1, [pc, #228]	@ (80113a8 <etharp_query+0x268>)
 80112c2:	4613      	mov	r3, r2
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	4413      	add	r3, r2
 80112c8:	00db      	lsls	r3, r3, #3
 80112ca:	440b      	add	r3, r1
 80112cc:	3314      	adds	r3, #20
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d15c      	bne.n	801138e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80112dc:	e01c      	b.n	8011318 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80112de:	69fb      	ldr	r3, [r7, #28]
 80112e0:	895a      	ldrh	r2, [r3, #10]
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	891b      	ldrh	r3, [r3, #8]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d10a      	bne.n	8011300 <etharp_query+0x1c0>
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d006      	beq.n	8011300 <etharp_query+0x1c0>
 80112f2:	4b2a      	ldr	r3, [pc, #168]	@ (801139c <etharp_query+0x25c>)
 80112f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80112f8:	492f      	ldr	r1, [pc, #188]	@ (80113b8 <etharp_query+0x278>)
 80112fa:	482a      	ldr	r0, [pc, #168]	@ (80113a4 <etharp_query+0x264>)
 80112fc:	f002 fd96 	bl	8013e2c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	7b1b      	ldrb	r3, [r3, #12]
 8011304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011308:	2b00      	cmp	r3, #0
 801130a:	d002      	beq.n	8011312 <etharp_query+0x1d2>
        copy_needed = 1;
 801130c:	2301      	movs	r3, #1
 801130e:	61bb      	str	r3, [r7, #24]
        break;
 8011310:	e005      	b.n	801131e <etharp_query+0x1de>
      }
      p = p->next;
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1df      	bne.n	80112de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d007      	beq.n	8011334 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801132a:	200e      	movs	r0, #14
 801132c:	f7f6 fc22 	bl	8007b74 <pbuf_clone>
 8011330:	61f8      	str	r0, [r7, #28]
 8011332:	e004      	b.n	801133e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011338:	69f8      	ldr	r0, [r7, #28]
 801133a:	f7f6 fa25 	bl	8007788 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d021      	beq.n	8011388 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011344:	7c7a      	ldrb	r2, [r7, #17]
 8011346:	4918      	ldr	r1, [pc, #96]	@ (80113a8 <etharp_query+0x268>)
 8011348:	4613      	mov	r3, r2
 801134a:	005b      	lsls	r3, r3, #1
 801134c:	4413      	add	r3, r2
 801134e:	00db      	lsls	r3, r3, #3
 8011350:	440b      	add	r3, r1
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00a      	beq.n	801136e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011358:	7c7a      	ldrb	r2, [r7, #17]
 801135a:	4913      	ldr	r1, [pc, #76]	@ (80113a8 <etharp_query+0x268>)
 801135c:	4613      	mov	r3, r2
 801135e:	005b      	lsls	r3, r3, #1
 8011360:	4413      	add	r3, r2
 8011362:	00db      	lsls	r3, r3, #3
 8011364:	440b      	add	r3, r1
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	f7f6 f96d 	bl	8007648 <pbuf_free>
      }
      arp_table[i].q = p;
 801136e:	7c7a      	ldrb	r2, [r7, #17]
 8011370:	490d      	ldr	r1, [pc, #52]	@ (80113a8 <etharp_query+0x268>)
 8011372:	4613      	mov	r3, r2
 8011374:	005b      	lsls	r3, r3, #1
 8011376:	4413      	add	r3, r2
 8011378:	00db      	lsls	r3, r3, #3
 801137a:	440b      	add	r3, r1
 801137c:	69fa      	ldr	r2, [r7, #28]
 801137e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011386:	e002      	b.n	801138e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011388:	23ff      	movs	r3, #255	@ 0xff
 801138a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801138e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8011392:	4618      	mov	r0, r3
 8011394:	3728      	adds	r7, #40	@ 0x28
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	0801a3c0 	.word	0x0801a3c0
 80113a0:	0801a56c 	.word	0x0801a56c
 80113a4:	0801a438 	.word	0x0801a438
 80113a8:	20008068 	.word	0x20008068
 80113ac:	0801a57c 	.word	0x0801a57c
 80113b0:	0801a560 	.word	0x0801a560
 80113b4:	20008158 	.word	0x20008158
 80113b8:	0801a5a4 	.word	0x0801a5a4

080113bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b08a      	sub	sp, #40	@ 0x28
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
 80113c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d106      	bne.n	80113e2 <etharp_raw+0x26>
 80113d4:	4b3a      	ldr	r3, [pc, #232]	@ (80114c0 <etharp_raw+0x104>)
 80113d6:	f240 4257 	movw	r2, #1111	@ 0x457
 80113da:	493a      	ldr	r1, [pc, #232]	@ (80114c4 <etharp_raw+0x108>)
 80113dc:	483a      	ldr	r0, [pc, #232]	@ (80114c8 <etharp_raw+0x10c>)
 80113de:	f002 fd25 	bl	8013e2c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80113e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80113e6:	211c      	movs	r1, #28
 80113e8:	200e      	movs	r0, #14
 80113ea:	f7f5 fe49 	bl	8007080 <pbuf_alloc>
 80113ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d102      	bne.n	80113fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80113f6:	f04f 33ff 	mov.w	r3, #4294967295
 80113fa:	e05d      	b.n	80114b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80113fc:	69bb      	ldr	r3, [r7, #24]
 80113fe:	895b      	ldrh	r3, [r3, #10]
 8011400:	2b1b      	cmp	r3, #27
 8011402:	d806      	bhi.n	8011412 <etharp_raw+0x56>
 8011404:	4b2e      	ldr	r3, [pc, #184]	@ (80114c0 <etharp_raw+0x104>)
 8011406:	f240 4262 	movw	r2, #1122	@ 0x462
 801140a:	4930      	ldr	r1, [pc, #192]	@ (80114cc <etharp_raw+0x110>)
 801140c:	482e      	ldr	r0, [pc, #184]	@ (80114c8 <etharp_raw+0x10c>)
 801140e:	f002 fd0d 	bl	8013e2c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011418:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801141a:	4618      	mov	r0, r3
 801141c:	f7f4 fd86 	bl	8005f2c <lwip_htons>
 8011420:	4603      	mov	r3, r0
 8011422:	461a      	mov	r2, r3
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801142e:	2b06      	cmp	r3, #6
 8011430:	d006      	beq.n	8011440 <etharp_raw+0x84>
 8011432:	4b23      	ldr	r3, [pc, #140]	@ (80114c0 <etharp_raw+0x104>)
 8011434:	f240 4269 	movw	r2, #1129	@ 0x469
 8011438:	4925      	ldr	r1, [pc, #148]	@ (80114d0 <etharp_raw+0x114>)
 801143a:	4823      	ldr	r0, [pc, #140]	@ (80114c8 <etharp_raw+0x10c>)
 801143c:	f002 fcf6 	bl	8013e2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	3308      	adds	r3, #8
 8011444:	2206      	movs	r2, #6
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	4618      	mov	r0, r3
 801144a:	f002 fe22 	bl	8014092 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	3312      	adds	r3, #18
 8011452:	2206      	movs	r2, #6
 8011454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011456:	4618      	mov	r0, r3
 8011458:	f002 fe1b 	bl	8014092 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	330e      	adds	r3, #14
 8011460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011462:	6812      	ldr	r2, [r2, #0]
 8011464:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	3318      	adds	r3, #24
 801146a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801146c:	6812      	ldr	r2, [r2, #0]
 801146e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	2200      	movs	r2, #0
 8011474:	701a      	strb	r2, [r3, #0]
 8011476:	2200      	movs	r2, #0
 8011478:	f042 0201 	orr.w	r2, r2, #1
 801147c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	2200      	movs	r2, #0
 8011482:	f042 0208 	orr.w	r2, r2, #8
 8011486:	709a      	strb	r2, [r3, #2]
 8011488:	2200      	movs	r2, #0
 801148a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	2206      	movs	r2, #6
 8011490:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2204      	movs	r2, #4
 8011496:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011498:	f640 0306 	movw	r3, #2054	@ 0x806
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	68ba      	ldr	r2, [r7, #8]
 80114a2:	69b9      	ldr	r1, [r7, #24]
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	f001 fcc3 	bl	8012e30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80114aa:	69b8      	ldr	r0, [r7, #24]
 80114ac:	f7f6 f8cc 	bl	8007648 <pbuf_free>
  p = NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80114b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3720      	adds	r7, #32
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	0801a3c0 	.word	0x0801a3c0
 80114c4:	0801a510 	.word	0x0801a510
 80114c8:	0801a438 	.word	0x0801a438
 80114cc:	0801a5c0 	.word	0x0801a5c0
 80114d0:	0801a5f4 	.word	0x0801a5f4

080114d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b088      	sub	sp, #32
 80114d8:	af04      	add	r7, sp, #16
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	60b9      	str	r1, [r7, #8]
 80114de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80114f0:	2201      	movs	r2, #1
 80114f2:	9203      	str	r2, [sp, #12]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	9202      	str	r2, [sp, #8]
 80114f8:	4a06      	ldr	r2, [pc, #24]	@ (8011514 <etharp_request_dst+0x40>)
 80114fa:	9201      	str	r2, [sp, #4]
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	4603      	mov	r3, r0
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	68f8      	ldr	r0, [r7, #12]
 8011504:	f7ff ff5a 	bl	80113bc <etharp_raw>
 8011508:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801150a:	4618      	mov	r0, r3
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	0801ac00 	.word	0x0801ac00

08011518 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011522:	4a05      	ldr	r2, [pc, #20]	@ (8011538 <etharp_request+0x20>)
 8011524:	6839      	ldr	r1, [r7, #0]
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff ffd4 	bl	80114d4 <etharp_request_dst>
 801152c:	4603      	mov	r3, r0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3708      	adds	r7, #8
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	0801abf8 	.word	0x0801abf8

0801153c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b08e      	sub	sp, #56	@ 0x38
 8011540:	af04      	add	r7, sp, #16
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011546:	4b79      	ldr	r3, [pc, #484]	@ (801172c <icmp_input+0x1f0>)
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	f003 030f 	and.w	r3, r3, #15
 8011554:	b2db      	uxtb	r3, r3
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	b2db      	uxtb	r3, r3
 801155a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801155c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801155e:	2b13      	cmp	r3, #19
 8011560:	f240 80cd 	bls.w	80116fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	895b      	ldrh	r3, [r3, #10]
 8011568:	2b03      	cmp	r3, #3
 801156a:	f240 80ca 	bls.w	8011702 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011578:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801157c:	2b00      	cmp	r3, #0
 801157e:	f000 80b7 	beq.w	80116f0 <icmp_input+0x1b4>
 8011582:	2b08      	cmp	r3, #8
 8011584:	f040 80b7 	bne.w	80116f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011588:	4b69      	ldr	r3, [pc, #420]	@ (8011730 <icmp_input+0x1f4>)
 801158a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801158c:	4b67      	ldr	r3, [pc, #412]	@ (801172c <icmp_input+0x1f0>)
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011594:	2be0      	cmp	r3, #224	@ 0xe0
 8011596:	f000 80bb 	beq.w	8011710 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801159a:	4b64      	ldr	r3, [pc, #400]	@ (801172c <icmp_input+0x1f0>)
 801159c:	695b      	ldr	r3, [r3, #20]
 801159e:	4a63      	ldr	r2, [pc, #396]	@ (801172c <icmp_input+0x1f0>)
 80115a0:	6812      	ldr	r2, [r2, #0]
 80115a2:	4611      	mov	r1, r2
 80115a4:	4618      	mov	r0, r3
 80115a6:	f000 fc0b 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	f040 80b1 	bne.w	8011714 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	891b      	ldrh	r3, [r3, #8]
 80115b6:	2b07      	cmp	r3, #7
 80115b8:	f240 80a5 	bls.w	8011706 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80115bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115be:	330e      	adds	r3, #14
 80115c0:	4619      	mov	r1, r3
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7f5 ffaa 	bl	800751c <pbuf_add_header>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d04b      	beq.n	8011666 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	891a      	ldrh	r2, [r3, #8]
 80115d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80115d4:	4413      	add	r3, r2
 80115d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	891b      	ldrh	r3, [r3, #8]
 80115dc:	8b7a      	ldrh	r2, [r7, #26]
 80115de:	429a      	cmp	r2, r3
 80115e0:	f0c0 809a 	bcc.w	8011718 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80115e4:	8b7b      	ldrh	r3, [r7, #26]
 80115e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80115ea:	4619      	mov	r1, r3
 80115ec:	200e      	movs	r0, #14
 80115ee:	f7f5 fd47 	bl	8007080 <pbuf_alloc>
 80115f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8090 	beq.w	801171c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	895b      	ldrh	r3, [r3, #10]
 8011600:	461a      	mov	r2, r3
 8011602:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011604:	3308      	adds	r3, #8
 8011606:	429a      	cmp	r2, r3
 8011608:	d203      	bcs.n	8011612 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801160a:	6978      	ldr	r0, [r7, #20]
 801160c:	f7f6 f81c 	bl	8007648 <pbuf_free>
          goto icmperr;
 8011610:	e085      	b.n	801171e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801161a:	4618      	mov	r0, r3
 801161c:	f002 fd39 	bl	8014092 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011620:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011622:	4619      	mov	r1, r3
 8011624:	6978      	ldr	r0, [r7, #20]
 8011626:	f7f5 ff89 	bl	800753c <pbuf_remove_header>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d009      	beq.n	8011644 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011630:	4b40      	ldr	r3, [pc, #256]	@ (8011734 <icmp_input+0x1f8>)
 8011632:	22b6      	movs	r2, #182	@ 0xb6
 8011634:	4940      	ldr	r1, [pc, #256]	@ (8011738 <icmp_input+0x1fc>)
 8011636:	4841      	ldr	r0, [pc, #260]	@ (801173c <icmp_input+0x200>)
 8011638:	f002 fbf8 	bl	8013e2c <iprintf>
          pbuf_free(r);
 801163c:	6978      	ldr	r0, [r7, #20]
 801163e:	f7f6 f803 	bl	8007648 <pbuf_free>
          goto icmperr;
 8011642:	e06c      	b.n	801171e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011644:	6879      	ldr	r1, [r7, #4]
 8011646:	6978      	ldr	r0, [r7, #20]
 8011648:	f7f6 f926 	bl	8007898 <pbuf_copy>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d003      	beq.n	801165a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011652:	6978      	ldr	r0, [r7, #20]
 8011654:	f7f5 fff8 	bl	8007648 <pbuf_free>
          goto icmperr;
 8011658:	e061      	b.n	801171e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7f5 fff4 	bl	8007648 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	607b      	str	r3, [r7, #4]
 8011664:	e00f      	b.n	8011686 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011666:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011668:	330e      	adds	r3, #14
 801166a:	4619      	mov	r1, r3
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7f5 ff65 	bl	800753c <pbuf_remove_header>
 8011672:	4603      	mov	r3, r0
 8011674:	2b00      	cmp	r3, #0
 8011676:	d006      	beq.n	8011686 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011678:	4b2e      	ldr	r3, [pc, #184]	@ (8011734 <icmp_input+0x1f8>)
 801167a:	22c7      	movs	r2, #199	@ 0xc7
 801167c:	4930      	ldr	r1, [pc, #192]	@ (8011740 <icmp_input+0x204>)
 801167e:	482f      	ldr	r0, [pc, #188]	@ (801173c <icmp_input+0x200>)
 8011680:	f002 fbd4 	bl	8013e2c <iprintf>
          goto icmperr;
 8011684:	e04b      	b.n	801171e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801168c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801168e:	4619      	mov	r1, r3
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7f5 ff43 	bl	800751c <pbuf_add_header>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d12b      	bne.n	80116f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80116aa:	4b20      	ldr	r3, [pc, #128]	@ (801172c <icmp_input+0x1f0>)
 80116ac:	691a      	ldr	r2, [r3, #16]
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	2200      	movs	r2, #0
 80116b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	2200      	movs	r2, #0
 80116bc:	709a      	strb	r2, [r3, #2]
 80116be:	2200      	movs	r2, #0
 80116c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	22ff      	movs	r2, #255	@ 0xff
 80116c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2200      	movs	r2, #0
 80116cc:	729a      	strb	r2, [r3, #10]
 80116ce:	2200      	movs	r2, #0
 80116d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	2301      	movs	r3, #1
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	2300      	movs	r3, #0
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	23ff      	movs	r3, #255	@ 0xff
 80116e0:	2200      	movs	r2, #0
 80116e2:	69f9      	ldr	r1, [r7, #28]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f000 fa93 	bl	8011c10 <ip4_output_if>
 80116ea:	4603      	mov	r3, r0
 80116ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80116ee:	e001      	b.n	80116f4 <icmp_input+0x1b8>
      break;
 80116f0:	bf00      	nop
 80116f2:	e000      	b.n	80116f6 <icmp_input+0x1ba>
      break;
 80116f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7f5 ffa6 	bl	8007648 <pbuf_free>
  return;
 80116fc:	e013      	b.n	8011726 <icmp_input+0x1ea>
    goto lenerr;
 80116fe:	bf00      	nop
 8011700:	e002      	b.n	8011708 <icmp_input+0x1cc>
    goto lenerr;
 8011702:	bf00      	nop
 8011704:	e000      	b.n	8011708 <icmp_input+0x1cc>
        goto lenerr;
 8011706:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7f5 ff9d 	bl	8007648 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801170e:	e00a      	b.n	8011726 <icmp_input+0x1ea>
        goto icmperr;
 8011710:	bf00      	nop
 8011712:	e004      	b.n	801171e <icmp_input+0x1e2>
        goto icmperr;
 8011714:	bf00      	nop
 8011716:	e002      	b.n	801171e <icmp_input+0x1e2>
          goto icmperr;
 8011718:	bf00      	nop
 801171a:	e000      	b.n	801171e <icmp_input+0x1e2>
          goto icmperr;
 801171c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f7f5 ff92 	bl	8007648 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011724:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011726:	3728      	adds	r7, #40	@ 0x28
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	20004f98 	.word	0x20004f98
 8011730:	20004fac 	.word	0x20004fac
 8011734:	0801a638 	.word	0x0801a638
 8011738:	0801a670 	.word	0x0801a670
 801173c:	0801a6a8 	.word	0x0801a6a8
 8011740:	0801a6d0 	.word	0x0801a6d0

08011744 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b082      	sub	sp, #8
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
 801174c:	460b      	mov	r3, r1
 801174e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011750:	78fb      	ldrb	r3, [r7, #3]
 8011752:	461a      	mov	r2, r3
 8011754:	2103      	movs	r1, #3
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 f814 	bl	8011784 <icmp_send_response>
}
 801175c:	bf00      	nop
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	461a      	mov	r2, r3
 8011774:	210b      	movs	r1, #11
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f804 	bl	8011784 <icmp_send_response>
}
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b08c      	sub	sp, #48	@ 0x30
 8011788:	af04      	add	r7, sp, #16
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	460b      	mov	r3, r1
 801178e:	70fb      	strb	r3, [r7, #3]
 8011790:	4613      	mov	r3, r2
 8011792:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011794:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011798:	2124      	movs	r1, #36	@ 0x24
 801179a:	2022      	movs	r0, #34	@ 0x22
 801179c:	f7f5 fc70 	bl	8007080 <pbuf_alloc>
 80117a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d04c      	beq.n	8011842 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	895b      	ldrh	r3, [r3, #10]
 80117ac:	2b23      	cmp	r3, #35	@ 0x23
 80117ae:	d806      	bhi.n	80117be <icmp_send_response+0x3a>
 80117b0:	4b26      	ldr	r3, [pc, #152]	@ (801184c <icmp_send_response+0xc8>)
 80117b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80117b6:	4926      	ldr	r1, [pc, #152]	@ (8011850 <icmp_send_response+0xcc>)
 80117b8:	4826      	ldr	r0, [pc, #152]	@ (8011854 <icmp_send_response+0xd0>)
 80117ba:	f002 fb37 	bl	8013e2c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	78fa      	ldrb	r2, [r7, #3]
 80117ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	78ba      	ldrb	r2, [r7, #2]
 80117d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	2200      	movs	r2, #0
 80117da:	711a      	strb	r2, [r3, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	2200      	movs	r2, #0
 80117e4:	719a      	strb	r2, [r3, #6]
 80117e6:	2200      	movs	r2, #0
 80117e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f103 0008 	add.w	r0, r3, #8
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	221c      	movs	r2, #28
 80117f8:	4619      	mov	r1, r3
 80117fa:	f002 fc4a 	bl	8014092 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011804:	f107 030c 	add.w	r3, r7, #12
 8011808:	4618      	mov	r0, r3
 801180a:	f000 f825 	bl	8011858 <ip4_route>
 801180e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d011      	beq.n	801183a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	2200      	movs	r2, #0
 801181a:	709a      	strb	r2, [r3, #2]
 801181c:	2200      	movs	r2, #0
 801181e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011820:	f107 020c 	add.w	r2, r7, #12
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	9302      	str	r3, [sp, #8]
 8011828:	2301      	movs	r3, #1
 801182a:	9301      	str	r3, [sp, #4]
 801182c:	2300      	movs	r3, #0
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	23ff      	movs	r3, #255	@ 0xff
 8011832:	2100      	movs	r1, #0
 8011834:	69f8      	ldr	r0, [r7, #28]
 8011836:	f000 f9eb 	bl	8011c10 <ip4_output_if>
  }
  pbuf_free(q);
 801183a:	69f8      	ldr	r0, [r7, #28]
 801183c:	f7f5 ff04 	bl	8007648 <pbuf_free>
 8011840:	e000      	b.n	8011844 <icmp_send_response+0xc0>
    return;
 8011842:	bf00      	nop
}
 8011844:	3720      	adds	r7, #32
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	0801a638 	.word	0x0801a638
 8011850:	0801a704 	.word	0x0801a704
 8011854:	0801a6a8 	.word	0x0801a6a8

08011858 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011860:	4b33      	ldr	r3, [pc, #204]	@ (8011930 <ip4_route+0xd8>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	60fb      	str	r3, [r7, #12]
 8011866:	e036      	b.n	80118d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801186e:	f003 0301 	and.w	r3, r3, #1
 8011872:	b2db      	uxtb	r3, r3
 8011874:	2b00      	cmp	r3, #0
 8011876:	d02b      	beq.n	80118d0 <ip4_route+0x78>
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801187e:	089b      	lsrs	r3, r3, #2
 8011880:	f003 0301 	and.w	r3, r3, #1
 8011884:	b2db      	uxtb	r3, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	d022      	beq.n	80118d0 <ip4_route+0x78>
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3304      	adds	r3, #4
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d01d      	beq.n	80118d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	3304      	adds	r3, #4
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	405a      	eors	r2, r3
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3308      	adds	r3, #8
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	4013      	ands	r3, r2
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	e038      	b.n	8011922 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80118b6:	f003 0302 	and.w	r3, r3, #2
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d108      	bne.n	80118d0 <ip4_route+0x78>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	330c      	adds	r3, #12
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d101      	bne.n	80118d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	e028      	b.n	8011922 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1c5      	bne.n	8011868 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80118dc:	4b15      	ldr	r3, [pc, #84]	@ (8011934 <ip4_route+0xdc>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d01a      	beq.n	801191a <ip4_route+0xc2>
 80118e4:	4b13      	ldr	r3, [pc, #76]	@ (8011934 <ip4_route+0xdc>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80118ec:	f003 0301 	and.w	r3, r3, #1
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d012      	beq.n	801191a <ip4_route+0xc2>
 80118f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011934 <ip4_route+0xdc>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80118fc:	f003 0304 	and.w	r3, r3, #4
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00a      	beq.n	801191a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011904:	4b0b      	ldr	r3, [pc, #44]	@ (8011934 <ip4_route+0xdc>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	3304      	adds	r3, #4
 801190a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801190c:	2b00      	cmp	r3, #0
 801190e:	d004      	beq.n	801191a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b7f      	cmp	r3, #127	@ 0x7f
 8011918:	d101      	bne.n	801191e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801191a:	2300      	movs	r3, #0
 801191c:	e001      	b.n	8011922 <ip4_route+0xca>
  }

  return netif_default;
 801191e:	4b05      	ldr	r3, [pc, #20]	@ (8011934 <ip4_route+0xdc>)
 8011920:	681b      	ldr	r3, [r3, #0]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3714      	adds	r7, #20
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	20007fc8 	.word	0x20007fc8
 8011934:	20007fcc 	.word	0x20007fcc

08011938 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011946:	f003 0301 	and.w	r3, r3, #1
 801194a:	b2db      	uxtb	r3, r3
 801194c:	2b00      	cmp	r3, #0
 801194e:	d016      	beq.n	801197e <ip4_input_accept+0x46>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	3304      	adds	r3, #4
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d011      	beq.n	801197e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801195a:	4b0b      	ldr	r3, [pc, #44]	@ (8011988 <ip4_input_accept+0x50>)
 801195c:	695a      	ldr	r2, [r3, #20]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3304      	adds	r3, #4
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	429a      	cmp	r2, r3
 8011966:	d008      	beq.n	801197a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011968:	4b07      	ldr	r3, [pc, #28]	@ (8011988 <ip4_input_accept+0x50>)
 801196a:	695b      	ldr	r3, [r3, #20]
 801196c:	6879      	ldr	r1, [r7, #4]
 801196e:	4618      	mov	r0, r3
 8011970:	f000 fa26 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8011974:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801197a:	2301      	movs	r3, #1
 801197c:	e000      	b.n	8011980 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801197e:	2300      	movs	r3, #0
}
 8011980:	4618      	mov	r0, r3
 8011982:	3708      	adds	r7, #8
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20004f98 	.word	0x20004f98

0801198c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b088      	sub	sp, #32
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011996:	2301      	movs	r3, #1
 8011998:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	091b      	lsrs	r3, r3, #4
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b04      	cmp	r3, #4
 80119aa:	d004      	beq.n	80119b6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7f5 fe4b 	bl	8007648 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80119b2:	2300      	movs	r3, #0
 80119b4:	e123      	b.n	8011bfe <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 030f 	and.w	r3, r3, #15
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	885b      	ldrh	r3, [r3, #2]
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7f4 faad 	bl	8005f2c <lwip_htons>
 80119d2:	4603      	mov	r3, r0
 80119d4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	891b      	ldrh	r3, [r3, #8]
 80119da:	8a3a      	ldrh	r2, [r7, #16]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d204      	bcs.n	80119ea <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80119e0:	8a3b      	ldrh	r3, [r7, #16]
 80119e2:	4619      	mov	r1, r3
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f7f5 fca9 	bl	800733c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	895b      	ldrh	r3, [r3, #10]
 80119ee:	8a7a      	ldrh	r2, [r7, #18]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d807      	bhi.n	8011a04 <ip4_input+0x78>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	891b      	ldrh	r3, [r3, #8]
 80119f8:	8a3a      	ldrh	r2, [r7, #16]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d802      	bhi.n	8011a04 <ip4_input+0x78>
 80119fe:	8a7b      	ldrh	r3, [r7, #18]
 8011a00:	2b13      	cmp	r3, #19
 8011a02:	d804      	bhi.n	8011a0e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7f5 fe1f 	bl	8007648 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e0f7      	b.n	8011bfe <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	691b      	ldr	r3, [r3, #16]
 8011a12:	4a7d      	ldr	r2, [pc, #500]	@ (8011c08 <ip4_input+0x27c>)
 8011a14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	4a7b      	ldr	r2, [pc, #492]	@ (8011c08 <ip4_input+0x27c>)
 8011a1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8011c08 <ip4_input+0x27c>)
 8011a20:	695b      	ldr	r3, [r3, #20]
 8011a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011a26:	2be0      	cmp	r3, #224	@ 0xe0
 8011a28:	d112      	bne.n	8011a50 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011a30:	f003 0301 	and.w	r3, r3, #1
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d007      	beq.n	8011a4a <ip4_input+0xbe>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d002      	beq.n	8011a4a <ip4_input+0xbe>
      netif = inp;
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	61bb      	str	r3, [r7, #24]
 8011a48:	e02a      	b.n	8011aa0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	61bb      	str	r3, [r7, #24]
 8011a4e:	e027      	b.n	8011aa0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011a50:	6838      	ldr	r0, [r7, #0]
 8011a52:	f7ff ff71 	bl	8011938 <ip4_input_accept>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d002      	beq.n	8011a62 <ip4_input+0xd6>
      netif = inp;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	61bb      	str	r3, [r7, #24]
 8011a60:	e01e      	b.n	8011aa0 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011a62:	2300      	movs	r3, #0
 8011a64:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011a66:	4b68      	ldr	r3, [pc, #416]	@ (8011c08 <ip4_input+0x27c>)
 8011a68:	695b      	ldr	r3, [r3, #20]
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a6e:	d017      	beq.n	8011aa0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011a70:	4b66      	ldr	r3, [pc, #408]	@ (8011c0c <ip4_input+0x280>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	61bb      	str	r3, [r7, #24]
 8011a76:	e00e      	b.n	8011a96 <ip4_input+0x10a>
          if (netif == inp) {
 8011a78:	69ba      	ldr	r2, [r7, #24]
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d006      	beq.n	8011a8e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011a80:	69b8      	ldr	r0, [r7, #24]
 8011a82:	f7ff ff59 	bl	8011938 <ip4_input_accept>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d108      	bne.n	8011a9e <ip4_input+0x112>
 8011a8c:	e000      	b.n	8011a90 <ip4_input+0x104>
            continue;
 8011a8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	61bb      	str	r3, [r7, #24]
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1ed      	bne.n	8011a78 <ip4_input+0xec>
 8011a9c:	e000      	b.n	8011aa0 <ip4_input+0x114>
            break;
 8011a9e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d111      	bne.n	8011aca <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	7a5b      	ldrb	r3, [r3, #9]
 8011aaa:	2b11      	cmp	r3, #17
 8011aac:	d10d      	bne.n	8011aca <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011aae:	8a7b      	ldrh	r3, [r7, #18]
 8011ab0:	69fa      	ldr	r2, [r7, #28]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	885b      	ldrh	r3, [r3, #2]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8011ac0:	d103      	bne.n	8011aca <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d017      	beq.n	8011b00 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8011c08 <ip4_input+0x27c>)
 8011ad2:	691b      	ldr	r3, [r3, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d013      	beq.n	8011b00 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8011c08 <ip4_input+0x27c>)
 8011ada:	691b      	ldr	r3, [r3, #16]
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f000 f96e 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d105      	bne.n	8011af6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011aea:	4b47      	ldr	r3, [pc, #284]	@ (8011c08 <ip4_input+0x27c>)
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011af2:	2be0      	cmp	r3, #224	@ 0xe0
 8011af4:	d104      	bne.n	8011b00 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7f5 fda6 	bl	8007648 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	e07e      	b.n	8011bfe <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d104      	bne.n	8011b10 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f7f5 fd9e 	bl	8007648 <pbuf_free>
    return ERR_OK;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	e076      	b.n	8011bfe <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	88db      	ldrh	r3, [r3, #6]
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	461a      	mov	r2, r3
 8011b18:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00b      	beq.n	8011b3a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fdbc 	bl	80126a0 <ip4_reass>
 8011b28:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d101      	bne.n	8011b34 <ip4_input+0x1a8>
      return ERR_OK;
 8011b30:	2300      	movs	r3, #0
 8011b32:	e064      	b.n	8011bfe <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011b3a:	4a33      	ldr	r2, [pc, #204]	@ (8011c08 <ip4_input+0x27c>)
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011b40:	4a31      	ldr	r2, [pc, #196]	@ (8011c08 <ip4_input+0x27c>)
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011b46:	4a30      	ldr	r2, [pc, #192]	@ (8011c08 <ip4_input+0x27c>)
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	f003 030f 	and.w	r3, r3, #15
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8011c08 <ip4_input+0x27c>)
 8011b5e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011b60:	8a7b      	ldrh	r3, [r7, #18]
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7f5 fce9 	bl	800753c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	7a5b      	ldrb	r3, [r3, #9]
 8011b6e:	2b11      	cmp	r3, #17
 8011b70:	d006      	beq.n	8011b80 <ip4_input+0x1f4>
 8011b72:	2b11      	cmp	r3, #17
 8011b74:	dc13      	bgt.n	8011b9e <ip4_input+0x212>
 8011b76:	2b01      	cmp	r3, #1
 8011b78:	d00c      	beq.n	8011b94 <ip4_input+0x208>
 8011b7a:	2b06      	cmp	r3, #6
 8011b7c:	d005      	beq.n	8011b8a <ip4_input+0x1fe>
 8011b7e:	e00e      	b.n	8011b9e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7fc faee 	bl	800e164 <udp_input>
        break;
 8011b88:	e026      	b.n	8011bd8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011b8a:	6839      	ldr	r1, [r7, #0]
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7f7 fea5 	bl	80098dc <tcp_input>
        break;
 8011b92:	e021      	b.n	8011bd8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011b94:	6839      	ldr	r1, [r7, #0]
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff fcd0 	bl	801153c <icmp_input>
        break;
 8011b9c:	e01c      	b.n	8011bd8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8011c08 <ip4_input+0x27c>)
 8011ba0:	695b      	ldr	r3, [r3, #20]
 8011ba2:	69b9      	ldr	r1, [r7, #24]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 f90b 	bl	8011dc0 <ip4_addr_isbroadcast_u32>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d10f      	bne.n	8011bd0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011bb0:	4b15      	ldr	r3, [pc, #84]	@ (8011c08 <ip4_input+0x27c>)
 8011bb2:	695b      	ldr	r3, [r3, #20]
 8011bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011bb8:	2be0      	cmp	r3, #224	@ 0xe0
 8011bba:	d009      	beq.n	8011bd0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7f5 fd2d 	bl	8007622 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011bc8:	2102      	movs	r1, #2
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f7ff fdba 	bl	8011744 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7f5 fd39 	bl	8007648 <pbuf_free>
        break;
 8011bd6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8011c08 <ip4_input+0x27c>)
 8011bda:	2200      	movs	r2, #0
 8011bdc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011bde:	4b0a      	ldr	r3, [pc, #40]	@ (8011c08 <ip4_input+0x27c>)
 8011be0:	2200      	movs	r2, #0
 8011be2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011be4:	4b08      	ldr	r3, [pc, #32]	@ (8011c08 <ip4_input+0x27c>)
 8011be6:	2200      	movs	r2, #0
 8011be8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011bea:	4b07      	ldr	r3, [pc, #28]	@ (8011c08 <ip4_input+0x27c>)
 8011bec:	2200      	movs	r2, #0
 8011bee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011bf0:	4b05      	ldr	r3, [pc, #20]	@ (8011c08 <ip4_input+0x27c>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011bf6:	4b04      	ldr	r3, [pc, #16]	@ (8011c08 <ip4_input+0x27c>)
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011bfc:	2300      	movs	r3, #0
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3720      	adds	r7, #32
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	20004f98 	.word	0x20004f98
 8011c0c:	20007fc8 	.word	0x20007fc8

08011c10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b08a      	sub	sp, #40	@ 0x28
 8011c14:	af04      	add	r7, sp, #16
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
 8011c1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d009      	beq.n	8011c3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <ip4_output_if+0x26>
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d102      	bne.n	8011c3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c38:	3304      	adds	r3, #4
 8011c3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011c3c:	78fa      	ldrb	r2, [r7, #3]
 8011c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c40:	9302      	str	r3, [sp, #8]
 8011c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011c46:	9301      	str	r3, [sp, #4]
 8011c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011c4c:	9300      	str	r3, [sp, #0]
 8011c4e:	4613      	mov	r3, r2
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	6979      	ldr	r1, [r7, #20]
 8011c54:	68f8      	ldr	r0, [r7, #12]
 8011c56:	f000 f805 	bl	8011c64 <ip4_output_if_src>
 8011c5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3718      	adds	r7, #24
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
 8011c70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	7b9b      	ldrb	r3, [r3, #14]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d006      	beq.n	8011c88 <ip4_output_if_src+0x24>
 8011c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8011da8 <ip4_output_if_src+0x144>)
 8011c7c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8011c80:	494a      	ldr	r1, [pc, #296]	@ (8011dac <ip4_output_if_src+0x148>)
 8011c82:	484b      	ldr	r0, [pc, #300]	@ (8011db0 <ip4_output_if_src+0x14c>)
 8011c84:	f002 f8d2 	bl	8013e2c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d060      	beq.n	8011d50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011c8e:	2314      	movs	r3, #20
 8011c90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011c92:	2114      	movs	r1, #20
 8011c94:	68f8      	ldr	r0, [r7, #12]
 8011c96:	f7f5 fc41 	bl	800751c <pbuf_add_header>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d002      	beq.n	8011ca6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011ca0:	f06f 0301 	mvn.w	r3, #1
 8011ca4:	e07c      	b.n	8011da0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	895b      	ldrh	r3, [r3, #10]
 8011cb0:	2b13      	cmp	r3, #19
 8011cb2:	d806      	bhi.n	8011cc2 <ip4_output_if_src+0x5e>
 8011cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8011da8 <ip4_output_if_src+0x144>)
 8011cb6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011cba:	493e      	ldr	r1, [pc, #248]	@ (8011db4 <ip4_output_if_src+0x150>)
 8011cbc:	483c      	ldr	r0, [pc, #240]	@ (8011db0 <ip4_output_if_src+0x14c>)
 8011cbe:	f002 f8b5 	bl	8013e2c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	78fa      	ldrb	r2, [r7, #3]
 8011cc6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011cc8:	69fb      	ldr	r3, [r7, #28]
 8011cca:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8011cce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011cd8:	8b7b      	ldrh	r3, [r7, #26]
 8011cda:	089b      	lsrs	r3, r3, #2
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	b2db      	uxtb	r3, r3
 8011ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011cf0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	891b      	ldrh	r3, [r3, #8]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7f4 f918 	bl	8005f2c <lwip_htons>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	461a      	mov	r2, r3
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	2200      	movs	r2, #0
 8011d08:	719a      	strb	r2, [r3, #6]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8011db8 <ip4_output_if_src+0x154>)
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7f4 f90a 	bl	8005f2c <lwip_htons>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011d20:	4b25      	ldr	r3, [pc, #148]	@ (8011db8 <ip4_output_if_src+0x154>)
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	3301      	adds	r3, #1
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	4b23      	ldr	r3, [pc, #140]	@ (8011db8 <ip4_output_if_src+0x154>)
 8011d2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d104      	bne.n	8011d3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011d32:	4b22      	ldr	r3, [pc, #136]	@ (8011dbc <ip4_output_if_src+0x158>)
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	60da      	str	r2, [r3, #12]
 8011d3a:	e003      	b.n	8011d44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	2200      	movs	r2, #0
 8011d48:	729a      	strb	r2, [r3, #10]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	72da      	strb	r2, [r3, #11]
 8011d4e:	e00f      	b.n	8011d70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	895b      	ldrh	r3, [r3, #10]
 8011d54:	2b13      	cmp	r3, #19
 8011d56:	d802      	bhi.n	8011d5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011d58:	f06f 0301 	mvn.w	r3, #1
 8011d5c:	e020      	b.n	8011da0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	691b      	ldr	r3, [r3, #16]
 8011d68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011d6a:	f107 0314 	add.w	r3, r7, #20
 8011d6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00c      	beq.n	8011d92 <ip4_output_if_src+0x12e>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	891a      	ldrh	r2, [r3, #8]
 8011d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d906      	bls.n	8011d92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f000 fe7d 	bl	8012a88 <ip4_frag>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	e006      	b.n	8011da0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d94:	695b      	ldr	r3, [r3, #20]
 8011d96:	687a      	ldr	r2, [r7, #4]
 8011d98:	68f9      	ldr	r1, [r7, #12]
 8011d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d9c:	4798      	blx	r3
 8011d9e:	4603      	mov	r3, r0
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3720      	adds	r7, #32
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	0801a730 	.word	0x0801a730
 8011dac:	0801a764 	.word	0x0801a764
 8011db0:	0801a770 	.word	0x0801a770
 8011db4:	0801a798 	.word	0x0801a798
 8011db8:	2000815a 	.word	0x2000815a
 8011dbc:	0801abf0 	.word	0x0801abf0

08011dc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd4:	d002      	beq.n	8011ddc <ip4_addr_isbroadcast_u32+0x1c>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d101      	bne.n	8011de0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e02a      	b.n	8011e36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011de6:	f003 0302 	and.w	r3, r3, #2
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011dee:	2300      	movs	r3, #0
 8011df0:	e021      	b.n	8011e36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	3304      	adds	r3, #4
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d101      	bne.n	8011e02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	e019      	b.n	8011e36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	3304      	adds	r3, #4
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	405a      	eors	r2, r3
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	3308      	adds	r3, #8
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	4013      	ands	r3, r2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10d      	bne.n	8011e34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	43da      	mvns	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	3308      	adds	r3, #8
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d101      	bne.n	8011e34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011e30:	2301      	movs	r3, #1
 8011e32:	e000      	b.n	8011e36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011e34:	2300      	movs	r3, #0
  }
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3714      	adds	r7, #20
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr
	...

08011e44 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b08a      	sub	sp, #40	@ 0x28
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8011e4e:	f107 030c 	add.w	r3, r7, #12
 8011e52:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8011e5c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e60:	3301      	adds	r3, #1
 8011e62:	4a89      	ldr	r2, [pc, #548]	@ (8012088 <ip4addr_aton+0x244>)
 8011e64:	4413      	add	r3, r2
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 0304 	and.w	r3, r3, #4
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d101      	bne.n	8011e74 <ip4addr_aton+0x30>
      return 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	e105      	b.n	8012080 <ip4addr_aton+0x23c>
    }
    val = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8011e78:	230a      	movs	r3, #10
 8011e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8011e7e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e82:	2b30      	cmp	r3, #48	@ 0x30
 8011e84:	d11c      	bne.n	8011ec0 <ip4addr_aton+0x7c>
      c = *++cp;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	607b      	str	r3, [r7, #4]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8011e94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011e98:	2b78      	cmp	r3, #120	@ 0x78
 8011e9a:	d003      	beq.n	8011ea4 <ip4addr_aton+0x60>
 8011e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ea0:	2b58      	cmp	r3, #88	@ 0x58
 8011ea2:	d10a      	bne.n	8011eba <ip4addr_aton+0x76>
        base = 16;
 8011ea4:	2310      	movs	r3, #16
 8011ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	3301      	adds	r3, #1
 8011eae:	607b      	str	r3, [r7, #4]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011eb8:	e002      	b.n	8011ec0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8011eba:	2308      	movs	r3, #8
 8011ebc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8011ec0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ec4:	3301      	adds	r3, #1
 8011ec6:	4a70      	ldr	r2, [pc, #448]	@ (8012088 <ip4addr_aton+0x244>)
 8011ec8:	4413      	add	r3, r2
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	f003 0304 	and.w	r3, r3, #4
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d011      	beq.n	8011ef8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8011ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eda:	fb03 f202 	mul.w	r2, r3, r2
 8011ede:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011ee2:	4413      	add	r3, r2
 8011ee4:	3b30      	subs	r3, #48	@ 0x30
 8011ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	3301      	adds	r3, #1
 8011eec:	607b      	str	r3, [r7, #4]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011ef6:	e7e3      	b.n	8011ec0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8011ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011efc:	2b10      	cmp	r3, #16
 8011efe:	d127      	bne.n	8011f50 <ip4addr_aton+0x10c>
 8011f00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f04:	3301      	adds	r3, #1
 8011f06:	4a60      	ldr	r2, [pc, #384]	@ (8012088 <ip4addr_aton+0x244>)
 8011f08:	4413      	add	r3, r2
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d01d      	beq.n	8011f50 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8011f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011f1c:	f102 010a 	add.w	r1, r2, #10
 8011f20:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8011f24:	3201      	adds	r2, #1
 8011f26:	4858      	ldr	r0, [pc, #352]	@ (8012088 <ip4addr_aton+0x244>)
 8011f28:	4402      	add	r2, r0
 8011f2a:	7812      	ldrb	r2, [r2, #0]
 8011f2c:	f002 0203 	and.w	r2, r2, #3
 8011f30:	2a02      	cmp	r2, #2
 8011f32:	d101      	bne.n	8011f38 <ip4addr_aton+0xf4>
 8011f34:	2261      	movs	r2, #97	@ 0x61
 8011f36:	e000      	b.n	8011f3a <ip4addr_aton+0xf6>
 8011f38:	2241      	movs	r2, #65	@ 0x41
 8011f3a:	1a8a      	subs	r2, r1, r2
 8011f3c:	4313      	orrs	r3, r2
 8011f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	3301      	adds	r3, #1
 8011f44:	607b      	str	r3, [r7, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 8011f4e:	e7b7      	b.n	8011ec0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8011f50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f56:	d114      	bne.n	8011f82 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8011f58:	f107 030c 	add.w	r3, r7, #12
 8011f5c:	330c      	adds	r3, #12
 8011f5e:	69fa      	ldr	r2, [r7, #28]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d301      	bcc.n	8011f68 <ip4addr_aton+0x124>
        return 0;
 8011f64:	2300      	movs	r3, #0
 8011f66:	e08b      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8011f68:	69fb      	ldr	r3, [r7, #28]
 8011f6a:	1d1a      	adds	r2, r3, #4
 8011f6c:	61fa      	str	r2, [r7, #28]
 8011f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f70:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	3301      	adds	r3, #1
 8011f76:	607b      	str	r3, [r7, #4]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 8011f80:	e76c      	b.n	8011e5c <ip4addr_aton+0x18>
    } else {
      break;
 8011f82:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8011f84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00b      	beq.n	8011fa4 <ip4addr_aton+0x160>
 8011f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011f90:	3301      	adds	r3, #1
 8011f92:	4a3d      	ldr	r2, [pc, #244]	@ (8012088 <ip4addr_aton+0x244>)
 8011f94:	4413      	add	r3, r2
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	f003 0308 	and.w	r3, r3, #8
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d101      	bne.n	8011fa4 <ip4addr_aton+0x160>
    return 0;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	e06d      	b.n	8012080 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8011fa4:	f107 030c 	add.w	r3, r7, #12
 8011fa8:	69fa      	ldr	r2, [r7, #28]
 8011faa:	1ad3      	subs	r3, r2, r3
 8011fac:	109b      	asrs	r3, r3, #2
 8011fae:	3301      	adds	r3, #1
 8011fb0:	2b04      	cmp	r3, #4
 8011fb2:	d853      	bhi.n	801205c <ip4addr_aton+0x218>
 8011fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fbc <ip4addr_aton+0x178>)
 8011fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fba:	bf00      	nop
 8011fbc:	08011fd1 	.word	0x08011fd1
 8011fc0:	0801206b 	.word	0x0801206b
 8011fc4:	08011fd5 	.word	0x08011fd5
 8011fc8:	08011ff7 	.word	0x08011ff7
 8011fcc:	08012025 	.word	0x08012025

    case 0:
      return 0;       /* initial nondigit */
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	e055      	b.n	8012080 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011fda:	d301      	bcc.n	8011fe0 <ip4addr_aton+0x19c>
        return 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	e04f      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	2bff      	cmp	r3, #255	@ 0xff
 8011fe4:	d901      	bls.n	8011fea <ip4addr_aton+0x1a6>
        return 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e04a      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	061b      	lsls	r3, r3, #24
 8011fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011ff4:	e03a      	b.n	801206c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ffc:	d301      	bcc.n	8012002 <ip4addr_aton+0x1be>
        return 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	e03e      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2bff      	cmp	r3, #255	@ 0xff
 8012006:	d802      	bhi.n	801200e <ip4addr_aton+0x1ca>
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	2bff      	cmp	r3, #255	@ 0xff
 801200c:	d901      	bls.n	8012012 <ip4addr_aton+0x1ce>
        return 0;
 801200e:	2300      	movs	r3, #0
 8012010:	e036      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	061a      	lsls	r2, r3, #24
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	041b      	lsls	r3, r3, #16
 801201a:	4313      	orrs	r3, r2
 801201c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801201e:	4313      	orrs	r3, r2
 8012020:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8012022:	e023      	b.n	801206c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8012024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012026:	2bff      	cmp	r3, #255	@ 0xff
 8012028:	d901      	bls.n	801202e <ip4addr_aton+0x1ea>
        return 0;
 801202a:	2300      	movs	r3, #0
 801202c:	e028      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2bff      	cmp	r3, #255	@ 0xff
 8012032:	d805      	bhi.n	8012040 <ip4addr_aton+0x1fc>
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	2bff      	cmp	r3, #255	@ 0xff
 8012038:	d802      	bhi.n	8012040 <ip4addr_aton+0x1fc>
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2bff      	cmp	r3, #255	@ 0xff
 801203e:	d901      	bls.n	8012044 <ip4addr_aton+0x200>
        return 0;
 8012040:	2300      	movs	r3, #0
 8012042:	e01d      	b.n	8012080 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	061a      	lsls	r2, r3, #24
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	041b      	lsls	r3, r3, #16
 801204c:	431a      	orrs	r2, r3
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	021b      	lsls	r3, r3, #8
 8012052:	4313      	orrs	r3, r2
 8012054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012056:	4313      	orrs	r3, r2
 8012058:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801205a:	e007      	b.n	801206c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801205c:	4b0b      	ldr	r3, [pc, #44]	@ (801208c <ip4addr_aton+0x248>)
 801205e:	22f9      	movs	r2, #249	@ 0xf9
 8012060:	490b      	ldr	r1, [pc, #44]	@ (8012090 <ip4addr_aton+0x24c>)
 8012062:	480c      	ldr	r0, [pc, #48]	@ (8012094 <ip4addr_aton+0x250>)
 8012064:	f001 fee2 	bl	8013e2c <iprintf>
      break;
 8012068:	e000      	b.n	801206c <ip4addr_aton+0x228>
      break;
 801206a:	bf00      	nop
  }
  if (addr) {
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d005      	beq.n	801207e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8012072:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012074:	f7f3 ff70 	bl	8005f58 <lwip_htonl>
 8012078:	4602      	mov	r2, r0
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801207e:	2301      	movs	r3, #1
}
 8012080:	4618      	mov	r0, r3
 8012082:	3728      	adds	r7, #40	@ 0x28
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	0801ae34 	.word	0x0801ae34
 801208c:	0801a7c8 	.word	0x0801a7c8
 8012090:	0801a804 	.word	0x0801a804
 8012094:	0801a810 	.word	0x0801a810

08012098 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801209e:	2300      	movs	r3, #0
 80120a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80120a2:	4b12      	ldr	r3, [pc, #72]	@ (80120ec <ip_reass_tmr+0x54>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80120a8:	e018      	b.n	80120dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	7fdb      	ldrb	r3, [r3, #31]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00b      	beq.n	80120ca <ip_reass_tmr+0x32>
      r->timer--;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	7fdb      	ldrb	r3, [r3, #31]
 80120b6:	3b01      	subs	r3, #1
 80120b8:	b2da      	uxtb	r2, r3
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	60fb      	str	r3, [r7, #12]
 80120c8:	e008      	b.n	80120dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80120d4:	68b9      	ldr	r1, [r7, #8]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 f80a 	bl	80120f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d1e3      	bne.n	80120aa <ip_reass_tmr+0x12>
    }
  }
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	3710      	adds	r7, #16
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	2000815c 	.word	0x2000815c

080120f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b088      	sub	sp, #32
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80120fe:	683a      	ldr	r2, [r7, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	429a      	cmp	r2, r3
 8012104:	d105      	bne.n	8012112 <ip_reass_free_complete_datagram+0x22>
 8012106:	4b45      	ldr	r3, [pc, #276]	@ (801221c <ip_reass_free_complete_datagram+0x12c>)
 8012108:	22ab      	movs	r2, #171	@ 0xab
 801210a:	4945      	ldr	r1, [pc, #276]	@ (8012220 <ip_reass_free_complete_datagram+0x130>)
 801210c:	4845      	ldr	r0, [pc, #276]	@ (8012224 <ip_reass_free_complete_datagram+0x134>)
 801210e:	f001 fe8d 	bl	8013e2c <iprintf>
  if (prev != NULL) {
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00a      	beq.n	801212e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	429a      	cmp	r2, r3
 8012120:	d005      	beq.n	801212e <ip_reass_free_complete_datagram+0x3e>
 8012122:	4b3e      	ldr	r3, [pc, #248]	@ (801221c <ip_reass_free_complete_datagram+0x12c>)
 8012124:	22ad      	movs	r2, #173	@ 0xad
 8012126:	4940      	ldr	r1, [pc, #256]	@ (8012228 <ip_reass_free_complete_datagram+0x138>)
 8012128:	483e      	ldr	r0, [pc, #248]	@ (8012224 <ip_reass_free_complete_datagram+0x134>)
 801212a:	f001 fe7f 	bl	8013e2c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	889b      	ldrh	r3, [r3, #4]
 801213a:	b29b      	uxth	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	d12a      	bne.n	8012196 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	6858      	ldr	r0, [r3, #4]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	3308      	adds	r3, #8
 8012156:	2214      	movs	r2, #20
 8012158:	4619      	mov	r1, r3
 801215a:	f001 ff9a 	bl	8014092 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801215e:	2101      	movs	r1, #1
 8012160:	69b8      	ldr	r0, [r7, #24]
 8012162:	f7ff faff 	bl	8011764 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012166:	69b8      	ldr	r0, [r7, #24]
 8012168:	f7f5 faf6 	bl	8007758 <pbuf_clen>
 801216c:	4603      	mov	r3, r0
 801216e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012170:	8bfa      	ldrh	r2, [r7, #30]
 8012172:	8a7b      	ldrh	r3, [r7, #18]
 8012174:	4413      	add	r3, r2
 8012176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801217a:	db05      	blt.n	8012188 <ip_reass_free_complete_datagram+0x98>
 801217c:	4b27      	ldr	r3, [pc, #156]	@ (801221c <ip_reass_free_complete_datagram+0x12c>)
 801217e:	22bc      	movs	r2, #188	@ 0xbc
 8012180:	492a      	ldr	r1, [pc, #168]	@ (801222c <ip_reass_free_complete_datagram+0x13c>)
 8012182:	4828      	ldr	r0, [pc, #160]	@ (8012224 <ip_reass_free_complete_datagram+0x134>)
 8012184:	f001 fe52 	bl	8013e2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012188:	8bfa      	ldrh	r2, [r7, #30]
 801218a:	8a7b      	ldrh	r3, [r7, #18]
 801218c:	4413      	add	r3, r2
 801218e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012190:	69b8      	ldr	r0, [r7, #24]
 8012192:	f7f5 fa59 	bl	8007648 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801219c:	e01f      	b.n	80121de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f7f5 fad2 	bl	8007758 <pbuf_clen>
 80121b4:	4603      	mov	r3, r0
 80121b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80121b8:	8bfa      	ldrh	r2, [r7, #30]
 80121ba:	8a7b      	ldrh	r3, [r7, #18]
 80121bc:	4413      	add	r3, r2
 80121be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121c2:	db05      	blt.n	80121d0 <ip_reass_free_complete_datagram+0xe0>
 80121c4:	4b15      	ldr	r3, [pc, #84]	@ (801221c <ip_reass_free_complete_datagram+0x12c>)
 80121c6:	22cc      	movs	r2, #204	@ 0xcc
 80121c8:	4918      	ldr	r1, [pc, #96]	@ (801222c <ip_reass_free_complete_datagram+0x13c>)
 80121ca:	4816      	ldr	r0, [pc, #88]	@ (8012224 <ip_reass_free_complete_datagram+0x134>)
 80121cc:	f001 fe2e 	bl	8013e2c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80121d0:	8bfa      	ldrh	r2, [r7, #30]
 80121d2:	8a7b      	ldrh	r3, [r7, #18]
 80121d4:	4413      	add	r3, r2
 80121d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80121d8:	68f8      	ldr	r0, [r7, #12]
 80121da:	f7f5 fa35 	bl	8007648 <pbuf_free>
  while (p != NULL) {
 80121de:	69bb      	ldr	r3, [r7, #24]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d1dc      	bne.n	801219e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 f8c2 	bl	8012370 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80121ec:	4b10      	ldr	r3, [pc, #64]	@ (8012230 <ip_reass_free_complete_datagram+0x140>)
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	8bfa      	ldrh	r2, [r7, #30]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d905      	bls.n	8012202 <ip_reass_free_complete_datagram+0x112>
 80121f6:	4b09      	ldr	r3, [pc, #36]	@ (801221c <ip_reass_free_complete_datagram+0x12c>)
 80121f8:	22d2      	movs	r2, #210	@ 0xd2
 80121fa:	490e      	ldr	r1, [pc, #56]	@ (8012234 <ip_reass_free_complete_datagram+0x144>)
 80121fc:	4809      	ldr	r0, [pc, #36]	@ (8012224 <ip_reass_free_complete_datagram+0x134>)
 80121fe:	f001 fe15 	bl	8013e2c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012202:	4b0b      	ldr	r3, [pc, #44]	@ (8012230 <ip_reass_free_complete_datagram+0x140>)
 8012204:	881a      	ldrh	r2, [r3, #0]
 8012206:	8bfb      	ldrh	r3, [r7, #30]
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	b29a      	uxth	r2, r3
 801220c:	4b08      	ldr	r3, [pc, #32]	@ (8012230 <ip_reass_free_complete_datagram+0x140>)
 801220e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012210:	8bfb      	ldrh	r3, [r7, #30]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3720      	adds	r7, #32
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	0801a838 	.word	0x0801a838
 8012220:	0801a874 	.word	0x0801a874
 8012224:	0801a880 	.word	0x0801a880
 8012228:	0801a8a8 	.word	0x0801a8a8
 801222c:	0801a8bc 	.word	0x0801a8bc
 8012230:	20008160 	.word	0x20008160
 8012234:	0801a8dc 	.word	0x0801a8dc

08012238 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b08a      	sub	sp, #40	@ 0x28
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012242:	2300      	movs	r3, #0
 8012244:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012246:	2300      	movs	r3, #0
 8012248:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801224a:	2300      	movs	r3, #0
 801224c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801224e:	2300      	movs	r3, #0
 8012250:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012256:	4b28      	ldr	r3, [pc, #160]	@ (80122f8 <ip_reass_remove_oldest_datagram+0xc0>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801225c:	e030      	b.n	80122c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012260:	695a      	ldr	r2, [r3, #20]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	429a      	cmp	r2, r3
 8012268:	d10c      	bne.n	8012284 <ip_reass_remove_oldest_datagram+0x4c>
 801226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226c:	699a      	ldr	r2, [r3, #24]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	691b      	ldr	r3, [r3, #16]
 8012272:	429a      	cmp	r2, r3
 8012274:	d106      	bne.n	8012284 <ip_reass_remove_oldest_datagram+0x4c>
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012278:	899a      	ldrh	r2, [r3, #12]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	889b      	ldrh	r3, [r3, #4]
 801227e:	b29b      	uxth	r3, r3
 8012280:	429a      	cmp	r2, r3
 8012282:	d014      	beq.n	80122ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	3301      	adds	r3, #1
 8012288:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801228a:	6a3b      	ldr	r3, [r7, #32]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d104      	bne.n	801229a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012292:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	61bb      	str	r3, [r7, #24]
 8012298:	e009      	b.n	80122ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229c:	7fda      	ldrb	r2, [r3, #31]
 801229e:	6a3b      	ldr	r3, [r7, #32]
 80122a0:	7fdb      	ldrb	r3, [r3, #31]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d803      	bhi.n	80122ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80122a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80122ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80122b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80122ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80122c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d1cb      	bne.n	801225e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d008      	beq.n	80122de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80122cc:	69b9      	ldr	r1, [r7, #24]
 80122ce:	6a38      	ldr	r0, [r7, #32]
 80122d0:	f7ff ff0e 	bl	80120f0 <ip_reass_free_complete_datagram>
 80122d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80122de:	697a      	ldr	r2, [r7, #20]
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	da02      	bge.n	80122ec <ip_reass_remove_oldest_datagram+0xb4>
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	dcac      	bgt.n	8012246 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80122ec:	697b      	ldr	r3, [r7, #20]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3728      	adds	r7, #40	@ 0x28
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	2000815c 	.word	0x2000815c

080122fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012306:	2004      	movs	r0, #4
 8012308:	f7f4 faac 	bl	8006864 <memp_malloc>
 801230c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d110      	bne.n	8012336 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012314:	6839      	ldr	r1, [r7, #0]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7ff ff8e 	bl	8012238 <ip_reass_remove_oldest_datagram>
 801231c:	4602      	mov	r2, r0
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	4293      	cmp	r3, r2
 8012322:	dc03      	bgt.n	801232c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012324:	2004      	movs	r0, #4
 8012326:	f7f4 fa9d 	bl	8006864 <memp_malloc>
 801232a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d101      	bne.n	8012336 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012332:	2300      	movs	r3, #0
 8012334:	e016      	b.n	8012364 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012336:	2220      	movs	r2, #32
 8012338:	2100      	movs	r1, #0
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f001 fe17 	bl	8013f6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	220f      	movs	r2, #15
 8012344:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012346:	4b09      	ldr	r3, [pc, #36]	@ (801236c <ip_reass_enqueue_new_datagram+0x70>)
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801234e:	4a07      	ldr	r2, [pc, #28]	@ (801236c <ip_reass_enqueue_new_datagram+0x70>)
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	3308      	adds	r3, #8
 8012358:	2214      	movs	r2, #20
 801235a:	6879      	ldr	r1, [r7, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f001 fe98 	bl	8014092 <memcpy>
  return ipr;
 8012362:	68fb      	ldr	r3, [r7, #12]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	2000815c 	.word	0x2000815c

08012370 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801237a:	4b10      	ldr	r3, [pc, #64]	@ (80123bc <ip_reass_dequeue_datagram+0x4c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	429a      	cmp	r2, r3
 8012382:	d104      	bne.n	801238e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4a0c      	ldr	r2, [pc, #48]	@ (80123bc <ip_reass_dequeue_datagram+0x4c>)
 801238a:	6013      	str	r3, [r2, #0]
 801238c:	e00d      	b.n	80123aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d106      	bne.n	80123a2 <ip_reass_dequeue_datagram+0x32>
 8012394:	4b0a      	ldr	r3, [pc, #40]	@ (80123c0 <ip_reass_dequeue_datagram+0x50>)
 8012396:	f240 1245 	movw	r2, #325	@ 0x145
 801239a:	490a      	ldr	r1, [pc, #40]	@ (80123c4 <ip_reass_dequeue_datagram+0x54>)
 801239c:	480a      	ldr	r0, [pc, #40]	@ (80123c8 <ip_reass_dequeue_datagram+0x58>)
 801239e:	f001 fd45 	bl	8013e2c <iprintf>
    prev->next = ipr->next;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80123aa:	6879      	ldr	r1, [r7, #4]
 80123ac:	2004      	movs	r0, #4
 80123ae:	f7f4 fac9 	bl	8006944 <memp_free>
}
 80123b2:	bf00      	nop
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	2000815c 	.word	0x2000815c
 80123c0:	0801a838 	.word	0x0801a838
 80123c4:	0801a900 	.word	0x0801a900
 80123c8:	0801a880 	.word	0x0801a880

080123cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b08c      	sub	sp, #48	@ 0x30
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80123d8:	2300      	movs	r3, #0
 80123da:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80123dc:	2301      	movs	r3, #1
 80123de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	885b      	ldrh	r3, [r3, #2]
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7f3 fd9d 	bl	8005f2c <lwip_htons>
 80123f2:	4603      	mov	r3, r0
 80123f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	f003 030f 	and.w	r3, r3, #15
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012404:	7e7b      	ldrb	r3, [r7, #25]
 8012406:	b29b      	uxth	r3, r3
 8012408:	8b7a      	ldrh	r2, [r7, #26]
 801240a:	429a      	cmp	r2, r3
 801240c:	d202      	bcs.n	8012414 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801240e:	f04f 33ff 	mov.w	r3, #4294967295
 8012412:	e135      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012414:	7e7b      	ldrb	r3, [r7, #25]
 8012416:	b29b      	uxth	r3, r3
 8012418:	8b7a      	ldrh	r2, [r7, #26]
 801241a:	1ad3      	subs	r3, r2, r3
 801241c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801241e:	69fb      	ldr	r3, [r7, #28]
 8012420:	88db      	ldrh	r3, [r3, #6]
 8012422:	b29b      	uxth	r3, r3
 8012424:	4618      	mov	r0, r3
 8012426:	f7f3 fd81 	bl	8005f2c <lwip_htons>
 801242a:	4603      	mov	r3, r0
 801242c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012430:	b29b      	uxth	r3, r3
 8012432:	00db      	lsls	r3, r3, #3
 8012434:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801243c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801243e:	2200      	movs	r2, #0
 8012440:	701a      	strb	r2, [r3, #0]
 8012442:	2200      	movs	r2, #0
 8012444:	705a      	strb	r2, [r3, #1]
 8012446:	2200      	movs	r2, #0
 8012448:	709a      	strb	r2, [r3, #2]
 801244a:	2200      	movs	r2, #0
 801244c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012450:	8afa      	ldrh	r2, [r7, #22]
 8012452:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012454:	8afa      	ldrh	r2, [r7, #22]
 8012456:	8b7b      	ldrh	r3, [r7, #26]
 8012458:	4413      	add	r3, r2
 801245a:	b29a      	uxth	r2, r3
 801245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801245e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012462:	88db      	ldrh	r3, [r3, #6]
 8012464:	b29b      	uxth	r3, r3
 8012466:	8afa      	ldrh	r2, [r7, #22]
 8012468:	429a      	cmp	r2, r3
 801246a:	d902      	bls.n	8012472 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801246c:	f04f 33ff 	mov.w	r3, #4294967295
 8012470:	e106      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	627b      	str	r3, [r7, #36]	@ 0x24
 8012478:	e068      	b.n	801254c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801247a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012482:	889b      	ldrh	r3, [r3, #4]
 8012484:	b29a      	uxth	r2, r3
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	889b      	ldrh	r3, [r3, #4]
 801248a:	b29b      	uxth	r3, r3
 801248c:	429a      	cmp	r2, r3
 801248e:	d235      	bcs.n	80124fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012494:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012498:	2b00      	cmp	r3, #0
 801249a:	d020      	beq.n	80124de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801249e:	889b      	ldrh	r3, [r3, #4]
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124a4:	88db      	ldrh	r3, [r3, #6]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d307      	bcc.n	80124bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80124ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ae:	88db      	ldrh	r3, [r3, #6]
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	889b      	ldrh	r3, [r3, #4]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d902      	bls.n	80124c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124bc:	f04f 33ff 	mov.w	r3, #4294967295
 80124c0:	e0de      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80124c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80124c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ca:	88db      	ldrh	r3, [r3, #6]
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124d0:	889b      	ldrh	r3, [r3, #4]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d03d      	beq.n	8012554 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80124d8:	2300      	movs	r3, #0
 80124da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80124dc:	e03a      	b.n	8012554 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80124de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e0:	88db      	ldrh	r3, [r3, #6]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	889b      	ldrh	r3, [r3, #4]
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d902      	bls.n	80124f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124ee:	f04f 33ff 	mov.w	r3, #4294967295
 80124f2:	e0c5      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	68ba      	ldr	r2, [r7, #8]
 80124f8:	605a      	str	r2, [r3, #4]
      break;
 80124fa:	e02b      	b.n	8012554 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80124fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fe:	889b      	ldrh	r3, [r3, #4]
 8012500:	b29a      	uxth	r2, r3
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	889b      	ldrh	r3, [r3, #4]
 8012506:	b29b      	uxth	r3, r3
 8012508:	429a      	cmp	r2, r3
 801250a:	d102      	bne.n	8012512 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801250c:	f04f 33ff 	mov.w	r3, #4294967295
 8012510:	e0b6      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012514:	889b      	ldrh	r3, [r3, #4]
 8012516:	b29a      	uxth	r2, r3
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	88db      	ldrh	r3, [r3, #6]
 801251c:	b29b      	uxth	r3, r3
 801251e:	429a      	cmp	r2, r3
 8012520:	d202      	bcs.n	8012528 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012522:	f04f 33ff 	mov.w	r3, #4294967295
 8012526:	e0ab      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801252a:	2b00      	cmp	r3, #0
 801252c:	d009      	beq.n	8012542 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801252e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012530:	88db      	ldrh	r3, [r3, #6]
 8012532:	b29a      	uxth	r2, r3
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	889b      	ldrh	r3, [r3, #4]
 8012538:	b29b      	uxth	r3, r3
 801253a:	429a      	cmp	r2, r3
 801253c:	d001      	beq.n	8012542 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254e:	2b00      	cmp	r3, #0
 8012550:	d193      	bne.n	801247a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012552:	e000      	b.n	8012556 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012554:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012558:	2b00      	cmp	r3, #0
 801255a:	d12d      	bne.n	80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801255e:	2b00      	cmp	r3, #0
 8012560:	d01c      	beq.n	801259c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012564:	88db      	ldrh	r3, [r3, #6]
 8012566:	b29a      	uxth	r2, r3
 8012568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801256a:	889b      	ldrh	r3, [r3, #4]
 801256c:	b29b      	uxth	r3, r3
 801256e:	429a      	cmp	r2, r3
 8012570:	d906      	bls.n	8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012572:	4b45      	ldr	r3, [pc, #276]	@ (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012574:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8012578:	4944      	ldr	r1, [pc, #272]	@ (801268c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801257a:	4845      	ldr	r0, [pc, #276]	@ (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801257c:	f001 fc56 	bl	8013e2c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012582:	68ba      	ldr	r2, [r7, #8]
 8012584:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012588:	88db      	ldrh	r3, [r3, #6]
 801258a:	b29a      	uxth	r2, r3
 801258c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258e:	889b      	ldrh	r3, [r3, #4]
 8012590:	b29b      	uxth	r3, r3
 8012592:	429a      	cmp	r2, r3
 8012594:	d010      	beq.n	80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012596:	2300      	movs	r3, #0
 8012598:	623b      	str	r3, [r7, #32]
 801259a:	e00d      	b.n	80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d006      	beq.n	80125b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80125a4:	4b38      	ldr	r3, [pc, #224]	@ (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125a6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80125aa:	493a      	ldr	r1, [pc, #232]	@ (8012694 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80125ac:	4838      	ldr	r0, [pc, #224]	@ (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125ae:	f001 fc3d 	bl	8013e2c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	68ba      	ldr	r2, [r7, #8]
 80125b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d105      	bne.n	80125ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	7f9b      	ldrb	r3, [r3, #30]
 80125c2:	f003 0301 	and.w	r3, r3, #1
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d059      	beq.n	801267e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80125ca:	6a3b      	ldr	r3, [r7, #32]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d04f      	beq.n	8012670 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d006      	beq.n	80125e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	685b      	ldr	r3, [r3, #4]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	889b      	ldrh	r3, [r3, #4]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	623b      	str	r3, [r7, #32]
 80125ea:	e041      	b.n	8012670 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80125ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80125f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80125f6:	e012      	b.n	801261e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80125f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80125fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012600:	88db      	ldrh	r3, [r3, #6]
 8012602:	b29a      	uxth	r2, r3
 8012604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012606:	889b      	ldrh	r3, [r3, #4]
 8012608:	b29b      	uxth	r3, r3
 801260a:	429a      	cmp	r2, r3
 801260c:	d002      	beq.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	623b      	str	r3, [r7, #32]
            break;
 8012612:	e007      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012616:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8012618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	2b00      	cmp	r3, #0
 8012622:	d1e9      	bne.n	80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d022      	beq.n	8012670 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d106      	bne.n	8012640 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012632:	4b15      	ldr	r3, [pc, #84]	@ (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012634:	f240 12df 	movw	r2, #479	@ 0x1df
 8012638:	4917      	ldr	r1, [pc, #92]	@ (8012698 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801263a:	4815      	ldr	r0, [pc, #84]	@ (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801263c:	f001 fbf6 	bl	8013e2c <iprintf>
          LWIP_ASSERT("sanity check",
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012648:	429a      	cmp	r2, r3
 801264a:	d106      	bne.n	801265a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801264c:	4b0e      	ldr	r3, [pc, #56]	@ (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801264e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012652:	4911      	ldr	r1, [pc, #68]	@ (8012698 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012654:	480e      	ldr	r0, [pc, #56]	@ (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012656:	f001 fbe9 	bl	8013e2c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801265a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d006      	beq.n	8012670 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012662:	4b09      	ldr	r3, [pc, #36]	@ (8012688 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012664:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8012668:	490c      	ldr	r1, [pc, #48]	@ (801269c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801266a:	4809      	ldr	r0, [pc, #36]	@ (8012690 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801266c:	f001 fbde 	bl	8013e2c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	2b00      	cmp	r3, #0
 8012674:	bf14      	ite	ne
 8012676:	2301      	movne	r3, #1
 8012678:	2300      	moveq	r3, #0
 801267a:	b2db      	uxtb	r3, r3
 801267c:	e000      	b.n	8012680 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801267e:	2300      	movs	r3, #0
}
 8012680:	4618      	mov	r0, r3
 8012682:	3730      	adds	r7, #48	@ 0x30
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	0801a838 	.word	0x0801a838
 801268c:	0801a91c 	.word	0x0801a91c
 8012690:	0801a880 	.word	0x0801a880
 8012694:	0801a93c 	.word	0x0801a93c
 8012698:	0801a974 	.word	0x0801a974
 801269c:	0801a984 	.word	0x0801a984

080126a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b08e      	sub	sp, #56	@ 0x38
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	685b      	ldr	r3, [r3, #4]
 80126ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80126ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	f003 030f 	and.w	r3, r3, #15
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	009b      	lsls	r3, r3, #2
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	2b14      	cmp	r3, #20
 80126be:	f040 8171 	bne.w	80129a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80126c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126c4:	88db      	ldrh	r3, [r3, #6]
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f3 fc2f 	bl	8005f2c <lwip_htons>
 80126ce:	4603      	mov	r3, r0
 80126d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80126da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	b29b      	uxth	r3, r3
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7f3 fc23 	bl	8005f2c <lwip_htons>
 80126e6:	4603      	mov	r3, r0
 80126e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80126ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f003 030f 	and.w	r3, r3, #15
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80126fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80126fe:	b29b      	uxth	r3, r3
 8012700:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012702:	429a      	cmp	r2, r3
 8012704:	f0c0 8150 	bcc.w	80129a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012708:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801270c:	b29b      	uxth	r3, r3
 801270e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7f5 f81f 	bl	8007758 <pbuf_clen>
 801271a:	4603      	mov	r3, r0
 801271c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801271e:	4b8c      	ldr	r3, [pc, #560]	@ (8012950 <ip4_reass+0x2b0>)
 8012720:	881b      	ldrh	r3, [r3, #0]
 8012722:	461a      	mov	r2, r3
 8012724:	8c3b      	ldrh	r3, [r7, #32]
 8012726:	4413      	add	r3, r2
 8012728:	2b0a      	cmp	r3, #10
 801272a:	dd10      	ble.n	801274e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801272c:	8c3b      	ldrh	r3, [r7, #32]
 801272e:	4619      	mov	r1, r3
 8012730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012732:	f7ff fd81 	bl	8012238 <ip_reass_remove_oldest_datagram>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	f000 8137 	beq.w	80129ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801273e:	4b84      	ldr	r3, [pc, #528]	@ (8012950 <ip4_reass+0x2b0>)
 8012740:	881b      	ldrh	r3, [r3, #0]
 8012742:	461a      	mov	r2, r3
 8012744:	8c3b      	ldrh	r3, [r7, #32]
 8012746:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012748:	2b0a      	cmp	r3, #10
 801274a:	f300 812f 	bgt.w	80129ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801274e:	4b81      	ldr	r3, [pc, #516]	@ (8012954 <ip4_reass+0x2b4>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	633b      	str	r3, [r7, #48]	@ 0x30
 8012754:	e015      	b.n	8012782 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012758:	695a      	ldr	r2, [r3, #20]
 801275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801275c:	68db      	ldr	r3, [r3, #12]
 801275e:	429a      	cmp	r2, r3
 8012760:	d10c      	bne.n	801277c <ip4_reass+0xdc>
 8012762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012764:	699a      	ldr	r2, [r3, #24]
 8012766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012768:	691b      	ldr	r3, [r3, #16]
 801276a:	429a      	cmp	r2, r3
 801276c:	d106      	bne.n	801277c <ip4_reass+0xdc>
 801276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012770:	899a      	ldrh	r2, [r3, #12]
 8012772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012774:	889b      	ldrh	r3, [r3, #4]
 8012776:	b29b      	uxth	r3, r3
 8012778:	429a      	cmp	r2, r3
 801277a:	d006      	beq.n	801278a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	633b      	str	r3, [r7, #48]	@ 0x30
 8012782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1e6      	bne.n	8012756 <ip4_reass+0xb6>
 8012788:	e000      	b.n	801278c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801278a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801278e:	2b00      	cmp	r3, #0
 8012790:	d109      	bne.n	80127a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012792:	8c3b      	ldrh	r3, [r7, #32]
 8012794:	4619      	mov	r1, r3
 8012796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012798:	f7ff fdb0 	bl	80122fc <ip_reass_enqueue_new_datagram>
 801279c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d11c      	bne.n	80127de <ip4_reass+0x13e>
      goto nullreturn;
 80127a4:	e105      	b.n	80129b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80127a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a8:	88db      	ldrh	r3, [r3, #6]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7f3 fbbd 	bl	8005f2c <lwip_htons>
 80127b2:	4603      	mov	r3, r0
 80127b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d110      	bne.n	80127de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80127bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127be:	89db      	ldrh	r3, [r3, #14]
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7f3 fbb3 	bl	8005f2c <lwip_htons>
 80127c6:	4603      	mov	r3, r0
 80127c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d006      	beq.n	80127de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80127d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127d2:	3308      	adds	r3, #8
 80127d4:	2214      	movs	r2, #20
 80127d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127d8:	4618      	mov	r0, r3
 80127da:	f001 fc5a 	bl	8014092 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80127de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e0:	88db      	ldrh	r3, [r3, #6]
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	f003 0320 	and.w	r3, r3, #32
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	bf0c      	ite	eq
 80127ec:	2301      	moveq	r3, #1
 80127ee:	2300      	movne	r3, #0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80127f4:	69fb      	ldr	r3, [r7, #28]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00e      	beq.n	8012818 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80127fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80127fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80127fe:	4413      	add	r3, r2
 8012800:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012802:	8b7a      	ldrh	r2, [r7, #26]
 8012804:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012806:	429a      	cmp	r2, r3
 8012808:	f0c0 80a0 	bcc.w	801294c <ip4_reass+0x2ac>
 801280c:	8b7b      	ldrh	r3, [r7, #26]
 801280e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012812:	4293      	cmp	r3, r2
 8012814:	f200 809a 	bhi.w	801294c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012818:	69fa      	ldr	r2, [r7, #28]
 801281a:	6879      	ldr	r1, [r7, #4]
 801281c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801281e:	f7ff fdd5 	bl	80123cc <ip_reass_chain_frag_into_datagram_and_validate>
 8012822:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801282a:	f000 809b 	beq.w	8012964 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801282e:	4b48      	ldr	r3, [pc, #288]	@ (8012950 <ip4_reass+0x2b0>)
 8012830:	881a      	ldrh	r2, [r3, #0]
 8012832:	8c3b      	ldrh	r3, [r7, #32]
 8012834:	4413      	add	r3, r2
 8012836:	b29a      	uxth	r2, r3
 8012838:	4b45      	ldr	r3, [pc, #276]	@ (8012950 <ip4_reass+0x2b0>)
 801283a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d00d      	beq.n	801285e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012842:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012844:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012846:	4413      	add	r3, r2
 8012848:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801284c:	8a7a      	ldrh	r2, [r7, #18]
 801284e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012852:	7f9b      	ldrb	r3, [r3, #30]
 8012854:	f043 0301 	orr.w	r3, r3, #1
 8012858:	b2da      	uxtb	r2, r3
 801285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801285c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d171      	bne.n	8012948 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012866:	8b9b      	ldrh	r3, [r3, #28]
 8012868:	3314      	adds	r3, #20
 801286a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012880:	3308      	adds	r3, #8
 8012882:	2214      	movs	r2, #20
 8012884:	4619      	mov	r1, r3
 8012886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012888:	f001 fc03 	bl	8014092 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801288c:	8a3b      	ldrh	r3, [r7, #16]
 801288e:	4618      	mov	r0, r3
 8012890:	f7f3 fb4c 	bl	8005f2c <lwip_htons>
 8012894:	4603      	mov	r3, r0
 8012896:	461a      	mov	r2, r3
 8012898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801289a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801289e:	2200      	movs	r2, #0
 80128a0:	719a      	strb	r2, [r3, #6]
 80128a2:	2200      	movs	r2, #0
 80128a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80128a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128a8:	2200      	movs	r2, #0
 80128aa:	729a      	strb	r2, [r3, #10]
 80128ac:	2200      	movs	r2, #0
 80128ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80128b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80128b6:	e00d      	b.n	80128d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80128b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80128be:	2114      	movs	r1, #20
 80128c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80128c2:	f7f4 fe3b 	bl	800753c <pbuf_remove_header>
      pbuf_cat(p, r);
 80128c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7f4 ff7f 	bl	80077cc <pbuf_cat>
      r = iprh->next_pbuf;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80128d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d1ee      	bne.n	80128b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80128da:	4b1e      	ldr	r3, [pc, #120]	@ (8012954 <ip4_reass+0x2b4>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d102      	bne.n	80128ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 80128e4:	2300      	movs	r3, #0
 80128e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128e8:	e010      	b.n	801290c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80128ea:	4b1a      	ldr	r3, [pc, #104]	@ (8012954 <ip4_reass+0x2b4>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128f0:	e007      	b.n	8012902 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80128f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d006      	beq.n	801290a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80128fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012904:	2b00      	cmp	r3, #0
 8012906:	d1f4      	bne.n	80128f2 <ip4_reass+0x252>
 8012908:	e000      	b.n	801290c <ip4_reass+0x26c>
          break;
 801290a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801290c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801290e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012910:	f7ff fd2e 	bl	8012370 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7f4 ff1f 	bl	8007758 <pbuf_clen>
 801291a:	4603      	mov	r3, r0
 801291c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801291e:	4b0c      	ldr	r3, [pc, #48]	@ (8012950 <ip4_reass+0x2b0>)
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	8c3a      	ldrh	r2, [r7, #32]
 8012924:	429a      	cmp	r2, r3
 8012926:	d906      	bls.n	8012936 <ip4_reass+0x296>
 8012928:	4b0b      	ldr	r3, [pc, #44]	@ (8012958 <ip4_reass+0x2b8>)
 801292a:	f240 229b 	movw	r2, #667	@ 0x29b
 801292e:	490b      	ldr	r1, [pc, #44]	@ (801295c <ip4_reass+0x2bc>)
 8012930:	480b      	ldr	r0, [pc, #44]	@ (8012960 <ip4_reass+0x2c0>)
 8012932:	f001 fa7b 	bl	8013e2c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012936:	4b06      	ldr	r3, [pc, #24]	@ (8012950 <ip4_reass+0x2b0>)
 8012938:	881a      	ldrh	r2, [r3, #0]
 801293a:	8c3b      	ldrh	r3, [r7, #32]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	b29a      	uxth	r2, r3
 8012940:	4b03      	ldr	r3, [pc, #12]	@ (8012950 <ip4_reass+0x2b0>)
 8012942:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	e038      	b.n	80129ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012948:	2300      	movs	r3, #0
 801294a:	e036      	b.n	80129ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801294c:	bf00      	nop
 801294e:	e00a      	b.n	8012966 <ip4_reass+0x2c6>
 8012950:	20008160 	.word	0x20008160
 8012954:	2000815c 	.word	0x2000815c
 8012958:	0801a838 	.word	0x0801a838
 801295c:	0801a9a8 	.word	0x0801a9a8
 8012960:	0801a880 	.word	0x0801a880
    goto nullreturn_ipr;
 8012964:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012968:	2b00      	cmp	r3, #0
 801296a:	d106      	bne.n	801297a <ip4_reass+0x2da>
 801296c:	4b15      	ldr	r3, [pc, #84]	@ (80129c4 <ip4_reass+0x324>)
 801296e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8012972:	4915      	ldr	r1, [pc, #84]	@ (80129c8 <ip4_reass+0x328>)
 8012974:	4815      	ldr	r0, [pc, #84]	@ (80129cc <ip4_reass+0x32c>)
 8012976:	f001 fa59 	bl	8013e2c <iprintf>
  if (ipr->p == NULL) {
 801297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d116      	bne.n	80129b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012982:	4b13      	ldr	r3, [pc, #76]	@ (80129d0 <ip4_reass+0x330>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012988:	429a      	cmp	r2, r3
 801298a:	d006      	beq.n	801299a <ip4_reass+0x2fa>
 801298c:	4b0d      	ldr	r3, [pc, #52]	@ (80129c4 <ip4_reass+0x324>)
 801298e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012992:	4910      	ldr	r1, [pc, #64]	@ (80129d4 <ip4_reass+0x334>)
 8012994:	480d      	ldr	r0, [pc, #52]	@ (80129cc <ip4_reass+0x32c>)
 8012996:	f001 fa49 	bl	8013e2c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801299a:	2100      	movs	r1, #0
 801299c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801299e:	f7ff fce7 	bl	8012370 <ip_reass_dequeue_datagram>
 80129a2:	e006      	b.n	80129b2 <ip4_reass+0x312>
    goto nullreturn;
 80129a4:	bf00      	nop
 80129a6:	e004      	b.n	80129b2 <ip4_reass+0x312>
    goto nullreturn;
 80129a8:	bf00      	nop
 80129aa:	e002      	b.n	80129b2 <ip4_reass+0x312>
      goto nullreturn;
 80129ac:	bf00      	nop
 80129ae:	e000      	b.n	80129b2 <ip4_reass+0x312>
  }

nullreturn:
 80129b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7f4 fe48 	bl	8007648 <pbuf_free>
  return NULL;
 80129b8:	2300      	movs	r3, #0
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3738      	adds	r7, #56	@ 0x38
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	0801a838 	.word	0x0801a838
 80129c8:	0801a9c4 	.word	0x0801a9c4
 80129cc:	0801a880 	.word	0x0801a880
 80129d0:	2000815c 	.word	0x2000815c
 80129d4:	0801a9d0 	.word	0x0801a9d0

080129d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80129dc:	2005      	movs	r0, #5
 80129de:	f7f3 ff41 	bl	8006864 <memp_malloc>
 80129e2:	4603      	mov	r3, r0
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d106      	bne.n	8012a04 <ip_frag_free_pbuf_custom_ref+0x1c>
 80129f6:	4b07      	ldr	r3, [pc, #28]	@ (8012a14 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80129f8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80129fc:	4906      	ldr	r1, [pc, #24]	@ (8012a18 <ip_frag_free_pbuf_custom_ref+0x30>)
 80129fe:	4807      	ldr	r0, [pc, #28]	@ (8012a1c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012a00:	f001 fa14 	bl	8013e2c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012a04:	6879      	ldr	r1, [r7, #4]
 8012a06:	2005      	movs	r0, #5
 8012a08:	f7f3 ff9c 	bl	8006944 <memp_free>
}
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	0801a838 	.word	0x0801a838
 8012a18:	0801a9f0 	.word	0x0801a9f0
 8012a1c:	0801a880 	.word	0x0801a880

08012a20 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <ipfrag_free_pbuf_custom+0x20>
 8012a32:	4b11      	ldr	r3, [pc, #68]	@ (8012a78 <ipfrag_free_pbuf_custom+0x58>)
 8012a34:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012a38:	4910      	ldr	r1, [pc, #64]	@ (8012a7c <ipfrag_free_pbuf_custom+0x5c>)
 8012a3a:	4811      	ldr	r0, [pc, #68]	@ (8012a80 <ipfrag_free_pbuf_custom+0x60>)
 8012a3c:	f001 f9f6 	bl	8013e2c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012a40:	68fa      	ldr	r2, [r7, #12]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d006      	beq.n	8012a56 <ipfrag_free_pbuf_custom+0x36>
 8012a48:	4b0b      	ldr	r3, [pc, #44]	@ (8012a78 <ipfrag_free_pbuf_custom+0x58>)
 8012a4a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012a4e:	490d      	ldr	r1, [pc, #52]	@ (8012a84 <ipfrag_free_pbuf_custom+0x64>)
 8012a50:	480b      	ldr	r0, [pc, #44]	@ (8012a80 <ipfrag_free_pbuf_custom+0x60>)
 8012a52:	f001 f9eb 	bl	8013e2c <iprintf>
  if (pcr->original != NULL) {
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	695b      	ldr	r3, [r3, #20]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d004      	beq.n	8012a68 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	695b      	ldr	r3, [r3, #20]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f4 fdf0 	bl	8007648 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f7ff ffbd 	bl	80129e8 <ip_frag_free_pbuf_custom_ref>
}
 8012a6e:	bf00      	nop
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	0801a838 	.word	0x0801a838
 8012a7c:	0801a9fc 	.word	0x0801a9fc
 8012a80:	0801a880 	.word	0x0801a880
 8012a84:	0801aa08 	.word	0x0801aa08

08012a88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b094      	sub	sp, #80	@ 0x50
 8012a8c:	af02      	add	r7, sp, #8
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a9e:	3b14      	subs	r3, #20
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	da00      	bge.n	8012aa6 <ip4_frag+0x1e>
 8012aa4:	3307      	adds	r3, #7
 8012aa6:	10db      	asrs	r3, r3, #3
 8012aa8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012aaa:	2314      	movs	r3, #20
 8012aac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	f003 030f 	and.w	r3, r3, #15
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	2b14      	cmp	r3, #20
 8012ac8:	d002      	beq.n	8012ad0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012aca:	f06f 0305 	mvn.w	r3, #5
 8012ace:	e110      	b.n	8012cf2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	895b      	ldrh	r3, [r3, #10]
 8012ad4:	2b13      	cmp	r3, #19
 8012ad6:	d809      	bhi.n	8012aec <ip4_frag+0x64>
 8012ad8:	4b88      	ldr	r3, [pc, #544]	@ (8012cfc <ip4_frag+0x274>)
 8012ada:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012ade:	4988      	ldr	r1, [pc, #544]	@ (8012d00 <ip4_frag+0x278>)
 8012ae0:	4888      	ldr	r0, [pc, #544]	@ (8012d04 <ip4_frag+0x27c>)
 8012ae2:	f001 f9a3 	bl	8013e2c <iprintf>
 8012ae6:	f06f 0305 	mvn.w	r3, #5
 8012aea:	e102      	b.n	8012cf2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aee:	88db      	ldrh	r3, [r3, #6]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f3 fa1a 	bl	8005f2c <lwip_htons>
 8012af8:	4603      	mov	r3, r0
 8012afa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012afc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012b06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	891b      	ldrh	r3, [r3, #8]
 8012b12:	3b14      	subs	r3, #20
 8012b14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012b18:	e0e1      	b.n	8012cde <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012b1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b24:	4293      	cmp	r3, r2
 8012b26:	bf28      	it	cs
 8012b28:	4613      	movcs	r3, r2
 8012b2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012b2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012b30:	2114      	movs	r1, #20
 8012b32:	200e      	movs	r0, #14
 8012b34:	f7f4 faa4 	bl	8007080 <pbuf_alloc>
 8012b38:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 80d5 	beq.w	8012cec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b44:	895b      	ldrh	r3, [r3, #10]
 8012b46:	2b13      	cmp	r3, #19
 8012b48:	d806      	bhi.n	8012b58 <ip4_frag+0xd0>
 8012b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8012cfc <ip4_frag+0x274>)
 8012b4c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012b50:	496d      	ldr	r1, [pc, #436]	@ (8012d08 <ip4_frag+0x280>)
 8012b52:	486c      	ldr	r0, [pc, #432]	@ (8012d04 <ip4_frag+0x27c>)
 8012b54:	f001 f96a 	bl	8013e2c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	2214      	movs	r2, #20
 8012b5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012b60:	4618      	mov	r0, r3
 8012b62:	f001 fa96 	bl	8014092 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012b6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012b6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8012b72:	e064      	b.n	8012c3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	895a      	ldrh	r2, [r3, #10]
 8012b78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	895b      	ldrh	r3, [r3, #10]
 8012b82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d906      	bls.n	8012b96 <ip4_frag+0x10e>
 8012b88:	4b5c      	ldr	r3, [pc, #368]	@ (8012cfc <ip4_frag+0x274>)
 8012b8a:	f240 322d 	movw	r2, #813	@ 0x32d
 8012b8e:	495f      	ldr	r1, [pc, #380]	@ (8012d0c <ip4_frag+0x284>)
 8012b90:	485c      	ldr	r0, [pc, #368]	@ (8012d04 <ip4_frag+0x27c>)
 8012b92:	f001 f94b 	bl	8013e2c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012b96:	8bfa      	ldrh	r2, [r7, #30]
 8012b98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	bf28      	it	cs
 8012ba0:	4613      	movcs	r3, r2
 8012ba2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012ba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d105      	bne.n	8012bba <ip4_frag+0x132>
        poff = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	60fb      	str	r3, [r7, #12]
        continue;
 8012bb8:	e041      	b.n	8012c3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012bba:	f7ff ff0d 	bl	80129d8 <ip_frag_alloc_pbuf_custom_ref>
 8012bbe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d103      	bne.n	8012bce <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012bc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012bc8:	f7f4 fd3e 	bl	8007648 <pbuf_free>
        goto memerr;
 8012bcc:	e08f      	b.n	8012cee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012bd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012bdc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012be0:	9201      	str	r2, [sp, #4]
 8012be2:	9300      	str	r3, [sp, #0]
 8012be4:	4603      	mov	r3, r0
 8012be6:	2241      	movs	r2, #65	@ 0x41
 8012be8:	2000      	movs	r0, #0
 8012bea:	f7f4 fb73 	bl	80072d4 <pbuf_alloced_custom>
 8012bee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d106      	bne.n	8012c04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012bf6:	69b8      	ldr	r0, [r7, #24]
 8012bf8:	f7ff fef6 	bl	80129e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012bfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012bfe:	f7f4 fd23 	bl	8007648 <pbuf_free>
        goto memerr;
 8012c02:	e074      	b.n	8012cee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f7f4 fdbf 	bl	8007788 <pbuf_ref>
      pcr->original = p;
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	4a3f      	ldr	r2, [pc, #252]	@ (8012d10 <ip4_frag+0x288>)
 8012c14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012c16:	6979      	ldr	r1, [r7, #20]
 8012c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c1a:	f7f4 fdd7 	bl	80077cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012c1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012c22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012c26:	1ad3      	subs	r3, r2, r3
 8012c28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012c2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d004      	beq.n	8012c3e <ip4_frag+0x1b6>
        poff = 0;
 8012c34:	2300      	movs	r3, #0
 8012c36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012c3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d196      	bne.n	8012b74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012c46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012c48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012c4c:	4413      	add	r3, r2
 8012c4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c54:	f1a3 0213 	sub.w	r2, r3, #19
 8012c58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	bfcc      	ite	gt
 8012c60:	2301      	movgt	r3, #1
 8012c62:	2300      	movle	r3, #0
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012c68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012c72:	6a3b      	ldr	r3, [r7, #32]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d002      	beq.n	8012c7e <ip4_frag+0x1f6>
 8012c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d003      	beq.n	8012c86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012c7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012c84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012c86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7f3 f94f 	bl	8005f2c <lwip_htons>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	461a      	mov	r2, r3
 8012c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012c96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012c98:	3314      	adds	r3, #20
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7f3 f945 	bl	8005f2c <lwip_htons>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cac:	2200      	movs	r2, #0
 8012cae:	729a      	strb	r2, [r3, #10]
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	695b      	ldr	r3, [r3, #20]
 8012cb8:	687a      	ldr	r2, [r7, #4]
 8012cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012cbc:	68b8      	ldr	r0, [r7, #8]
 8012cbe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012cc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cc2:	f7f4 fcc1 	bl	8007648 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012cc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012cca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012ccc:	1ad3      	subs	r3, r2, r3
 8012cce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012cd2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012cd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012cd8:	4413      	add	r3, r2
 8012cda:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012cde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f47f af19 	bne.w	8012b1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e002      	b.n	8012cf2 <ip4_frag+0x26a>
      goto memerr;
 8012cec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	3748      	adds	r7, #72	@ 0x48
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	0801a838 	.word	0x0801a838
 8012d00:	0801aa14 	.word	0x0801aa14
 8012d04:	0801a880 	.word	0x0801a880
 8012d08:	0801aa30 	.word	0x0801aa30
 8012d0c:	0801aa50 	.word	0x0801aa50
 8012d10:	08012a21 	.word	0x08012a21

08012d14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b086      	sub	sp, #24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012d1e:	230e      	movs	r3, #14
 8012d20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	895b      	ldrh	r3, [r3, #10]
 8012d26:	2b0e      	cmp	r3, #14
 8012d28:	d96e      	bls.n	8012e08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	7bdb      	ldrb	r3, [r3, #15]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d106      	bne.n	8012d40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d38:	3301      	adds	r3, #1
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	7b1a      	ldrb	r2, [r3, #12]
 8012d4a:	7b5b      	ldrb	r3, [r3, #13]
 8012d4c:	021b      	lsls	r3, r3, #8
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	f003 0301 	and.w	r3, r3, #1
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d023      	beq.n	8012da6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d10f      	bne.n	8012d86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	785b      	ldrb	r3, [r3, #1]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d11b      	bne.n	8012da6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d72:	2b5e      	cmp	r3, #94	@ 0x5e
 8012d74:	d117      	bne.n	8012da6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	7b5b      	ldrb	r3, [r3, #13]
 8012d7a:	f043 0310 	orr.w	r3, r3, #16
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	735a      	strb	r2, [r3, #13]
 8012d84:	e00f      	b.n	8012da6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	2206      	movs	r2, #6
 8012d8a:	4928      	ldr	r1, [pc, #160]	@ (8012e2c <ethernet_input+0x118>)
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f001 f8c4 	bl	8013f1a <memcmp>
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d106      	bne.n	8012da6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	7b5b      	ldrb	r3, [r3, #13]
 8012d9c:	f043 0308 	orr.w	r3, r3, #8
 8012da0:	b2da      	uxtb	r2, r3
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012da6:	89fb      	ldrh	r3, [r7, #14]
 8012da8:	2b08      	cmp	r3, #8
 8012daa:	d003      	beq.n	8012db4 <ethernet_input+0xa0>
 8012dac:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012db0:	d014      	beq.n	8012ddc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012db2:	e032      	b.n	8012e1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012dba:	f003 0308 	and.w	r3, r3, #8
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d024      	beq.n	8012e0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012dc2:	8afb      	ldrh	r3, [r7, #22]
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7f4 fbb8 	bl	800753c <pbuf_remove_header>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d11e      	bne.n	8012e10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012dd2:	6839      	ldr	r1, [r7, #0]
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7fe fdd9 	bl	801198c <ip4_input>
      break;
 8012dda:	e013      	b.n	8012e04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012de2:	f003 0308 	and.w	r3, r3, #8
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d014      	beq.n	8012e14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012dea:	8afb      	ldrh	r3, [r7, #22]
 8012dec:	4619      	mov	r1, r3
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f7f4 fba4 	bl	800753c <pbuf_remove_header>
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d10e      	bne.n	8012e18 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7fd ff75 	bl	8010cec <etharp_input>
      break;
 8012e02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012e04:	2300      	movs	r3, #0
 8012e06:	e00c      	b.n	8012e22 <ethernet_input+0x10e>
    goto free_and_return;
 8012e08:	bf00      	nop
 8012e0a:	e006      	b.n	8012e1a <ethernet_input+0x106>
        goto free_and_return;
 8012e0c:	bf00      	nop
 8012e0e:	e004      	b.n	8012e1a <ethernet_input+0x106>
        goto free_and_return;
 8012e10:	bf00      	nop
 8012e12:	e002      	b.n	8012e1a <ethernet_input+0x106>
        goto free_and_return;
 8012e14:	bf00      	nop
 8012e16:	e000      	b.n	8012e1a <ethernet_input+0x106>
        goto free_and_return;
 8012e18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7f4 fc14 	bl	8007648 <pbuf_free>
  return ERR_OK;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3718      	adds	r7, #24
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	0801abf8 	.word	0x0801abf8

08012e30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012e3e:	8c3b      	ldrh	r3, [r7, #32]
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7f3 f873 	bl	8005f2c <lwip_htons>
 8012e46:	4603      	mov	r3, r0
 8012e48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012e4a:	210e      	movs	r1, #14
 8012e4c:	68b8      	ldr	r0, [r7, #8]
 8012e4e:	f7f4 fb65 	bl	800751c <pbuf_add_header>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d125      	bne.n	8012ea4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	8afa      	ldrh	r2, [r7, #22]
 8012e62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	2206      	movs	r2, #6
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f001 f911 	bl	8014092 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	3306      	adds	r3, #6
 8012e74:	2206      	movs	r2, #6
 8012e76:	6879      	ldr	r1, [r7, #4]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f001 f90a 	bl	8014092 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012e84:	2b06      	cmp	r3, #6
 8012e86:	d006      	beq.n	8012e96 <ethernet_output+0x66>
 8012e88:	4b0a      	ldr	r3, [pc, #40]	@ (8012eb4 <ethernet_output+0x84>)
 8012e8a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012e8e:	490a      	ldr	r1, [pc, #40]	@ (8012eb8 <ethernet_output+0x88>)
 8012e90:	480a      	ldr	r0, [pc, #40]	@ (8012ebc <ethernet_output+0x8c>)
 8012e92:	f000 ffcb 	bl	8013e2c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	699b      	ldr	r3, [r3, #24]
 8012e9a:	68b9      	ldr	r1, [r7, #8]
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	4798      	blx	r3
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	e002      	b.n	8012eaa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012ea4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012ea6:	f06f 0301 	mvn.w	r3, #1
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3718      	adds	r7, #24
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	0801aa60 	.word	0x0801aa60
 8012eb8:	0801aa98 	.word	0x0801aa98
 8012ebc:	0801aacc 	.word	0x0801aacc

08012ec0 <rand>:
 8012ec0:	4b16      	ldr	r3, [pc, #88]	@ (8012f1c <rand+0x5c>)
 8012ec2:	b510      	push	{r4, lr}
 8012ec4:	681c      	ldr	r4, [r3, #0]
 8012ec6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ec8:	b9b3      	cbnz	r3, 8012ef8 <rand+0x38>
 8012eca:	2018      	movs	r0, #24
 8012ecc:	f001 ff44 	bl	8014d58 <malloc>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ed4:	b920      	cbnz	r0, 8012ee0 <rand+0x20>
 8012ed6:	4b12      	ldr	r3, [pc, #72]	@ (8012f20 <rand+0x60>)
 8012ed8:	4812      	ldr	r0, [pc, #72]	@ (8012f24 <rand+0x64>)
 8012eda:	2152      	movs	r1, #82	@ 0x52
 8012edc:	f001 f8ee 	bl	80140bc <__assert_func>
 8012ee0:	4911      	ldr	r1, [pc, #68]	@ (8012f28 <rand+0x68>)
 8012ee2:	4b12      	ldr	r3, [pc, #72]	@ (8012f2c <rand+0x6c>)
 8012ee4:	e9c0 1300 	strd	r1, r3, [r0]
 8012ee8:	4b11      	ldr	r3, [pc, #68]	@ (8012f30 <rand+0x70>)
 8012eea:	6083      	str	r3, [r0, #8]
 8012eec:	230b      	movs	r3, #11
 8012eee:	8183      	strh	r3, [r0, #12]
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	2001      	movs	r0, #1
 8012ef4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012ef8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012efa:	480e      	ldr	r0, [pc, #56]	@ (8012f34 <rand+0x74>)
 8012efc:	690b      	ldr	r3, [r1, #16]
 8012efe:	694c      	ldr	r4, [r1, #20]
 8012f00:	4a0d      	ldr	r2, [pc, #52]	@ (8012f38 <rand+0x78>)
 8012f02:	4358      	muls	r0, r3
 8012f04:	fb02 0004 	mla	r0, r2, r4, r0
 8012f08:	fba3 3202 	umull	r3, r2, r3, r2
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	eb40 0002 	adc.w	r0, r0, r2
 8012f12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012f16:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012f1a:	bd10      	pop	{r4, pc}
 8012f1c:	2000004c 	.word	0x2000004c
 8012f20:	0801ac06 	.word	0x0801ac06
 8012f24:	0801ac1d 	.word	0x0801ac1d
 8012f28:	abcd330e 	.word	0xabcd330e
 8012f2c:	e66d1234 	.word	0xe66d1234
 8012f30:	0005deec 	.word	0x0005deec
 8012f34:	5851f42d 	.word	0x5851f42d
 8012f38:	4c957f2d 	.word	0x4c957f2d

08012f3c <_strtol_l.isra.0>:
 8012f3c:	2b24      	cmp	r3, #36	@ 0x24
 8012f3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f42:	4686      	mov	lr, r0
 8012f44:	4690      	mov	r8, r2
 8012f46:	d801      	bhi.n	8012f4c <_strtol_l.isra.0+0x10>
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	d106      	bne.n	8012f5a <_strtol_l.isra.0+0x1e>
 8012f4c:	f001 f874 	bl	8014038 <__errno>
 8012f50:	2316      	movs	r3, #22
 8012f52:	6003      	str	r3, [r0, #0]
 8012f54:	2000      	movs	r0, #0
 8012f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5a:	4834      	ldr	r0, [pc, #208]	@ (801302c <_strtol_l.isra.0+0xf0>)
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	462a      	mov	r2, r5
 8012f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f64:	5d06      	ldrb	r6, [r0, r4]
 8012f66:	f016 0608 	ands.w	r6, r6, #8
 8012f6a:	d1f8      	bne.n	8012f5e <_strtol_l.isra.0+0x22>
 8012f6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f6e:	d110      	bne.n	8012f92 <_strtol_l.isra.0+0x56>
 8012f70:	782c      	ldrb	r4, [r5, #0]
 8012f72:	2601      	movs	r6, #1
 8012f74:	1c95      	adds	r5, r2, #2
 8012f76:	f033 0210 	bics.w	r2, r3, #16
 8012f7a:	d115      	bne.n	8012fa8 <_strtol_l.isra.0+0x6c>
 8012f7c:	2c30      	cmp	r4, #48	@ 0x30
 8012f7e:	d10d      	bne.n	8012f9c <_strtol_l.isra.0+0x60>
 8012f80:	782a      	ldrb	r2, [r5, #0]
 8012f82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012f86:	2a58      	cmp	r2, #88	@ 0x58
 8012f88:	d108      	bne.n	8012f9c <_strtol_l.isra.0+0x60>
 8012f8a:	786c      	ldrb	r4, [r5, #1]
 8012f8c:	3502      	adds	r5, #2
 8012f8e:	2310      	movs	r3, #16
 8012f90:	e00a      	b.n	8012fa8 <_strtol_l.isra.0+0x6c>
 8012f92:	2c2b      	cmp	r4, #43	@ 0x2b
 8012f94:	bf04      	itt	eq
 8012f96:	782c      	ldrbeq	r4, [r5, #0]
 8012f98:	1c95      	addeq	r5, r2, #2
 8012f9a:	e7ec      	b.n	8012f76 <_strtol_l.isra.0+0x3a>
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d1f6      	bne.n	8012f8e <_strtol_l.isra.0+0x52>
 8012fa0:	2c30      	cmp	r4, #48	@ 0x30
 8012fa2:	bf14      	ite	ne
 8012fa4:	230a      	movne	r3, #10
 8012fa6:	2308      	moveq	r3, #8
 8012fa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012fac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	fbbc f9f3 	udiv	r9, ip, r3
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	fb03 ca19 	mls	sl, r3, r9, ip
 8012fbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012fc0:	2f09      	cmp	r7, #9
 8012fc2:	d80f      	bhi.n	8012fe4 <_strtol_l.isra.0+0xa8>
 8012fc4:	463c      	mov	r4, r7
 8012fc6:	42a3      	cmp	r3, r4
 8012fc8:	dd1b      	ble.n	8013002 <_strtol_l.isra.0+0xc6>
 8012fca:	1c57      	adds	r7, r2, #1
 8012fcc:	d007      	beq.n	8012fde <_strtol_l.isra.0+0xa2>
 8012fce:	4581      	cmp	r9, r0
 8012fd0:	d314      	bcc.n	8012ffc <_strtol_l.isra.0+0xc0>
 8012fd2:	d101      	bne.n	8012fd8 <_strtol_l.isra.0+0x9c>
 8012fd4:	45a2      	cmp	sl, r4
 8012fd6:	db11      	blt.n	8012ffc <_strtol_l.isra.0+0xc0>
 8012fd8:	fb00 4003 	mla	r0, r0, r3, r4
 8012fdc:	2201      	movs	r2, #1
 8012fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fe2:	e7eb      	b.n	8012fbc <_strtol_l.isra.0+0x80>
 8012fe4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012fe8:	2f19      	cmp	r7, #25
 8012fea:	d801      	bhi.n	8012ff0 <_strtol_l.isra.0+0xb4>
 8012fec:	3c37      	subs	r4, #55	@ 0x37
 8012fee:	e7ea      	b.n	8012fc6 <_strtol_l.isra.0+0x8a>
 8012ff0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ff4:	2f19      	cmp	r7, #25
 8012ff6:	d804      	bhi.n	8013002 <_strtol_l.isra.0+0xc6>
 8012ff8:	3c57      	subs	r4, #87	@ 0x57
 8012ffa:	e7e4      	b.n	8012fc6 <_strtol_l.isra.0+0x8a>
 8012ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8013000:	e7ed      	b.n	8012fde <_strtol_l.isra.0+0xa2>
 8013002:	1c53      	adds	r3, r2, #1
 8013004:	d108      	bne.n	8013018 <_strtol_l.isra.0+0xdc>
 8013006:	2322      	movs	r3, #34	@ 0x22
 8013008:	f8ce 3000 	str.w	r3, [lr]
 801300c:	4660      	mov	r0, ip
 801300e:	f1b8 0f00 	cmp.w	r8, #0
 8013012:	d0a0      	beq.n	8012f56 <_strtol_l.isra.0+0x1a>
 8013014:	1e69      	subs	r1, r5, #1
 8013016:	e006      	b.n	8013026 <_strtol_l.isra.0+0xea>
 8013018:	b106      	cbz	r6, 801301c <_strtol_l.isra.0+0xe0>
 801301a:	4240      	negs	r0, r0
 801301c:	f1b8 0f00 	cmp.w	r8, #0
 8013020:	d099      	beq.n	8012f56 <_strtol_l.isra.0+0x1a>
 8013022:	2a00      	cmp	r2, #0
 8013024:	d1f6      	bne.n	8013014 <_strtol_l.isra.0+0xd8>
 8013026:	f8c8 1000 	str.w	r1, [r8]
 801302a:	e794      	b.n	8012f56 <_strtol_l.isra.0+0x1a>
 801302c:	0801ae35 	.word	0x0801ae35

08013030 <_strtol_r>:
 8013030:	f7ff bf84 	b.w	8012f3c <_strtol_l.isra.0>

08013034 <__cvt>:
 8013034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013036:	ed2d 8b02 	vpush	{d8}
 801303a:	eeb0 8b40 	vmov.f64	d8, d0
 801303e:	b085      	sub	sp, #20
 8013040:	4617      	mov	r7, r2
 8013042:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013044:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013046:	ee18 2a90 	vmov	r2, s17
 801304a:	f025 0520 	bic.w	r5, r5, #32
 801304e:	2a00      	cmp	r2, #0
 8013050:	bfb6      	itet	lt
 8013052:	222d      	movlt	r2, #45	@ 0x2d
 8013054:	2200      	movge	r2, #0
 8013056:	eeb1 8b40 	vneglt.f64	d8, d0
 801305a:	2d46      	cmp	r5, #70	@ 0x46
 801305c:	460c      	mov	r4, r1
 801305e:	701a      	strb	r2, [r3, #0]
 8013060:	d004      	beq.n	801306c <__cvt+0x38>
 8013062:	2d45      	cmp	r5, #69	@ 0x45
 8013064:	d100      	bne.n	8013068 <__cvt+0x34>
 8013066:	3401      	adds	r4, #1
 8013068:	2102      	movs	r1, #2
 801306a:	e000      	b.n	801306e <__cvt+0x3a>
 801306c:	2103      	movs	r1, #3
 801306e:	ab03      	add	r3, sp, #12
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	ab02      	add	r3, sp, #8
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	4622      	mov	r2, r4
 8013078:	4633      	mov	r3, r6
 801307a:	eeb0 0b48 	vmov.f64	d0, d8
 801307e:	f001 f8c3 	bl	8014208 <_dtoa_r>
 8013082:	2d47      	cmp	r5, #71	@ 0x47
 8013084:	d114      	bne.n	80130b0 <__cvt+0x7c>
 8013086:	07fb      	lsls	r3, r7, #31
 8013088:	d50a      	bpl.n	80130a0 <__cvt+0x6c>
 801308a:	1902      	adds	r2, r0, r4
 801308c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013094:	bf08      	it	eq
 8013096:	9203      	streq	r2, [sp, #12]
 8013098:	2130      	movs	r1, #48	@ 0x30
 801309a:	9b03      	ldr	r3, [sp, #12]
 801309c:	4293      	cmp	r3, r2
 801309e:	d319      	bcc.n	80130d4 <__cvt+0xa0>
 80130a0:	9b03      	ldr	r3, [sp, #12]
 80130a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130a4:	1a1b      	subs	r3, r3, r0
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	b005      	add	sp, #20
 80130aa:	ecbd 8b02 	vpop	{d8}
 80130ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130b0:	2d46      	cmp	r5, #70	@ 0x46
 80130b2:	eb00 0204 	add.w	r2, r0, r4
 80130b6:	d1e9      	bne.n	801308c <__cvt+0x58>
 80130b8:	7803      	ldrb	r3, [r0, #0]
 80130ba:	2b30      	cmp	r3, #48	@ 0x30
 80130bc:	d107      	bne.n	80130ce <__cvt+0x9a>
 80130be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80130c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c6:	bf1c      	itt	ne
 80130c8:	f1c4 0401 	rsbne	r4, r4, #1
 80130cc:	6034      	strne	r4, [r6, #0]
 80130ce:	6833      	ldr	r3, [r6, #0]
 80130d0:	441a      	add	r2, r3
 80130d2:	e7db      	b.n	801308c <__cvt+0x58>
 80130d4:	1c5c      	adds	r4, r3, #1
 80130d6:	9403      	str	r4, [sp, #12]
 80130d8:	7019      	strb	r1, [r3, #0]
 80130da:	e7de      	b.n	801309a <__cvt+0x66>

080130dc <__exponent>:
 80130dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130de:	2900      	cmp	r1, #0
 80130e0:	bfba      	itte	lt
 80130e2:	4249      	neglt	r1, r1
 80130e4:	232d      	movlt	r3, #45	@ 0x2d
 80130e6:	232b      	movge	r3, #43	@ 0x2b
 80130e8:	2909      	cmp	r1, #9
 80130ea:	7002      	strb	r2, [r0, #0]
 80130ec:	7043      	strb	r3, [r0, #1]
 80130ee:	dd29      	ble.n	8013144 <__exponent+0x68>
 80130f0:	f10d 0307 	add.w	r3, sp, #7
 80130f4:	461d      	mov	r5, r3
 80130f6:	270a      	movs	r7, #10
 80130f8:	461a      	mov	r2, r3
 80130fa:	fbb1 f6f7 	udiv	r6, r1, r7
 80130fe:	fb07 1416 	mls	r4, r7, r6, r1
 8013102:	3430      	adds	r4, #48	@ 0x30
 8013104:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013108:	460c      	mov	r4, r1
 801310a:	2c63      	cmp	r4, #99	@ 0x63
 801310c:	f103 33ff 	add.w	r3, r3, #4294967295
 8013110:	4631      	mov	r1, r6
 8013112:	dcf1      	bgt.n	80130f8 <__exponent+0x1c>
 8013114:	3130      	adds	r1, #48	@ 0x30
 8013116:	1e94      	subs	r4, r2, #2
 8013118:	f803 1c01 	strb.w	r1, [r3, #-1]
 801311c:	1c41      	adds	r1, r0, #1
 801311e:	4623      	mov	r3, r4
 8013120:	42ab      	cmp	r3, r5
 8013122:	d30a      	bcc.n	801313a <__exponent+0x5e>
 8013124:	f10d 0309 	add.w	r3, sp, #9
 8013128:	1a9b      	subs	r3, r3, r2
 801312a:	42ac      	cmp	r4, r5
 801312c:	bf88      	it	hi
 801312e:	2300      	movhi	r3, #0
 8013130:	3302      	adds	r3, #2
 8013132:	4403      	add	r3, r0
 8013134:	1a18      	subs	r0, r3, r0
 8013136:	b003      	add	sp, #12
 8013138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801313a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801313e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013142:	e7ed      	b.n	8013120 <__exponent+0x44>
 8013144:	2330      	movs	r3, #48	@ 0x30
 8013146:	3130      	adds	r1, #48	@ 0x30
 8013148:	7083      	strb	r3, [r0, #2]
 801314a:	70c1      	strb	r1, [r0, #3]
 801314c:	1d03      	adds	r3, r0, #4
 801314e:	e7f1      	b.n	8013134 <__exponent+0x58>

08013150 <_printf_float>:
 8013150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013154:	b08d      	sub	sp, #52	@ 0x34
 8013156:	460c      	mov	r4, r1
 8013158:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801315c:	4616      	mov	r6, r2
 801315e:	461f      	mov	r7, r3
 8013160:	4605      	mov	r5, r0
 8013162:	f000 ff1f 	bl	8013fa4 <_localeconv_r>
 8013166:	f8d0 b000 	ldr.w	fp, [r0]
 801316a:	4658      	mov	r0, fp
 801316c:	f7ed f8b8 	bl	80002e0 <strlen>
 8013170:	2300      	movs	r3, #0
 8013172:	930a      	str	r3, [sp, #40]	@ 0x28
 8013174:	f8d8 3000 	ldr.w	r3, [r8]
 8013178:	f894 9018 	ldrb.w	r9, [r4, #24]
 801317c:	6822      	ldr	r2, [r4, #0]
 801317e:	9005      	str	r0, [sp, #20]
 8013180:	3307      	adds	r3, #7
 8013182:	f023 0307 	bic.w	r3, r3, #7
 8013186:	f103 0108 	add.w	r1, r3, #8
 801318a:	f8c8 1000 	str.w	r1, [r8]
 801318e:	ed93 0b00 	vldr	d0, [r3]
 8013192:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80133f0 <_printf_float+0x2a0>
 8013196:	eeb0 7bc0 	vabs.f64	d7, d0
 801319a:	eeb4 7b46 	vcmp.f64	d7, d6
 801319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80131a6:	dd24      	ble.n	80131f2 <_printf_float+0xa2>
 80131a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	d502      	bpl.n	80131b8 <_printf_float+0x68>
 80131b2:	232d      	movs	r3, #45	@ 0x2d
 80131b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131b8:	498f      	ldr	r1, [pc, #572]	@ (80133f8 <_printf_float+0x2a8>)
 80131ba:	4b90      	ldr	r3, [pc, #576]	@ (80133fc <_printf_float+0x2ac>)
 80131bc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80131c0:	bf8c      	ite	hi
 80131c2:	4688      	movhi	r8, r1
 80131c4:	4698      	movls	r8, r3
 80131c6:	f022 0204 	bic.w	r2, r2, #4
 80131ca:	2303      	movs	r3, #3
 80131cc:	6123      	str	r3, [r4, #16]
 80131ce:	6022      	str	r2, [r4, #0]
 80131d0:	f04f 0a00 	mov.w	sl, #0
 80131d4:	9700      	str	r7, [sp, #0]
 80131d6:	4633      	mov	r3, r6
 80131d8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80131da:	4621      	mov	r1, r4
 80131dc:	4628      	mov	r0, r5
 80131de:	f000 f9d1 	bl	8013584 <_printf_common>
 80131e2:	3001      	adds	r0, #1
 80131e4:	f040 8089 	bne.w	80132fa <_printf_float+0x1aa>
 80131e8:	f04f 30ff 	mov.w	r0, #4294967295
 80131ec:	b00d      	add	sp, #52	@ 0x34
 80131ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80131f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fa:	d709      	bvc.n	8013210 <_printf_float+0xc0>
 80131fc:	ee10 3a90 	vmov	r3, s1
 8013200:	2b00      	cmp	r3, #0
 8013202:	bfbc      	itt	lt
 8013204:	232d      	movlt	r3, #45	@ 0x2d
 8013206:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801320a:	497d      	ldr	r1, [pc, #500]	@ (8013400 <_printf_float+0x2b0>)
 801320c:	4b7d      	ldr	r3, [pc, #500]	@ (8013404 <_printf_float+0x2b4>)
 801320e:	e7d5      	b.n	80131bc <_printf_float+0x6c>
 8013210:	6863      	ldr	r3, [r4, #4]
 8013212:	1c59      	adds	r1, r3, #1
 8013214:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013218:	d139      	bne.n	801328e <_printf_float+0x13e>
 801321a:	2306      	movs	r3, #6
 801321c:	6063      	str	r3, [r4, #4]
 801321e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013222:	2300      	movs	r3, #0
 8013224:	6022      	str	r2, [r4, #0]
 8013226:	9303      	str	r3, [sp, #12]
 8013228:	ab0a      	add	r3, sp, #40	@ 0x28
 801322a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801322e:	ab09      	add	r3, sp, #36	@ 0x24
 8013230:	9300      	str	r3, [sp, #0]
 8013232:	6861      	ldr	r1, [r4, #4]
 8013234:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013238:	4628      	mov	r0, r5
 801323a:	f7ff fefb 	bl	8013034 <__cvt>
 801323e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013242:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013244:	4680      	mov	r8, r0
 8013246:	d129      	bne.n	801329c <_printf_float+0x14c>
 8013248:	1cc8      	adds	r0, r1, #3
 801324a:	db02      	blt.n	8013252 <_printf_float+0x102>
 801324c:	6863      	ldr	r3, [r4, #4]
 801324e:	4299      	cmp	r1, r3
 8013250:	dd41      	ble.n	80132d6 <_printf_float+0x186>
 8013252:	f1a9 0902 	sub.w	r9, r9, #2
 8013256:	fa5f f989 	uxtb.w	r9, r9
 801325a:	3901      	subs	r1, #1
 801325c:	464a      	mov	r2, r9
 801325e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013262:	9109      	str	r1, [sp, #36]	@ 0x24
 8013264:	f7ff ff3a 	bl	80130dc <__exponent>
 8013268:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801326a:	1813      	adds	r3, r2, r0
 801326c:	2a01      	cmp	r2, #1
 801326e:	4682      	mov	sl, r0
 8013270:	6123      	str	r3, [r4, #16]
 8013272:	dc02      	bgt.n	801327a <_printf_float+0x12a>
 8013274:	6822      	ldr	r2, [r4, #0]
 8013276:	07d2      	lsls	r2, r2, #31
 8013278:	d501      	bpl.n	801327e <_printf_float+0x12e>
 801327a:	3301      	adds	r3, #1
 801327c:	6123      	str	r3, [r4, #16]
 801327e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013282:	2b00      	cmp	r3, #0
 8013284:	d0a6      	beq.n	80131d4 <_printf_float+0x84>
 8013286:	232d      	movs	r3, #45	@ 0x2d
 8013288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801328c:	e7a2      	b.n	80131d4 <_printf_float+0x84>
 801328e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013292:	d1c4      	bne.n	801321e <_printf_float+0xce>
 8013294:	2b00      	cmp	r3, #0
 8013296:	d1c2      	bne.n	801321e <_printf_float+0xce>
 8013298:	2301      	movs	r3, #1
 801329a:	e7bf      	b.n	801321c <_printf_float+0xcc>
 801329c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80132a0:	d9db      	bls.n	801325a <_printf_float+0x10a>
 80132a2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80132a6:	d118      	bne.n	80132da <_printf_float+0x18a>
 80132a8:	2900      	cmp	r1, #0
 80132aa:	6863      	ldr	r3, [r4, #4]
 80132ac:	dd0b      	ble.n	80132c6 <_printf_float+0x176>
 80132ae:	6121      	str	r1, [r4, #16]
 80132b0:	b913      	cbnz	r3, 80132b8 <_printf_float+0x168>
 80132b2:	6822      	ldr	r2, [r4, #0]
 80132b4:	07d0      	lsls	r0, r2, #31
 80132b6:	d502      	bpl.n	80132be <_printf_float+0x16e>
 80132b8:	3301      	adds	r3, #1
 80132ba:	440b      	add	r3, r1
 80132bc:	6123      	str	r3, [r4, #16]
 80132be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80132c0:	f04f 0a00 	mov.w	sl, #0
 80132c4:	e7db      	b.n	801327e <_printf_float+0x12e>
 80132c6:	b913      	cbnz	r3, 80132ce <_printf_float+0x17e>
 80132c8:	6822      	ldr	r2, [r4, #0]
 80132ca:	07d2      	lsls	r2, r2, #31
 80132cc:	d501      	bpl.n	80132d2 <_printf_float+0x182>
 80132ce:	3302      	adds	r3, #2
 80132d0:	e7f4      	b.n	80132bc <_printf_float+0x16c>
 80132d2:	2301      	movs	r3, #1
 80132d4:	e7f2      	b.n	80132bc <_printf_float+0x16c>
 80132d6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80132da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132dc:	4299      	cmp	r1, r3
 80132de:	db05      	blt.n	80132ec <_printf_float+0x19c>
 80132e0:	6823      	ldr	r3, [r4, #0]
 80132e2:	6121      	str	r1, [r4, #16]
 80132e4:	07d8      	lsls	r0, r3, #31
 80132e6:	d5ea      	bpl.n	80132be <_printf_float+0x16e>
 80132e8:	1c4b      	adds	r3, r1, #1
 80132ea:	e7e7      	b.n	80132bc <_printf_float+0x16c>
 80132ec:	2900      	cmp	r1, #0
 80132ee:	bfd4      	ite	le
 80132f0:	f1c1 0202 	rsble	r2, r1, #2
 80132f4:	2201      	movgt	r2, #1
 80132f6:	4413      	add	r3, r2
 80132f8:	e7e0      	b.n	80132bc <_printf_float+0x16c>
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	055a      	lsls	r2, r3, #21
 80132fe:	d407      	bmi.n	8013310 <_printf_float+0x1c0>
 8013300:	6923      	ldr	r3, [r4, #16]
 8013302:	4642      	mov	r2, r8
 8013304:	4631      	mov	r1, r6
 8013306:	4628      	mov	r0, r5
 8013308:	47b8      	blx	r7
 801330a:	3001      	adds	r0, #1
 801330c:	d12a      	bne.n	8013364 <_printf_float+0x214>
 801330e:	e76b      	b.n	80131e8 <_printf_float+0x98>
 8013310:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013314:	f240 80e0 	bls.w	80134d8 <_printf_float+0x388>
 8013318:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801331c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013324:	d133      	bne.n	801338e <_printf_float+0x23e>
 8013326:	4a38      	ldr	r2, [pc, #224]	@ (8013408 <_printf_float+0x2b8>)
 8013328:	2301      	movs	r3, #1
 801332a:	4631      	mov	r1, r6
 801332c:	4628      	mov	r0, r5
 801332e:	47b8      	blx	r7
 8013330:	3001      	adds	r0, #1
 8013332:	f43f af59 	beq.w	80131e8 <_printf_float+0x98>
 8013336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801333a:	4543      	cmp	r3, r8
 801333c:	db02      	blt.n	8013344 <_printf_float+0x1f4>
 801333e:	6823      	ldr	r3, [r4, #0]
 8013340:	07d8      	lsls	r0, r3, #31
 8013342:	d50f      	bpl.n	8013364 <_printf_float+0x214>
 8013344:	9b05      	ldr	r3, [sp, #20]
 8013346:	465a      	mov	r2, fp
 8013348:	4631      	mov	r1, r6
 801334a:	4628      	mov	r0, r5
 801334c:	47b8      	blx	r7
 801334e:	3001      	adds	r0, #1
 8013350:	f43f af4a 	beq.w	80131e8 <_printf_float+0x98>
 8013354:	f04f 0900 	mov.w	r9, #0
 8013358:	f108 38ff 	add.w	r8, r8, #4294967295
 801335c:	f104 0a1a 	add.w	sl, r4, #26
 8013360:	45c8      	cmp	r8, r9
 8013362:	dc09      	bgt.n	8013378 <_printf_float+0x228>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	079b      	lsls	r3, r3, #30
 8013368:	f100 8107 	bmi.w	801357a <_printf_float+0x42a>
 801336c:	68e0      	ldr	r0, [r4, #12]
 801336e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013370:	4298      	cmp	r0, r3
 8013372:	bfb8      	it	lt
 8013374:	4618      	movlt	r0, r3
 8013376:	e739      	b.n	80131ec <_printf_float+0x9c>
 8013378:	2301      	movs	r3, #1
 801337a:	4652      	mov	r2, sl
 801337c:	4631      	mov	r1, r6
 801337e:	4628      	mov	r0, r5
 8013380:	47b8      	blx	r7
 8013382:	3001      	adds	r0, #1
 8013384:	f43f af30 	beq.w	80131e8 <_printf_float+0x98>
 8013388:	f109 0901 	add.w	r9, r9, #1
 801338c:	e7e8      	b.n	8013360 <_printf_float+0x210>
 801338e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013390:	2b00      	cmp	r3, #0
 8013392:	dc3b      	bgt.n	801340c <_printf_float+0x2bc>
 8013394:	4a1c      	ldr	r2, [pc, #112]	@ (8013408 <_printf_float+0x2b8>)
 8013396:	2301      	movs	r3, #1
 8013398:	4631      	mov	r1, r6
 801339a:	4628      	mov	r0, r5
 801339c:	47b8      	blx	r7
 801339e:	3001      	adds	r0, #1
 80133a0:	f43f af22 	beq.w	80131e8 <_printf_float+0x98>
 80133a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80133a8:	ea59 0303 	orrs.w	r3, r9, r3
 80133ac:	d102      	bne.n	80133b4 <_printf_float+0x264>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	07d9      	lsls	r1, r3, #31
 80133b2:	d5d7      	bpl.n	8013364 <_printf_float+0x214>
 80133b4:	9b05      	ldr	r3, [sp, #20]
 80133b6:	465a      	mov	r2, fp
 80133b8:	4631      	mov	r1, r6
 80133ba:	4628      	mov	r0, r5
 80133bc:	47b8      	blx	r7
 80133be:	3001      	adds	r0, #1
 80133c0:	f43f af12 	beq.w	80131e8 <_printf_float+0x98>
 80133c4:	f04f 0a00 	mov.w	sl, #0
 80133c8:	f104 0b1a 	add.w	fp, r4, #26
 80133cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133ce:	425b      	negs	r3, r3
 80133d0:	4553      	cmp	r3, sl
 80133d2:	dc01      	bgt.n	80133d8 <_printf_float+0x288>
 80133d4:	464b      	mov	r3, r9
 80133d6:	e794      	b.n	8013302 <_printf_float+0x1b2>
 80133d8:	2301      	movs	r3, #1
 80133da:	465a      	mov	r2, fp
 80133dc:	4631      	mov	r1, r6
 80133de:	4628      	mov	r0, r5
 80133e0:	47b8      	blx	r7
 80133e2:	3001      	adds	r0, #1
 80133e4:	f43f af00 	beq.w	80131e8 <_printf_float+0x98>
 80133e8:	f10a 0a01 	add.w	sl, sl, #1
 80133ec:	e7ee      	b.n	80133cc <_printf_float+0x27c>
 80133ee:	bf00      	nop
 80133f0:	ffffffff 	.word	0xffffffff
 80133f4:	7fefffff 	.word	0x7fefffff
 80133f8:	0801ac79 	.word	0x0801ac79
 80133fc:	0801ac75 	.word	0x0801ac75
 8013400:	0801ac81 	.word	0x0801ac81
 8013404:	0801ac7d 	.word	0x0801ac7d
 8013408:	0801ac85 	.word	0x0801ac85
 801340c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801340e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013412:	4553      	cmp	r3, sl
 8013414:	bfa8      	it	ge
 8013416:	4653      	movge	r3, sl
 8013418:	2b00      	cmp	r3, #0
 801341a:	4699      	mov	r9, r3
 801341c:	dc37      	bgt.n	801348e <_printf_float+0x33e>
 801341e:	2300      	movs	r3, #0
 8013420:	9307      	str	r3, [sp, #28]
 8013422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013426:	f104 021a 	add.w	r2, r4, #26
 801342a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801342c:	9907      	ldr	r1, [sp, #28]
 801342e:	9306      	str	r3, [sp, #24]
 8013430:	eba3 0309 	sub.w	r3, r3, r9
 8013434:	428b      	cmp	r3, r1
 8013436:	dc31      	bgt.n	801349c <_printf_float+0x34c>
 8013438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801343a:	459a      	cmp	sl, r3
 801343c:	dc3b      	bgt.n	80134b6 <_printf_float+0x366>
 801343e:	6823      	ldr	r3, [r4, #0]
 8013440:	07da      	lsls	r2, r3, #31
 8013442:	d438      	bmi.n	80134b6 <_printf_float+0x366>
 8013444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013446:	ebaa 0903 	sub.w	r9, sl, r3
 801344a:	9b06      	ldr	r3, [sp, #24]
 801344c:	ebaa 0303 	sub.w	r3, sl, r3
 8013450:	4599      	cmp	r9, r3
 8013452:	bfa8      	it	ge
 8013454:	4699      	movge	r9, r3
 8013456:	f1b9 0f00 	cmp.w	r9, #0
 801345a:	dc34      	bgt.n	80134c6 <_printf_float+0x376>
 801345c:	f04f 0800 	mov.w	r8, #0
 8013460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013464:	f104 0b1a 	add.w	fp, r4, #26
 8013468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801346a:	ebaa 0303 	sub.w	r3, sl, r3
 801346e:	eba3 0309 	sub.w	r3, r3, r9
 8013472:	4543      	cmp	r3, r8
 8013474:	f77f af76 	ble.w	8013364 <_printf_float+0x214>
 8013478:	2301      	movs	r3, #1
 801347a:	465a      	mov	r2, fp
 801347c:	4631      	mov	r1, r6
 801347e:	4628      	mov	r0, r5
 8013480:	47b8      	blx	r7
 8013482:	3001      	adds	r0, #1
 8013484:	f43f aeb0 	beq.w	80131e8 <_printf_float+0x98>
 8013488:	f108 0801 	add.w	r8, r8, #1
 801348c:	e7ec      	b.n	8013468 <_printf_float+0x318>
 801348e:	4642      	mov	r2, r8
 8013490:	4631      	mov	r1, r6
 8013492:	4628      	mov	r0, r5
 8013494:	47b8      	blx	r7
 8013496:	3001      	adds	r0, #1
 8013498:	d1c1      	bne.n	801341e <_printf_float+0x2ce>
 801349a:	e6a5      	b.n	80131e8 <_printf_float+0x98>
 801349c:	2301      	movs	r3, #1
 801349e:	4631      	mov	r1, r6
 80134a0:	4628      	mov	r0, r5
 80134a2:	9206      	str	r2, [sp, #24]
 80134a4:	47b8      	blx	r7
 80134a6:	3001      	adds	r0, #1
 80134a8:	f43f ae9e 	beq.w	80131e8 <_printf_float+0x98>
 80134ac:	9b07      	ldr	r3, [sp, #28]
 80134ae:	9a06      	ldr	r2, [sp, #24]
 80134b0:	3301      	adds	r3, #1
 80134b2:	9307      	str	r3, [sp, #28]
 80134b4:	e7b9      	b.n	801342a <_printf_float+0x2da>
 80134b6:	9b05      	ldr	r3, [sp, #20]
 80134b8:	465a      	mov	r2, fp
 80134ba:	4631      	mov	r1, r6
 80134bc:	4628      	mov	r0, r5
 80134be:	47b8      	blx	r7
 80134c0:	3001      	adds	r0, #1
 80134c2:	d1bf      	bne.n	8013444 <_printf_float+0x2f4>
 80134c4:	e690      	b.n	80131e8 <_printf_float+0x98>
 80134c6:	9a06      	ldr	r2, [sp, #24]
 80134c8:	464b      	mov	r3, r9
 80134ca:	4442      	add	r2, r8
 80134cc:	4631      	mov	r1, r6
 80134ce:	4628      	mov	r0, r5
 80134d0:	47b8      	blx	r7
 80134d2:	3001      	adds	r0, #1
 80134d4:	d1c2      	bne.n	801345c <_printf_float+0x30c>
 80134d6:	e687      	b.n	80131e8 <_printf_float+0x98>
 80134d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80134dc:	f1b9 0f01 	cmp.w	r9, #1
 80134e0:	dc01      	bgt.n	80134e6 <_printf_float+0x396>
 80134e2:	07db      	lsls	r3, r3, #31
 80134e4:	d536      	bpl.n	8013554 <_printf_float+0x404>
 80134e6:	2301      	movs	r3, #1
 80134e8:	4642      	mov	r2, r8
 80134ea:	4631      	mov	r1, r6
 80134ec:	4628      	mov	r0, r5
 80134ee:	47b8      	blx	r7
 80134f0:	3001      	adds	r0, #1
 80134f2:	f43f ae79 	beq.w	80131e8 <_printf_float+0x98>
 80134f6:	9b05      	ldr	r3, [sp, #20]
 80134f8:	465a      	mov	r2, fp
 80134fa:	4631      	mov	r1, r6
 80134fc:	4628      	mov	r0, r5
 80134fe:	47b8      	blx	r7
 8013500:	3001      	adds	r0, #1
 8013502:	f43f ae71 	beq.w	80131e8 <_printf_float+0x98>
 8013506:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801350a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013512:	f109 39ff 	add.w	r9, r9, #4294967295
 8013516:	d018      	beq.n	801354a <_printf_float+0x3fa>
 8013518:	464b      	mov	r3, r9
 801351a:	f108 0201 	add.w	r2, r8, #1
 801351e:	4631      	mov	r1, r6
 8013520:	4628      	mov	r0, r5
 8013522:	47b8      	blx	r7
 8013524:	3001      	adds	r0, #1
 8013526:	d10c      	bne.n	8013542 <_printf_float+0x3f2>
 8013528:	e65e      	b.n	80131e8 <_printf_float+0x98>
 801352a:	2301      	movs	r3, #1
 801352c:	465a      	mov	r2, fp
 801352e:	4631      	mov	r1, r6
 8013530:	4628      	mov	r0, r5
 8013532:	47b8      	blx	r7
 8013534:	3001      	adds	r0, #1
 8013536:	f43f ae57 	beq.w	80131e8 <_printf_float+0x98>
 801353a:	f108 0801 	add.w	r8, r8, #1
 801353e:	45c8      	cmp	r8, r9
 8013540:	dbf3      	blt.n	801352a <_printf_float+0x3da>
 8013542:	4653      	mov	r3, sl
 8013544:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013548:	e6dc      	b.n	8013304 <_printf_float+0x1b4>
 801354a:	f04f 0800 	mov.w	r8, #0
 801354e:	f104 0b1a 	add.w	fp, r4, #26
 8013552:	e7f4      	b.n	801353e <_printf_float+0x3ee>
 8013554:	2301      	movs	r3, #1
 8013556:	4642      	mov	r2, r8
 8013558:	e7e1      	b.n	801351e <_printf_float+0x3ce>
 801355a:	2301      	movs	r3, #1
 801355c:	464a      	mov	r2, r9
 801355e:	4631      	mov	r1, r6
 8013560:	4628      	mov	r0, r5
 8013562:	47b8      	blx	r7
 8013564:	3001      	adds	r0, #1
 8013566:	f43f ae3f 	beq.w	80131e8 <_printf_float+0x98>
 801356a:	f108 0801 	add.w	r8, r8, #1
 801356e:	68e3      	ldr	r3, [r4, #12]
 8013570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013572:	1a5b      	subs	r3, r3, r1
 8013574:	4543      	cmp	r3, r8
 8013576:	dcf0      	bgt.n	801355a <_printf_float+0x40a>
 8013578:	e6f8      	b.n	801336c <_printf_float+0x21c>
 801357a:	f04f 0800 	mov.w	r8, #0
 801357e:	f104 0919 	add.w	r9, r4, #25
 8013582:	e7f4      	b.n	801356e <_printf_float+0x41e>

08013584 <_printf_common>:
 8013584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013588:	4616      	mov	r6, r2
 801358a:	4698      	mov	r8, r3
 801358c:	688a      	ldr	r2, [r1, #8]
 801358e:	690b      	ldr	r3, [r1, #16]
 8013590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013594:	4293      	cmp	r3, r2
 8013596:	bfb8      	it	lt
 8013598:	4613      	movlt	r3, r2
 801359a:	6033      	str	r3, [r6, #0]
 801359c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80135a0:	4607      	mov	r7, r0
 80135a2:	460c      	mov	r4, r1
 80135a4:	b10a      	cbz	r2, 80135aa <_printf_common+0x26>
 80135a6:	3301      	adds	r3, #1
 80135a8:	6033      	str	r3, [r6, #0]
 80135aa:	6823      	ldr	r3, [r4, #0]
 80135ac:	0699      	lsls	r1, r3, #26
 80135ae:	bf42      	ittt	mi
 80135b0:	6833      	ldrmi	r3, [r6, #0]
 80135b2:	3302      	addmi	r3, #2
 80135b4:	6033      	strmi	r3, [r6, #0]
 80135b6:	6825      	ldr	r5, [r4, #0]
 80135b8:	f015 0506 	ands.w	r5, r5, #6
 80135bc:	d106      	bne.n	80135cc <_printf_common+0x48>
 80135be:	f104 0a19 	add.w	sl, r4, #25
 80135c2:	68e3      	ldr	r3, [r4, #12]
 80135c4:	6832      	ldr	r2, [r6, #0]
 80135c6:	1a9b      	subs	r3, r3, r2
 80135c8:	42ab      	cmp	r3, r5
 80135ca:	dc26      	bgt.n	801361a <_printf_common+0x96>
 80135cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80135d0:	6822      	ldr	r2, [r4, #0]
 80135d2:	3b00      	subs	r3, #0
 80135d4:	bf18      	it	ne
 80135d6:	2301      	movne	r3, #1
 80135d8:	0692      	lsls	r2, r2, #26
 80135da:	d42b      	bmi.n	8013634 <_printf_common+0xb0>
 80135dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80135e0:	4641      	mov	r1, r8
 80135e2:	4638      	mov	r0, r7
 80135e4:	47c8      	blx	r9
 80135e6:	3001      	adds	r0, #1
 80135e8:	d01e      	beq.n	8013628 <_printf_common+0xa4>
 80135ea:	6823      	ldr	r3, [r4, #0]
 80135ec:	6922      	ldr	r2, [r4, #16]
 80135ee:	f003 0306 	and.w	r3, r3, #6
 80135f2:	2b04      	cmp	r3, #4
 80135f4:	bf02      	ittt	eq
 80135f6:	68e5      	ldreq	r5, [r4, #12]
 80135f8:	6833      	ldreq	r3, [r6, #0]
 80135fa:	1aed      	subeq	r5, r5, r3
 80135fc:	68a3      	ldr	r3, [r4, #8]
 80135fe:	bf0c      	ite	eq
 8013600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013604:	2500      	movne	r5, #0
 8013606:	4293      	cmp	r3, r2
 8013608:	bfc4      	itt	gt
 801360a:	1a9b      	subgt	r3, r3, r2
 801360c:	18ed      	addgt	r5, r5, r3
 801360e:	2600      	movs	r6, #0
 8013610:	341a      	adds	r4, #26
 8013612:	42b5      	cmp	r5, r6
 8013614:	d11a      	bne.n	801364c <_printf_common+0xc8>
 8013616:	2000      	movs	r0, #0
 8013618:	e008      	b.n	801362c <_printf_common+0xa8>
 801361a:	2301      	movs	r3, #1
 801361c:	4652      	mov	r2, sl
 801361e:	4641      	mov	r1, r8
 8013620:	4638      	mov	r0, r7
 8013622:	47c8      	blx	r9
 8013624:	3001      	adds	r0, #1
 8013626:	d103      	bne.n	8013630 <_printf_common+0xac>
 8013628:	f04f 30ff 	mov.w	r0, #4294967295
 801362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013630:	3501      	adds	r5, #1
 8013632:	e7c6      	b.n	80135c2 <_printf_common+0x3e>
 8013634:	18e1      	adds	r1, r4, r3
 8013636:	1c5a      	adds	r2, r3, #1
 8013638:	2030      	movs	r0, #48	@ 0x30
 801363a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801363e:	4422      	add	r2, r4
 8013640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013648:	3302      	adds	r3, #2
 801364a:	e7c7      	b.n	80135dc <_printf_common+0x58>
 801364c:	2301      	movs	r3, #1
 801364e:	4622      	mov	r2, r4
 8013650:	4641      	mov	r1, r8
 8013652:	4638      	mov	r0, r7
 8013654:	47c8      	blx	r9
 8013656:	3001      	adds	r0, #1
 8013658:	d0e6      	beq.n	8013628 <_printf_common+0xa4>
 801365a:	3601      	adds	r6, #1
 801365c:	e7d9      	b.n	8013612 <_printf_common+0x8e>
	...

08013660 <_printf_i>:
 8013660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013664:	7e0f      	ldrb	r7, [r1, #24]
 8013666:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013668:	2f78      	cmp	r7, #120	@ 0x78
 801366a:	4691      	mov	r9, r2
 801366c:	4680      	mov	r8, r0
 801366e:	460c      	mov	r4, r1
 8013670:	469a      	mov	sl, r3
 8013672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013676:	d807      	bhi.n	8013688 <_printf_i+0x28>
 8013678:	2f62      	cmp	r7, #98	@ 0x62
 801367a:	d80a      	bhi.n	8013692 <_printf_i+0x32>
 801367c:	2f00      	cmp	r7, #0
 801367e:	f000 80d1 	beq.w	8013824 <_printf_i+0x1c4>
 8013682:	2f58      	cmp	r7, #88	@ 0x58
 8013684:	f000 80b8 	beq.w	80137f8 <_printf_i+0x198>
 8013688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801368c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013690:	e03a      	b.n	8013708 <_printf_i+0xa8>
 8013692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013696:	2b15      	cmp	r3, #21
 8013698:	d8f6      	bhi.n	8013688 <_printf_i+0x28>
 801369a:	a101      	add	r1, pc, #4	@ (adr r1, 80136a0 <_printf_i+0x40>)
 801369c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136a0:	080136f9 	.word	0x080136f9
 80136a4:	0801370d 	.word	0x0801370d
 80136a8:	08013689 	.word	0x08013689
 80136ac:	08013689 	.word	0x08013689
 80136b0:	08013689 	.word	0x08013689
 80136b4:	08013689 	.word	0x08013689
 80136b8:	0801370d 	.word	0x0801370d
 80136bc:	08013689 	.word	0x08013689
 80136c0:	08013689 	.word	0x08013689
 80136c4:	08013689 	.word	0x08013689
 80136c8:	08013689 	.word	0x08013689
 80136cc:	0801380b 	.word	0x0801380b
 80136d0:	08013737 	.word	0x08013737
 80136d4:	080137c5 	.word	0x080137c5
 80136d8:	08013689 	.word	0x08013689
 80136dc:	08013689 	.word	0x08013689
 80136e0:	0801382d 	.word	0x0801382d
 80136e4:	08013689 	.word	0x08013689
 80136e8:	08013737 	.word	0x08013737
 80136ec:	08013689 	.word	0x08013689
 80136f0:	08013689 	.word	0x08013689
 80136f4:	080137cd 	.word	0x080137cd
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	1d1a      	adds	r2, r3, #4
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	6032      	str	r2, [r6, #0]
 8013700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013708:	2301      	movs	r3, #1
 801370a:	e09c      	b.n	8013846 <_printf_i+0x1e6>
 801370c:	6833      	ldr	r3, [r6, #0]
 801370e:	6820      	ldr	r0, [r4, #0]
 8013710:	1d19      	adds	r1, r3, #4
 8013712:	6031      	str	r1, [r6, #0]
 8013714:	0606      	lsls	r6, r0, #24
 8013716:	d501      	bpl.n	801371c <_printf_i+0xbc>
 8013718:	681d      	ldr	r5, [r3, #0]
 801371a:	e003      	b.n	8013724 <_printf_i+0xc4>
 801371c:	0645      	lsls	r5, r0, #25
 801371e:	d5fb      	bpl.n	8013718 <_printf_i+0xb8>
 8013720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013724:	2d00      	cmp	r5, #0
 8013726:	da03      	bge.n	8013730 <_printf_i+0xd0>
 8013728:	232d      	movs	r3, #45	@ 0x2d
 801372a:	426d      	negs	r5, r5
 801372c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013730:	4858      	ldr	r0, [pc, #352]	@ (8013894 <_printf_i+0x234>)
 8013732:	230a      	movs	r3, #10
 8013734:	e011      	b.n	801375a <_printf_i+0xfa>
 8013736:	6821      	ldr	r1, [r4, #0]
 8013738:	6833      	ldr	r3, [r6, #0]
 801373a:	0608      	lsls	r0, r1, #24
 801373c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013740:	d402      	bmi.n	8013748 <_printf_i+0xe8>
 8013742:	0649      	lsls	r1, r1, #25
 8013744:	bf48      	it	mi
 8013746:	b2ad      	uxthmi	r5, r5
 8013748:	2f6f      	cmp	r7, #111	@ 0x6f
 801374a:	4852      	ldr	r0, [pc, #328]	@ (8013894 <_printf_i+0x234>)
 801374c:	6033      	str	r3, [r6, #0]
 801374e:	bf14      	ite	ne
 8013750:	230a      	movne	r3, #10
 8013752:	2308      	moveq	r3, #8
 8013754:	2100      	movs	r1, #0
 8013756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801375a:	6866      	ldr	r6, [r4, #4]
 801375c:	60a6      	str	r6, [r4, #8]
 801375e:	2e00      	cmp	r6, #0
 8013760:	db05      	blt.n	801376e <_printf_i+0x10e>
 8013762:	6821      	ldr	r1, [r4, #0]
 8013764:	432e      	orrs	r6, r5
 8013766:	f021 0104 	bic.w	r1, r1, #4
 801376a:	6021      	str	r1, [r4, #0]
 801376c:	d04b      	beq.n	8013806 <_printf_i+0x1a6>
 801376e:	4616      	mov	r6, r2
 8013770:	fbb5 f1f3 	udiv	r1, r5, r3
 8013774:	fb03 5711 	mls	r7, r3, r1, r5
 8013778:	5dc7      	ldrb	r7, [r0, r7]
 801377a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801377e:	462f      	mov	r7, r5
 8013780:	42bb      	cmp	r3, r7
 8013782:	460d      	mov	r5, r1
 8013784:	d9f4      	bls.n	8013770 <_printf_i+0x110>
 8013786:	2b08      	cmp	r3, #8
 8013788:	d10b      	bne.n	80137a2 <_printf_i+0x142>
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	07df      	lsls	r7, r3, #31
 801378e:	d508      	bpl.n	80137a2 <_printf_i+0x142>
 8013790:	6923      	ldr	r3, [r4, #16]
 8013792:	6861      	ldr	r1, [r4, #4]
 8013794:	4299      	cmp	r1, r3
 8013796:	bfde      	ittt	le
 8013798:	2330      	movle	r3, #48	@ 0x30
 801379a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801379e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80137a2:	1b92      	subs	r2, r2, r6
 80137a4:	6122      	str	r2, [r4, #16]
 80137a6:	f8cd a000 	str.w	sl, [sp]
 80137aa:	464b      	mov	r3, r9
 80137ac:	aa03      	add	r2, sp, #12
 80137ae:	4621      	mov	r1, r4
 80137b0:	4640      	mov	r0, r8
 80137b2:	f7ff fee7 	bl	8013584 <_printf_common>
 80137b6:	3001      	adds	r0, #1
 80137b8:	d14a      	bne.n	8013850 <_printf_i+0x1f0>
 80137ba:	f04f 30ff 	mov.w	r0, #4294967295
 80137be:	b004      	add	sp, #16
 80137c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137c4:	6823      	ldr	r3, [r4, #0]
 80137c6:	f043 0320 	orr.w	r3, r3, #32
 80137ca:	6023      	str	r3, [r4, #0]
 80137cc:	4832      	ldr	r0, [pc, #200]	@ (8013898 <_printf_i+0x238>)
 80137ce:	2778      	movs	r7, #120	@ 0x78
 80137d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80137d4:	6823      	ldr	r3, [r4, #0]
 80137d6:	6831      	ldr	r1, [r6, #0]
 80137d8:	061f      	lsls	r7, r3, #24
 80137da:	f851 5b04 	ldr.w	r5, [r1], #4
 80137de:	d402      	bmi.n	80137e6 <_printf_i+0x186>
 80137e0:	065f      	lsls	r7, r3, #25
 80137e2:	bf48      	it	mi
 80137e4:	b2ad      	uxthmi	r5, r5
 80137e6:	6031      	str	r1, [r6, #0]
 80137e8:	07d9      	lsls	r1, r3, #31
 80137ea:	bf44      	itt	mi
 80137ec:	f043 0320 	orrmi.w	r3, r3, #32
 80137f0:	6023      	strmi	r3, [r4, #0]
 80137f2:	b11d      	cbz	r5, 80137fc <_printf_i+0x19c>
 80137f4:	2310      	movs	r3, #16
 80137f6:	e7ad      	b.n	8013754 <_printf_i+0xf4>
 80137f8:	4826      	ldr	r0, [pc, #152]	@ (8013894 <_printf_i+0x234>)
 80137fa:	e7e9      	b.n	80137d0 <_printf_i+0x170>
 80137fc:	6823      	ldr	r3, [r4, #0]
 80137fe:	f023 0320 	bic.w	r3, r3, #32
 8013802:	6023      	str	r3, [r4, #0]
 8013804:	e7f6      	b.n	80137f4 <_printf_i+0x194>
 8013806:	4616      	mov	r6, r2
 8013808:	e7bd      	b.n	8013786 <_printf_i+0x126>
 801380a:	6833      	ldr	r3, [r6, #0]
 801380c:	6825      	ldr	r5, [r4, #0]
 801380e:	6961      	ldr	r1, [r4, #20]
 8013810:	1d18      	adds	r0, r3, #4
 8013812:	6030      	str	r0, [r6, #0]
 8013814:	062e      	lsls	r6, r5, #24
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	d501      	bpl.n	801381e <_printf_i+0x1be>
 801381a:	6019      	str	r1, [r3, #0]
 801381c:	e002      	b.n	8013824 <_printf_i+0x1c4>
 801381e:	0668      	lsls	r0, r5, #25
 8013820:	d5fb      	bpl.n	801381a <_printf_i+0x1ba>
 8013822:	8019      	strh	r1, [r3, #0]
 8013824:	2300      	movs	r3, #0
 8013826:	6123      	str	r3, [r4, #16]
 8013828:	4616      	mov	r6, r2
 801382a:	e7bc      	b.n	80137a6 <_printf_i+0x146>
 801382c:	6833      	ldr	r3, [r6, #0]
 801382e:	1d1a      	adds	r2, r3, #4
 8013830:	6032      	str	r2, [r6, #0]
 8013832:	681e      	ldr	r6, [r3, #0]
 8013834:	6862      	ldr	r2, [r4, #4]
 8013836:	2100      	movs	r1, #0
 8013838:	4630      	mov	r0, r6
 801383a:	f7ec fd01 	bl	8000240 <memchr>
 801383e:	b108      	cbz	r0, 8013844 <_printf_i+0x1e4>
 8013840:	1b80      	subs	r0, r0, r6
 8013842:	6060      	str	r0, [r4, #4]
 8013844:	6863      	ldr	r3, [r4, #4]
 8013846:	6123      	str	r3, [r4, #16]
 8013848:	2300      	movs	r3, #0
 801384a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801384e:	e7aa      	b.n	80137a6 <_printf_i+0x146>
 8013850:	6923      	ldr	r3, [r4, #16]
 8013852:	4632      	mov	r2, r6
 8013854:	4649      	mov	r1, r9
 8013856:	4640      	mov	r0, r8
 8013858:	47d0      	blx	sl
 801385a:	3001      	adds	r0, #1
 801385c:	d0ad      	beq.n	80137ba <_printf_i+0x15a>
 801385e:	6823      	ldr	r3, [r4, #0]
 8013860:	079b      	lsls	r3, r3, #30
 8013862:	d413      	bmi.n	801388c <_printf_i+0x22c>
 8013864:	68e0      	ldr	r0, [r4, #12]
 8013866:	9b03      	ldr	r3, [sp, #12]
 8013868:	4298      	cmp	r0, r3
 801386a:	bfb8      	it	lt
 801386c:	4618      	movlt	r0, r3
 801386e:	e7a6      	b.n	80137be <_printf_i+0x15e>
 8013870:	2301      	movs	r3, #1
 8013872:	4632      	mov	r2, r6
 8013874:	4649      	mov	r1, r9
 8013876:	4640      	mov	r0, r8
 8013878:	47d0      	blx	sl
 801387a:	3001      	adds	r0, #1
 801387c:	d09d      	beq.n	80137ba <_printf_i+0x15a>
 801387e:	3501      	adds	r5, #1
 8013880:	68e3      	ldr	r3, [r4, #12]
 8013882:	9903      	ldr	r1, [sp, #12]
 8013884:	1a5b      	subs	r3, r3, r1
 8013886:	42ab      	cmp	r3, r5
 8013888:	dcf2      	bgt.n	8013870 <_printf_i+0x210>
 801388a:	e7eb      	b.n	8013864 <_printf_i+0x204>
 801388c:	2500      	movs	r5, #0
 801388e:	f104 0619 	add.w	r6, r4, #25
 8013892:	e7f5      	b.n	8013880 <_printf_i+0x220>
 8013894:	0801ac87 	.word	0x0801ac87
 8013898:	0801ac98 	.word	0x0801ac98

0801389c <_scanf_float>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	b087      	sub	sp, #28
 80138a2:	4691      	mov	r9, r2
 80138a4:	9303      	str	r3, [sp, #12]
 80138a6:	688b      	ldr	r3, [r1, #8]
 80138a8:	1e5a      	subs	r2, r3, #1
 80138aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80138ae:	bf81      	itttt	hi
 80138b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80138b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80138b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80138bc:	608b      	strhi	r3, [r1, #8]
 80138be:	680b      	ldr	r3, [r1, #0]
 80138c0:	460a      	mov	r2, r1
 80138c2:	f04f 0500 	mov.w	r5, #0
 80138c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80138ca:	f842 3b1c 	str.w	r3, [r2], #28
 80138ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80138d2:	4680      	mov	r8, r0
 80138d4:	460c      	mov	r4, r1
 80138d6:	bf98      	it	ls
 80138d8:	f04f 0b00 	movls.w	fp, #0
 80138dc:	9201      	str	r2, [sp, #4]
 80138de:	4616      	mov	r6, r2
 80138e0:	46aa      	mov	sl, r5
 80138e2:	462f      	mov	r7, r5
 80138e4:	9502      	str	r5, [sp, #8]
 80138e6:	68a2      	ldr	r2, [r4, #8]
 80138e8:	b15a      	cbz	r2, 8013902 <_scanf_float+0x66>
 80138ea:	f8d9 3000 	ldr.w	r3, [r9]
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80138f2:	d863      	bhi.n	80139bc <_scanf_float+0x120>
 80138f4:	2b40      	cmp	r3, #64	@ 0x40
 80138f6:	d83b      	bhi.n	8013970 <_scanf_float+0xd4>
 80138f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80138fc:	b2c8      	uxtb	r0, r1
 80138fe:	280e      	cmp	r0, #14
 8013900:	d939      	bls.n	8013976 <_scanf_float+0xda>
 8013902:	b11f      	cbz	r7, 801390c <_scanf_float+0x70>
 8013904:	6823      	ldr	r3, [r4, #0]
 8013906:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801390a:	6023      	str	r3, [r4, #0]
 801390c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013910:	f1ba 0f01 	cmp.w	sl, #1
 8013914:	f200 8114 	bhi.w	8013b40 <_scanf_float+0x2a4>
 8013918:	9b01      	ldr	r3, [sp, #4]
 801391a:	429e      	cmp	r6, r3
 801391c:	f200 8105 	bhi.w	8013b2a <_scanf_float+0x28e>
 8013920:	2001      	movs	r0, #1
 8013922:	b007      	add	sp, #28
 8013924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013928:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801392c:	2a0d      	cmp	r2, #13
 801392e:	d8e8      	bhi.n	8013902 <_scanf_float+0x66>
 8013930:	a101      	add	r1, pc, #4	@ (adr r1, 8013938 <_scanf_float+0x9c>)
 8013932:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013936:	bf00      	nop
 8013938:	08013a81 	.word	0x08013a81
 801393c:	08013903 	.word	0x08013903
 8013940:	08013903 	.word	0x08013903
 8013944:	08013903 	.word	0x08013903
 8013948:	08013add 	.word	0x08013add
 801394c:	08013ab7 	.word	0x08013ab7
 8013950:	08013903 	.word	0x08013903
 8013954:	08013903 	.word	0x08013903
 8013958:	08013a8f 	.word	0x08013a8f
 801395c:	08013903 	.word	0x08013903
 8013960:	08013903 	.word	0x08013903
 8013964:	08013903 	.word	0x08013903
 8013968:	08013903 	.word	0x08013903
 801396c:	08013a4b 	.word	0x08013a4b
 8013970:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013974:	e7da      	b.n	801392c <_scanf_float+0x90>
 8013976:	290e      	cmp	r1, #14
 8013978:	d8c3      	bhi.n	8013902 <_scanf_float+0x66>
 801397a:	a001      	add	r0, pc, #4	@ (adr r0, 8013980 <_scanf_float+0xe4>)
 801397c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013980:	08013a3b 	.word	0x08013a3b
 8013984:	08013903 	.word	0x08013903
 8013988:	08013a3b 	.word	0x08013a3b
 801398c:	08013acb 	.word	0x08013acb
 8013990:	08013903 	.word	0x08013903
 8013994:	080139dd 	.word	0x080139dd
 8013998:	08013a21 	.word	0x08013a21
 801399c:	08013a21 	.word	0x08013a21
 80139a0:	08013a21 	.word	0x08013a21
 80139a4:	08013a21 	.word	0x08013a21
 80139a8:	08013a21 	.word	0x08013a21
 80139ac:	08013a21 	.word	0x08013a21
 80139b0:	08013a21 	.word	0x08013a21
 80139b4:	08013a21 	.word	0x08013a21
 80139b8:	08013a21 	.word	0x08013a21
 80139bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80139be:	d809      	bhi.n	80139d4 <_scanf_float+0x138>
 80139c0:	2b60      	cmp	r3, #96	@ 0x60
 80139c2:	d8b1      	bhi.n	8013928 <_scanf_float+0x8c>
 80139c4:	2b54      	cmp	r3, #84	@ 0x54
 80139c6:	d07b      	beq.n	8013ac0 <_scanf_float+0x224>
 80139c8:	2b59      	cmp	r3, #89	@ 0x59
 80139ca:	d19a      	bne.n	8013902 <_scanf_float+0x66>
 80139cc:	2d07      	cmp	r5, #7
 80139ce:	d198      	bne.n	8013902 <_scanf_float+0x66>
 80139d0:	2508      	movs	r5, #8
 80139d2:	e02f      	b.n	8013a34 <_scanf_float+0x198>
 80139d4:	2b74      	cmp	r3, #116	@ 0x74
 80139d6:	d073      	beq.n	8013ac0 <_scanf_float+0x224>
 80139d8:	2b79      	cmp	r3, #121	@ 0x79
 80139da:	e7f6      	b.n	80139ca <_scanf_float+0x12e>
 80139dc:	6821      	ldr	r1, [r4, #0]
 80139de:	05c8      	lsls	r0, r1, #23
 80139e0:	d51e      	bpl.n	8013a20 <_scanf_float+0x184>
 80139e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80139e6:	6021      	str	r1, [r4, #0]
 80139e8:	3701      	adds	r7, #1
 80139ea:	f1bb 0f00 	cmp.w	fp, #0
 80139ee:	d003      	beq.n	80139f8 <_scanf_float+0x15c>
 80139f0:	3201      	adds	r2, #1
 80139f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139f6:	60a2      	str	r2, [r4, #8]
 80139f8:	68a3      	ldr	r3, [r4, #8]
 80139fa:	3b01      	subs	r3, #1
 80139fc:	60a3      	str	r3, [r4, #8]
 80139fe:	6923      	ldr	r3, [r4, #16]
 8013a00:	3301      	adds	r3, #1
 8013a02:	6123      	str	r3, [r4, #16]
 8013a04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013a10:	f340 8082 	ble.w	8013b18 <_scanf_float+0x27c>
 8013a14:	f8d9 3000 	ldr.w	r3, [r9]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	f8c9 3000 	str.w	r3, [r9]
 8013a1e:	e762      	b.n	80138e6 <_scanf_float+0x4a>
 8013a20:	eb1a 0105 	adds.w	r1, sl, r5
 8013a24:	f47f af6d 	bne.w	8013902 <_scanf_float+0x66>
 8013a28:	6822      	ldr	r2, [r4, #0]
 8013a2a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013a2e:	6022      	str	r2, [r4, #0]
 8013a30:	460d      	mov	r5, r1
 8013a32:	468a      	mov	sl, r1
 8013a34:	f806 3b01 	strb.w	r3, [r6], #1
 8013a38:	e7de      	b.n	80139f8 <_scanf_float+0x15c>
 8013a3a:	6822      	ldr	r2, [r4, #0]
 8013a3c:	0610      	lsls	r0, r2, #24
 8013a3e:	f57f af60 	bpl.w	8013902 <_scanf_float+0x66>
 8013a42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013a46:	6022      	str	r2, [r4, #0]
 8013a48:	e7f4      	b.n	8013a34 <_scanf_float+0x198>
 8013a4a:	f1ba 0f00 	cmp.w	sl, #0
 8013a4e:	d10c      	bne.n	8013a6a <_scanf_float+0x1ce>
 8013a50:	b977      	cbnz	r7, 8013a70 <_scanf_float+0x1d4>
 8013a52:	6822      	ldr	r2, [r4, #0]
 8013a54:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013a58:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013a5c:	d108      	bne.n	8013a70 <_scanf_float+0x1d4>
 8013a5e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013a62:	6022      	str	r2, [r4, #0]
 8013a64:	f04f 0a01 	mov.w	sl, #1
 8013a68:	e7e4      	b.n	8013a34 <_scanf_float+0x198>
 8013a6a:	f1ba 0f02 	cmp.w	sl, #2
 8013a6e:	d050      	beq.n	8013b12 <_scanf_float+0x276>
 8013a70:	2d01      	cmp	r5, #1
 8013a72:	d002      	beq.n	8013a7a <_scanf_float+0x1de>
 8013a74:	2d04      	cmp	r5, #4
 8013a76:	f47f af44 	bne.w	8013902 <_scanf_float+0x66>
 8013a7a:	3501      	adds	r5, #1
 8013a7c:	b2ed      	uxtb	r5, r5
 8013a7e:	e7d9      	b.n	8013a34 <_scanf_float+0x198>
 8013a80:	f1ba 0f01 	cmp.w	sl, #1
 8013a84:	f47f af3d 	bne.w	8013902 <_scanf_float+0x66>
 8013a88:	f04f 0a02 	mov.w	sl, #2
 8013a8c:	e7d2      	b.n	8013a34 <_scanf_float+0x198>
 8013a8e:	b975      	cbnz	r5, 8013aae <_scanf_float+0x212>
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	f47f af37 	bne.w	8013904 <_scanf_float+0x68>
 8013a96:	6822      	ldr	r2, [r4, #0]
 8013a98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013a9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013aa0:	f040 80fc 	bne.w	8013c9c <_scanf_float+0x400>
 8013aa4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013aa8:	6022      	str	r2, [r4, #0]
 8013aaa:	2501      	movs	r5, #1
 8013aac:	e7c2      	b.n	8013a34 <_scanf_float+0x198>
 8013aae:	2d03      	cmp	r5, #3
 8013ab0:	d0e3      	beq.n	8013a7a <_scanf_float+0x1de>
 8013ab2:	2d05      	cmp	r5, #5
 8013ab4:	e7df      	b.n	8013a76 <_scanf_float+0x1da>
 8013ab6:	2d02      	cmp	r5, #2
 8013ab8:	f47f af23 	bne.w	8013902 <_scanf_float+0x66>
 8013abc:	2503      	movs	r5, #3
 8013abe:	e7b9      	b.n	8013a34 <_scanf_float+0x198>
 8013ac0:	2d06      	cmp	r5, #6
 8013ac2:	f47f af1e 	bne.w	8013902 <_scanf_float+0x66>
 8013ac6:	2507      	movs	r5, #7
 8013ac8:	e7b4      	b.n	8013a34 <_scanf_float+0x198>
 8013aca:	6822      	ldr	r2, [r4, #0]
 8013acc:	0591      	lsls	r1, r2, #22
 8013ace:	f57f af18 	bpl.w	8013902 <_scanf_float+0x66>
 8013ad2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8013ad6:	6022      	str	r2, [r4, #0]
 8013ad8:	9702      	str	r7, [sp, #8]
 8013ada:	e7ab      	b.n	8013a34 <_scanf_float+0x198>
 8013adc:	6822      	ldr	r2, [r4, #0]
 8013ade:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013ae2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013ae6:	d005      	beq.n	8013af4 <_scanf_float+0x258>
 8013ae8:	0550      	lsls	r0, r2, #21
 8013aea:	f57f af0a 	bpl.w	8013902 <_scanf_float+0x66>
 8013aee:	2f00      	cmp	r7, #0
 8013af0:	f000 80d4 	beq.w	8013c9c <_scanf_float+0x400>
 8013af4:	0591      	lsls	r1, r2, #22
 8013af6:	bf58      	it	pl
 8013af8:	9902      	ldrpl	r1, [sp, #8]
 8013afa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013afe:	bf58      	it	pl
 8013b00:	1a79      	subpl	r1, r7, r1
 8013b02:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013b06:	bf58      	it	pl
 8013b08:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013b0c:	6022      	str	r2, [r4, #0]
 8013b0e:	2700      	movs	r7, #0
 8013b10:	e790      	b.n	8013a34 <_scanf_float+0x198>
 8013b12:	f04f 0a03 	mov.w	sl, #3
 8013b16:	e78d      	b.n	8013a34 <_scanf_float+0x198>
 8013b18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013b1c:	4649      	mov	r1, r9
 8013b1e:	4640      	mov	r0, r8
 8013b20:	4798      	blx	r3
 8013b22:	2800      	cmp	r0, #0
 8013b24:	f43f aedf 	beq.w	80138e6 <_scanf_float+0x4a>
 8013b28:	e6eb      	b.n	8013902 <_scanf_float+0x66>
 8013b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b32:	464a      	mov	r2, r9
 8013b34:	4640      	mov	r0, r8
 8013b36:	4798      	blx	r3
 8013b38:	6923      	ldr	r3, [r4, #16]
 8013b3a:	3b01      	subs	r3, #1
 8013b3c:	6123      	str	r3, [r4, #16]
 8013b3e:	e6eb      	b.n	8013918 <_scanf_float+0x7c>
 8013b40:	1e6b      	subs	r3, r5, #1
 8013b42:	2b06      	cmp	r3, #6
 8013b44:	d824      	bhi.n	8013b90 <_scanf_float+0x2f4>
 8013b46:	2d02      	cmp	r5, #2
 8013b48:	d836      	bhi.n	8013bb8 <_scanf_float+0x31c>
 8013b4a:	9b01      	ldr	r3, [sp, #4]
 8013b4c:	429e      	cmp	r6, r3
 8013b4e:	f67f aee7 	bls.w	8013920 <_scanf_float+0x84>
 8013b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b5a:	464a      	mov	r2, r9
 8013b5c:	4640      	mov	r0, r8
 8013b5e:	4798      	blx	r3
 8013b60:	6923      	ldr	r3, [r4, #16]
 8013b62:	3b01      	subs	r3, #1
 8013b64:	6123      	str	r3, [r4, #16]
 8013b66:	e7f0      	b.n	8013b4a <_scanf_float+0x2ae>
 8013b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013b6c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013b70:	464a      	mov	r2, r9
 8013b72:	4640      	mov	r0, r8
 8013b74:	4798      	blx	r3
 8013b76:	6923      	ldr	r3, [r4, #16]
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	6123      	str	r3, [r4, #16]
 8013b7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b80:	fa5f fa8a 	uxtb.w	sl, sl
 8013b84:	f1ba 0f02 	cmp.w	sl, #2
 8013b88:	d1ee      	bne.n	8013b68 <_scanf_float+0x2cc>
 8013b8a:	3d03      	subs	r5, #3
 8013b8c:	b2ed      	uxtb	r5, r5
 8013b8e:	1b76      	subs	r6, r6, r5
 8013b90:	6823      	ldr	r3, [r4, #0]
 8013b92:	05da      	lsls	r2, r3, #23
 8013b94:	d530      	bpl.n	8013bf8 <_scanf_float+0x35c>
 8013b96:	055b      	lsls	r3, r3, #21
 8013b98:	d511      	bpl.n	8013bbe <_scanf_float+0x322>
 8013b9a:	9b01      	ldr	r3, [sp, #4]
 8013b9c:	429e      	cmp	r6, r3
 8013b9e:	f67f aebf 	bls.w	8013920 <_scanf_float+0x84>
 8013ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013baa:	464a      	mov	r2, r9
 8013bac:	4640      	mov	r0, r8
 8013bae:	4798      	blx	r3
 8013bb0:	6923      	ldr	r3, [r4, #16]
 8013bb2:	3b01      	subs	r3, #1
 8013bb4:	6123      	str	r3, [r4, #16]
 8013bb6:	e7f0      	b.n	8013b9a <_scanf_float+0x2fe>
 8013bb8:	46aa      	mov	sl, r5
 8013bba:	46b3      	mov	fp, r6
 8013bbc:	e7de      	b.n	8013b7c <_scanf_float+0x2e0>
 8013bbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013bc2:	6923      	ldr	r3, [r4, #16]
 8013bc4:	2965      	cmp	r1, #101	@ 0x65
 8013bc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013bca:	f106 35ff 	add.w	r5, r6, #4294967295
 8013bce:	6123      	str	r3, [r4, #16]
 8013bd0:	d00c      	beq.n	8013bec <_scanf_float+0x350>
 8013bd2:	2945      	cmp	r1, #69	@ 0x45
 8013bd4:	d00a      	beq.n	8013bec <_scanf_float+0x350>
 8013bd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013bda:	464a      	mov	r2, r9
 8013bdc:	4640      	mov	r0, r8
 8013bde:	4798      	blx	r3
 8013be0:	6923      	ldr	r3, [r4, #16]
 8013be2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013be6:	3b01      	subs	r3, #1
 8013be8:	1eb5      	subs	r5, r6, #2
 8013bea:	6123      	str	r3, [r4, #16]
 8013bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013bf0:	464a      	mov	r2, r9
 8013bf2:	4640      	mov	r0, r8
 8013bf4:	4798      	blx	r3
 8013bf6:	462e      	mov	r6, r5
 8013bf8:	6822      	ldr	r2, [r4, #0]
 8013bfa:	f012 0210 	ands.w	r2, r2, #16
 8013bfe:	d001      	beq.n	8013c04 <_scanf_float+0x368>
 8013c00:	2000      	movs	r0, #0
 8013c02:	e68e      	b.n	8013922 <_scanf_float+0x86>
 8013c04:	7032      	strb	r2, [r6, #0]
 8013c06:	6823      	ldr	r3, [r4, #0]
 8013c08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c10:	d123      	bne.n	8013c5a <_scanf_float+0x3be>
 8013c12:	9b02      	ldr	r3, [sp, #8]
 8013c14:	429f      	cmp	r7, r3
 8013c16:	d00a      	beq.n	8013c2e <_scanf_float+0x392>
 8013c18:	1bda      	subs	r2, r3, r7
 8013c1a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013c1e:	429e      	cmp	r6, r3
 8013c20:	bf28      	it	cs
 8013c22:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013c26:	491e      	ldr	r1, [pc, #120]	@ (8013ca0 <_scanf_float+0x404>)
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f000 f911 	bl	8013e50 <siprintf>
 8013c2e:	9901      	ldr	r1, [sp, #4]
 8013c30:	2200      	movs	r2, #0
 8013c32:	4640      	mov	r0, r8
 8013c34:	f002 fba2 	bl	801637c <_strtod_r>
 8013c38:	9b03      	ldr	r3, [sp, #12]
 8013c3a:	6821      	ldr	r1, [r4, #0]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	f011 0f02 	tst.w	r1, #2
 8013c42:	f103 0204 	add.w	r2, r3, #4
 8013c46:	d015      	beq.n	8013c74 <_scanf_float+0x3d8>
 8013c48:	9903      	ldr	r1, [sp, #12]
 8013c4a:	600a      	str	r2, [r1, #0]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	ed83 0b00 	vstr	d0, [r3]
 8013c52:	68e3      	ldr	r3, [r4, #12]
 8013c54:	3301      	adds	r3, #1
 8013c56:	60e3      	str	r3, [r4, #12]
 8013c58:	e7d2      	b.n	8013c00 <_scanf_float+0x364>
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d0e6      	beq.n	8013c2e <_scanf_float+0x392>
 8013c60:	9905      	ldr	r1, [sp, #20]
 8013c62:	230a      	movs	r3, #10
 8013c64:	3101      	adds	r1, #1
 8013c66:	4640      	mov	r0, r8
 8013c68:	f7ff f9e2 	bl	8013030 <_strtol_r>
 8013c6c:	9b04      	ldr	r3, [sp, #16]
 8013c6e:	9e05      	ldr	r6, [sp, #20]
 8013c70:	1ac2      	subs	r2, r0, r3
 8013c72:	e7d2      	b.n	8013c1a <_scanf_float+0x37e>
 8013c74:	f011 0f04 	tst.w	r1, #4
 8013c78:	9903      	ldr	r1, [sp, #12]
 8013c7a:	600a      	str	r2, [r1, #0]
 8013c7c:	d1e6      	bne.n	8013c4c <_scanf_float+0x3b0>
 8013c7e:	eeb4 0b40 	vcmp.f64	d0, d0
 8013c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c86:	681d      	ldr	r5, [r3, #0]
 8013c88:	d705      	bvc.n	8013c96 <_scanf_float+0x3fa>
 8013c8a:	4806      	ldr	r0, [pc, #24]	@ (8013ca4 <_scanf_float+0x408>)
 8013c8c:	f000 fa10 	bl	80140b0 <nanf>
 8013c90:	ed85 0a00 	vstr	s0, [r5]
 8013c94:	e7dd      	b.n	8013c52 <_scanf_float+0x3b6>
 8013c96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013c9a:	e7f9      	b.n	8013c90 <_scanf_float+0x3f4>
 8013c9c:	2700      	movs	r7, #0
 8013c9e:	e635      	b.n	801390c <_scanf_float+0x70>
 8013ca0:	0801aca9 	.word	0x0801aca9
 8013ca4:	0801ace9 	.word	0x0801ace9

08013ca8 <std>:
 8013ca8:	2300      	movs	r3, #0
 8013caa:	b510      	push	{r4, lr}
 8013cac:	4604      	mov	r4, r0
 8013cae:	e9c0 3300 	strd	r3, r3, [r0]
 8013cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cb6:	6083      	str	r3, [r0, #8]
 8013cb8:	8181      	strh	r1, [r0, #12]
 8013cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8013cbc:	81c2      	strh	r2, [r0, #14]
 8013cbe:	6183      	str	r3, [r0, #24]
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	2208      	movs	r2, #8
 8013cc4:	305c      	adds	r0, #92	@ 0x5c
 8013cc6:	f000 f952 	bl	8013f6e <memset>
 8013cca:	4b0d      	ldr	r3, [pc, #52]	@ (8013d00 <std+0x58>)
 8013ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cce:	4b0d      	ldr	r3, [pc, #52]	@ (8013d04 <std+0x5c>)
 8013cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8013d08 <std+0x60>)
 8013cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d0c <std+0x64>)
 8013cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8013cda:	4b0d      	ldr	r3, [pc, #52]	@ (8013d10 <std+0x68>)
 8013cdc:	6224      	str	r4, [r4, #32]
 8013cde:	429c      	cmp	r4, r3
 8013ce0:	d006      	beq.n	8013cf0 <std+0x48>
 8013ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013ce6:	4294      	cmp	r4, r2
 8013ce8:	d002      	beq.n	8013cf0 <std+0x48>
 8013cea:	33d0      	adds	r3, #208	@ 0xd0
 8013cec:	429c      	cmp	r4, r3
 8013cee:	d105      	bne.n	8013cfc <std+0x54>
 8013cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cf8:	f000 b9c8 	b.w	801408c <__retarget_lock_init_recursive>
 8013cfc:	bd10      	pop	{r4, pc}
 8013cfe:	bf00      	nop
 8013d00:	08013e95 	.word	0x08013e95
 8013d04:	08013eb7 	.word	0x08013eb7
 8013d08:	08013eef 	.word	0x08013eef
 8013d0c:	08013f13 	.word	0x08013f13
 8013d10:	20008164 	.word	0x20008164

08013d14 <stdio_exit_handler>:
 8013d14:	4a02      	ldr	r2, [pc, #8]	@ (8013d20 <stdio_exit_handler+0xc>)
 8013d16:	4903      	ldr	r1, [pc, #12]	@ (8013d24 <stdio_exit_handler+0x10>)
 8013d18:	4803      	ldr	r0, [pc, #12]	@ (8013d28 <stdio_exit_handler+0x14>)
 8013d1a:	f000 b869 	b.w	8013df0 <_fwalk_sglue>
 8013d1e:	bf00      	nop
 8013d20:	20000040 	.word	0x20000040
 8013d24:	080169c5 	.word	0x080169c5
 8013d28:	20000050 	.word	0x20000050

08013d2c <cleanup_stdio>:
 8013d2c:	6841      	ldr	r1, [r0, #4]
 8013d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8013d60 <cleanup_stdio+0x34>)
 8013d30:	4299      	cmp	r1, r3
 8013d32:	b510      	push	{r4, lr}
 8013d34:	4604      	mov	r4, r0
 8013d36:	d001      	beq.n	8013d3c <cleanup_stdio+0x10>
 8013d38:	f002 fe44 	bl	80169c4 <_fflush_r>
 8013d3c:	68a1      	ldr	r1, [r4, #8]
 8013d3e:	4b09      	ldr	r3, [pc, #36]	@ (8013d64 <cleanup_stdio+0x38>)
 8013d40:	4299      	cmp	r1, r3
 8013d42:	d002      	beq.n	8013d4a <cleanup_stdio+0x1e>
 8013d44:	4620      	mov	r0, r4
 8013d46:	f002 fe3d 	bl	80169c4 <_fflush_r>
 8013d4a:	68e1      	ldr	r1, [r4, #12]
 8013d4c:	4b06      	ldr	r3, [pc, #24]	@ (8013d68 <cleanup_stdio+0x3c>)
 8013d4e:	4299      	cmp	r1, r3
 8013d50:	d004      	beq.n	8013d5c <cleanup_stdio+0x30>
 8013d52:	4620      	mov	r0, r4
 8013d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d58:	f002 be34 	b.w	80169c4 <_fflush_r>
 8013d5c:	bd10      	pop	{r4, pc}
 8013d5e:	bf00      	nop
 8013d60:	20008164 	.word	0x20008164
 8013d64:	200081cc 	.word	0x200081cc
 8013d68:	20008234 	.word	0x20008234

08013d6c <global_stdio_init.part.0>:
 8013d6c:	b510      	push	{r4, lr}
 8013d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8013d9c <global_stdio_init.part.0+0x30>)
 8013d70:	4c0b      	ldr	r4, [pc, #44]	@ (8013da0 <global_stdio_init.part.0+0x34>)
 8013d72:	4a0c      	ldr	r2, [pc, #48]	@ (8013da4 <global_stdio_init.part.0+0x38>)
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	4620      	mov	r0, r4
 8013d78:	2200      	movs	r2, #0
 8013d7a:	2104      	movs	r1, #4
 8013d7c:	f7ff ff94 	bl	8013ca8 <std>
 8013d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013d84:	2201      	movs	r2, #1
 8013d86:	2109      	movs	r1, #9
 8013d88:	f7ff ff8e 	bl	8013ca8 <std>
 8013d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013d90:	2202      	movs	r2, #2
 8013d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d96:	2112      	movs	r1, #18
 8013d98:	f7ff bf86 	b.w	8013ca8 <std>
 8013d9c:	2000829c 	.word	0x2000829c
 8013da0:	20008164 	.word	0x20008164
 8013da4:	08013d15 	.word	0x08013d15

08013da8 <__sfp_lock_acquire>:
 8013da8:	4801      	ldr	r0, [pc, #4]	@ (8013db0 <__sfp_lock_acquire+0x8>)
 8013daa:	f000 b970 	b.w	801408e <__retarget_lock_acquire_recursive>
 8013dae:	bf00      	nop
 8013db0:	200082a5 	.word	0x200082a5

08013db4 <__sfp_lock_release>:
 8013db4:	4801      	ldr	r0, [pc, #4]	@ (8013dbc <__sfp_lock_release+0x8>)
 8013db6:	f000 b96b 	b.w	8014090 <__retarget_lock_release_recursive>
 8013dba:	bf00      	nop
 8013dbc:	200082a5 	.word	0x200082a5

08013dc0 <__sinit>:
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	f7ff fff0 	bl	8013da8 <__sfp_lock_acquire>
 8013dc8:	6a23      	ldr	r3, [r4, #32]
 8013dca:	b11b      	cbz	r3, 8013dd4 <__sinit+0x14>
 8013dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dd0:	f7ff bff0 	b.w	8013db4 <__sfp_lock_release>
 8013dd4:	4b04      	ldr	r3, [pc, #16]	@ (8013de8 <__sinit+0x28>)
 8013dd6:	6223      	str	r3, [r4, #32]
 8013dd8:	4b04      	ldr	r3, [pc, #16]	@ (8013dec <__sinit+0x2c>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1f5      	bne.n	8013dcc <__sinit+0xc>
 8013de0:	f7ff ffc4 	bl	8013d6c <global_stdio_init.part.0>
 8013de4:	e7f2      	b.n	8013dcc <__sinit+0xc>
 8013de6:	bf00      	nop
 8013de8:	08013d2d 	.word	0x08013d2d
 8013dec:	2000829c 	.word	0x2000829c

08013df0 <_fwalk_sglue>:
 8013df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013df4:	4607      	mov	r7, r0
 8013df6:	4688      	mov	r8, r1
 8013df8:	4614      	mov	r4, r2
 8013dfa:	2600      	movs	r6, #0
 8013dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e00:	f1b9 0901 	subs.w	r9, r9, #1
 8013e04:	d505      	bpl.n	8013e12 <_fwalk_sglue+0x22>
 8013e06:	6824      	ldr	r4, [r4, #0]
 8013e08:	2c00      	cmp	r4, #0
 8013e0a:	d1f7      	bne.n	8013dfc <_fwalk_sglue+0xc>
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e12:	89ab      	ldrh	r3, [r5, #12]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d907      	bls.n	8013e28 <_fwalk_sglue+0x38>
 8013e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	d003      	beq.n	8013e28 <_fwalk_sglue+0x38>
 8013e20:	4629      	mov	r1, r5
 8013e22:	4638      	mov	r0, r7
 8013e24:	47c0      	blx	r8
 8013e26:	4306      	orrs	r6, r0
 8013e28:	3568      	adds	r5, #104	@ 0x68
 8013e2a:	e7e9      	b.n	8013e00 <_fwalk_sglue+0x10>

08013e2c <iprintf>:
 8013e2c:	b40f      	push	{r0, r1, r2, r3}
 8013e2e:	b507      	push	{r0, r1, r2, lr}
 8013e30:	4906      	ldr	r1, [pc, #24]	@ (8013e4c <iprintf+0x20>)
 8013e32:	ab04      	add	r3, sp, #16
 8013e34:	6808      	ldr	r0, [r1, #0]
 8013e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e3a:	6881      	ldr	r1, [r0, #8]
 8013e3c:	9301      	str	r3, [sp, #4]
 8013e3e:	f002 fc25 	bl	801668c <_vfiprintf_r>
 8013e42:	b003      	add	sp, #12
 8013e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e48:	b004      	add	sp, #16
 8013e4a:	4770      	bx	lr
 8013e4c:	2000004c 	.word	0x2000004c

08013e50 <siprintf>:
 8013e50:	b40e      	push	{r1, r2, r3}
 8013e52:	b510      	push	{r4, lr}
 8013e54:	b09d      	sub	sp, #116	@ 0x74
 8013e56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013e58:	9002      	str	r0, [sp, #8]
 8013e5a:	9006      	str	r0, [sp, #24]
 8013e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013e60:	480a      	ldr	r0, [pc, #40]	@ (8013e8c <siprintf+0x3c>)
 8013e62:	9107      	str	r1, [sp, #28]
 8013e64:	9104      	str	r1, [sp, #16]
 8013e66:	490a      	ldr	r1, [pc, #40]	@ (8013e90 <siprintf+0x40>)
 8013e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e6c:	9105      	str	r1, [sp, #20]
 8013e6e:	2400      	movs	r4, #0
 8013e70:	a902      	add	r1, sp, #8
 8013e72:	6800      	ldr	r0, [r0, #0]
 8013e74:	9301      	str	r3, [sp, #4]
 8013e76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013e78:	f002 fae2 	bl	8016440 <_svfiprintf_r>
 8013e7c:	9b02      	ldr	r3, [sp, #8]
 8013e7e:	701c      	strb	r4, [r3, #0]
 8013e80:	b01d      	add	sp, #116	@ 0x74
 8013e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e86:	b003      	add	sp, #12
 8013e88:	4770      	bx	lr
 8013e8a:	bf00      	nop
 8013e8c:	2000004c 	.word	0x2000004c
 8013e90:	ffff0208 	.word	0xffff0208

08013e94 <__sread>:
 8013e94:	b510      	push	{r4, lr}
 8013e96:	460c      	mov	r4, r1
 8013e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e9c:	f000 f8a8 	bl	8013ff0 <_read_r>
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	bfab      	itete	ge
 8013ea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ea8:	181b      	addge	r3, r3, r0
 8013eaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013eae:	bfac      	ite	ge
 8013eb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013eb2:	81a3      	strhlt	r3, [r4, #12]
 8013eb4:	bd10      	pop	{r4, pc}

08013eb6 <__swrite>:
 8013eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eba:	461f      	mov	r7, r3
 8013ebc:	898b      	ldrh	r3, [r1, #12]
 8013ebe:	05db      	lsls	r3, r3, #23
 8013ec0:	4605      	mov	r5, r0
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	4616      	mov	r6, r2
 8013ec6:	d505      	bpl.n	8013ed4 <__swrite+0x1e>
 8013ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ecc:	2302      	movs	r3, #2
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f000 f87c 	bl	8013fcc <_lseek_r>
 8013ed4:	89a3      	ldrh	r3, [r4, #12]
 8013ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013ede:	81a3      	strh	r3, [r4, #12]
 8013ee0:	4632      	mov	r2, r6
 8013ee2:	463b      	mov	r3, r7
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013eea:	f000 b893 	b.w	8014014 <_write_r>

08013eee <__sseek>:
 8013eee:	b510      	push	{r4, lr}
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef6:	f000 f869 	bl	8013fcc <_lseek_r>
 8013efa:	1c43      	adds	r3, r0, #1
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	bf15      	itete	ne
 8013f00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f0a:	81a3      	strheq	r3, [r4, #12]
 8013f0c:	bf18      	it	ne
 8013f0e:	81a3      	strhne	r3, [r4, #12]
 8013f10:	bd10      	pop	{r4, pc}

08013f12 <__sclose>:
 8013f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f16:	f000 b849 	b.w	8013fac <_close_r>

08013f1a <memcmp>:
 8013f1a:	b510      	push	{r4, lr}
 8013f1c:	3901      	subs	r1, #1
 8013f1e:	4402      	add	r2, r0
 8013f20:	4290      	cmp	r0, r2
 8013f22:	d101      	bne.n	8013f28 <memcmp+0xe>
 8013f24:	2000      	movs	r0, #0
 8013f26:	e005      	b.n	8013f34 <memcmp+0x1a>
 8013f28:	7803      	ldrb	r3, [r0, #0]
 8013f2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013f2e:	42a3      	cmp	r3, r4
 8013f30:	d001      	beq.n	8013f36 <memcmp+0x1c>
 8013f32:	1b18      	subs	r0, r3, r4
 8013f34:	bd10      	pop	{r4, pc}
 8013f36:	3001      	adds	r0, #1
 8013f38:	e7f2      	b.n	8013f20 <memcmp+0x6>

08013f3a <memmove>:
 8013f3a:	4288      	cmp	r0, r1
 8013f3c:	b510      	push	{r4, lr}
 8013f3e:	eb01 0402 	add.w	r4, r1, r2
 8013f42:	d902      	bls.n	8013f4a <memmove+0x10>
 8013f44:	4284      	cmp	r4, r0
 8013f46:	4623      	mov	r3, r4
 8013f48:	d807      	bhi.n	8013f5a <memmove+0x20>
 8013f4a:	1e43      	subs	r3, r0, #1
 8013f4c:	42a1      	cmp	r1, r4
 8013f4e:	d008      	beq.n	8013f62 <memmove+0x28>
 8013f50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013f58:	e7f8      	b.n	8013f4c <memmove+0x12>
 8013f5a:	4402      	add	r2, r0
 8013f5c:	4601      	mov	r1, r0
 8013f5e:	428a      	cmp	r2, r1
 8013f60:	d100      	bne.n	8013f64 <memmove+0x2a>
 8013f62:	bd10      	pop	{r4, pc}
 8013f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013f6c:	e7f7      	b.n	8013f5e <memmove+0x24>

08013f6e <memset>:
 8013f6e:	4402      	add	r2, r0
 8013f70:	4603      	mov	r3, r0
 8013f72:	4293      	cmp	r3, r2
 8013f74:	d100      	bne.n	8013f78 <memset+0xa>
 8013f76:	4770      	bx	lr
 8013f78:	f803 1b01 	strb.w	r1, [r3], #1
 8013f7c:	e7f9      	b.n	8013f72 <memset+0x4>

08013f7e <strncmp>:
 8013f7e:	b510      	push	{r4, lr}
 8013f80:	b16a      	cbz	r2, 8013f9e <strncmp+0x20>
 8013f82:	3901      	subs	r1, #1
 8013f84:	1884      	adds	r4, r0, r2
 8013f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d103      	bne.n	8013f9a <strncmp+0x1c>
 8013f92:	42a0      	cmp	r0, r4
 8013f94:	d001      	beq.n	8013f9a <strncmp+0x1c>
 8013f96:	2a00      	cmp	r2, #0
 8013f98:	d1f5      	bne.n	8013f86 <strncmp+0x8>
 8013f9a:	1ad0      	subs	r0, r2, r3
 8013f9c:	bd10      	pop	{r4, pc}
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	e7fc      	b.n	8013f9c <strncmp+0x1e>
	...

08013fa4 <_localeconv_r>:
 8013fa4:	4800      	ldr	r0, [pc, #0]	@ (8013fa8 <_localeconv_r+0x4>)
 8013fa6:	4770      	bx	lr
 8013fa8:	2000018c 	.word	0x2000018c

08013fac <_close_r>:
 8013fac:	b538      	push	{r3, r4, r5, lr}
 8013fae:	4d06      	ldr	r5, [pc, #24]	@ (8013fc8 <_close_r+0x1c>)
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	4604      	mov	r4, r0
 8013fb4:	4608      	mov	r0, r1
 8013fb6:	602b      	str	r3, [r5, #0]
 8013fb8:	f7ed fb1e 	bl	80015f8 <_close>
 8013fbc:	1c43      	adds	r3, r0, #1
 8013fbe:	d102      	bne.n	8013fc6 <_close_r+0x1a>
 8013fc0:	682b      	ldr	r3, [r5, #0]
 8013fc2:	b103      	cbz	r3, 8013fc6 <_close_r+0x1a>
 8013fc4:	6023      	str	r3, [r4, #0]
 8013fc6:	bd38      	pop	{r3, r4, r5, pc}
 8013fc8:	200082a0 	.word	0x200082a0

08013fcc <_lseek_r>:
 8013fcc:	b538      	push	{r3, r4, r5, lr}
 8013fce:	4d07      	ldr	r5, [pc, #28]	@ (8013fec <_lseek_r+0x20>)
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	4608      	mov	r0, r1
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	602a      	str	r2, [r5, #0]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	f7ed fb33 	bl	8001646 <_lseek>
 8013fe0:	1c43      	adds	r3, r0, #1
 8013fe2:	d102      	bne.n	8013fea <_lseek_r+0x1e>
 8013fe4:	682b      	ldr	r3, [r5, #0]
 8013fe6:	b103      	cbz	r3, 8013fea <_lseek_r+0x1e>
 8013fe8:	6023      	str	r3, [r4, #0]
 8013fea:	bd38      	pop	{r3, r4, r5, pc}
 8013fec:	200082a0 	.word	0x200082a0

08013ff0 <_read_r>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	4d07      	ldr	r5, [pc, #28]	@ (8014010 <_read_r+0x20>)
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	4608      	mov	r0, r1
 8013ff8:	4611      	mov	r1, r2
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	602a      	str	r2, [r5, #0]
 8013ffe:	461a      	mov	r2, r3
 8014000:	f7ed fac1 	bl	8001586 <_read>
 8014004:	1c43      	adds	r3, r0, #1
 8014006:	d102      	bne.n	801400e <_read_r+0x1e>
 8014008:	682b      	ldr	r3, [r5, #0]
 801400a:	b103      	cbz	r3, 801400e <_read_r+0x1e>
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	bd38      	pop	{r3, r4, r5, pc}
 8014010:	200082a0 	.word	0x200082a0

08014014 <_write_r>:
 8014014:	b538      	push	{r3, r4, r5, lr}
 8014016:	4d07      	ldr	r5, [pc, #28]	@ (8014034 <_write_r+0x20>)
 8014018:	4604      	mov	r4, r0
 801401a:	4608      	mov	r0, r1
 801401c:	4611      	mov	r1, r2
 801401e:	2200      	movs	r2, #0
 8014020:	602a      	str	r2, [r5, #0]
 8014022:	461a      	mov	r2, r3
 8014024:	f7ed facc 	bl	80015c0 <_write>
 8014028:	1c43      	adds	r3, r0, #1
 801402a:	d102      	bne.n	8014032 <_write_r+0x1e>
 801402c:	682b      	ldr	r3, [r5, #0]
 801402e:	b103      	cbz	r3, 8014032 <_write_r+0x1e>
 8014030:	6023      	str	r3, [r4, #0]
 8014032:	bd38      	pop	{r3, r4, r5, pc}
 8014034:	200082a0 	.word	0x200082a0

08014038 <__errno>:
 8014038:	4b01      	ldr	r3, [pc, #4]	@ (8014040 <__errno+0x8>)
 801403a:	6818      	ldr	r0, [r3, #0]
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop
 8014040:	2000004c 	.word	0x2000004c

08014044 <__libc_init_array>:
 8014044:	b570      	push	{r4, r5, r6, lr}
 8014046:	4d0d      	ldr	r5, [pc, #52]	@ (801407c <__libc_init_array+0x38>)
 8014048:	4c0d      	ldr	r4, [pc, #52]	@ (8014080 <__libc_init_array+0x3c>)
 801404a:	1b64      	subs	r4, r4, r5
 801404c:	10a4      	asrs	r4, r4, #2
 801404e:	2600      	movs	r6, #0
 8014050:	42a6      	cmp	r6, r4
 8014052:	d109      	bne.n	8014068 <__libc_init_array+0x24>
 8014054:	4d0b      	ldr	r5, [pc, #44]	@ (8014084 <__libc_init_array+0x40>)
 8014056:	4c0c      	ldr	r4, [pc, #48]	@ (8014088 <__libc_init_array+0x44>)
 8014058:	f003 fa0a 	bl	8017470 <_init>
 801405c:	1b64      	subs	r4, r4, r5
 801405e:	10a4      	asrs	r4, r4, #2
 8014060:	2600      	movs	r6, #0
 8014062:	42a6      	cmp	r6, r4
 8014064:	d105      	bne.n	8014072 <__libc_init_array+0x2e>
 8014066:	bd70      	pop	{r4, r5, r6, pc}
 8014068:	f855 3b04 	ldr.w	r3, [r5], #4
 801406c:	4798      	blx	r3
 801406e:	3601      	adds	r6, #1
 8014070:	e7ee      	b.n	8014050 <__libc_init_array+0xc>
 8014072:	f855 3b04 	ldr.w	r3, [r5], #4
 8014076:	4798      	blx	r3
 8014078:	3601      	adds	r6, #1
 801407a:	e7f2      	b.n	8014062 <__libc_init_array+0x1e>
 801407c:	0801b090 	.word	0x0801b090
 8014080:	0801b090 	.word	0x0801b090
 8014084:	0801b090 	.word	0x0801b090
 8014088:	0801b094 	.word	0x0801b094

0801408c <__retarget_lock_init_recursive>:
 801408c:	4770      	bx	lr

0801408e <__retarget_lock_acquire_recursive>:
 801408e:	4770      	bx	lr

08014090 <__retarget_lock_release_recursive>:
 8014090:	4770      	bx	lr

08014092 <memcpy>:
 8014092:	440a      	add	r2, r1
 8014094:	4291      	cmp	r1, r2
 8014096:	f100 33ff 	add.w	r3, r0, #4294967295
 801409a:	d100      	bne.n	801409e <memcpy+0xc>
 801409c:	4770      	bx	lr
 801409e:	b510      	push	{r4, lr}
 80140a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140a8:	4291      	cmp	r1, r2
 80140aa:	d1f9      	bne.n	80140a0 <memcpy+0xe>
 80140ac:	bd10      	pop	{r4, pc}
	...

080140b0 <nanf>:
 80140b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80140b8 <nanf+0x8>
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	7fc00000 	.word	0x7fc00000

080140bc <__assert_func>:
 80140bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140be:	4614      	mov	r4, r2
 80140c0:	461a      	mov	r2, r3
 80140c2:	4b09      	ldr	r3, [pc, #36]	@ (80140e8 <__assert_func+0x2c>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4605      	mov	r5, r0
 80140c8:	68d8      	ldr	r0, [r3, #12]
 80140ca:	b14c      	cbz	r4, 80140e0 <__assert_func+0x24>
 80140cc:	4b07      	ldr	r3, [pc, #28]	@ (80140ec <__assert_func+0x30>)
 80140ce:	9100      	str	r1, [sp, #0]
 80140d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80140d4:	4906      	ldr	r1, [pc, #24]	@ (80140f0 <__assert_func+0x34>)
 80140d6:	462b      	mov	r3, r5
 80140d8:	f002 fc9c 	bl	8016a14 <fiprintf>
 80140dc:	f002 fd58 	bl	8016b90 <abort>
 80140e0:	4b04      	ldr	r3, [pc, #16]	@ (80140f4 <__assert_func+0x38>)
 80140e2:	461c      	mov	r4, r3
 80140e4:	e7f3      	b.n	80140ce <__assert_func+0x12>
 80140e6:	bf00      	nop
 80140e8:	2000004c 	.word	0x2000004c
 80140ec:	0801acae 	.word	0x0801acae
 80140f0:	0801acbb 	.word	0x0801acbb
 80140f4:	0801ace9 	.word	0x0801ace9

080140f8 <quorem>:
 80140f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140fc:	6903      	ldr	r3, [r0, #16]
 80140fe:	690c      	ldr	r4, [r1, #16]
 8014100:	42a3      	cmp	r3, r4
 8014102:	4607      	mov	r7, r0
 8014104:	db7e      	blt.n	8014204 <quorem+0x10c>
 8014106:	3c01      	subs	r4, #1
 8014108:	f101 0814 	add.w	r8, r1, #20
 801410c:	00a3      	lsls	r3, r4, #2
 801410e:	f100 0514 	add.w	r5, r0, #20
 8014112:	9300      	str	r3, [sp, #0]
 8014114:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014118:	9301      	str	r3, [sp, #4]
 801411a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801411e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014122:	3301      	adds	r3, #1
 8014124:	429a      	cmp	r2, r3
 8014126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801412a:	fbb2 f6f3 	udiv	r6, r2, r3
 801412e:	d32e      	bcc.n	801418e <quorem+0x96>
 8014130:	f04f 0a00 	mov.w	sl, #0
 8014134:	46c4      	mov	ip, r8
 8014136:	46ae      	mov	lr, r5
 8014138:	46d3      	mov	fp, sl
 801413a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801413e:	b298      	uxth	r0, r3
 8014140:	fb06 a000 	mla	r0, r6, r0, sl
 8014144:	0c02      	lsrs	r2, r0, #16
 8014146:	0c1b      	lsrs	r3, r3, #16
 8014148:	fb06 2303 	mla	r3, r6, r3, r2
 801414c:	f8de 2000 	ldr.w	r2, [lr]
 8014150:	b280      	uxth	r0, r0
 8014152:	b292      	uxth	r2, r2
 8014154:	1a12      	subs	r2, r2, r0
 8014156:	445a      	add	r2, fp
 8014158:	f8de 0000 	ldr.w	r0, [lr]
 801415c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014160:	b29b      	uxth	r3, r3
 8014162:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014166:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801416a:	b292      	uxth	r2, r2
 801416c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014170:	45e1      	cmp	r9, ip
 8014172:	f84e 2b04 	str.w	r2, [lr], #4
 8014176:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801417a:	d2de      	bcs.n	801413a <quorem+0x42>
 801417c:	9b00      	ldr	r3, [sp, #0]
 801417e:	58eb      	ldr	r3, [r5, r3]
 8014180:	b92b      	cbnz	r3, 801418e <quorem+0x96>
 8014182:	9b01      	ldr	r3, [sp, #4]
 8014184:	3b04      	subs	r3, #4
 8014186:	429d      	cmp	r5, r3
 8014188:	461a      	mov	r2, r3
 801418a:	d32f      	bcc.n	80141ec <quorem+0xf4>
 801418c:	613c      	str	r4, [r7, #16]
 801418e:	4638      	mov	r0, r7
 8014190:	f001 f954 	bl	801543c <__mcmp>
 8014194:	2800      	cmp	r0, #0
 8014196:	db25      	blt.n	80141e4 <quorem+0xec>
 8014198:	4629      	mov	r1, r5
 801419a:	2000      	movs	r0, #0
 801419c:	f858 2b04 	ldr.w	r2, [r8], #4
 80141a0:	f8d1 c000 	ldr.w	ip, [r1]
 80141a4:	fa1f fe82 	uxth.w	lr, r2
 80141a8:	fa1f f38c 	uxth.w	r3, ip
 80141ac:	eba3 030e 	sub.w	r3, r3, lr
 80141b0:	4403      	add	r3, r0
 80141b2:	0c12      	lsrs	r2, r2, #16
 80141b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80141b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80141bc:	b29b      	uxth	r3, r3
 80141be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141c2:	45c1      	cmp	r9, r8
 80141c4:	f841 3b04 	str.w	r3, [r1], #4
 80141c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80141cc:	d2e6      	bcs.n	801419c <quorem+0xa4>
 80141ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80141d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80141d6:	b922      	cbnz	r2, 80141e2 <quorem+0xea>
 80141d8:	3b04      	subs	r3, #4
 80141da:	429d      	cmp	r5, r3
 80141dc:	461a      	mov	r2, r3
 80141de:	d30b      	bcc.n	80141f8 <quorem+0x100>
 80141e0:	613c      	str	r4, [r7, #16]
 80141e2:	3601      	adds	r6, #1
 80141e4:	4630      	mov	r0, r6
 80141e6:	b003      	add	sp, #12
 80141e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ec:	6812      	ldr	r2, [r2, #0]
 80141ee:	3b04      	subs	r3, #4
 80141f0:	2a00      	cmp	r2, #0
 80141f2:	d1cb      	bne.n	801418c <quorem+0x94>
 80141f4:	3c01      	subs	r4, #1
 80141f6:	e7c6      	b.n	8014186 <quorem+0x8e>
 80141f8:	6812      	ldr	r2, [r2, #0]
 80141fa:	3b04      	subs	r3, #4
 80141fc:	2a00      	cmp	r2, #0
 80141fe:	d1ef      	bne.n	80141e0 <quorem+0xe8>
 8014200:	3c01      	subs	r4, #1
 8014202:	e7ea      	b.n	80141da <quorem+0xe2>
 8014204:	2000      	movs	r0, #0
 8014206:	e7ee      	b.n	80141e6 <quorem+0xee>

08014208 <_dtoa_r>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	ed2d 8b02 	vpush	{d8}
 8014210:	69c7      	ldr	r7, [r0, #28]
 8014212:	b091      	sub	sp, #68	@ 0x44
 8014214:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014218:	ec55 4b10 	vmov	r4, r5, d0
 801421c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801421e:	9107      	str	r1, [sp, #28]
 8014220:	4681      	mov	r9, r0
 8014222:	9209      	str	r2, [sp, #36]	@ 0x24
 8014224:	930d      	str	r3, [sp, #52]	@ 0x34
 8014226:	b97f      	cbnz	r7, 8014248 <_dtoa_r+0x40>
 8014228:	2010      	movs	r0, #16
 801422a:	f000 fd95 	bl	8014d58 <malloc>
 801422e:	4602      	mov	r2, r0
 8014230:	f8c9 001c 	str.w	r0, [r9, #28]
 8014234:	b920      	cbnz	r0, 8014240 <_dtoa_r+0x38>
 8014236:	4ba0      	ldr	r3, [pc, #640]	@ (80144b8 <_dtoa_r+0x2b0>)
 8014238:	21ef      	movs	r1, #239	@ 0xef
 801423a:	48a0      	ldr	r0, [pc, #640]	@ (80144bc <_dtoa_r+0x2b4>)
 801423c:	f7ff ff3e 	bl	80140bc <__assert_func>
 8014240:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014244:	6007      	str	r7, [r0, #0]
 8014246:	60c7      	str	r7, [r0, #12]
 8014248:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801424c:	6819      	ldr	r1, [r3, #0]
 801424e:	b159      	cbz	r1, 8014268 <_dtoa_r+0x60>
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	604a      	str	r2, [r1, #4]
 8014254:	2301      	movs	r3, #1
 8014256:	4093      	lsls	r3, r2
 8014258:	608b      	str	r3, [r1, #8]
 801425a:	4648      	mov	r0, r9
 801425c:	f000 fe72 	bl	8014f44 <_Bfree>
 8014260:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014264:	2200      	movs	r2, #0
 8014266:	601a      	str	r2, [r3, #0]
 8014268:	1e2b      	subs	r3, r5, #0
 801426a:	bfbb      	ittet	lt
 801426c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014270:	9303      	strlt	r3, [sp, #12]
 8014272:	2300      	movge	r3, #0
 8014274:	2201      	movlt	r2, #1
 8014276:	bfac      	ite	ge
 8014278:	6033      	strge	r3, [r6, #0]
 801427a:	6032      	strlt	r2, [r6, #0]
 801427c:	4b90      	ldr	r3, [pc, #576]	@ (80144c0 <_dtoa_r+0x2b8>)
 801427e:	9e03      	ldr	r6, [sp, #12]
 8014280:	43b3      	bics	r3, r6
 8014282:	d110      	bne.n	80142a6 <_dtoa_r+0x9e>
 8014284:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014286:	f242 730f 	movw	r3, #9999	@ 0x270f
 801428a:	6013      	str	r3, [r2, #0]
 801428c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014290:	4323      	orrs	r3, r4
 8014292:	f000 84e6 	beq.w	8014c62 <_dtoa_r+0xa5a>
 8014296:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014298:	4f8a      	ldr	r7, [pc, #552]	@ (80144c4 <_dtoa_r+0x2bc>)
 801429a:	2b00      	cmp	r3, #0
 801429c:	f000 84e8 	beq.w	8014c70 <_dtoa_r+0xa68>
 80142a0:	1cfb      	adds	r3, r7, #3
 80142a2:	f000 bce3 	b.w	8014c6c <_dtoa_r+0xa64>
 80142a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80142aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80142ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b2:	d10a      	bne.n	80142ca <_dtoa_r+0xc2>
 80142b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80142b6:	2301      	movs	r3, #1
 80142b8:	6013      	str	r3, [r2, #0]
 80142ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80142bc:	b113      	cbz	r3, 80142c4 <_dtoa_r+0xbc>
 80142be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80142c0:	4b81      	ldr	r3, [pc, #516]	@ (80144c8 <_dtoa_r+0x2c0>)
 80142c2:	6013      	str	r3, [r2, #0]
 80142c4:	4f81      	ldr	r7, [pc, #516]	@ (80144cc <_dtoa_r+0x2c4>)
 80142c6:	f000 bcd3 	b.w	8014c70 <_dtoa_r+0xa68>
 80142ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80142cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80142ce:	4648      	mov	r0, r9
 80142d0:	eeb0 0b48 	vmov.f64	d0, d8
 80142d4:	f001 f9d2 	bl	801567c <__d2b>
 80142d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80142dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142de:	9001      	str	r0, [sp, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d045      	beq.n	8014370 <_dtoa_r+0x168>
 80142e4:	eeb0 7b48 	vmov.f64	d7, d8
 80142e8:	ee18 1a90 	vmov	r1, s17
 80142ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80142f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80142f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80142f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80142fc:	2500      	movs	r5, #0
 80142fe:	ee07 1a90 	vmov	s15, r1
 8014302:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014306:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80144a0 <_dtoa_r+0x298>
 801430a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801430e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80144a8 <_dtoa_r+0x2a0>
 8014312:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014316:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80144b0 <_dtoa_r+0x2a8>
 801431a:	ee07 3a90 	vmov	s15, r3
 801431e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014322:	eeb0 7b46 	vmov.f64	d7, d6
 8014326:	eea4 7b05 	vfma.f64	d7, d4, d5
 801432a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801432e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	ee16 8a90 	vmov	r8, s13
 801433a:	d508      	bpl.n	801434e <_dtoa_r+0x146>
 801433c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014340:	eeb4 6b47 	vcmp.f64	d6, d7
 8014344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014348:	bf18      	it	ne
 801434a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801434e:	f1b8 0f16 	cmp.w	r8, #22
 8014352:	d82b      	bhi.n	80143ac <_dtoa_r+0x1a4>
 8014354:	495e      	ldr	r1, [pc, #376]	@ (80144d0 <_dtoa_r+0x2c8>)
 8014356:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801435a:	ed91 7b00 	vldr	d7, [r1]
 801435e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014366:	d501      	bpl.n	801436c <_dtoa_r+0x164>
 8014368:	f108 38ff 	add.w	r8, r8, #4294967295
 801436c:	2100      	movs	r1, #0
 801436e:	e01e      	b.n	80143ae <_dtoa_r+0x1a6>
 8014370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014372:	4413      	add	r3, r2
 8014374:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014378:	2920      	cmp	r1, #32
 801437a:	bfc1      	itttt	gt
 801437c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014380:	408e      	lslgt	r6, r1
 8014382:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014386:	fa24 f101 	lsrgt.w	r1, r4, r1
 801438a:	bfd6      	itet	le
 801438c:	f1c1 0120 	rsble	r1, r1, #32
 8014390:	4331      	orrgt	r1, r6
 8014392:	fa04 f101 	lslle.w	r1, r4, r1
 8014396:	ee07 1a90 	vmov	s15, r1
 801439a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801439e:	3b01      	subs	r3, #1
 80143a0:	ee17 1a90 	vmov	r1, s15
 80143a4:	2501      	movs	r5, #1
 80143a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80143aa:	e7a8      	b.n	80142fe <_dtoa_r+0xf6>
 80143ac:	2101      	movs	r1, #1
 80143ae:	1ad2      	subs	r2, r2, r3
 80143b0:	1e53      	subs	r3, r2, #1
 80143b2:	9306      	str	r3, [sp, #24]
 80143b4:	bf45      	ittet	mi
 80143b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80143ba:	9304      	strmi	r3, [sp, #16]
 80143bc:	2300      	movpl	r3, #0
 80143be:	2300      	movmi	r3, #0
 80143c0:	bf4c      	ite	mi
 80143c2:	9306      	strmi	r3, [sp, #24]
 80143c4:	9304      	strpl	r3, [sp, #16]
 80143c6:	f1b8 0f00 	cmp.w	r8, #0
 80143ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80143cc:	db18      	blt.n	8014400 <_dtoa_r+0x1f8>
 80143ce:	9b06      	ldr	r3, [sp, #24]
 80143d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80143d4:	4443      	add	r3, r8
 80143d6:	9306      	str	r3, [sp, #24]
 80143d8:	2300      	movs	r3, #0
 80143da:	9a07      	ldr	r2, [sp, #28]
 80143dc:	2a09      	cmp	r2, #9
 80143de:	d845      	bhi.n	801446c <_dtoa_r+0x264>
 80143e0:	2a05      	cmp	r2, #5
 80143e2:	bfc4      	itt	gt
 80143e4:	3a04      	subgt	r2, #4
 80143e6:	9207      	strgt	r2, [sp, #28]
 80143e8:	9a07      	ldr	r2, [sp, #28]
 80143ea:	f1a2 0202 	sub.w	r2, r2, #2
 80143ee:	bfcc      	ite	gt
 80143f0:	2400      	movgt	r4, #0
 80143f2:	2401      	movle	r4, #1
 80143f4:	2a03      	cmp	r2, #3
 80143f6:	d844      	bhi.n	8014482 <_dtoa_r+0x27a>
 80143f8:	e8df f002 	tbb	[pc, r2]
 80143fc:	0b173634 	.word	0x0b173634
 8014400:	9b04      	ldr	r3, [sp, #16]
 8014402:	2200      	movs	r2, #0
 8014404:	eba3 0308 	sub.w	r3, r3, r8
 8014408:	9304      	str	r3, [sp, #16]
 801440a:	920a      	str	r2, [sp, #40]	@ 0x28
 801440c:	f1c8 0300 	rsb	r3, r8, #0
 8014410:	e7e3      	b.n	80143da <_dtoa_r+0x1d2>
 8014412:	2201      	movs	r2, #1
 8014414:	9208      	str	r2, [sp, #32]
 8014416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014418:	eb08 0b02 	add.w	fp, r8, r2
 801441c:	f10b 0a01 	add.w	sl, fp, #1
 8014420:	4652      	mov	r2, sl
 8014422:	2a01      	cmp	r2, #1
 8014424:	bfb8      	it	lt
 8014426:	2201      	movlt	r2, #1
 8014428:	e006      	b.n	8014438 <_dtoa_r+0x230>
 801442a:	2201      	movs	r2, #1
 801442c:	9208      	str	r2, [sp, #32]
 801442e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014430:	2a00      	cmp	r2, #0
 8014432:	dd29      	ble.n	8014488 <_dtoa_r+0x280>
 8014434:	4693      	mov	fp, r2
 8014436:	4692      	mov	sl, r2
 8014438:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801443c:	2100      	movs	r1, #0
 801443e:	2004      	movs	r0, #4
 8014440:	f100 0614 	add.w	r6, r0, #20
 8014444:	4296      	cmp	r6, r2
 8014446:	d926      	bls.n	8014496 <_dtoa_r+0x28e>
 8014448:	6079      	str	r1, [r7, #4]
 801444a:	4648      	mov	r0, r9
 801444c:	9305      	str	r3, [sp, #20]
 801444e:	f000 fd39 	bl	8014ec4 <_Balloc>
 8014452:	9b05      	ldr	r3, [sp, #20]
 8014454:	4607      	mov	r7, r0
 8014456:	2800      	cmp	r0, #0
 8014458:	d13e      	bne.n	80144d8 <_dtoa_r+0x2d0>
 801445a:	4b1e      	ldr	r3, [pc, #120]	@ (80144d4 <_dtoa_r+0x2cc>)
 801445c:	4602      	mov	r2, r0
 801445e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014462:	e6ea      	b.n	801423a <_dtoa_r+0x32>
 8014464:	2200      	movs	r2, #0
 8014466:	e7e1      	b.n	801442c <_dtoa_r+0x224>
 8014468:	2200      	movs	r2, #0
 801446a:	e7d3      	b.n	8014414 <_dtoa_r+0x20c>
 801446c:	2401      	movs	r4, #1
 801446e:	2200      	movs	r2, #0
 8014470:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014474:	f04f 3bff 	mov.w	fp, #4294967295
 8014478:	2100      	movs	r1, #0
 801447a:	46da      	mov	sl, fp
 801447c:	2212      	movs	r2, #18
 801447e:	9109      	str	r1, [sp, #36]	@ 0x24
 8014480:	e7da      	b.n	8014438 <_dtoa_r+0x230>
 8014482:	2201      	movs	r2, #1
 8014484:	9208      	str	r2, [sp, #32]
 8014486:	e7f5      	b.n	8014474 <_dtoa_r+0x26c>
 8014488:	f04f 0b01 	mov.w	fp, #1
 801448c:	46da      	mov	sl, fp
 801448e:	465a      	mov	r2, fp
 8014490:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014494:	e7d0      	b.n	8014438 <_dtoa_r+0x230>
 8014496:	3101      	adds	r1, #1
 8014498:	0040      	lsls	r0, r0, #1
 801449a:	e7d1      	b.n	8014440 <_dtoa_r+0x238>
 801449c:	f3af 8000 	nop.w
 80144a0:	636f4361 	.word	0x636f4361
 80144a4:	3fd287a7 	.word	0x3fd287a7
 80144a8:	8b60c8b3 	.word	0x8b60c8b3
 80144ac:	3fc68a28 	.word	0x3fc68a28
 80144b0:	509f79fb 	.word	0x509f79fb
 80144b4:	3fd34413 	.word	0x3fd34413
 80144b8:	0801ac06 	.word	0x0801ac06
 80144bc:	0801acf7 	.word	0x0801acf7
 80144c0:	7ff00000 	.word	0x7ff00000
 80144c4:	0801acf3 	.word	0x0801acf3
 80144c8:	0801ac86 	.word	0x0801ac86
 80144cc:	0801ac85 	.word	0x0801ac85
 80144d0:	0801af70 	.word	0x0801af70
 80144d4:	0801ad4f 	.word	0x0801ad4f
 80144d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80144dc:	f1ba 0f0e 	cmp.w	sl, #14
 80144e0:	6010      	str	r0, [r2, #0]
 80144e2:	d86e      	bhi.n	80145c2 <_dtoa_r+0x3ba>
 80144e4:	2c00      	cmp	r4, #0
 80144e6:	d06c      	beq.n	80145c2 <_dtoa_r+0x3ba>
 80144e8:	f1b8 0f00 	cmp.w	r8, #0
 80144ec:	f340 80b4 	ble.w	8014658 <_dtoa_r+0x450>
 80144f0:	4ac8      	ldr	r2, [pc, #800]	@ (8014814 <_dtoa_r+0x60c>)
 80144f2:	f008 010f 	and.w	r1, r8, #15
 80144f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80144fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80144fe:	ed92 7b00 	vldr	d7, [r2]
 8014502:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014506:	f000 809b 	beq.w	8014640 <_dtoa_r+0x438>
 801450a:	4ac3      	ldr	r2, [pc, #780]	@ (8014818 <_dtoa_r+0x610>)
 801450c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014510:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014514:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014518:	f001 010f 	and.w	r1, r1, #15
 801451c:	2203      	movs	r2, #3
 801451e:	48be      	ldr	r0, [pc, #760]	@ (8014818 <_dtoa_r+0x610>)
 8014520:	2900      	cmp	r1, #0
 8014522:	f040 808f 	bne.w	8014644 <_dtoa_r+0x43c>
 8014526:	ed9d 6b02 	vldr	d6, [sp, #8]
 801452a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801452e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014532:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014534:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014538:	2900      	cmp	r1, #0
 801453a:	f000 80b3 	beq.w	80146a4 <_dtoa_r+0x49c>
 801453e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014542:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454a:	f140 80ab 	bpl.w	80146a4 <_dtoa_r+0x49c>
 801454e:	f1ba 0f00 	cmp.w	sl, #0
 8014552:	f000 80a7 	beq.w	80146a4 <_dtoa_r+0x49c>
 8014556:	f1bb 0f00 	cmp.w	fp, #0
 801455a:	dd30      	ble.n	80145be <_dtoa_r+0x3b6>
 801455c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014560:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014564:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014568:	f108 31ff 	add.w	r1, r8, #4294967295
 801456c:	9105      	str	r1, [sp, #20]
 801456e:	3201      	adds	r2, #1
 8014570:	465c      	mov	r4, fp
 8014572:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014576:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801457a:	ee07 2a90 	vmov	s15, r2
 801457e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014582:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014586:	ee15 2a90 	vmov	r2, s11
 801458a:	ec51 0b15 	vmov	r0, r1, d5
 801458e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014592:	2c00      	cmp	r4, #0
 8014594:	f040 808a 	bne.w	80146ac <_dtoa_r+0x4a4>
 8014598:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801459c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80145a0:	ec41 0b17 	vmov	d7, r0, r1
 80145a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ac:	f300 826a 	bgt.w	8014a84 <_dtoa_r+0x87c>
 80145b0:	eeb1 7b47 	vneg.f64	d7, d7
 80145b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145bc:	d423      	bmi.n	8014606 <_dtoa_r+0x3fe>
 80145be:	ed8d 8b02 	vstr	d8, [sp, #8]
 80145c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80145c4:	2a00      	cmp	r2, #0
 80145c6:	f2c0 8129 	blt.w	801481c <_dtoa_r+0x614>
 80145ca:	f1b8 0f0e 	cmp.w	r8, #14
 80145ce:	f300 8125 	bgt.w	801481c <_dtoa_r+0x614>
 80145d2:	4b90      	ldr	r3, [pc, #576]	@ (8014814 <_dtoa_r+0x60c>)
 80145d4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80145d8:	ed93 6b00 	vldr	d6, [r3]
 80145dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f280 80c8 	bge.w	8014774 <_dtoa_r+0x56c>
 80145e4:	f1ba 0f00 	cmp.w	sl, #0
 80145e8:	f300 80c4 	bgt.w	8014774 <_dtoa_r+0x56c>
 80145ec:	d10b      	bne.n	8014606 <_dtoa_r+0x3fe>
 80145ee:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80145f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80145f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80145fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014602:	f2c0 823c 	blt.w	8014a7e <_dtoa_r+0x876>
 8014606:	2400      	movs	r4, #0
 8014608:	4625      	mov	r5, r4
 801460a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801460c:	43db      	mvns	r3, r3
 801460e:	9305      	str	r3, [sp, #20]
 8014610:	463e      	mov	r6, r7
 8014612:	f04f 0800 	mov.w	r8, #0
 8014616:	4621      	mov	r1, r4
 8014618:	4648      	mov	r0, r9
 801461a:	f000 fc93 	bl	8014f44 <_Bfree>
 801461e:	2d00      	cmp	r5, #0
 8014620:	f000 80a2 	beq.w	8014768 <_dtoa_r+0x560>
 8014624:	f1b8 0f00 	cmp.w	r8, #0
 8014628:	d005      	beq.n	8014636 <_dtoa_r+0x42e>
 801462a:	45a8      	cmp	r8, r5
 801462c:	d003      	beq.n	8014636 <_dtoa_r+0x42e>
 801462e:	4641      	mov	r1, r8
 8014630:	4648      	mov	r0, r9
 8014632:	f000 fc87 	bl	8014f44 <_Bfree>
 8014636:	4629      	mov	r1, r5
 8014638:	4648      	mov	r0, r9
 801463a:	f000 fc83 	bl	8014f44 <_Bfree>
 801463e:	e093      	b.n	8014768 <_dtoa_r+0x560>
 8014640:	2202      	movs	r2, #2
 8014642:	e76c      	b.n	801451e <_dtoa_r+0x316>
 8014644:	07cc      	lsls	r4, r1, #31
 8014646:	d504      	bpl.n	8014652 <_dtoa_r+0x44a>
 8014648:	ed90 6b00 	vldr	d6, [r0]
 801464c:	3201      	adds	r2, #1
 801464e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014652:	1049      	asrs	r1, r1, #1
 8014654:	3008      	adds	r0, #8
 8014656:	e763      	b.n	8014520 <_dtoa_r+0x318>
 8014658:	d022      	beq.n	80146a0 <_dtoa_r+0x498>
 801465a:	f1c8 0100 	rsb	r1, r8, #0
 801465e:	4a6d      	ldr	r2, [pc, #436]	@ (8014814 <_dtoa_r+0x60c>)
 8014660:	f001 000f 	and.w	r0, r1, #15
 8014664:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014668:	ed92 7b00 	vldr	d7, [r2]
 801466c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014670:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014674:	4868      	ldr	r0, [pc, #416]	@ (8014818 <_dtoa_r+0x610>)
 8014676:	1109      	asrs	r1, r1, #4
 8014678:	2400      	movs	r4, #0
 801467a:	2202      	movs	r2, #2
 801467c:	b929      	cbnz	r1, 801468a <_dtoa_r+0x482>
 801467e:	2c00      	cmp	r4, #0
 8014680:	f43f af57 	beq.w	8014532 <_dtoa_r+0x32a>
 8014684:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014688:	e753      	b.n	8014532 <_dtoa_r+0x32a>
 801468a:	07ce      	lsls	r6, r1, #31
 801468c:	d505      	bpl.n	801469a <_dtoa_r+0x492>
 801468e:	ed90 6b00 	vldr	d6, [r0]
 8014692:	3201      	adds	r2, #1
 8014694:	2401      	movs	r4, #1
 8014696:	ee27 7b06 	vmul.f64	d7, d7, d6
 801469a:	1049      	asrs	r1, r1, #1
 801469c:	3008      	adds	r0, #8
 801469e:	e7ed      	b.n	801467c <_dtoa_r+0x474>
 80146a0:	2202      	movs	r2, #2
 80146a2:	e746      	b.n	8014532 <_dtoa_r+0x32a>
 80146a4:	f8cd 8014 	str.w	r8, [sp, #20]
 80146a8:	4654      	mov	r4, sl
 80146aa:	e762      	b.n	8014572 <_dtoa_r+0x36a>
 80146ac:	4a59      	ldr	r2, [pc, #356]	@ (8014814 <_dtoa_r+0x60c>)
 80146ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80146b2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80146b6:	9a08      	ldr	r2, [sp, #32]
 80146b8:	ec41 0b17 	vmov	d7, r0, r1
 80146bc:	443c      	add	r4, r7
 80146be:	b34a      	cbz	r2, 8014714 <_dtoa_r+0x50c>
 80146c0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80146c4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80146c8:	463e      	mov	r6, r7
 80146ca:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80146ce:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80146d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80146d6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80146da:	ee14 2a90 	vmov	r2, s9
 80146de:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80146e2:	3230      	adds	r2, #48	@ 0x30
 80146e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80146e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	f806 2b01 	strb.w	r2, [r6], #1
 80146f4:	d438      	bmi.n	8014768 <_dtoa_r+0x560>
 80146f6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80146fa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80146fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014702:	d46e      	bmi.n	80147e2 <_dtoa_r+0x5da>
 8014704:	42a6      	cmp	r6, r4
 8014706:	f43f af5a 	beq.w	80145be <_dtoa_r+0x3b6>
 801470a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801470e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014712:	e7e0      	b.n	80146d6 <_dtoa_r+0x4ce>
 8014714:	4621      	mov	r1, r4
 8014716:	463e      	mov	r6, r7
 8014718:	ee27 7b04 	vmul.f64	d7, d7, d4
 801471c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014720:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014724:	ee14 2a90 	vmov	r2, s9
 8014728:	3230      	adds	r2, #48	@ 0x30
 801472a:	f806 2b01 	strb.w	r2, [r6], #1
 801472e:	42a6      	cmp	r6, r4
 8014730:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014734:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014738:	d119      	bne.n	801476e <_dtoa_r+0x566>
 801473a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801473e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014742:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801474a:	dc4a      	bgt.n	80147e2 <_dtoa_r+0x5da>
 801474c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014750:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	f57f af31 	bpl.w	80145be <_dtoa_r+0x3b6>
 801475c:	460e      	mov	r6, r1
 801475e:	3901      	subs	r1, #1
 8014760:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014764:	2b30      	cmp	r3, #48	@ 0x30
 8014766:	d0f9      	beq.n	801475c <_dtoa_r+0x554>
 8014768:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801476c:	e027      	b.n	80147be <_dtoa_r+0x5b6>
 801476e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014772:	e7d5      	b.n	8014720 <_dtoa_r+0x518>
 8014774:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014778:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801477c:	463e      	mov	r6, r7
 801477e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014782:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014786:	ee15 3a10 	vmov	r3, s10
 801478a:	3330      	adds	r3, #48	@ 0x30
 801478c:	f806 3b01 	strb.w	r3, [r6], #1
 8014790:	1bf3      	subs	r3, r6, r7
 8014792:	459a      	cmp	sl, r3
 8014794:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014798:	eea3 7b46 	vfms.f64	d7, d3, d6
 801479c:	d132      	bne.n	8014804 <_dtoa_r+0x5fc>
 801479e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80147a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80147a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147aa:	dc18      	bgt.n	80147de <_dtoa_r+0x5d6>
 80147ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80147b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b4:	d103      	bne.n	80147be <_dtoa_r+0x5b6>
 80147b6:	ee15 3a10 	vmov	r3, s10
 80147ba:	07db      	lsls	r3, r3, #31
 80147bc:	d40f      	bmi.n	80147de <_dtoa_r+0x5d6>
 80147be:	9901      	ldr	r1, [sp, #4]
 80147c0:	4648      	mov	r0, r9
 80147c2:	f000 fbbf 	bl	8014f44 <_Bfree>
 80147c6:	2300      	movs	r3, #0
 80147c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80147ca:	7033      	strb	r3, [r6, #0]
 80147cc:	f108 0301 	add.w	r3, r8, #1
 80147d0:	6013      	str	r3, [r2, #0]
 80147d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f000 824b 	beq.w	8014c70 <_dtoa_r+0xa68>
 80147da:	601e      	str	r6, [r3, #0]
 80147dc:	e248      	b.n	8014c70 <_dtoa_r+0xa68>
 80147de:	f8cd 8014 	str.w	r8, [sp, #20]
 80147e2:	4633      	mov	r3, r6
 80147e4:	461e      	mov	r6, r3
 80147e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147ea:	2a39      	cmp	r2, #57	@ 0x39
 80147ec:	d106      	bne.n	80147fc <_dtoa_r+0x5f4>
 80147ee:	429f      	cmp	r7, r3
 80147f0:	d1f8      	bne.n	80147e4 <_dtoa_r+0x5dc>
 80147f2:	9a05      	ldr	r2, [sp, #20]
 80147f4:	3201      	adds	r2, #1
 80147f6:	9205      	str	r2, [sp, #20]
 80147f8:	2230      	movs	r2, #48	@ 0x30
 80147fa:	703a      	strb	r2, [r7, #0]
 80147fc:	781a      	ldrb	r2, [r3, #0]
 80147fe:	3201      	adds	r2, #1
 8014800:	701a      	strb	r2, [r3, #0]
 8014802:	e7b1      	b.n	8014768 <_dtoa_r+0x560>
 8014804:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014808:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014810:	d1b5      	bne.n	801477e <_dtoa_r+0x576>
 8014812:	e7d4      	b.n	80147be <_dtoa_r+0x5b6>
 8014814:	0801af70 	.word	0x0801af70
 8014818:	0801af48 	.word	0x0801af48
 801481c:	9908      	ldr	r1, [sp, #32]
 801481e:	2900      	cmp	r1, #0
 8014820:	f000 80e9 	beq.w	80149f6 <_dtoa_r+0x7ee>
 8014824:	9907      	ldr	r1, [sp, #28]
 8014826:	2901      	cmp	r1, #1
 8014828:	f300 80cb 	bgt.w	80149c2 <_dtoa_r+0x7ba>
 801482c:	2d00      	cmp	r5, #0
 801482e:	f000 80c4 	beq.w	80149ba <_dtoa_r+0x7b2>
 8014832:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014836:	9e04      	ldr	r6, [sp, #16]
 8014838:	461c      	mov	r4, r3
 801483a:	9305      	str	r3, [sp, #20]
 801483c:	9b04      	ldr	r3, [sp, #16]
 801483e:	4413      	add	r3, r2
 8014840:	9304      	str	r3, [sp, #16]
 8014842:	9b06      	ldr	r3, [sp, #24]
 8014844:	2101      	movs	r1, #1
 8014846:	4413      	add	r3, r2
 8014848:	4648      	mov	r0, r9
 801484a:	9306      	str	r3, [sp, #24]
 801484c:	f000 fc78 	bl	8015140 <__i2b>
 8014850:	9b05      	ldr	r3, [sp, #20]
 8014852:	4605      	mov	r5, r0
 8014854:	b166      	cbz	r6, 8014870 <_dtoa_r+0x668>
 8014856:	9a06      	ldr	r2, [sp, #24]
 8014858:	2a00      	cmp	r2, #0
 801485a:	dd09      	ble.n	8014870 <_dtoa_r+0x668>
 801485c:	42b2      	cmp	r2, r6
 801485e:	9904      	ldr	r1, [sp, #16]
 8014860:	bfa8      	it	ge
 8014862:	4632      	movge	r2, r6
 8014864:	1a89      	subs	r1, r1, r2
 8014866:	9104      	str	r1, [sp, #16]
 8014868:	9906      	ldr	r1, [sp, #24]
 801486a:	1ab6      	subs	r6, r6, r2
 801486c:	1a8a      	subs	r2, r1, r2
 801486e:	9206      	str	r2, [sp, #24]
 8014870:	b30b      	cbz	r3, 80148b6 <_dtoa_r+0x6ae>
 8014872:	9a08      	ldr	r2, [sp, #32]
 8014874:	2a00      	cmp	r2, #0
 8014876:	f000 80c5 	beq.w	8014a04 <_dtoa_r+0x7fc>
 801487a:	2c00      	cmp	r4, #0
 801487c:	f000 80bf 	beq.w	80149fe <_dtoa_r+0x7f6>
 8014880:	4629      	mov	r1, r5
 8014882:	4622      	mov	r2, r4
 8014884:	4648      	mov	r0, r9
 8014886:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014888:	f000 fd12 	bl	80152b0 <__pow5mult>
 801488c:	9a01      	ldr	r2, [sp, #4]
 801488e:	4601      	mov	r1, r0
 8014890:	4605      	mov	r5, r0
 8014892:	4648      	mov	r0, r9
 8014894:	f000 fc6a 	bl	801516c <__multiply>
 8014898:	9901      	ldr	r1, [sp, #4]
 801489a:	9005      	str	r0, [sp, #20]
 801489c:	4648      	mov	r0, r9
 801489e:	f000 fb51 	bl	8014f44 <_Bfree>
 80148a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148a4:	1b1b      	subs	r3, r3, r4
 80148a6:	f000 80b0 	beq.w	8014a0a <_dtoa_r+0x802>
 80148aa:	9905      	ldr	r1, [sp, #20]
 80148ac:	461a      	mov	r2, r3
 80148ae:	4648      	mov	r0, r9
 80148b0:	f000 fcfe 	bl	80152b0 <__pow5mult>
 80148b4:	9001      	str	r0, [sp, #4]
 80148b6:	2101      	movs	r1, #1
 80148b8:	4648      	mov	r0, r9
 80148ba:	f000 fc41 	bl	8015140 <__i2b>
 80148be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148c0:	4604      	mov	r4, r0
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	f000 81da 	beq.w	8014c7c <_dtoa_r+0xa74>
 80148c8:	461a      	mov	r2, r3
 80148ca:	4601      	mov	r1, r0
 80148cc:	4648      	mov	r0, r9
 80148ce:	f000 fcef 	bl	80152b0 <__pow5mult>
 80148d2:	9b07      	ldr	r3, [sp, #28]
 80148d4:	2b01      	cmp	r3, #1
 80148d6:	4604      	mov	r4, r0
 80148d8:	f300 80a0 	bgt.w	8014a1c <_dtoa_r+0x814>
 80148dc:	9b02      	ldr	r3, [sp, #8]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	f040 8096 	bne.w	8014a10 <_dtoa_r+0x808>
 80148e4:	9b03      	ldr	r3, [sp, #12]
 80148e6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80148ea:	2a00      	cmp	r2, #0
 80148ec:	f040 8092 	bne.w	8014a14 <_dtoa_r+0x80c>
 80148f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80148f4:	0d12      	lsrs	r2, r2, #20
 80148f6:	0512      	lsls	r2, r2, #20
 80148f8:	2a00      	cmp	r2, #0
 80148fa:	f000 808d 	beq.w	8014a18 <_dtoa_r+0x810>
 80148fe:	9b04      	ldr	r3, [sp, #16]
 8014900:	3301      	adds	r3, #1
 8014902:	9304      	str	r3, [sp, #16]
 8014904:	9b06      	ldr	r3, [sp, #24]
 8014906:	3301      	adds	r3, #1
 8014908:	9306      	str	r3, [sp, #24]
 801490a:	2301      	movs	r3, #1
 801490c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801490e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014910:	2b00      	cmp	r3, #0
 8014912:	f000 81b9 	beq.w	8014c88 <_dtoa_r+0xa80>
 8014916:	6922      	ldr	r2, [r4, #16]
 8014918:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801491c:	6910      	ldr	r0, [r2, #16]
 801491e:	f000 fbc3 	bl	80150a8 <__hi0bits>
 8014922:	f1c0 0020 	rsb	r0, r0, #32
 8014926:	9b06      	ldr	r3, [sp, #24]
 8014928:	4418      	add	r0, r3
 801492a:	f010 001f 	ands.w	r0, r0, #31
 801492e:	f000 8081 	beq.w	8014a34 <_dtoa_r+0x82c>
 8014932:	f1c0 0220 	rsb	r2, r0, #32
 8014936:	2a04      	cmp	r2, #4
 8014938:	dd73      	ble.n	8014a22 <_dtoa_r+0x81a>
 801493a:	9b04      	ldr	r3, [sp, #16]
 801493c:	f1c0 001c 	rsb	r0, r0, #28
 8014940:	4403      	add	r3, r0
 8014942:	9304      	str	r3, [sp, #16]
 8014944:	9b06      	ldr	r3, [sp, #24]
 8014946:	4406      	add	r6, r0
 8014948:	4403      	add	r3, r0
 801494a:	9306      	str	r3, [sp, #24]
 801494c:	9b04      	ldr	r3, [sp, #16]
 801494e:	2b00      	cmp	r3, #0
 8014950:	dd05      	ble.n	801495e <_dtoa_r+0x756>
 8014952:	9901      	ldr	r1, [sp, #4]
 8014954:	461a      	mov	r2, r3
 8014956:	4648      	mov	r0, r9
 8014958:	f000 fd04 	bl	8015364 <__lshift>
 801495c:	9001      	str	r0, [sp, #4]
 801495e:	9b06      	ldr	r3, [sp, #24]
 8014960:	2b00      	cmp	r3, #0
 8014962:	dd05      	ble.n	8014970 <_dtoa_r+0x768>
 8014964:	4621      	mov	r1, r4
 8014966:	461a      	mov	r2, r3
 8014968:	4648      	mov	r0, r9
 801496a:	f000 fcfb 	bl	8015364 <__lshift>
 801496e:	4604      	mov	r4, r0
 8014970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014972:	2b00      	cmp	r3, #0
 8014974:	d060      	beq.n	8014a38 <_dtoa_r+0x830>
 8014976:	9801      	ldr	r0, [sp, #4]
 8014978:	4621      	mov	r1, r4
 801497a:	f000 fd5f 	bl	801543c <__mcmp>
 801497e:	2800      	cmp	r0, #0
 8014980:	da5a      	bge.n	8014a38 <_dtoa_r+0x830>
 8014982:	f108 33ff 	add.w	r3, r8, #4294967295
 8014986:	9305      	str	r3, [sp, #20]
 8014988:	9901      	ldr	r1, [sp, #4]
 801498a:	2300      	movs	r3, #0
 801498c:	220a      	movs	r2, #10
 801498e:	4648      	mov	r0, r9
 8014990:	f000 fafa 	bl	8014f88 <__multadd>
 8014994:	9b08      	ldr	r3, [sp, #32]
 8014996:	9001      	str	r0, [sp, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 8177 	beq.w	8014c8c <_dtoa_r+0xa84>
 801499e:	4629      	mov	r1, r5
 80149a0:	2300      	movs	r3, #0
 80149a2:	220a      	movs	r2, #10
 80149a4:	4648      	mov	r0, r9
 80149a6:	f000 faef 	bl	8014f88 <__multadd>
 80149aa:	f1bb 0f00 	cmp.w	fp, #0
 80149ae:	4605      	mov	r5, r0
 80149b0:	dc6e      	bgt.n	8014a90 <_dtoa_r+0x888>
 80149b2:	9b07      	ldr	r3, [sp, #28]
 80149b4:	2b02      	cmp	r3, #2
 80149b6:	dc48      	bgt.n	8014a4a <_dtoa_r+0x842>
 80149b8:	e06a      	b.n	8014a90 <_dtoa_r+0x888>
 80149ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80149bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80149c0:	e739      	b.n	8014836 <_dtoa_r+0x62e>
 80149c2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80149c6:	42a3      	cmp	r3, r4
 80149c8:	db07      	blt.n	80149da <_dtoa_r+0x7d2>
 80149ca:	f1ba 0f00 	cmp.w	sl, #0
 80149ce:	eba3 0404 	sub.w	r4, r3, r4
 80149d2:	db0b      	blt.n	80149ec <_dtoa_r+0x7e4>
 80149d4:	9e04      	ldr	r6, [sp, #16]
 80149d6:	4652      	mov	r2, sl
 80149d8:	e72f      	b.n	801483a <_dtoa_r+0x632>
 80149da:	1ae2      	subs	r2, r4, r3
 80149dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149de:	9e04      	ldr	r6, [sp, #16]
 80149e0:	4413      	add	r3, r2
 80149e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80149e4:	4652      	mov	r2, sl
 80149e6:	4623      	mov	r3, r4
 80149e8:	2400      	movs	r4, #0
 80149ea:	e726      	b.n	801483a <_dtoa_r+0x632>
 80149ec:	9a04      	ldr	r2, [sp, #16]
 80149ee:	eba2 060a 	sub.w	r6, r2, sl
 80149f2:	2200      	movs	r2, #0
 80149f4:	e721      	b.n	801483a <_dtoa_r+0x632>
 80149f6:	9e04      	ldr	r6, [sp, #16]
 80149f8:	9d08      	ldr	r5, [sp, #32]
 80149fa:	461c      	mov	r4, r3
 80149fc:	e72a      	b.n	8014854 <_dtoa_r+0x64c>
 80149fe:	9a01      	ldr	r2, [sp, #4]
 8014a00:	9205      	str	r2, [sp, #20]
 8014a02:	e752      	b.n	80148aa <_dtoa_r+0x6a2>
 8014a04:	9901      	ldr	r1, [sp, #4]
 8014a06:	461a      	mov	r2, r3
 8014a08:	e751      	b.n	80148ae <_dtoa_r+0x6a6>
 8014a0a:	9b05      	ldr	r3, [sp, #20]
 8014a0c:	9301      	str	r3, [sp, #4]
 8014a0e:	e752      	b.n	80148b6 <_dtoa_r+0x6ae>
 8014a10:	2300      	movs	r3, #0
 8014a12:	e77b      	b.n	801490c <_dtoa_r+0x704>
 8014a14:	9b02      	ldr	r3, [sp, #8]
 8014a16:	e779      	b.n	801490c <_dtoa_r+0x704>
 8014a18:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014a1a:	e778      	b.n	801490e <_dtoa_r+0x706>
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014a20:	e779      	b.n	8014916 <_dtoa_r+0x70e>
 8014a22:	d093      	beq.n	801494c <_dtoa_r+0x744>
 8014a24:	9b04      	ldr	r3, [sp, #16]
 8014a26:	321c      	adds	r2, #28
 8014a28:	4413      	add	r3, r2
 8014a2a:	9304      	str	r3, [sp, #16]
 8014a2c:	9b06      	ldr	r3, [sp, #24]
 8014a2e:	4416      	add	r6, r2
 8014a30:	4413      	add	r3, r2
 8014a32:	e78a      	b.n	801494a <_dtoa_r+0x742>
 8014a34:	4602      	mov	r2, r0
 8014a36:	e7f5      	b.n	8014a24 <_dtoa_r+0x81c>
 8014a38:	f1ba 0f00 	cmp.w	sl, #0
 8014a3c:	f8cd 8014 	str.w	r8, [sp, #20]
 8014a40:	46d3      	mov	fp, sl
 8014a42:	dc21      	bgt.n	8014a88 <_dtoa_r+0x880>
 8014a44:	9b07      	ldr	r3, [sp, #28]
 8014a46:	2b02      	cmp	r3, #2
 8014a48:	dd1e      	ble.n	8014a88 <_dtoa_r+0x880>
 8014a4a:	f1bb 0f00 	cmp.w	fp, #0
 8014a4e:	f47f addc 	bne.w	801460a <_dtoa_r+0x402>
 8014a52:	4621      	mov	r1, r4
 8014a54:	465b      	mov	r3, fp
 8014a56:	2205      	movs	r2, #5
 8014a58:	4648      	mov	r0, r9
 8014a5a:	f000 fa95 	bl	8014f88 <__multadd>
 8014a5e:	4601      	mov	r1, r0
 8014a60:	4604      	mov	r4, r0
 8014a62:	9801      	ldr	r0, [sp, #4]
 8014a64:	f000 fcea 	bl	801543c <__mcmp>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	f77f adce 	ble.w	801460a <_dtoa_r+0x402>
 8014a6e:	463e      	mov	r6, r7
 8014a70:	2331      	movs	r3, #49	@ 0x31
 8014a72:	f806 3b01 	strb.w	r3, [r6], #1
 8014a76:	9b05      	ldr	r3, [sp, #20]
 8014a78:	3301      	adds	r3, #1
 8014a7a:	9305      	str	r3, [sp, #20]
 8014a7c:	e5c9      	b.n	8014612 <_dtoa_r+0x40a>
 8014a7e:	f8cd 8014 	str.w	r8, [sp, #20]
 8014a82:	4654      	mov	r4, sl
 8014a84:	4625      	mov	r5, r4
 8014a86:	e7f2      	b.n	8014a6e <_dtoa_r+0x866>
 8014a88:	9b08      	ldr	r3, [sp, #32]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f000 8102 	beq.w	8014c94 <_dtoa_r+0xa8c>
 8014a90:	2e00      	cmp	r6, #0
 8014a92:	dd05      	ble.n	8014aa0 <_dtoa_r+0x898>
 8014a94:	4629      	mov	r1, r5
 8014a96:	4632      	mov	r2, r6
 8014a98:	4648      	mov	r0, r9
 8014a9a:	f000 fc63 	bl	8015364 <__lshift>
 8014a9e:	4605      	mov	r5, r0
 8014aa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d058      	beq.n	8014b58 <_dtoa_r+0x950>
 8014aa6:	6869      	ldr	r1, [r5, #4]
 8014aa8:	4648      	mov	r0, r9
 8014aaa:	f000 fa0b 	bl	8014ec4 <_Balloc>
 8014aae:	4606      	mov	r6, r0
 8014ab0:	b928      	cbnz	r0, 8014abe <_dtoa_r+0x8b6>
 8014ab2:	4b82      	ldr	r3, [pc, #520]	@ (8014cbc <_dtoa_r+0xab4>)
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014aba:	f7ff bbbe 	b.w	801423a <_dtoa_r+0x32>
 8014abe:	692a      	ldr	r2, [r5, #16]
 8014ac0:	3202      	adds	r2, #2
 8014ac2:	0092      	lsls	r2, r2, #2
 8014ac4:	f105 010c 	add.w	r1, r5, #12
 8014ac8:	300c      	adds	r0, #12
 8014aca:	f7ff fae2 	bl	8014092 <memcpy>
 8014ace:	2201      	movs	r2, #1
 8014ad0:	4631      	mov	r1, r6
 8014ad2:	4648      	mov	r0, r9
 8014ad4:	f000 fc46 	bl	8015364 <__lshift>
 8014ad8:	1c7b      	adds	r3, r7, #1
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	eb07 030b 	add.w	r3, r7, fp
 8014ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ae2:	9b02      	ldr	r3, [sp, #8]
 8014ae4:	f003 0301 	and.w	r3, r3, #1
 8014ae8:	46a8      	mov	r8, r5
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	4605      	mov	r5, r0
 8014aee:	9b04      	ldr	r3, [sp, #16]
 8014af0:	9801      	ldr	r0, [sp, #4]
 8014af2:	4621      	mov	r1, r4
 8014af4:	f103 3bff 	add.w	fp, r3, #4294967295
 8014af8:	f7ff fafe 	bl	80140f8 <quorem>
 8014afc:	4641      	mov	r1, r8
 8014afe:	9002      	str	r0, [sp, #8]
 8014b00:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014b04:	9801      	ldr	r0, [sp, #4]
 8014b06:	f000 fc99 	bl	801543c <__mcmp>
 8014b0a:	462a      	mov	r2, r5
 8014b0c:	9006      	str	r0, [sp, #24]
 8014b0e:	4621      	mov	r1, r4
 8014b10:	4648      	mov	r0, r9
 8014b12:	f000 fcaf 	bl	8015474 <__mdiff>
 8014b16:	68c2      	ldr	r2, [r0, #12]
 8014b18:	4606      	mov	r6, r0
 8014b1a:	b9fa      	cbnz	r2, 8014b5c <_dtoa_r+0x954>
 8014b1c:	4601      	mov	r1, r0
 8014b1e:	9801      	ldr	r0, [sp, #4]
 8014b20:	f000 fc8c 	bl	801543c <__mcmp>
 8014b24:	4602      	mov	r2, r0
 8014b26:	4631      	mov	r1, r6
 8014b28:	4648      	mov	r0, r9
 8014b2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8014b2c:	f000 fa0a 	bl	8014f44 <_Bfree>
 8014b30:	9b07      	ldr	r3, [sp, #28]
 8014b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014b34:	9e04      	ldr	r6, [sp, #16]
 8014b36:	ea42 0103 	orr.w	r1, r2, r3
 8014b3a:	9b08      	ldr	r3, [sp, #32]
 8014b3c:	4319      	orrs	r1, r3
 8014b3e:	d10f      	bne.n	8014b60 <_dtoa_r+0x958>
 8014b40:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014b44:	d028      	beq.n	8014b98 <_dtoa_r+0x990>
 8014b46:	9b06      	ldr	r3, [sp, #24]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	dd02      	ble.n	8014b52 <_dtoa_r+0x94a>
 8014b4c:	9b02      	ldr	r3, [sp, #8]
 8014b4e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014b52:	f88b a000 	strb.w	sl, [fp]
 8014b56:	e55e      	b.n	8014616 <_dtoa_r+0x40e>
 8014b58:	4628      	mov	r0, r5
 8014b5a:	e7bd      	b.n	8014ad8 <_dtoa_r+0x8d0>
 8014b5c:	2201      	movs	r2, #1
 8014b5e:	e7e2      	b.n	8014b26 <_dtoa_r+0x91e>
 8014b60:	9b06      	ldr	r3, [sp, #24]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	db04      	blt.n	8014b70 <_dtoa_r+0x968>
 8014b66:	9907      	ldr	r1, [sp, #28]
 8014b68:	430b      	orrs	r3, r1
 8014b6a:	9908      	ldr	r1, [sp, #32]
 8014b6c:	430b      	orrs	r3, r1
 8014b6e:	d120      	bne.n	8014bb2 <_dtoa_r+0x9aa>
 8014b70:	2a00      	cmp	r2, #0
 8014b72:	ddee      	ble.n	8014b52 <_dtoa_r+0x94a>
 8014b74:	9901      	ldr	r1, [sp, #4]
 8014b76:	2201      	movs	r2, #1
 8014b78:	4648      	mov	r0, r9
 8014b7a:	f000 fbf3 	bl	8015364 <__lshift>
 8014b7e:	4621      	mov	r1, r4
 8014b80:	9001      	str	r0, [sp, #4]
 8014b82:	f000 fc5b 	bl	801543c <__mcmp>
 8014b86:	2800      	cmp	r0, #0
 8014b88:	dc03      	bgt.n	8014b92 <_dtoa_r+0x98a>
 8014b8a:	d1e2      	bne.n	8014b52 <_dtoa_r+0x94a>
 8014b8c:	f01a 0f01 	tst.w	sl, #1
 8014b90:	d0df      	beq.n	8014b52 <_dtoa_r+0x94a>
 8014b92:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014b96:	d1d9      	bne.n	8014b4c <_dtoa_r+0x944>
 8014b98:	2339      	movs	r3, #57	@ 0x39
 8014b9a:	f88b 3000 	strb.w	r3, [fp]
 8014b9e:	4633      	mov	r3, r6
 8014ba0:	461e      	mov	r6, r3
 8014ba2:	3b01      	subs	r3, #1
 8014ba4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014ba8:	2a39      	cmp	r2, #57	@ 0x39
 8014baa:	d052      	beq.n	8014c52 <_dtoa_r+0xa4a>
 8014bac:	3201      	adds	r2, #1
 8014bae:	701a      	strb	r2, [r3, #0]
 8014bb0:	e531      	b.n	8014616 <_dtoa_r+0x40e>
 8014bb2:	2a00      	cmp	r2, #0
 8014bb4:	dd07      	ble.n	8014bc6 <_dtoa_r+0x9be>
 8014bb6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014bba:	d0ed      	beq.n	8014b98 <_dtoa_r+0x990>
 8014bbc:	f10a 0301 	add.w	r3, sl, #1
 8014bc0:	f88b 3000 	strb.w	r3, [fp]
 8014bc4:	e527      	b.n	8014616 <_dtoa_r+0x40e>
 8014bc6:	9b04      	ldr	r3, [sp, #16]
 8014bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bca:	f803 ac01 	strb.w	sl, [r3, #-1]
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d029      	beq.n	8014c26 <_dtoa_r+0xa1e>
 8014bd2:	9901      	ldr	r1, [sp, #4]
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	220a      	movs	r2, #10
 8014bd8:	4648      	mov	r0, r9
 8014bda:	f000 f9d5 	bl	8014f88 <__multadd>
 8014bde:	45a8      	cmp	r8, r5
 8014be0:	9001      	str	r0, [sp, #4]
 8014be2:	f04f 0300 	mov.w	r3, #0
 8014be6:	f04f 020a 	mov.w	r2, #10
 8014bea:	4641      	mov	r1, r8
 8014bec:	4648      	mov	r0, r9
 8014bee:	d107      	bne.n	8014c00 <_dtoa_r+0x9f8>
 8014bf0:	f000 f9ca 	bl	8014f88 <__multadd>
 8014bf4:	4680      	mov	r8, r0
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	9b04      	ldr	r3, [sp, #16]
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	9304      	str	r3, [sp, #16]
 8014bfe:	e776      	b.n	8014aee <_dtoa_r+0x8e6>
 8014c00:	f000 f9c2 	bl	8014f88 <__multadd>
 8014c04:	4629      	mov	r1, r5
 8014c06:	4680      	mov	r8, r0
 8014c08:	2300      	movs	r3, #0
 8014c0a:	220a      	movs	r2, #10
 8014c0c:	4648      	mov	r0, r9
 8014c0e:	f000 f9bb 	bl	8014f88 <__multadd>
 8014c12:	4605      	mov	r5, r0
 8014c14:	e7f0      	b.n	8014bf8 <_dtoa_r+0x9f0>
 8014c16:	f1bb 0f00 	cmp.w	fp, #0
 8014c1a:	bfcc      	ite	gt
 8014c1c:	465e      	movgt	r6, fp
 8014c1e:	2601      	movle	r6, #1
 8014c20:	443e      	add	r6, r7
 8014c22:	f04f 0800 	mov.w	r8, #0
 8014c26:	9901      	ldr	r1, [sp, #4]
 8014c28:	2201      	movs	r2, #1
 8014c2a:	4648      	mov	r0, r9
 8014c2c:	f000 fb9a 	bl	8015364 <__lshift>
 8014c30:	4621      	mov	r1, r4
 8014c32:	9001      	str	r0, [sp, #4]
 8014c34:	f000 fc02 	bl	801543c <__mcmp>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	dcb0      	bgt.n	8014b9e <_dtoa_r+0x996>
 8014c3c:	d102      	bne.n	8014c44 <_dtoa_r+0xa3c>
 8014c3e:	f01a 0f01 	tst.w	sl, #1
 8014c42:	d1ac      	bne.n	8014b9e <_dtoa_r+0x996>
 8014c44:	4633      	mov	r3, r6
 8014c46:	461e      	mov	r6, r3
 8014c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c4c:	2a30      	cmp	r2, #48	@ 0x30
 8014c4e:	d0fa      	beq.n	8014c46 <_dtoa_r+0xa3e>
 8014c50:	e4e1      	b.n	8014616 <_dtoa_r+0x40e>
 8014c52:	429f      	cmp	r7, r3
 8014c54:	d1a4      	bne.n	8014ba0 <_dtoa_r+0x998>
 8014c56:	9b05      	ldr	r3, [sp, #20]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	9305      	str	r3, [sp, #20]
 8014c5c:	2331      	movs	r3, #49	@ 0x31
 8014c5e:	703b      	strb	r3, [r7, #0]
 8014c60:	e4d9      	b.n	8014616 <_dtoa_r+0x40e>
 8014c62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014c64:	4f16      	ldr	r7, [pc, #88]	@ (8014cc0 <_dtoa_r+0xab8>)
 8014c66:	b11b      	cbz	r3, 8014c70 <_dtoa_r+0xa68>
 8014c68:	f107 0308 	add.w	r3, r7, #8
 8014c6c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014c6e:	6013      	str	r3, [r2, #0]
 8014c70:	4638      	mov	r0, r7
 8014c72:	b011      	add	sp, #68	@ 0x44
 8014c74:	ecbd 8b02 	vpop	{d8}
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7c:	9b07      	ldr	r3, [sp, #28]
 8014c7e:	2b01      	cmp	r3, #1
 8014c80:	f77f ae2c 	ble.w	80148dc <_dtoa_r+0x6d4>
 8014c84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014c88:	2001      	movs	r0, #1
 8014c8a:	e64c      	b.n	8014926 <_dtoa_r+0x71e>
 8014c8c:	f1bb 0f00 	cmp.w	fp, #0
 8014c90:	f77f aed8 	ble.w	8014a44 <_dtoa_r+0x83c>
 8014c94:	463e      	mov	r6, r7
 8014c96:	9801      	ldr	r0, [sp, #4]
 8014c98:	4621      	mov	r1, r4
 8014c9a:	f7ff fa2d 	bl	80140f8 <quorem>
 8014c9e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014ca2:	f806 ab01 	strb.w	sl, [r6], #1
 8014ca6:	1bf2      	subs	r2, r6, r7
 8014ca8:	4593      	cmp	fp, r2
 8014caa:	ddb4      	ble.n	8014c16 <_dtoa_r+0xa0e>
 8014cac:	9901      	ldr	r1, [sp, #4]
 8014cae:	2300      	movs	r3, #0
 8014cb0:	220a      	movs	r2, #10
 8014cb2:	4648      	mov	r0, r9
 8014cb4:	f000 f968 	bl	8014f88 <__multadd>
 8014cb8:	9001      	str	r0, [sp, #4]
 8014cba:	e7ec      	b.n	8014c96 <_dtoa_r+0xa8e>
 8014cbc:	0801ad4f 	.word	0x0801ad4f
 8014cc0:	0801acea 	.word	0x0801acea

08014cc4 <_free_r>:
 8014cc4:	b538      	push	{r3, r4, r5, lr}
 8014cc6:	4605      	mov	r5, r0
 8014cc8:	2900      	cmp	r1, #0
 8014cca:	d041      	beq.n	8014d50 <_free_r+0x8c>
 8014ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cd0:	1f0c      	subs	r4, r1, #4
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	bfb8      	it	lt
 8014cd6:	18e4      	addlt	r4, r4, r3
 8014cd8:	f000 f8e8 	bl	8014eac <__malloc_lock>
 8014cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8014d54 <_free_r+0x90>)
 8014cde:	6813      	ldr	r3, [r2, #0]
 8014ce0:	b933      	cbnz	r3, 8014cf0 <_free_r+0x2c>
 8014ce2:	6063      	str	r3, [r4, #4]
 8014ce4:	6014      	str	r4, [r2, #0]
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cec:	f000 b8e4 	b.w	8014eb8 <__malloc_unlock>
 8014cf0:	42a3      	cmp	r3, r4
 8014cf2:	d908      	bls.n	8014d06 <_free_r+0x42>
 8014cf4:	6820      	ldr	r0, [r4, #0]
 8014cf6:	1821      	adds	r1, r4, r0
 8014cf8:	428b      	cmp	r3, r1
 8014cfa:	bf01      	itttt	eq
 8014cfc:	6819      	ldreq	r1, [r3, #0]
 8014cfe:	685b      	ldreq	r3, [r3, #4]
 8014d00:	1809      	addeq	r1, r1, r0
 8014d02:	6021      	streq	r1, [r4, #0]
 8014d04:	e7ed      	b.n	8014ce2 <_free_r+0x1e>
 8014d06:	461a      	mov	r2, r3
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	b10b      	cbz	r3, 8014d10 <_free_r+0x4c>
 8014d0c:	42a3      	cmp	r3, r4
 8014d0e:	d9fa      	bls.n	8014d06 <_free_r+0x42>
 8014d10:	6811      	ldr	r1, [r2, #0]
 8014d12:	1850      	adds	r0, r2, r1
 8014d14:	42a0      	cmp	r0, r4
 8014d16:	d10b      	bne.n	8014d30 <_free_r+0x6c>
 8014d18:	6820      	ldr	r0, [r4, #0]
 8014d1a:	4401      	add	r1, r0
 8014d1c:	1850      	adds	r0, r2, r1
 8014d1e:	4283      	cmp	r3, r0
 8014d20:	6011      	str	r1, [r2, #0]
 8014d22:	d1e0      	bne.n	8014ce6 <_free_r+0x22>
 8014d24:	6818      	ldr	r0, [r3, #0]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	6053      	str	r3, [r2, #4]
 8014d2a:	4408      	add	r0, r1
 8014d2c:	6010      	str	r0, [r2, #0]
 8014d2e:	e7da      	b.n	8014ce6 <_free_r+0x22>
 8014d30:	d902      	bls.n	8014d38 <_free_r+0x74>
 8014d32:	230c      	movs	r3, #12
 8014d34:	602b      	str	r3, [r5, #0]
 8014d36:	e7d6      	b.n	8014ce6 <_free_r+0x22>
 8014d38:	6820      	ldr	r0, [r4, #0]
 8014d3a:	1821      	adds	r1, r4, r0
 8014d3c:	428b      	cmp	r3, r1
 8014d3e:	bf04      	itt	eq
 8014d40:	6819      	ldreq	r1, [r3, #0]
 8014d42:	685b      	ldreq	r3, [r3, #4]
 8014d44:	6063      	str	r3, [r4, #4]
 8014d46:	bf04      	itt	eq
 8014d48:	1809      	addeq	r1, r1, r0
 8014d4a:	6021      	streq	r1, [r4, #0]
 8014d4c:	6054      	str	r4, [r2, #4]
 8014d4e:	e7ca      	b.n	8014ce6 <_free_r+0x22>
 8014d50:	bd38      	pop	{r3, r4, r5, pc}
 8014d52:	bf00      	nop
 8014d54:	200082ac 	.word	0x200082ac

08014d58 <malloc>:
 8014d58:	4b02      	ldr	r3, [pc, #8]	@ (8014d64 <malloc+0xc>)
 8014d5a:	4601      	mov	r1, r0
 8014d5c:	6818      	ldr	r0, [r3, #0]
 8014d5e:	f000 b825 	b.w	8014dac <_malloc_r>
 8014d62:	bf00      	nop
 8014d64:	2000004c 	.word	0x2000004c

08014d68 <sbrk_aligned>:
 8014d68:	b570      	push	{r4, r5, r6, lr}
 8014d6a:	4e0f      	ldr	r6, [pc, #60]	@ (8014da8 <sbrk_aligned+0x40>)
 8014d6c:	460c      	mov	r4, r1
 8014d6e:	6831      	ldr	r1, [r6, #0]
 8014d70:	4605      	mov	r5, r0
 8014d72:	b911      	cbnz	r1, 8014d7a <sbrk_aligned+0x12>
 8014d74:	f001 fef4 	bl	8016b60 <_sbrk_r>
 8014d78:	6030      	str	r0, [r6, #0]
 8014d7a:	4621      	mov	r1, r4
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	f001 feef 	bl	8016b60 <_sbrk_r>
 8014d82:	1c43      	adds	r3, r0, #1
 8014d84:	d103      	bne.n	8014d8e <sbrk_aligned+0x26>
 8014d86:	f04f 34ff 	mov.w	r4, #4294967295
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	bd70      	pop	{r4, r5, r6, pc}
 8014d8e:	1cc4      	adds	r4, r0, #3
 8014d90:	f024 0403 	bic.w	r4, r4, #3
 8014d94:	42a0      	cmp	r0, r4
 8014d96:	d0f8      	beq.n	8014d8a <sbrk_aligned+0x22>
 8014d98:	1a21      	subs	r1, r4, r0
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f001 fee0 	bl	8016b60 <_sbrk_r>
 8014da0:	3001      	adds	r0, #1
 8014da2:	d1f2      	bne.n	8014d8a <sbrk_aligned+0x22>
 8014da4:	e7ef      	b.n	8014d86 <sbrk_aligned+0x1e>
 8014da6:	bf00      	nop
 8014da8:	200082a8 	.word	0x200082a8

08014dac <_malloc_r>:
 8014dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014db0:	1ccd      	adds	r5, r1, #3
 8014db2:	f025 0503 	bic.w	r5, r5, #3
 8014db6:	3508      	adds	r5, #8
 8014db8:	2d0c      	cmp	r5, #12
 8014dba:	bf38      	it	cc
 8014dbc:	250c      	movcc	r5, #12
 8014dbe:	2d00      	cmp	r5, #0
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	db01      	blt.n	8014dc8 <_malloc_r+0x1c>
 8014dc4:	42a9      	cmp	r1, r5
 8014dc6:	d904      	bls.n	8014dd2 <_malloc_r+0x26>
 8014dc8:	230c      	movs	r3, #12
 8014dca:	6033      	str	r3, [r6, #0]
 8014dcc:	2000      	movs	r0, #0
 8014dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014ea8 <_malloc_r+0xfc>
 8014dd6:	f000 f869 	bl	8014eac <__malloc_lock>
 8014dda:	f8d8 3000 	ldr.w	r3, [r8]
 8014dde:	461c      	mov	r4, r3
 8014de0:	bb44      	cbnz	r4, 8014e34 <_malloc_r+0x88>
 8014de2:	4629      	mov	r1, r5
 8014de4:	4630      	mov	r0, r6
 8014de6:	f7ff ffbf 	bl	8014d68 <sbrk_aligned>
 8014dea:	1c43      	adds	r3, r0, #1
 8014dec:	4604      	mov	r4, r0
 8014dee:	d158      	bne.n	8014ea2 <_malloc_r+0xf6>
 8014df0:	f8d8 4000 	ldr.w	r4, [r8]
 8014df4:	4627      	mov	r7, r4
 8014df6:	2f00      	cmp	r7, #0
 8014df8:	d143      	bne.n	8014e82 <_malloc_r+0xd6>
 8014dfa:	2c00      	cmp	r4, #0
 8014dfc:	d04b      	beq.n	8014e96 <_malloc_r+0xea>
 8014dfe:	6823      	ldr	r3, [r4, #0]
 8014e00:	4639      	mov	r1, r7
 8014e02:	4630      	mov	r0, r6
 8014e04:	eb04 0903 	add.w	r9, r4, r3
 8014e08:	f001 feaa 	bl	8016b60 <_sbrk_r>
 8014e0c:	4581      	cmp	r9, r0
 8014e0e:	d142      	bne.n	8014e96 <_malloc_r+0xea>
 8014e10:	6821      	ldr	r1, [r4, #0]
 8014e12:	1a6d      	subs	r5, r5, r1
 8014e14:	4629      	mov	r1, r5
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7ff ffa6 	bl	8014d68 <sbrk_aligned>
 8014e1c:	3001      	adds	r0, #1
 8014e1e:	d03a      	beq.n	8014e96 <_malloc_r+0xea>
 8014e20:	6823      	ldr	r3, [r4, #0]
 8014e22:	442b      	add	r3, r5
 8014e24:	6023      	str	r3, [r4, #0]
 8014e26:	f8d8 3000 	ldr.w	r3, [r8]
 8014e2a:	685a      	ldr	r2, [r3, #4]
 8014e2c:	bb62      	cbnz	r2, 8014e88 <_malloc_r+0xdc>
 8014e2e:	f8c8 7000 	str.w	r7, [r8]
 8014e32:	e00f      	b.n	8014e54 <_malloc_r+0xa8>
 8014e34:	6822      	ldr	r2, [r4, #0]
 8014e36:	1b52      	subs	r2, r2, r5
 8014e38:	d420      	bmi.n	8014e7c <_malloc_r+0xd0>
 8014e3a:	2a0b      	cmp	r2, #11
 8014e3c:	d917      	bls.n	8014e6e <_malloc_r+0xc2>
 8014e3e:	1961      	adds	r1, r4, r5
 8014e40:	42a3      	cmp	r3, r4
 8014e42:	6025      	str	r5, [r4, #0]
 8014e44:	bf18      	it	ne
 8014e46:	6059      	strne	r1, [r3, #4]
 8014e48:	6863      	ldr	r3, [r4, #4]
 8014e4a:	bf08      	it	eq
 8014e4c:	f8c8 1000 	streq.w	r1, [r8]
 8014e50:	5162      	str	r2, [r4, r5]
 8014e52:	604b      	str	r3, [r1, #4]
 8014e54:	4630      	mov	r0, r6
 8014e56:	f000 f82f 	bl	8014eb8 <__malloc_unlock>
 8014e5a:	f104 000b 	add.w	r0, r4, #11
 8014e5e:	1d23      	adds	r3, r4, #4
 8014e60:	f020 0007 	bic.w	r0, r0, #7
 8014e64:	1ac2      	subs	r2, r0, r3
 8014e66:	bf1c      	itt	ne
 8014e68:	1a1b      	subne	r3, r3, r0
 8014e6a:	50a3      	strne	r3, [r4, r2]
 8014e6c:	e7af      	b.n	8014dce <_malloc_r+0x22>
 8014e6e:	6862      	ldr	r2, [r4, #4]
 8014e70:	42a3      	cmp	r3, r4
 8014e72:	bf0c      	ite	eq
 8014e74:	f8c8 2000 	streq.w	r2, [r8]
 8014e78:	605a      	strne	r2, [r3, #4]
 8014e7a:	e7eb      	b.n	8014e54 <_malloc_r+0xa8>
 8014e7c:	4623      	mov	r3, r4
 8014e7e:	6864      	ldr	r4, [r4, #4]
 8014e80:	e7ae      	b.n	8014de0 <_malloc_r+0x34>
 8014e82:	463c      	mov	r4, r7
 8014e84:	687f      	ldr	r7, [r7, #4]
 8014e86:	e7b6      	b.n	8014df6 <_malloc_r+0x4a>
 8014e88:	461a      	mov	r2, r3
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	42a3      	cmp	r3, r4
 8014e8e:	d1fb      	bne.n	8014e88 <_malloc_r+0xdc>
 8014e90:	2300      	movs	r3, #0
 8014e92:	6053      	str	r3, [r2, #4]
 8014e94:	e7de      	b.n	8014e54 <_malloc_r+0xa8>
 8014e96:	230c      	movs	r3, #12
 8014e98:	6033      	str	r3, [r6, #0]
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f000 f80c 	bl	8014eb8 <__malloc_unlock>
 8014ea0:	e794      	b.n	8014dcc <_malloc_r+0x20>
 8014ea2:	6005      	str	r5, [r0, #0]
 8014ea4:	e7d6      	b.n	8014e54 <_malloc_r+0xa8>
 8014ea6:	bf00      	nop
 8014ea8:	200082ac 	.word	0x200082ac

08014eac <__malloc_lock>:
 8014eac:	4801      	ldr	r0, [pc, #4]	@ (8014eb4 <__malloc_lock+0x8>)
 8014eae:	f7ff b8ee 	b.w	801408e <__retarget_lock_acquire_recursive>
 8014eb2:	bf00      	nop
 8014eb4:	200082a4 	.word	0x200082a4

08014eb8 <__malloc_unlock>:
 8014eb8:	4801      	ldr	r0, [pc, #4]	@ (8014ec0 <__malloc_unlock+0x8>)
 8014eba:	f7ff b8e9 	b.w	8014090 <__retarget_lock_release_recursive>
 8014ebe:	bf00      	nop
 8014ec0:	200082a4 	.word	0x200082a4

08014ec4 <_Balloc>:
 8014ec4:	b570      	push	{r4, r5, r6, lr}
 8014ec6:	69c6      	ldr	r6, [r0, #28]
 8014ec8:	4604      	mov	r4, r0
 8014eca:	460d      	mov	r5, r1
 8014ecc:	b976      	cbnz	r6, 8014eec <_Balloc+0x28>
 8014ece:	2010      	movs	r0, #16
 8014ed0:	f7ff ff42 	bl	8014d58 <malloc>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	61e0      	str	r0, [r4, #28]
 8014ed8:	b920      	cbnz	r0, 8014ee4 <_Balloc+0x20>
 8014eda:	4b18      	ldr	r3, [pc, #96]	@ (8014f3c <_Balloc+0x78>)
 8014edc:	4818      	ldr	r0, [pc, #96]	@ (8014f40 <_Balloc+0x7c>)
 8014ede:	216b      	movs	r1, #107	@ 0x6b
 8014ee0:	f7ff f8ec 	bl	80140bc <__assert_func>
 8014ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ee8:	6006      	str	r6, [r0, #0]
 8014eea:	60c6      	str	r6, [r0, #12]
 8014eec:	69e6      	ldr	r6, [r4, #28]
 8014eee:	68f3      	ldr	r3, [r6, #12]
 8014ef0:	b183      	cbz	r3, 8014f14 <_Balloc+0x50>
 8014ef2:	69e3      	ldr	r3, [r4, #28]
 8014ef4:	68db      	ldr	r3, [r3, #12]
 8014ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014efa:	b9b8      	cbnz	r0, 8014f2c <_Balloc+0x68>
 8014efc:	2101      	movs	r1, #1
 8014efe:	fa01 f605 	lsl.w	r6, r1, r5
 8014f02:	1d72      	adds	r2, r6, #5
 8014f04:	0092      	lsls	r2, r2, #2
 8014f06:	4620      	mov	r0, r4
 8014f08:	f001 fe49 	bl	8016b9e <_calloc_r>
 8014f0c:	b160      	cbz	r0, 8014f28 <_Balloc+0x64>
 8014f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014f12:	e00e      	b.n	8014f32 <_Balloc+0x6e>
 8014f14:	2221      	movs	r2, #33	@ 0x21
 8014f16:	2104      	movs	r1, #4
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f001 fe40 	bl	8016b9e <_calloc_r>
 8014f1e:	69e3      	ldr	r3, [r4, #28]
 8014f20:	60f0      	str	r0, [r6, #12]
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1e4      	bne.n	8014ef2 <_Balloc+0x2e>
 8014f28:	2000      	movs	r0, #0
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	6802      	ldr	r2, [r0, #0]
 8014f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f32:	2300      	movs	r3, #0
 8014f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014f38:	e7f7      	b.n	8014f2a <_Balloc+0x66>
 8014f3a:	bf00      	nop
 8014f3c:	0801ac06 	.word	0x0801ac06
 8014f40:	0801ad60 	.word	0x0801ad60

08014f44 <_Bfree>:
 8014f44:	b570      	push	{r4, r5, r6, lr}
 8014f46:	69c6      	ldr	r6, [r0, #28]
 8014f48:	4605      	mov	r5, r0
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	b976      	cbnz	r6, 8014f6c <_Bfree+0x28>
 8014f4e:	2010      	movs	r0, #16
 8014f50:	f7ff ff02 	bl	8014d58 <malloc>
 8014f54:	4602      	mov	r2, r0
 8014f56:	61e8      	str	r0, [r5, #28]
 8014f58:	b920      	cbnz	r0, 8014f64 <_Bfree+0x20>
 8014f5a:	4b09      	ldr	r3, [pc, #36]	@ (8014f80 <_Bfree+0x3c>)
 8014f5c:	4809      	ldr	r0, [pc, #36]	@ (8014f84 <_Bfree+0x40>)
 8014f5e:	218f      	movs	r1, #143	@ 0x8f
 8014f60:	f7ff f8ac 	bl	80140bc <__assert_func>
 8014f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014f68:	6006      	str	r6, [r0, #0]
 8014f6a:	60c6      	str	r6, [r0, #12]
 8014f6c:	b13c      	cbz	r4, 8014f7e <_Bfree+0x3a>
 8014f6e:	69eb      	ldr	r3, [r5, #28]
 8014f70:	6862      	ldr	r2, [r4, #4]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014f78:	6021      	str	r1, [r4, #0]
 8014f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}
 8014f80:	0801ac06 	.word	0x0801ac06
 8014f84:	0801ad60 	.word	0x0801ad60

08014f88 <__multadd>:
 8014f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f8c:	690d      	ldr	r5, [r1, #16]
 8014f8e:	4607      	mov	r7, r0
 8014f90:	460c      	mov	r4, r1
 8014f92:	461e      	mov	r6, r3
 8014f94:	f101 0c14 	add.w	ip, r1, #20
 8014f98:	2000      	movs	r0, #0
 8014f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8014f9e:	b299      	uxth	r1, r3
 8014fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8014fa4:	0c1e      	lsrs	r6, r3, #16
 8014fa6:	0c0b      	lsrs	r3, r1, #16
 8014fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8014fac:	b289      	uxth	r1, r1
 8014fae:	3001      	adds	r0, #1
 8014fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014fb4:	4285      	cmp	r5, r0
 8014fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8014fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014fbe:	dcec      	bgt.n	8014f9a <__multadd+0x12>
 8014fc0:	b30e      	cbz	r6, 8015006 <__multadd+0x7e>
 8014fc2:	68a3      	ldr	r3, [r4, #8]
 8014fc4:	42ab      	cmp	r3, r5
 8014fc6:	dc19      	bgt.n	8014ffc <__multadd+0x74>
 8014fc8:	6861      	ldr	r1, [r4, #4]
 8014fca:	4638      	mov	r0, r7
 8014fcc:	3101      	adds	r1, #1
 8014fce:	f7ff ff79 	bl	8014ec4 <_Balloc>
 8014fd2:	4680      	mov	r8, r0
 8014fd4:	b928      	cbnz	r0, 8014fe2 <__multadd+0x5a>
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	4b0c      	ldr	r3, [pc, #48]	@ (801500c <__multadd+0x84>)
 8014fda:	480d      	ldr	r0, [pc, #52]	@ (8015010 <__multadd+0x88>)
 8014fdc:	21ba      	movs	r1, #186	@ 0xba
 8014fde:	f7ff f86d 	bl	80140bc <__assert_func>
 8014fe2:	6922      	ldr	r2, [r4, #16]
 8014fe4:	3202      	adds	r2, #2
 8014fe6:	f104 010c 	add.w	r1, r4, #12
 8014fea:	0092      	lsls	r2, r2, #2
 8014fec:	300c      	adds	r0, #12
 8014fee:	f7ff f850 	bl	8014092 <memcpy>
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	4638      	mov	r0, r7
 8014ff6:	f7ff ffa5 	bl	8014f44 <_Bfree>
 8014ffa:	4644      	mov	r4, r8
 8014ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015000:	3501      	adds	r5, #1
 8015002:	615e      	str	r6, [r3, #20]
 8015004:	6125      	str	r5, [r4, #16]
 8015006:	4620      	mov	r0, r4
 8015008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801500c:	0801ad4f 	.word	0x0801ad4f
 8015010:	0801ad60 	.word	0x0801ad60

08015014 <__s2b>:
 8015014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015018:	460c      	mov	r4, r1
 801501a:	4615      	mov	r5, r2
 801501c:	461f      	mov	r7, r3
 801501e:	2209      	movs	r2, #9
 8015020:	3308      	adds	r3, #8
 8015022:	4606      	mov	r6, r0
 8015024:	fb93 f3f2 	sdiv	r3, r3, r2
 8015028:	2100      	movs	r1, #0
 801502a:	2201      	movs	r2, #1
 801502c:	429a      	cmp	r2, r3
 801502e:	db09      	blt.n	8015044 <__s2b+0x30>
 8015030:	4630      	mov	r0, r6
 8015032:	f7ff ff47 	bl	8014ec4 <_Balloc>
 8015036:	b940      	cbnz	r0, 801504a <__s2b+0x36>
 8015038:	4602      	mov	r2, r0
 801503a:	4b19      	ldr	r3, [pc, #100]	@ (80150a0 <__s2b+0x8c>)
 801503c:	4819      	ldr	r0, [pc, #100]	@ (80150a4 <__s2b+0x90>)
 801503e:	21d3      	movs	r1, #211	@ 0xd3
 8015040:	f7ff f83c 	bl	80140bc <__assert_func>
 8015044:	0052      	lsls	r2, r2, #1
 8015046:	3101      	adds	r1, #1
 8015048:	e7f0      	b.n	801502c <__s2b+0x18>
 801504a:	9b08      	ldr	r3, [sp, #32]
 801504c:	6143      	str	r3, [r0, #20]
 801504e:	2d09      	cmp	r5, #9
 8015050:	f04f 0301 	mov.w	r3, #1
 8015054:	6103      	str	r3, [r0, #16]
 8015056:	dd16      	ble.n	8015086 <__s2b+0x72>
 8015058:	f104 0909 	add.w	r9, r4, #9
 801505c:	46c8      	mov	r8, r9
 801505e:	442c      	add	r4, r5
 8015060:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015064:	4601      	mov	r1, r0
 8015066:	3b30      	subs	r3, #48	@ 0x30
 8015068:	220a      	movs	r2, #10
 801506a:	4630      	mov	r0, r6
 801506c:	f7ff ff8c 	bl	8014f88 <__multadd>
 8015070:	45a0      	cmp	r8, r4
 8015072:	d1f5      	bne.n	8015060 <__s2b+0x4c>
 8015074:	f1a5 0408 	sub.w	r4, r5, #8
 8015078:	444c      	add	r4, r9
 801507a:	1b2d      	subs	r5, r5, r4
 801507c:	1963      	adds	r3, r4, r5
 801507e:	42bb      	cmp	r3, r7
 8015080:	db04      	blt.n	801508c <__s2b+0x78>
 8015082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015086:	340a      	adds	r4, #10
 8015088:	2509      	movs	r5, #9
 801508a:	e7f6      	b.n	801507a <__s2b+0x66>
 801508c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015090:	4601      	mov	r1, r0
 8015092:	3b30      	subs	r3, #48	@ 0x30
 8015094:	220a      	movs	r2, #10
 8015096:	4630      	mov	r0, r6
 8015098:	f7ff ff76 	bl	8014f88 <__multadd>
 801509c:	e7ee      	b.n	801507c <__s2b+0x68>
 801509e:	bf00      	nop
 80150a0:	0801ad4f 	.word	0x0801ad4f
 80150a4:	0801ad60 	.word	0x0801ad60

080150a8 <__hi0bits>:
 80150a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80150ac:	4603      	mov	r3, r0
 80150ae:	bf36      	itet	cc
 80150b0:	0403      	lslcc	r3, r0, #16
 80150b2:	2000      	movcs	r0, #0
 80150b4:	2010      	movcc	r0, #16
 80150b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80150ba:	bf3c      	itt	cc
 80150bc:	021b      	lslcc	r3, r3, #8
 80150be:	3008      	addcc	r0, #8
 80150c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80150c4:	bf3c      	itt	cc
 80150c6:	011b      	lslcc	r3, r3, #4
 80150c8:	3004      	addcc	r0, #4
 80150ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80150ce:	bf3c      	itt	cc
 80150d0:	009b      	lslcc	r3, r3, #2
 80150d2:	3002      	addcc	r0, #2
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	db05      	blt.n	80150e4 <__hi0bits+0x3c>
 80150d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80150dc:	f100 0001 	add.w	r0, r0, #1
 80150e0:	bf08      	it	eq
 80150e2:	2020      	moveq	r0, #32
 80150e4:	4770      	bx	lr

080150e6 <__lo0bits>:
 80150e6:	6803      	ldr	r3, [r0, #0]
 80150e8:	4602      	mov	r2, r0
 80150ea:	f013 0007 	ands.w	r0, r3, #7
 80150ee:	d00b      	beq.n	8015108 <__lo0bits+0x22>
 80150f0:	07d9      	lsls	r1, r3, #31
 80150f2:	d421      	bmi.n	8015138 <__lo0bits+0x52>
 80150f4:	0798      	lsls	r0, r3, #30
 80150f6:	bf49      	itett	mi
 80150f8:	085b      	lsrmi	r3, r3, #1
 80150fa:	089b      	lsrpl	r3, r3, #2
 80150fc:	2001      	movmi	r0, #1
 80150fe:	6013      	strmi	r3, [r2, #0]
 8015100:	bf5c      	itt	pl
 8015102:	6013      	strpl	r3, [r2, #0]
 8015104:	2002      	movpl	r0, #2
 8015106:	4770      	bx	lr
 8015108:	b299      	uxth	r1, r3
 801510a:	b909      	cbnz	r1, 8015110 <__lo0bits+0x2a>
 801510c:	0c1b      	lsrs	r3, r3, #16
 801510e:	2010      	movs	r0, #16
 8015110:	b2d9      	uxtb	r1, r3
 8015112:	b909      	cbnz	r1, 8015118 <__lo0bits+0x32>
 8015114:	3008      	adds	r0, #8
 8015116:	0a1b      	lsrs	r3, r3, #8
 8015118:	0719      	lsls	r1, r3, #28
 801511a:	bf04      	itt	eq
 801511c:	091b      	lsreq	r3, r3, #4
 801511e:	3004      	addeq	r0, #4
 8015120:	0799      	lsls	r1, r3, #30
 8015122:	bf04      	itt	eq
 8015124:	089b      	lsreq	r3, r3, #2
 8015126:	3002      	addeq	r0, #2
 8015128:	07d9      	lsls	r1, r3, #31
 801512a:	d403      	bmi.n	8015134 <__lo0bits+0x4e>
 801512c:	085b      	lsrs	r3, r3, #1
 801512e:	f100 0001 	add.w	r0, r0, #1
 8015132:	d003      	beq.n	801513c <__lo0bits+0x56>
 8015134:	6013      	str	r3, [r2, #0]
 8015136:	4770      	bx	lr
 8015138:	2000      	movs	r0, #0
 801513a:	4770      	bx	lr
 801513c:	2020      	movs	r0, #32
 801513e:	4770      	bx	lr

08015140 <__i2b>:
 8015140:	b510      	push	{r4, lr}
 8015142:	460c      	mov	r4, r1
 8015144:	2101      	movs	r1, #1
 8015146:	f7ff febd 	bl	8014ec4 <_Balloc>
 801514a:	4602      	mov	r2, r0
 801514c:	b928      	cbnz	r0, 801515a <__i2b+0x1a>
 801514e:	4b05      	ldr	r3, [pc, #20]	@ (8015164 <__i2b+0x24>)
 8015150:	4805      	ldr	r0, [pc, #20]	@ (8015168 <__i2b+0x28>)
 8015152:	f240 1145 	movw	r1, #325	@ 0x145
 8015156:	f7fe ffb1 	bl	80140bc <__assert_func>
 801515a:	2301      	movs	r3, #1
 801515c:	6144      	str	r4, [r0, #20]
 801515e:	6103      	str	r3, [r0, #16]
 8015160:	bd10      	pop	{r4, pc}
 8015162:	bf00      	nop
 8015164:	0801ad4f 	.word	0x0801ad4f
 8015168:	0801ad60 	.word	0x0801ad60

0801516c <__multiply>:
 801516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015170:	4617      	mov	r7, r2
 8015172:	690a      	ldr	r2, [r1, #16]
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	429a      	cmp	r2, r3
 8015178:	bfa8      	it	ge
 801517a:	463b      	movge	r3, r7
 801517c:	4689      	mov	r9, r1
 801517e:	bfa4      	itt	ge
 8015180:	460f      	movge	r7, r1
 8015182:	4699      	movge	r9, r3
 8015184:	693d      	ldr	r5, [r7, #16]
 8015186:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801518a:	68bb      	ldr	r3, [r7, #8]
 801518c:	6879      	ldr	r1, [r7, #4]
 801518e:	eb05 060a 	add.w	r6, r5, sl
 8015192:	42b3      	cmp	r3, r6
 8015194:	b085      	sub	sp, #20
 8015196:	bfb8      	it	lt
 8015198:	3101      	addlt	r1, #1
 801519a:	f7ff fe93 	bl	8014ec4 <_Balloc>
 801519e:	b930      	cbnz	r0, 80151ae <__multiply+0x42>
 80151a0:	4602      	mov	r2, r0
 80151a2:	4b41      	ldr	r3, [pc, #260]	@ (80152a8 <__multiply+0x13c>)
 80151a4:	4841      	ldr	r0, [pc, #260]	@ (80152ac <__multiply+0x140>)
 80151a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80151aa:	f7fe ff87 	bl	80140bc <__assert_func>
 80151ae:	f100 0414 	add.w	r4, r0, #20
 80151b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80151b6:	4623      	mov	r3, r4
 80151b8:	2200      	movs	r2, #0
 80151ba:	4573      	cmp	r3, lr
 80151bc:	d320      	bcc.n	8015200 <__multiply+0x94>
 80151be:	f107 0814 	add.w	r8, r7, #20
 80151c2:	f109 0114 	add.w	r1, r9, #20
 80151c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80151ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80151ce:	9302      	str	r3, [sp, #8]
 80151d0:	1beb      	subs	r3, r5, r7
 80151d2:	3b15      	subs	r3, #21
 80151d4:	f023 0303 	bic.w	r3, r3, #3
 80151d8:	3304      	adds	r3, #4
 80151da:	3715      	adds	r7, #21
 80151dc:	42bd      	cmp	r5, r7
 80151de:	bf38      	it	cc
 80151e0:	2304      	movcc	r3, #4
 80151e2:	9301      	str	r3, [sp, #4]
 80151e4:	9b02      	ldr	r3, [sp, #8]
 80151e6:	9103      	str	r1, [sp, #12]
 80151e8:	428b      	cmp	r3, r1
 80151ea:	d80c      	bhi.n	8015206 <__multiply+0x9a>
 80151ec:	2e00      	cmp	r6, #0
 80151ee:	dd03      	ble.n	80151f8 <__multiply+0x8c>
 80151f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d055      	beq.n	80152a4 <__multiply+0x138>
 80151f8:	6106      	str	r6, [r0, #16]
 80151fa:	b005      	add	sp, #20
 80151fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015200:	f843 2b04 	str.w	r2, [r3], #4
 8015204:	e7d9      	b.n	80151ba <__multiply+0x4e>
 8015206:	f8b1 a000 	ldrh.w	sl, [r1]
 801520a:	f1ba 0f00 	cmp.w	sl, #0
 801520e:	d01f      	beq.n	8015250 <__multiply+0xe4>
 8015210:	46c4      	mov	ip, r8
 8015212:	46a1      	mov	r9, r4
 8015214:	2700      	movs	r7, #0
 8015216:	f85c 2b04 	ldr.w	r2, [ip], #4
 801521a:	f8d9 3000 	ldr.w	r3, [r9]
 801521e:	fa1f fb82 	uxth.w	fp, r2
 8015222:	b29b      	uxth	r3, r3
 8015224:	fb0a 330b 	mla	r3, sl, fp, r3
 8015228:	443b      	add	r3, r7
 801522a:	f8d9 7000 	ldr.w	r7, [r9]
 801522e:	0c12      	lsrs	r2, r2, #16
 8015230:	0c3f      	lsrs	r7, r7, #16
 8015232:	fb0a 7202 	mla	r2, sl, r2, r7
 8015236:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801523a:	b29b      	uxth	r3, r3
 801523c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015240:	4565      	cmp	r5, ip
 8015242:	f849 3b04 	str.w	r3, [r9], #4
 8015246:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801524a:	d8e4      	bhi.n	8015216 <__multiply+0xaa>
 801524c:	9b01      	ldr	r3, [sp, #4]
 801524e:	50e7      	str	r7, [r4, r3]
 8015250:	9b03      	ldr	r3, [sp, #12]
 8015252:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015256:	3104      	adds	r1, #4
 8015258:	f1b9 0f00 	cmp.w	r9, #0
 801525c:	d020      	beq.n	80152a0 <__multiply+0x134>
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	4647      	mov	r7, r8
 8015262:	46a4      	mov	ip, r4
 8015264:	f04f 0a00 	mov.w	sl, #0
 8015268:	f8b7 b000 	ldrh.w	fp, [r7]
 801526c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015270:	fb09 220b 	mla	r2, r9, fp, r2
 8015274:	4452      	add	r2, sl
 8015276:	b29b      	uxth	r3, r3
 8015278:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801527c:	f84c 3b04 	str.w	r3, [ip], #4
 8015280:	f857 3b04 	ldr.w	r3, [r7], #4
 8015284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015288:	f8bc 3000 	ldrh.w	r3, [ip]
 801528c:	fb09 330a 	mla	r3, r9, sl, r3
 8015290:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015294:	42bd      	cmp	r5, r7
 8015296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801529a:	d8e5      	bhi.n	8015268 <__multiply+0xfc>
 801529c:	9a01      	ldr	r2, [sp, #4]
 801529e:	50a3      	str	r3, [r4, r2]
 80152a0:	3404      	adds	r4, #4
 80152a2:	e79f      	b.n	80151e4 <__multiply+0x78>
 80152a4:	3e01      	subs	r6, #1
 80152a6:	e7a1      	b.n	80151ec <__multiply+0x80>
 80152a8:	0801ad4f 	.word	0x0801ad4f
 80152ac:	0801ad60 	.word	0x0801ad60

080152b0 <__pow5mult>:
 80152b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152b4:	4615      	mov	r5, r2
 80152b6:	f012 0203 	ands.w	r2, r2, #3
 80152ba:	4607      	mov	r7, r0
 80152bc:	460e      	mov	r6, r1
 80152be:	d007      	beq.n	80152d0 <__pow5mult+0x20>
 80152c0:	4c25      	ldr	r4, [pc, #148]	@ (8015358 <__pow5mult+0xa8>)
 80152c2:	3a01      	subs	r2, #1
 80152c4:	2300      	movs	r3, #0
 80152c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152ca:	f7ff fe5d 	bl	8014f88 <__multadd>
 80152ce:	4606      	mov	r6, r0
 80152d0:	10ad      	asrs	r5, r5, #2
 80152d2:	d03d      	beq.n	8015350 <__pow5mult+0xa0>
 80152d4:	69fc      	ldr	r4, [r7, #28]
 80152d6:	b97c      	cbnz	r4, 80152f8 <__pow5mult+0x48>
 80152d8:	2010      	movs	r0, #16
 80152da:	f7ff fd3d 	bl	8014d58 <malloc>
 80152de:	4602      	mov	r2, r0
 80152e0:	61f8      	str	r0, [r7, #28]
 80152e2:	b928      	cbnz	r0, 80152f0 <__pow5mult+0x40>
 80152e4:	4b1d      	ldr	r3, [pc, #116]	@ (801535c <__pow5mult+0xac>)
 80152e6:	481e      	ldr	r0, [pc, #120]	@ (8015360 <__pow5mult+0xb0>)
 80152e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80152ec:	f7fe fee6 	bl	80140bc <__assert_func>
 80152f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80152f4:	6004      	str	r4, [r0, #0]
 80152f6:	60c4      	str	r4, [r0, #12]
 80152f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80152fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015300:	b94c      	cbnz	r4, 8015316 <__pow5mult+0x66>
 8015302:	f240 2171 	movw	r1, #625	@ 0x271
 8015306:	4638      	mov	r0, r7
 8015308:	f7ff ff1a 	bl	8015140 <__i2b>
 801530c:	2300      	movs	r3, #0
 801530e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015312:	4604      	mov	r4, r0
 8015314:	6003      	str	r3, [r0, #0]
 8015316:	f04f 0900 	mov.w	r9, #0
 801531a:	07eb      	lsls	r3, r5, #31
 801531c:	d50a      	bpl.n	8015334 <__pow5mult+0x84>
 801531e:	4631      	mov	r1, r6
 8015320:	4622      	mov	r2, r4
 8015322:	4638      	mov	r0, r7
 8015324:	f7ff ff22 	bl	801516c <__multiply>
 8015328:	4631      	mov	r1, r6
 801532a:	4680      	mov	r8, r0
 801532c:	4638      	mov	r0, r7
 801532e:	f7ff fe09 	bl	8014f44 <_Bfree>
 8015332:	4646      	mov	r6, r8
 8015334:	106d      	asrs	r5, r5, #1
 8015336:	d00b      	beq.n	8015350 <__pow5mult+0xa0>
 8015338:	6820      	ldr	r0, [r4, #0]
 801533a:	b938      	cbnz	r0, 801534c <__pow5mult+0x9c>
 801533c:	4622      	mov	r2, r4
 801533e:	4621      	mov	r1, r4
 8015340:	4638      	mov	r0, r7
 8015342:	f7ff ff13 	bl	801516c <__multiply>
 8015346:	6020      	str	r0, [r4, #0]
 8015348:	f8c0 9000 	str.w	r9, [r0]
 801534c:	4604      	mov	r4, r0
 801534e:	e7e4      	b.n	801531a <__pow5mult+0x6a>
 8015350:	4630      	mov	r0, r6
 8015352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015356:	bf00      	nop
 8015358:	0801af38 	.word	0x0801af38
 801535c:	0801ac06 	.word	0x0801ac06
 8015360:	0801ad60 	.word	0x0801ad60

08015364 <__lshift>:
 8015364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015368:	460c      	mov	r4, r1
 801536a:	6849      	ldr	r1, [r1, #4]
 801536c:	6923      	ldr	r3, [r4, #16]
 801536e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015372:	68a3      	ldr	r3, [r4, #8]
 8015374:	4607      	mov	r7, r0
 8015376:	4691      	mov	r9, r2
 8015378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801537c:	f108 0601 	add.w	r6, r8, #1
 8015380:	42b3      	cmp	r3, r6
 8015382:	db0b      	blt.n	801539c <__lshift+0x38>
 8015384:	4638      	mov	r0, r7
 8015386:	f7ff fd9d 	bl	8014ec4 <_Balloc>
 801538a:	4605      	mov	r5, r0
 801538c:	b948      	cbnz	r0, 80153a2 <__lshift+0x3e>
 801538e:	4602      	mov	r2, r0
 8015390:	4b28      	ldr	r3, [pc, #160]	@ (8015434 <__lshift+0xd0>)
 8015392:	4829      	ldr	r0, [pc, #164]	@ (8015438 <__lshift+0xd4>)
 8015394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015398:	f7fe fe90 	bl	80140bc <__assert_func>
 801539c:	3101      	adds	r1, #1
 801539e:	005b      	lsls	r3, r3, #1
 80153a0:	e7ee      	b.n	8015380 <__lshift+0x1c>
 80153a2:	2300      	movs	r3, #0
 80153a4:	f100 0114 	add.w	r1, r0, #20
 80153a8:	f100 0210 	add.w	r2, r0, #16
 80153ac:	4618      	mov	r0, r3
 80153ae:	4553      	cmp	r3, sl
 80153b0:	db33      	blt.n	801541a <__lshift+0xb6>
 80153b2:	6920      	ldr	r0, [r4, #16]
 80153b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153b8:	f104 0314 	add.w	r3, r4, #20
 80153bc:	f019 091f 	ands.w	r9, r9, #31
 80153c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80153c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80153c8:	d02b      	beq.n	8015422 <__lshift+0xbe>
 80153ca:	f1c9 0e20 	rsb	lr, r9, #32
 80153ce:	468a      	mov	sl, r1
 80153d0:	2200      	movs	r2, #0
 80153d2:	6818      	ldr	r0, [r3, #0]
 80153d4:	fa00 f009 	lsl.w	r0, r0, r9
 80153d8:	4310      	orrs	r0, r2
 80153da:	f84a 0b04 	str.w	r0, [sl], #4
 80153de:	f853 2b04 	ldr.w	r2, [r3], #4
 80153e2:	459c      	cmp	ip, r3
 80153e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80153e8:	d8f3      	bhi.n	80153d2 <__lshift+0x6e>
 80153ea:	ebac 0304 	sub.w	r3, ip, r4
 80153ee:	3b15      	subs	r3, #21
 80153f0:	f023 0303 	bic.w	r3, r3, #3
 80153f4:	3304      	adds	r3, #4
 80153f6:	f104 0015 	add.w	r0, r4, #21
 80153fa:	4560      	cmp	r0, ip
 80153fc:	bf88      	it	hi
 80153fe:	2304      	movhi	r3, #4
 8015400:	50ca      	str	r2, [r1, r3]
 8015402:	b10a      	cbz	r2, 8015408 <__lshift+0xa4>
 8015404:	f108 0602 	add.w	r6, r8, #2
 8015408:	3e01      	subs	r6, #1
 801540a:	4638      	mov	r0, r7
 801540c:	612e      	str	r6, [r5, #16]
 801540e:	4621      	mov	r1, r4
 8015410:	f7ff fd98 	bl	8014f44 <_Bfree>
 8015414:	4628      	mov	r0, r5
 8015416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801541a:	f842 0f04 	str.w	r0, [r2, #4]!
 801541e:	3301      	adds	r3, #1
 8015420:	e7c5      	b.n	80153ae <__lshift+0x4a>
 8015422:	3904      	subs	r1, #4
 8015424:	f853 2b04 	ldr.w	r2, [r3], #4
 8015428:	f841 2f04 	str.w	r2, [r1, #4]!
 801542c:	459c      	cmp	ip, r3
 801542e:	d8f9      	bhi.n	8015424 <__lshift+0xc0>
 8015430:	e7ea      	b.n	8015408 <__lshift+0xa4>
 8015432:	bf00      	nop
 8015434:	0801ad4f 	.word	0x0801ad4f
 8015438:	0801ad60 	.word	0x0801ad60

0801543c <__mcmp>:
 801543c:	690a      	ldr	r2, [r1, #16]
 801543e:	4603      	mov	r3, r0
 8015440:	6900      	ldr	r0, [r0, #16]
 8015442:	1a80      	subs	r0, r0, r2
 8015444:	b530      	push	{r4, r5, lr}
 8015446:	d10e      	bne.n	8015466 <__mcmp+0x2a>
 8015448:	3314      	adds	r3, #20
 801544a:	3114      	adds	r1, #20
 801544c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801545c:	4295      	cmp	r5, r2
 801545e:	d003      	beq.n	8015468 <__mcmp+0x2c>
 8015460:	d205      	bcs.n	801546e <__mcmp+0x32>
 8015462:	f04f 30ff 	mov.w	r0, #4294967295
 8015466:	bd30      	pop	{r4, r5, pc}
 8015468:	42a3      	cmp	r3, r4
 801546a:	d3f3      	bcc.n	8015454 <__mcmp+0x18>
 801546c:	e7fb      	b.n	8015466 <__mcmp+0x2a>
 801546e:	2001      	movs	r0, #1
 8015470:	e7f9      	b.n	8015466 <__mcmp+0x2a>
	...

08015474 <__mdiff>:
 8015474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015478:	4689      	mov	r9, r1
 801547a:	4606      	mov	r6, r0
 801547c:	4611      	mov	r1, r2
 801547e:	4648      	mov	r0, r9
 8015480:	4614      	mov	r4, r2
 8015482:	f7ff ffdb 	bl	801543c <__mcmp>
 8015486:	1e05      	subs	r5, r0, #0
 8015488:	d112      	bne.n	80154b0 <__mdiff+0x3c>
 801548a:	4629      	mov	r1, r5
 801548c:	4630      	mov	r0, r6
 801548e:	f7ff fd19 	bl	8014ec4 <_Balloc>
 8015492:	4602      	mov	r2, r0
 8015494:	b928      	cbnz	r0, 80154a2 <__mdiff+0x2e>
 8015496:	4b3f      	ldr	r3, [pc, #252]	@ (8015594 <__mdiff+0x120>)
 8015498:	f240 2137 	movw	r1, #567	@ 0x237
 801549c:	483e      	ldr	r0, [pc, #248]	@ (8015598 <__mdiff+0x124>)
 801549e:	f7fe fe0d 	bl	80140bc <__assert_func>
 80154a2:	2301      	movs	r3, #1
 80154a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80154a8:	4610      	mov	r0, r2
 80154aa:	b003      	add	sp, #12
 80154ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b0:	bfbc      	itt	lt
 80154b2:	464b      	movlt	r3, r9
 80154b4:	46a1      	movlt	r9, r4
 80154b6:	4630      	mov	r0, r6
 80154b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80154bc:	bfba      	itte	lt
 80154be:	461c      	movlt	r4, r3
 80154c0:	2501      	movlt	r5, #1
 80154c2:	2500      	movge	r5, #0
 80154c4:	f7ff fcfe 	bl	8014ec4 <_Balloc>
 80154c8:	4602      	mov	r2, r0
 80154ca:	b918      	cbnz	r0, 80154d4 <__mdiff+0x60>
 80154cc:	4b31      	ldr	r3, [pc, #196]	@ (8015594 <__mdiff+0x120>)
 80154ce:	f240 2145 	movw	r1, #581	@ 0x245
 80154d2:	e7e3      	b.n	801549c <__mdiff+0x28>
 80154d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80154d8:	6926      	ldr	r6, [r4, #16]
 80154da:	60c5      	str	r5, [r0, #12]
 80154dc:	f109 0310 	add.w	r3, r9, #16
 80154e0:	f109 0514 	add.w	r5, r9, #20
 80154e4:	f104 0e14 	add.w	lr, r4, #20
 80154e8:	f100 0b14 	add.w	fp, r0, #20
 80154ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80154f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80154f4:	9301      	str	r3, [sp, #4]
 80154f6:	46d9      	mov	r9, fp
 80154f8:	f04f 0c00 	mov.w	ip, #0
 80154fc:	9b01      	ldr	r3, [sp, #4]
 80154fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015502:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015506:	9301      	str	r3, [sp, #4]
 8015508:	fa1f f38a 	uxth.w	r3, sl
 801550c:	4619      	mov	r1, r3
 801550e:	b283      	uxth	r3, r0
 8015510:	1acb      	subs	r3, r1, r3
 8015512:	0c00      	lsrs	r0, r0, #16
 8015514:	4463      	add	r3, ip
 8015516:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801551a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801551e:	b29b      	uxth	r3, r3
 8015520:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015524:	4576      	cmp	r6, lr
 8015526:	f849 3b04 	str.w	r3, [r9], #4
 801552a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801552e:	d8e5      	bhi.n	80154fc <__mdiff+0x88>
 8015530:	1b33      	subs	r3, r6, r4
 8015532:	3b15      	subs	r3, #21
 8015534:	f023 0303 	bic.w	r3, r3, #3
 8015538:	3415      	adds	r4, #21
 801553a:	3304      	adds	r3, #4
 801553c:	42a6      	cmp	r6, r4
 801553e:	bf38      	it	cc
 8015540:	2304      	movcc	r3, #4
 8015542:	441d      	add	r5, r3
 8015544:	445b      	add	r3, fp
 8015546:	461e      	mov	r6, r3
 8015548:	462c      	mov	r4, r5
 801554a:	4544      	cmp	r4, r8
 801554c:	d30e      	bcc.n	801556c <__mdiff+0xf8>
 801554e:	f108 0103 	add.w	r1, r8, #3
 8015552:	1b49      	subs	r1, r1, r5
 8015554:	f021 0103 	bic.w	r1, r1, #3
 8015558:	3d03      	subs	r5, #3
 801555a:	45a8      	cmp	r8, r5
 801555c:	bf38      	it	cc
 801555e:	2100      	movcc	r1, #0
 8015560:	440b      	add	r3, r1
 8015562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015566:	b191      	cbz	r1, 801558e <__mdiff+0x11a>
 8015568:	6117      	str	r7, [r2, #16]
 801556a:	e79d      	b.n	80154a8 <__mdiff+0x34>
 801556c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015570:	46e6      	mov	lr, ip
 8015572:	0c08      	lsrs	r0, r1, #16
 8015574:	fa1c fc81 	uxtah	ip, ip, r1
 8015578:	4471      	add	r1, lr
 801557a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801557e:	b289      	uxth	r1, r1
 8015580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015584:	f846 1b04 	str.w	r1, [r6], #4
 8015588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801558c:	e7dd      	b.n	801554a <__mdiff+0xd6>
 801558e:	3f01      	subs	r7, #1
 8015590:	e7e7      	b.n	8015562 <__mdiff+0xee>
 8015592:	bf00      	nop
 8015594:	0801ad4f 	.word	0x0801ad4f
 8015598:	0801ad60 	.word	0x0801ad60

0801559c <__ulp>:
 801559c:	b082      	sub	sp, #8
 801559e:	ed8d 0b00 	vstr	d0, [sp]
 80155a2:	9a01      	ldr	r2, [sp, #4]
 80155a4:	4b0f      	ldr	r3, [pc, #60]	@ (80155e4 <__ulp+0x48>)
 80155a6:	4013      	ands	r3, r2
 80155a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	dc08      	bgt.n	80155c2 <__ulp+0x26>
 80155b0:	425b      	negs	r3, r3
 80155b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80155b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80155ba:	da04      	bge.n	80155c6 <__ulp+0x2a>
 80155bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80155c0:	4113      	asrs	r3, r2
 80155c2:	2200      	movs	r2, #0
 80155c4:	e008      	b.n	80155d8 <__ulp+0x3c>
 80155c6:	f1a2 0314 	sub.w	r3, r2, #20
 80155ca:	2b1e      	cmp	r3, #30
 80155cc:	bfda      	itte	le
 80155ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80155d2:	40da      	lsrle	r2, r3
 80155d4:	2201      	movgt	r2, #1
 80155d6:	2300      	movs	r3, #0
 80155d8:	4619      	mov	r1, r3
 80155da:	4610      	mov	r0, r2
 80155dc:	ec41 0b10 	vmov	d0, r0, r1
 80155e0:	b002      	add	sp, #8
 80155e2:	4770      	bx	lr
 80155e4:	7ff00000 	.word	0x7ff00000

080155e8 <__b2d>:
 80155e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ec:	6906      	ldr	r6, [r0, #16]
 80155ee:	f100 0814 	add.w	r8, r0, #20
 80155f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80155f6:	1f37      	subs	r7, r6, #4
 80155f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80155fc:	4610      	mov	r0, r2
 80155fe:	f7ff fd53 	bl	80150a8 <__hi0bits>
 8015602:	f1c0 0320 	rsb	r3, r0, #32
 8015606:	280a      	cmp	r0, #10
 8015608:	600b      	str	r3, [r1, #0]
 801560a:	491b      	ldr	r1, [pc, #108]	@ (8015678 <__b2d+0x90>)
 801560c:	dc15      	bgt.n	801563a <__b2d+0x52>
 801560e:	f1c0 0c0b 	rsb	ip, r0, #11
 8015612:	fa22 f30c 	lsr.w	r3, r2, ip
 8015616:	45b8      	cmp	r8, r7
 8015618:	ea43 0501 	orr.w	r5, r3, r1
 801561c:	bf34      	ite	cc
 801561e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015622:	2300      	movcs	r3, #0
 8015624:	3015      	adds	r0, #21
 8015626:	fa02 f000 	lsl.w	r0, r2, r0
 801562a:	fa23 f30c 	lsr.w	r3, r3, ip
 801562e:	4303      	orrs	r3, r0
 8015630:	461c      	mov	r4, r3
 8015632:	ec45 4b10 	vmov	d0, r4, r5
 8015636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801563a:	45b8      	cmp	r8, r7
 801563c:	bf3a      	itte	cc
 801563e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015642:	f1a6 0708 	subcc.w	r7, r6, #8
 8015646:	2300      	movcs	r3, #0
 8015648:	380b      	subs	r0, #11
 801564a:	d012      	beq.n	8015672 <__b2d+0x8a>
 801564c:	f1c0 0120 	rsb	r1, r0, #32
 8015650:	fa23 f401 	lsr.w	r4, r3, r1
 8015654:	4082      	lsls	r2, r0
 8015656:	4322      	orrs	r2, r4
 8015658:	4547      	cmp	r7, r8
 801565a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801565e:	bf8c      	ite	hi
 8015660:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015664:	2200      	movls	r2, #0
 8015666:	4083      	lsls	r3, r0
 8015668:	40ca      	lsrs	r2, r1
 801566a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801566e:	4313      	orrs	r3, r2
 8015670:	e7de      	b.n	8015630 <__b2d+0x48>
 8015672:	ea42 0501 	orr.w	r5, r2, r1
 8015676:	e7db      	b.n	8015630 <__b2d+0x48>
 8015678:	3ff00000 	.word	0x3ff00000

0801567c <__d2b>:
 801567c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015680:	460f      	mov	r7, r1
 8015682:	2101      	movs	r1, #1
 8015684:	ec59 8b10 	vmov	r8, r9, d0
 8015688:	4616      	mov	r6, r2
 801568a:	f7ff fc1b 	bl	8014ec4 <_Balloc>
 801568e:	4604      	mov	r4, r0
 8015690:	b930      	cbnz	r0, 80156a0 <__d2b+0x24>
 8015692:	4602      	mov	r2, r0
 8015694:	4b23      	ldr	r3, [pc, #140]	@ (8015724 <__d2b+0xa8>)
 8015696:	4824      	ldr	r0, [pc, #144]	@ (8015728 <__d2b+0xac>)
 8015698:	f240 310f 	movw	r1, #783	@ 0x30f
 801569c:	f7fe fd0e 	bl	80140bc <__assert_func>
 80156a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80156a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80156a8:	b10d      	cbz	r5, 80156ae <__d2b+0x32>
 80156aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80156ae:	9301      	str	r3, [sp, #4]
 80156b0:	f1b8 0300 	subs.w	r3, r8, #0
 80156b4:	d023      	beq.n	80156fe <__d2b+0x82>
 80156b6:	4668      	mov	r0, sp
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	f7ff fd14 	bl	80150e6 <__lo0bits>
 80156be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80156c2:	b1d0      	cbz	r0, 80156fa <__d2b+0x7e>
 80156c4:	f1c0 0320 	rsb	r3, r0, #32
 80156c8:	fa02 f303 	lsl.w	r3, r2, r3
 80156cc:	430b      	orrs	r3, r1
 80156ce:	40c2      	lsrs	r2, r0
 80156d0:	6163      	str	r3, [r4, #20]
 80156d2:	9201      	str	r2, [sp, #4]
 80156d4:	9b01      	ldr	r3, [sp, #4]
 80156d6:	61a3      	str	r3, [r4, #24]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	bf0c      	ite	eq
 80156dc:	2201      	moveq	r2, #1
 80156de:	2202      	movne	r2, #2
 80156e0:	6122      	str	r2, [r4, #16]
 80156e2:	b1a5      	cbz	r5, 801570e <__d2b+0x92>
 80156e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80156e8:	4405      	add	r5, r0
 80156ea:	603d      	str	r5, [r7, #0]
 80156ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80156f0:	6030      	str	r0, [r6, #0]
 80156f2:	4620      	mov	r0, r4
 80156f4:	b003      	add	sp, #12
 80156f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156fa:	6161      	str	r1, [r4, #20]
 80156fc:	e7ea      	b.n	80156d4 <__d2b+0x58>
 80156fe:	a801      	add	r0, sp, #4
 8015700:	f7ff fcf1 	bl	80150e6 <__lo0bits>
 8015704:	9b01      	ldr	r3, [sp, #4]
 8015706:	6163      	str	r3, [r4, #20]
 8015708:	3020      	adds	r0, #32
 801570a:	2201      	movs	r2, #1
 801570c:	e7e8      	b.n	80156e0 <__d2b+0x64>
 801570e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015712:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015716:	6038      	str	r0, [r7, #0]
 8015718:	6918      	ldr	r0, [r3, #16]
 801571a:	f7ff fcc5 	bl	80150a8 <__hi0bits>
 801571e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015722:	e7e5      	b.n	80156f0 <__d2b+0x74>
 8015724:	0801ad4f 	.word	0x0801ad4f
 8015728:	0801ad60 	.word	0x0801ad60

0801572c <__ratio>:
 801572c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015730:	4688      	mov	r8, r1
 8015732:	4669      	mov	r1, sp
 8015734:	4681      	mov	r9, r0
 8015736:	f7ff ff57 	bl	80155e8 <__b2d>
 801573a:	a901      	add	r1, sp, #4
 801573c:	4640      	mov	r0, r8
 801573e:	ec55 4b10 	vmov	r4, r5, d0
 8015742:	f7ff ff51 	bl	80155e8 <__b2d>
 8015746:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801574a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801574e:	1ad2      	subs	r2, r2, r3
 8015750:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015754:	1a5b      	subs	r3, r3, r1
 8015756:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801575a:	ec57 6b10 	vmov	r6, r7, d0
 801575e:	2b00      	cmp	r3, #0
 8015760:	bfd6      	itet	le
 8015762:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015766:	462a      	movgt	r2, r5
 8015768:	463a      	movle	r2, r7
 801576a:	46ab      	mov	fp, r5
 801576c:	46a2      	mov	sl, r4
 801576e:	bfce      	itee	gt
 8015770:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015774:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015778:	ee00 3a90 	vmovle	s1, r3
 801577c:	ec4b ab17 	vmov	d7, sl, fp
 8015780:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015784:	b003      	add	sp, #12
 8015786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801578a <__copybits>:
 801578a:	3901      	subs	r1, #1
 801578c:	b570      	push	{r4, r5, r6, lr}
 801578e:	1149      	asrs	r1, r1, #5
 8015790:	6914      	ldr	r4, [r2, #16]
 8015792:	3101      	adds	r1, #1
 8015794:	f102 0314 	add.w	r3, r2, #20
 8015798:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801579c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80157a0:	1f05      	subs	r5, r0, #4
 80157a2:	42a3      	cmp	r3, r4
 80157a4:	d30c      	bcc.n	80157c0 <__copybits+0x36>
 80157a6:	1aa3      	subs	r3, r4, r2
 80157a8:	3b11      	subs	r3, #17
 80157aa:	f023 0303 	bic.w	r3, r3, #3
 80157ae:	3211      	adds	r2, #17
 80157b0:	42a2      	cmp	r2, r4
 80157b2:	bf88      	it	hi
 80157b4:	2300      	movhi	r3, #0
 80157b6:	4418      	add	r0, r3
 80157b8:	2300      	movs	r3, #0
 80157ba:	4288      	cmp	r0, r1
 80157bc:	d305      	bcc.n	80157ca <__copybits+0x40>
 80157be:	bd70      	pop	{r4, r5, r6, pc}
 80157c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80157c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80157c8:	e7eb      	b.n	80157a2 <__copybits+0x18>
 80157ca:	f840 3b04 	str.w	r3, [r0], #4
 80157ce:	e7f4      	b.n	80157ba <__copybits+0x30>

080157d0 <__any_on>:
 80157d0:	f100 0214 	add.w	r2, r0, #20
 80157d4:	6900      	ldr	r0, [r0, #16]
 80157d6:	114b      	asrs	r3, r1, #5
 80157d8:	4298      	cmp	r0, r3
 80157da:	b510      	push	{r4, lr}
 80157dc:	db11      	blt.n	8015802 <__any_on+0x32>
 80157de:	dd0a      	ble.n	80157f6 <__any_on+0x26>
 80157e0:	f011 011f 	ands.w	r1, r1, #31
 80157e4:	d007      	beq.n	80157f6 <__any_on+0x26>
 80157e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80157ea:	fa24 f001 	lsr.w	r0, r4, r1
 80157ee:	fa00 f101 	lsl.w	r1, r0, r1
 80157f2:	428c      	cmp	r4, r1
 80157f4:	d10b      	bne.n	801580e <__any_on+0x3e>
 80157f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80157fa:	4293      	cmp	r3, r2
 80157fc:	d803      	bhi.n	8015806 <__any_on+0x36>
 80157fe:	2000      	movs	r0, #0
 8015800:	bd10      	pop	{r4, pc}
 8015802:	4603      	mov	r3, r0
 8015804:	e7f7      	b.n	80157f6 <__any_on+0x26>
 8015806:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801580a:	2900      	cmp	r1, #0
 801580c:	d0f5      	beq.n	80157fa <__any_on+0x2a>
 801580e:	2001      	movs	r0, #1
 8015810:	e7f6      	b.n	8015800 <__any_on+0x30>

08015812 <sulp>:
 8015812:	b570      	push	{r4, r5, r6, lr}
 8015814:	4604      	mov	r4, r0
 8015816:	460d      	mov	r5, r1
 8015818:	4616      	mov	r6, r2
 801581a:	ec45 4b10 	vmov	d0, r4, r5
 801581e:	f7ff febd 	bl	801559c <__ulp>
 8015822:	b17e      	cbz	r6, 8015844 <sulp+0x32>
 8015824:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801582c:	2b00      	cmp	r3, #0
 801582e:	dd09      	ble.n	8015844 <sulp+0x32>
 8015830:	051b      	lsls	r3, r3, #20
 8015832:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015836:	2000      	movs	r0, #0
 8015838:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801583c:	ec41 0b17 	vmov	d7, r0, r1
 8015840:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015844:	bd70      	pop	{r4, r5, r6, pc}
	...

08015848 <_strtod_l>:
 8015848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801584c:	ed2d 8b0a 	vpush	{d8-d12}
 8015850:	b097      	sub	sp, #92	@ 0x5c
 8015852:	4688      	mov	r8, r1
 8015854:	920e      	str	r2, [sp, #56]	@ 0x38
 8015856:	2200      	movs	r2, #0
 8015858:	9212      	str	r2, [sp, #72]	@ 0x48
 801585a:	9005      	str	r0, [sp, #20]
 801585c:	f04f 0a00 	mov.w	sl, #0
 8015860:	f04f 0b00 	mov.w	fp, #0
 8015864:	460a      	mov	r2, r1
 8015866:	9211      	str	r2, [sp, #68]	@ 0x44
 8015868:	7811      	ldrb	r1, [r2, #0]
 801586a:	292b      	cmp	r1, #43	@ 0x2b
 801586c:	d04c      	beq.n	8015908 <_strtod_l+0xc0>
 801586e:	d839      	bhi.n	80158e4 <_strtod_l+0x9c>
 8015870:	290d      	cmp	r1, #13
 8015872:	d833      	bhi.n	80158dc <_strtod_l+0x94>
 8015874:	2908      	cmp	r1, #8
 8015876:	d833      	bhi.n	80158e0 <_strtod_l+0x98>
 8015878:	2900      	cmp	r1, #0
 801587a:	d03c      	beq.n	80158f6 <_strtod_l+0xae>
 801587c:	2200      	movs	r2, #0
 801587e:	9208      	str	r2, [sp, #32]
 8015880:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015882:	782a      	ldrb	r2, [r5, #0]
 8015884:	2a30      	cmp	r2, #48	@ 0x30
 8015886:	f040 80b7 	bne.w	80159f8 <_strtod_l+0x1b0>
 801588a:	786a      	ldrb	r2, [r5, #1]
 801588c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015890:	2a58      	cmp	r2, #88	@ 0x58
 8015892:	d170      	bne.n	8015976 <_strtod_l+0x12e>
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	9b08      	ldr	r3, [sp, #32]
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	ab12      	add	r3, sp, #72	@ 0x48
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	4a90      	ldr	r2, [pc, #576]	@ (8015ae0 <_strtod_l+0x298>)
 80158a0:	9805      	ldr	r0, [sp, #20]
 80158a2:	ab13      	add	r3, sp, #76	@ 0x4c
 80158a4:	a911      	add	r1, sp, #68	@ 0x44
 80158a6:	f001 f9f5 	bl	8016c94 <__gethex>
 80158aa:	f010 060f 	ands.w	r6, r0, #15
 80158ae:	4604      	mov	r4, r0
 80158b0:	d005      	beq.n	80158be <_strtod_l+0x76>
 80158b2:	2e06      	cmp	r6, #6
 80158b4:	d12a      	bne.n	801590c <_strtod_l+0xc4>
 80158b6:	3501      	adds	r5, #1
 80158b8:	2300      	movs	r3, #0
 80158ba:	9511      	str	r5, [sp, #68]	@ 0x44
 80158bc:	9308      	str	r3, [sp, #32]
 80158be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f040 8537 	bne.w	8016334 <_strtod_l+0xaec>
 80158c6:	9b08      	ldr	r3, [sp, #32]
 80158c8:	ec4b ab10 	vmov	d0, sl, fp
 80158cc:	b1cb      	cbz	r3, 8015902 <_strtod_l+0xba>
 80158ce:	eeb1 0b40 	vneg.f64	d0, d0
 80158d2:	b017      	add	sp, #92	@ 0x5c
 80158d4:	ecbd 8b0a 	vpop	{d8-d12}
 80158d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158dc:	2920      	cmp	r1, #32
 80158de:	d1cd      	bne.n	801587c <_strtod_l+0x34>
 80158e0:	3201      	adds	r2, #1
 80158e2:	e7c0      	b.n	8015866 <_strtod_l+0x1e>
 80158e4:	292d      	cmp	r1, #45	@ 0x2d
 80158e6:	d1c9      	bne.n	801587c <_strtod_l+0x34>
 80158e8:	2101      	movs	r1, #1
 80158ea:	9108      	str	r1, [sp, #32]
 80158ec:	1c51      	adds	r1, r2, #1
 80158ee:	9111      	str	r1, [sp, #68]	@ 0x44
 80158f0:	7852      	ldrb	r2, [r2, #1]
 80158f2:	2a00      	cmp	r2, #0
 80158f4:	d1c4      	bne.n	8015880 <_strtod_l+0x38>
 80158f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80158f8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f040 8517 	bne.w	8016330 <_strtod_l+0xae8>
 8015902:	ec4b ab10 	vmov	d0, sl, fp
 8015906:	e7e4      	b.n	80158d2 <_strtod_l+0x8a>
 8015908:	2100      	movs	r1, #0
 801590a:	e7ee      	b.n	80158ea <_strtod_l+0xa2>
 801590c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801590e:	b13a      	cbz	r2, 8015920 <_strtod_l+0xd8>
 8015910:	2135      	movs	r1, #53	@ 0x35
 8015912:	a814      	add	r0, sp, #80	@ 0x50
 8015914:	f7ff ff39 	bl	801578a <__copybits>
 8015918:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801591a:	9805      	ldr	r0, [sp, #20]
 801591c:	f7ff fb12 	bl	8014f44 <_Bfree>
 8015920:	1e73      	subs	r3, r6, #1
 8015922:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015924:	2b04      	cmp	r3, #4
 8015926:	d806      	bhi.n	8015936 <_strtod_l+0xee>
 8015928:	e8df f003 	tbb	[pc, r3]
 801592c:	201d0314 	.word	0x201d0314
 8015930:	14          	.byte	0x14
 8015931:	00          	.byte	0x00
 8015932:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015936:	05e3      	lsls	r3, r4, #23
 8015938:	bf48      	it	mi
 801593a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801593e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015942:	0d1b      	lsrs	r3, r3, #20
 8015944:	051b      	lsls	r3, r3, #20
 8015946:	2b00      	cmp	r3, #0
 8015948:	d1b9      	bne.n	80158be <_strtod_l+0x76>
 801594a:	f7fe fb75 	bl	8014038 <__errno>
 801594e:	2322      	movs	r3, #34	@ 0x22
 8015950:	6003      	str	r3, [r0, #0]
 8015952:	e7b4      	b.n	80158be <_strtod_l+0x76>
 8015954:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8015958:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801595c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015960:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015964:	e7e7      	b.n	8015936 <_strtod_l+0xee>
 8015966:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015ae8 <_strtod_l+0x2a0>
 801596a:	e7e4      	b.n	8015936 <_strtod_l+0xee>
 801596c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015970:	f04f 3aff 	mov.w	sl, #4294967295
 8015974:	e7df      	b.n	8015936 <_strtod_l+0xee>
 8015976:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015978:	1c5a      	adds	r2, r3, #1
 801597a:	9211      	str	r2, [sp, #68]	@ 0x44
 801597c:	785b      	ldrb	r3, [r3, #1]
 801597e:	2b30      	cmp	r3, #48	@ 0x30
 8015980:	d0f9      	beq.n	8015976 <_strtod_l+0x12e>
 8015982:	2b00      	cmp	r3, #0
 8015984:	d09b      	beq.n	80158be <_strtod_l+0x76>
 8015986:	2301      	movs	r3, #1
 8015988:	9307      	str	r3, [sp, #28]
 801598a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801598c:	930a      	str	r3, [sp, #40]	@ 0x28
 801598e:	2300      	movs	r3, #0
 8015990:	9306      	str	r3, [sp, #24]
 8015992:	4699      	mov	r9, r3
 8015994:	461d      	mov	r5, r3
 8015996:	220a      	movs	r2, #10
 8015998:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801599a:	7804      	ldrb	r4, [r0, #0]
 801599c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80159a0:	b2d9      	uxtb	r1, r3
 80159a2:	2909      	cmp	r1, #9
 80159a4:	d92a      	bls.n	80159fc <_strtod_l+0x1b4>
 80159a6:	494f      	ldr	r1, [pc, #316]	@ (8015ae4 <_strtod_l+0x29c>)
 80159a8:	2201      	movs	r2, #1
 80159aa:	f7fe fae8 	bl	8013f7e <strncmp>
 80159ae:	b398      	cbz	r0, 8015a18 <_strtod_l+0x1d0>
 80159b0:	2000      	movs	r0, #0
 80159b2:	4622      	mov	r2, r4
 80159b4:	462b      	mov	r3, r5
 80159b6:	4607      	mov	r7, r0
 80159b8:	4601      	mov	r1, r0
 80159ba:	2a65      	cmp	r2, #101	@ 0x65
 80159bc:	d001      	beq.n	80159c2 <_strtod_l+0x17a>
 80159be:	2a45      	cmp	r2, #69	@ 0x45
 80159c0:	d118      	bne.n	80159f4 <_strtod_l+0x1ac>
 80159c2:	b91b      	cbnz	r3, 80159cc <_strtod_l+0x184>
 80159c4:	9b07      	ldr	r3, [sp, #28]
 80159c6:	4303      	orrs	r3, r0
 80159c8:	d095      	beq.n	80158f6 <_strtod_l+0xae>
 80159ca:	2300      	movs	r3, #0
 80159cc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80159d0:	f108 0201 	add.w	r2, r8, #1
 80159d4:	9211      	str	r2, [sp, #68]	@ 0x44
 80159d6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80159da:	2a2b      	cmp	r2, #43	@ 0x2b
 80159dc:	d074      	beq.n	8015ac8 <_strtod_l+0x280>
 80159de:	2a2d      	cmp	r2, #45	@ 0x2d
 80159e0:	d07a      	beq.n	8015ad8 <_strtod_l+0x290>
 80159e2:	f04f 0e00 	mov.w	lr, #0
 80159e6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80159ea:	2c09      	cmp	r4, #9
 80159ec:	f240 8082 	bls.w	8015af4 <_strtod_l+0x2ac>
 80159f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80159f4:	2400      	movs	r4, #0
 80159f6:	e09d      	b.n	8015b34 <_strtod_l+0x2ec>
 80159f8:	2300      	movs	r3, #0
 80159fa:	e7c5      	b.n	8015988 <_strtod_l+0x140>
 80159fc:	2d08      	cmp	r5, #8
 80159fe:	bfc8      	it	gt
 8015a00:	9906      	ldrgt	r1, [sp, #24]
 8015a02:	f100 0001 	add.w	r0, r0, #1
 8015a06:	bfca      	itet	gt
 8015a08:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015a0c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015a10:	9306      	strgt	r3, [sp, #24]
 8015a12:	3501      	adds	r5, #1
 8015a14:	9011      	str	r0, [sp, #68]	@ 0x44
 8015a16:	e7bf      	b.n	8015998 <_strtod_l+0x150>
 8015a18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a1e:	785a      	ldrb	r2, [r3, #1]
 8015a20:	b3bd      	cbz	r5, 8015a92 <_strtod_l+0x24a>
 8015a22:	4607      	mov	r7, r0
 8015a24:	462b      	mov	r3, r5
 8015a26:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015a2a:	2909      	cmp	r1, #9
 8015a2c:	d912      	bls.n	8015a54 <_strtod_l+0x20c>
 8015a2e:	2101      	movs	r1, #1
 8015a30:	e7c3      	b.n	80159ba <_strtod_l+0x172>
 8015a32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a34:	1c5a      	adds	r2, r3, #1
 8015a36:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a38:	785a      	ldrb	r2, [r3, #1]
 8015a3a:	3001      	adds	r0, #1
 8015a3c:	2a30      	cmp	r2, #48	@ 0x30
 8015a3e:	d0f8      	beq.n	8015a32 <_strtod_l+0x1ea>
 8015a40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015a44:	2b08      	cmp	r3, #8
 8015a46:	f200 847a 	bhi.w	801633e <_strtod_l+0xaf6>
 8015a4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a4e:	4607      	mov	r7, r0
 8015a50:	2000      	movs	r0, #0
 8015a52:	4603      	mov	r3, r0
 8015a54:	3a30      	subs	r2, #48	@ 0x30
 8015a56:	f100 0101 	add.w	r1, r0, #1
 8015a5a:	d014      	beq.n	8015a86 <_strtod_l+0x23e>
 8015a5c:	440f      	add	r7, r1
 8015a5e:	469c      	mov	ip, r3
 8015a60:	f04f 0e0a 	mov.w	lr, #10
 8015a64:	f10c 0401 	add.w	r4, ip, #1
 8015a68:	1ae6      	subs	r6, r4, r3
 8015a6a:	42b1      	cmp	r1, r6
 8015a6c:	dc13      	bgt.n	8015a96 <_strtod_l+0x24e>
 8015a6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8015a72:	1819      	adds	r1, r3, r0
 8015a74:	2908      	cmp	r1, #8
 8015a76:	f103 0301 	add.w	r3, r3, #1
 8015a7a:	4403      	add	r3, r0
 8015a7c:	dc19      	bgt.n	8015ab2 <_strtod_l+0x26a>
 8015a7e:	210a      	movs	r1, #10
 8015a80:	fb01 2909 	mla	r9, r1, r9, r2
 8015a84:	2100      	movs	r1, #0
 8015a86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015a88:	1c50      	adds	r0, r2, #1
 8015a8a:	9011      	str	r0, [sp, #68]	@ 0x44
 8015a8c:	7852      	ldrb	r2, [r2, #1]
 8015a8e:	4608      	mov	r0, r1
 8015a90:	e7c9      	b.n	8015a26 <_strtod_l+0x1de>
 8015a92:	4628      	mov	r0, r5
 8015a94:	e7d2      	b.n	8015a3c <_strtod_l+0x1f4>
 8015a96:	f1bc 0f08 	cmp.w	ip, #8
 8015a9a:	dc03      	bgt.n	8015aa4 <_strtod_l+0x25c>
 8015a9c:	fb0e f909 	mul.w	r9, lr, r9
 8015aa0:	46a4      	mov	ip, r4
 8015aa2:	e7df      	b.n	8015a64 <_strtod_l+0x21c>
 8015aa4:	2c10      	cmp	r4, #16
 8015aa6:	bfde      	ittt	le
 8015aa8:	9e06      	ldrle	r6, [sp, #24]
 8015aaa:	fb0e f606 	mulle.w	r6, lr, r6
 8015aae:	9606      	strle	r6, [sp, #24]
 8015ab0:	e7f6      	b.n	8015aa0 <_strtod_l+0x258>
 8015ab2:	290f      	cmp	r1, #15
 8015ab4:	bfdf      	itttt	le
 8015ab6:	9806      	ldrle	r0, [sp, #24]
 8015ab8:	210a      	movle	r1, #10
 8015aba:	fb01 2200 	mlale	r2, r1, r0, r2
 8015abe:	9206      	strle	r2, [sp, #24]
 8015ac0:	e7e0      	b.n	8015a84 <_strtod_l+0x23c>
 8015ac2:	2700      	movs	r7, #0
 8015ac4:	2101      	movs	r1, #1
 8015ac6:	e77d      	b.n	80159c4 <_strtod_l+0x17c>
 8015ac8:	f04f 0e00 	mov.w	lr, #0
 8015acc:	f108 0202 	add.w	r2, r8, #2
 8015ad0:	9211      	str	r2, [sp, #68]	@ 0x44
 8015ad2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015ad6:	e786      	b.n	80159e6 <_strtod_l+0x19e>
 8015ad8:	f04f 0e01 	mov.w	lr, #1
 8015adc:	e7f6      	b.n	8015acc <_strtod_l+0x284>
 8015ade:	bf00      	nop
 8015ae0:	0801b04c 	.word	0x0801b04c
 8015ae4:	0801adb9 	.word	0x0801adb9
 8015ae8:	7ff00000 	.word	0x7ff00000
 8015aec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015aee:	1c54      	adds	r4, r2, #1
 8015af0:	9411      	str	r4, [sp, #68]	@ 0x44
 8015af2:	7852      	ldrb	r2, [r2, #1]
 8015af4:	2a30      	cmp	r2, #48	@ 0x30
 8015af6:	d0f9      	beq.n	8015aec <_strtod_l+0x2a4>
 8015af8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015afc:	2c08      	cmp	r4, #8
 8015afe:	f63f af79 	bhi.w	80159f4 <_strtod_l+0x1ac>
 8015b02:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015b06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b0a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b0c:	1c54      	adds	r4, r2, #1
 8015b0e:	9411      	str	r4, [sp, #68]	@ 0x44
 8015b10:	7852      	ldrb	r2, [r2, #1]
 8015b12:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8015b16:	2e09      	cmp	r6, #9
 8015b18:	d937      	bls.n	8015b8a <_strtod_l+0x342>
 8015b1a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8015b1c:	1ba4      	subs	r4, r4, r6
 8015b1e:	2c08      	cmp	r4, #8
 8015b20:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015b24:	dc02      	bgt.n	8015b2c <_strtod_l+0x2e4>
 8015b26:	4564      	cmp	r4, ip
 8015b28:	bfa8      	it	ge
 8015b2a:	4664      	movge	r4, ip
 8015b2c:	f1be 0f00 	cmp.w	lr, #0
 8015b30:	d000      	beq.n	8015b34 <_strtod_l+0x2ec>
 8015b32:	4264      	negs	r4, r4
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d14d      	bne.n	8015bd4 <_strtod_l+0x38c>
 8015b38:	9b07      	ldr	r3, [sp, #28]
 8015b3a:	4318      	orrs	r0, r3
 8015b3c:	f47f aebf 	bne.w	80158be <_strtod_l+0x76>
 8015b40:	2900      	cmp	r1, #0
 8015b42:	f47f aed8 	bne.w	80158f6 <_strtod_l+0xae>
 8015b46:	2a69      	cmp	r2, #105	@ 0x69
 8015b48:	d027      	beq.n	8015b9a <_strtod_l+0x352>
 8015b4a:	dc24      	bgt.n	8015b96 <_strtod_l+0x34e>
 8015b4c:	2a49      	cmp	r2, #73	@ 0x49
 8015b4e:	d024      	beq.n	8015b9a <_strtod_l+0x352>
 8015b50:	2a4e      	cmp	r2, #78	@ 0x4e
 8015b52:	f47f aed0 	bne.w	80158f6 <_strtod_l+0xae>
 8015b56:	4997      	ldr	r1, [pc, #604]	@ (8015db4 <_strtod_l+0x56c>)
 8015b58:	a811      	add	r0, sp, #68	@ 0x44
 8015b5a:	f001 fabd 	bl	80170d8 <__match>
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	f43f aec9 	beq.w	80158f6 <_strtod_l+0xae>
 8015b64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	2b28      	cmp	r3, #40	@ 0x28
 8015b6a:	d12d      	bne.n	8015bc8 <_strtod_l+0x380>
 8015b6c:	4992      	ldr	r1, [pc, #584]	@ (8015db8 <_strtod_l+0x570>)
 8015b6e:	aa14      	add	r2, sp, #80	@ 0x50
 8015b70:	a811      	add	r0, sp, #68	@ 0x44
 8015b72:	f001 fac5 	bl	8017100 <__hexnan>
 8015b76:	2805      	cmp	r0, #5
 8015b78:	d126      	bne.n	8015bc8 <_strtod_l+0x380>
 8015b7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015b7c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015b80:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015b84:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015b88:	e699      	b.n	80158be <_strtod_l+0x76>
 8015b8a:	240a      	movs	r4, #10
 8015b8c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015b90:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015b94:	e7b9      	b.n	8015b0a <_strtod_l+0x2c2>
 8015b96:	2a6e      	cmp	r2, #110	@ 0x6e
 8015b98:	e7db      	b.n	8015b52 <_strtod_l+0x30a>
 8015b9a:	4988      	ldr	r1, [pc, #544]	@ (8015dbc <_strtod_l+0x574>)
 8015b9c:	a811      	add	r0, sp, #68	@ 0x44
 8015b9e:	f001 fa9b 	bl	80170d8 <__match>
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	f43f aea7 	beq.w	80158f6 <_strtod_l+0xae>
 8015ba8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015baa:	4985      	ldr	r1, [pc, #532]	@ (8015dc0 <_strtod_l+0x578>)
 8015bac:	3b01      	subs	r3, #1
 8015bae:	a811      	add	r0, sp, #68	@ 0x44
 8015bb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bb2:	f001 fa91 	bl	80170d8 <__match>
 8015bb6:	b910      	cbnz	r0, 8015bbe <_strtod_l+0x376>
 8015bb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bba:	3301      	adds	r3, #1
 8015bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bbe:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015dd4 <_strtod_l+0x58c>
 8015bc2:	f04f 0a00 	mov.w	sl, #0
 8015bc6:	e67a      	b.n	80158be <_strtod_l+0x76>
 8015bc8:	487e      	ldr	r0, [pc, #504]	@ (8015dc4 <_strtod_l+0x57c>)
 8015bca:	f000 ffd9 	bl	8016b80 <nan>
 8015bce:	ec5b ab10 	vmov	sl, fp, d0
 8015bd2:	e674      	b.n	80158be <_strtod_l+0x76>
 8015bd4:	ee07 9a90 	vmov	s15, r9
 8015bd8:	1be2      	subs	r2, r4, r7
 8015bda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015bde:	2d00      	cmp	r5, #0
 8015be0:	bf08      	it	eq
 8015be2:	461d      	moveq	r5, r3
 8015be4:	2b10      	cmp	r3, #16
 8015be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8015be8:	461a      	mov	r2, r3
 8015bea:	bfa8      	it	ge
 8015bec:	2210      	movge	r2, #16
 8015bee:	2b09      	cmp	r3, #9
 8015bf0:	ec5b ab17 	vmov	sl, fp, d7
 8015bf4:	dc15      	bgt.n	8015c22 <_strtod_l+0x3da>
 8015bf6:	1be1      	subs	r1, r4, r7
 8015bf8:	2900      	cmp	r1, #0
 8015bfa:	f43f ae60 	beq.w	80158be <_strtod_l+0x76>
 8015bfe:	eba4 0107 	sub.w	r1, r4, r7
 8015c02:	dd72      	ble.n	8015cea <_strtod_l+0x4a2>
 8015c04:	2916      	cmp	r1, #22
 8015c06:	dc59      	bgt.n	8015cbc <_strtod_l+0x474>
 8015c08:	4b6f      	ldr	r3, [pc, #444]	@ (8015dc8 <_strtod_l+0x580>)
 8015c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c10:	ed93 7b00 	vldr	d7, [r3]
 8015c14:	ec4b ab16 	vmov	d6, sl, fp
 8015c18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c1c:	ec5b ab17 	vmov	sl, fp, d7
 8015c20:	e64d      	b.n	80158be <_strtod_l+0x76>
 8015c22:	4969      	ldr	r1, [pc, #420]	@ (8015dc8 <_strtod_l+0x580>)
 8015c24:	eddd 6a06 	vldr	s13, [sp, #24]
 8015c28:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015c2c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015c30:	2b0f      	cmp	r3, #15
 8015c32:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015c36:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c3a:	ec5b ab16 	vmov	sl, fp, d6
 8015c3e:	ddda      	ble.n	8015bf6 <_strtod_l+0x3ae>
 8015c40:	1a9a      	subs	r2, r3, r2
 8015c42:	1be1      	subs	r1, r4, r7
 8015c44:	440a      	add	r2, r1
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	f340 8094 	ble.w	8015d74 <_strtod_l+0x52c>
 8015c4c:	f012 000f 	ands.w	r0, r2, #15
 8015c50:	d00a      	beq.n	8015c68 <_strtod_l+0x420>
 8015c52:	495d      	ldr	r1, [pc, #372]	@ (8015dc8 <_strtod_l+0x580>)
 8015c54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015c58:	ed91 7b00 	vldr	d7, [r1]
 8015c5c:	ec4b ab16 	vmov	d6, sl, fp
 8015c60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c64:	ec5b ab17 	vmov	sl, fp, d7
 8015c68:	f032 020f 	bics.w	r2, r2, #15
 8015c6c:	d073      	beq.n	8015d56 <_strtod_l+0x50e>
 8015c6e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015c72:	dd47      	ble.n	8015d04 <_strtod_l+0x4bc>
 8015c74:	2400      	movs	r4, #0
 8015c76:	4625      	mov	r5, r4
 8015c78:	9407      	str	r4, [sp, #28]
 8015c7a:	4626      	mov	r6, r4
 8015c7c:	9a05      	ldr	r2, [sp, #20]
 8015c7e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015dd4 <_strtod_l+0x58c>
 8015c82:	2322      	movs	r3, #34	@ 0x22
 8015c84:	6013      	str	r3, [r2, #0]
 8015c86:	f04f 0a00 	mov.w	sl, #0
 8015c8a:	9b07      	ldr	r3, [sp, #28]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f43f ae16 	beq.w	80158be <_strtod_l+0x76>
 8015c92:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015c94:	9805      	ldr	r0, [sp, #20]
 8015c96:	f7ff f955 	bl	8014f44 <_Bfree>
 8015c9a:	9805      	ldr	r0, [sp, #20]
 8015c9c:	4631      	mov	r1, r6
 8015c9e:	f7ff f951 	bl	8014f44 <_Bfree>
 8015ca2:	9805      	ldr	r0, [sp, #20]
 8015ca4:	4629      	mov	r1, r5
 8015ca6:	f7ff f94d 	bl	8014f44 <_Bfree>
 8015caa:	9907      	ldr	r1, [sp, #28]
 8015cac:	9805      	ldr	r0, [sp, #20]
 8015cae:	f7ff f949 	bl	8014f44 <_Bfree>
 8015cb2:	9805      	ldr	r0, [sp, #20]
 8015cb4:	4621      	mov	r1, r4
 8015cb6:	f7ff f945 	bl	8014f44 <_Bfree>
 8015cba:	e600      	b.n	80158be <_strtod_l+0x76>
 8015cbc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015cc0:	1be0      	subs	r0, r4, r7
 8015cc2:	4281      	cmp	r1, r0
 8015cc4:	dbbc      	blt.n	8015c40 <_strtod_l+0x3f8>
 8015cc6:	4a40      	ldr	r2, [pc, #256]	@ (8015dc8 <_strtod_l+0x580>)
 8015cc8:	f1c3 030f 	rsb	r3, r3, #15
 8015ccc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015cd0:	ed91 7b00 	vldr	d7, [r1]
 8015cd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015cd6:	ec4b ab16 	vmov	d6, sl, fp
 8015cda:	1acb      	subs	r3, r1, r3
 8015cdc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015ce0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ce4:	ed92 6b00 	vldr	d6, [r2]
 8015ce8:	e796      	b.n	8015c18 <_strtod_l+0x3d0>
 8015cea:	3116      	adds	r1, #22
 8015cec:	dba8      	blt.n	8015c40 <_strtod_l+0x3f8>
 8015cee:	4b36      	ldr	r3, [pc, #216]	@ (8015dc8 <_strtod_l+0x580>)
 8015cf0:	1b3c      	subs	r4, r7, r4
 8015cf2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015cf6:	ed94 7b00 	vldr	d7, [r4]
 8015cfa:	ec4b ab16 	vmov	d6, sl, fp
 8015cfe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d02:	e78b      	b.n	8015c1c <_strtod_l+0x3d4>
 8015d04:	2000      	movs	r0, #0
 8015d06:	ec4b ab17 	vmov	d7, sl, fp
 8015d0a:	4e30      	ldr	r6, [pc, #192]	@ (8015dcc <_strtod_l+0x584>)
 8015d0c:	1112      	asrs	r2, r2, #4
 8015d0e:	4601      	mov	r1, r0
 8015d10:	2a01      	cmp	r2, #1
 8015d12:	dc23      	bgt.n	8015d5c <_strtod_l+0x514>
 8015d14:	b108      	cbz	r0, 8015d1a <_strtod_l+0x4d2>
 8015d16:	ec5b ab17 	vmov	sl, fp, d7
 8015d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8015dcc <_strtod_l+0x584>)
 8015d1c:	482c      	ldr	r0, [pc, #176]	@ (8015dd0 <_strtod_l+0x588>)
 8015d1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015d22:	ed92 7b00 	vldr	d7, [r2]
 8015d26:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015d2a:	ec4b ab16 	vmov	d6, sl, fp
 8015d2e:	4a29      	ldr	r2, [pc, #164]	@ (8015dd4 <_strtod_l+0x58c>)
 8015d30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d34:	ee17 1a90 	vmov	r1, s15
 8015d38:	400a      	ands	r2, r1
 8015d3a:	4282      	cmp	r2, r0
 8015d3c:	ec5b ab17 	vmov	sl, fp, d7
 8015d40:	d898      	bhi.n	8015c74 <_strtod_l+0x42c>
 8015d42:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015d46:	4282      	cmp	r2, r0
 8015d48:	bf86      	itte	hi
 8015d4a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015dd8 <_strtod_l+0x590>
 8015d4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015d52:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015d56:	2200      	movs	r2, #0
 8015d58:	9206      	str	r2, [sp, #24]
 8015d5a:	e076      	b.n	8015e4a <_strtod_l+0x602>
 8015d5c:	f012 0f01 	tst.w	r2, #1
 8015d60:	d004      	beq.n	8015d6c <_strtod_l+0x524>
 8015d62:	ed96 6b00 	vldr	d6, [r6]
 8015d66:	2001      	movs	r0, #1
 8015d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d6c:	3101      	adds	r1, #1
 8015d6e:	1052      	asrs	r2, r2, #1
 8015d70:	3608      	adds	r6, #8
 8015d72:	e7cd      	b.n	8015d10 <_strtod_l+0x4c8>
 8015d74:	d0ef      	beq.n	8015d56 <_strtod_l+0x50e>
 8015d76:	4252      	negs	r2, r2
 8015d78:	f012 000f 	ands.w	r0, r2, #15
 8015d7c:	d00a      	beq.n	8015d94 <_strtod_l+0x54c>
 8015d7e:	4912      	ldr	r1, [pc, #72]	@ (8015dc8 <_strtod_l+0x580>)
 8015d80:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015d84:	ed91 7b00 	vldr	d7, [r1]
 8015d88:	ec4b ab16 	vmov	d6, sl, fp
 8015d8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d90:	ec5b ab17 	vmov	sl, fp, d7
 8015d94:	1112      	asrs	r2, r2, #4
 8015d96:	d0de      	beq.n	8015d56 <_strtod_l+0x50e>
 8015d98:	2a1f      	cmp	r2, #31
 8015d9a:	dd1f      	ble.n	8015ddc <_strtod_l+0x594>
 8015d9c:	2400      	movs	r4, #0
 8015d9e:	4625      	mov	r5, r4
 8015da0:	9407      	str	r4, [sp, #28]
 8015da2:	4626      	mov	r6, r4
 8015da4:	9a05      	ldr	r2, [sp, #20]
 8015da6:	2322      	movs	r3, #34	@ 0x22
 8015da8:	f04f 0a00 	mov.w	sl, #0
 8015dac:	f04f 0b00 	mov.w	fp, #0
 8015db0:	6013      	str	r3, [r2, #0]
 8015db2:	e76a      	b.n	8015c8a <_strtod_l+0x442>
 8015db4:	0801ac82 	.word	0x0801ac82
 8015db8:	0801b038 	.word	0x0801b038
 8015dbc:	0801ac7a 	.word	0x0801ac7a
 8015dc0:	0801aced 	.word	0x0801aced
 8015dc4:	0801ace9 	.word	0x0801ace9
 8015dc8:	0801af70 	.word	0x0801af70
 8015dcc:	0801af48 	.word	0x0801af48
 8015dd0:	7ca00000 	.word	0x7ca00000
 8015dd4:	7ff00000 	.word	0x7ff00000
 8015dd8:	7fefffff 	.word	0x7fefffff
 8015ddc:	f012 0110 	ands.w	r1, r2, #16
 8015de0:	bf18      	it	ne
 8015de2:	216a      	movne	r1, #106	@ 0x6a
 8015de4:	9106      	str	r1, [sp, #24]
 8015de6:	ec4b ab17 	vmov	d7, sl, fp
 8015dea:	49af      	ldr	r1, [pc, #700]	@ (80160a8 <_strtod_l+0x860>)
 8015dec:	2000      	movs	r0, #0
 8015dee:	07d6      	lsls	r6, r2, #31
 8015df0:	d504      	bpl.n	8015dfc <_strtod_l+0x5b4>
 8015df2:	ed91 6b00 	vldr	d6, [r1]
 8015df6:	2001      	movs	r0, #1
 8015df8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015dfc:	1052      	asrs	r2, r2, #1
 8015dfe:	f101 0108 	add.w	r1, r1, #8
 8015e02:	d1f4      	bne.n	8015dee <_strtod_l+0x5a6>
 8015e04:	b108      	cbz	r0, 8015e0a <_strtod_l+0x5c2>
 8015e06:	ec5b ab17 	vmov	sl, fp, d7
 8015e0a:	9a06      	ldr	r2, [sp, #24]
 8015e0c:	b1b2      	cbz	r2, 8015e3c <_strtod_l+0x5f4>
 8015e0e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015e12:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015e16:	2a00      	cmp	r2, #0
 8015e18:	4658      	mov	r0, fp
 8015e1a:	dd0f      	ble.n	8015e3c <_strtod_l+0x5f4>
 8015e1c:	2a1f      	cmp	r2, #31
 8015e1e:	dd55      	ble.n	8015ecc <_strtod_l+0x684>
 8015e20:	2a34      	cmp	r2, #52	@ 0x34
 8015e22:	bfde      	ittt	le
 8015e24:	f04f 32ff 	movle.w	r2, #4294967295
 8015e28:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015e2c:	408a      	lslle	r2, r1
 8015e2e:	f04f 0a00 	mov.w	sl, #0
 8015e32:	bfcc      	ite	gt
 8015e34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015e38:	ea02 0b00 	andle.w	fp, r2, r0
 8015e3c:	ec4b ab17 	vmov	d7, sl, fp
 8015e40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e48:	d0a8      	beq.n	8015d9c <_strtod_l+0x554>
 8015e4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015e4c:	9805      	ldr	r0, [sp, #20]
 8015e4e:	f8cd 9000 	str.w	r9, [sp]
 8015e52:	462a      	mov	r2, r5
 8015e54:	f7ff f8de 	bl	8015014 <__s2b>
 8015e58:	9007      	str	r0, [sp, #28]
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	f43f af0a 	beq.w	8015c74 <_strtod_l+0x42c>
 8015e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e62:	1b3f      	subs	r7, r7, r4
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	bfb4      	ite	lt
 8015e68:	463b      	movlt	r3, r7
 8015e6a:	2300      	movge	r3, #0
 8015e6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8015e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e70:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8016098 <_strtod_l+0x850>
 8015e74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e78:	2400      	movs	r4, #0
 8015e7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015e7c:	4625      	mov	r5, r4
 8015e7e:	9b07      	ldr	r3, [sp, #28]
 8015e80:	9805      	ldr	r0, [sp, #20]
 8015e82:	6859      	ldr	r1, [r3, #4]
 8015e84:	f7ff f81e 	bl	8014ec4 <_Balloc>
 8015e88:	4606      	mov	r6, r0
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	f43f aef6 	beq.w	8015c7c <_strtod_l+0x434>
 8015e90:	9b07      	ldr	r3, [sp, #28]
 8015e92:	691a      	ldr	r2, [r3, #16]
 8015e94:	ec4b ab19 	vmov	d9, sl, fp
 8015e98:	3202      	adds	r2, #2
 8015e9a:	f103 010c 	add.w	r1, r3, #12
 8015e9e:	0092      	lsls	r2, r2, #2
 8015ea0:	300c      	adds	r0, #12
 8015ea2:	f7fe f8f6 	bl	8014092 <memcpy>
 8015ea6:	eeb0 0b49 	vmov.f64	d0, d9
 8015eaa:	9805      	ldr	r0, [sp, #20]
 8015eac:	aa14      	add	r2, sp, #80	@ 0x50
 8015eae:	a913      	add	r1, sp, #76	@ 0x4c
 8015eb0:	f7ff fbe4 	bl	801567c <__d2b>
 8015eb4:	9012      	str	r0, [sp, #72]	@ 0x48
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	f43f aee0 	beq.w	8015c7c <_strtod_l+0x434>
 8015ebc:	9805      	ldr	r0, [sp, #20]
 8015ebe:	2101      	movs	r1, #1
 8015ec0:	f7ff f93e 	bl	8015140 <__i2b>
 8015ec4:	4605      	mov	r5, r0
 8015ec6:	b940      	cbnz	r0, 8015eda <_strtod_l+0x692>
 8015ec8:	2500      	movs	r5, #0
 8015eca:	e6d7      	b.n	8015c7c <_strtod_l+0x434>
 8015ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8015ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8015ed4:	ea02 0a0a 	and.w	sl, r2, sl
 8015ed8:	e7b0      	b.n	8015e3c <_strtod_l+0x5f4>
 8015eda:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015edc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015ede:	2f00      	cmp	r7, #0
 8015ee0:	bfab      	itete	ge
 8015ee2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015ee4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015ee6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015eea:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015eee:	bfac      	ite	ge
 8015ef0:	eb07 0903 	addge.w	r9, r7, r3
 8015ef4:	eba3 0807 	sublt.w	r8, r3, r7
 8015ef8:	9b06      	ldr	r3, [sp, #24]
 8015efa:	1aff      	subs	r7, r7, r3
 8015efc:	4417      	add	r7, r2
 8015efe:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015f02:	4a6a      	ldr	r2, [pc, #424]	@ (80160ac <_strtod_l+0x864>)
 8015f04:	3f01      	subs	r7, #1
 8015f06:	4297      	cmp	r7, r2
 8015f08:	da51      	bge.n	8015fae <_strtod_l+0x766>
 8015f0a:	1bd1      	subs	r1, r2, r7
 8015f0c:	291f      	cmp	r1, #31
 8015f0e:	eba3 0301 	sub.w	r3, r3, r1
 8015f12:	f04f 0201 	mov.w	r2, #1
 8015f16:	dc3e      	bgt.n	8015f96 <_strtod_l+0x74e>
 8015f18:	408a      	lsls	r2, r1
 8015f1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015f20:	eb09 0703 	add.w	r7, r9, r3
 8015f24:	4498      	add	r8, r3
 8015f26:	9b06      	ldr	r3, [sp, #24]
 8015f28:	45b9      	cmp	r9, r7
 8015f2a:	4498      	add	r8, r3
 8015f2c:	464b      	mov	r3, r9
 8015f2e:	bfa8      	it	ge
 8015f30:	463b      	movge	r3, r7
 8015f32:	4543      	cmp	r3, r8
 8015f34:	bfa8      	it	ge
 8015f36:	4643      	movge	r3, r8
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	bfc2      	ittt	gt
 8015f3c:	1aff      	subgt	r7, r7, r3
 8015f3e:	eba8 0803 	subgt.w	r8, r8, r3
 8015f42:	eba9 0903 	subgt.w	r9, r9, r3
 8015f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	dd16      	ble.n	8015f7a <_strtod_l+0x732>
 8015f4c:	4629      	mov	r1, r5
 8015f4e:	9805      	ldr	r0, [sp, #20]
 8015f50:	461a      	mov	r2, r3
 8015f52:	f7ff f9ad 	bl	80152b0 <__pow5mult>
 8015f56:	4605      	mov	r5, r0
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	d0b5      	beq.n	8015ec8 <_strtod_l+0x680>
 8015f5c:	4601      	mov	r1, r0
 8015f5e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015f60:	9805      	ldr	r0, [sp, #20]
 8015f62:	f7ff f903 	bl	801516c <__multiply>
 8015f66:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015f68:	2800      	cmp	r0, #0
 8015f6a:	f43f ae87 	beq.w	8015c7c <_strtod_l+0x434>
 8015f6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f70:	9805      	ldr	r0, [sp, #20]
 8015f72:	f7fe ffe7 	bl	8014f44 <_Bfree>
 8015f76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f78:	9312      	str	r3, [sp, #72]	@ 0x48
 8015f7a:	2f00      	cmp	r7, #0
 8015f7c:	dc1b      	bgt.n	8015fb6 <_strtod_l+0x76e>
 8015f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	dd21      	ble.n	8015fc8 <_strtod_l+0x780>
 8015f84:	4631      	mov	r1, r6
 8015f86:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015f88:	9805      	ldr	r0, [sp, #20]
 8015f8a:	f7ff f991 	bl	80152b0 <__pow5mult>
 8015f8e:	4606      	mov	r6, r0
 8015f90:	b9d0      	cbnz	r0, 8015fc8 <_strtod_l+0x780>
 8015f92:	2600      	movs	r6, #0
 8015f94:	e672      	b.n	8015c7c <_strtod_l+0x434>
 8015f96:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015f9a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015f9e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8015fa2:	37e2      	adds	r7, #226	@ 0xe2
 8015fa4:	fa02 f107 	lsl.w	r1, r2, r7
 8015fa8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015faa:	920c      	str	r2, [sp, #48]	@ 0x30
 8015fac:	e7b8      	b.n	8015f20 <_strtod_l+0x6d8>
 8015fae:	2200      	movs	r2, #0
 8015fb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	e7f9      	b.n	8015faa <_strtod_l+0x762>
 8015fb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015fb8:	9805      	ldr	r0, [sp, #20]
 8015fba:	463a      	mov	r2, r7
 8015fbc:	f7ff f9d2 	bl	8015364 <__lshift>
 8015fc0:	9012      	str	r0, [sp, #72]	@ 0x48
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	d1db      	bne.n	8015f7e <_strtod_l+0x736>
 8015fc6:	e659      	b.n	8015c7c <_strtod_l+0x434>
 8015fc8:	f1b8 0f00 	cmp.w	r8, #0
 8015fcc:	dd07      	ble.n	8015fde <_strtod_l+0x796>
 8015fce:	4631      	mov	r1, r6
 8015fd0:	9805      	ldr	r0, [sp, #20]
 8015fd2:	4642      	mov	r2, r8
 8015fd4:	f7ff f9c6 	bl	8015364 <__lshift>
 8015fd8:	4606      	mov	r6, r0
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d0d9      	beq.n	8015f92 <_strtod_l+0x74a>
 8015fde:	f1b9 0f00 	cmp.w	r9, #0
 8015fe2:	dd08      	ble.n	8015ff6 <_strtod_l+0x7ae>
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	9805      	ldr	r0, [sp, #20]
 8015fe8:	464a      	mov	r2, r9
 8015fea:	f7ff f9bb 	bl	8015364 <__lshift>
 8015fee:	4605      	mov	r5, r0
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	f43f ae43 	beq.w	8015c7c <_strtod_l+0x434>
 8015ff6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015ff8:	9805      	ldr	r0, [sp, #20]
 8015ffa:	4632      	mov	r2, r6
 8015ffc:	f7ff fa3a 	bl	8015474 <__mdiff>
 8016000:	4604      	mov	r4, r0
 8016002:	2800      	cmp	r0, #0
 8016004:	f43f ae3a 	beq.w	8015c7c <_strtod_l+0x434>
 8016008:	2300      	movs	r3, #0
 801600a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801600e:	60c3      	str	r3, [r0, #12]
 8016010:	4629      	mov	r1, r5
 8016012:	f7ff fa13 	bl	801543c <__mcmp>
 8016016:	2800      	cmp	r0, #0
 8016018:	da4c      	bge.n	80160b4 <_strtod_l+0x86c>
 801601a:	ea58 080a 	orrs.w	r8, r8, sl
 801601e:	d172      	bne.n	8016106 <_strtod_l+0x8be>
 8016020:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016024:	2b00      	cmp	r3, #0
 8016026:	d16e      	bne.n	8016106 <_strtod_l+0x8be>
 8016028:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801602c:	0d1b      	lsrs	r3, r3, #20
 801602e:	051b      	lsls	r3, r3, #20
 8016030:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016034:	d967      	bls.n	8016106 <_strtod_l+0x8be>
 8016036:	6963      	ldr	r3, [r4, #20]
 8016038:	b913      	cbnz	r3, 8016040 <_strtod_l+0x7f8>
 801603a:	6923      	ldr	r3, [r4, #16]
 801603c:	2b01      	cmp	r3, #1
 801603e:	dd62      	ble.n	8016106 <_strtod_l+0x8be>
 8016040:	4621      	mov	r1, r4
 8016042:	2201      	movs	r2, #1
 8016044:	9805      	ldr	r0, [sp, #20]
 8016046:	f7ff f98d 	bl	8015364 <__lshift>
 801604a:	4629      	mov	r1, r5
 801604c:	4604      	mov	r4, r0
 801604e:	f7ff f9f5 	bl	801543c <__mcmp>
 8016052:	2800      	cmp	r0, #0
 8016054:	dd57      	ble.n	8016106 <_strtod_l+0x8be>
 8016056:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801605a:	9a06      	ldr	r2, [sp, #24]
 801605c:	0d1b      	lsrs	r3, r3, #20
 801605e:	051b      	lsls	r3, r3, #20
 8016060:	2a00      	cmp	r2, #0
 8016062:	d06e      	beq.n	8016142 <_strtod_l+0x8fa>
 8016064:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016068:	d86b      	bhi.n	8016142 <_strtod_l+0x8fa>
 801606a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801606e:	f67f ae99 	bls.w	8015da4 <_strtod_l+0x55c>
 8016072:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80160a0 <_strtod_l+0x858>
 8016076:	ec4b ab16 	vmov	d6, sl, fp
 801607a:	4b0d      	ldr	r3, [pc, #52]	@ (80160b0 <_strtod_l+0x868>)
 801607c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016080:	ee17 2a90 	vmov	r2, s15
 8016084:	4013      	ands	r3, r2
 8016086:	ec5b ab17 	vmov	sl, fp, d7
 801608a:	2b00      	cmp	r3, #0
 801608c:	f47f ae01 	bne.w	8015c92 <_strtod_l+0x44a>
 8016090:	9a05      	ldr	r2, [sp, #20]
 8016092:	2322      	movs	r3, #34	@ 0x22
 8016094:	6013      	str	r3, [r2, #0]
 8016096:	e5fc      	b.n	8015c92 <_strtod_l+0x44a>
 8016098:	ffc00000 	.word	0xffc00000
 801609c:	41dfffff 	.word	0x41dfffff
 80160a0:	00000000 	.word	0x00000000
 80160a4:	39500000 	.word	0x39500000
 80160a8:	0801b060 	.word	0x0801b060
 80160ac:	fffffc02 	.word	0xfffffc02
 80160b0:	7ff00000 	.word	0x7ff00000
 80160b4:	46d9      	mov	r9, fp
 80160b6:	d15d      	bne.n	8016174 <_strtod_l+0x92c>
 80160b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80160bc:	f1b8 0f00 	cmp.w	r8, #0
 80160c0:	d02a      	beq.n	8016118 <_strtod_l+0x8d0>
 80160c2:	4aa9      	ldr	r2, [pc, #676]	@ (8016368 <_strtod_l+0xb20>)
 80160c4:	4293      	cmp	r3, r2
 80160c6:	d12a      	bne.n	801611e <_strtod_l+0x8d6>
 80160c8:	9b06      	ldr	r3, [sp, #24]
 80160ca:	4652      	mov	r2, sl
 80160cc:	b1fb      	cbz	r3, 801610e <_strtod_l+0x8c6>
 80160ce:	4ba7      	ldr	r3, [pc, #668]	@ (801636c <_strtod_l+0xb24>)
 80160d0:	ea0b 0303 	and.w	r3, fp, r3
 80160d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80160d8:	f04f 31ff 	mov.w	r1, #4294967295
 80160dc:	d81a      	bhi.n	8016114 <_strtod_l+0x8cc>
 80160de:	0d1b      	lsrs	r3, r3, #20
 80160e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80160e4:	fa01 f303 	lsl.w	r3, r1, r3
 80160e8:	429a      	cmp	r2, r3
 80160ea:	d118      	bne.n	801611e <_strtod_l+0x8d6>
 80160ec:	4ba0      	ldr	r3, [pc, #640]	@ (8016370 <_strtod_l+0xb28>)
 80160ee:	4599      	cmp	r9, r3
 80160f0:	d102      	bne.n	80160f8 <_strtod_l+0x8b0>
 80160f2:	3201      	adds	r2, #1
 80160f4:	f43f adc2 	beq.w	8015c7c <_strtod_l+0x434>
 80160f8:	4b9c      	ldr	r3, [pc, #624]	@ (801636c <_strtod_l+0xb24>)
 80160fa:	ea09 0303 	and.w	r3, r9, r3
 80160fe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016102:	f04f 0a00 	mov.w	sl, #0
 8016106:	9b06      	ldr	r3, [sp, #24]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d1b2      	bne.n	8016072 <_strtod_l+0x82a>
 801610c:	e5c1      	b.n	8015c92 <_strtod_l+0x44a>
 801610e:	f04f 33ff 	mov.w	r3, #4294967295
 8016112:	e7e9      	b.n	80160e8 <_strtod_l+0x8a0>
 8016114:	460b      	mov	r3, r1
 8016116:	e7e7      	b.n	80160e8 <_strtod_l+0x8a0>
 8016118:	ea53 030a 	orrs.w	r3, r3, sl
 801611c:	d09b      	beq.n	8016056 <_strtod_l+0x80e>
 801611e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016120:	b1c3      	cbz	r3, 8016154 <_strtod_l+0x90c>
 8016122:	ea13 0f09 	tst.w	r3, r9
 8016126:	d0ee      	beq.n	8016106 <_strtod_l+0x8be>
 8016128:	9a06      	ldr	r2, [sp, #24]
 801612a:	4650      	mov	r0, sl
 801612c:	4659      	mov	r1, fp
 801612e:	f1b8 0f00 	cmp.w	r8, #0
 8016132:	d013      	beq.n	801615c <_strtod_l+0x914>
 8016134:	f7ff fb6d 	bl	8015812 <sulp>
 8016138:	ee39 7b00 	vadd.f64	d7, d9, d0
 801613c:	ec5b ab17 	vmov	sl, fp, d7
 8016140:	e7e1      	b.n	8016106 <_strtod_l+0x8be>
 8016142:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016146:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801614a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801614e:	f04f 3aff 	mov.w	sl, #4294967295
 8016152:	e7d8      	b.n	8016106 <_strtod_l+0x8be>
 8016154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016156:	ea13 0f0a 	tst.w	r3, sl
 801615a:	e7e4      	b.n	8016126 <_strtod_l+0x8de>
 801615c:	f7ff fb59 	bl	8015812 <sulp>
 8016160:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016164:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801616c:	ec5b ab10 	vmov	sl, fp, d0
 8016170:	d1c9      	bne.n	8016106 <_strtod_l+0x8be>
 8016172:	e617      	b.n	8015da4 <_strtod_l+0x55c>
 8016174:	4629      	mov	r1, r5
 8016176:	4620      	mov	r0, r4
 8016178:	f7ff fad8 	bl	801572c <__ratio>
 801617c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016180:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016188:	d85d      	bhi.n	8016246 <_strtod_l+0x9fe>
 801618a:	f1b8 0f00 	cmp.w	r8, #0
 801618e:	d164      	bne.n	801625a <_strtod_l+0xa12>
 8016190:	f1ba 0f00 	cmp.w	sl, #0
 8016194:	d14b      	bne.n	801622e <_strtod_l+0x9e6>
 8016196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801619a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d160      	bne.n	8016264 <_strtod_l+0xa1c>
 80161a2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80161a6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80161aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ae:	d401      	bmi.n	80161b4 <_strtod_l+0x96c>
 80161b0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80161b4:	eeb1 ab48 	vneg.f64	d10, d8
 80161b8:	486c      	ldr	r0, [pc, #432]	@ (801636c <_strtod_l+0xb24>)
 80161ba:	496e      	ldr	r1, [pc, #440]	@ (8016374 <_strtod_l+0xb2c>)
 80161bc:	ea09 0700 	and.w	r7, r9, r0
 80161c0:	428f      	cmp	r7, r1
 80161c2:	ec53 2b1a 	vmov	r2, r3, d10
 80161c6:	d17d      	bne.n	80162c4 <_strtod_l+0xa7c>
 80161c8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80161cc:	ec4b ab1c 	vmov	d12, sl, fp
 80161d0:	eeb0 0b4c 	vmov.f64	d0, d12
 80161d4:	f7ff f9e2 	bl	801559c <__ulp>
 80161d8:	4864      	ldr	r0, [pc, #400]	@ (801636c <_strtod_l+0xb24>)
 80161da:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80161de:	ee1c 3a90 	vmov	r3, s25
 80161e2:	4a65      	ldr	r2, [pc, #404]	@ (8016378 <_strtod_l+0xb30>)
 80161e4:	ea03 0100 	and.w	r1, r3, r0
 80161e8:	4291      	cmp	r1, r2
 80161ea:	ec5b ab1c 	vmov	sl, fp, d12
 80161ee:	d93c      	bls.n	801626a <_strtod_l+0xa22>
 80161f0:	ee19 2a90 	vmov	r2, s19
 80161f4:	4b5e      	ldr	r3, [pc, #376]	@ (8016370 <_strtod_l+0xb28>)
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d104      	bne.n	8016204 <_strtod_l+0x9bc>
 80161fa:	ee19 3a10 	vmov	r3, s18
 80161fe:	3301      	adds	r3, #1
 8016200:	f43f ad3c 	beq.w	8015c7c <_strtod_l+0x434>
 8016204:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8016370 <_strtod_l+0xb28>
 8016208:	f04f 3aff 	mov.w	sl, #4294967295
 801620c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801620e:	9805      	ldr	r0, [sp, #20]
 8016210:	f7fe fe98 	bl	8014f44 <_Bfree>
 8016214:	9805      	ldr	r0, [sp, #20]
 8016216:	4631      	mov	r1, r6
 8016218:	f7fe fe94 	bl	8014f44 <_Bfree>
 801621c:	9805      	ldr	r0, [sp, #20]
 801621e:	4629      	mov	r1, r5
 8016220:	f7fe fe90 	bl	8014f44 <_Bfree>
 8016224:	9805      	ldr	r0, [sp, #20]
 8016226:	4621      	mov	r1, r4
 8016228:	f7fe fe8c 	bl	8014f44 <_Bfree>
 801622c:	e627      	b.n	8015e7e <_strtod_l+0x636>
 801622e:	f1ba 0f01 	cmp.w	sl, #1
 8016232:	d103      	bne.n	801623c <_strtod_l+0x9f4>
 8016234:	f1bb 0f00 	cmp.w	fp, #0
 8016238:	f43f adb4 	beq.w	8015da4 <_strtod_l+0x55c>
 801623c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016240:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016244:	e7b8      	b.n	80161b8 <_strtod_l+0x970>
 8016246:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801624a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801624e:	f1b8 0f00 	cmp.w	r8, #0
 8016252:	d0af      	beq.n	80161b4 <_strtod_l+0x96c>
 8016254:	eeb0 ab48 	vmov.f64	d10, d8
 8016258:	e7ae      	b.n	80161b8 <_strtod_l+0x970>
 801625a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801625e:	eeb0 8b4a 	vmov.f64	d8, d10
 8016262:	e7a9      	b.n	80161b8 <_strtod_l+0x970>
 8016264:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016268:	e7a6      	b.n	80161b8 <_strtod_l+0x970>
 801626a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801626e:	9b06      	ldr	r3, [sp, #24]
 8016270:	46d9      	mov	r9, fp
 8016272:	2b00      	cmp	r3, #0
 8016274:	d1ca      	bne.n	801620c <_strtod_l+0x9c4>
 8016276:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801627a:	0d1b      	lsrs	r3, r3, #20
 801627c:	051b      	lsls	r3, r3, #20
 801627e:	429f      	cmp	r7, r3
 8016280:	d1c4      	bne.n	801620c <_strtod_l+0x9c4>
 8016282:	ec51 0b18 	vmov	r0, r1, d8
 8016286:	f7ea fa07 	bl	8000698 <__aeabi_d2lz>
 801628a:	f7ea f9bf 	bl	800060c <__aeabi_l2d>
 801628e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016292:	ec41 0b17 	vmov	d7, r0, r1
 8016296:	ea49 090a 	orr.w	r9, r9, sl
 801629a:	ea59 0908 	orrs.w	r9, r9, r8
 801629e:	ee38 8b47 	vsub.f64	d8, d8, d7
 80162a2:	d03c      	beq.n	801631e <_strtod_l+0xad6>
 80162a4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016350 <_strtod_l+0xb08>
 80162a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b0:	f53f acef 	bmi.w	8015c92 <_strtod_l+0x44a>
 80162b4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8016358 <_strtod_l+0xb10>
 80162b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c0:	dda4      	ble.n	801620c <_strtod_l+0x9c4>
 80162c2:	e4e6      	b.n	8015c92 <_strtod_l+0x44a>
 80162c4:	9906      	ldr	r1, [sp, #24]
 80162c6:	b1e1      	cbz	r1, 8016302 <_strtod_l+0xaba>
 80162c8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80162cc:	d819      	bhi.n	8016302 <_strtod_l+0xaba>
 80162ce:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80162d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d6:	d811      	bhi.n	80162fc <_strtod_l+0xab4>
 80162d8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80162dc:	ee18 3a10 	vmov	r3, s16
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	bf38      	it	cc
 80162e4:	2301      	movcc	r3, #1
 80162e6:	ee08 3a10 	vmov	s16, r3
 80162ea:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80162ee:	f1b8 0f00 	cmp.w	r8, #0
 80162f2:	d111      	bne.n	8016318 <_strtod_l+0xad0>
 80162f4:	eeb1 7b48 	vneg.f64	d7, d8
 80162f8:	ec53 2b17 	vmov	r2, r3, d7
 80162fc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016300:	1bcb      	subs	r3, r1, r7
 8016302:	eeb0 0b49 	vmov.f64	d0, d9
 8016306:	ec43 2b1a 	vmov	d10, r2, r3
 801630a:	f7ff f947 	bl	801559c <__ulp>
 801630e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016312:	ec5b ab19 	vmov	sl, fp, d9
 8016316:	e7aa      	b.n	801626e <_strtod_l+0xa26>
 8016318:	eeb0 7b48 	vmov.f64	d7, d8
 801631c:	e7ec      	b.n	80162f8 <_strtod_l+0xab0>
 801631e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8016360 <_strtod_l+0xb18>
 8016322:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801632a:	f57f af6f 	bpl.w	801620c <_strtod_l+0x9c4>
 801632e:	e4b0      	b.n	8015c92 <_strtod_l+0x44a>
 8016330:	2300      	movs	r3, #0
 8016332:	9308      	str	r3, [sp, #32]
 8016334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016336:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016338:	6013      	str	r3, [r2, #0]
 801633a:	f7ff bac4 	b.w	80158c6 <_strtod_l+0x7e>
 801633e:	2a65      	cmp	r2, #101	@ 0x65
 8016340:	f43f abbf 	beq.w	8015ac2 <_strtod_l+0x27a>
 8016344:	2a45      	cmp	r2, #69	@ 0x45
 8016346:	f43f abbc 	beq.w	8015ac2 <_strtod_l+0x27a>
 801634a:	2101      	movs	r1, #1
 801634c:	f7ff bbf4 	b.w	8015b38 <_strtod_l+0x2f0>
 8016350:	94a03595 	.word	0x94a03595
 8016354:	3fdfffff 	.word	0x3fdfffff
 8016358:	35afe535 	.word	0x35afe535
 801635c:	3fe00000 	.word	0x3fe00000
 8016360:	94a03595 	.word	0x94a03595
 8016364:	3fcfffff 	.word	0x3fcfffff
 8016368:	000fffff 	.word	0x000fffff
 801636c:	7ff00000 	.word	0x7ff00000
 8016370:	7fefffff 	.word	0x7fefffff
 8016374:	7fe00000 	.word	0x7fe00000
 8016378:	7c9fffff 	.word	0x7c9fffff

0801637c <_strtod_r>:
 801637c:	4b01      	ldr	r3, [pc, #4]	@ (8016384 <_strtod_r+0x8>)
 801637e:	f7ff ba63 	b.w	8015848 <_strtod_l>
 8016382:	bf00      	nop
 8016384:	2000009c 	.word	0x2000009c

08016388 <__ssputs_r>:
 8016388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801638c:	688e      	ldr	r6, [r1, #8]
 801638e:	461f      	mov	r7, r3
 8016390:	42be      	cmp	r6, r7
 8016392:	680b      	ldr	r3, [r1, #0]
 8016394:	4682      	mov	sl, r0
 8016396:	460c      	mov	r4, r1
 8016398:	4690      	mov	r8, r2
 801639a:	d82d      	bhi.n	80163f8 <__ssputs_r+0x70>
 801639c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80163a4:	d026      	beq.n	80163f4 <__ssputs_r+0x6c>
 80163a6:	6965      	ldr	r5, [r4, #20]
 80163a8:	6909      	ldr	r1, [r1, #16]
 80163aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163ae:	eba3 0901 	sub.w	r9, r3, r1
 80163b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80163b6:	1c7b      	adds	r3, r7, #1
 80163b8:	444b      	add	r3, r9
 80163ba:	106d      	asrs	r5, r5, #1
 80163bc:	429d      	cmp	r5, r3
 80163be:	bf38      	it	cc
 80163c0:	461d      	movcc	r5, r3
 80163c2:	0553      	lsls	r3, r2, #21
 80163c4:	d527      	bpl.n	8016416 <__ssputs_r+0x8e>
 80163c6:	4629      	mov	r1, r5
 80163c8:	f7fe fcf0 	bl	8014dac <_malloc_r>
 80163cc:	4606      	mov	r6, r0
 80163ce:	b360      	cbz	r0, 801642a <__ssputs_r+0xa2>
 80163d0:	6921      	ldr	r1, [r4, #16]
 80163d2:	464a      	mov	r2, r9
 80163d4:	f7fd fe5d 	bl	8014092 <memcpy>
 80163d8:	89a3      	ldrh	r3, [r4, #12]
 80163da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80163de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163e2:	81a3      	strh	r3, [r4, #12]
 80163e4:	6126      	str	r6, [r4, #16]
 80163e6:	6165      	str	r5, [r4, #20]
 80163e8:	444e      	add	r6, r9
 80163ea:	eba5 0509 	sub.w	r5, r5, r9
 80163ee:	6026      	str	r6, [r4, #0]
 80163f0:	60a5      	str	r5, [r4, #8]
 80163f2:	463e      	mov	r6, r7
 80163f4:	42be      	cmp	r6, r7
 80163f6:	d900      	bls.n	80163fa <__ssputs_r+0x72>
 80163f8:	463e      	mov	r6, r7
 80163fa:	6820      	ldr	r0, [r4, #0]
 80163fc:	4632      	mov	r2, r6
 80163fe:	4641      	mov	r1, r8
 8016400:	f7fd fd9b 	bl	8013f3a <memmove>
 8016404:	68a3      	ldr	r3, [r4, #8]
 8016406:	1b9b      	subs	r3, r3, r6
 8016408:	60a3      	str	r3, [r4, #8]
 801640a:	6823      	ldr	r3, [r4, #0]
 801640c:	4433      	add	r3, r6
 801640e:	6023      	str	r3, [r4, #0]
 8016410:	2000      	movs	r0, #0
 8016412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016416:	462a      	mov	r2, r5
 8016418:	f000 ff1f 	bl	801725a <_realloc_r>
 801641c:	4606      	mov	r6, r0
 801641e:	2800      	cmp	r0, #0
 8016420:	d1e0      	bne.n	80163e4 <__ssputs_r+0x5c>
 8016422:	6921      	ldr	r1, [r4, #16]
 8016424:	4650      	mov	r0, sl
 8016426:	f7fe fc4d 	bl	8014cc4 <_free_r>
 801642a:	230c      	movs	r3, #12
 801642c:	f8ca 3000 	str.w	r3, [sl]
 8016430:	89a3      	ldrh	r3, [r4, #12]
 8016432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016436:	81a3      	strh	r3, [r4, #12]
 8016438:	f04f 30ff 	mov.w	r0, #4294967295
 801643c:	e7e9      	b.n	8016412 <__ssputs_r+0x8a>
	...

08016440 <_svfiprintf_r>:
 8016440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016444:	4698      	mov	r8, r3
 8016446:	898b      	ldrh	r3, [r1, #12]
 8016448:	061b      	lsls	r3, r3, #24
 801644a:	b09d      	sub	sp, #116	@ 0x74
 801644c:	4607      	mov	r7, r0
 801644e:	460d      	mov	r5, r1
 8016450:	4614      	mov	r4, r2
 8016452:	d510      	bpl.n	8016476 <_svfiprintf_r+0x36>
 8016454:	690b      	ldr	r3, [r1, #16]
 8016456:	b973      	cbnz	r3, 8016476 <_svfiprintf_r+0x36>
 8016458:	2140      	movs	r1, #64	@ 0x40
 801645a:	f7fe fca7 	bl	8014dac <_malloc_r>
 801645e:	6028      	str	r0, [r5, #0]
 8016460:	6128      	str	r0, [r5, #16]
 8016462:	b930      	cbnz	r0, 8016472 <_svfiprintf_r+0x32>
 8016464:	230c      	movs	r3, #12
 8016466:	603b      	str	r3, [r7, #0]
 8016468:	f04f 30ff 	mov.w	r0, #4294967295
 801646c:	b01d      	add	sp, #116	@ 0x74
 801646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016472:	2340      	movs	r3, #64	@ 0x40
 8016474:	616b      	str	r3, [r5, #20]
 8016476:	2300      	movs	r3, #0
 8016478:	9309      	str	r3, [sp, #36]	@ 0x24
 801647a:	2320      	movs	r3, #32
 801647c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016480:	f8cd 800c 	str.w	r8, [sp, #12]
 8016484:	2330      	movs	r3, #48	@ 0x30
 8016486:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016624 <_svfiprintf_r+0x1e4>
 801648a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801648e:	f04f 0901 	mov.w	r9, #1
 8016492:	4623      	mov	r3, r4
 8016494:	469a      	mov	sl, r3
 8016496:	f813 2b01 	ldrb.w	r2, [r3], #1
 801649a:	b10a      	cbz	r2, 80164a0 <_svfiprintf_r+0x60>
 801649c:	2a25      	cmp	r2, #37	@ 0x25
 801649e:	d1f9      	bne.n	8016494 <_svfiprintf_r+0x54>
 80164a0:	ebba 0b04 	subs.w	fp, sl, r4
 80164a4:	d00b      	beq.n	80164be <_svfiprintf_r+0x7e>
 80164a6:	465b      	mov	r3, fp
 80164a8:	4622      	mov	r2, r4
 80164aa:	4629      	mov	r1, r5
 80164ac:	4638      	mov	r0, r7
 80164ae:	f7ff ff6b 	bl	8016388 <__ssputs_r>
 80164b2:	3001      	adds	r0, #1
 80164b4:	f000 80a7 	beq.w	8016606 <_svfiprintf_r+0x1c6>
 80164b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164ba:	445a      	add	r2, fp
 80164bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80164be:	f89a 3000 	ldrb.w	r3, [sl]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f000 809f 	beq.w	8016606 <_svfiprintf_r+0x1c6>
 80164c8:	2300      	movs	r3, #0
 80164ca:	f04f 32ff 	mov.w	r2, #4294967295
 80164ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164d2:	f10a 0a01 	add.w	sl, sl, #1
 80164d6:	9304      	str	r3, [sp, #16]
 80164d8:	9307      	str	r3, [sp, #28]
 80164da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164de:	931a      	str	r3, [sp, #104]	@ 0x68
 80164e0:	4654      	mov	r4, sl
 80164e2:	2205      	movs	r2, #5
 80164e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164e8:	484e      	ldr	r0, [pc, #312]	@ (8016624 <_svfiprintf_r+0x1e4>)
 80164ea:	f7e9 fea9 	bl	8000240 <memchr>
 80164ee:	9a04      	ldr	r2, [sp, #16]
 80164f0:	b9d8      	cbnz	r0, 801652a <_svfiprintf_r+0xea>
 80164f2:	06d0      	lsls	r0, r2, #27
 80164f4:	bf44      	itt	mi
 80164f6:	2320      	movmi	r3, #32
 80164f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164fc:	0711      	lsls	r1, r2, #28
 80164fe:	bf44      	itt	mi
 8016500:	232b      	movmi	r3, #43	@ 0x2b
 8016502:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016506:	f89a 3000 	ldrb.w	r3, [sl]
 801650a:	2b2a      	cmp	r3, #42	@ 0x2a
 801650c:	d015      	beq.n	801653a <_svfiprintf_r+0xfa>
 801650e:	9a07      	ldr	r2, [sp, #28]
 8016510:	4654      	mov	r4, sl
 8016512:	2000      	movs	r0, #0
 8016514:	f04f 0c0a 	mov.w	ip, #10
 8016518:	4621      	mov	r1, r4
 801651a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801651e:	3b30      	subs	r3, #48	@ 0x30
 8016520:	2b09      	cmp	r3, #9
 8016522:	d94b      	bls.n	80165bc <_svfiprintf_r+0x17c>
 8016524:	b1b0      	cbz	r0, 8016554 <_svfiprintf_r+0x114>
 8016526:	9207      	str	r2, [sp, #28]
 8016528:	e014      	b.n	8016554 <_svfiprintf_r+0x114>
 801652a:	eba0 0308 	sub.w	r3, r0, r8
 801652e:	fa09 f303 	lsl.w	r3, r9, r3
 8016532:	4313      	orrs	r3, r2
 8016534:	9304      	str	r3, [sp, #16]
 8016536:	46a2      	mov	sl, r4
 8016538:	e7d2      	b.n	80164e0 <_svfiprintf_r+0xa0>
 801653a:	9b03      	ldr	r3, [sp, #12]
 801653c:	1d19      	adds	r1, r3, #4
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	9103      	str	r1, [sp, #12]
 8016542:	2b00      	cmp	r3, #0
 8016544:	bfbb      	ittet	lt
 8016546:	425b      	neglt	r3, r3
 8016548:	f042 0202 	orrlt.w	r2, r2, #2
 801654c:	9307      	strge	r3, [sp, #28]
 801654e:	9307      	strlt	r3, [sp, #28]
 8016550:	bfb8      	it	lt
 8016552:	9204      	strlt	r2, [sp, #16]
 8016554:	7823      	ldrb	r3, [r4, #0]
 8016556:	2b2e      	cmp	r3, #46	@ 0x2e
 8016558:	d10a      	bne.n	8016570 <_svfiprintf_r+0x130>
 801655a:	7863      	ldrb	r3, [r4, #1]
 801655c:	2b2a      	cmp	r3, #42	@ 0x2a
 801655e:	d132      	bne.n	80165c6 <_svfiprintf_r+0x186>
 8016560:	9b03      	ldr	r3, [sp, #12]
 8016562:	1d1a      	adds	r2, r3, #4
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	9203      	str	r2, [sp, #12]
 8016568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801656c:	3402      	adds	r4, #2
 801656e:	9305      	str	r3, [sp, #20]
 8016570:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016634 <_svfiprintf_r+0x1f4>
 8016574:	7821      	ldrb	r1, [r4, #0]
 8016576:	2203      	movs	r2, #3
 8016578:	4650      	mov	r0, sl
 801657a:	f7e9 fe61 	bl	8000240 <memchr>
 801657e:	b138      	cbz	r0, 8016590 <_svfiprintf_r+0x150>
 8016580:	9b04      	ldr	r3, [sp, #16]
 8016582:	eba0 000a 	sub.w	r0, r0, sl
 8016586:	2240      	movs	r2, #64	@ 0x40
 8016588:	4082      	lsls	r2, r0
 801658a:	4313      	orrs	r3, r2
 801658c:	3401      	adds	r4, #1
 801658e:	9304      	str	r3, [sp, #16]
 8016590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016594:	4824      	ldr	r0, [pc, #144]	@ (8016628 <_svfiprintf_r+0x1e8>)
 8016596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801659a:	2206      	movs	r2, #6
 801659c:	f7e9 fe50 	bl	8000240 <memchr>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d036      	beq.n	8016612 <_svfiprintf_r+0x1d2>
 80165a4:	4b21      	ldr	r3, [pc, #132]	@ (801662c <_svfiprintf_r+0x1ec>)
 80165a6:	bb1b      	cbnz	r3, 80165f0 <_svfiprintf_r+0x1b0>
 80165a8:	9b03      	ldr	r3, [sp, #12]
 80165aa:	3307      	adds	r3, #7
 80165ac:	f023 0307 	bic.w	r3, r3, #7
 80165b0:	3308      	adds	r3, #8
 80165b2:	9303      	str	r3, [sp, #12]
 80165b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165b6:	4433      	add	r3, r6
 80165b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80165ba:	e76a      	b.n	8016492 <_svfiprintf_r+0x52>
 80165bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80165c0:	460c      	mov	r4, r1
 80165c2:	2001      	movs	r0, #1
 80165c4:	e7a8      	b.n	8016518 <_svfiprintf_r+0xd8>
 80165c6:	2300      	movs	r3, #0
 80165c8:	3401      	adds	r4, #1
 80165ca:	9305      	str	r3, [sp, #20]
 80165cc:	4619      	mov	r1, r3
 80165ce:	f04f 0c0a 	mov.w	ip, #10
 80165d2:	4620      	mov	r0, r4
 80165d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165d8:	3a30      	subs	r2, #48	@ 0x30
 80165da:	2a09      	cmp	r2, #9
 80165dc:	d903      	bls.n	80165e6 <_svfiprintf_r+0x1a6>
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d0c6      	beq.n	8016570 <_svfiprintf_r+0x130>
 80165e2:	9105      	str	r1, [sp, #20]
 80165e4:	e7c4      	b.n	8016570 <_svfiprintf_r+0x130>
 80165e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80165ea:	4604      	mov	r4, r0
 80165ec:	2301      	movs	r3, #1
 80165ee:	e7f0      	b.n	80165d2 <_svfiprintf_r+0x192>
 80165f0:	ab03      	add	r3, sp, #12
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	462a      	mov	r2, r5
 80165f6:	4b0e      	ldr	r3, [pc, #56]	@ (8016630 <_svfiprintf_r+0x1f0>)
 80165f8:	a904      	add	r1, sp, #16
 80165fa:	4638      	mov	r0, r7
 80165fc:	f7fc fda8 	bl	8013150 <_printf_float>
 8016600:	1c42      	adds	r2, r0, #1
 8016602:	4606      	mov	r6, r0
 8016604:	d1d6      	bne.n	80165b4 <_svfiprintf_r+0x174>
 8016606:	89ab      	ldrh	r3, [r5, #12]
 8016608:	065b      	lsls	r3, r3, #25
 801660a:	f53f af2d 	bmi.w	8016468 <_svfiprintf_r+0x28>
 801660e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016610:	e72c      	b.n	801646c <_svfiprintf_r+0x2c>
 8016612:	ab03      	add	r3, sp, #12
 8016614:	9300      	str	r3, [sp, #0]
 8016616:	462a      	mov	r2, r5
 8016618:	4b05      	ldr	r3, [pc, #20]	@ (8016630 <_svfiprintf_r+0x1f0>)
 801661a:	a904      	add	r1, sp, #16
 801661c:	4638      	mov	r0, r7
 801661e:	f7fd f81f 	bl	8013660 <_printf_i>
 8016622:	e7ed      	b.n	8016600 <_svfiprintf_r+0x1c0>
 8016624:	0801adbb 	.word	0x0801adbb
 8016628:	0801adc5 	.word	0x0801adc5
 801662c:	08013151 	.word	0x08013151
 8016630:	08016389 	.word	0x08016389
 8016634:	0801adc1 	.word	0x0801adc1

08016638 <__sfputc_r>:
 8016638:	6893      	ldr	r3, [r2, #8]
 801663a:	3b01      	subs	r3, #1
 801663c:	2b00      	cmp	r3, #0
 801663e:	b410      	push	{r4}
 8016640:	6093      	str	r3, [r2, #8]
 8016642:	da08      	bge.n	8016656 <__sfputc_r+0x1e>
 8016644:	6994      	ldr	r4, [r2, #24]
 8016646:	42a3      	cmp	r3, r4
 8016648:	db01      	blt.n	801664e <__sfputc_r+0x16>
 801664a:	290a      	cmp	r1, #10
 801664c:	d103      	bne.n	8016656 <__sfputc_r+0x1e>
 801664e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016652:	f000 b9f1 	b.w	8016a38 <__swbuf_r>
 8016656:	6813      	ldr	r3, [r2, #0]
 8016658:	1c58      	adds	r0, r3, #1
 801665a:	6010      	str	r0, [r2, #0]
 801665c:	7019      	strb	r1, [r3, #0]
 801665e:	4608      	mov	r0, r1
 8016660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016664:	4770      	bx	lr

08016666 <__sfputs_r>:
 8016666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016668:	4606      	mov	r6, r0
 801666a:	460f      	mov	r7, r1
 801666c:	4614      	mov	r4, r2
 801666e:	18d5      	adds	r5, r2, r3
 8016670:	42ac      	cmp	r4, r5
 8016672:	d101      	bne.n	8016678 <__sfputs_r+0x12>
 8016674:	2000      	movs	r0, #0
 8016676:	e007      	b.n	8016688 <__sfputs_r+0x22>
 8016678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801667c:	463a      	mov	r2, r7
 801667e:	4630      	mov	r0, r6
 8016680:	f7ff ffda 	bl	8016638 <__sfputc_r>
 8016684:	1c43      	adds	r3, r0, #1
 8016686:	d1f3      	bne.n	8016670 <__sfputs_r+0xa>
 8016688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801668c <_vfiprintf_r>:
 801668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016690:	460d      	mov	r5, r1
 8016692:	b09d      	sub	sp, #116	@ 0x74
 8016694:	4614      	mov	r4, r2
 8016696:	4698      	mov	r8, r3
 8016698:	4606      	mov	r6, r0
 801669a:	b118      	cbz	r0, 80166a4 <_vfiprintf_r+0x18>
 801669c:	6a03      	ldr	r3, [r0, #32]
 801669e:	b90b      	cbnz	r3, 80166a4 <_vfiprintf_r+0x18>
 80166a0:	f7fd fb8e 	bl	8013dc0 <__sinit>
 80166a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166a6:	07d9      	lsls	r1, r3, #31
 80166a8:	d405      	bmi.n	80166b6 <_vfiprintf_r+0x2a>
 80166aa:	89ab      	ldrh	r3, [r5, #12]
 80166ac:	059a      	lsls	r2, r3, #22
 80166ae:	d402      	bmi.n	80166b6 <_vfiprintf_r+0x2a>
 80166b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166b2:	f7fd fcec 	bl	801408e <__retarget_lock_acquire_recursive>
 80166b6:	89ab      	ldrh	r3, [r5, #12]
 80166b8:	071b      	lsls	r3, r3, #28
 80166ba:	d501      	bpl.n	80166c0 <_vfiprintf_r+0x34>
 80166bc:	692b      	ldr	r3, [r5, #16]
 80166be:	b99b      	cbnz	r3, 80166e8 <_vfiprintf_r+0x5c>
 80166c0:	4629      	mov	r1, r5
 80166c2:	4630      	mov	r0, r6
 80166c4:	f000 f9f6 	bl	8016ab4 <__swsetup_r>
 80166c8:	b170      	cbz	r0, 80166e8 <_vfiprintf_r+0x5c>
 80166ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166cc:	07dc      	lsls	r4, r3, #31
 80166ce:	d504      	bpl.n	80166da <_vfiprintf_r+0x4e>
 80166d0:	f04f 30ff 	mov.w	r0, #4294967295
 80166d4:	b01d      	add	sp, #116	@ 0x74
 80166d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166da:	89ab      	ldrh	r3, [r5, #12]
 80166dc:	0598      	lsls	r0, r3, #22
 80166de:	d4f7      	bmi.n	80166d0 <_vfiprintf_r+0x44>
 80166e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166e2:	f7fd fcd5 	bl	8014090 <__retarget_lock_release_recursive>
 80166e6:	e7f3      	b.n	80166d0 <_vfiprintf_r+0x44>
 80166e8:	2300      	movs	r3, #0
 80166ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80166ec:	2320      	movs	r3, #32
 80166ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80166f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80166f6:	2330      	movs	r3, #48	@ 0x30
 80166f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80168a8 <_vfiprintf_r+0x21c>
 80166fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016700:	f04f 0901 	mov.w	r9, #1
 8016704:	4623      	mov	r3, r4
 8016706:	469a      	mov	sl, r3
 8016708:	f813 2b01 	ldrb.w	r2, [r3], #1
 801670c:	b10a      	cbz	r2, 8016712 <_vfiprintf_r+0x86>
 801670e:	2a25      	cmp	r2, #37	@ 0x25
 8016710:	d1f9      	bne.n	8016706 <_vfiprintf_r+0x7a>
 8016712:	ebba 0b04 	subs.w	fp, sl, r4
 8016716:	d00b      	beq.n	8016730 <_vfiprintf_r+0xa4>
 8016718:	465b      	mov	r3, fp
 801671a:	4622      	mov	r2, r4
 801671c:	4629      	mov	r1, r5
 801671e:	4630      	mov	r0, r6
 8016720:	f7ff ffa1 	bl	8016666 <__sfputs_r>
 8016724:	3001      	adds	r0, #1
 8016726:	f000 80a7 	beq.w	8016878 <_vfiprintf_r+0x1ec>
 801672a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801672c:	445a      	add	r2, fp
 801672e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016730:	f89a 3000 	ldrb.w	r3, [sl]
 8016734:	2b00      	cmp	r3, #0
 8016736:	f000 809f 	beq.w	8016878 <_vfiprintf_r+0x1ec>
 801673a:	2300      	movs	r3, #0
 801673c:	f04f 32ff 	mov.w	r2, #4294967295
 8016740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016744:	f10a 0a01 	add.w	sl, sl, #1
 8016748:	9304      	str	r3, [sp, #16]
 801674a:	9307      	str	r3, [sp, #28]
 801674c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016750:	931a      	str	r3, [sp, #104]	@ 0x68
 8016752:	4654      	mov	r4, sl
 8016754:	2205      	movs	r2, #5
 8016756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801675a:	4853      	ldr	r0, [pc, #332]	@ (80168a8 <_vfiprintf_r+0x21c>)
 801675c:	f7e9 fd70 	bl	8000240 <memchr>
 8016760:	9a04      	ldr	r2, [sp, #16]
 8016762:	b9d8      	cbnz	r0, 801679c <_vfiprintf_r+0x110>
 8016764:	06d1      	lsls	r1, r2, #27
 8016766:	bf44      	itt	mi
 8016768:	2320      	movmi	r3, #32
 801676a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801676e:	0713      	lsls	r3, r2, #28
 8016770:	bf44      	itt	mi
 8016772:	232b      	movmi	r3, #43	@ 0x2b
 8016774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016778:	f89a 3000 	ldrb.w	r3, [sl]
 801677c:	2b2a      	cmp	r3, #42	@ 0x2a
 801677e:	d015      	beq.n	80167ac <_vfiprintf_r+0x120>
 8016780:	9a07      	ldr	r2, [sp, #28]
 8016782:	4654      	mov	r4, sl
 8016784:	2000      	movs	r0, #0
 8016786:	f04f 0c0a 	mov.w	ip, #10
 801678a:	4621      	mov	r1, r4
 801678c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016790:	3b30      	subs	r3, #48	@ 0x30
 8016792:	2b09      	cmp	r3, #9
 8016794:	d94b      	bls.n	801682e <_vfiprintf_r+0x1a2>
 8016796:	b1b0      	cbz	r0, 80167c6 <_vfiprintf_r+0x13a>
 8016798:	9207      	str	r2, [sp, #28]
 801679a:	e014      	b.n	80167c6 <_vfiprintf_r+0x13a>
 801679c:	eba0 0308 	sub.w	r3, r0, r8
 80167a0:	fa09 f303 	lsl.w	r3, r9, r3
 80167a4:	4313      	orrs	r3, r2
 80167a6:	9304      	str	r3, [sp, #16]
 80167a8:	46a2      	mov	sl, r4
 80167aa:	e7d2      	b.n	8016752 <_vfiprintf_r+0xc6>
 80167ac:	9b03      	ldr	r3, [sp, #12]
 80167ae:	1d19      	adds	r1, r3, #4
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	9103      	str	r1, [sp, #12]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	bfbb      	ittet	lt
 80167b8:	425b      	neglt	r3, r3
 80167ba:	f042 0202 	orrlt.w	r2, r2, #2
 80167be:	9307      	strge	r3, [sp, #28]
 80167c0:	9307      	strlt	r3, [sp, #28]
 80167c2:	bfb8      	it	lt
 80167c4:	9204      	strlt	r2, [sp, #16]
 80167c6:	7823      	ldrb	r3, [r4, #0]
 80167c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80167ca:	d10a      	bne.n	80167e2 <_vfiprintf_r+0x156>
 80167cc:	7863      	ldrb	r3, [r4, #1]
 80167ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80167d0:	d132      	bne.n	8016838 <_vfiprintf_r+0x1ac>
 80167d2:	9b03      	ldr	r3, [sp, #12]
 80167d4:	1d1a      	adds	r2, r3, #4
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	9203      	str	r2, [sp, #12]
 80167da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80167de:	3402      	adds	r4, #2
 80167e0:	9305      	str	r3, [sp, #20]
 80167e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80168b8 <_vfiprintf_r+0x22c>
 80167e6:	7821      	ldrb	r1, [r4, #0]
 80167e8:	2203      	movs	r2, #3
 80167ea:	4650      	mov	r0, sl
 80167ec:	f7e9 fd28 	bl	8000240 <memchr>
 80167f0:	b138      	cbz	r0, 8016802 <_vfiprintf_r+0x176>
 80167f2:	9b04      	ldr	r3, [sp, #16]
 80167f4:	eba0 000a 	sub.w	r0, r0, sl
 80167f8:	2240      	movs	r2, #64	@ 0x40
 80167fa:	4082      	lsls	r2, r0
 80167fc:	4313      	orrs	r3, r2
 80167fe:	3401      	adds	r4, #1
 8016800:	9304      	str	r3, [sp, #16]
 8016802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016806:	4829      	ldr	r0, [pc, #164]	@ (80168ac <_vfiprintf_r+0x220>)
 8016808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801680c:	2206      	movs	r2, #6
 801680e:	f7e9 fd17 	bl	8000240 <memchr>
 8016812:	2800      	cmp	r0, #0
 8016814:	d03f      	beq.n	8016896 <_vfiprintf_r+0x20a>
 8016816:	4b26      	ldr	r3, [pc, #152]	@ (80168b0 <_vfiprintf_r+0x224>)
 8016818:	bb1b      	cbnz	r3, 8016862 <_vfiprintf_r+0x1d6>
 801681a:	9b03      	ldr	r3, [sp, #12]
 801681c:	3307      	adds	r3, #7
 801681e:	f023 0307 	bic.w	r3, r3, #7
 8016822:	3308      	adds	r3, #8
 8016824:	9303      	str	r3, [sp, #12]
 8016826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016828:	443b      	add	r3, r7
 801682a:	9309      	str	r3, [sp, #36]	@ 0x24
 801682c:	e76a      	b.n	8016704 <_vfiprintf_r+0x78>
 801682e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016832:	460c      	mov	r4, r1
 8016834:	2001      	movs	r0, #1
 8016836:	e7a8      	b.n	801678a <_vfiprintf_r+0xfe>
 8016838:	2300      	movs	r3, #0
 801683a:	3401      	adds	r4, #1
 801683c:	9305      	str	r3, [sp, #20]
 801683e:	4619      	mov	r1, r3
 8016840:	f04f 0c0a 	mov.w	ip, #10
 8016844:	4620      	mov	r0, r4
 8016846:	f810 2b01 	ldrb.w	r2, [r0], #1
 801684a:	3a30      	subs	r2, #48	@ 0x30
 801684c:	2a09      	cmp	r2, #9
 801684e:	d903      	bls.n	8016858 <_vfiprintf_r+0x1cc>
 8016850:	2b00      	cmp	r3, #0
 8016852:	d0c6      	beq.n	80167e2 <_vfiprintf_r+0x156>
 8016854:	9105      	str	r1, [sp, #20]
 8016856:	e7c4      	b.n	80167e2 <_vfiprintf_r+0x156>
 8016858:	fb0c 2101 	mla	r1, ip, r1, r2
 801685c:	4604      	mov	r4, r0
 801685e:	2301      	movs	r3, #1
 8016860:	e7f0      	b.n	8016844 <_vfiprintf_r+0x1b8>
 8016862:	ab03      	add	r3, sp, #12
 8016864:	9300      	str	r3, [sp, #0]
 8016866:	462a      	mov	r2, r5
 8016868:	4b12      	ldr	r3, [pc, #72]	@ (80168b4 <_vfiprintf_r+0x228>)
 801686a:	a904      	add	r1, sp, #16
 801686c:	4630      	mov	r0, r6
 801686e:	f7fc fc6f 	bl	8013150 <_printf_float>
 8016872:	4607      	mov	r7, r0
 8016874:	1c78      	adds	r0, r7, #1
 8016876:	d1d6      	bne.n	8016826 <_vfiprintf_r+0x19a>
 8016878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801687a:	07d9      	lsls	r1, r3, #31
 801687c:	d405      	bmi.n	801688a <_vfiprintf_r+0x1fe>
 801687e:	89ab      	ldrh	r3, [r5, #12]
 8016880:	059a      	lsls	r2, r3, #22
 8016882:	d402      	bmi.n	801688a <_vfiprintf_r+0x1fe>
 8016884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016886:	f7fd fc03 	bl	8014090 <__retarget_lock_release_recursive>
 801688a:	89ab      	ldrh	r3, [r5, #12]
 801688c:	065b      	lsls	r3, r3, #25
 801688e:	f53f af1f 	bmi.w	80166d0 <_vfiprintf_r+0x44>
 8016892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016894:	e71e      	b.n	80166d4 <_vfiprintf_r+0x48>
 8016896:	ab03      	add	r3, sp, #12
 8016898:	9300      	str	r3, [sp, #0]
 801689a:	462a      	mov	r2, r5
 801689c:	4b05      	ldr	r3, [pc, #20]	@ (80168b4 <_vfiprintf_r+0x228>)
 801689e:	a904      	add	r1, sp, #16
 80168a0:	4630      	mov	r0, r6
 80168a2:	f7fc fedd 	bl	8013660 <_printf_i>
 80168a6:	e7e4      	b.n	8016872 <_vfiprintf_r+0x1e6>
 80168a8:	0801adbb 	.word	0x0801adbb
 80168ac:	0801adc5 	.word	0x0801adc5
 80168b0:	08013151 	.word	0x08013151
 80168b4:	08016667 	.word	0x08016667
 80168b8:	0801adc1 	.word	0x0801adc1

080168bc <__sflush_r>:
 80168bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80168c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168c4:	0716      	lsls	r6, r2, #28
 80168c6:	4605      	mov	r5, r0
 80168c8:	460c      	mov	r4, r1
 80168ca:	d454      	bmi.n	8016976 <__sflush_r+0xba>
 80168cc:	684b      	ldr	r3, [r1, #4]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	dc02      	bgt.n	80168d8 <__sflush_r+0x1c>
 80168d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	dd48      	ble.n	801696a <__sflush_r+0xae>
 80168d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168da:	2e00      	cmp	r6, #0
 80168dc:	d045      	beq.n	801696a <__sflush_r+0xae>
 80168de:	2300      	movs	r3, #0
 80168e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80168e4:	682f      	ldr	r7, [r5, #0]
 80168e6:	6a21      	ldr	r1, [r4, #32]
 80168e8:	602b      	str	r3, [r5, #0]
 80168ea:	d030      	beq.n	801694e <__sflush_r+0x92>
 80168ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80168ee:	89a3      	ldrh	r3, [r4, #12]
 80168f0:	0759      	lsls	r1, r3, #29
 80168f2:	d505      	bpl.n	8016900 <__sflush_r+0x44>
 80168f4:	6863      	ldr	r3, [r4, #4]
 80168f6:	1ad2      	subs	r2, r2, r3
 80168f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80168fa:	b10b      	cbz	r3, 8016900 <__sflush_r+0x44>
 80168fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80168fe:	1ad2      	subs	r2, r2, r3
 8016900:	2300      	movs	r3, #0
 8016902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016904:	6a21      	ldr	r1, [r4, #32]
 8016906:	4628      	mov	r0, r5
 8016908:	47b0      	blx	r6
 801690a:	1c43      	adds	r3, r0, #1
 801690c:	89a3      	ldrh	r3, [r4, #12]
 801690e:	d106      	bne.n	801691e <__sflush_r+0x62>
 8016910:	6829      	ldr	r1, [r5, #0]
 8016912:	291d      	cmp	r1, #29
 8016914:	d82b      	bhi.n	801696e <__sflush_r+0xb2>
 8016916:	4a2a      	ldr	r2, [pc, #168]	@ (80169c0 <__sflush_r+0x104>)
 8016918:	40ca      	lsrs	r2, r1
 801691a:	07d6      	lsls	r6, r2, #31
 801691c:	d527      	bpl.n	801696e <__sflush_r+0xb2>
 801691e:	2200      	movs	r2, #0
 8016920:	6062      	str	r2, [r4, #4]
 8016922:	04d9      	lsls	r1, r3, #19
 8016924:	6922      	ldr	r2, [r4, #16]
 8016926:	6022      	str	r2, [r4, #0]
 8016928:	d504      	bpl.n	8016934 <__sflush_r+0x78>
 801692a:	1c42      	adds	r2, r0, #1
 801692c:	d101      	bne.n	8016932 <__sflush_r+0x76>
 801692e:	682b      	ldr	r3, [r5, #0]
 8016930:	b903      	cbnz	r3, 8016934 <__sflush_r+0x78>
 8016932:	6560      	str	r0, [r4, #84]	@ 0x54
 8016934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016936:	602f      	str	r7, [r5, #0]
 8016938:	b1b9      	cbz	r1, 801696a <__sflush_r+0xae>
 801693a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801693e:	4299      	cmp	r1, r3
 8016940:	d002      	beq.n	8016948 <__sflush_r+0x8c>
 8016942:	4628      	mov	r0, r5
 8016944:	f7fe f9be 	bl	8014cc4 <_free_r>
 8016948:	2300      	movs	r3, #0
 801694a:	6363      	str	r3, [r4, #52]	@ 0x34
 801694c:	e00d      	b.n	801696a <__sflush_r+0xae>
 801694e:	2301      	movs	r3, #1
 8016950:	4628      	mov	r0, r5
 8016952:	47b0      	blx	r6
 8016954:	4602      	mov	r2, r0
 8016956:	1c50      	adds	r0, r2, #1
 8016958:	d1c9      	bne.n	80168ee <__sflush_r+0x32>
 801695a:	682b      	ldr	r3, [r5, #0]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d0c6      	beq.n	80168ee <__sflush_r+0x32>
 8016960:	2b1d      	cmp	r3, #29
 8016962:	d001      	beq.n	8016968 <__sflush_r+0xac>
 8016964:	2b16      	cmp	r3, #22
 8016966:	d11e      	bne.n	80169a6 <__sflush_r+0xea>
 8016968:	602f      	str	r7, [r5, #0]
 801696a:	2000      	movs	r0, #0
 801696c:	e022      	b.n	80169b4 <__sflush_r+0xf8>
 801696e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016972:	b21b      	sxth	r3, r3
 8016974:	e01b      	b.n	80169ae <__sflush_r+0xf2>
 8016976:	690f      	ldr	r7, [r1, #16]
 8016978:	2f00      	cmp	r7, #0
 801697a:	d0f6      	beq.n	801696a <__sflush_r+0xae>
 801697c:	0793      	lsls	r3, r2, #30
 801697e:	680e      	ldr	r6, [r1, #0]
 8016980:	bf08      	it	eq
 8016982:	694b      	ldreq	r3, [r1, #20]
 8016984:	600f      	str	r7, [r1, #0]
 8016986:	bf18      	it	ne
 8016988:	2300      	movne	r3, #0
 801698a:	eba6 0807 	sub.w	r8, r6, r7
 801698e:	608b      	str	r3, [r1, #8]
 8016990:	f1b8 0f00 	cmp.w	r8, #0
 8016994:	dde9      	ble.n	801696a <__sflush_r+0xae>
 8016996:	6a21      	ldr	r1, [r4, #32]
 8016998:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801699a:	4643      	mov	r3, r8
 801699c:	463a      	mov	r2, r7
 801699e:	4628      	mov	r0, r5
 80169a0:	47b0      	blx	r6
 80169a2:	2800      	cmp	r0, #0
 80169a4:	dc08      	bgt.n	80169b8 <__sflush_r+0xfc>
 80169a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169ae:	81a3      	strh	r3, [r4, #12]
 80169b0:	f04f 30ff 	mov.w	r0, #4294967295
 80169b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b8:	4407      	add	r7, r0
 80169ba:	eba8 0800 	sub.w	r8, r8, r0
 80169be:	e7e7      	b.n	8016990 <__sflush_r+0xd4>
 80169c0:	20400001 	.word	0x20400001

080169c4 <_fflush_r>:
 80169c4:	b538      	push	{r3, r4, r5, lr}
 80169c6:	690b      	ldr	r3, [r1, #16]
 80169c8:	4605      	mov	r5, r0
 80169ca:	460c      	mov	r4, r1
 80169cc:	b913      	cbnz	r3, 80169d4 <_fflush_r+0x10>
 80169ce:	2500      	movs	r5, #0
 80169d0:	4628      	mov	r0, r5
 80169d2:	bd38      	pop	{r3, r4, r5, pc}
 80169d4:	b118      	cbz	r0, 80169de <_fflush_r+0x1a>
 80169d6:	6a03      	ldr	r3, [r0, #32]
 80169d8:	b90b      	cbnz	r3, 80169de <_fflush_r+0x1a>
 80169da:	f7fd f9f1 	bl	8013dc0 <__sinit>
 80169de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d0f3      	beq.n	80169ce <_fflush_r+0xa>
 80169e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80169e8:	07d0      	lsls	r0, r2, #31
 80169ea:	d404      	bmi.n	80169f6 <_fflush_r+0x32>
 80169ec:	0599      	lsls	r1, r3, #22
 80169ee:	d402      	bmi.n	80169f6 <_fflush_r+0x32>
 80169f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169f2:	f7fd fb4c 	bl	801408e <__retarget_lock_acquire_recursive>
 80169f6:	4628      	mov	r0, r5
 80169f8:	4621      	mov	r1, r4
 80169fa:	f7ff ff5f 	bl	80168bc <__sflush_r>
 80169fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a00:	07da      	lsls	r2, r3, #31
 8016a02:	4605      	mov	r5, r0
 8016a04:	d4e4      	bmi.n	80169d0 <_fflush_r+0xc>
 8016a06:	89a3      	ldrh	r3, [r4, #12]
 8016a08:	059b      	lsls	r3, r3, #22
 8016a0a:	d4e1      	bmi.n	80169d0 <_fflush_r+0xc>
 8016a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a0e:	f7fd fb3f 	bl	8014090 <__retarget_lock_release_recursive>
 8016a12:	e7dd      	b.n	80169d0 <_fflush_r+0xc>

08016a14 <fiprintf>:
 8016a14:	b40e      	push	{r1, r2, r3}
 8016a16:	b503      	push	{r0, r1, lr}
 8016a18:	4601      	mov	r1, r0
 8016a1a:	ab03      	add	r3, sp, #12
 8016a1c:	4805      	ldr	r0, [pc, #20]	@ (8016a34 <fiprintf+0x20>)
 8016a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a22:	6800      	ldr	r0, [r0, #0]
 8016a24:	9301      	str	r3, [sp, #4]
 8016a26:	f7ff fe31 	bl	801668c <_vfiprintf_r>
 8016a2a:	b002      	add	sp, #8
 8016a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a30:	b003      	add	sp, #12
 8016a32:	4770      	bx	lr
 8016a34:	2000004c 	.word	0x2000004c

08016a38 <__swbuf_r>:
 8016a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a3a:	460e      	mov	r6, r1
 8016a3c:	4614      	mov	r4, r2
 8016a3e:	4605      	mov	r5, r0
 8016a40:	b118      	cbz	r0, 8016a4a <__swbuf_r+0x12>
 8016a42:	6a03      	ldr	r3, [r0, #32]
 8016a44:	b90b      	cbnz	r3, 8016a4a <__swbuf_r+0x12>
 8016a46:	f7fd f9bb 	bl	8013dc0 <__sinit>
 8016a4a:	69a3      	ldr	r3, [r4, #24]
 8016a4c:	60a3      	str	r3, [r4, #8]
 8016a4e:	89a3      	ldrh	r3, [r4, #12]
 8016a50:	071a      	lsls	r2, r3, #28
 8016a52:	d501      	bpl.n	8016a58 <__swbuf_r+0x20>
 8016a54:	6923      	ldr	r3, [r4, #16]
 8016a56:	b943      	cbnz	r3, 8016a6a <__swbuf_r+0x32>
 8016a58:	4621      	mov	r1, r4
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	f000 f82a 	bl	8016ab4 <__swsetup_r>
 8016a60:	b118      	cbz	r0, 8016a6a <__swbuf_r+0x32>
 8016a62:	f04f 37ff 	mov.w	r7, #4294967295
 8016a66:	4638      	mov	r0, r7
 8016a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a6a:	6823      	ldr	r3, [r4, #0]
 8016a6c:	6922      	ldr	r2, [r4, #16]
 8016a6e:	1a98      	subs	r0, r3, r2
 8016a70:	6963      	ldr	r3, [r4, #20]
 8016a72:	b2f6      	uxtb	r6, r6
 8016a74:	4283      	cmp	r3, r0
 8016a76:	4637      	mov	r7, r6
 8016a78:	dc05      	bgt.n	8016a86 <__swbuf_r+0x4e>
 8016a7a:	4621      	mov	r1, r4
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	f7ff ffa1 	bl	80169c4 <_fflush_r>
 8016a82:	2800      	cmp	r0, #0
 8016a84:	d1ed      	bne.n	8016a62 <__swbuf_r+0x2a>
 8016a86:	68a3      	ldr	r3, [r4, #8]
 8016a88:	3b01      	subs	r3, #1
 8016a8a:	60a3      	str	r3, [r4, #8]
 8016a8c:	6823      	ldr	r3, [r4, #0]
 8016a8e:	1c5a      	adds	r2, r3, #1
 8016a90:	6022      	str	r2, [r4, #0]
 8016a92:	701e      	strb	r6, [r3, #0]
 8016a94:	6962      	ldr	r2, [r4, #20]
 8016a96:	1c43      	adds	r3, r0, #1
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d004      	beq.n	8016aa6 <__swbuf_r+0x6e>
 8016a9c:	89a3      	ldrh	r3, [r4, #12]
 8016a9e:	07db      	lsls	r3, r3, #31
 8016aa0:	d5e1      	bpl.n	8016a66 <__swbuf_r+0x2e>
 8016aa2:	2e0a      	cmp	r6, #10
 8016aa4:	d1df      	bne.n	8016a66 <__swbuf_r+0x2e>
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	f7ff ff8b 	bl	80169c4 <_fflush_r>
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d0d9      	beq.n	8016a66 <__swbuf_r+0x2e>
 8016ab2:	e7d6      	b.n	8016a62 <__swbuf_r+0x2a>

08016ab4 <__swsetup_r>:
 8016ab4:	b538      	push	{r3, r4, r5, lr}
 8016ab6:	4b29      	ldr	r3, [pc, #164]	@ (8016b5c <__swsetup_r+0xa8>)
 8016ab8:	4605      	mov	r5, r0
 8016aba:	6818      	ldr	r0, [r3, #0]
 8016abc:	460c      	mov	r4, r1
 8016abe:	b118      	cbz	r0, 8016ac8 <__swsetup_r+0x14>
 8016ac0:	6a03      	ldr	r3, [r0, #32]
 8016ac2:	b90b      	cbnz	r3, 8016ac8 <__swsetup_r+0x14>
 8016ac4:	f7fd f97c 	bl	8013dc0 <__sinit>
 8016ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016acc:	0719      	lsls	r1, r3, #28
 8016ace:	d422      	bmi.n	8016b16 <__swsetup_r+0x62>
 8016ad0:	06da      	lsls	r2, r3, #27
 8016ad2:	d407      	bmi.n	8016ae4 <__swsetup_r+0x30>
 8016ad4:	2209      	movs	r2, #9
 8016ad6:	602a      	str	r2, [r5, #0]
 8016ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016adc:	81a3      	strh	r3, [r4, #12]
 8016ade:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae2:	e033      	b.n	8016b4c <__swsetup_r+0x98>
 8016ae4:	0758      	lsls	r0, r3, #29
 8016ae6:	d512      	bpl.n	8016b0e <__swsetup_r+0x5a>
 8016ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016aea:	b141      	cbz	r1, 8016afe <__swsetup_r+0x4a>
 8016aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016af0:	4299      	cmp	r1, r3
 8016af2:	d002      	beq.n	8016afa <__swsetup_r+0x46>
 8016af4:	4628      	mov	r0, r5
 8016af6:	f7fe f8e5 	bl	8014cc4 <_free_r>
 8016afa:	2300      	movs	r3, #0
 8016afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8016afe:	89a3      	ldrh	r3, [r4, #12]
 8016b00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b04:	81a3      	strh	r3, [r4, #12]
 8016b06:	2300      	movs	r3, #0
 8016b08:	6063      	str	r3, [r4, #4]
 8016b0a:	6923      	ldr	r3, [r4, #16]
 8016b0c:	6023      	str	r3, [r4, #0]
 8016b0e:	89a3      	ldrh	r3, [r4, #12]
 8016b10:	f043 0308 	orr.w	r3, r3, #8
 8016b14:	81a3      	strh	r3, [r4, #12]
 8016b16:	6923      	ldr	r3, [r4, #16]
 8016b18:	b94b      	cbnz	r3, 8016b2e <__swsetup_r+0x7a>
 8016b1a:	89a3      	ldrh	r3, [r4, #12]
 8016b1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b24:	d003      	beq.n	8016b2e <__swsetup_r+0x7a>
 8016b26:	4621      	mov	r1, r4
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f000 fbf7 	bl	801731c <__smakebuf_r>
 8016b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b32:	f013 0201 	ands.w	r2, r3, #1
 8016b36:	d00a      	beq.n	8016b4e <__swsetup_r+0x9a>
 8016b38:	2200      	movs	r2, #0
 8016b3a:	60a2      	str	r2, [r4, #8]
 8016b3c:	6962      	ldr	r2, [r4, #20]
 8016b3e:	4252      	negs	r2, r2
 8016b40:	61a2      	str	r2, [r4, #24]
 8016b42:	6922      	ldr	r2, [r4, #16]
 8016b44:	b942      	cbnz	r2, 8016b58 <__swsetup_r+0xa4>
 8016b46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b4a:	d1c5      	bne.n	8016ad8 <__swsetup_r+0x24>
 8016b4c:	bd38      	pop	{r3, r4, r5, pc}
 8016b4e:	0799      	lsls	r1, r3, #30
 8016b50:	bf58      	it	pl
 8016b52:	6962      	ldrpl	r2, [r4, #20]
 8016b54:	60a2      	str	r2, [r4, #8]
 8016b56:	e7f4      	b.n	8016b42 <__swsetup_r+0x8e>
 8016b58:	2000      	movs	r0, #0
 8016b5a:	e7f7      	b.n	8016b4c <__swsetup_r+0x98>
 8016b5c:	2000004c 	.word	0x2000004c

08016b60 <_sbrk_r>:
 8016b60:	b538      	push	{r3, r4, r5, lr}
 8016b62:	4d06      	ldr	r5, [pc, #24]	@ (8016b7c <_sbrk_r+0x1c>)
 8016b64:	2300      	movs	r3, #0
 8016b66:	4604      	mov	r4, r0
 8016b68:	4608      	mov	r0, r1
 8016b6a:	602b      	str	r3, [r5, #0]
 8016b6c:	f7ea fd78 	bl	8001660 <_sbrk>
 8016b70:	1c43      	adds	r3, r0, #1
 8016b72:	d102      	bne.n	8016b7a <_sbrk_r+0x1a>
 8016b74:	682b      	ldr	r3, [r5, #0]
 8016b76:	b103      	cbz	r3, 8016b7a <_sbrk_r+0x1a>
 8016b78:	6023      	str	r3, [r4, #0]
 8016b7a:	bd38      	pop	{r3, r4, r5, pc}
 8016b7c:	200082a0 	.word	0x200082a0

08016b80 <nan>:
 8016b80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016b88 <nan+0x8>
 8016b84:	4770      	bx	lr
 8016b86:	bf00      	nop
 8016b88:	00000000 	.word	0x00000000
 8016b8c:	7ff80000 	.word	0x7ff80000

08016b90 <abort>:
 8016b90:	b508      	push	{r3, lr}
 8016b92:	2006      	movs	r0, #6
 8016b94:	f000 fc26 	bl	80173e4 <raise>
 8016b98:	2001      	movs	r0, #1
 8016b9a:	f7ea fce9 	bl	8001570 <_exit>

08016b9e <_calloc_r>:
 8016b9e:	b570      	push	{r4, r5, r6, lr}
 8016ba0:	fba1 5402 	umull	r5, r4, r1, r2
 8016ba4:	b934      	cbnz	r4, 8016bb4 <_calloc_r+0x16>
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	f7fe f900 	bl	8014dac <_malloc_r>
 8016bac:	4606      	mov	r6, r0
 8016bae:	b928      	cbnz	r0, 8016bbc <_calloc_r+0x1e>
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	bd70      	pop	{r4, r5, r6, pc}
 8016bb4:	220c      	movs	r2, #12
 8016bb6:	6002      	str	r2, [r0, #0]
 8016bb8:	2600      	movs	r6, #0
 8016bba:	e7f9      	b.n	8016bb0 <_calloc_r+0x12>
 8016bbc:	462a      	mov	r2, r5
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	f7fd f9d5 	bl	8013f6e <memset>
 8016bc4:	e7f4      	b.n	8016bb0 <_calloc_r+0x12>

08016bc6 <rshift>:
 8016bc6:	6903      	ldr	r3, [r0, #16]
 8016bc8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bd0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016bd4:	f100 0414 	add.w	r4, r0, #20
 8016bd8:	dd45      	ble.n	8016c66 <rshift+0xa0>
 8016bda:	f011 011f 	ands.w	r1, r1, #31
 8016bde:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016be2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016be6:	d10c      	bne.n	8016c02 <rshift+0x3c>
 8016be8:	f100 0710 	add.w	r7, r0, #16
 8016bec:	4629      	mov	r1, r5
 8016bee:	42b1      	cmp	r1, r6
 8016bf0:	d334      	bcc.n	8016c5c <rshift+0x96>
 8016bf2:	1a9b      	subs	r3, r3, r2
 8016bf4:	009b      	lsls	r3, r3, #2
 8016bf6:	1eea      	subs	r2, r5, #3
 8016bf8:	4296      	cmp	r6, r2
 8016bfa:	bf38      	it	cc
 8016bfc:	2300      	movcc	r3, #0
 8016bfe:	4423      	add	r3, r4
 8016c00:	e015      	b.n	8016c2e <rshift+0x68>
 8016c02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016c06:	f1c1 0820 	rsb	r8, r1, #32
 8016c0a:	40cf      	lsrs	r7, r1
 8016c0c:	f105 0e04 	add.w	lr, r5, #4
 8016c10:	46a1      	mov	r9, r4
 8016c12:	4576      	cmp	r6, lr
 8016c14:	46f4      	mov	ip, lr
 8016c16:	d815      	bhi.n	8016c44 <rshift+0x7e>
 8016c18:	1a9a      	subs	r2, r3, r2
 8016c1a:	0092      	lsls	r2, r2, #2
 8016c1c:	3a04      	subs	r2, #4
 8016c1e:	3501      	adds	r5, #1
 8016c20:	42ae      	cmp	r6, r5
 8016c22:	bf38      	it	cc
 8016c24:	2200      	movcc	r2, #0
 8016c26:	18a3      	adds	r3, r4, r2
 8016c28:	50a7      	str	r7, [r4, r2]
 8016c2a:	b107      	cbz	r7, 8016c2e <rshift+0x68>
 8016c2c:	3304      	adds	r3, #4
 8016c2e:	1b1a      	subs	r2, r3, r4
 8016c30:	42a3      	cmp	r3, r4
 8016c32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016c36:	bf08      	it	eq
 8016c38:	2300      	moveq	r3, #0
 8016c3a:	6102      	str	r2, [r0, #16]
 8016c3c:	bf08      	it	eq
 8016c3e:	6143      	streq	r3, [r0, #20]
 8016c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c44:	f8dc c000 	ldr.w	ip, [ip]
 8016c48:	fa0c fc08 	lsl.w	ip, ip, r8
 8016c4c:	ea4c 0707 	orr.w	r7, ip, r7
 8016c50:	f849 7b04 	str.w	r7, [r9], #4
 8016c54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016c58:	40cf      	lsrs	r7, r1
 8016c5a:	e7da      	b.n	8016c12 <rshift+0x4c>
 8016c5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8016c60:	f847 cf04 	str.w	ip, [r7, #4]!
 8016c64:	e7c3      	b.n	8016bee <rshift+0x28>
 8016c66:	4623      	mov	r3, r4
 8016c68:	e7e1      	b.n	8016c2e <rshift+0x68>

08016c6a <__hexdig_fun>:
 8016c6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016c6e:	2b09      	cmp	r3, #9
 8016c70:	d802      	bhi.n	8016c78 <__hexdig_fun+0xe>
 8016c72:	3820      	subs	r0, #32
 8016c74:	b2c0      	uxtb	r0, r0
 8016c76:	4770      	bx	lr
 8016c78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016c7c:	2b05      	cmp	r3, #5
 8016c7e:	d801      	bhi.n	8016c84 <__hexdig_fun+0x1a>
 8016c80:	3847      	subs	r0, #71	@ 0x47
 8016c82:	e7f7      	b.n	8016c74 <__hexdig_fun+0xa>
 8016c84:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016c88:	2b05      	cmp	r3, #5
 8016c8a:	d801      	bhi.n	8016c90 <__hexdig_fun+0x26>
 8016c8c:	3827      	subs	r0, #39	@ 0x27
 8016c8e:	e7f1      	b.n	8016c74 <__hexdig_fun+0xa>
 8016c90:	2000      	movs	r0, #0
 8016c92:	4770      	bx	lr

08016c94 <__gethex>:
 8016c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c98:	b085      	sub	sp, #20
 8016c9a:	468a      	mov	sl, r1
 8016c9c:	9302      	str	r3, [sp, #8]
 8016c9e:	680b      	ldr	r3, [r1, #0]
 8016ca0:	9001      	str	r0, [sp, #4]
 8016ca2:	4690      	mov	r8, r2
 8016ca4:	1c9c      	adds	r4, r3, #2
 8016ca6:	46a1      	mov	r9, r4
 8016ca8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016cac:	2830      	cmp	r0, #48	@ 0x30
 8016cae:	d0fa      	beq.n	8016ca6 <__gethex+0x12>
 8016cb0:	eba9 0303 	sub.w	r3, r9, r3
 8016cb4:	f1a3 0b02 	sub.w	fp, r3, #2
 8016cb8:	f7ff ffd7 	bl	8016c6a <__hexdig_fun>
 8016cbc:	4605      	mov	r5, r0
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	d168      	bne.n	8016d94 <__gethex+0x100>
 8016cc2:	49a0      	ldr	r1, [pc, #640]	@ (8016f44 <__gethex+0x2b0>)
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	4648      	mov	r0, r9
 8016cc8:	f7fd f959 	bl	8013f7e <strncmp>
 8016ccc:	4607      	mov	r7, r0
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d167      	bne.n	8016da2 <__gethex+0x10e>
 8016cd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016cd6:	4626      	mov	r6, r4
 8016cd8:	f7ff ffc7 	bl	8016c6a <__hexdig_fun>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d062      	beq.n	8016da6 <__gethex+0x112>
 8016ce0:	4623      	mov	r3, r4
 8016ce2:	7818      	ldrb	r0, [r3, #0]
 8016ce4:	2830      	cmp	r0, #48	@ 0x30
 8016ce6:	4699      	mov	r9, r3
 8016ce8:	f103 0301 	add.w	r3, r3, #1
 8016cec:	d0f9      	beq.n	8016ce2 <__gethex+0x4e>
 8016cee:	f7ff ffbc 	bl	8016c6a <__hexdig_fun>
 8016cf2:	fab0 f580 	clz	r5, r0
 8016cf6:	096d      	lsrs	r5, r5, #5
 8016cf8:	f04f 0b01 	mov.w	fp, #1
 8016cfc:	464a      	mov	r2, r9
 8016cfe:	4616      	mov	r6, r2
 8016d00:	3201      	adds	r2, #1
 8016d02:	7830      	ldrb	r0, [r6, #0]
 8016d04:	f7ff ffb1 	bl	8016c6a <__hexdig_fun>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d1f8      	bne.n	8016cfe <__gethex+0x6a>
 8016d0c:	498d      	ldr	r1, [pc, #564]	@ (8016f44 <__gethex+0x2b0>)
 8016d0e:	2201      	movs	r2, #1
 8016d10:	4630      	mov	r0, r6
 8016d12:	f7fd f934 	bl	8013f7e <strncmp>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d13f      	bne.n	8016d9a <__gethex+0x106>
 8016d1a:	b944      	cbnz	r4, 8016d2e <__gethex+0x9a>
 8016d1c:	1c74      	adds	r4, r6, #1
 8016d1e:	4622      	mov	r2, r4
 8016d20:	4616      	mov	r6, r2
 8016d22:	3201      	adds	r2, #1
 8016d24:	7830      	ldrb	r0, [r6, #0]
 8016d26:	f7ff ffa0 	bl	8016c6a <__hexdig_fun>
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	d1f8      	bne.n	8016d20 <__gethex+0x8c>
 8016d2e:	1ba4      	subs	r4, r4, r6
 8016d30:	00a7      	lsls	r7, r4, #2
 8016d32:	7833      	ldrb	r3, [r6, #0]
 8016d34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016d38:	2b50      	cmp	r3, #80	@ 0x50
 8016d3a:	d13e      	bne.n	8016dba <__gethex+0x126>
 8016d3c:	7873      	ldrb	r3, [r6, #1]
 8016d3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016d40:	d033      	beq.n	8016daa <__gethex+0x116>
 8016d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8016d44:	d034      	beq.n	8016db0 <__gethex+0x11c>
 8016d46:	1c71      	adds	r1, r6, #1
 8016d48:	2400      	movs	r4, #0
 8016d4a:	7808      	ldrb	r0, [r1, #0]
 8016d4c:	f7ff ff8d 	bl	8016c6a <__hexdig_fun>
 8016d50:	1e43      	subs	r3, r0, #1
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	2b18      	cmp	r3, #24
 8016d56:	d830      	bhi.n	8016dba <__gethex+0x126>
 8016d58:	f1a0 0210 	sub.w	r2, r0, #16
 8016d5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016d60:	f7ff ff83 	bl	8016c6a <__hexdig_fun>
 8016d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8016d68:	fa5f fc8c 	uxtb.w	ip, ip
 8016d6c:	f1bc 0f18 	cmp.w	ip, #24
 8016d70:	f04f 030a 	mov.w	r3, #10
 8016d74:	d91e      	bls.n	8016db4 <__gethex+0x120>
 8016d76:	b104      	cbz	r4, 8016d7a <__gethex+0xe6>
 8016d78:	4252      	negs	r2, r2
 8016d7a:	4417      	add	r7, r2
 8016d7c:	f8ca 1000 	str.w	r1, [sl]
 8016d80:	b1ed      	cbz	r5, 8016dbe <__gethex+0x12a>
 8016d82:	f1bb 0f00 	cmp.w	fp, #0
 8016d86:	bf0c      	ite	eq
 8016d88:	2506      	moveq	r5, #6
 8016d8a:	2500      	movne	r5, #0
 8016d8c:	4628      	mov	r0, r5
 8016d8e:	b005      	add	sp, #20
 8016d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d94:	2500      	movs	r5, #0
 8016d96:	462c      	mov	r4, r5
 8016d98:	e7b0      	b.n	8016cfc <__gethex+0x68>
 8016d9a:	2c00      	cmp	r4, #0
 8016d9c:	d1c7      	bne.n	8016d2e <__gethex+0x9a>
 8016d9e:	4627      	mov	r7, r4
 8016da0:	e7c7      	b.n	8016d32 <__gethex+0x9e>
 8016da2:	464e      	mov	r6, r9
 8016da4:	462f      	mov	r7, r5
 8016da6:	2501      	movs	r5, #1
 8016da8:	e7c3      	b.n	8016d32 <__gethex+0x9e>
 8016daa:	2400      	movs	r4, #0
 8016dac:	1cb1      	adds	r1, r6, #2
 8016dae:	e7cc      	b.n	8016d4a <__gethex+0xb6>
 8016db0:	2401      	movs	r4, #1
 8016db2:	e7fb      	b.n	8016dac <__gethex+0x118>
 8016db4:	fb03 0002 	mla	r0, r3, r2, r0
 8016db8:	e7ce      	b.n	8016d58 <__gethex+0xc4>
 8016dba:	4631      	mov	r1, r6
 8016dbc:	e7de      	b.n	8016d7c <__gethex+0xe8>
 8016dbe:	eba6 0309 	sub.w	r3, r6, r9
 8016dc2:	3b01      	subs	r3, #1
 8016dc4:	4629      	mov	r1, r5
 8016dc6:	2b07      	cmp	r3, #7
 8016dc8:	dc0a      	bgt.n	8016de0 <__gethex+0x14c>
 8016dca:	9801      	ldr	r0, [sp, #4]
 8016dcc:	f7fe f87a 	bl	8014ec4 <_Balloc>
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	b940      	cbnz	r0, 8016de6 <__gethex+0x152>
 8016dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8016f48 <__gethex+0x2b4>)
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	21e4      	movs	r1, #228	@ 0xe4
 8016dda:	485c      	ldr	r0, [pc, #368]	@ (8016f4c <__gethex+0x2b8>)
 8016ddc:	f7fd f96e 	bl	80140bc <__assert_func>
 8016de0:	3101      	adds	r1, #1
 8016de2:	105b      	asrs	r3, r3, #1
 8016de4:	e7ef      	b.n	8016dc6 <__gethex+0x132>
 8016de6:	f100 0a14 	add.w	sl, r0, #20
 8016dea:	2300      	movs	r3, #0
 8016dec:	4655      	mov	r5, sl
 8016dee:	469b      	mov	fp, r3
 8016df0:	45b1      	cmp	r9, r6
 8016df2:	d337      	bcc.n	8016e64 <__gethex+0x1d0>
 8016df4:	f845 bb04 	str.w	fp, [r5], #4
 8016df8:	eba5 050a 	sub.w	r5, r5, sl
 8016dfc:	10ad      	asrs	r5, r5, #2
 8016dfe:	6125      	str	r5, [r4, #16]
 8016e00:	4658      	mov	r0, fp
 8016e02:	f7fe f951 	bl	80150a8 <__hi0bits>
 8016e06:	016d      	lsls	r5, r5, #5
 8016e08:	f8d8 6000 	ldr.w	r6, [r8]
 8016e0c:	1a2d      	subs	r5, r5, r0
 8016e0e:	42b5      	cmp	r5, r6
 8016e10:	dd54      	ble.n	8016ebc <__gethex+0x228>
 8016e12:	1bad      	subs	r5, r5, r6
 8016e14:	4629      	mov	r1, r5
 8016e16:	4620      	mov	r0, r4
 8016e18:	f7fe fcda 	bl	80157d0 <__any_on>
 8016e1c:	4681      	mov	r9, r0
 8016e1e:	b178      	cbz	r0, 8016e40 <__gethex+0x1ac>
 8016e20:	1e6b      	subs	r3, r5, #1
 8016e22:	1159      	asrs	r1, r3, #5
 8016e24:	f003 021f 	and.w	r2, r3, #31
 8016e28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016e2c:	f04f 0901 	mov.w	r9, #1
 8016e30:	fa09 f202 	lsl.w	r2, r9, r2
 8016e34:	420a      	tst	r2, r1
 8016e36:	d003      	beq.n	8016e40 <__gethex+0x1ac>
 8016e38:	454b      	cmp	r3, r9
 8016e3a:	dc36      	bgt.n	8016eaa <__gethex+0x216>
 8016e3c:	f04f 0902 	mov.w	r9, #2
 8016e40:	4629      	mov	r1, r5
 8016e42:	4620      	mov	r0, r4
 8016e44:	f7ff febf 	bl	8016bc6 <rshift>
 8016e48:	442f      	add	r7, r5
 8016e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016e4e:	42bb      	cmp	r3, r7
 8016e50:	da42      	bge.n	8016ed8 <__gethex+0x244>
 8016e52:	9801      	ldr	r0, [sp, #4]
 8016e54:	4621      	mov	r1, r4
 8016e56:	f7fe f875 	bl	8014f44 <_Bfree>
 8016e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	6013      	str	r3, [r2, #0]
 8016e60:	25a3      	movs	r5, #163	@ 0xa3
 8016e62:	e793      	b.n	8016d8c <__gethex+0xf8>
 8016e64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016e68:	2a2e      	cmp	r2, #46	@ 0x2e
 8016e6a:	d012      	beq.n	8016e92 <__gethex+0x1fe>
 8016e6c:	2b20      	cmp	r3, #32
 8016e6e:	d104      	bne.n	8016e7a <__gethex+0x1e6>
 8016e70:	f845 bb04 	str.w	fp, [r5], #4
 8016e74:	f04f 0b00 	mov.w	fp, #0
 8016e78:	465b      	mov	r3, fp
 8016e7a:	7830      	ldrb	r0, [r6, #0]
 8016e7c:	9303      	str	r3, [sp, #12]
 8016e7e:	f7ff fef4 	bl	8016c6a <__hexdig_fun>
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	f000 000f 	and.w	r0, r0, #15
 8016e88:	4098      	lsls	r0, r3
 8016e8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8016e8e:	3304      	adds	r3, #4
 8016e90:	e7ae      	b.n	8016df0 <__gethex+0x15c>
 8016e92:	45b1      	cmp	r9, r6
 8016e94:	d8ea      	bhi.n	8016e6c <__gethex+0x1d8>
 8016e96:	492b      	ldr	r1, [pc, #172]	@ (8016f44 <__gethex+0x2b0>)
 8016e98:	9303      	str	r3, [sp, #12]
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	f7fd f86e 	bl	8013f7e <strncmp>
 8016ea2:	9b03      	ldr	r3, [sp, #12]
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	d1e1      	bne.n	8016e6c <__gethex+0x1d8>
 8016ea8:	e7a2      	b.n	8016df0 <__gethex+0x15c>
 8016eaa:	1ea9      	subs	r1, r5, #2
 8016eac:	4620      	mov	r0, r4
 8016eae:	f7fe fc8f 	bl	80157d0 <__any_on>
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	d0c2      	beq.n	8016e3c <__gethex+0x1a8>
 8016eb6:	f04f 0903 	mov.w	r9, #3
 8016eba:	e7c1      	b.n	8016e40 <__gethex+0x1ac>
 8016ebc:	da09      	bge.n	8016ed2 <__gethex+0x23e>
 8016ebe:	1b75      	subs	r5, r6, r5
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	9801      	ldr	r0, [sp, #4]
 8016ec4:	462a      	mov	r2, r5
 8016ec6:	f7fe fa4d 	bl	8015364 <__lshift>
 8016eca:	1b7f      	subs	r7, r7, r5
 8016ecc:	4604      	mov	r4, r0
 8016ece:	f100 0a14 	add.w	sl, r0, #20
 8016ed2:	f04f 0900 	mov.w	r9, #0
 8016ed6:	e7b8      	b.n	8016e4a <__gethex+0x1b6>
 8016ed8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016edc:	42bd      	cmp	r5, r7
 8016ede:	dd6f      	ble.n	8016fc0 <__gethex+0x32c>
 8016ee0:	1bed      	subs	r5, r5, r7
 8016ee2:	42ae      	cmp	r6, r5
 8016ee4:	dc34      	bgt.n	8016f50 <__gethex+0x2bc>
 8016ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016eea:	2b02      	cmp	r3, #2
 8016eec:	d022      	beq.n	8016f34 <__gethex+0x2a0>
 8016eee:	2b03      	cmp	r3, #3
 8016ef0:	d024      	beq.n	8016f3c <__gethex+0x2a8>
 8016ef2:	2b01      	cmp	r3, #1
 8016ef4:	d115      	bne.n	8016f22 <__gethex+0x28e>
 8016ef6:	42ae      	cmp	r6, r5
 8016ef8:	d113      	bne.n	8016f22 <__gethex+0x28e>
 8016efa:	2e01      	cmp	r6, #1
 8016efc:	d10b      	bne.n	8016f16 <__gethex+0x282>
 8016efe:	9a02      	ldr	r2, [sp, #8]
 8016f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016f04:	6013      	str	r3, [r2, #0]
 8016f06:	2301      	movs	r3, #1
 8016f08:	6123      	str	r3, [r4, #16]
 8016f0a:	f8ca 3000 	str.w	r3, [sl]
 8016f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f10:	2562      	movs	r5, #98	@ 0x62
 8016f12:	601c      	str	r4, [r3, #0]
 8016f14:	e73a      	b.n	8016d8c <__gethex+0xf8>
 8016f16:	1e71      	subs	r1, r6, #1
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f7fe fc59 	bl	80157d0 <__any_on>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	d1ed      	bne.n	8016efe <__gethex+0x26a>
 8016f22:	9801      	ldr	r0, [sp, #4]
 8016f24:	4621      	mov	r1, r4
 8016f26:	f7fe f80d 	bl	8014f44 <_Bfree>
 8016f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	2550      	movs	r5, #80	@ 0x50
 8016f32:	e72b      	b.n	8016d8c <__gethex+0xf8>
 8016f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d1f3      	bne.n	8016f22 <__gethex+0x28e>
 8016f3a:	e7e0      	b.n	8016efe <__gethex+0x26a>
 8016f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1dd      	bne.n	8016efe <__gethex+0x26a>
 8016f42:	e7ee      	b.n	8016f22 <__gethex+0x28e>
 8016f44:	0801adb9 	.word	0x0801adb9
 8016f48:	0801ad4f 	.word	0x0801ad4f
 8016f4c:	0801add4 	.word	0x0801add4
 8016f50:	1e6f      	subs	r7, r5, #1
 8016f52:	f1b9 0f00 	cmp.w	r9, #0
 8016f56:	d130      	bne.n	8016fba <__gethex+0x326>
 8016f58:	b127      	cbz	r7, 8016f64 <__gethex+0x2d0>
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	4620      	mov	r0, r4
 8016f5e:	f7fe fc37 	bl	80157d0 <__any_on>
 8016f62:	4681      	mov	r9, r0
 8016f64:	117a      	asrs	r2, r7, #5
 8016f66:	2301      	movs	r3, #1
 8016f68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016f6c:	f007 071f 	and.w	r7, r7, #31
 8016f70:	40bb      	lsls	r3, r7
 8016f72:	4213      	tst	r3, r2
 8016f74:	4629      	mov	r1, r5
 8016f76:	4620      	mov	r0, r4
 8016f78:	bf18      	it	ne
 8016f7a:	f049 0902 	orrne.w	r9, r9, #2
 8016f7e:	f7ff fe22 	bl	8016bc6 <rshift>
 8016f82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016f86:	1b76      	subs	r6, r6, r5
 8016f88:	2502      	movs	r5, #2
 8016f8a:	f1b9 0f00 	cmp.w	r9, #0
 8016f8e:	d047      	beq.n	8017020 <__gethex+0x38c>
 8016f90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016f94:	2b02      	cmp	r3, #2
 8016f96:	d015      	beq.n	8016fc4 <__gethex+0x330>
 8016f98:	2b03      	cmp	r3, #3
 8016f9a:	d017      	beq.n	8016fcc <__gethex+0x338>
 8016f9c:	2b01      	cmp	r3, #1
 8016f9e:	d109      	bne.n	8016fb4 <__gethex+0x320>
 8016fa0:	f019 0f02 	tst.w	r9, #2
 8016fa4:	d006      	beq.n	8016fb4 <__gethex+0x320>
 8016fa6:	f8da 3000 	ldr.w	r3, [sl]
 8016faa:	ea49 0903 	orr.w	r9, r9, r3
 8016fae:	f019 0f01 	tst.w	r9, #1
 8016fb2:	d10e      	bne.n	8016fd2 <__gethex+0x33e>
 8016fb4:	f045 0510 	orr.w	r5, r5, #16
 8016fb8:	e032      	b.n	8017020 <__gethex+0x38c>
 8016fba:	f04f 0901 	mov.w	r9, #1
 8016fbe:	e7d1      	b.n	8016f64 <__gethex+0x2d0>
 8016fc0:	2501      	movs	r5, #1
 8016fc2:	e7e2      	b.n	8016f8a <__gethex+0x2f6>
 8016fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fc6:	f1c3 0301 	rsb	r3, r3, #1
 8016fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d0f0      	beq.n	8016fb4 <__gethex+0x320>
 8016fd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016fd6:	f104 0314 	add.w	r3, r4, #20
 8016fda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016fde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016fe2:	f04f 0c00 	mov.w	ip, #0
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016ff0:	d01b      	beq.n	801702a <__gethex+0x396>
 8016ff2:	3201      	adds	r2, #1
 8016ff4:	6002      	str	r2, [r0, #0]
 8016ff6:	2d02      	cmp	r5, #2
 8016ff8:	f104 0314 	add.w	r3, r4, #20
 8016ffc:	d13c      	bne.n	8017078 <__gethex+0x3e4>
 8016ffe:	f8d8 2000 	ldr.w	r2, [r8]
 8017002:	3a01      	subs	r2, #1
 8017004:	42b2      	cmp	r2, r6
 8017006:	d109      	bne.n	801701c <__gethex+0x388>
 8017008:	1171      	asrs	r1, r6, #5
 801700a:	2201      	movs	r2, #1
 801700c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017010:	f006 061f 	and.w	r6, r6, #31
 8017014:	fa02 f606 	lsl.w	r6, r2, r6
 8017018:	421e      	tst	r6, r3
 801701a:	d13a      	bne.n	8017092 <__gethex+0x3fe>
 801701c:	f045 0520 	orr.w	r5, r5, #32
 8017020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017022:	601c      	str	r4, [r3, #0]
 8017024:	9b02      	ldr	r3, [sp, #8]
 8017026:	601f      	str	r7, [r3, #0]
 8017028:	e6b0      	b.n	8016d8c <__gethex+0xf8>
 801702a:	4299      	cmp	r1, r3
 801702c:	f843 cc04 	str.w	ip, [r3, #-4]
 8017030:	d8d9      	bhi.n	8016fe6 <__gethex+0x352>
 8017032:	68a3      	ldr	r3, [r4, #8]
 8017034:	459b      	cmp	fp, r3
 8017036:	db17      	blt.n	8017068 <__gethex+0x3d4>
 8017038:	6861      	ldr	r1, [r4, #4]
 801703a:	9801      	ldr	r0, [sp, #4]
 801703c:	3101      	adds	r1, #1
 801703e:	f7fd ff41 	bl	8014ec4 <_Balloc>
 8017042:	4681      	mov	r9, r0
 8017044:	b918      	cbnz	r0, 801704e <__gethex+0x3ba>
 8017046:	4b1a      	ldr	r3, [pc, #104]	@ (80170b0 <__gethex+0x41c>)
 8017048:	4602      	mov	r2, r0
 801704a:	2184      	movs	r1, #132	@ 0x84
 801704c:	e6c5      	b.n	8016dda <__gethex+0x146>
 801704e:	6922      	ldr	r2, [r4, #16]
 8017050:	3202      	adds	r2, #2
 8017052:	f104 010c 	add.w	r1, r4, #12
 8017056:	0092      	lsls	r2, r2, #2
 8017058:	300c      	adds	r0, #12
 801705a:	f7fd f81a 	bl	8014092 <memcpy>
 801705e:	4621      	mov	r1, r4
 8017060:	9801      	ldr	r0, [sp, #4]
 8017062:	f7fd ff6f 	bl	8014f44 <_Bfree>
 8017066:	464c      	mov	r4, r9
 8017068:	6923      	ldr	r3, [r4, #16]
 801706a:	1c5a      	adds	r2, r3, #1
 801706c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017070:	6122      	str	r2, [r4, #16]
 8017072:	2201      	movs	r2, #1
 8017074:	615a      	str	r2, [r3, #20]
 8017076:	e7be      	b.n	8016ff6 <__gethex+0x362>
 8017078:	6922      	ldr	r2, [r4, #16]
 801707a:	455a      	cmp	r2, fp
 801707c:	dd0b      	ble.n	8017096 <__gethex+0x402>
 801707e:	2101      	movs	r1, #1
 8017080:	4620      	mov	r0, r4
 8017082:	f7ff fda0 	bl	8016bc6 <rshift>
 8017086:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801708a:	3701      	adds	r7, #1
 801708c:	42bb      	cmp	r3, r7
 801708e:	f6ff aee0 	blt.w	8016e52 <__gethex+0x1be>
 8017092:	2501      	movs	r5, #1
 8017094:	e7c2      	b.n	801701c <__gethex+0x388>
 8017096:	f016 061f 	ands.w	r6, r6, #31
 801709a:	d0fa      	beq.n	8017092 <__gethex+0x3fe>
 801709c:	4453      	add	r3, sl
 801709e:	f1c6 0620 	rsb	r6, r6, #32
 80170a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80170a6:	f7fd ffff 	bl	80150a8 <__hi0bits>
 80170aa:	42b0      	cmp	r0, r6
 80170ac:	dbe7      	blt.n	801707e <__gethex+0x3ea>
 80170ae:	e7f0      	b.n	8017092 <__gethex+0x3fe>
 80170b0:	0801ad4f 	.word	0x0801ad4f

080170b4 <L_shift>:
 80170b4:	f1c2 0208 	rsb	r2, r2, #8
 80170b8:	0092      	lsls	r2, r2, #2
 80170ba:	b570      	push	{r4, r5, r6, lr}
 80170bc:	f1c2 0620 	rsb	r6, r2, #32
 80170c0:	6843      	ldr	r3, [r0, #4]
 80170c2:	6804      	ldr	r4, [r0, #0]
 80170c4:	fa03 f506 	lsl.w	r5, r3, r6
 80170c8:	432c      	orrs	r4, r5
 80170ca:	40d3      	lsrs	r3, r2
 80170cc:	6004      	str	r4, [r0, #0]
 80170ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80170d2:	4288      	cmp	r0, r1
 80170d4:	d3f4      	bcc.n	80170c0 <L_shift+0xc>
 80170d6:	bd70      	pop	{r4, r5, r6, pc}

080170d8 <__match>:
 80170d8:	b530      	push	{r4, r5, lr}
 80170da:	6803      	ldr	r3, [r0, #0]
 80170dc:	3301      	adds	r3, #1
 80170de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170e2:	b914      	cbnz	r4, 80170ea <__match+0x12>
 80170e4:	6003      	str	r3, [r0, #0]
 80170e6:	2001      	movs	r0, #1
 80170e8:	bd30      	pop	{r4, r5, pc}
 80170ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80170f2:	2d19      	cmp	r5, #25
 80170f4:	bf98      	it	ls
 80170f6:	3220      	addls	r2, #32
 80170f8:	42a2      	cmp	r2, r4
 80170fa:	d0f0      	beq.n	80170de <__match+0x6>
 80170fc:	2000      	movs	r0, #0
 80170fe:	e7f3      	b.n	80170e8 <__match+0x10>

08017100 <__hexnan>:
 8017100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017104:	680b      	ldr	r3, [r1, #0]
 8017106:	6801      	ldr	r1, [r0, #0]
 8017108:	115e      	asrs	r6, r3, #5
 801710a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801710e:	f013 031f 	ands.w	r3, r3, #31
 8017112:	b087      	sub	sp, #28
 8017114:	bf18      	it	ne
 8017116:	3604      	addne	r6, #4
 8017118:	2500      	movs	r5, #0
 801711a:	1f37      	subs	r7, r6, #4
 801711c:	4682      	mov	sl, r0
 801711e:	4690      	mov	r8, r2
 8017120:	9301      	str	r3, [sp, #4]
 8017122:	f846 5c04 	str.w	r5, [r6, #-4]
 8017126:	46b9      	mov	r9, r7
 8017128:	463c      	mov	r4, r7
 801712a:	9502      	str	r5, [sp, #8]
 801712c:	46ab      	mov	fp, r5
 801712e:	784a      	ldrb	r2, [r1, #1]
 8017130:	1c4b      	adds	r3, r1, #1
 8017132:	9303      	str	r3, [sp, #12]
 8017134:	b342      	cbz	r2, 8017188 <__hexnan+0x88>
 8017136:	4610      	mov	r0, r2
 8017138:	9105      	str	r1, [sp, #20]
 801713a:	9204      	str	r2, [sp, #16]
 801713c:	f7ff fd95 	bl	8016c6a <__hexdig_fun>
 8017140:	2800      	cmp	r0, #0
 8017142:	d151      	bne.n	80171e8 <__hexnan+0xe8>
 8017144:	9a04      	ldr	r2, [sp, #16]
 8017146:	9905      	ldr	r1, [sp, #20]
 8017148:	2a20      	cmp	r2, #32
 801714a:	d818      	bhi.n	801717e <__hexnan+0x7e>
 801714c:	9b02      	ldr	r3, [sp, #8]
 801714e:	459b      	cmp	fp, r3
 8017150:	dd13      	ble.n	801717a <__hexnan+0x7a>
 8017152:	454c      	cmp	r4, r9
 8017154:	d206      	bcs.n	8017164 <__hexnan+0x64>
 8017156:	2d07      	cmp	r5, #7
 8017158:	dc04      	bgt.n	8017164 <__hexnan+0x64>
 801715a:	462a      	mov	r2, r5
 801715c:	4649      	mov	r1, r9
 801715e:	4620      	mov	r0, r4
 8017160:	f7ff ffa8 	bl	80170b4 <L_shift>
 8017164:	4544      	cmp	r4, r8
 8017166:	d952      	bls.n	801720e <__hexnan+0x10e>
 8017168:	2300      	movs	r3, #0
 801716a:	f1a4 0904 	sub.w	r9, r4, #4
 801716e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017172:	f8cd b008 	str.w	fp, [sp, #8]
 8017176:	464c      	mov	r4, r9
 8017178:	461d      	mov	r5, r3
 801717a:	9903      	ldr	r1, [sp, #12]
 801717c:	e7d7      	b.n	801712e <__hexnan+0x2e>
 801717e:	2a29      	cmp	r2, #41	@ 0x29
 8017180:	d157      	bne.n	8017232 <__hexnan+0x132>
 8017182:	3102      	adds	r1, #2
 8017184:	f8ca 1000 	str.w	r1, [sl]
 8017188:	f1bb 0f00 	cmp.w	fp, #0
 801718c:	d051      	beq.n	8017232 <__hexnan+0x132>
 801718e:	454c      	cmp	r4, r9
 8017190:	d206      	bcs.n	80171a0 <__hexnan+0xa0>
 8017192:	2d07      	cmp	r5, #7
 8017194:	dc04      	bgt.n	80171a0 <__hexnan+0xa0>
 8017196:	462a      	mov	r2, r5
 8017198:	4649      	mov	r1, r9
 801719a:	4620      	mov	r0, r4
 801719c:	f7ff ff8a 	bl	80170b4 <L_shift>
 80171a0:	4544      	cmp	r4, r8
 80171a2:	d936      	bls.n	8017212 <__hexnan+0x112>
 80171a4:	f1a8 0204 	sub.w	r2, r8, #4
 80171a8:	4623      	mov	r3, r4
 80171aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80171ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80171b2:	429f      	cmp	r7, r3
 80171b4:	d2f9      	bcs.n	80171aa <__hexnan+0xaa>
 80171b6:	1b3b      	subs	r3, r7, r4
 80171b8:	f023 0303 	bic.w	r3, r3, #3
 80171bc:	3304      	adds	r3, #4
 80171be:	3401      	adds	r4, #1
 80171c0:	3e03      	subs	r6, #3
 80171c2:	42b4      	cmp	r4, r6
 80171c4:	bf88      	it	hi
 80171c6:	2304      	movhi	r3, #4
 80171c8:	4443      	add	r3, r8
 80171ca:	2200      	movs	r2, #0
 80171cc:	f843 2b04 	str.w	r2, [r3], #4
 80171d0:	429f      	cmp	r7, r3
 80171d2:	d2fb      	bcs.n	80171cc <__hexnan+0xcc>
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	b91b      	cbnz	r3, 80171e0 <__hexnan+0xe0>
 80171d8:	4547      	cmp	r7, r8
 80171da:	d128      	bne.n	801722e <__hexnan+0x12e>
 80171dc:	2301      	movs	r3, #1
 80171de:	603b      	str	r3, [r7, #0]
 80171e0:	2005      	movs	r0, #5
 80171e2:	b007      	add	sp, #28
 80171e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e8:	3501      	adds	r5, #1
 80171ea:	2d08      	cmp	r5, #8
 80171ec:	f10b 0b01 	add.w	fp, fp, #1
 80171f0:	dd06      	ble.n	8017200 <__hexnan+0x100>
 80171f2:	4544      	cmp	r4, r8
 80171f4:	d9c1      	bls.n	801717a <__hexnan+0x7a>
 80171f6:	2300      	movs	r3, #0
 80171f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80171fc:	2501      	movs	r5, #1
 80171fe:	3c04      	subs	r4, #4
 8017200:	6822      	ldr	r2, [r4, #0]
 8017202:	f000 000f 	and.w	r0, r0, #15
 8017206:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801720a:	6020      	str	r0, [r4, #0]
 801720c:	e7b5      	b.n	801717a <__hexnan+0x7a>
 801720e:	2508      	movs	r5, #8
 8017210:	e7b3      	b.n	801717a <__hexnan+0x7a>
 8017212:	9b01      	ldr	r3, [sp, #4]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d0dd      	beq.n	80171d4 <__hexnan+0xd4>
 8017218:	f1c3 0320 	rsb	r3, r3, #32
 801721c:	f04f 32ff 	mov.w	r2, #4294967295
 8017220:	40da      	lsrs	r2, r3
 8017222:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017226:	4013      	ands	r3, r2
 8017228:	f846 3c04 	str.w	r3, [r6, #-4]
 801722c:	e7d2      	b.n	80171d4 <__hexnan+0xd4>
 801722e:	3f04      	subs	r7, #4
 8017230:	e7d0      	b.n	80171d4 <__hexnan+0xd4>
 8017232:	2004      	movs	r0, #4
 8017234:	e7d5      	b.n	80171e2 <__hexnan+0xe2>

08017236 <__ascii_mbtowc>:
 8017236:	b082      	sub	sp, #8
 8017238:	b901      	cbnz	r1, 801723c <__ascii_mbtowc+0x6>
 801723a:	a901      	add	r1, sp, #4
 801723c:	b142      	cbz	r2, 8017250 <__ascii_mbtowc+0x1a>
 801723e:	b14b      	cbz	r3, 8017254 <__ascii_mbtowc+0x1e>
 8017240:	7813      	ldrb	r3, [r2, #0]
 8017242:	600b      	str	r3, [r1, #0]
 8017244:	7812      	ldrb	r2, [r2, #0]
 8017246:	1e10      	subs	r0, r2, #0
 8017248:	bf18      	it	ne
 801724a:	2001      	movne	r0, #1
 801724c:	b002      	add	sp, #8
 801724e:	4770      	bx	lr
 8017250:	4610      	mov	r0, r2
 8017252:	e7fb      	b.n	801724c <__ascii_mbtowc+0x16>
 8017254:	f06f 0001 	mvn.w	r0, #1
 8017258:	e7f8      	b.n	801724c <__ascii_mbtowc+0x16>

0801725a <_realloc_r>:
 801725a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801725e:	4607      	mov	r7, r0
 8017260:	4614      	mov	r4, r2
 8017262:	460d      	mov	r5, r1
 8017264:	b921      	cbnz	r1, 8017270 <_realloc_r+0x16>
 8017266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801726a:	4611      	mov	r1, r2
 801726c:	f7fd bd9e 	b.w	8014dac <_malloc_r>
 8017270:	b92a      	cbnz	r2, 801727e <_realloc_r+0x24>
 8017272:	f7fd fd27 	bl	8014cc4 <_free_r>
 8017276:	4625      	mov	r5, r4
 8017278:	4628      	mov	r0, r5
 801727a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801727e:	f000 f8ef 	bl	8017460 <_malloc_usable_size_r>
 8017282:	4284      	cmp	r4, r0
 8017284:	4606      	mov	r6, r0
 8017286:	d802      	bhi.n	801728e <_realloc_r+0x34>
 8017288:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801728c:	d8f4      	bhi.n	8017278 <_realloc_r+0x1e>
 801728e:	4621      	mov	r1, r4
 8017290:	4638      	mov	r0, r7
 8017292:	f7fd fd8b 	bl	8014dac <_malloc_r>
 8017296:	4680      	mov	r8, r0
 8017298:	b908      	cbnz	r0, 801729e <_realloc_r+0x44>
 801729a:	4645      	mov	r5, r8
 801729c:	e7ec      	b.n	8017278 <_realloc_r+0x1e>
 801729e:	42b4      	cmp	r4, r6
 80172a0:	4622      	mov	r2, r4
 80172a2:	4629      	mov	r1, r5
 80172a4:	bf28      	it	cs
 80172a6:	4632      	movcs	r2, r6
 80172a8:	f7fc fef3 	bl	8014092 <memcpy>
 80172ac:	4629      	mov	r1, r5
 80172ae:	4638      	mov	r0, r7
 80172b0:	f7fd fd08 	bl	8014cc4 <_free_r>
 80172b4:	e7f1      	b.n	801729a <_realloc_r+0x40>

080172b6 <__ascii_wctomb>:
 80172b6:	4603      	mov	r3, r0
 80172b8:	4608      	mov	r0, r1
 80172ba:	b141      	cbz	r1, 80172ce <__ascii_wctomb+0x18>
 80172bc:	2aff      	cmp	r2, #255	@ 0xff
 80172be:	d904      	bls.n	80172ca <__ascii_wctomb+0x14>
 80172c0:	228a      	movs	r2, #138	@ 0x8a
 80172c2:	601a      	str	r2, [r3, #0]
 80172c4:	f04f 30ff 	mov.w	r0, #4294967295
 80172c8:	4770      	bx	lr
 80172ca:	700a      	strb	r2, [r1, #0]
 80172cc:	2001      	movs	r0, #1
 80172ce:	4770      	bx	lr

080172d0 <__swhatbuf_r>:
 80172d0:	b570      	push	{r4, r5, r6, lr}
 80172d2:	460c      	mov	r4, r1
 80172d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d8:	2900      	cmp	r1, #0
 80172da:	b096      	sub	sp, #88	@ 0x58
 80172dc:	4615      	mov	r5, r2
 80172de:	461e      	mov	r6, r3
 80172e0:	da0d      	bge.n	80172fe <__swhatbuf_r+0x2e>
 80172e2:	89a3      	ldrh	r3, [r4, #12]
 80172e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80172e8:	f04f 0100 	mov.w	r1, #0
 80172ec:	bf14      	ite	ne
 80172ee:	2340      	movne	r3, #64	@ 0x40
 80172f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80172f4:	2000      	movs	r0, #0
 80172f6:	6031      	str	r1, [r6, #0]
 80172f8:	602b      	str	r3, [r5, #0]
 80172fa:	b016      	add	sp, #88	@ 0x58
 80172fc:	bd70      	pop	{r4, r5, r6, pc}
 80172fe:	466a      	mov	r2, sp
 8017300:	f000 f878 	bl	80173f4 <_fstat_r>
 8017304:	2800      	cmp	r0, #0
 8017306:	dbec      	blt.n	80172e2 <__swhatbuf_r+0x12>
 8017308:	9901      	ldr	r1, [sp, #4]
 801730a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801730e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017312:	4259      	negs	r1, r3
 8017314:	4159      	adcs	r1, r3
 8017316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801731a:	e7eb      	b.n	80172f4 <__swhatbuf_r+0x24>

0801731c <__smakebuf_r>:
 801731c:	898b      	ldrh	r3, [r1, #12]
 801731e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017320:	079d      	lsls	r5, r3, #30
 8017322:	4606      	mov	r6, r0
 8017324:	460c      	mov	r4, r1
 8017326:	d507      	bpl.n	8017338 <__smakebuf_r+0x1c>
 8017328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801732c:	6023      	str	r3, [r4, #0]
 801732e:	6123      	str	r3, [r4, #16]
 8017330:	2301      	movs	r3, #1
 8017332:	6163      	str	r3, [r4, #20]
 8017334:	b003      	add	sp, #12
 8017336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017338:	ab01      	add	r3, sp, #4
 801733a:	466a      	mov	r2, sp
 801733c:	f7ff ffc8 	bl	80172d0 <__swhatbuf_r>
 8017340:	9f00      	ldr	r7, [sp, #0]
 8017342:	4605      	mov	r5, r0
 8017344:	4639      	mov	r1, r7
 8017346:	4630      	mov	r0, r6
 8017348:	f7fd fd30 	bl	8014dac <_malloc_r>
 801734c:	b948      	cbnz	r0, 8017362 <__smakebuf_r+0x46>
 801734e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017352:	059a      	lsls	r2, r3, #22
 8017354:	d4ee      	bmi.n	8017334 <__smakebuf_r+0x18>
 8017356:	f023 0303 	bic.w	r3, r3, #3
 801735a:	f043 0302 	orr.w	r3, r3, #2
 801735e:	81a3      	strh	r3, [r4, #12]
 8017360:	e7e2      	b.n	8017328 <__smakebuf_r+0xc>
 8017362:	89a3      	ldrh	r3, [r4, #12]
 8017364:	6020      	str	r0, [r4, #0]
 8017366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801736a:	81a3      	strh	r3, [r4, #12]
 801736c:	9b01      	ldr	r3, [sp, #4]
 801736e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017372:	b15b      	cbz	r3, 801738c <__smakebuf_r+0x70>
 8017374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017378:	4630      	mov	r0, r6
 801737a:	f000 f84d 	bl	8017418 <_isatty_r>
 801737e:	b128      	cbz	r0, 801738c <__smakebuf_r+0x70>
 8017380:	89a3      	ldrh	r3, [r4, #12]
 8017382:	f023 0303 	bic.w	r3, r3, #3
 8017386:	f043 0301 	orr.w	r3, r3, #1
 801738a:	81a3      	strh	r3, [r4, #12]
 801738c:	89a3      	ldrh	r3, [r4, #12]
 801738e:	431d      	orrs	r5, r3
 8017390:	81a5      	strh	r5, [r4, #12]
 8017392:	e7cf      	b.n	8017334 <__smakebuf_r+0x18>

08017394 <_raise_r>:
 8017394:	291f      	cmp	r1, #31
 8017396:	b538      	push	{r3, r4, r5, lr}
 8017398:	4605      	mov	r5, r0
 801739a:	460c      	mov	r4, r1
 801739c:	d904      	bls.n	80173a8 <_raise_r+0x14>
 801739e:	2316      	movs	r3, #22
 80173a0:	6003      	str	r3, [r0, #0]
 80173a2:	f04f 30ff 	mov.w	r0, #4294967295
 80173a6:	bd38      	pop	{r3, r4, r5, pc}
 80173a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80173aa:	b112      	cbz	r2, 80173b2 <_raise_r+0x1e>
 80173ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80173b0:	b94b      	cbnz	r3, 80173c6 <_raise_r+0x32>
 80173b2:	4628      	mov	r0, r5
 80173b4:	f000 f852 	bl	801745c <_getpid_r>
 80173b8:	4622      	mov	r2, r4
 80173ba:	4601      	mov	r1, r0
 80173bc:	4628      	mov	r0, r5
 80173be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173c2:	f000 b839 	b.w	8017438 <_kill_r>
 80173c6:	2b01      	cmp	r3, #1
 80173c8:	d00a      	beq.n	80173e0 <_raise_r+0x4c>
 80173ca:	1c59      	adds	r1, r3, #1
 80173cc:	d103      	bne.n	80173d6 <_raise_r+0x42>
 80173ce:	2316      	movs	r3, #22
 80173d0:	6003      	str	r3, [r0, #0]
 80173d2:	2001      	movs	r0, #1
 80173d4:	e7e7      	b.n	80173a6 <_raise_r+0x12>
 80173d6:	2100      	movs	r1, #0
 80173d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80173dc:	4620      	mov	r0, r4
 80173de:	4798      	blx	r3
 80173e0:	2000      	movs	r0, #0
 80173e2:	e7e0      	b.n	80173a6 <_raise_r+0x12>

080173e4 <raise>:
 80173e4:	4b02      	ldr	r3, [pc, #8]	@ (80173f0 <raise+0xc>)
 80173e6:	4601      	mov	r1, r0
 80173e8:	6818      	ldr	r0, [r3, #0]
 80173ea:	f7ff bfd3 	b.w	8017394 <_raise_r>
 80173ee:	bf00      	nop
 80173f0:	2000004c 	.word	0x2000004c

080173f4 <_fstat_r>:
 80173f4:	b538      	push	{r3, r4, r5, lr}
 80173f6:	4d07      	ldr	r5, [pc, #28]	@ (8017414 <_fstat_r+0x20>)
 80173f8:	2300      	movs	r3, #0
 80173fa:	4604      	mov	r4, r0
 80173fc:	4608      	mov	r0, r1
 80173fe:	4611      	mov	r1, r2
 8017400:	602b      	str	r3, [r5, #0]
 8017402:	f7ea f905 	bl	8001610 <_fstat>
 8017406:	1c43      	adds	r3, r0, #1
 8017408:	d102      	bne.n	8017410 <_fstat_r+0x1c>
 801740a:	682b      	ldr	r3, [r5, #0]
 801740c:	b103      	cbz	r3, 8017410 <_fstat_r+0x1c>
 801740e:	6023      	str	r3, [r4, #0]
 8017410:	bd38      	pop	{r3, r4, r5, pc}
 8017412:	bf00      	nop
 8017414:	200082a0 	.word	0x200082a0

08017418 <_isatty_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	4d06      	ldr	r5, [pc, #24]	@ (8017434 <_isatty_r+0x1c>)
 801741c:	2300      	movs	r3, #0
 801741e:	4604      	mov	r4, r0
 8017420:	4608      	mov	r0, r1
 8017422:	602b      	str	r3, [r5, #0]
 8017424:	f7ea f904 	bl	8001630 <_isatty>
 8017428:	1c43      	adds	r3, r0, #1
 801742a:	d102      	bne.n	8017432 <_isatty_r+0x1a>
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	b103      	cbz	r3, 8017432 <_isatty_r+0x1a>
 8017430:	6023      	str	r3, [r4, #0]
 8017432:	bd38      	pop	{r3, r4, r5, pc}
 8017434:	200082a0 	.word	0x200082a0

08017438 <_kill_r>:
 8017438:	b538      	push	{r3, r4, r5, lr}
 801743a:	4d07      	ldr	r5, [pc, #28]	@ (8017458 <_kill_r+0x20>)
 801743c:	2300      	movs	r3, #0
 801743e:	4604      	mov	r4, r0
 8017440:	4608      	mov	r0, r1
 8017442:	4611      	mov	r1, r2
 8017444:	602b      	str	r3, [r5, #0]
 8017446:	f7ea f881 	bl	800154c <_kill>
 801744a:	1c43      	adds	r3, r0, #1
 801744c:	d102      	bne.n	8017454 <_kill_r+0x1c>
 801744e:	682b      	ldr	r3, [r5, #0]
 8017450:	b103      	cbz	r3, 8017454 <_kill_r+0x1c>
 8017452:	6023      	str	r3, [r4, #0]
 8017454:	bd38      	pop	{r3, r4, r5, pc}
 8017456:	bf00      	nop
 8017458:	200082a0 	.word	0x200082a0

0801745c <_getpid_r>:
 801745c:	f7ea b86e 	b.w	800153c <_getpid>

08017460 <_malloc_usable_size_r>:
 8017460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017464:	1f18      	subs	r0, r3, #4
 8017466:	2b00      	cmp	r3, #0
 8017468:	bfbc      	itt	lt
 801746a:	580b      	ldrlt	r3, [r1, r0]
 801746c:	18c0      	addlt	r0, r0, r3
 801746e:	4770      	bx	lr

08017470 <_init>:
 8017470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017472:	bf00      	nop
 8017474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017476:	bc08      	pop	{r3}
 8017478:	469e      	mov	lr, r3
 801747a:	4770      	bx	lr

0801747c <_fini>:
 801747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801747e:	bf00      	nop
 8017480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017482:	bc08      	pop	{r3}
 8017484:	469e      	mov	lr, r3
 8017486:	4770      	bx	lr
